
main.elf:     file format elf32-littlearm
main.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
0x70000001 off    0x0001dad4 vaddr 0x00015ad4 paddr 0x00015ad4 align 2**2
         filesz 0x000001b8 memsz 0x000001b8 flags r--
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x00015dbc memsz 0x00015dbc flags r-x
    LOAD off    0x00020400 vaddr 0x1fff8400 paddr 0x00015dbc align 2**15
         filesz 0x0000093c memsz 0x0000093c flags rw-
    LOAD off    0x00020d40 vaddr 0x1fff8d40 paddr 0x00016700 align 2**15
         filesz 0x00000000 memsz 0x00000f54 flags rw-
    LOAD off    0x00028000 vaddr 0x1fff8000 paddr 0x1fff8000 align 2**15
         filesz 0x00000000 memsz 0x00000400 flags rw-
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00015ad0  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fini         00000004  00015ad0  00015ad0  0001dad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    000001b8  00015ad4  00015ad4  0001dad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000130  00015c8c  00015c8c  0001dc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .usbdescriptortable 000000a0  1fff8000  1fff8000  00028000  2**2
                  ALLOC
  5 .usbbuffers   00000360  1fff80a0  1fff80a0  00028000  2**0
                  ALLOC
  6 .data         0000093c  1fff8400  00015dbc  00020400  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f54  1fff8d40  00016700  00020d40  2**3
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020d3c  2**0
                  CONTENTS, READONLY
  9 .comment      00000070  00000000  00000000  00020d66  2**0
                  CONTENTS, READONLY
 10 .debug_info   000355b7  00000000  00000000  00020dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007bda  00000000  00000000  0005638d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c57b  00000000  00000000  0005df67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f70  00000000  00000000  0006a4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000024a8  00000000  00000000  0006b452  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007e16  00000000  00000000  0006d8fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00013249  00000000  00000000  00075710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00004680  00000000  00000000  0008895c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00015ad0 l    d  .fini	00000000 .fini
00015ad4 l    d  .ARM.exidx	00000000 .ARM.exidx
00015c8c l    d  .ARM.extab	00000000 .ARM.extab
1fff8000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff80a0 l    d  .usbbuffers	00000000 .usbbuffers
1fff8400 l    d  .data	00000000 .data
1fff8d40 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003694 l     F .text	0000000c startup_default_early_hook
000036a0 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff8d40 l       .bss	00000000 completed.7863
00000434 l     F .text	00000000 frame_dummy
1fff8d44 l       .bss	00000000 object.7868
00015aac l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 FastLED.cpp
000004f0 l     F .text	0000000c _GLOBAL__sub_I_LEDS
00000000 l    df *ABS*	00000000 hsv2rgb.cpp
000004fc l     F .text	0000003a _ZL15nscale8x3_videoRhS_S_h
00000000 l    df *ABS*	00000000 Perlins.cpp
00013f64 l     O .text	00000100 _ZL1p
00000000 l    df *ABS*	00000000 main.cpp
000010e4 l     F .text	0000001c _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27
00001204 l     F .text	0000001c _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30
0000131c l     F .text	0000001c _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32
000019bc l     F .text	0000001c _GLOBAL__sub_I_modeChange
1fff90b8 l     O .bss	00000001 _ZZ4mainE6reboot
00000000 l    df *ABS*	00000000 BaseMode.cpp
00000000 l    df *ABS*	00000000 CloseEncounters.cpp
00001a04 l     F .text	0000003a _ZL15nscale8x3_videoRhS_S_h
00001a40 l     F .text	00000020 _ZL7random8v
00000000 l    df *ABS*	00000000 ColorMode.cpp
00000000 l    df *ABS*	00000000 MeltMode.cpp
00002608 l     F .text	0000001c _ZL8random16v
00000000 l    df *ABS*	00000000 Moon.cpp
00000000 l    df *ABS*	00000000 Rainbow.cpp
00000000 l    df *ABS*	00000000 analog.c
00002e28 l     F .text	000000e4 wait_for_cal
00014298 l     O .text	00000017 channel2sc1a
1fff90c1 l     O .bss	00000001 analog_right_shift
1fff90c2 l     O .bss	00000001 calibrating
1fff8414 l     O .data	00000001 analog_config_bits
1fff90c3 l     O .bss	00000001 analogReadBusyADC1
1fff90c4 l     O .bss	00000001 analogReadBusyADC0
1fff90c5 l     O .bss	00000001 analog_reference_internal
1fff8415 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 eeprom.c
000031b4 l     F .text	00000010 flexram_wait
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00003350 l     F .text	0000001c _GLOBAL__sub_I_Serial1
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00003428 l     F .text	0000001c _GLOBAL__sub_I_Serial2
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00003500 l     F .text	0000001c _GLOBAL__sub_I_Serial3
00000000 l    df *ABS*	00000000 IntervalTimer.cpp
00000000 l    df *ABS*	00000000 IPAddress.cpp
0000362c l     F .text	0000001c _GLOBAL__sub_I__ZN9IPAddressC2Ev
1fff9118 l     O .bss	00000008 _ZL11INADDR_NONE
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pins_teensy.c
1fff9120 l     O .bss	00000088 intFunc
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 serial1.c
1fff91ac l     O .bss	00000001 transmitting
1fff91ad l     O .bss	00000001 rx_buffer_tail
1fff91ae l     O .bss	00000040 tx_buffer
1fff91ee l     O .bss	00000040 rx_buffer
1fff922e l     O .bss	00000001 rx_buffer_head
1fff922f l     O .bss	00000001 tx_buffer_tail
1fff9230 l     O .bss	00000004 transmit_pin
1fff9234 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff9235 l     O .bss	00000001 transmitting
1fff9236 l     O .bss	00000001 rx_buffer_tail
1fff9237 l     O .bss	00000028 tx_buffer
1fff925f l     O .bss	00000040 rx_buffer
1fff929f l     O .bss	00000001 rx_buffer_head
1fff92a0 l     O .bss	00000001 tx_buffer_tail
1fff92a1 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial3.c
1fff92a2 l     O .bss	00000001 transmitting
1fff92a3 l     O .bss	00000001 rx_buffer_tail
1fff92a4 l     O .bss	00000028 tx_buffer
1fff92cc l     O .bss	00000040 rx_buffer
1fff930c l     O .bss	00000001 rx_buffer_head
1fff930d l     O .bss	00000001 tx_buffer_tail
1fff930e l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 Tone.cpp
000047b8 l     F .text	0000001c _GLOBAL__sub_I_tone_timer
00000000 l    df *ABS*	00000000 usb_desc.c
1fff841c l     O .data	00000012 device_descriptor
1fff8446 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 usb_dev.c
00004844 l     F .text	00000040 endpoint0_transmit
1fff9324 l     O .bss	00000004 ep0_tx_ptr
1fff9328 l     O .bss	00000010 rx_last
1fff9338 l     O .bss	00000004 tx_state
1fff933c l     O .bss	00000040 ep0_rx0_buf
1fff937c l     O .bss	00000010 rx_first
1fff938c l     O .bss	00000001 ep0_tx_bdt_bank
1fff9390 l     O .bss	00000040 ep0_rx1_buf
1fff93d0 l     O .bss	00000010 tx_first
1fff8000 l     O .usbdescriptortable	000000a0 table
1fff93e0 l     O .bss	00000010 tx_last
1fff93f0 l     O .bss	00000008 setup
1fff93f8 l     O .bss	00000002 ep0_tx_len
1fff93fb l     O .bss	00000008 reply_buffer
1fff9404 l     O .bss	00000001 ep0_tx_data_toggle
00000000 l    df *ABS*	00000000 usb_inst.cpp
00005084 l     F .text	0000001c _GLOBAL__sub_I_Serial
00000000 l    df *ABS*	00000000 usb_mem.c
1fff84bc l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_serial.c
1fff9419 l     O .bss	00000001 tx_noautoflush
1fff941c l     O .bss	00000004 tx_packet
1fff9420 l     O .bss	00000001 transmit_previous_timeout
1fff9424 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 WMath.cpp
1fff942c l     O .bss	00000004 _ZL4seed
00000000 l    df *ABS*	00000000 yield.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
1fff9430 l     O .bss	00000004 _ZL14emergency_used
1fff9438 l     O .bss	00000800 _ZL16emergency_buffer
00000000 l    df *ABS*	00000000 eh_arm.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00005698 l     F .text	0000003a _ZN10__cxxabiv1L24__is_gxx_exception_classEPc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
1fff9c38 l     O .bss	0000000c _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_personality.cc
00005944 l     F .text	00000032 _ZL12read_sleb128PKhPl
00005978 l     F .text	000000b0 _ZL28read_encoded_value_with_basehjPKhPj
00005a28 l     F .text	0000004a _ZL21base_of_encoded_valuehP15_Unwind_Context
00005a74 l     F .text	00000096 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00005f64 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 vterminate.cc
1fff9c48 l     O .bss	00000001 _ZZN9__gnu_cxx27__verbose_terminate_handlerEvE11terminating
00000000 l    df *ABS*	00000000 cp-demangle.c
00006428 l     F .text	00000096 d_make_comp
000064c0 l     F .text	00000032 d_make_name
000064f4 l     F .text	000000b2 d_cv_qualifiers
000065a8 l     F .text	00000038 d_ref_qualifier
000065e0 l     F .text	00000086 d_clone_suffix
00006668 l     F .text	00000154 d_substitution
000067bc l     F .text	00000046 d_append_char
00006804 l     F .text	0000004c d_number.isra.0
00006850 l     F .text	00000038 d_number_component
00006888 l     F .text	00000030 d_compact_number
000068b8 l     F .text	00000044 d_template_param
000068fc l     F .text	0000001e d_discriminator
0000691c l     F .text	00000084 d_source_name
000069a0 l     F .text	00000054 d_call_offset
000069f4 l     F .text	00000044 d_lookup_template_argument.isra.6
00006a38 l     F .text	00000086 d_find_pack
00006ac0 l     F .text	0000007c d_growable_string_callback_adapter
00006b3c l     F .text	000000cc d_expr_primary
00007750 l     F .text	0000065e d_encoding
00006f84 l     F .text	00000708 d_type
00006c08 l     F .text	000000bc d_template_args
00008128 l     F .text	000003bc d_expression
00006cc4 l     F .text	000002c0 d_name
00007eac l     F .text	0000027c d_unqualified_name
00007714 l     F .text	0000003c d_bare_function_type
0000768c l     F .text	00000088 d_parmlist
00007db0 l     F .text	000000fc d_operator_name
000084e4 l     F .text	00000064 d_exprlist
00008548 l     F .text	00000068 d_append_string
000085b0 l     F .text	0000252c d_print_comp.part.10
0000aadc l     F .text	00000016 d_print_comp
0000aaf4 l     F .text	00000546 d_print_mod
0000b7a0 l     F .text	00000074 d_print_expr_op
0000b814 l     F .text	000000aa d_print_subexpr
0000b2a0 l     F .text	000001a0 d_print_array_type.isra.9
0000b440 l     F .text	000001d8 d_print_function_type.isra.11
0000b618 l     F .text	00000186 d_print_cast.isra.12
0000b03c l     F .text	00000264 d_print_mod_list
0000b8c0 l     F .text	0000020c d_demangle_callback.constprop.16
00014814 l     O .text	000000c4 standard_subs
000148d8 l     O .text	00000294 cplus_demangle_builtin_types
00014b6c l     O .text	000003e0 cplus_demangle_operators
00000000 l    df *ABS*	00000000 eh_type.cc
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00015740 l     O .text	00000080 npio2_hw
000157c0 l     O .text	00000108 two_over_pi
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
000158c8 l     O .text	00000010 init_jk
000158d8 l     O .text	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 unwind-arm.c
0000de48 l     F .text	00000012 selfrel_offset31
0000de5c l     F .text	00000072 search_EIT_table
0000ded0 l     F .text	00000028 __gnu_unwind_get_pr_addr
0000def8 l     F .text	000000ac get_eit_entry
0000dfa4 l     F .text	00000058 restore_non_core_regs
0000dffc l     F .text	0000000c _Unwind_decode_typeinfo_ptr.isra.0
0000e008 l     F .text	00000004 __gnu_unwind_24bit.isra.1
0000e00c l     F .text	00000002 _Unwind_DebugHook
0000e010 l     F .text	0000003e unwind_phase2
0000e050 l     F .text	000000da unwind_phase2_forced
0000e240 l     F .text	0000001a _Unwind_GetGR
0000e290 l     F .text	0000001c _Unwind_SetGR
0000e31c l     F .text	000002e4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
0000ea10 l     F .text	00000032 next_unwind_byte
0000ea44 l     F .text	0000001a _Unwind_GetGR.constprop.0
0000ea60 l     F .text	00000004 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00015920 l     O .text	00000010 zeroes.6763
00015974 l     O .text	00000010 blanks.6762
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00011a60 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00011a80 l     F .text	00000130 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
1fff8d04 l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mprec.c
00015a90 l     O .text	0000000c p05.5269
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
1fff84c8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 /Applications/Arduino.app/Contents/Java/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/crti.o
00000000 l    df *ABS*	00000000 /Applications/Arduino.app/Contents/Java/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/crtn.o
00000000 l    df *ABS*	00000000 lib8tion.cpp
00000000 l    df *ABS*	00000000 leds.cpp
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000054d8 g     F .text	00000034 __cxa_free_exception
0000e9c8 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
0000e130 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
0000368c  w    F .text	00000006 adc0_isr
0000264c g     F .text	00000012 _ZN8MeltModeD0Ev
000061d4 g     F .text	00000004 _ZNKSt9type_info15__is_function_pEv
00001e14  w    F .text	00000064 _ZNSt6vectorIP3BarSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_
000051a4 g     F .text	0000001c usb_serial_available
00005f54 g     F .text	00000010 _ZSt10unexpectedv
00013940 g     F .text	00000024 _isatty_r
0000d794 g     F .text	00000012 .hidden __aeabi_dcmple
00003336  w    F .text	00000018 _ZN14HardwareSerial5writeEPKc
00013a10 g     F .text	00000030 .hidden __gnu_uldivmod_helper
00003728 g     F .text	00000004 _getpid
000047ac  w    F .text	0000000c _ZN13IntervalTimerD2Ev
000140a8  w    O .text	00000018 _ZTV15P9813ControllerILh8ELh9EL6EOrder10ELh4EE
000025cc g     F .text	0000003c _ZN9ColorModeC1EPKc4CHSVl
0000d6d0 g     F .text	0000007a .hidden __cmpdf2
0000cda8 g     F .text	00000006 fabs
00013964 g     F .text	00000028 _lseek_r
000053da  w    F .text	00000002 yield
000140c0  w    O .text	00000018 _ZTV15P9813ControllerILh10ELh11EL6EOrder10ELh4EE
000014cc  w    F .text	000000fc _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_
0000bacc g     F .text	000000c4 __cxa_demangle
000034c0  w    F .text	0000000c _ZN15HardwareSerial35writeEh
0000d6d0 g     F .text	0000007a .hidden __eqdf2
00013a44 g     F .text	00000296 .hidden __divdi3
00006038 g     F .text	00000070 __cxa_rethrow
1fff842e g     O .data	00000002 usb_string_manufacturer_name_default
00003f88 g     F .text	00000020 serial_available
000032f4  w    F .text	00000006 _ZN14HardwareSerial17transmitterEnableEh
0000d240 g     F .text	0000005a .hidden __floatdidf
0000368c  w    F .text	00000006 hard_fault_isr
00003474  w    F .text	00000014 _ZN15HardwareSerial35beginEm
0000368c  w    F .text	00000006 dma_ch6_isr
00002c9c g     F .text	00000012 _ZN7RainbowD0Ev
0000ff80 g     F .text	00000028 _kill_r
000019d8 g     F .text	0000000c _ZN8BaseModeD1Ev
00005450 g     F .text	00000014 _ZNSt9bad_allocD2Ev
0000550c g     F .text	00000000 __cxa_end_cleanup
0000300c g     F .text	00000054 analogReadAveraging
00001aa0 g     F .text	00000012 _ZN15CloseEncountersD0Ev
0000110e  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv
00001e78 g     F .text	000003fc _ZN15CloseEncounters6colorsEv
000045b4 g     F .text	00000090 serial3_putchar
00003bd4 g     F .text	00000020 _ZN5Print7printlnEv
0000433c g     F .text	00000020 serial2_available
0001367c g     F .text	00000020 __sseek
00012b74 g     F .text	000000f4 __sinit
0000368c  w    F .text	00000006 uart0_lon_isr
000048e0 g     F .text	00000078 usb_rx_memory
0000262c g     F .text	00000020 _ZN8MeltModeD2Ev
00011824 g     F .text	000000a8 __swbuf_r
000053b2 g     F .text	00000014 _Z6randomll
000060a8 g     F .text	00000014 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000146bc g     O .text	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0000368c  w    F .text	00000006 dma_ch8_isr
0000fabc g     F .text	00000002 __malloc_unlock
0000122e  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv
00003468  w    F .text	0000000c _ZN15HardwareSerial35writeEi
00004228 g     F .text	00000058 serial2_end
00002f0c g     F .text	000000b8 analog_init
00004958 g     F .text	00000080 usb_tx
0000dbe4 g     F .text	00000136 .hidden __divsf3
000117c0 g     F .text	0000004a _vdprintf_r
000031c4 g     F .text	0000006c eeprom_initialize
000019e4 g     F .text	00000014 _ZN8BaseModeD0Ev
1fff9056  w    O .bss	00000001 _ZZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEvE1R
000034bc  w    F .text	00000004 _ZN15HardwareSerial35clearEv
00001c30 g     F .text	00000064 _ZN15CloseEncounters18setTransitionColorEP4CRGBff4CHSVS2_
0000f964 g     F .text	000000c0 memmove
0000e884 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
000058e4 g     F .text	0000000c _ZNSt9exceptionD2Ev
0000e9a4 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
000032fe  w    F .text	00000004 _ZN14HardwareSerial4peekEv
00003778 g     F .text	00000028 init_pin_interrupts
0001300c g     F .text	0000004c _Balloc
1fff90c0 g     O .bss	00000001 modeChange
00015c8c g       .ARM.exidx	00000000 __exidx_end
0000368c  w    F .text	00000006 dma_error_isr
00014090  w    O .text	00000018 _ZTV15P9813ControllerILh6ELh7EL6EOrder10ELh4EE
0000368c  w    F .text	00000006 i2c0_isr
0000e600 g     F .text	00000006 .hidden __aeabi_unwind_cpp_pr0
0000d6c0 g     F .text	0000008a .hidden __gtdf2
00014628 g     O .text	00000014 _ZTVSt13bad_exception
000034e8  w    F .text	00000018 _ZN15HardwareSerial35writeEPKc
00003988 g     F .text	00000084 portd_isr
0000400c g     F .text	00000040 serial_clear
000033d0  w    F .text	00000004 _ZN15HardwareSerial23endEv
0000ed1c g     F .text	0000000a .hidden _Unwind_GetRegionStart
1fff90d0 g     O .bss	00000010 Serial1
00002294  w    F .text	00000064 _ZNSt6vectorIP7BlueDotSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_
0000e9a4 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
0000507a  w    F .text	00000008 _ZN16usb_serial_class5writeEPKhj
00013918 g     F .text	00000028 _fstat_r
000143c0 g     O .text	00000110 digital_pin_to_info_PGM
1fff9c90 g     O .bss	00000004 errno
0000bc40 g     F .text	00000120 floor
00015dbc g       .ARM.extab	00000000 _etext
0000125c  w    F .text	000000c0 _ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh
1fff8d40 g       .bss	00000000 _sbss
0000e9ec g     F .text	00000022 .hidden _Unwind_Backtrace
0000d75c g     F .text	00000010 .hidden __aeabi_cdcmple
0000328c  w    F .text	0000000c _ZN14HardwareSerial5writeEm
0000d86c g     F .text	00000160 .hidden __aeabi_fadd
000032fa  w    F .text	00000004 _ZN14HardwareSerial9availableEv
0000d868 g     F .text	00000164 .hidden __subsf3
00003a9c g     F .text	0000001c digitalRead
000055c4 g     F .text	00000064 __cxa_begin_cleanup
00003a0c g     F .text	00000030 porte_isr
00003844 g     F .text	00000088 portb_isr
00002624  w    F .text	00000008 _ZN8MeltMode4nameEv
0000e864 g     F .text	00000018 .hidden __restore_core_regs
0000e8a4 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
0000368c  w    F .text	00000006 spi1_isr
000056f4 g     F .text	000000d8 __cxa_call_unexpected
0000368c  w    F .text	00000006 uart3_status_isr
0000368c  w    F .text	00000006 mcm_isr
00003390  w    F .text	0000000c _ZN15HardwareSerial25writeEi
000025cc g     F .text	0000003c _ZN9ColorModeC2EPKc4CHSVl
00001df4  w    F .text	00000020 _ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP3BarEEPT_PKS5_S8_S6_
000035ea g     F .text	00000042 _ZNK9IPAddress7printToER5Print
0000330e  w    F .text	0000000c _ZN14HardwareSerial5writeEh
0000bdf8 g     F .text	0000043c __ieee754_rem_pio2
00002660 g     F .text	00000388 _ZN8MeltMode5frameEv
000043d4 g     F .text	000000a4 uart1_status_isr
0000e12c g     F .text	00000004 .hidden _Unwind_GetCFA
0000f830 g     F .text	00000134 memcpy
000043c0 g     F .text	00000014 serial2_clear
0000d74c g     F .text	00000020 .hidden __aeabi_cdrcmple
000004b8 g     F .text	00000038 _ZN8CFastLED4showEh
0000e25c g     F .text	00000034 .hidden _Unwind_VRS_Set
0000ddf4 g     F .text	00000012 .hidden __aeabi_fcmpgt
00012b68 g     F .text	0000000c _cleanup_r
0000625c g     F .text	0000000c _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
000102c8 g     F .text	000014f8 _svfprintf_r
0000d1d0 g     F .text	00000022 .hidden __floatsidf
1fff91a8 g     O .bss	00000004 systick_millis_count
0000d6c8 g     F .text	00000082 .hidden __ltdf2
0000368c  w    F .text	00000006 bus_fault_isr
00000b4c  w    F .text	00000040 _ZN14CLEDControllerC2Ev
0000368c  w    F .text	00000006 watchdog_isr
00006268 g     F .text	00000014 _ZN10__cxxabiv117__class_type_infoD1Ev
000139b4 g     F .text	00000000 .hidden __aeabi_uldivmod
000036d8 g     F .text	0000003c nvic_execution_priority
0000368c  w    F .text	00000006 i2c1_isr
1fff9310 g     O .bss	00000014 tone_timer
1fff9403 g     O .bss	00000001 usb_configuration
0000368c  w    F .text	00000006 dma_ch11_isr
000029e8 g     F .text	00000054 _ZN8MeltModeC1Ev
000033f4  w    F .text	0000000c _ZN15HardwareSerial29write9bitEm
00000000  w      *UND*	00000000 __fini_array_end
00003384  w    F .text	0000000c _ZN15HardwareSerial25writeEj
0000cdb0 g     F .text	00000050 __fpclassifyd
0000368c  w    F .text	00000006 i2c2_isr
1fff842e  w    O .data	00000002 usb_string_manufacturer_name
1fff9c80 g     O .bss	00000008 usb_rx_byte_count_data
00003534 g     F .text	00000018 pit1_isr
0000f1e0 g     F .text	00000010 malloc
00000ff6  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv
0000368c  w    F .text	00000006 dma_ch4_isr
00003140 g     F .text	00000074 software_isr
0000ff18 g     F .text	00000056 _raise_r
000036ac  w    F .text	0000000a _fstat
0000368c  w    F .text	00000006 dma_ch7_isr
0000d9d4 g     F .text	0000001c .hidden __aeabi_i2f
000159a0 g     O .text	000000c8 __mprec_tens
00004fc4 g     F .text	000000a0 usb_init
1fff9090  w    O .bss	0000001c _ZZN8CFastLED7addLedsIL12ESPIChipsets4ELh6ELh7EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
0000c238 g     F .text	00000250 __kernel_cos
0000dd24 g     F .text	00000066 .hidden __lesf2
0000455c g     F .text	00000058 serial3_end
0000d820 g     F .text	00000040 .hidden __fixunsdfsi
0000368c  w    F .text	00000006 lptmr_isr
1fff9c54 g     O .bss	00000004 __malloc_top_pad
00001a64 g     F .text	0000003c _ZN15CloseEncountersD1Ev
00003a3c g     F .text	00000020 rtc_set
1fff9104 g     O .bss	00000001 _ZN13IntervalTimer11PIT_enabledE
0000ffa8 g     F .text	00000004 _getpid_r
1fff90b0  w    O .bss	00000004 _ZGVZN8CFastLED7addLedsIL12ESPIChipsets4ELh8ELh9EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
0000e2ac g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
1fff8404 g     O .data	00000002 rand16seed
00002294  w    F .text	00000064 _ZNSt6vectorIP7BlueDotSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_
1fff8400 g     O .data	00000000 .hidden __dso_handle
0000d1b0 g     F .text	0000001e .hidden __aeabi_ui2d
00012f24 g     F .text	00000008 _localeconv_r
000041cc g     F .text	0000005c serial2_format
00005628 g     F .text	00000070 __gnu_end_cleanup
000131a0 g     F .text	00000012 __i2b
0000edf4 g     F .text	00000318 __sfvwrite_r
000062b0 g     F .text	00000024 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00014310  w    O .text	0000004c _ZTV15HardwareSerial2
00004690 g     F .text	00000034 serial3_getchar
00003298  w    F .text	0000000c _ZN14HardwareSerial5writeEl
1fff8400 g       .data	00000000 _sdata
0000cf2c g     F .text	00000000 .hidden __aeabi_drsub
0000fef4 g     F .text	00000024 _sbrk_r
00003f74 g     F .text	00000014 serial_flush
000001bc g     F .text	00000188 ResetHandler
00005120 g     F .text	0000004c usb_serial_getchar
0000e894 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00014700 g     O .text	00000020 _ZTVSt9type_info
0000368c  w    F .text	00000006 ftm2_isr
00001220  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv
1fff9c88 g     O .bss	00000008 usb_cdc_line_coding
00003a5c g     F .text	00000040 digitalWrite
0000368c  w    F .text	00000006 uart5_status_isr
1fff9058  w    O .bss	0000001c _ZZN8CFastLED7addLedsIL12ESPIChipsets4ELh10ELh11EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
0001398c g     F .text	00000028 _read_r
000058fc g     F .text	00000008 _ZNKSt9exception4whatEv
00002a54 g     F .text	00000012 _ZN4MoonD0Ev
000144d2 g     O .text	00000004 usb_endpoint_config_table
0000368c  w    F .text	00000006 dma_ch9_isr
000032bc  w    F .text	00000014 _ZN14HardwareSerial5beginEm
000029e8 g     F .text	00000054 _ZN8MeltModeC2Ev
000006a4 g     F .text	0000000c _ZN7PerlinsD1Ev
0000354c g     F .text	00000018 pit2_isr
00004144 g     F .text	00000088 serial2_begin
0000d780 g     F .text	00000012 .hidden __aeabi_dcmplt
00004670 g     F .text	00000020 serial3_available
0000e618 g     F .text	0000024a .hidden _Unwind_VRS_Pop
00013888 g     F .text	00000080 _fclose_r
00000fe8  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv
0000e610  w    F .text	00000006 .hidden __aeabi_unwind_cpp_pr2
00014568 g     O .text	0000000c _ZTISt9bad_alloc
1fff9c50 g     O .bss	00000004 __malloc_max_sbrked_mem
00001024  w    F .text	000000c0 _ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh
000033e4  w    F .text	00000004 _ZN15HardwareSerial25clearEv
0000113c  w    F .text	000000c8 _ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh
00001e14  w    F .text	00000064 _ZNSt6vectorIP3BarSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_
0000e9ec g     F .text	00000022 .hidden ___Unwind_Backtrace
00003ab8 g     F .text	00000038 pinMode
00001d98 g     F .text	0000005c _ZN15CloseEncounters7stripesEv
000050dc g     F .text	00000044 usb_free
0000cc38 g     F .text	0000016c __kernel_sin
0000d1f4 g     F .text	0000003a .hidden __extendsfdf2
00001398  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h
0000d4f0 g     F .text	000001d0 .hidden __aeabi_ddiv
00013f60 g     O .text	00000004 FastLED
0000cf38 g     F .text	00000276 .hidden __adddf3
0000dd2c g     F .text	0000005e .hidden __nesf2
00004280 g     F .text	00000090 serial2_putchar
1fff8408 g     O .data	00000004 leds_three
00014680 g     O .text	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
000033d4  w    F .text	00000004 _ZN15HardwareSerial29availableEv
0000435c g     F .text	00000034 serial2_getchar
1fff8d64 g     O .bss	00000004 _ZN14CLEDController7m_pTailE
00015ad4 g       .ARM.exidx	00000000 __exidx_start
0000d29c g     F .text	00000254 .hidden __aeabi_dmul
0000351c g     F .text	00000018 pit0_isr
000034d8  w    F .text	00000010 _ZN15HardwareSerial35writeEPKhj
0000262c g     F .text	00000020 _ZN8MeltModeD1Ev
00002504 g     F .text	00000014 _ZN9ColorModeD1Ev
000036b6  w    F .text	00000004 _isatty
00006298 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000053e8 g     F .text	00000008 _ZdlPv
0001591c g     O .text	00000004 _global_impure_ptr
00003444  w    F .text	0000000c _ZN15HardwareSerial35writeEm
0000fb28 g     F .text	000003cc _realloc_r
0000f190 g     F .text	00000050 __libc_init_array
0000368c  w    F .text	00000006 can0_wakeup_isr
00013cdc g     F .text	00000282 .hidden __udivdi3
0000e95c g     F .text	00000022 .hidden ___Unwind_RaiseException
00003410  w    F .text	00000018 _ZN15HardwareSerial25writeEPKc
0000368c  w    F .text	00000006 flash_cmd_isr
00003400  w    F .text	00000010 _ZN15HardwareSerial25writeEPKhj
00004478 g     F .text	00000088 serial3_begin
00015a68 g     O .text	00000028 __mprec_bigtens
0000ed4c g     F .text	0000000e abort
0000e980 g     F .text	00000022 .hidden ___Unwind_Resume
0000d1b0 g     F .text	0000001e .hidden __floatunsidf
00004708 g     F .text	000000a4 uart2_status_isr
00003714 g     F .text	00000010 _sbrk
1fff9074  w    O .bss	0000001c _ZZN8CFastLED7addLedsIL12ESPIChipsets4ELh8ELh9EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
00013448 g     F .text	00000046 __mcmp
00002a68 g     F .text	00000078 _ZN4MoonC2Ev
000037a0 g     F .text	00000054 attachInterrupt
1fff8418 g     O .data	00000004 __brkval
00005858 g     F .text	0000008c __cxa_end_catch
1fff9428 g     O .bss	00000001 usb_cdc_line_rtsdtr
00005304 g     F .text	00000048 usb_serial_flush_callback
000058f0 g     F .text	0000000c _ZNSt13bad_exceptionD2Ev
000033b0  w    F .text	00000020 _ZN15HardwareSerial25beginEmm
000016fc  w    F .text	000000ea _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_
00015a9c g     F .text	00000000 _init
00014128 g     O .text	00000018 _ZTV8BaseMode
00004644 g     F .text	00000016 serial3_write
0000368c  w    F .text	00000006 svcall_isr
000006d0 g     F .text	0000005c _ZN7Perlins4fadeEd
00003258 g     F .text	00000034 eeprom_write_byte
0000368c  w    F .text	00000006 dma_ch15_isr
00005f3c g     F .text	00000010 _ZSt9terminatev
00003c8c g     F .text	0000009c serial_begin
0000e8ac g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000024e8 g     F .text	00000018 _ZN15CloseEncounters5frameEv
000032d0  w    F .text	00000020 _ZN14HardwareSerial5beginEmm
00001100  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv
0000d868 g     F .text	00000164 .hidden __aeabi_fsub
0000c488 g     F .text	000007ae __kernel_rem_pio2
00002518 g     F .text	00000012 _ZN9ColorModeD0Ev
0000368c  w    F .text	00000006 uart1_error_isr
00012c70 g     F .text	00000030 __libc_fini_array
1fff9c94 g       .bss	00000000 _ebss
1fff90f0 g     O .bss	00000010 Serial3
000034a8  w    F .text	00000004 _ZN15HardwareSerial33endEv
0001475c g     O .text	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00000a8c  w    F .text	0000002c _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9clearLedsEi
00013104 g     F .text	00000040 __hi0bits
1fff90bc g     O .bss	00000004 lastActionTime
00002a40 g     F .text	00000014 _ZN4MoonD1Ev
00005b0c g     F .text	00000406 __gxx_personality_v0
000145b8 g     O .text	00000008 _ZTISt9exception
0000dde0 g     F .text	00000012 .hidden __aeabi_fcmpge
0000d7d0 g     F .text	0000004e .hidden __fixdfsi
0000368c g     F .text	00000006 unused_isr
0000368c  w    F .text	00000006 spi0_isr
000006c4 g     F .text	0000000c _ZN7PerlinsC1Ev
000034b4  w    F .text	00000004 _ZN15HardwareSerial34readEv
0000da00 g     F .text	0000007c .hidden __floatdisf
0000368c  w    F .text	00000006 dma_ch3_isr
000061c4 g     F .text	0000000c _ZNSt9type_infoD1Ev
1fff9c44 g     O .bss	00000004 __new_handler
0000fac0 g     F .text	00000058 _putc_r
00002a68 g     F .text	00000078 _ZN4MoonC1Ev
0000331a  w    F .text	0000000c _ZN14HardwareSerial9write9bitEm
000061dc g     F .text	00000014 _ZNSt9type_infoD0Ev
0000dd1c g     F .text	0000006e .hidden __gtsf2
00000bfe  w    F .text	00000020 _ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_
0000368c  w    F .text	00000006 flash_error_isr
0000330a  w    F .text	00000004 _ZN14HardwareSerial5clearEv
0000cf38 g     F .text	00000276 .hidden __aeabi_dadd
0000d6c8 g     F .text	00000082 .hidden __ledf2
00003306  w    F .text	00000004 _ZN14HardwareSerial5flushEv
00003e14 g     F .text	0000009c serial_putchar
0000ddcc g     F .text	00000012 .hidden __aeabi_fcmple
0000368c  w    F .text	00000006 uart5_error_isr
00002c88 g     F .text	00000014 _ZN7RainbowD1Ev
0000368c  w    F .text	00000006 rtc_seconds_isr
0000368c  w    F .text	00000006 pdb_isr
000132f0 g     F .text	0000009c __pow5mult
0000d230 g     F .text	0000006a .hidden __aeabi_ul2d
0000368c  w    F .text	00000006 usage_fault_isr
000061d8 g     F .text	00000004 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000e87c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
0000368c  w    F .text	00000006 dac1_isr
0000368c  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
00001ab2  w    F .text	00000024 _ZN5Print7printlnEPKc
1fff8d68 g     O .bss	000002ee leds
00003648  w    F .text	00000010 systick_isr
0000465c g     F .text	00000014 serial3_flush
1fff90ac  w    O .bss	00000004 _ZGVZN8CFastLED7addLedsIL12ESPIChipsets4ELh10ELh11EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
0000368c  w    F .text	00000006 rtc_alarm_isr
0000e980 g     F .text	00000022 .hidden _Unwind_Resume
1fff90c8 g     O .bss	00000004 _ZN11AudioStream12first_updateE
0000368c  w    F .text	00000006 dma_ch2_isr
1fff9408 g     O .bss	00000010 Serial
0000e1fc g     F .text	0000000e .hidden _Unwind_DeleteException
0000e1f8 g     F .text	00000002 .hidden _Unwind_Complete
0000368c  w    F .text	00000006 ftm1_isr
000142c0  w    O .text	0000004c _ZTV14HardwareSerial
00005074  w    F .text	00000006 _ZN16usb_serial_class5writeEh
00003694  w    F .text	0000000c startup_early_hook
0000368c  w    F .text	00000006 dma_ch13_isr
00002cb0 g     F .text	00000124 _ZN7Rainbow5frameEv
000033e0  w    F .text	00000004 _ZN15HardwareSerial25flushEv
000062d4 g     F .text	0000003e _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000368c  w    F .text	00000006 uart2_error_isr
0000d7bc g     F .text	00000012 .hidden __aeabi_dcmpgt
0000516c g     F .text	00000038 usb_serial_peekchar
00006224 g     F .text	00000036 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0000bbc8 g     F .text	00000074 cos
00012c68 g     F .text	00000002 __sfp_lock_acquire
000145c0 g     O .text	00000012 _ZTSSt13bad_exception
0000f738 g     F .text	00000090 memchr
1fff84a4 g     O .data	00000002 usb_string_serial_number_default
00003658 g     F .text	00000034 fault_isr
00012d3c g     F .text	0000019c _free_r
0000072c g     F .text	00000052 _ZN7Perlins4gradEiddd
00002c70 g     F .text	00000012 _ZN4Moon5frameEv
0000d7a8 g     F .text	00000012 .hidden __aeabi_dcmpge
0000368c  w    F .text	00000006 usb_charge_isr
00005070  w    F .text	00000004 _ZN16usb_serial_class5flushEv
0000368c  w    F .text	00000006 cmt_isr
0000cf34 g     F .text	0000027a .hidden __aeabi_dsub
00002504 g     F .text	00000014 _ZN9ColorModeD2Ev
1fff8d00 g     O .data	00000004 __malloc_sbrk_base
00005068  w    F .text	00000004 _ZN16usb_serial_class4readEv
0000368c  w    F .text	00000006 ftm3_isr
00002b80 g     F .text	000000ec _ZN4Moon3skyEv
0000368c  w    F .text	00000006 tsi0_isr
000146ec g     O .text	0000000d _ZTSSt9type_info
000032f0  w    F .text	00000004 _ZN14HardwareSerial3endEv
0000bd60 g     F .text	00000094 sin
0000d230 g     F .text	0000006a .hidden __floatundidf
00005448 g     F .text	00000008 _ZNKSt9bad_alloc4whatEv
000036ba  w    F .text	00000006 _lseek
000036c2  w    F .text	00000002 __cxa_pure_virtual
0001338c g     F .text	000000bc __lshift
00014550 g     O .text	00000014 _ZTVSt9bad_alloc
0000368c  w    F .text	00000006 spi2_isr
0000d9d4 g     F .text	0000001c .hidden __floatsisf
000136a4 g     F .text	00000100 __ssprint_r
0000ea64 g     F .text	0000028c .hidden __gnu_unwind_execute
000137a4 g     F .text	0000005e _vasnprintf_r
000143b0 g     O .text	0000000c _ZTV9IPAddress
000016c4  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h
1fff938d g     O .bss	00000001 usb_reboot_timer
000119b8 g     F .text	000000a8 __register_exitproc
00014584 g     O .text	0000000d _ZTSSt9bad_alloc
00003230 g     F .text	00000028 eeprom_read_byte
00010214 g     F .text	000000b4 strncmp
0000610c g     F .text	00000096 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000e88c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000017e6  w    F .text	000000ea _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_
00002fc4 g     F .text	00000048 analogReference
000131b4 g     F .text	0000013c __multiply
00000ab8  w    F .text	0000002c _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9clearLedsEi
00005290 g     F .text	00000016 usb_serial_putchar
00000490 g     F .text	00000026 _ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii
1fff9c58 g     O .bss	00000028 __malloc_current_mallinfo
0000dd2c g     F .text	0000005e .hidden __eqsf2
00013564 g     F .text	000000ba __d2b
000061c4 g     F .text	0000000c _ZNSt9type_infoD2Ev
00005518 g     F .text	000000ac __cxa_type_match
00002ae0 g     F .text	000000a0 _ZN4Moon4moonEv
0000368c  w    F .text	00000006 can0_bus_off_isr
00004310 g     F .text	00000016 serial2_write
000033e8  w    F .text	0000000c _ZN15HardwareSerial25writeEh
000061a4 g     F .text	00000020 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0000336c  w    F .text	0000000c _ZN15HardwareSerial25writeEm
0000fb18 g     F .text	00000010 realloc
0000111c  w    F .text	0000001e _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4initEv
1fff93fa g     O .bss	00000001 usb_rx_memory_needed
0000e1a4 g     F .text	00000044 .hidden __gnu_Unwind_Resume
000049d8 g     F .text	000005ec usb_isr
0000ed5c g     F .text	00000014 __cxa_atexit
0001461c g     O .text	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0000dbe4 g     F .text	00000136 .hidden __aeabi_fdiv
00013864 g     F .text	00000024 _close_r
0000d1d0 g     F .text	00000022 .hidden __aeabi_i2d
0000e89c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
0000539c g     F .text	00000016 _Z6randomm
0000f7c8 g     F .text	00000066 memcmp
00014530  w    O .text	00000020 _ZTV16usb_serial_class
0000368c  w    F .text	00000006 uart3_error_isr
0000f10c g     F .text	00000062 _fwrite_r
00005464 g     F .text	0000001c _ZNSt9bad_allocD0Ev
000019d8 g     F .text	0000000c _ZN8BaseModeD2Ev
0000d9f0 g     F .text	0000008c .hidden __floatundisf
000060a8 g     F .text	00000014 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00000b8c  w    F .text	00000072 _ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_
00003d28 g     F .text	0000005c serial_format
00005358 g     F .text	00000044 _Z6randomv
000118f4 g     F .text	000000c4 __swsetup_r
0000e95c g     F .text	00000022 .hidden _Unwind_RaiseException
00013a40  w    F .text	00000002 .hidden __aeabi_ldiv0
000037f4 g     F .text	00000050 porta_isr
0000d4f0 g     F .text	000001d0 .hidden __divdf3
000061d0 g     F .text	00000004 _ZNKSt9type_info14__is_pointer_pEv
1fff80a0 g     O .usbbuffers	00000360 usb_buffer_memory
0000368c  w    F .text	00000006 low_voltage_isr
1fff88f4 g     O .data	00000408 __malloc_av_
0000d9cc g     F .text	00000024 .hidden __aeabi_ui2f
0000368c  w    F .text	00000006 can0_error_isr
00002c88 g     F .text	00000014 _ZN7RainbowD2Ev
00003eb0 g     F .text	000000c4 serial_write
00003b58 g     F .text	0000007c _init_Teensyduino_internal_
0000d29c g     F .text	00000254 .hidden __muldf3
00013620 g     F .text	00000022 __sread
00014598 g     O .text	00000014 _ZTVSt9exception
000046f4 g     F .text	00000014 serial3_clear
000052a8 g     F .text	0000005c usb_serial_flush_output
0000368c  w    F .text	00000006 dma_ch12_isr
0000fab8 g     F .text	00000002 __malloc_lock
00000780 g     F .text	0000030a _ZN7Perlins6pnoiseEddd
00000000  w      *UND*	00000000 __fini_array_start
00014720 g     O .text	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00005fa8 g     F .text	00000090 __cxa_throw
00012b3c g     F .text	0000002c _fflush_r
00013804 g     F .text	0000005e _calloc_r
0000339c  w    F .text	00000014 _ZN15HardwareSerial25beginEm
00003564 g     F .text	00000018 pit3_isr
00001ad6  w    F .text	00000022 _ZN4CRGBpLERKS_
0000dd2c g     F .text	0000005e .hidden __cmpsf2
000038cc g     F .text	000000bc portc_isr
0000fa24 g     F .text	00000094 memset
00001b5c g     F .text	000000d4 _ZN15CloseEncounters18setTransitionColorEP4CRGBffS0_S0_
00000c20 g     F .text	000003c8 main
1fff9c4c g     O .bss	00000004 __malloc_max_total_mem
00014220 g     O .text	00000018 _ZTV9ColorMode
1fff8d5c g     O .bss	00000001 LEDS
00004390 g     F .text	00000030 serial2_peek
0000da00 g     F .text	0000007c .hidden __aeabi_l2f
00005934 g     F .text	00000008 __cxa_get_globals_fast
0000dd24 g     F .text	00000066 .hidden __ltsf2
00000bfe  w    F .text	00000020 _ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIJS1_EEEvDpOT_
0000368c  w    F .text	00000006 memmanage_fault_isr
0001369c g     F .text	00000008 __sclose
000047d4 g     F .text	00000070 usb_init_serialnumber
00013908 g     F .text	00000010 fclose
00015ad0 g       .text	00000000 __init_array_end
00011bb0 g     F .text	00000e34 _dtoa_r
0000f200 g     F .text	00000538 _malloc_r
0000368c  w    F .text	00000006 debugmonitor_isr
00001004  w    F .text	0000001e _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4initEv
00005904 g     F .text	00000008 _ZNKSt13bad_exception4whatEv
0000d240 g     F .text	0000005a .hidden __aeabi_l2d
00014750 g     O .text	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000034cc  w    F .text	0000000c _ZN15HardwareSerial39write9bitEm
00012ed8 g     F .text	0000004a _fwalk
00003af0 g     F .text	00000040 micros
00000000  w      *UND*	00000000 __libc_fini
0000d9f0 g     F .text	0000008c .hidden __aeabi_ul2f
000058f0 g     F .text	0000000c _ZNSt13bad_exceptionD1Ev
0000368c  w    F .text	00000006 cmp1_isr
0000368c  w    F .text	00000006 ftm0_isr
0000dd94 g     F .text	00000010 .hidden __aeabi_cfcmple
00012ca0 g     F .text	0000009c _malloc_trim_r
0000e190 g     F .text	00000014 .hidden __gnu_Unwind_ForcedUnwind
000051c0 g     F .text	000000d0 usb_serial_write
1fff84a0 g     O .data	00000002 string0
0000da7c g     F .text	00000168 .hidden __mulsf3
000036a0  w    F .text	00000002 startup_late_hook
000034b0  w    F .text	00000004 _ZN15HardwareSerial34peekEv
00005064  w    F .text	00000004 _ZN16usb_serial_class9availableEv
0000fff8 g     F .text	00000000 strcmp
00001a64 g     F .text	0000003c _ZN15CloseEncountersD2Ev
0000345c  w    F .text	0000000c _ZN15HardwareSerial35writeEj
00003488  w    F .text	00000020 _ZN15HardwareSerial35beginEmm
0000e1e8 g     F .text	00000010 .hidden __gnu_Unwind_Resume_or_Rethrow
00003450  w    F .text	0000000c _ZN15HardwareSerial35writeEl
1fff848a  w    O .data	00000002 usb_string_product_name
00000000  w      *UND*	00000000 __gnu_Unwind_Find_exidx
00002a40 g     F .text	00000014 _ZN4MoonD2Ev
0000cf18 g     F .text	00000012 copysign
00003d84 g     F .text	00000058 serial_end
00003b30 g     F .text	00000028 delay
0000d6d0 g     F .text	0000007a .hidden __nedf2
00015ad0 g     F .fini	00000000 _fini
000032a4  w    F .text	0000000c _ZN14HardwareSerial5writeEj
0000e864 g     F .text	00000018 .hidden restore_core_regs
0000e948 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
000060bc g     F .text	0000001c _ZN10__cxxabiv120__si_class_type_infoD0Ev
000006b0 g     F .text	00000014 _ZN7PerlinsD0Ev
0000ffac g     F .text	0000004c sprintf
00003c00 g     F .text	0000001a _ZN5Print6printfEPKcz
0000368c  w    F .text	00000006 i2s0_rx_isr
0000368c  w    F .text	00000006 uart4_error_isr
000035a0 g     F .text	00000038 _ZN13IntervalTimer8stop_PITEv
00014280 g     O .text	00000018 _ZTV7Rainbow
00011a74 g     F .text	0000000c atexit
000036d0  w    F .text	00000006 __cxa_guard_release
0000dd1c g     F .text	0000006e .hidden __gesf2
000118cc g     F .text	00000028 _write_r
000022f8 g     F .text	000001f0 _ZN15CloseEncounters4blueEv
0000d860 g     F .text	0000016c .hidden __aeabi_frsub
0000ed44 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
000056d4 g     F .text	0000001e __cxa_call_terminate
00000b4c  w    F .text	00000040 _ZN14CLEDControllerC1Ev
000013d0  w    F .text	000000fc _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_
0000368c  w    F .text	00000006 can0_message_isr
1fff88f0 g     O .data	00000004 _impure_ptr
000145b0 g     O .text	00000008 _ZTIN10__cxxabiv115__forced_unwindE
1fff8410 g     O .data	00000004 leds_one
0000dda4 g     F .text	00000012 .hidden __aeabi_fcmpeq
000129e8 g     F .text	00000152 __sflush_r
0000ce00 g     F .text	00000114 scalbn
0000368c  w    F .text	00000006 nmi_isr
000033d8  w    F .text	00000004 _ZN15HardwareSerial24peekEv
0000da7c g     F .text	00000168 .hidden __aeabi_fmul
000035d8 g     F .text	00000012 _ZN13IntervalTimer3endEv
00015aa8 g       .text	00000000 __preinit_array_end
000006a4 g     F .text	0000000c _ZN7PerlinsD2Ev
0000534c g     F .text	0000000c _Z10randomSeedm
0000dd8c g     F .text	00000018 .hidden __aeabi_cfrcmple
0000368c  w    F .text	00000006 sdhc_isr
00014360  w    O .text	0000004c _ZTV15HardwareSerial3
000034b8  w    F .text	00000004 _ZN15HardwareSerial35flushEv
00002dd4 g     F .text	00000054 _ZN7RainbowC2Ev
0000ed70 g     F .text	00000028 fputc
00000464  w    F .text	0000002c _ZN14CLEDController13getAdjustmentEh
00004884 g     F .text	00000038 usb_rx
000144d8 g     O .text	00000054 usb_descriptor_list
000145f8 g     O .text	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0000368c  w    F .text	00000006 dma_ch10_isr
0000357c g     F .text	00000024 _ZN13IntervalTimer11disable_PITEv
000032b0  w    F .text	0000000c _ZN14HardwareSerial5writeEi
0000ed28 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00014068 g     O .text	00000010 _ZTV7Perlins
0000d820 g     F .text	00000040 .hidden __aeabi_d2uiz
0000368c  w    F .text	00000006 uart0_error_isr
000057cc g     F .text	0000008c __cxa_begin_catch
00006268 g     F .text	00000014 _ZN10__cxxabiv117__class_type_infoD2Ev
00005f4c g     F .text	00000008 _ZN10__cxxabiv112__unexpectedEPFvvE
000018d0  w    F .text	000000ea _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_
000050a0 g     F .text	0000003c usb_malloc
00002c82  w    F .text	00000004 _ZN7Rainbow4nameEv
0000ddb8 g     F .text	00000012 .hidden __aeabi_fcmplt
000015c8  w    F .text	000000fc _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_
1fff9108 g     O .bss	00000010 _ZN13IntervalTimer7PIT_ISRE
00001398  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC2EPK4CRGBiRS2_h
0000e20c g     F .text	00000034 .hidden _Unwind_VRS_Get
20008000 g       *ABS*	00000000 _estack
00005920 g     F .text	00000014 _ZNSt13bad_exceptionD0Ev
1fff84c4 g     O .data	00000004 _ZN10__cxxabiv119__terminate_handlerE
0000e934 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
0000bb90 g     F .text	0000001c __gcclibcxx_demangle_callback
0000d76c g     F .text	00000012 .hidden __aeabi_dcmpeq
00005480 g     F .text	00000058 __cxa_allocate_exception
0000f170 g     F .text	00000020 fwrite
000146b0 g     O .text	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00003bf4  w    F .text	0000000c _write
0000ecf0 g     F .text	0000002a .hidden __gnu_unwind_frame
0000e9c8 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
1fff8d3c g       .data	00000000 _edata
0000368c  w    F .text	00000006 i2s0_tx_isr
0000368c  w    F .text	00000006 adc1_isr
00000b10 g     F .text	0000003c _Z16modeButtonChangev
0000ed98 g     F .text	0000004c _fputs_r
0000368c  w    F .text	00000006 cmp0_isr
0000373a g     F .text	0000003c ultoa
0000de08 g     F .text	0000003e .hidden __aeabi_f2uiz
000016c4  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC2ERK4CRGBiRS2_h
000058e4 g     F .text	0000000c _ZNSt9exceptionD1Ev
1fff840c g     O .data	00000004 leds_two
00013644 g     F .text	00000038 __swrite
000053f0 g     F .text	00000058 _Znwj
1fff8cfc g     O .data	00000004 __malloc_trim_threshold
0000506c  w    F .text	00000004 _ZN16usb_serial_class4peekEv
00001338  w    F .text	00000060 _ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv
00014078  w    O .text	00000018 _ZTV14CLEDController
00003648 g     F .text	00000010 systick_default_isr
000060d8 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000d9cc g     F .text	00000024 .hidden __floatunsisf
00013490 g     F .text	000000d4 __mdiff
00001a60  w    F .text	00000004 _ZN15CloseEncounters4nameEv
0000d7d0 g     F .text	0000004e .hidden __aeabi_d2iz
00005f14 g     F .text	00000026 _ZN10__cxxabiv111__terminateEPFvvE
0000e8f0 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00003302  w    F .text	00000004 _ZN14HardwareSerial4readEv
000033dc  w    F .text	00000004 _ZN15HardwareSerial24readEv
1fff9418 g     O .bss	00000001 usb_cdc_transmit_flush_timer
00003724 g     F .text	00000004 _kill
0000dd94 g     F .text	00000010 .hidden __aeabi_cfcmpeq
00005450 g     F .text	00000014 _ZNSt9bad_allocD1Ev
00015c8c g       .ARM.extab	00000000 __extab_start
1fff90ce g     O .bss	00000002 _ZN11AudioStream16cpu_cycles_totalE
0000252c g     F .text	000000a0 _ZN9ColorMode5frameEv
000053c6 g     F .text	00000014 _Z3maplllll
00012c6c g     F .text	00000002 __sfp_lock_release
00014670 g     O .text	0000000c _ZTISt13bad_exception
00002500  w    F .text	00000004 _ZN9ColorMode4nameEv
0000368c  w    F .text	00000006 dac0_isr
0000123c  w    F .text	0000001e _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4initEv
00004328 g     F .text	00000014 serial2_flush
00001c94 g     F .text	00000104 _ZN15CloseEncounters10paintPixelEPhib
00000b8c  w    F .text	00000072 _ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIJS1_EEEvDpOT_
000036a2  w    F .text	00000004 _read
00013a40  w    F .text	00000002 .hidden __aeabi_idiv0
00015aa8 g       .text	00000000 __init_array_start
000006c4 g     F .text	0000000c _ZN7PerlinsC2Ev
1fff8d60 g     O .bss	00000004 _ZN14CLEDController7m_pHeadE
00003060 g     F .text	000000e0 analogRead
00014240 g     O .text	00000018 _ZTV8MeltMode
0000de08 g     F .text	0000003e .hidden __fixunssfsi
0000404c g     F .text	000000f8 uart0_status_isr
00001af8 g     F .text	00000064 _ZN15CloseEncountersC1Ev
000036c0  w    F .text	00000002 _exit
0000368c  w    F .text	00000006 mcg_isr
000046c4 g     F .text	00000030 serial3_peek
0000593c g     F .text	00000008 __cxa_get_globals
00000400 g     O .text	00000010 flashconfigbytes
00012f2c g     F .text	000000e0 __smakebuf_r
1fff84c0 g     O .data	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00014260 g     O .text	00000018 _ZTV4Moon
0000372c g     F .text	0000000e strlen
000146e4 g     O .text	00000008 _ZTISt9type_info
00014140 g     O .text	00000018 _ZTV15CloseEncounters
0000e608  w    F .text	00000006 .hidden __aeabi_unwind_cpp_pr1
0000d75c g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000d6c0 g     F .text	0000008a .hidden __gedf2
000047ac  w    F .text	0000000c _ZN13IntervalTimerD1Ev
00014640 g     O .text	0000000d _ZTSSt9exception
1fff848a g     O .data	00000002 usb_string_product_name_default
1fff90b4  w    O .bss	00000004 _ZGVZN8CFastLED7addLedsIL12ESPIChipsets4ELh6ELh7EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
00003326  w    F .text	00000010 _ZN14HardwareSerial5writeEPKhj
0001180c g     F .text	00000018 vdprintf
0000368c  w    F .text	00000006 dma_ch1_isr
0000bbac g     F .text	0000001a __cxa_current_exception_type
000139e0 g     F .text	00000030 .hidden __gnu_ldivmod_helper
0000590c g     F .text	00000014 _ZNSt9exceptionD0Ev
00015dbc g       .ARM.extab	00000000 __extab_end
000019f8 g     F .text	0000000c _ZN8BaseModeC2Ev
000048bc g     F .text	00000024 usb_tx_packet_count
00003378  w    F .text	0000000c _ZN15HardwareSerial25writeEl
0000d1f4 g     F .text	0000003a .hidden __aeabi_f2d
0000368c  w    F .text	00000006 dma_ch5_isr
0000ede4 g     F .text	00000010 fputs
0000ed3c g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00002a3c  w    F .text	00000004 _ZN4Moon4nameEv
0000368c  w    F .text	00000006 can0_rx_warn_isr
1fff9100 g     O .bss	00000004 _ZN13IntervalTimer8PIT_usedE
00003fa8 g     F .text	00000034 serial_getchar
00000ae4  w    F .text	0000002c _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9clearLedsEi
000034ac  w    F .text	00000004 _ZN15HardwareSerial39availableEv
0000368c  w    F .text	00000006 can0_tx_warn_isr
0000368c  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1fff90cc g     O .bss	00000002 _ZN11AudioStream20cpu_cycles_total_maxE
0000cf34 g     F .text	0000027a .hidden __subdf3
00015aa8 g       .text	00000000 __preinit_array_start
00013144 g     F .text	0000005a __lo0bits
00003fdc g     F .text	00000030 serial_peek
000053dc g     F .text	0000000a __aeabi_atexit
000061f0 g     F .text	0000002e _ZNKSt9type_infoeqERKS_
000036c4  w    F .text	0000000c __cxa_guard_acquire
00000000  w      *UND*	00000000 __register_frame_info
00003ddc g     F .text	00000038 serial_set_transmit_pin
0000368c  w    F .text	00000006 cmp2_isr
00001af8 g     F .text	00000064 _ZN15CloseEncountersC2Ev
0000d86c g     F .text	00000160 .hidden __addsf3
0000368c  w    F .text	00000006 pendablesrvreq_isr
0000368c  w    F .text	00000006 wakeup_isr
00014650 g     O .text	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00002dd4 g     F .text	00000054 _ZN7RainbowC1Ev
000019f8 g     F .text	0000000c _ZN8BaseModeC1Ev
00006220 g     F .text	00000004 _ZNKSt9type_info10__do_catchEPKS_PPvj
00000000 g     O .text	000001bc gVectors
00003c1a g     F .text	00000070 _ZN5Print11printNumberEmhh
00004500 g     F .text	0000005c serial3_format
0000ff70 g     F .text	00000010 raise
000036a6  w    F .text	00000006 _close
0000f1f0 g     F .text	00000010 free
00006314 g     F .text	00000114 _ZN9__gnu_cxx27__verbose_terminate_handlerEv
0001306c g     F .text	00000096 __multadd
0000627c g     F .text	0000001c _ZN10__cxxabiv117__class_type_infoD0Ev
00013058 g     F .text	00000012 _Bfree
1fff90e0 g     O .bss	00000010 Serial2
00000536 g     F .text	0000016e _Z15hsv2rgb_rainbowRK4CHSVR4CRGB
0000368c  w    F .text	00000006 dma_ch0_isr
00002274  w    F .text	00000020 _ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP7BlueDotEEPT_PKS5_S8_S6_
1fff84a4  w    O .data	00000002 usb_string_serial_number



Disassembly of section .text:

00000000 <gVectors>:
       0:	00 80 00 20 bd 01 00 00 8d 36 00 00 8d 36 00 00     ... .....6...6..
      10:	8d 36 00 00 8d 36 00 00 8d 36 00 00 59 36 00 00     .6...6...6..Y6..
      20:	59 36 00 00 59 36 00 00 59 36 00 00 8d 36 00 00     Y6..Y6..Y6...6..
      30:	8d 36 00 00 59 36 00 00 8d 36 00 00 49 36 00 00     .6..Y6...6..I6..
      40:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      50:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      60:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      70:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      80:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      90:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      a0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      b0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      c0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      d0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      e0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
      f0:	8d 36 00 00 4d 40 00 00 8d 36 00 00 d5 43 00 00     .6..M@...6...C..
     100:	8d 36 00 00 09 47 00 00 8d 36 00 00 8d 36 00 00     .6...G...6...6..
     110:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
     120:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
     130:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
     140:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
     150:	1d 35 00 00 35 35 00 00 4d 35 00 00 65 35 00 00     .5..55..M5..e5..
     160:	8d 36 00 00 d9 49 00 00 8d 36 00 00 8d 36 00 00     .6...I...6...6..
     170:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
     180:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
     190:	8d 36 00 00 8d 36 00 00 8d 36 00 00 f5 37 00 00     .6...6...6...7..
     1a0:	45 38 00 00 cd 38 00 00 89 39 00 00 0d 3a 00 00     E8...8...9...:..
     1b0:	8d 36 00 00 8d 36 00 00 41 31 00 00                 .6...6..A1..

000001bc <ResetHandler>:
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));

__attribute__ ((section(".startup")))
void ResetHandler(void)
{
     1bc:	b508      	push	{r3, lr}
	unsigned int i;
#if F_CPU <= 2000000
	volatile int n;
#endif

	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1be:	4b49      	ldr	r3, [pc, #292]	; (2e4 <ResetHandler+0x128>)
     1c0:	f24c 5220 	movw	r2, #50464	; 0xc520
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f003 fa60 	bl	3694 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b44      	ldr	r3, [pc, #272]	; (2e8 <ResetHandler+0x12c>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a43      	ldr	r2, [pc, #268]	; (2ec <ResetHandler+0x130>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a43      	ldr	r2, [pc, #268]	; (2f0 <ResetHandler+0x134>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	f5a3 4330 	sub.w	r3, r3, #45056	; 0xb000
     1e8:	3b20      	subs	r3, #32
     1ea:	681a      	ldr	r2, [r3, #0]
     1ec:	f412 7280 	ands.w	r2, r2, #256	; 0x100
     1f0:	d104      	bne.n	1fc <ResetHandler+0x40>
		RTC_SR = 0;
     1f2:	4940      	ldr	r1, [pc, #256]	; (2f4 <ResetHandler+0x138>)
     1f4:	600a      	str	r2, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f6:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
     1fa:	601a      	str	r2, [r3, #0]
	}

	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1fc:	4b3e      	ldr	r3, [pc, #248]	; (2f8 <ResetHandler+0x13c>)
     1fe:	781a      	ldrb	r2, [r3, #0]
     200:	0711      	lsls	r1, r2, #28
     202:	d503      	bpl.n	20c <ResetHandler+0x50>
     204:	781a      	ldrb	r2, [r3, #0]
     206:	f042 0208 	orr.w	r2, r2, #8
     20a:	701a      	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	4b3b      	ldr	r3, [pc, #236]	; (2fc <ResetHandler+0x140>)
     20e:	222a      	movs	r2, #42	; 0x2a
     210:	701a      	strb	r2, [r3, #0]
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     212:	2300      	movs	r3, #0
     214:	4a3a      	ldr	r2, [pc, #232]	; (300 <ResetHandler+0x144>)
     216:	493b      	ldr	r1, [pc, #236]	; (304 <ResetHandler+0x148>)
     218:	1898      	adds	r0, r3, r2
     21a:	4288      	cmp	r0, r1
     21c:	d204      	bcs.n	228 <ResetHandler+0x6c>
     21e:	493a      	ldr	r1, [pc, #232]	; (308 <ResetHandler+0x14c>)
     220:	5859      	ldr	r1, [r3, r1]
     222:	5099      	str	r1, [r3, r2]
     224:	3304      	adds	r3, #4
     226:	e7f5      	b.n	214 <ResetHandler+0x58>
     228:	4b38      	ldr	r3, [pc, #224]	; (30c <ResetHandler+0x150>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     22a:	4a39      	ldr	r2, [pc, #228]	; (310 <ResetHandler+0x154>)
     22c:	4293      	cmp	r3, r2
     22e:	f04f 0200 	mov.w	r2, #0
     232:	d202      	bcs.n	23a <ResetHandler+0x7e>
     234:	f843 2b04 	str.w	r2, [r3], #4
     238:	e7f7      	b.n	22a <ResetHandler+0x6e>
	SCB_VTOR = 0;	// use vector table in flash
     23a:	4b36      	ldr	r3, [pc, #216]	; (314 <ResetHandler+0x158>)
     23c:	601a      	str	r2, [r3, #0]
     23e:	f6a3 1308 	subw	r3, r3, #2312	; 0x908

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     242:	2280      	movs	r2, #128	; 0x80
     244:	f803 2b01 	strb.w	r2, [r3], #1
     248:	4a33      	ldr	r2, [pc, #204]	; (318 <ResetHandler+0x15c>)
     24a:	4293      	cmp	r3, r2
     24c:	d1f9      	bne.n	242 <ResetHandler+0x86>
	//  C1[IREFS] bit is written to 1
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
     24e:	4b33      	ldr	r3, [pc, #204]	; (31c <ResetHandler+0x160>)
     250:	220a      	movs	r2, #10
     252:	701a      	strb	r2, [r3, #0]
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     254:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
     258:	2224      	movs	r2, #36	; 0x24
     25a:	701a      	strb	r2, [r3, #0]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     25c:	22a0      	movs	r2, #160	; 0xa0
     25e:	f803 2c01 	strb.w	r2, [r3, #-1]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     262:	4b2f      	ldr	r3, [pc, #188]	; (320 <ResetHandler+0x164>)
     264:	781a      	ldrb	r2, [r3, #0]
     266:	0792      	lsls	r2, r2, #30
     268:	d5fb      	bpl.n	262 <ResetHandler+0xa6>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     26a:	781a      	ldrb	r2, [r3, #0]
     26c:	06d0      	lsls	r0, r2, #27
     26e:	d4fc      	bmi.n	26a <ResetHandler+0xae>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     270:	781a      	ldrb	r2, [r3, #0]
     272:	f002 020c 	and.w	r2, r2, #12
     276:	2a08      	cmp	r2, #8
     278:	d1fa      	bne.n	270 <ResetHandler+0xb4>
	//   C1[IREFS] bit is written to 0
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
     27a:	4b2a      	ldr	r3, [pc, #168]	; (324 <ResetHandler+0x168>)
     27c:	2205      	movs	r2, #5
     27e:	701a      	strb	r2, [r3, #0]
    #elif F_CPU == 144000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(12); // config PLL for 144 MHz output
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
     280:	2243      	movs	r2, #67	; 0x43
     282:	705a      	strb	r2, [r3, #1]
    #else
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
    #endif
	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     284:	4b26      	ldr	r3, [pc, #152]	; (320 <ResetHandler+0x164>)
     286:	781a      	ldrb	r2, [r3, #0]
     288:	0691      	lsls	r1, r2, #26
     28a:	d5fb      	bpl.n	284 <ResetHandler+0xc8>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     28c:	781a      	ldrb	r2, [r3, #0]
     28e:	0652      	lsls	r2, r2, #25
     290:	d5fc      	bpl.n	28c <ResetHandler+0xd0>
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) |	 SIM_CLKDIV1_OUTDIV4(3);
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash, USB = 72 * 2 / 3
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) |	 SIM_CLKDIV1_OUTDIV4(2);
     292:	4b25      	ldr	r3, [pc, #148]	; (328 <ResetHandler+0x16c>)
     294:	f04f 7281 	mov.w	r2, #16908288	; 0x1020000
     298:	601a      	str	r2, [r3, #0]
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(2) | SIM_CLKDIV2_USBFRAC;
     29a:	2205      	movs	r2, #5
     29c:	605a      	str	r2, [r3, #4]
#error "Error, F_CPU must be 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     29e:	4b23      	ldr	r3, [pc, #140]	; (32c <ResetHandler+0x170>)
     2a0:	2220      	movs	r2, #32
     2a2:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	781b      	ldrb	r3, [r3, #0]
     2a8:	f003 030c 	and.w	r3, r3, #12
     2ac:	2b0c      	cmp	r3, #12
     2ae:	d1f9      	bne.n	2a4 <ResetHandler+0xe8>
	// now we're in PEE mode
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b0:	4b1f      	ldr	r3, [pc, #124]	; (330 <ResetHandler+0x174>)
     2b2:	4a20      	ldr	r2, [pc, #128]	; (334 <ResetHandler+0x178>)
     2b4:	601a      	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2b6:	4b20      	ldr	r3, [pc, #128]	; (338 <ResetHandler+0x17c>)
     2b8:	4a20      	ldr	r2, [pc, #128]	; (33c <ResetHandler+0x180>)
     2ba:	601a      	str	r2, [r3, #0]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2bc:	2207      	movs	r2, #7
     2be:	f843 2c04 	str.w	r2, [r3, #-4]

	//init_pins();
	__enable_irq();
     2c2:	b662      	cpsie	i
	__libc_init_array();
     2c4:	f00e ff64 	bl	f190 <__libc_init_array>

	_init_Teensyduino_internal_();
     2c8:	f003 fc46 	bl	3b58 <_init_Teensyduino_internal_>
	if (RTC_SR & RTC_SR_TIF) {
     2cc:	4b09      	ldr	r3, [pc, #36]	; (2f4 <ResetHandler+0x138>)
     2ce:	681b      	ldr	r3, [r3, #0]
     2d0:	07db      	lsls	r3, r3, #31
     2d2:	d502      	bpl.n	2da <ResetHandler+0x11e>
		// TODO: this should probably set the time more agressively, if
		// we could reliably detect the first reboot after programming.
		rtc_set(TIME_T);
     2d4:	481a      	ldr	r0, [pc, #104]	; (340 <ResetHandler+0x184>)
     2d6:	f003 fbb1 	bl	3a3c <rtc_set>
	}

	startup_late_hook();
     2da:	f003 f9e1 	bl	36a0 <startup_late_hook>
	main();
     2de:	f000 fc9f 	bl	c20 <main>
     2e2:	e7fe      	b.n	2e2 <ResetHandler+0x126>
     2e4:	4005200e 	.word	0x4005200e
     2e8:	40048030 	.word	0x40048030
     2ec:	00043f82 	.word	0x00043f82
     2f0:	2b000001 	.word	0x2b000001
     2f4:	4003d014 	.word	0x4003d014
     2f8:	4007d002 	.word	0x4007d002
     2fc:	4007e000 	.word	0x4007e000
     300:	1fff8400 	.word	0x1fff8400
     304:	1fff8d3c 	.word	0x1fff8d3c
     308:	00015dbc 	.word	0x00015dbc
     30c:	1fff8d40 	.word	0x1fff8d40
     310:	1fff9c94 	.word	0x1fff9c94
     314:	e000ed08 	.word	0xe000ed08
     318:	e000e45f 	.word	0xe000e45f
     31c:	40065000 	.word	0x40065000
     320:	40064006 	.word	0x40064006
     324:	40064004 	.word	0x40064004
     328:	40048044 	.word	0x40048044
     32c:	40064000 	.word	0x40064000
     330:	40048004 	.word	0x40048004
     334:	000510c0 	.word	0x000510c0
     338:	e000e014 	.word	0xe000e014
     33c:	0001193f 	.word	0x0001193f
     340:	5068dd00 	.word	0x5068dd00
     344:	ffffffff 	.word	0xffffffff
     348:	ffffffff 	.word	0xffffffff
     34c:	ffffffff 	.word	0xffffffff
     350:	ffffffff 	.word	0xffffffff
     354:	ffffffff 	.word	0xffffffff
     358:	ffffffff 	.word	0xffffffff
     35c:	ffffffff 	.word	0xffffffff
     360:	ffffffff 	.word	0xffffffff
     364:	ffffffff 	.word	0xffffffff
     368:	ffffffff 	.word	0xffffffff
     36c:	ffffffff 	.word	0xffffffff
     370:	ffffffff 	.word	0xffffffff
     374:	ffffffff 	.word	0xffffffff
     378:	ffffffff 	.word	0xffffffff
     37c:	ffffffff 	.word	0xffffffff
     380:	ffffffff 	.word	0xffffffff
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffffffe     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8d40 	.word	0x1fff8d40
     42c:	00000000 	.word	0x00000000
     430:	00015dbc 	.word	0x00015dbc

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b06      	ldr	r3, [pc, #24]	; (450 <frame_dummy+0x1c>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4806      	ldr	r0, [pc, #24]	; (454 <frame_dummy+0x20>)
     43c:	4906      	ldr	r1, [pc, #24]	; (458 <frame_dummy+0x24>)
     43e:	f3af 8000 	nop.w
     442:	4806      	ldr	r0, [pc, #24]	; (45c <frame_dummy+0x28>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b113      	cbz	r3, 44e <frame_dummy+0x1a>
     448:	4b05      	ldr	r3, [pc, #20]	; (460 <frame_dummy+0x2c>)
     44a:	b103      	cbz	r3, 44e <frame_dummy+0x1a>
     44c:	4798      	blx	r3
     44e:	bd08      	pop	{r3, pc}
     450:	00000000 	.word	0x00000000
     454:	00015dbc 	.word	0x00015dbc
     458:	1fff8d44 	.word	0x1fff8d44
     45c:	1fff8d3c 	.word	0x1fff8d3c
     460:	00000000 	.word	0x00000000

00000464 <_ZN14CLEDController13getAdjustmentEh>:
    {
    }

    // allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     464:	2300      	movs	r3, #0

    CLEDController & setTemperature(CRGB temperature) { m_ColorTemperature = temperature; return *this; }
    CLEDController & setTemperature(ColorTemperature temperature) { m_ColorTemperature = temperature; return *this; }
    CRGB getTemperature() { return m_ColorTemperature; }

    CRGB getAdjustment(uint8_t scale) {
     466:	b530      	push	{r4, r5, lr}
     468:	7003      	strb	r3, [r0, #0]
     46a:	7043      	strb	r3, [r0, #1]
     46c:	7083      	strb	r3, [r0, #2]
#if defined(NO_CORRECTION) && (NO_CORRECTION==1)
        return CRGB(scale,scale,scale);
#else
        CRGB adj(0,0,0);

        if(scale > 0) {
     46e:	b172      	cbz	r2, 48e <_ZN14CLEDController13getAdjustmentEh+0x2a>
            for(uint8_t i = 0; i < 3; i++) {
                uint8_t cc = m_ColorCorrection.raw[i];
     470:	7b0d      	ldrb	r5, [r1, #12]
                uint8_t ct = m_ColorTemperature.raw[i];
     472:	7bcc      	ldrb	r4, [r1, #15]
                if(cc > 0 && ct > 0) {
     474:	b135      	cbz	r5, 484 <_ZN14CLEDController13getAdjustmentEh+0x20>
     476:	b12c      	cbz	r4, 484 <_ZN14CLEDController13getAdjustmentEh+0x20>
                    uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
     478:	3401      	adds	r4, #1
     47a:	fb05 4404 	mla	r4, r5, r4, r4
     47e:	4354      	muls	r4, r2
                    work /= 0x10000L;
     480:	0c24      	lsrs	r4, r4, #16
                    adj.raw[i] = work & 0xFF;
     482:	54c4      	strb	r4, [r0, r3]
     484:	3301      	adds	r3, #1
        return CRGB(scale,scale,scale);
#else
        CRGB adj(0,0,0);

        if(scale > 0) {
            for(uint8_t i = 0; i < 3; i++) {
     486:	2b03      	cmp	r3, #3
     488:	f101 0101 	add.w	r1, r1, #1
     48c:	d1f0      	bne.n	470 <_ZN14CLEDController13getAdjustmentEh+0xc>
            }
        }

        return adj;
#endif
    }
     48e:	bd30      	pop	{r4, r5, pc}

00000490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>:
	m_Scale = 255;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
     490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
     492:	1e1e      	subs	r6, r3, #0
	m_Scale = 255;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
     494:	4615      	mov	r5, r2
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
     496:	6803      	ldr	r3, [r0, #0]
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
     498:	bfd8      	it	le
     49a:	2500      	movle	r5, #0
	m_Scale = 255;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
     49c:	4604      	mov	r4, r0
     49e:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
     4a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
     4a4:	bfd8      	it	le
     4a6:	4616      	movle	r6, r2

	pLed->init();
     4a8:	689b      	ldr	r3, [r3, #8]
	pLed->setLeds(data + nOffset, nLeds);
     4aa:	442f      	add	r7, r5
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
     4ac:	4798      	blx	r3
        show(data, nLeds, getAdjustment(brightness))
    }
#endif

    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
     4ae:	6067      	str	r7, [r4, #4]
        m_nLeds = nLeds;
     4b0:	6166      	str	r6, [r4, #20]
	pLed->setLeds(data + nOffset, nLeds);
	return *pLed;
}
     4b2:	4620      	mov	r0, r4
     4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4b6:	ffff 4b0c 	vtbl.8	d20, {d15-d18}, d12

000004b8 <_ZN8CFastLED4showEh>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    // navigating the list of controllers
    static CLEDController *head() { return m_pHead; }
     4b8:	4b0c      	ldr	r3, [pc, #48]	; (4ec <_ZN8CFastLED4showEh+0x34>)

void CFastLED::show(uint8_t scale) {
     4ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
     4be:	681c      	ldr	r4, [r3, #0]
     4c0:	460e      	mov	r6, r1
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
     4c2:	b184      	cbz	r4, 4e6 <_ZN8CFastLED4showEh+0x2e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    // show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
     4c4:	6823      	ldr	r3, [r4, #0]
     4c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
     4ca:	6967      	ldr	r7, [r4, #20]
     4cc:	685d      	ldr	r5, [r3, #4]
     4ce:	4621      	mov	r1, r4
     4d0:	a801      	add	r0, sp, #4
     4d2:	4632      	mov	r2, r6
     4d4:	f7ff ffc6 	bl	464 <_ZN14CLEDController13getAdjustmentEh>
     4d8:	4620      	mov	r0, r4
     4da:	4641      	mov	r1, r8
     4dc:	463a      	mov	r2, r7
     4de:	ab01      	add	r3, sp, #4
     4e0:	47a8      	blx	r5
	pLed->setLeds(data + nOffset, nLeds);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	CLEDController *pCur = CLEDController::head();
     4e2:	68a4      	ldr	r4, [r4, #8]
     4e4:	e7ed      	b.n	4c2 <_ZN8CFastLED4showEh+0xa>
	while(pCur) {
		pCur->showLeds(scale);
		pCur = pCur->next();
	}
}
     4e6:	b002      	add	sp, #8
     4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4ec:	1fff8d60 	.word	0x1fff8d60

000004f0 <_GLOBAL__sub_I_LEDS>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
     4f0:	4b01      	ldr	r3, [pc, #4]	; (4f8 <_GLOBAL__sub_I_LEDS+0x8>)
     4f2:	22ff      	movs	r2, #255	; 0xff
     4f4:	701a      	strb	r2, [r3, #0]
     4f6:	4770      	bx	lr
     4f8:	1fff8d5c 	.word	0x1fff8d5c

000004fc <_ZL15nscale8x3_videoRhS_S_h>:
#endif
}


LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
     4fc:	b530      	push	{r4, r5, lr}
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
     4fe:	7805      	ldrb	r5, [r0, #0]


LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
     500:	1c1c      	adds	r4, r3, #0
     502:	bf18      	it	ne
     504:	2401      	movne	r4, #1
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
     506:	b125      	cbz	r5, 512 <_ZL15nscale8x3_videoRhS_S_h+0x16>
     508:	fb15 f503 	smulbb	r5, r5, r3
     50c:	eb04 2515 	add.w	r5, r4, r5, lsr #8
     510:	b2ed      	uxtb	r5, r5
     512:	7005      	strb	r5, [r0, #0]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
     514:	7808      	ldrb	r0, [r1, #0]
     516:	b120      	cbz	r0, 522 <_ZL15nscale8x3_videoRhS_S_h+0x26>
     518:	fb10 f003 	smulbb	r0, r0, r3
     51c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
     520:	b2c0      	uxtb	r0, r0
     522:	7008      	strb	r0, [r1, #0]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
     524:	7811      	ldrb	r1, [r2, #0]
     526:	b121      	cbz	r1, 532 <_ZL15nscale8x3_videoRhS_S_h+0x36>
     528:	fb11 f103 	smulbb	r1, r1, r3
     52c:	eb04 2111 	add.w	r1, r4, r1, lsr #8
     530:	b2c9      	uxtb	r1, r1
     532:	7011      	strb	r1, [r2, #0]
     534:	bd30      	pop	{r4, r5, pc}

00000536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>:
#define K255 255
#define K171 171
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
     536:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;

    
    uint8_t hue = hsv.hue;
     53a:	7807      	ldrb	r7, [r0, #0]
    uint8_t sat = hsv.sat;
     53c:	f890 9001 	ldrb.w	r9, [r0, #1]
    uint8_t val = hsv.val;
     540:	7884      	ldrb	r4, [r0, #2]
        
    uint8_t offset = hue & 0x1F; // 0..31
     542:	f007 051f 	and.w	r5, r7, #31
#define K255 255
#define K171 171
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
     546:	4688      	mov	r8, r1
    uint8_t offset = hue & 0x1F; // 0..31
    
    // offset8 = offset * 8
    uint8_t offset8 = offset;
    {
        offset8 <<= 1;
     548:	006d      	lsls	r5, r5, #1
        asm volatile("");
        offset8 <<= 1;
     54a:	006d      	lsls	r5, r5, #1
        asm volatile("");
        offset8 <<= 1;
     54c:	006d      	lsls	r5, r5, #1
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
     54e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
     552:	eb02 1202 	add.w	r2, r2, r2, lsl #4
     556:	f007 0640 	and.w	r6, r7, #64	; 0x40
    
    uint8_t third = scale8( offset8, (256 / 3));
        
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
     55a:	f017 0f80 	tst.w	r7, #128	; 0x80
     55e:	f3c2 2207 	ubfx	r2, r2, #8, #8
     562:	f007 0020 	and.w	r0, r7, #32
        // 0XX
        if( ! (hue & 0x40) ) {
     566:	f006 03ff 	and.w	r3, r6, #255	; 0xff
    
    uint8_t third = scale8( offset8, (256 / 3));
        
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
     56a:	d128      	bne.n	5be <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x88>
        // 0XX
        if( ! (hue & 0x40) ) {
     56c:	b97e      	cbnz	r6, 58e <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x58>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
     56e:	f000 01ff 	and.w	r1, r0, #255	; 0xff
     572:	b938      	cbnz	r0, 584 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x4e>
                // 000
                //case 0: // R -> O
                r = K255 - third;
     574:	43d3      	mvns	r3, r2
     576:	f88d 3005 	strb.w	r3, [sp, #5]
                g = third;
     57a:	f88d 2006 	strb.w	r2, [sp, #6]
                b = 0;
     57e:	f88d 1007 	strb.w	r1, [sp, #7]
                FORCE_REFERENCE(b);
     582:	e04b      	b.n	61c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe6>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
     584:	21ab      	movs	r1, #171	; 0xab
     586:	f88d 1005 	strb.w	r1, [sp, #5]
                    g = K85 + third ;
     58a:	3255      	adds	r2, #85	; 0x55
     58c:	e00b      	b.n	5a6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x70>
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
     58e:	f000 03ff 	and.w	r3, r0, #255	; 0xff
     592:	b968      	cbnz	r0, 5b0 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x7a>
     594:	21aa      	movs	r1, #170	; 0xaa
     596:	fb15 f501 	smulbb	r5, r5, r1
     59a:	122d      	asrs	r5, r5, #8
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3));
                    r = K171 - twothirds;
     59c:	f1c5 05ab 	rsb	r5, r5, #171	; 0xab
     5a0:	f88d 5005 	strb.w	r5, [sp, #5]
                    g = K171 + third;
     5a4:	3a55      	subs	r2, #85	; 0x55
     5a6:	f88d 2006 	strb.w	r2, [sp, #6]
                    b = 0;
     5aa:	f88d 3007 	strb.w	r3, [sp, #7]
                    FORCE_REFERENCE(b);
     5ae:	e035      	b.n	61c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe6>
                    FORCE_REFERENCE(b);
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
     5b0:	2300      	movs	r3, #0
     5b2:	f88d 3005 	strb.w	r3, [sp, #5]
                FORCE_REFERENCE(r);
                g = K255 - third;
     5b6:	43d3      	mvns	r3, r2
     5b8:	f88d 3006 	strb.w	r3, [sp, #6]
     5bc:	e02c      	b.n	618 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe2>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
     5be:	b9b6      	cbnz	r6, 5ee <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xb8>
            // 10X
            if( ! ( hue & 0x20) ) {
     5c0:	f000 01ff 	and.w	r1, r0, #255	; 0xff
     5c4:	b968      	cbnz	r0, 5e2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xac>
                // 100
                //case 4: // A -> B
                r = 0;
     5c6:	f88d 1005 	strb.w	r1, [sp, #5]
     5ca:	23aa      	movs	r3, #170	; 0xaa
     5cc:	fb15 f503 	smulbb	r5, r5, r3
     5d0:	0a2d      	lsrs	r5, r5, #8
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3));
                g = K171 - twothirds;
     5d2:	f1c5 03ab 	rsb	r3, r5, #171	; 0xab
                b = K85  + twothirds;
     5d6:	3555      	adds	r5, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3));
                g = K171 - twothirds;
     5d8:	f88d 3006 	strb.w	r3, [sp, #6]
                b = K85  + twothirds;
     5dc:	f88d 5007 	strb.w	r5, [sp, #7]
     5e0:	e01c      	b.n	61c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe6>

            } else {
                // 101
                //case 5: // B -> P
                r = third;
     5e2:	f88d 2005 	strb.w	r2, [sp, #5]
                g = 0;
     5e6:	f88d 3006 	strb.w	r3, [sp, #6]
                FORCE_REFERENCE(g);
                b = K255 - third;
     5ea:	43d2      	mvns	r2, r2
     5ec:	e014      	b.n	618 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe2>

            }
        } else {
            if( !  (hue & 0x20)  ) {
     5ee:	f000 03ff 	and.w	r3, r0, #255	; 0xff
     5f2:	b940      	cbnz	r0, 606 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xd0>
                // 110
                //case 6: // P -- K
                r = K85 + third;
     5f4:	f102 0155 	add.w	r1, r2, #85	; 0x55
     5f8:	f88d 1005 	strb.w	r1, [sp, #5]
                g = 0;
     5fc:	f88d 3006 	strb.w	r3, [sp, #6]
                FORCE_REFERENCE(g);
                b = K171 - third;
     600:	f1c2 02ab 	rsb	r2, r2, #171	; 0xab
     604:	e008      	b.n	618 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe2>

            } else {
                // 111
                //case 7: // K -> R
                r = K171 + third;
     606:	f1a2 0355 	sub.w	r3, r2, #85	; 0x55
     60a:	f88d 3005 	strb.w	r3, [sp, #5]
                g = 0;
     60e:	2300      	movs	r3, #0
     610:	f88d 3006 	strb.w	r3, [sp, #6]
                FORCE_REFERENCE(g);
                b = K85 - third;
     614:	f1c2 0255 	rsb	r2, r2, #85	; 0x55
     618:	f88d 2007 	strb.w	r2, [sp, #7]
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
     61c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
     620:	d01f      	beq.n	662 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x12c>

        nscale8x3_video( r, g, b, sat);
     622:	464b      	mov	r3, r9

        uint8_t desat = 255 - sat;
     624:	ea6f 0909 	mvn.w	r9, r9
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {

        nscale8x3_video( r, g, b, sat);
     628:	f10d 0005 	add.w	r0, sp, #5
     62c:	f10d 0106 	add.w	r1, sp, #6
     630:	f10d 0207 	add.w	r2, sp, #7

        uint8_t desat = 255 - sat;
     634:	fa5f f989 	uxtb.w	r9, r9
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {

        nscale8x3_video( r, g, b, sat);
     638:	f7ff ff60 	bl	4fc <_ZL15nscale8x3_videoRhS_S_h>
     63c:	fb19 f909 	smulbb	r9, r9, r9

        uint8_t desat = 255 - sat;
        desat = scale8( desat, desat);
        
        uint8_t brightness_floor = desat;
        r += brightness_floor;
     640:	f89d 3005 	ldrb.w	r3, [sp, #5]
     644:	ea4f 2919 	mov.w	r9, r9, lsr #8
     648:	444b      	add	r3, r9
     64a:	f88d 3005 	strb.w	r3, [sp, #5]
        g += brightness_floor;
     64e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     652:	444b      	add	r3, r9
     654:	f88d 3006 	strb.w	r3, [sp, #6]
        b += brightness_floor;
     658:	f89d 3007 	ldrb.w	r3, [sp, #7]
     65c:	4499      	add	r9, r3
     65e:	f88d 9007 	strb.w	r9, [sp, #7]
    }

    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
     662:	2cff      	cmp	r4, #255	; 0xff
     664:	d00f      	beq.n	686 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x150>


LIB8STATIC uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
     666:	fb14 f304 	smulbb	r3, r4, r4
     66a:	3400      	adds	r4, #0
     66c:	bf18      	it	ne
     66e:	2401      	movne	r4, #1
     670:	eb04 2313 	add.w	r3, r4, r3, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        nscale8x3_video( r, g, b, val);
     674:	f10d 0005 	add.w	r0, sp, #5
     678:	f10d 0106 	add.w	r1, sp, #6
     67c:	f10d 0207 	add.w	r2, sp, #7
     680:	b2db      	uxtb	r3, r3
     682:	f7ff ff3b 	bl	4fc <_ZL15nscale8x3_videoRhS_S_h>
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
     686:	f89d 3005 	ldrb.w	r3, [sp, #5]
     68a:	f888 3000 	strb.w	r3, [r8]
    rgb.g = g;
     68e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     692:	f888 3001 	strb.w	r3, [r8, #1]
    rgb.b = b;
     696:	f89d 3007 	ldrb.w	r3, [sp, #7]
     69a:	f888 3002 	strb.w	r3, [r8, #2]
}
     69e:	b003      	add	sp, #12
     6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000006a4 <_ZN7PerlinsD1Ev>:
};

Perlins::Perlins() {
}

Perlins::~Perlins() {
     6a4:	4b01      	ldr	r3, [pc, #4]	; (6ac <_ZN7PerlinsD1Ev+0x8>)
     6a6:	6003      	str	r3, [r0, #0]
}
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	00014070 	.word	0x00014070

000006b0 <_ZN7PerlinsD0Ev>:
};

Perlins::Perlins() {
}

Perlins::~Perlins() {
     6b0:	b510      	push	{r4, lr}
     6b2:	4b03      	ldr	r3, [pc, #12]	; (6c0 <_ZN7PerlinsD0Ev+0x10>)
     6b4:	6003      	str	r3, [r0, #0]
     6b6:	4604      	mov	r4, r0
}
     6b8:	f004 fe96 	bl	53e8 <_ZdlPv>
     6bc:	4620      	mov	r0, r4
     6be:	bd10      	pop	{r4, pc}
     6c0:	00014070 	.word	0x00014070

000006c4 <_ZN7PerlinsC1Ev>:
49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,
150,254,138,236,205, 93,222,114, 67,29,24, 72,243,141,128,195,78,66,
215,61,156,180
};

Perlins::Perlins() {
     6c4:	4b01      	ldr	r3, [pc, #4]	; (6cc <_ZN7PerlinsC1Ev+0x8>)
     6c6:	6003      	str	r3, [r0, #0]
}
     6c8:	4770      	bx	lr
     6ca:	bf00      	nop
     6cc:	00014070 	.word	0x00014070

000006d0 <_ZN7Perlins4fadeEd>:
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
     6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6d2:	4610      	mov	r0, r2
     6d4:	4614      	mov	r4, r2
     6d6:	461d      	mov	r5, r3
     6d8:	4619      	mov	r1, r3
     6da:	f00c fddf 	bl	d29c <__aeabi_dmul>
     6de:	4622      	mov	r2, r4
     6e0:	462b      	mov	r3, r5
     6e2:	f00c fddb 	bl	d29c <__aeabi_dmul>
     6e6:	2200      	movs	r2, #0
     6e8:	4606      	mov	r6, r0
     6ea:	460f      	mov	r7, r1
     6ec:	4620      	mov	r0, r4
     6ee:	4629      	mov	r1, r5
     6f0:	4b0b      	ldr	r3, [pc, #44]	; (720 <_ZN7Perlins4fadeEd+0x50>)
     6f2:	f00c fdd3 	bl	d29c <__aeabi_dmul>
     6f6:	2200      	movs	r2, #0
     6f8:	4b0a      	ldr	r3, [pc, #40]	; (724 <_ZN7Perlins4fadeEd+0x54>)
     6fa:	f00c fc1b 	bl	cf34 <__aeabi_dsub>
     6fe:	4602      	mov	r2, r0
     700:	460b      	mov	r3, r1
     702:	4620      	mov	r0, r4
     704:	4629      	mov	r1, r5
     706:	f00c fdc9 	bl	d29c <__aeabi_dmul>
     70a:	2200      	movs	r2, #0
     70c:	4b06      	ldr	r3, [pc, #24]	; (728 <_ZN7Perlins4fadeEd+0x58>)
     70e:	f00c fc13 	bl	cf38 <__adddf3>
     712:	4602      	mov	r2, r0
     714:	460b      	mov	r3, r1
     716:	4630      	mov	r0, r6
     718:	4639      	mov	r1, r7
     71a:	f00c fdbf 	bl	d29c <__aeabi_dmul>
     71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     720:	40180000 	.word	0x40180000
     724:	402e0000 	.word	0x402e0000
     728:	40240000 	.word	0x40240000

0000072c <_ZN7Perlins4gradEiddd>:
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
     72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     72e:	468e      	mov	lr, r1
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
     730:	f001 010f 	and.w	r1, r1, #15
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     734:	2907      	cmp	r1, #7
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
     736:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     73a:	dc04      	bgt.n	746 <_ZN7Perlins4gradEiddd+0x1a>
    		v = h < 4 ? y : h==12||h==14 ? x : z;
     73c:	2903      	cmp	r1, #3
double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     73e:	4616      	mov	r6, r2
     740:	461f      	mov	r7, r3
    		v = h < 4 ? y : h==12||h==14 ? x : z;
     742:	dd0b      	ble.n	75c <_ZN7Perlins4gradEiddd+0x30>
     744:	e001      	b.n	74a <_ZN7Perlins4gradEiddd+0x1e>
double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     746:	4626      	mov	r6, r4
     748:	462f      	mov	r7, r5
    		v = h < 4 ? y : h==12||h==14 ? x : z;
     74a:	f00e 010d 	and.w	r1, lr, #13
     74e:	290c      	cmp	r1, #12
     750:	d002      	beq.n	758 <_ZN7Perlins4gradEiddd+0x2c>
     752:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
     756:	e001      	b.n	75c <_ZN7Perlins4gradEiddd+0x30>
     758:	4614      	mov	r4, r2
     75a:	461d      	mov	r5, r3
    return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
     75c:	f01e 0f01 	tst.w	lr, #1
     760:	bf14      	ite	ne
     762:	f107 4100 	addne.w	r1, r7, #2147483648	; 0x80000000
     766:	4639      	moveq	r1, r7
     768:	f01e 0f02 	tst.w	lr, #2
     76c:	4630      	mov	r0, r6
     76e:	4622      	mov	r2, r4
     770:	bf14      	ite	ne
     772:	f105 4300 	addne.w	r3, r5, #2147483648	; 0x80000000
     776:	462b      	moveq	r3, r5
     778:	f00c fbde 	bl	cf38 <__adddf3>
}
     77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     77e:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00000780 <_ZN7Perlins6pnoiseEddd>:

Perlins::~Perlins() {
}

double Perlins::pnoise(double x, double y, double z)
{
     780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
     784:	4619      	mov	r1, r3

Perlins::~Perlins() {
}

double Perlins::pnoise(double x, double y, double z)
{
     786:	b099      	sub	sp, #100	; 0x64
     788:	4680      	mov	r8, r0
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
     78a:	4610      	mov	r0, r2

Perlins::~Perlins() {
}

double Perlins::pnoise(double x, double y, double z)
{
     78c:	4614      	mov	r4, r2
     78e:	461d      	mov	r5, r3
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
     790:	f00b fa56 	bl	bc40 <floor>
     794:	9104      	str	r1, [sp, #16]
     796:	9005      	str	r0, [sp, #20]
     798:	f00d f81a 	bl	d7d0 <__aeabi_d2iz>
     79c:	fa5f fb80 	uxtb.w	fp, r0
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
     7a0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
     7a4:	f00b fa4c 	bl	bc40 <floor>
     7a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
     7ac:	f00d f810 	bl	d7d0 <__aeabi_d2iz>
     7b0:	fa5f fa80 	uxtb.w	sl, r0
          Z = (int)floor(z) & 255;
     7b4:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
     7b8:	f00b fa42 	bl	bc40 <floor>
     7bc:	460f      	mov	r7, r1
     7be:	4606      	mov	r6, r0
     7c0:	f00d f806 	bl	d7d0 <__aeabi_d2iz>
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
     7c4:	9a05      	ldr	r2, [sp, #20]
     7c6:	9b04      	ldr	r3, [sp, #16]

double Perlins::pnoise(double x, double y, double z)
{
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
     7c8:	fa5f f980 	uxtb.w	r9, r0
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
     7cc:	4629      	mov	r1, r5
     7ce:	4620      	mov	r0, r4
     7d0:	f00c fbb0 	bl	cf34 <__aeabi_dsub>
    y -= floor(y);                             /* OF POINT IN CUBE.   */
     7d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
double Perlins::pnoise(double x, double y, double z)
{
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
     7d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    y -= floor(y);                             /* OF POINT IN CUBE.   */
     7dc:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
     7e0:	f00c fba8 	bl	cf34 <__aeabi_dsub>
    z -= floor(z);
     7e4:	4632      	mov	r2, r6
{
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
     7e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    z -= floor(z);
     7ea:	463b      	mov	r3, r7
     7ec:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
     7f0:	f00c fba0 	bl	cf34 <__aeabi_dsub>

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
     7f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);
     7f8:	e9cd 0108 	strd	r0, r1, [sp, #32]

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
     7fc:	4640      	mov	r0, r8
     7fe:	f7ff ff67 	bl	6d0 <_ZN7Perlins4fadeEd>
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
     802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
     806:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
     80a:	4640      	mov	r0, r8
     80c:	f7ff ff60 	bl	6d0 <_ZN7Perlins4fadeEd>
            w = fade(z);

    int  A = P(X)+Y,
     810:	4c98      	ldr	r4, [pc, #608]	; (a74 <_ZN7Perlins6pnoiseEddd+0x2f4>)
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);
     812:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
     816:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
            w = fade(z);
     81a:	4640      	mov	r0, r8
     81c:	f7ff ff58 	bl	6d0 <_ZN7Perlins4fadeEd>

    int  A = P(X)+Y,
     820:	f814 300b 	ldrb.w	r3, [r4, fp]
     824:	4453      	add	r3, sl
         AA = P(A)+Z,
     826:	b2da      	uxtb	r2, r3
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
     828:	3301      	adds	r3, #1
     82a:	b2db      	uxtb	r3, r3
         B = P(X+1)+Y,
     82c:	f10b 0b01 	add.w	fp, fp, #1
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
     830:	5ce3      	ldrb	r3, [r4, r3]
    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
     832:	5ca7      	ldrb	r7, [r4, r2]
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
         B = P(X+1)+Y,
     834:	fa5f fb8b 	uxtb.w	fp, fp
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
     838:	eb03 0509 	add.w	r5, r3, r9
         B = P(X+1)+Y,
     83c:	f814 300b 	ldrb.w	r3, [r4, fp]
     840:	449a      	add	sl, r3
         BA = P(B)+Z,
     842:	fa5f f38a 	uxtb.w	r3, sl
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */
     846:	f10a 0a01 	add.w	sl, sl, #1
     84a:	fa5f fa8a 	uxtb.w	sl, sl

    int  A = P(X)+Y,
         AA = P(A)+Z,
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
         B = P(X+1)+Y,
         BA = P(B)+Z,
     84e:	5ce6      	ldrb	r6, [r4, r3]
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */
     850:	f814 300a 	ldrb.w	r3, [r4, sl]
    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
     854:	444f      	add	r7, r9
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
         B = P(X+1)+Y,
         BA = P(B)+Z,
     856:	444e      	add	r6, r9
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */
     858:	4499      	add	r9, r3

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
     85a:	b2fb      	uxtb	r3, r7
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);
     85c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     860:	5ce1      	ldrb	r1, [r4, r3]
     862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     866:	e9cd 2300 	strd	r2, r3, [sp]
     86a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     86e:	4640      	mov	r0, r8
     870:	e9cd 2302 	strd	r2, r3, [sp, #8]
     874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     878:	f7ff ff58 	bl	72c <_ZN7Perlins4gradEiddd>
     87c:	2200      	movs	r2, #0
     87e:	4682      	mov	sl, r0
     880:	468b      	mov	fp, r1
     882:	4b7d      	ldr	r3, [pc, #500]	; (a78 <_ZN7Perlins6pnoiseEddd+0x2f8>)
     884:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     888:	f00c fb54 	bl	cf34 <__aeabi_dsub>
         B = P(X+1)+Y,
         BA = P(B)+Z,
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
     88c:	b2f3      	uxtb	r3, r6
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     88e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
     892:	5ce1      	ldrb	r1, [r4, r3]
     894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     898:	e9cd 2300 	strd	r2, r3, [sp]
     89c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     8a0:	4640      	mov	r0, r8
     8a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
     8a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     8aa:	f7ff ff3f 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     8ae:	4652      	mov	r2, sl
     8b0:	465b      	mov	r3, fp
     8b2:	f00c fb3f 	bl	cf34 <__aeabi_dsub>
     8b6:	4602      	mov	r2, r0
     8b8:	460b      	mov	r3, r1
     8ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     8be:	f00c fced 	bl	d29c <__aeabi_dmul>
     8c2:	4602      	mov	r2, r0
     8c4:	460b      	mov	r3, r1
     8c6:	4650      	mov	r0, sl
     8c8:	4659      	mov	r1, fp
     8ca:	f00c fb35 	bl	cf38 <__adddf3>
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     8ce:	2200      	movs	r2, #0
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     8d0:	4682      	mov	sl, r0
     8d2:	468b      	mov	fp, r1
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     8d4:	4b68      	ldr	r3, [pc, #416]	; (a78 <_ZN7Perlins6pnoiseEddd+0x2f8>)
     8d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     8da:	f00c fb2b 	bl	cf34 <__aeabi_dsub>
         BA = P(B)+Z,
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
     8de:	b2eb      	uxtb	r3, r5
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     8e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
     8e4:	5ce1      	ldrb	r1, [r4, r3]
     8e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     8ea:	e9cd 2300 	strd	r2, r3, [sp]
     8ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     8f2:	4640      	mov	r0, r8
     8f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
     8f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     8fc:	f7ff ff16 	bl	72c <_ZN7Perlins4gradEiddd>
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
     900:	fa5f f389 	uxtb.w	r3, r9
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     904:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
     908:	5ce1      	ldrb	r1, [r4, r3]
     90a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     90e:	e9cd 2300 	strd	r2, r3, [sp]
     912:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     916:	4640      	mov	r0, r8
     918:	e9cd 2302 	strd	r2, r3, [sp, #8]
     91c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     920:	f7ff ff04 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     924:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
     928:	f00c fb04 	bl	cf34 <__aeabi_dsub>
     92c:	4602      	mov	r2, r0
     92e:	460b      	mov	r3, r1
     930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     934:	f00c fcb2 	bl	d29c <__aeabi_dmul>
     938:	4602      	mov	r2, r0
     93a:	460b      	mov	r3, r1
     93c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     940:	f00c fafa 	bl	cf38 <__adddf3>
     944:	4652      	mov	r2, sl
     946:	465b      	mov	r3, fp
     948:	f00c faf4 	bl	cf34 <__aeabi_dsub>
     94c:	4602      	mov	r2, r0
     94e:	460b      	mov	r3, r1
     950:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
     954:	f00c fca2 	bl	d29c <__aeabi_dmul>
     958:	4602      	mov	r2, r0
     95a:	460b      	mov	r3, r1
     95c:	4650      	mov	r0, sl
     95e:	4659      	mov	r1, fp
     960:	f00c faea 	bl	cf38 <__adddf3>
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     964:	2200      	movs	r2, #0
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     966:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     96a:	4b43      	ldr	r3, [pc, #268]	; (a78 <_ZN7Perlins6pnoiseEddd+0x2f8>)
     96c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
     970:	f00c fae0 	bl	cf34 <__aeabi_dsub>

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
     974:	3701      	adds	r7, #1
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     976:	e9dd 2306 	ldrd	r2, r3, [sp, #24]

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
     97a:	b2ff      	uxtb	r7, r7
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     97c:	4682      	mov	sl, r0
     97e:	468b      	mov	fp, r1
     980:	e9cd 2300 	strd	r2, r3, [sp]
     984:	5de1      	ldrb	r1, [r4, r7]
     986:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     98a:	e9cd ab02 	strd	sl, fp, [sp, #8]
     98e:	4640      	mov	r0, r8
     990:	f7ff fecc 	bl	72c <_ZN7Perlins4gradEiddd>
    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
     994:	3601      	adds	r6, #1
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     996:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
     99a:	b2f6      	uxtb	r6, r6
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     99c:	e9cd 0108 	strd	r0, r1, [sp, #32]
     9a0:	e9cd 2300 	strd	r2, r3, [sp]
     9a4:	5da1      	ldrb	r1, [r4, r6]
     9a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     9aa:	e9cd ab02 	strd	sl, fp, [sp, #8]
     9ae:	4640      	mov	r0, r8
     9b0:	f7ff febc 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     9b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     9b8:	f00c fabc 	bl	cf34 <__aeabi_dsub>
     9bc:	4602      	mov	r2, r0
     9be:	460b      	mov	r3, r1
     9c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     9c4:	f00c fc6a 	bl	d29c <__aeabi_dmul>
     9c8:	4602      	mov	r2, r0
     9ca:	460b      	mov	r3, r1
     9cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
     9d0:	f00c fab2 	bl	cf38 <__adddf3>
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
     9d4:	1c6b      	adds	r3, r5, #1
     9d6:	b2db      	uxtb	r3, r3
                       grad(P(BB+1), x-1, y-1, z-1))));
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     9d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     9dc:	5ce1      	ldrb	r1, [r4, r3]
     9de:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     9e2:	e9cd ab02 	strd	sl, fp, [sp, #8]
     9e6:	e9cd 2300 	strd	r2, r3, [sp]
     9ea:	4640      	mov	r0, r8
     9ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     9f0:	f7ff fe9c 	bl	72c <_ZN7Perlins4gradEiddd>
     9f4:	f109 0901 	add.w	r9, r9, #1
     9f8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     9fc:	fa5f f989 	uxtb.w	r9, r9
     a00:	4606      	mov	r6, r0
     a02:	460f      	mov	r7, r1
     a04:	e9cd 2300 	strd	r2, r3, [sp]
     a08:	f814 1009 	ldrb.w	r1, [r4, r9]
     a0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     a10:	e9cd ab02 	strd	sl, fp, [sp, #8]
     a14:	4640      	mov	r0, r8
     a16:	f7ff fe89 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     a1a:	4632      	mov	r2, r6
     a1c:	463b      	mov	r3, r7
     a1e:	f00c fa89 	bl	cf34 <__aeabi_dsub>
     a22:	4602      	mov	r2, r0
     a24:	460b      	mov	r3, r1
     a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     a2a:	f00c fc37 	bl	d29c <__aeabi_dmul>
     a2e:	4602      	mov	r2, r0
     a30:	460b      	mov	r3, r1
     a32:	4630      	mov	r0, r6
     a34:	4639      	mov	r1, r7
     a36:	f00c fa7f 	bl	cf38 <__adddf3>
     a3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     a3e:	f00c fa79 	bl	cf34 <__aeabi_dsub>
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
     a4a:	f00c fc27 	bl	d29c <__aeabi_dmul>
     a4e:	4602      	mov	r2, r0
     a50:	460b      	mov	r3, r1
     a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     a56:	f00c fa6f 	bl	cf38 <__adddf3>
     a5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
     a5e:	f00c fa69 	bl	cf34 <__aeabi_dsub>
     a62:	4602      	mov	r2, r0
     a64:	460b      	mov	r3, r1
     a66:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
     a6a:	f00c fc17 	bl	d29c <__aeabi_dmul>
     a6e:	4602      	mov	r2, r0
     a70:	460b      	mov	r3, r1
     a72:	e003      	b.n	a7c <_ZN7Perlins6pnoiseEddd+0x2fc>
     a74:	00013f64 	.word	0x00013f64
     a78:	3ff00000 	.word	0x3ff00000
     a7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     a80:	f00c fa5a 	bl	cf38 <__adddf3>
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
}
     a84:	b019      	add	sp, #100	; 0x64
     a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a8a:	bf00      	nop

00000a8c <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9clearLedsEi>:

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     a8c:	b513      	push	{r0, r1, r4, lr}
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     a8e:	6803      	ldr	r3, [r0, #0]
     a90:	681c      	ldr	r4, [r3, #0]
     a92:	2300      	movs	r3, #0

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     a94:	460a      	mov	r2, r1
     a96:	f88d 3000 	strb.w	r3, [sp]
     a9a:	f88d 3001 	strb.w	r3, [sp, #1]
     a9e:	f88d 3002 	strb.w	r3, [sp, #2]
     aa2:	f88d 3004 	strb.w	r3, [sp, #4]
     aa6:	f88d 3005 	strb.w	r3, [sp, #5]
     aaa:	f88d 3006 	strb.w	r3, [sp, #6]
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     aae:	4669      	mov	r1, sp
     ab0:	ab01      	add	r3, sp, #4
     ab2:	47a0      	blx	r4
	}
     ab4:	b002      	add	sp, #8
     ab6:	bd10      	pop	{r4, pc}

00000ab8 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9clearLedsEi>:

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     ab8:	b513      	push	{r0, r1, r4, lr}
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     aba:	6803      	ldr	r3, [r0, #0]
     abc:	681c      	ldr	r4, [r3, #0]
     abe:	2300      	movs	r3, #0

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     ac0:	460a      	mov	r2, r1
     ac2:	f88d 3000 	strb.w	r3, [sp]
     ac6:	f88d 3001 	strb.w	r3, [sp, #1]
     aca:	f88d 3002 	strb.w	r3, [sp, #2]
     ace:	f88d 3004 	strb.w	r3, [sp, #4]
     ad2:	f88d 3005 	strb.w	r3, [sp, #5]
     ad6:	f88d 3006 	strb.w	r3, [sp, #6]
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     ada:	4669      	mov	r1, sp
     adc:	ab01      	add	r3, sp, #4
     ade:	47a0      	blx	r4
	}
     ae0:	b002      	add	sp, #8
     ae2:	bd10      	pop	{r4, pc}

00000ae4 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9clearLedsEi>:

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     ae4:	b513      	push	{r0, r1, r4, lr}
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     ae6:	6803      	ldr	r3, [r0, #0]
     ae8:	681c      	ldr	r4, [r3, #0]
     aea:	2300      	movs	r3, #0

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     aec:	460a      	mov	r2, r1
     aee:	f88d 3000 	strb.w	r3, [sp]
     af2:	f88d 3001 	strb.w	r3, [sp, #1]
     af6:	f88d 3002 	strb.w	r3, [sp, #2]
     afa:	f88d 3004 	strb.w	r3, [sp, #4]
     afe:	f88d 3005 	strb.w	r3, [sp, #5]
     b02:	f88d 3006 	strb.w	r3, [sp, #6]
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     b06:	4669      	mov	r1, sp
     b08:	ab01      	add	r3, sp, #4
     b0a:	47a0      	blx	r4
	}
     b0c:	b002      	add	sp, #8
     b0e:	bd10      	pop	{r4, pc}

00000b10 <_Z16modeButtonChangev>:

#define EEPROM_ADDRESS 0

bool modeChange = false;
unsigned long lastActionTime = millis();
void modeButtonChange() {
     b10:	b513      	push	{r0, r1, r4, lr}
    if ((digitalRead(MODE_PIN) == HIGH) && (millis() >= lastActionTime + 200)) {
     b12:	2000      	movs	r0, #0
     b14:	f002 ffc2 	bl	3a9c <digitalRead>
     b18:	2801      	cmp	r0, #1
     b1a:	d10e      	bne.n	b3a <_Z16modeButtonChangev+0x2a>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
     b1c:	4a08      	ldr	r2, [pc, #32]	; (b40 <_Z16modeButtonChangev+0x30>)
     b1e:	6813      	ldr	r3, [r2, #0]
     b20:	9300      	str	r3, [sp, #0]
     b22:	4b08      	ldr	r3, [pc, #32]	; (b44 <_Z16modeButtonChangev+0x34>)
	return ret;
     b24:	9c00      	ldr	r4, [sp, #0]
     b26:	6819      	ldr	r1, [r3, #0]
     b28:	31c8      	adds	r1, #200	; 0xc8
     b2a:	428c      	cmp	r4, r1
     b2c:	d305      	bcc.n	b3a <_Z16modeButtonChangev+0x2a>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
     b2e:	6812      	ldr	r2, [r2, #0]
        modeChange = true;
     b30:	4905      	ldr	r1, [pc, #20]	; (b48 <_Z16modeButtonChangev+0x38>)
     b32:	9201      	str	r2, [sp, #4]
	return ret;
     b34:	9a01      	ldr	r2, [sp, #4]
     b36:	7008      	strb	r0, [r1, #0]
        lastActionTime = millis();
     b38:	601a      	str	r2, [r3, #0]
    }
}
     b3a:	b002      	add	sp, #8
     b3c:	bd10      	pop	{r4, pc}
     b3e:	bf00      	nop
     b40:	1fff91a8 	.word	0x1fff91a8
     b44:	1fff90bc 	.word	0x1fff90bc
     b48:	1fff90c0 	.word	0x1fff90c0

00000b4c <_ZN14CLEDControllerC1Ev>:
#ifdef SUPPORT_ARGB
    // as above, but every 4th uint8_t is assumed to be alpha channel data, and will be skipped
    virtual void show(const struct CARGB *data, int nLeds, CRGB scale) = 0;
#endif
public:
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     b4c:	4b0c      	ldr	r3, [pc, #48]	; (b80 <_ZN14CLEDControllerC1Ev+0x34>)
     b4e:	6003      	str	r3, [r0, #0]
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    {
    }

    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b50:	23ff      	movs	r3, #255	; 0xff
     b52:	7303      	strb	r3, [r0, #12]
     b54:	7343      	strb	r3, [r0, #13]
     b56:	7383      	strb	r3, [r0, #14]
    {

    }

    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b58:	73c3      	strb	r3, [r0, #15]
     b5a:	7403      	strb	r3, [r0, #16]
     b5c:	7443      	strb	r3, [r0, #17]
     b5e:	2301      	movs	r3, #1
     b60:	7483      	strb	r3, [r0, #18]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     b62:	4b08      	ldr	r3, [pc, #32]	; (b84 <_ZN14CLEDControllerC1Ev+0x38>)
#ifdef SUPPORT_ARGB
    // as above, but every 4th uint8_t is assumed to be alpha channel data, and will be skipped
    virtual void show(const struct CARGB *data, int nLeds, CRGB scale) = 0;
#endif
public:
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     b64:	2200      	movs	r2, #0
     b66:	6042      	str	r2, [r0, #4]
     b68:	6142      	str	r2, [r0, #20]
        m_pNext = NULL;
     b6a:	6082      	str	r2, [r0, #8]
        if(m_pHead==NULL) { m_pHead = this; }
     b6c:	681a      	ldr	r2, [r3, #0]
     b6e:	b902      	cbnz	r2, b72 <_ZN14CLEDControllerC1Ev+0x26>
     b70:	6018      	str	r0, [r3, #0]
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     b72:	4a05      	ldr	r2, [pc, #20]	; (b88 <_ZN14CLEDControllerC1Ev+0x3c>)
     b74:	6813      	ldr	r3, [r2, #0]
     b76:	b103      	cbz	r3, b7a <_ZN14CLEDControllerC1Ev+0x2e>
     b78:	6098      	str	r0, [r3, #8]
        m_pTail = this;
     b7a:	6010      	str	r0, [r2, #0]
    }
     b7c:	4770      	bx	lr
     b7e:	bf00      	nop
     b80:	00014080 	.word	0x00014080
     b84:	1fff8d60 	.word	0x1fff8d60
     b88:	1fff8d64 	.word	0x1fff8d64

00000b8c <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
     b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     b8e:	e890 0048 	ldmia.w	r0, {r3, r6}
     b92:	1af6      	subs	r6, r6, r3
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
     b94:	10b6      	asrs	r6, r6, #2
     b96:	bf14      	ite	ne
     b98:	4633      	movne	r3, r6
     b9a:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
     b9c:	199b      	adds	r3, r3, r6
     b9e:	4604      	mov	r4, r0
     ba0:	460f      	mov	r7, r1
     ba2:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
     ba6:	d203      	bcs.n	bb0 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x24>
     ba8:	42b3      	cmp	r3, r6
     baa:	bf38      	it	cc
     bac:	461e      	movcc	r6, r3
    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
     bae:	b126      	cbz	r6, bba <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x2e>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
     bb0:	00b0      	lsls	r0, r6, #2
     bb2:	f004 fc1d 	bl	53f0 <_Znwj>
     bb6:	4605      	mov	r5, r0
     bb8:	e000      	b.n	bbc <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x30>
     bba:	4635      	mov	r5, r6

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     bbc:	6862      	ldr	r2, [r4, #4]
     bbe:	6823      	ldr	r3, [r4, #0]
     bc0:	1ad3      	subs	r3, r2, r3
     bc2:	109b      	asrs	r3, r3, #2
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
     bc4:	eb05 0183 	add.w	r1, r5, r3, lsl #2

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     bc8:	683a      	ldr	r2, [r7, #0]
     bca:	b109      	cbz	r1, bd0 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x44>
     bcc:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
	  const ptrdiff_t _Num = __last - __first;
     bd0:	e894 0082 	ldmia.w	r4, {r1, r7}
     bd4:	1a7f      	subs	r7, r7, r1
	  if (_Num)
     bd6:	10bf      	asrs	r7, r7, #2
     bd8:	ea4f 0787 	mov.w	r7, r7, lsl #2
     bdc:	d003      	beq.n	be6 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
     bde:	4628      	mov	r0, r5
     be0:	463a      	mov	r2, r7
     be2:	f00e febf 	bl	f964 <memmove>
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
     be6:	6820      	ldr	r0, [r4, #0]
	  return __result + _Num;
     be8:	442f      	add	r7, r5
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
     bea:	3704      	adds	r7, #4
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
     bec:	b108      	cbz	r0, bf2 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x66>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
     bee:	f004 fbfb 	bl	53e8 <_ZdlPv>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
     bf2:	e884 00a0 	stmia.w	r4, {r5, r7}
	this->_M_impl._M_end_of_storage = __new_start + __len;
     bf6:	eb05 0586 	add.w	r5, r5, r6, lsl #2
     bfa:	60a5      	str	r5, [r4, #8]
     bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
     bfe:	b538      	push	{r3, r4, r5, lr}
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     c00:	6842      	ldr	r2, [r0, #4]
     c02:	6884      	ldr	r4, [r0, #8]
     c04:	42a2      	cmp	r2, r4

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
     c06:	4603      	mov	r3, r0
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     c08:	d006      	beq.n	c18 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_+0x1a>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     c0a:	6809      	ldr	r1, [r1, #0]
     c0c:	b102      	cbz	r2, c10 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_+0x12>
     c0e:	6011      	str	r1, [r2, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
     c10:	685a      	ldr	r2, [r3, #4]
     c12:	3204      	adds	r2, #4
     c14:	605a      	str	r2, [r3, #4]
     c16:	bd38      	pop	{r3, r4, r5, pc}
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
     c18:	f7ff ffb8 	bl	b8c <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_>
     c1c:	bd38      	pop	{r3, r4, r5, pc}
     c1e:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00000c20 <main>:

extern "C" int main(void)
{
     c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Serial.begin(9600);
	static bool reboot = false;
	int brightness = LED_DEFAULT_BRIGHTNESS;

	analogReference(DEFAULT);
     c24:	2000      	movs	r0, #0
        lastActionTime = millis();
    }
}

extern "C" int main(void)
{
     c26:	b088      	sub	sp, #32
    Serial.begin(9600);
	static bool reboot = false;
	int brightness = LED_DEFAULT_BRIGHTNESS;

	analogReference(DEFAULT);
     c28:	f002 f9cc 	bl	2fc4 <analogReference>
	analogReadAveraging(4);
     c2c:	2004      	movs	r0, #4
     c2e:	f002 f9ed 	bl	300c <analogReadAveraging>

    pinMode(RANDOM_PIN, INPUT);
     c32:	2100      	movs	r1, #0
     c34:	2003      	movs	r0, #3
     c36:	f002 ff3f 	bl	3ab8 <pinMode>
    randomSeed(analogRead(RANDOM_PIN));
     c3a:	2003      	movs	r0, #3
     c3c:	f002 fa10 	bl	3060 <analogRead>
     c40:	f004 fb84 	bl	534c <_Z10randomSeedm>
    random16_add_entropy(random());
     c44:	f004 fb88 	bl	5358 <_Z6randomv>
    return rand16seed;
}

LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
     c48:	4bb5      	ldr	r3, [pc, #724]	; (f20 <main+0x300>)
     c4a:	881a      	ldrh	r2, [r3, #0]
     c4c:	4410      	add	r0, r2
     c4e:	8018      	strh	r0, [r3, #0]

	pinMode(LED_PIN, OUTPUT);
     c50:	2101      	movs	r1, #1
     c52:	200d      	movs	r0, #13
     c54:	f002 ff30 	bl	3ab8 <pinMode>
    pinMode(MODE_PIN, INPUT);
     c58:	2000      	movs	r0, #0
     c5a:	4601      	mov	r1, r0
     c5c:	f002 ff2c 	bl	3ab8 <pinMode>
    attachInterrupt(MODE_PIN, modeButtonChange, RISING);
     c60:	2000      	movs	r0, #0
     c62:	49b0      	ldr	r1, [pc, #704]	; (f24 <main+0x304>)
     c64:	2203      	movs	r2, #3
     c66:	f002 fd9b 	bl	37a0 <attachInterrupt>

	begin:

	FastLED.setBrightness(LED_DEFAULT_BRIGHTNESS);
     c6a:	4baf      	ldr	r3, [pc, #700]	; (f28 <main+0x308>)
     c6c:	681e      	ldr	r6, [r3, #0]
			case WS2811_PORTC: return addLeds(new BlockClocklessController<NUM_LANES, NS(350), NS(350), NS(550)>(), data, nLedsOrOffset, nLedsIfOffset);
		}
	}
#endif

	void setBrightness(uint8_t scale) { m_Scale = scale; }
     c6e:	2364      	movs	r3, #100	; 0x64
     c70:	7033      	strb	r3, [r6, #0]
     c72:	2400      	movs	r4, #0
     c74:	f8df 8308 	ldr.w	r8, [pc, #776]	; f80 <main+0x360>
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     c78:	2300      	movs	r3, #0
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     c7a:	eb08 0104 	add.w	r1, r8, r4
     c7e:	a804      	add	r0, sp, #16
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     c80:	f88d 3010 	strb.w	r3, [sp, #16]
     c84:	f88d 3011 	strb.w	r3, [sp, #17]
     c88:	f88d 3012 	strb.w	r3, [sp, #18]
     c8c:	3403      	adds	r4, #3
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     c8e:	f7ff fc52 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
	for (uint8_t i = 0; i < nLEDS; i++)
     c92:	f240 23ee 	movw	r3, #750	; 0x2ee
     c96:	429c      	cmp	r4, r3
     c98:	4647      	mov	r7, r8
     c9a:	d1eb      	bne.n	c74 <main+0x54>
	    leds[i] = CHSV(0, 0, 0);
	led_init();
     c9c:	4ba3      	ldr	r3, [pc, #652]	; (f2c <main+0x30c>)
		switch(CHIPSET) {
			case LPD8806: { static LPD8806Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     c9e:	4ca4      	ldr	r4, [pc, #656]	; (f30 <main+0x310>)
     ca0:	f8d3 9000 	ldr.w	r9, [r3]
     ca4:	6823      	ldr	r3, [r4, #0]
     ca6:	f013 0a01 	ands.w	sl, r3, #1
     caa:	d10e      	bne.n	cca <main+0xaa>
     cac:	4620      	mov	r0, r4
     cae:	f002 fd09 	bl	36c4 <__cxa_guard_acquire>
     cb2:	b150      	cbz	r0, cca <main+0xaa>
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
	}

public:
	P9813Controller() {}
     cb4:	4d9f      	ldr	r5, [pc, #636]	; (f34 <main+0x314>)
     cb6:	4628      	mov	r0, r5
     cb8:	f7ff ff48 	bl	b4c <_ZN14CLEDControllerC1Ev>
     cbc:	4b9e      	ldr	r3, [pc, #632]	; (f38 <main+0x318>)
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
     cbe:	f8c5 a018 	str.w	sl, [r5, #24]
     cc2:	4620      	mov	r0, r4
     cc4:	602b      	str	r3, [r5, #0]
     cc6:	f002 fd03 	bl	36d0 <__cxa_guard_release>
     cca:	4649      	mov	r1, r9
     ccc:	2300      	movs	r3, #0
     cce:	4899      	ldr	r0, [pc, #612]	; (f34 <main+0x314>)
     cd0:	4c9a      	ldr	r4, [pc, #616]	; (f3c <main+0x31c>)
     cd2:	2264      	movs	r2, #100	; 0x64
     cd4:	f7ff fbdc 	bl	490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
     cd8:	4b99      	ldr	r3, [pc, #612]	; (f40 <main+0x320>)
     cda:	f8d3 9000 	ldr.w	r9, [r3]
     cde:	6823      	ldr	r3, [r4, #0]
     ce0:	f013 0a01 	ands.w	sl, r3, #1
     ce4:	d10e      	bne.n	d04 <main+0xe4>
     ce6:	4620      	mov	r0, r4
     ce8:	f002 fcec 	bl	36c4 <__cxa_guard_acquire>
     cec:	b150      	cbz	r0, d04 <main+0xe4>
     cee:	4d95      	ldr	r5, [pc, #596]	; (f44 <main+0x324>)
     cf0:	4628      	mov	r0, r5
     cf2:	f7ff ff2b 	bl	b4c <_ZN14CLEDControllerC1Ev>
     cf6:	4b94      	ldr	r3, [pc, #592]	; (f48 <main+0x328>)
     cf8:	f8c5 a018 	str.w	sl, [r5, #24]
     cfc:	4620      	mov	r0, r4
     cfe:	602b      	str	r3, [r5, #0]
     d00:	f002 fce6 	bl	36d0 <__cxa_guard_release>
     d04:	4649      	mov	r1, r9
     d06:	2300      	movs	r3, #0
     d08:	488e      	ldr	r0, [pc, #568]	; (f44 <main+0x324>)
     d0a:	4c90      	ldr	r4, [pc, #576]	; (f4c <main+0x32c>)
     d0c:	2264      	movs	r2, #100	; 0x64
     d0e:	f7ff fbbf 	bl	490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
     d12:	4b8f      	ldr	r3, [pc, #572]	; (f50 <main+0x330>)
     d14:	f8d3 9000 	ldr.w	r9, [r3]
     d18:	6823      	ldr	r3, [r4, #0]
     d1a:	f013 0a01 	ands.w	sl, r3, #1
     d1e:	d10e      	bne.n	d3e <main+0x11e>
     d20:	4620      	mov	r0, r4
     d22:	f002 fccf 	bl	36c4 <__cxa_guard_acquire>
     d26:	b150      	cbz	r0, d3e <main+0x11e>
     d28:	4d8a      	ldr	r5, [pc, #552]	; (f54 <main+0x334>)
     d2a:	4628      	mov	r0, r5
     d2c:	f7ff ff0e 	bl	b4c <_ZN14CLEDControllerC1Ev>
     d30:	4b89      	ldr	r3, [pc, #548]	; (f58 <main+0x338>)
     d32:	f8c5 a018 	str.w	sl, [r5, #24]
     d36:	4620      	mov	r0, r4
     d38:	602b      	str	r3, [r5, #0]
     d3a:	f002 fcc9 	bl	36d0 <__cxa_guard_release>
     d3e:	2232      	movs	r2, #50	; 0x32
     d40:	2300      	movs	r3, #0
     d42:	4649      	mov	r1, r9
     d44:	4883      	ldr	r0, [pc, #524]	; (f54 <main+0x334>)
     d46:	f7ff fba3 	bl	490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
     d4a:	2500      	movs	r5, #0

    std::vector<BaseMode*> modes;
    modes.push_back(new MeltMode());
     d4c:	2030      	movs	r0, #48	; 0x30
     d4e:	9505      	str	r5, [sp, #20]
     d50:	9506      	str	r5, [sp, #24]
     d52:	9507      	str	r5, [sp, #28]
     d54:	f004 fb4c 	bl	53f0 <_Znwj>
     d58:	4604      	mov	r4, r0
     d5a:	f001 fe45 	bl	29e8 <_ZN8MeltModeC1Ev>
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }
     d5e:	a904      	add	r1, sp, #16
     d60:	a805      	add	r0, sp, #20
     d62:	9404      	str	r4, [sp, #16]
     d64:	f7ff ff4b 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
    modes.push_back(new CloseEncounters());
     d68:	2040      	movs	r0, #64	; 0x40
     d6a:	f004 fb41 	bl	53f0 <_Znwj>
     d6e:	4604      	mov	r4, r0
     d70:	f000 fec2 	bl	1af8 <_ZN15CloseEncountersC1Ev>
     d74:	a904      	add	r1, sp, #16
     d76:	a805      	add	r0, sp, #20
     d78:	9404      	str	r4, [sp, #16]
     d7a:	f7ff ff40 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
    modes.push_back(new Rainbow());
     d7e:	2028      	movs	r0, #40	; 0x28
     d80:	f004 fb36 	bl	53f0 <_Znwj>
     d84:	4604      	mov	r4, r0
     d86:	f002 f825 	bl	2dd4 <_ZN7RainbowC1Ev>
     d8a:	a904      	add	r1, sp, #16
     d8c:	a805      	add	r0, sp, #20
     d8e:	9404      	str	r4, [sp, #16]
     d90:	f7ff ff35 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
    modes.push_back(new Moon());
     d94:	2028      	movs	r0, #40	; 0x28
     d96:	f004 fb2b 	bl	53f0 <_Znwj>
     d9a:	4604      	mov	r4, r0
     d9c:	f001 fe64 	bl	2a68 <_ZN4MoonC1Ev>
     da0:	a904      	add	r1, sp, #16
     da2:	a805      	add	r0, sp, #20
     da4:	9404      	str	r4, [sp, #16]
     da6:	f7ff ff2a 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     daa:	24ff      	movs	r4, #255	; 0xff
    modes.push_back(new ColorMode("red", CHSV(0, 255, 255), 150));
     dac:	2014      	movs	r0, #20
     dae:	f88d 500c 	strb.w	r5, [sp, #12]
     db2:	f88d 400d 	strb.w	r4, [sp, #13]
     db6:	f88d 400e 	strb.w	r4, [sp, #14]
     dba:	f004 fb19 	bl	53f0 <_Znwj>
     dbe:	aa03      	add	r2, sp, #12
     dc0:	2396      	movs	r3, #150	; 0x96
     dc2:	4966      	ldr	r1, [pc, #408]	; (f5c <main+0x33c>)
     dc4:	4681      	mov	r9, r0
     dc6:	f001 fc01 	bl	25cc <_ZN9ColorModeC1EPKc4CHSVl>
     dca:	a904      	add	r1, sp, #16
     dcc:	a805      	add	r0, sp, #20
     dce:	f8cd 9010 	str.w	r9, [sp, #16]
     dd2:	f7ff ff14 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
     dd6:	23c0      	movs	r3, #192	; 0xc0
    modes.push_back(new ColorMode("purple", CHSV(192, 255, 255), 125));
     dd8:	2014      	movs	r0, #20
     dda:	f88d 300c 	strb.w	r3, [sp, #12]
     dde:	f88d 400d 	strb.w	r4, [sp, #13]
     de2:	f88d 400e 	strb.w	r4, [sp, #14]
     de6:	f004 fb03 	bl	53f0 <_Znwj>
     dea:	aa03      	add	r2, sp, #12
     dec:	237d      	movs	r3, #125	; 0x7d
     dee:	495c      	ldr	r1, [pc, #368]	; (f60 <main+0x340>)
     df0:	4681      	mov	r9, r0
     df2:	f001 fbeb 	bl	25cc <_ZN9ColorModeC1EPKc4CHSVl>
     df6:	a904      	add	r1, sp, #16
     df8:	a805      	add	r0, sp, #20
     dfa:	f8cd 9010 	str.w	r9, [sp, #16]
     dfe:	f7ff fefe 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
     e02:	2320      	movs	r3, #32
    modes.push_back(new ColorMode("orange", CHSV(32, 255, 255), 125));
     e04:	2014      	movs	r0, #20
     e06:	f88d 300c 	strb.w	r3, [sp, #12]
     e0a:	f88d 400d 	strb.w	r4, [sp, #13]
     e0e:	f88d 400e 	strb.w	r4, [sp, #14]
     e12:	f004 faed 	bl	53f0 <_Znwj>
     e16:	aa03      	add	r2, sp, #12
     e18:	237d      	movs	r3, #125	; 0x7d
     e1a:	4952      	ldr	r1, [pc, #328]	; (f64 <main+0x344>)
     e1c:	4681      	mov	r9, r0
     e1e:	f001 fbd5 	bl	25cc <_ZN9ColorModeC1EPKc4CHSVl>
     e22:	a904      	add	r1, sp, #16
     e24:	a805      	add	r0, sp, #20
     e26:	f8cd 9010 	str.w	r9, [sp, #16]
     e2a:	f7ff fee8 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
    modes.push_back(new ColorMode("white", CHSV(0, 0, 255), 0));
     e2e:	2014      	movs	r0, #20
     e30:	f88d 500c 	strb.w	r5, [sp, #12]
     e34:	f88d 500d 	strb.w	r5, [sp, #13]
     e38:	f88d 400e 	strb.w	r4, [sp, #14]
     e3c:	f004 fad8 	bl	53f0 <_Znwj>
     e40:	462b      	mov	r3, r5
     e42:	aa03      	add	r2, sp, #12
     e44:	4948      	ldr	r1, [pc, #288]	; (f68 <main+0x348>)
     e46:	4604      	mov	r4, r0
     e48:	f001 fbc0 	bl	25cc <_ZN9ColorModeC1EPKc4CHSVl>
     e4c:	a904      	add	r1, sp, #16
     e4e:	a805      	add	r0, sp, #20
     e50:	9404      	str	r4, [sp, #16]
     e52:	f7ff fed4 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
     e56:	9c05      	ldr	r4, [sp, #20]
    std::vector<BaseMode*>::iterator modeIterator = modes.begin();

    // <cgerstle> eeprom seems to fuck my usb connection sometimes, comment out to use serial
    eeprom_initialize();
     e58:	f002 f9b4 	bl	31c4 <eeprom_initialize>
    byte modeIndex = eeprom_read_byte(EEPROM_ADDRESS);
     e5c:	4628      	mov	r0, r5
     e5e:	f002 f9e7 	bl	3230 <eeprom_read_byte>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     e62:	9a06      	ldr	r2, [sp, #24]
     e64:	9b05      	ldr	r3, [sp, #20]
     e66:	1ad3      	subs	r3, r2, r3
    if (modeIndex < modes.size())
     e68:	ebb0 0fa3 	cmp.w	r0, r3, asr #2
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }
     e6c:	bf3c      	itt	cc
     e6e:	b203      	sxthcc	r3, r0
     e70:	eb04 0483 	addcc.w	r4, r4, r3, lsl #2
    modes.push_back(new ColorMode("white", CHSV(0, 0, 255), 0));
    std::vector<BaseMode*>::iterator modeIterator = modes.begin();

    // <cgerstle> eeprom seems to fuck my usb connection sometimes, comment out to use serial
    eeprom_initialize();
    byte modeIndex = eeprom_read_byte(EEPROM_ADDRESS);
     e74:	4605      	mov	r5, r0
    if (modeIndex < modes.size())
            modeIterator += modeIndex;
    Serial.printf("mode Index: %d current mode: %s\n", modeIndex, (*modeIterator)->name());
     e76:	6820      	ldr	r0, [r4, #0]
     e78:	6803      	ldr	r3, [r0, #0]
     e7a:	68db      	ldr	r3, [r3, #12]
     e7c:	4798      	blx	r3
     e7e:	462a      	mov	r2, r5
     e80:	4603      	mov	r3, r0
     e82:	493a      	ldr	r1, [pc, #232]	; (f6c <main+0x34c>)
     e84:	483a      	ldr	r0, [pc, #232]	; (f70 <main+0x350>)
     e86:	f002 febb 	bl	3c00 <_ZN5Print6printfEPKcz>
     e8a:	2500      	movs	r5, #0
     e8c:	2300      	movs	r3, #0
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     e8e:	eb08 0105 	add.w	r1, r8, r5
     e92:	a804      	add	r0, sp, #16
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     e94:	f88d 3010 	strb.w	r3, [sp, #16]
     e98:	f88d 3011 	strb.w	r3, [sp, #17]
     e9c:	f88d 3012 	strb.w	r3, [sp, #18]
     ea0:	3503      	adds	r5, #3
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     ea2:	f7ff fb48 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>

	for (uint8_t i = 0; i < nLEDS; i++)
     ea6:	f240 23ee 	movw	r3, #750	; 0x2ee
     eaa:	429d      	cmp	r5, r3
     eac:	d1ee      	bne.n	e8c <main+0x26c>

	/// Update all our controllers with the current led colors, using the passed in brightness
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     eae:	4630      	mov	r0, r6
     eb0:	7831      	ldrb	r1, [r6, #0]
     eb2:	f7ff fb01 	bl	4b8 <_ZN8CFastLED4showEh>
	    leds[i] = CHSV(0, 0, 0);
	led_show();

	while (1) {
		if (reboot)
     eb6:	4b2f      	ldr	r3, [pc, #188]	; (f74 <main+0x354>)
     eb8:	781d      	ldrb	r5, [r3, #0]
     eba:	2d00      	cmp	r5, #0
     ebc:	d16e      	bne.n	f9c <main+0x37c>
			goto reboot;

		brightness = analogRead(BRIGHTNESS_PIN);
     ebe:	2001      	movs	r0, #1
     ec0:	f002 f8ce 	bl	3060 <analogRead>
//		Serial.print(brightness); Serial.print("\t");
		brightness = map(brightness, 500, 1023, 0, 255);
     ec4:	23ff      	movs	r3, #255	; 0xff
     ec6:	f240 32ff 	movw	r2, #1023	; 0x3ff
     eca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     ece:	9300      	str	r3, [sp, #0]
     ed0:	462b      	mov	r3, r5
     ed2:	f004 fa78 	bl	53c6 <_Z3maplllll>
		if (brightness < 5)
		    brightness = 0;
     ed6:	2804      	cmp	r0, #4
     ed8:	bfd8      	it	le
     eda:	2000      	movle	r0, #0
//		Serial.println(brightness);
		FastLED.setBrightness(brightness);
     edc:	7030      	strb	r0, [r6, #0]

		(*modeIterator)->frame();
     ede:	6820      	ldr	r0, [r4, #0]
     ee0:	6803      	ldr	r3, [r0, #0]
     ee2:	689b      	ldr	r3, [r3, #8]
     ee4:	4798      	blx	r3
     ee6:	4630      	mov	r0, r6
     ee8:	7831      	ldrb	r1, [r6, #0]
     eea:	f7ff fae5 	bl	4b8 <_ZN8CFastLED4showEh>
		led_show();

		if (modeChange)
     eee:	4b22      	ldr	r3, [pc, #136]	; (f78 <main+0x358>)
     ef0:	781a      	ldrb	r2, [r3, #0]
     ef2:	2a00      	cmp	r2, #0
     ef4:	d0df      	beq.n	eb6 <main+0x296>
		{
		    modeChange = false;
		    digitalWrite(LED_PIN, HIGH);   // set the LED on
     ef6:	200d      	movs	r0, #13
     ef8:	2101      	movs	r1, #1
		(*modeIterator)->frame();
		led_show();

		if (modeChange)
		{
		    modeChange = false;
     efa:	701d      	strb	r5, [r3, #0]
		    digitalWrite(LED_PIN, HIGH);   // set the LED on
     efc:	f002 fdae 	bl	3a5c <digitalWrite>

		    modeIterator++;
		    if (modeIterator == modes.end())
     f00:	9b06      	ldr	r3, [sp, #24]
	return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }
     f02:	3404      	adds	r4, #4
     f04:	429c      	cmp	r4, r3
     f06:	d13d      	bne.n	f84 <main+0x364>
class Print
{
  public:
	Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     f08:	4c19      	ldr	r4, [pc, #100]	; (f70 <main+0x350>)
     f0a:	491c      	ldr	r1, [pc, #112]	; (f7c <main+0x35c>)
     f0c:	6823      	ldr	r3, [r4, #0]
     f0e:	4620      	mov	r0, r4
     f10:	685b      	ldr	r3, [r3, #4]
     f12:	2216      	movs	r2, #22
     f14:	4798      	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     f16:	4620      	mov	r0, r4
     f18:	f002 fe5c 	bl	3bd4 <_ZN5Print7printlnEv>
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
     f1c:	9c05      	ldr	r4, [sp, #20]
     f1e:	e031      	b.n	f84 <main+0x364>
     f20:	1fff8404 	.word	0x1fff8404
     f24:	00000b11 	.word	0x00000b11
     f28:	00013f60 	.word	0x00013f60
     f2c:	1fff8410 	.word	0x1fff8410
     f30:	1fff90b4 	.word	0x1fff90b4
     f34:	1fff9090 	.word	0x1fff9090
     f38:	00014098 	.word	0x00014098
     f3c:	1fff90b0 	.word	0x1fff90b0
     f40:	1fff840c 	.word	0x1fff840c
     f44:	1fff9074 	.word	0x1fff9074
     f48:	000140b0 	.word	0x000140b0
     f4c:	1fff90ac 	.word	0x1fff90ac
     f50:	1fff8408 	.word	0x1fff8408
     f54:	1fff9058 	.word	0x1fff9058
     f58:	000140c8 	.word	0x000140c8
     f5c:	000140d8 	.word	0x000140d8
     f60:	000140dc 	.word	0x000140dc
     f64:	000140e3 	.word	0x000140e3
     f68:	000140ea 	.word	0x000140ea
     f6c:	000140f0 	.word	0x000140f0
     f70:	1fff9408 	.word	0x1fff9408
     f74:	1fff90b8 	.word	0x1fff90b8
     f78:	1fff90c0 	.word	0x1fff90c0
     f7c:	00014111 	.word	0x00014111
     f80:	1fff8d68 	.word	0x1fff8d68

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }
     f84:	9905      	ldr	r1, [sp, #20]
     f86:	1a61      	subs	r1, r4, r1
		        modeIterator = modes.begin();
		    }

//		    Serial.println((*modeIterator)->name());
//		    Serial.printf("new index: %d\r\n", modeIterator - modes.begin());
		    eeprom_write_byte(EEPROM_ADDRESS, modeIterator - modes.begin());
     f88:	2000      	movs	r0, #0
     f8a:	f3c1 0187 	ubfx	r1, r1, #2, #8
     f8e:	f002 f963 	bl	3258 <eeprom_write_byte>
		    digitalWrite(LED_PIN, LOW);    // set the LED off
     f92:	200d      	movs	r0, #13
     f94:	2100      	movs	r1, #0
     f96:	f002 fd61 	bl	3a5c <digitalWrite>
     f9a:	e78c      	b.n	eb6 <main+0x296>
	}

	reboot:

	// Attempt teardown
	reboot = false;
     f9c:	2200      	movs	r2, #0
     f9e:	9c05      	ldr	r4, [sp, #20]
     fa0:	701a      	strb	r2, [r3, #0]
	for(std::vector<BaseMode*>::iterator i = modes.begin(); i != modes.end(); ++i )
     fa2:	9b06      	ldr	r3, [sp, #24]
     fa4:	429c      	cmp	r4, r3
     fa6:	d007      	beq.n	fb8 <main+0x398>
	{
    	delete *i;
     fa8:	f854 0b04 	ldr.w	r0, [r4], #4
     fac:	2800      	cmp	r0, #0
     fae:	d0f8      	beq.n	fa2 <main+0x382>
     fb0:	6803      	ldr	r3, [r0, #0]
     fb2:	685b      	ldr	r3, [r3, #4]
     fb4:	4798      	blx	r3
     fb6:	e7f4      	b.n	fa2 <main+0x382>
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos)
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
     fb8:	9b05      	ldr	r3, [sp, #20]
     fba:	9306      	str	r3, [sp, #24]
     fbc:	2300      	movs	r3, #0
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     fbe:	18f9      	adds	r1, r7, r3
     fc0:	2200      	movs	r2, #0
     fc2:	54fa      	strb	r2, [r7, r3]
        g = (colorcode >>  8) & 0xFF;
     fc4:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
     fc6:	708a      	strb	r2, [r1, #2]
     fc8:	3303      	adds	r3, #3
	}
	modes.clear();

    for (int i = 0; i < nLEDS; i++)
     fca:	f240 22ee 	movw	r2, #750	; 0x2ee
     fce:	4293      	cmp	r3, r2
     fd0:	d1f5      	bne.n	fbe <main+0x39e>
     fd2:	4630      	mov	r0, r6
     fd4:	7831      	ldrb	r1, [r6, #0]
     fd6:	f7ff fa6f 	bl	4b8 <_ZN8CFastLED4showEh>
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
     fda:	9805      	ldr	r0, [sp, #20]
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
     fdc:	2800      	cmp	r0, #0
     fde:	f43f ae44 	beq.w	c6a <main+0x4a>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
     fe2:	f004 fa01 	bl	53e8 <_ZdlPv>
     fe6:	e640      	b.n	c6a <main+0x4a>

00000fe8 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     fe8:	6800      	ldr	r0, [r0, #0]
     fea:	b508      	push	{r3, lr}
     fec:	b110      	cbz	r0, ff4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv+0xc>
     fee:	6803      	ldr	r3, [r0, #0]
     ff0:	681b      	ldr	r3, [r3, #0]
     ff2:	4798      	blx	r3
     ff4:	bd08      	pop	{r3, pc}

00000ff6 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>:

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     ff6:	6800      	ldr	r0, [r0, #0]
     ff8:	b508      	push	{r3, lr}
     ffa:	b110      	cbz	r0, 1002 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv+0xc>
     ffc:	6803      	ldr	r3, [r0, #0]
     ffe:	685b      	ldr	r3, [r3, #4]
    1000:	4798      	blx	r3
    1002:	bd08      	pop	{r3, pc}

00001004 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4initEv>:

	virtual void init() {
    1004:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN { 
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
    1006:	2101      	movs	r1, #1
    1008:	4604      	mov	r4, r0
    100a:	200a      	movs	r0, #10
    100c:	f002 fd54 	bl	3ab8 <pinMode>
    1010:	200b      	movs	r0, #11
    1012:	2101      	movs	r1, #1
    1014:	f002 fd50 	bl	3ab8 <pinMode>
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
    1018:	f104 0018 	add.w	r0, r4, #24
    101c:	f7ff ffeb 	bl	ff6 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>
    1020:	bd10      	pop	{r4, pc}
    1022:	ffff 4a2d 	vtbl.8	d20, {d15-d17}, d29

00001024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    1024:	4a2d      	ldr	r2, [pc, #180]	; (10dc <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh+0xb8>)
    1026:	4b2e      	ldr	r3, [pc, #184]	; (10e0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh+0xbc>)
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    1028:	f010 0f80 	tst.w	r0, #128	; 0x80
    102c:	f04f 0110 	mov.w	r1, #16
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1030:	bf14      	ite	ne
    1032:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1034:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1036:	2140      	movs	r1, #64	; 0x40
    1038:	6011      	str	r1, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {NOP;}
    103a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    103c:	6019      	str	r1, [r3, #0]
    103e:	bf00      	nop
    1040:	2110      	movs	r1, #16
    1042:	f010 0f40 	tst.w	r0, #64	; 0x40
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1046:	bf14      	ite	ne
    1048:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    104a:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    104c:	2140      	movs	r1, #64	; 0x40
    104e:	6011      	str	r1, [r2, #0]
    1050:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1052:	6019      	str	r1, [r3, #0]
    1054:	bf00      	nop
    1056:	2110      	movs	r1, #16
    1058:	f010 0f20 	tst.w	r0, #32
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    105c:	bf14      	ite	ne
    105e:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1060:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1062:	2140      	movs	r1, #64	; 0x40
    1064:	6011      	str	r1, [r2, #0]
    1066:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1068:	6019      	str	r1, [r3, #0]
    106a:	bf00      	nop
    106c:	2110      	movs	r1, #16
    106e:	f010 0f10 	tst.w	r0, #16
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1072:	bf14      	ite	ne
    1074:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1076:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1078:	2140      	movs	r1, #64	; 0x40
    107a:	6011      	str	r1, [r2, #0]
    107c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    107e:	6019      	str	r1, [r3, #0]
    1080:	bf00      	nop
    1082:	2110      	movs	r1, #16
    1084:	f010 0f08 	tst.w	r0, #8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1088:	bf14      	ite	ne
    108a:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    108c:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    108e:	2140      	movs	r1, #64	; 0x40
    1090:	6011      	str	r1, [r2, #0]
    1092:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1094:	6019      	str	r1, [r3, #0]
    1096:	bf00      	nop
    1098:	2110      	movs	r1, #16
    109a:	f010 0f04 	tst.w	r0, #4
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    109e:	bf14      	ite	ne
    10a0:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10a2:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10a4:	2140      	movs	r1, #64	; 0x40
    10a6:	6011      	str	r1, [r2, #0]
    10a8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10aa:	6019      	str	r1, [r3, #0]
    10ac:	bf00      	nop
    10ae:	2110      	movs	r1, #16
    10b0:	f010 0f02 	tst.w	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10b4:	bf14      	ite	ne
    10b6:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10b8:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10ba:	2140      	movs	r1, #64	; 0x40
    10bc:	6011      	str	r1, [r2, #0]
    10be:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10c0:	6019      	str	r1, [r3, #0]
    10c2:	bf00      	nop
    10c4:	2110      	movs	r1, #16
    10c6:	f010 0f01 	tst.w	r0, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10ca:	bf14      	ite	ne
    10cc:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10ce:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10d0:	2140      	movs	r1, #64	; 0x40
    10d2:	6011      	str	r1, [r2, #0]
    10d4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10d6:	6019      	str	r1, [r3, #0]
    10d8:	bf00      	nop
    10da:	4770      	bx	lr
    10dc:	400ff084 	.word	0x400ff084
    10e0:	400ff088 	.word	0x400ff088

000010e4 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(15)>
class P9813Controller : public CLEDController {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
    10e4:	b508      	push	{r3, lr}
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    10e6:	2000      	movs	r0, #0
    10e8:	f7ff ff9c 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    10ec:	2000      	movs	r0, #0
    10ee:	f7ff ff99 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    10f2:	2000      	movs	r0, #0
    10f4:	f7ff ff96 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    10f8:	2000      	movs	r0, #0
    10fa:	f7ff ff93 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    10fe:	bd08      	pop	{r3, pc}

00001100 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    1100:	6800      	ldr	r0, [r0, #0]
    1102:	b508      	push	{r3, lr}
    1104:	b110      	cbz	r0, 110c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv+0xc>
    1106:	6803      	ldr	r3, [r0, #0]
    1108:	681b      	ldr	r3, [r3, #0]
    110a:	4798      	blx	r3
    110c:	bd08      	pop	{r3, pc}

0000110e <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>:

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    110e:	6800      	ldr	r0, [r0, #0]
    1110:	b508      	push	{r3, lr}
    1112:	b110      	cbz	r0, 111a <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv+0xc>
    1114:	6803      	ldr	r3, [r0, #0]
    1116:	685b      	ldr	r3, [r3, #4]
    1118:	4798      	blx	r3
    111a:	bd08      	pop	{r3, pc}

0000111c <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4initEv>:
	}

public:
	P9813Controller() {}

	virtual void init() {
    111c:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN { 
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
    111e:	2101      	movs	r1, #1
    1120:	4604      	mov	r4, r0
    1122:	2008      	movs	r0, #8
    1124:	f002 fcc8 	bl	3ab8 <pinMode>
    1128:	2009      	movs	r0, #9
    112a:	2101      	movs	r1, #1
    112c:	f002 fcc4 	bl	3ab8 <pinMode>
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
    1130:	f104 0018 	add.w	r0, r4, #24
    1134:	f7ff ffeb 	bl	110e <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>
    1138:	bd10      	pop	{r4, pc}
    113a:	ffff f010 	vshr.u32	d31, d0, #1

0000113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>:
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    113c:	f010 0f80 	tst.w	r0, #128	; 0x80
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    1140:	b510      	push	{r4, lr}
    1142:	4a2c      	ldr	r2, [pc, #176]	; (11f4 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xb8>)
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1144:	bf14      	ite	ne
    1146:	4c2c      	ldrne	r4, [pc, #176]	; (11f8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1148:	4c2c      	ldreq	r4, [pc, #176]	; (11fc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    114a:	4b2d      	ldr	r3, [pc, #180]	; (1200 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc4>)
    114c:	2108      	movs	r1, #8
    114e:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1150:	6011      	str	r1, [r2, #0]
    1152:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1154:	6019      	str	r1, [r3, #0]
    1156:	bf00      	nop
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    1158:	f010 0f40 	tst.w	r0, #64	; 0x40
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    115c:	bf14      	ite	ne
    115e:	4c26      	ldrne	r4, [pc, #152]	; (11f8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1160:	4c26      	ldreq	r4, [pc, #152]	; (11fc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1162:	2108      	movs	r1, #8
    1164:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1166:	6011      	str	r1, [r2, #0]
    1168:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    116a:	6019      	str	r1, [r3, #0]
    116c:	bf00      	nop
    116e:	f010 0f20 	tst.w	r0, #32
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1172:	bf14      	ite	ne
    1174:	4c20      	ldrne	r4, [pc, #128]	; (11f8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1176:	4c21      	ldreq	r4, [pc, #132]	; (11fc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1178:	2108      	movs	r1, #8
    117a:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    117c:	6011      	str	r1, [r2, #0]
    117e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1180:	6019      	str	r1, [r3, #0]
    1182:	bf00      	nop
    1184:	f010 0f10 	tst.w	r0, #16
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1188:	bf14      	ite	ne
    118a:	4c1b      	ldrne	r4, [pc, #108]	; (11f8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    118c:	4c1b      	ldreq	r4, [pc, #108]	; (11fc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    118e:	2108      	movs	r1, #8
    1190:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1192:	6011      	str	r1, [r2, #0]
    1194:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1196:	6019      	str	r1, [r3, #0]
    1198:	bf00      	nop
    119a:	f010 0f08 	tst.w	r0, #8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    119e:	bf14      	ite	ne
    11a0:	4c15      	ldrne	r4, [pc, #84]	; (11f8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    11a2:	4c16      	ldreq	r4, [pc, #88]	; (11fc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    11a4:	2108      	movs	r1, #8
    11a6:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    11a8:	6011      	str	r1, [r2, #0]
    11aa:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    11ac:	6019      	str	r1, [r3, #0]
    11ae:	bf00      	nop
    11b0:	f010 0f04 	tst.w	r0, #4
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    11b4:	bf14      	ite	ne
    11b6:	4c10      	ldrne	r4, [pc, #64]	; (11f8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    11b8:	4c10      	ldreq	r4, [pc, #64]	; (11fc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    11ba:	2108      	movs	r1, #8
    11bc:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    11be:	6011      	str	r1, [r2, #0]
    11c0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    11c2:	6019      	str	r1, [r3, #0]
    11c4:	bf00      	nop
    11c6:	f010 0f02 	tst.w	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    11ca:	bf14      	ite	ne
    11cc:	4c0a      	ldrne	r4, [pc, #40]	; (11f8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    11ce:	4c0b      	ldreq	r4, [pc, #44]	; (11fc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    11d0:	2108      	movs	r1, #8
    11d2:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    11d4:	6011      	str	r1, [r2, #0]
    11d6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    11d8:	6019      	str	r1, [r3, #0]
    11da:	bf00      	nop
    11dc:	f010 0f01 	tst.w	r0, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    11e0:	bf14      	ite	ne
    11e2:	4805      	ldrne	r0, [pc, #20]	; (11f8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    11e4:	4805      	ldreq	r0, [pc, #20]	; (11fc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    11e6:	2108      	movs	r1, #8
    11e8:	6001      	str	r1, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    11ea:	6011      	str	r1, [r2, #0]
    11ec:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    11ee:	6019      	str	r1, [r3, #0]
    11f0:	bf00      	nop
    11f2:	bd10      	pop	{r4, pc}
    11f4:	400ff084 	.word	0x400ff084
    11f8:	400ff0c4 	.word	0x400ff0c4
    11fc:	400ff0c8 	.word	0x400ff0c8
    1200:	400ff088 	.word	0x400ff088

00001204 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(15)>
class P9813Controller : public CLEDController {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
    1204:	b508      	push	{r3, lr}
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    1206:	2000      	movs	r0, #0
    1208:	f7ff ff98 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    120c:	2000      	movs	r0, #0
    120e:	f7ff ff95 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1212:	2000      	movs	r0, #0
    1214:	f7ff ff92 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1218:	2000      	movs	r0, #0
    121a:	f7ff ff8f 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    121e:	bd08      	pop	{r3, pc}

00001220 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    1220:	6800      	ldr	r0, [r0, #0]
    1222:	b508      	push	{r3, lr}
    1224:	b110      	cbz	r0, 122c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv+0xc>
    1226:	6803      	ldr	r3, [r0, #0]
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	4798      	blx	r3
    122c:	bd08      	pop	{r3, pc}

0000122e <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>:

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    122e:	6800      	ldr	r0, [r0, #0]
    1230:	b508      	push	{r3, lr}
    1232:	b110      	cbz	r0, 123a <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv+0xc>
    1234:	6803      	ldr	r3, [r0, #0]
    1236:	685b      	ldr	r3, [r3, #4]
    1238:	4798      	blx	r3
    123a:	bd08      	pop	{r3, pc}

0000123c <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4initEv>:
	}

public:
	P9813Controller() {}

	virtual void init() {
    123c:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN { 
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
    123e:	2101      	movs	r1, #1
    1240:	4604      	mov	r4, r0
    1242:	2006      	movs	r0, #6
    1244:	f002 fc38 	bl	3ab8 <pinMode>
    1248:	2007      	movs	r0, #7
    124a:	2101      	movs	r1, #1
    124c:	f002 fc34 	bl	3ab8 <pinMode>
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
    1250:	f104 0018 	add.w	r0, r4, #24
    1254:	f7ff ffeb 	bl	122e <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>
    1258:	bd10      	pop	{r4, pc}
    125a:	ffff 4a2d 	vtbl.8	d20, {d15-d17}, d29

0000125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    125c:	4a2d      	ldr	r2, [pc, #180]	; (1314 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh+0xb8>)
    125e:	4b2e      	ldr	r3, [pc, #184]	; (1318 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh+0xbc>)
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    1260:	f010 0f80 	tst.w	r0, #128	; 0x80
    1264:	f04f 0110 	mov.w	r1, #16
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1268:	bf14      	ite	ne
    126a:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    126c:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    126e:	2104      	movs	r1, #4
    1270:	6011      	str	r1, [r2, #0]
    1272:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1274:	6019      	str	r1, [r3, #0]
    1276:	bf00      	nop
    1278:	2110      	movs	r1, #16
    127a:	f010 0f40 	tst.w	r0, #64	; 0x40
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    127e:	bf14      	ite	ne
    1280:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1282:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1284:	2104      	movs	r1, #4
    1286:	6011      	str	r1, [r2, #0]
    1288:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    128a:	6019      	str	r1, [r3, #0]
    128c:	bf00      	nop
    128e:	2110      	movs	r1, #16
    1290:	f010 0f20 	tst.w	r0, #32
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1294:	bf14      	ite	ne
    1296:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1298:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    129a:	2104      	movs	r1, #4
    129c:	6011      	str	r1, [r2, #0]
    129e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12a0:	6019      	str	r1, [r3, #0]
    12a2:	bf00      	nop
    12a4:	2110      	movs	r1, #16
    12a6:	f010 0f10 	tst.w	r0, #16
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12aa:	bf14      	ite	ne
    12ac:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12ae:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12b0:	2104      	movs	r1, #4
    12b2:	6011      	str	r1, [r2, #0]
    12b4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12b6:	6019      	str	r1, [r3, #0]
    12b8:	bf00      	nop
    12ba:	2110      	movs	r1, #16
    12bc:	f010 0f08 	tst.w	r0, #8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12c0:	bf14      	ite	ne
    12c2:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12c4:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12c6:	2104      	movs	r1, #4
    12c8:	6011      	str	r1, [r2, #0]
    12ca:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12cc:	6019      	str	r1, [r3, #0]
    12ce:	bf00      	nop
    12d0:	2110      	movs	r1, #16
    12d2:	f010 0f04 	tst.w	r0, #4
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12d6:	bf14      	ite	ne
    12d8:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12da:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12dc:	2104      	movs	r1, #4
    12de:	6011      	str	r1, [r2, #0]
    12e0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12e2:	6019      	str	r1, [r3, #0]
    12e4:	bf00      	nop
    12e6:	2110      	movs	r1, #16
    12e8:	f010 0f02 	tst.w	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12ec:	bf14      	ite	ne
    12ee:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12f0:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12f2:	2104      	movs	r1, #4
    12f4:	6011      	str	r1, [r2, #0]
    12f6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12f8:	6019      	str	r1, [r3, #0]
    12fa:	bf00      	nop
    12fc:	2110      	movs	r1, #16
    12fe:	f010 0f01 	tst.w	r0, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1302:	bf14      	ite	ne
    1304:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1306:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1308:	2104      	movs	r1, #4
    130a:	6011      	str	r1, [r2, #0]
    130c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    130e:	6019      	str	r1, [r3, #0]
    1310:	bf00      	nop
    1312:	4770      	bx	lr
    1314:	400ff0c4 	.word	0x400ff0c4
    1318:	400ff0c8 	.word	0x400ff0c8

0000131c <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(15)>
class P9813Controller : public CLEDController {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
    131c:	b508      	push	{r3, lr}
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    131e:	2000      	movs	r0, #0
    1320:	f7ff ff9c 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1324:	2000      	movs	r0, #0
    1326:	f7ff ff99 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    132a:	2000      	movs	r0, #0
    132c:	f7ff ff96 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1330:	2000      	movs	r0, #0
    1332:	f7ff ff93 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1336:	bd08      	pop	{r3, pc}

00001338 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv>:
            mData += 1;
            mAdvance = 4;
        }
#endif

        void init_binary_dithering() {
    1338:	b510      	push	{r4, lr}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>64) + \
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS
            // R is the digther signal 'counter'.
            static byte R = 0;
            R++;
    133a:	4b16      	ldr	r3, [pc, #88]	; (1394 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x5c>)
    133c:	781a      	ldrb	r2, [r3, #0]
    133e:	3201      	adds	r2, #1

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1340:	f002 0207 	and.w	r2, r2, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
    1344:	f012 0f01 	tst.w	r2, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1348:	701a      	strb	r2, [r3, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
    134a:	bf14      	ite	ne
    134c:	2380      	movne	r3, #128	; 0x80
    134e:	2300      	moveq	r3, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1350:	0791      	lsls	r1, r2, #30
    1352:	bf44      	itt	mi
    1354:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
    1358:	b2db      	uxtbmi	r3, r3
                if(R & 0x04) { Q |= 0x20; }
    135a:	0752      	lsls	r2, r2, #29
    135c:	bf48      	it	mi
    135e:	f043 0320 	orrmi.w	r3, r3, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1362:	3310      	adds	r3, #16
    1364:	b2d9      	uxtb	r1, r3
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1366:	2200      	movs	r2, #0
                    byte s = mScale.raw[i];
    1368:	7b83      	ldrb	r3, [r0, #14]
                    e[i] = s ? (256/s) + 1 : 0;
    136a:	b12b      	cbz	r3, 1378 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x40>
    136c:	f44f 7480 	mov.w	r4, #256	; 0x100
    1370:	fb94 f3f3 	sdiv	r3, r4, r3
    1374:	3301      	adds	r3, #1
    1376:	b2db      	uxtb	r3, r3
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1378:	fb11 f403 	smulbb	r4, r1, r3
    137c:	1224      	asrs	r4, r4, #8
    137e:	72c3      	strb	r3, [r0, #11]
    1380:	7204      	strb	r4, [r0, #8]
                    d[i] = scale8(Q, e[i]);
                    if(e[i]) e[i]--;
    1382:	b10b      	cbz	r3, 1388 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x50>
    1384:	3b01      	subs	r3, #1
    1386:	72c3      	strb	r3, [r0, #11]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1388:	3201      	adds	r2, #1
    138a:	2a03      	cmp	r2, #3
    138c:	f100 0001 	add.w	r0, r0, #1
    1390:	d1ea      	bne.n	1368 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x30>
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
                    if(e[i]) e[i]--;
            }
#endif
        }
    1392:	bd10      	pop	{r4, pc}
    1394:	1fff9056 	.word	0x1fff9056

00001398 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>:
            enable_dithering(dither);
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
    1398:	b510      	push	{r4, lr}
    139a:	e880 0006 	stmia.w	r0, {r1, r2}
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    139e:	781a      	ldrb	r2, [r3, #0]
    13a0:	7382      	strb	r2, [r0, #14]
        g = rhs.g;
    13a2:	785a      	ldrb	r2, [r3, #1]
        b = rhs.b;
    13a4:	789b      	ldrb	r3, [r3, #2]
    13a6:	7403      	strb	r3, [r0, #16]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    13a8:	f89d 3008 	ldrb.w	r3, [sp, #8]

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    13ac:	73c2      	strb	r2, [r0, #15]
    13ae:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
    13b0:	4604      	mov	r4, r0
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    13b2:	d102      	bne.n	13ba <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h+0x22>
                case BINARY_DITHER: init_binary_dithering(); break;
    13b4:	f7ff ffc0 	bl	1338 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv>
    13b8:	e006      	b.n	13c8 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h+0x30>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    13ba:	2300      	movs	r3, #0
    13bc:	7343      	strb	r3, [r0, #13]
    13be:	7303      	strb	r3, [r0, #12]
    13c0:	72c3      	strb	r3, [r0, #11]
    13c2:	7283      	strb	r3, [r0, #10]
    13c4:	7243      	strb	r3, [r0, #9]
    13c6:	7203      	strb	r3, [r0, #8]
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    13c8:	2303      	movs	r3, #3
    13ca:	7463      	strb	r3, [r4, #17]
        }
    13cc:	4620      	mov	r0, r4
    13ce:	bd10      	pop	{r4, pc}

000013d0 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_>:

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    13d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    13d4:	b089      	sub	sp, #36	; 0x24
    13d6:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    13d8:	7c80      	ldrb	r0, [r0, #18]
    13da:	9000      	str	r0, [sp, #0]

		mSPI.select();
    13dc:	3518      	adds	r5, #24
		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    13de:	a803      	add	r0, sp, #12

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    13e0:	4616      	mov	r6, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    13e2:	f7ff ffd9 	bl	1398 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>

		mSPI.select();
    13e6:	4628      	mov	r0, r5
    13e8:	f7ff fdfe 	bl	fe8 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv>

		writeBoundary();
    13ec:	f7ff fe7a 	bl	10e4 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>
		for(int i = 0; i < nLeds; i++) {
    13f0:	2400      	movs	r4, #0
    13f2:	42b4      	cmp	r4, r6
    13f4:	da62      	bge.n	14bc <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0xec>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    13f6:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    13f8:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    13fa:	b122      	cbz	r2, 1406 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x36>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    13fc:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1400:	fa82 f251 	uqadd8	r2, r2, r1
    1404:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1406:	f89d 101a 	ldrb.w	r1, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    140a:	fb12 f201 	smulbb	r2, r2, r1
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    140e:	7859      	ldrb	r1, [r3, #1]
    1410:	1212      	asrs	r2, r2, #8
    1412:	fa5f f882 	uxtb.w	r8, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1416:	b121      	cbz	r1, 1422 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x52>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1418:	f89d 0015 	ldrb.w	r0, [sp, #21]
    141c:	fa81 f150 	uqadd8	r1, r1, r0
    1420:	b2c9      	uxtb	r1, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1422:	f89d 001b 	ldrb.w	r0, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1426:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1428:	fb11 f100 	smulbb	r1, r1, r0
    142c:	1209      	asrs	r1, r1, #8
    142e:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1432:	b123      	cbz	r3, 143e <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x6e>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1434:	f89d 0016 	ldrb.w	r0, [sp, #22]
    1438:	fa83 f350 	uqadd8	r3, r3, r0
    143c:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    143e:	f89d 701c 	ldrb.w	r7, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    1442:	43d2      	mvns	r2, r2
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1444:	fb13 f307 	smulbb	r3, r3, r7
    1448:	121f      	asrs	r7, r3, #8
    144a:	f3c2 1281 	ubfx	r2, r2, #6, #2
    144e:	43c9      	mvns	r1, r1
    1450:	f062 023f 	orn	r2, r2, #63	; 0x3f
    1454:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    1458:	43f8      	mvns	r0, r7
    145a:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
    145e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    1462:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    1466:	b2c0      	uxtb	r0, r0
    1468:	f7ff fddc 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    146c:	4638      	mov	r0, r7
    146e:	f7ff fdd9 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1472:	4648      	mov	r0, r9
    1474:	f7ff fdd6 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1478:	4640      	mov	r0, r8
    147a:	f7ff fdd3 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    147e:	f89d 201d 	ldrb.w	r2, [sp, #29]
    1482:	9b03      	ldr	r3, [sp, #12]
    1484:	4413      	add	r3, r2
    1486:	9303      	str	r3, [sp, #12]
    1488:	9b04      	ldr	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    148a:	f89d 2017 	ldrb.w	r2, [sp, #23]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    148e:	3b01      	subs	r3, #1
    1490:	9304      	str	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1492:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1496:	1ad3      	subs	r3, r2, r3
    1498:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    149c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    14a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    14a4:	1ad3      	subs	r3, r2, r3
    14a6:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    14aa:	f89d 2019 	ldrb.w	r2, [sp, #25]
    14ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
    14b2:	1ad3      	subs	r3, r2, r3
    14b4:	f88d 3016 	strb.w	r3, [sp, #22]
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());

		mSPI.select();

		writeBoundary();
		for(int i = 0; i < nLeds; i++) {
    14b8:	3401      	adds	r4, #1
    14ba:	e79a      	b.n	13f2 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x22>
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.advanceData();
			pixels.stepDithering();
		}
		writeBoundary();
    14bc:	f7ff fe12 	bl	10e4 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>

		mSPI.release();
    14c0:	4628      	mov	r0, r5
    14c2:	f7ff fd98 	bl	ff6 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>
	}
    14c6:	b009      	add	sp, #36	; 0x24
    14c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000014cc <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_>:

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    14cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14d0:	b089      	sub	sp, #36	; 0x24
    14d2:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    14d4:	7c80      	ldrb	r0, [r0, #18]
    14d6:	9000      	str	r0, [sp, #0]

		mSPI.select();
    14d8:	3518      	adds	r5, #24
		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    14da:	a803      	add	r0, sp, #12

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    14dc:	4616      	mov	r6, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    14de:	f7ff ff5b 	bl	1398 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>

		mSPI.select();
    14e2:	4628      	mov	r0, r5
    14e4:	f7ff fe0c 	bl	1100 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv>

		writeBoundary();
    14e8:	f7ff fe8c 	bl	1204 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>
		for(int i = 0; i < nLeds; i++) {
    14ec:	2400      	movs	r4, #0
    14ee:	42b4      	cmp	r4, r6
    14f0:	da62      	bge.n	15b8 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0xec>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    14f2:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    14f4:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    14f6:	b122      	cbz	r2, 1502 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x36>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    14f8:	f89d 1014 	ldrb.w	r1, [sp, #20]
    14fc:	fa82 f251 	uqadd8	r2, r2, r1
    1500:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1502:	f89d 101a 	ldrb.w	r1, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1506:	fb12 f201 	smulbb	r2, r2, r1
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    150a:	7859      	ldrb	r1, [r3, #1]
    150c:	1212      	asrs	r2, r2, #8
    150e:	fa5f f882 	uxtb.w	r8, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1512:	b121      	cbz	r1, 151e <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x52>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1514:	f89d 0015 	ldrb.w	r0, [sp, #21]
    1518:	fa81 f150 	uqadd8	r1, r1, r0
    151c:	b2c9      	uxtb	r1, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    151e:	f89d 001b 	ldrb.w	r0, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1522:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1524:	fb11 f100 	smulbb	r1, r1, r0
    1528:	1209      	asrs	r1, r1, #8
    152a:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    152e:	b123      	cbz	r3, 153a <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x6e>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1530:	f89d 0016 	ldrb.w	r0, [sp, #22]
    1534:	fa83 f350 	uqadd8	r3, r3, r0
    1538:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    153a:	f89d 701c 	ldrb.w	r7, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    153e:	43d2      	mvns	r2, r2
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1540:	fb13 f307 	smulbb	r3, r3, r7
    1544:	121f      	asrs	r7, r3, #8
    1546:	f3c2 1281 	ubfx	r2, r2, #6, #2
    154a:	43c9      	mvns	r1, r1
    154c:	f062 023f 	orn	r2, r2, #63	; 0x3f
    1550:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    1554:	43f8      	mvns	r0, r7
    1556:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
    155a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    155e:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    1562:	b2c0      	uxtb	r0, r0
    1564:	f7ff fdea 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1568:	4638      	mov	r0, r7
    156a:	f7ff fde7 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    156e:	4648      	mov	r0, r9
    1570:	f7ff fde4 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1574:	4640      	mov	r0, r8
    1576:	f7ff fde1 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    157a:	f89d 201d 	ldrb.w	r2, [sp, #29]
    157e:	9b03      	ldr	r3, [sp, #12]
    1580:	4413      	add	r3, r2
    1582:	9303      	str	r3, [sp, #12]
    1584:	9b04      	ldr	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1586:	f89d 2017 	ldrb.w	r2, [sp, #23]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    158a:	3b01      	subs	r3, #1
    158c:	9304      	str	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    158e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1592:	1ad3      	subs	r3, r2, r3
    1594:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    1598:	f89d 2018 	ldrb.w	r2, [sp, #24]
    159c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    15a0:	1ad3      	subs	r3, r2, r3
    15a2:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    15a6:	f89d 2019 	ldrb.w	r2, [sp, #25]
    15aa:	f89d 3016 	ldrb.w	r3, [sp, #22]
    15ae:	1ad3      	subs	r3, r2, r3
    15b0:	f88d 3016 	strb.w	r3, [sp, #22]
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());

		mSPI.select();

		writeBoundary();
		for(int i = 0; i < nLeds; i++) {
    15b4:	3401      	adds	r4, #1
    15b6:	e79a      	b.n	14ee <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x22>
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.advanceData();
			pixels.stepDithering();
		}
		writeBoundary();
    15b8:	f7ff fe24 	bl	1204 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>

		mSPI.release();
    15bc:	4628      	mov	r0, r5
    15be:	f7ff fda6 	bl	110e <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>
	}
    15c2:	b009      	add	sp, #36	; 0x24
    15c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000015c8 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_>:

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    15c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15cc:	b089      	sub	sp, #36	; 0x24
    15ce:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    15d0:	7c80      	ldrb	r0, [r0, #18]
    15d2:	9000      	str	r0, [sp, #0]

		mSPI.select();
    15d4:	3518      	adds	r5, #24
		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    15d6:	a803      	add	r0, sp, #12

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    15d8:	4616      	mov	r6, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    15da:	f7ff fedd 	bl	1398 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>

		mSPI.select();
    15de:	4628      	mov	r0, r5
    15e0:	f7ff fe1e 	bl	1220 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv>

		writeBoundary();
    15e4:	f7ff fe9a 	bl	131c <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>
		for(int i = 0; i < nLeds; i++) {
    15e8:	2400      	movs	r4, #0
    15ea:	42b4      	cmp	r4, r6
    15ec:	da62      	bge.n	16b4 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0xec>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    15ee:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    15f0:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    15f2:	b122      	cbz	r2, 15fe <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x36>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    15f4:	f89d 1014 	ldrb.w	r1, [sp, #20]
    15f8:	fa82 f251 	uqadd8	r2, r2, r1
    15fc:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    15fe:	f89d 101a 	ldrb.w	r1, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1602:	fb12 f201 	smulbb	r2, r2, r1
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1606:	7859      	ldrb	r1, [r3, #1]
    1608:	1212      	asrs	r2, r2, #8
    160a:	fa5f f882 	uxtb.w	r8, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    160e:	b121      	cbz	r1, 161a <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x52>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1610:	f89d 0015 	ldrb.w	r0, [sp, #21]
    1614:	fa81 f150 	uqadd8	r1, r1, r0
    1618:	b2c9      	uxtb	r1, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    161a:	f89d 001b 	ldrb.w	r0, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    161e:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1620:	fb11 f100 	smulbb	r1, r1, r0
    1624:	1209      	asrs	r1, r1, #8
    1626:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    162a:	b123      	cbz	r3, 1636 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x6e>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    162c:	f89d 0016 	ldrb.w	r0, [sp, #22]
    1630:	fa83 f350 	uqadd8	r3, r3, r0
    1634:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1636:	f89d 701c 	ldrb.w	r7, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    163a:	43d2      	mvns	r2, r2
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    163c:	fb13 f307 	smulbb	r3, r3, r7
    1640:	121f      	asrs	r7, r3, #8
    1642:	f3c2 1281 	ubfx	r2, r2, #6, #2
    1646:	43c9      	mvns	r1, r1
    1648:	f062 023f 	orn	r2, r2, #63	; 0x3f
    164c:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    1650:	43f8      	mvns	r0, r7
    1652:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
    1656:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    165a:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    165e:	b2c0      	uxtb	r0, r0
    1660:	f7ff fdfc 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1664:	4638      	mov	r0, r7
    1666:	f7ff fdf9 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    166a:	4648      	mov	r0, r9
    166c:	f7ff fdf6 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1670:	4640      	mov	r0, r8
    1672:	f7ff fdf3 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    1676:	f89d 201d 	ldrb.w	r2, [sp, #29]
    167a:	9b03      	ldr	r3, [sp, #12]
    167c:	4413      	add	r3, r2
    167e:	9303      	str	r3, [sp, #12]
    1680:	9b04      	ldr	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1682:	f89d 2017 	ldrb.w	r2, [sp, #23]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    1686:	3b01      	subs	r3, #1
    1688:	9304      	str	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    168a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    168e:	1ad3      	subs	r3, r2, r3
    1690:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    1694:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1698:	f89d 3015 	ldrb.w	r3, [sp, #21]
    169c:	1ad3      	subs	r3, r2, r3
    169e:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    16a2:	f89d 2019 	ldrb.w	r2, [sp, #25]
    16a6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    16aa:	1ad3      	subs	r3, r2, r3
    16ac:	f88d 3016 	strb.w	r3, [sp, #22]
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());

		mSPI.select();

		writeBoundary();
		for(int i = 0; i < nLeds; i++) {
    16b0:	3401      	adds	r4, #1
    16b2:	e79a      	b.n	15ea <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x22>
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.advanceData();
			pixels.stepDithering();
		}
		writeBoundary();
    16b4:	f7ff fe32 	bl	131c <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>

		mSPI.release();
    16b8:	4628      	mov	r0, r5
    16ba:	f7ff fdb8 	bl	122e <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>
	}
    16be:	b009      	add	sp, #36	; 0x24
    16c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000016c4 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>:
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
    16c4:	b510      	push	{r4, lr}
    16c6:	e880 0006 	stmia.w	r0, {r1, r2}
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16ca:	781a      	ldrb	r2, [r3, #0]
    16cc:	7382      	strb	r2, [r0, #14]
        g = rhs.g;
    16ce:	785a      	ldrb	r2, [r3, #1]
        b = rhs.b;
    16d0:	789b      	ldrb	r3, [r3, #2]
    16d2:	7403      	strb	r3, [r0, #16]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    16d4:	f89d 3008 	ldrb.w	r3, [sp, #8]

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16d8:	73c2      	strb	r2, [r0, #15]
    16da:	2b01      	cmp	r3, #1
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
    16dc:	4604      	mov	r4, r0
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    16de:	d102      	bne.n	16e6 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h+0x22>
                case BINARY_DITHER: init_binary_dithering(); break;
    16e0:	f7ff fe2a 	bl	1338 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv>
    16e4:	e006      	b.n	16f4 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h+0x30>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    16e6:	2300      	movs	r3, #0
    16e8:	7343      	strb	r3, [r0, #13]
    16ea:	7303      	strb	r3, [r0, #12]
    16ec:	72c3      	strb	r3, [r0, #11]
    16ee:	7283      	strb	r3, [r0, #10]
    16f0:	7243      	strb	r3, [r0, #9]
    16f2:	7203      	strb	r3, [r0, #8]
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    16f4:	2300      	movs	r3, #0
    16f6:	7463      	strb	r3, [r4, #17]
        }
    16f8:	4620      	mov	r0, r4
    16fa:	bd10      	pop	{r4, pc}

000016fc <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_>:

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    16fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1700:	b089      	sub	sp, #36	; 0x24
    1702:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1704:	7c80      	ldrb	r0, [r0, #18]
    1706:	9000      	str	r0, [sp, #0]

		mSPI.select();
    1708:	3518      	adds	r5, #24
	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    170a:	a803      	add	r0, sp, #12

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    170c:	4614      	mov	r4, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    170e:	f7ff ffd9 	bl	16c4 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>

		mSPI.select();
    1712:	4628      	mov	r0, r5
    1714:	f7ff fc68 	bl	fe8 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv>

		writeBoundary();
    1718:	f7ff fce4 	bl	10e4 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>
		while(nLeds--) {
    171c:	2c00      	cmp	r4, #0
    171e:	d05a      	beq.n	17d6 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0xda>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1720:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1722:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1724:	b122      	cbz	r2, 1730 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x34>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1726:	f89d 1014 	ldrb.w	r1, [sp, #20]
    172a:	fa82 f251 	uqadd8	r2, r2, r1
    172e:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1730:	f89d 701a 	ldrb.w	r7, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1734:	fb12 f207 	smulbb	r2, r2, r7
    1738:	1217      	asrs	r7, r2, #8
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    173a:	785a      	ldrb	r2, [r3, #1]
    173c:	fa5f f887 	uxtb.w	r8, r7
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1740:	b122      	cbz	r2, 174c <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x50>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1742:	f89d 1015 	ldrb.w	r1, [sp, #21]
    1746:	fa82 f251 	uqadd8	r2, r2, r1
    174a:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    174c:	f89d 101b 	ldrb.w	r1, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1750:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1752:	fb12 f201 	smulbb	r2, r2, r1
    1756:	1211      	asrs	r1, r2, #8
    1758:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    175c:	b123      	cbz	r3, 1768 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x6c>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    175e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    1762:	fa83 f352 	uqadd8	r3, r3, r2
    1766:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1768:	f89d 601c 	ldrb.w	r6, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    176c:	43ff      	mvns	r7, r7
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    176e:	fb13 f306 	smulbb	r3, r3, r6
    1772:	121e      	asrs	r6, r3, #8
    1774:	f3c7 1781 	ubfx	r7, r7, #6, #2
    1778:	43c9      	mvns	r1, r1
    177a:	f067 073f 	orn	r7, r7, #63	; 0x3f
    177e:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    1782:	43f0      	mvns	r0, r6
    1784:	ea47 1111 	orr.w	r1, r7, r1, lsr #4
    1788:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    178c:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    1790:	b2c0      	uxtb	r0, r0
    1792:	f7ff fc47 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1796:	4630      	mov	r0, r6
    1798:	f7ff fc44 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    179c:	4648      	mov	r0, r9
    179e:	f7ff fc41 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    17a2:	4640      	mov	r0, r8
    17a4:	f7ff fc3e 	bl	1024 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    17a8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    17ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
    17b0:	1ad3      	subs	r3, r2, r3
    17b2:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    17b6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    17ba:	f89d 3015 	ldrb.w	r3, [sp, #21]
    17be:	1ad3      	subs	r3, r2, r3
    17c0:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    17c4:	f89d 2019 	ldrb.w	r2, [sp, #25]
    17c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    17cc:	1ad3      	subs	r3, r2, r3
    17ce:	f88d 3016 	strb.w	r3, [sp, #22]
    17d2:	3c01      	subs	r4, #1
    17d4:	e7a2      	b.n	171c <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x20>
		writeBoundary();
		while(nLeds--) {
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.stepDithering();
		}
		writeBoundary();
    17d6:	f7ff fc85 	bl	10e4 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>

		mSPI.waitFully();
		mSPI.release();
    17da:	4628      	mov	r0, r5
    17dc:	f7ff fc0b 	bl	ff6 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>
	}
    17e0:	b009      	add	sp, #36	; 0x24
    17e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000017e6 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_>:

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    17e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    17ea:	b089      	sub	sp, #36	; 0x24
    17ec:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    17ee:	7c80      	ldrb	r0, [r0, #18]
    17f0:	9000      	str	r0, [sp, #0]

		mSPI.select();
    17f2:	3518      	adds	r5, #24
	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    17f4:	a803      	add	r0, sp, #12

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    17f6:	4614      	mov	r4, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    17f8:	f7ff ff64 	bl	16c4 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>

		mSPI.select();
    17fc:	4628      	mov	r0, r5
    17fe:	f7ff fc7f 	bl	1100 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv>

		writeBoundary();
    1802:	f7ff fcff 	bl	1204 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>
		while(nLeds--) {
    1806:	2c00      	cmp	r4, #0
    1808:	d05a      	beq.n	18c0 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0xda>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    180a:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    180c:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    180e:	b122      	cbz	r2, 181a <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x34>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1810:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1814:	fa82 f251 	uqadd8	r2, r2, r1
    1818:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    181a:	f89d 701a 	ldrb.w	r7, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    181e:	fb12 f207 	smulbb	r2, r2, r7
    1822:	1217      	asrs	r7, r2, #8
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1824:	785a      	ldrb	r2, [r3, #1]
    1826:	fa5f f887 	uxtb.w	r8, r7
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    182a:	b122      	cbz	r2, 1836 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x50>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    182c:	f89d 1015 	ldrb.w	r1, [sp, #21]
    1830:	fa82 f251 	uqadd8	r2, r2, r1
    1834:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1836:	f89d 101b 	ldrb.w	r1, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    183a:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    183c:	fb12 f201 	smulbb	r2, r2, r1
    1840:	1211      	asrs	r1, r2, #8
    1842:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1846:	b123      	cbz	r3, 1852 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x6c>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1848:	f89d 2016 	ldrb.w	r2, [sp, #22]
    184c:	fa83 f352 	uqadd8	r3, r3, r2
    1850:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1852:	f89d 601c 	ldrb.w	r6, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    1856:	43ff      	mvns	r7, r7
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1858:	fb13 f306 	smulbb	r3, r3, r6
    185c:	121e      	asrs	r6, r3, #8
    185e:	f3c7 1781 	ubfx	r7, r7, #6, #2
    1862:	43c9      	mvns	r1, r1
    1864:	f067 073f 	orn	r7, r7, #63	; 0x3f
    1868:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    186c:	43f0      	mvns	r0, r6
    186e:	ea47 1111 	orr.w	r1, r7, r1, lsr #4
    1872:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    1876:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    187a:	b2c0      	uxtb	r0, r0
    187c:	f7ff fc5e 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1880:	4630      	mov	r0, r6
    1882:	f7ff fc5b 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1886:	4648      	mov	r0, r9
    1888:	f7ff fc58 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    188c:	4640      	mov	r0, r8
    188e:	f7ff fc55 	bl	113c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1892:	f89d 2017 	ldrb.w	r2, [sp, #23]
    1896:	f89d 3014 	ldrb.w	r3, [sp, #20]
    189a:	1ad3      	subs	r3, r2, r3
    189c:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    18a0:	f89d 2018 	ldrb.w	r2, [sp, #24]
    18a4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    18a8:	1ad3      	subs	r3, r2, r3
    18aa:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    18ae:	f89d 2019 	ldrb.w	r2, [sp, #25]
    18b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    18b6:	1ad3      	subs	r3, r2, r3
    18b8:	f88d 3016 	strb.w	r3, [sp, #22]
    18bc:	3c01      	subs	r4, #1
    18be:	e7a2      	b.n	1806 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x20>
		writeBoundary();
		while(nLeds--) {
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.stepDithering();
		}
		writeBoundary();
    18c0:	f7ff fca0 	bl	1204 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>

		mSPI.waitFully();
		mSPI.release();
    18c4:	4628      	mov	r0, r5
    18c6:	f7ff fc22 	bl	110e <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>
	}
    18ca:	b009      	add	sp, #36	; 0x24
    18cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000018d0 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_>:

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    18d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    18d4:	b089      	sub	sp, #36	; 0x24
    18d6:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    18d8:	7c80      	ldrb	r0, [r0, #18]
    18da:	9000      	str	r0, [sp, #0]

		mSPI.select();
    18dc:	3518      	adds	r5, #24
	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    18de:	a803      	add	r0, sp, #12

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    18e0:	4614      	mov	r4, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    18e2:	f7ff feef 	bl	16c4 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>

		mSPI.select();
    18e6:	4628      	mov	r0, r5
    18e8:	f7ff fc9a 	bl	1220 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv>

		writeBoundary();
    18ec:	f7ff fd16 	bl	131c <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>
		while(nLeds--) {
    18f0:	2c00      	cmp	r4, #0
    18f2:	d05a      	beq.n	19aa <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0xda>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    18f4:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    18f6:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    18f8:	b122      	cbz	r2, 1904 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x34>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    18fa:	f89d 1014 	ldrb.w	r1, [sp, #20]
    18fe:	fa82 f251 	uqadd8	r2, r2, r1
    1902:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1904:	f89d 701a 	ldrb.w	r7, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1908:	fb12 f207 	smulbb	r2, r2, r7
    190c:	1217      	asrs	r7, r2, #8
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    190e:	785a      	ldrb	r2, [r3, #1]
    1910:	fa5f f887 	uxtb.w	r8, r7
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1914:	b122      	cbz	r2, 1920 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x50>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1916:	f89d 1015 	ldrb.w	r1, [sp, #21]
    191a:	fa82 f251 	uqadd8	r2, r2, r1
    191e:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1920:	f89d 101b 	ldrb.w	r1, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1924:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1926:	fb12 f201 	smulbb	r2, r2, r1
    192a:	1211      	asrs	r1, r2, #8
    192c:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1930:	b123      	cbz	r3, 193c <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x6c>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1932:	f89d 2016 	ldrb.w	r2, [sp, #22]
    1936:	fa83 f352 	uqadd8	r3, r3, r2
    193a:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    193c:	f89d 601c 	ldrb.w	r6, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    1940:	43ff      	mvns	r7, r7
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1942:	fb13 f306 	smulbb	r3, r3, r6
    1946:	121e      	asrs	r6, r3, #8
    1948:	f3c7 1781 	ubfx	r7, r7, #6, #2
    194c:	43c9      	mvns	r1, r1
    194e:	f067 073f 	orn	r7, r7, #63	; 0x3f
    1952:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    1956:	43f0      	mvns	r0, r6
    1958:	ea47 1111 	orr.w	r1, r7, r1, lsr #4
    195c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    1960:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    1964:	b2c0      	uxtb	r0, r0
    1966:	f7ff fc79 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    196a:	4630      	mov	r0, r6
    196c:	f7ff fc76 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1970:	4648      	mov	r0, r9
    1972:	f7ff fc73 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1976:	4640      	mov	r0, r8
    1978:	f7ff fc70 	bl	125c <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    197c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    1980:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1984:	1ad3      	subs	r3, r2, r3
    1986:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    198a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    198e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1992:	1ad3      	subs	r3, r2, r3
    1994:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    1998:	f89d 2019 	ldrb.w	r2, [sp, #25]
    199c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    19a0:	1ad3      	subs	r3, r2, r3
    19a2:	f88d 3016 	strb.w	r3, [sp, #22]
    19a6:	3c01      	subs	r4, #1
    19a8:	e7a2      	b.n	18f0 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x20>
		writeBoundary();
		while(nLeds--) {
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.stepDithering();
		}
		writeBoundary();
    19aa:	f7ff fcb7 	bl	131c <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>

		mSPI.waitFully();
		mSPI.release();
    19ae:	4628      	mov	r0, r5
    19b0:	f7ff fc3d 	bl	122e <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>
	}
    19b4:	b009      	add	sp, #36	; 0x24
    19b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    19ba:	ffff 4b04 	vtbl.8	d20, {d15-d18}, d4

000019bc <_GLOBAL__sub_I_modeChange>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    19bc:	4b04      	ldr	r3, [pc, #16]	; (19d0 <_GLOBAL__sub_I_modeChange+0x14>)
        leds[i] = 0;
	led_show();

    goto begin;
}
    19be:	b082      	sub	sp, #8
    19c0:	681b      	ldr	r3, [r3, #0]
    19c2:	9301      	str	r3, [sp, #4]
	return ret;
    19c4:	9a01      	ldr	r2, [sp, #4]
#define RANDOM_PIN 3

#define EEPROM_ADDRESS 0

bool modeChange = false;
unsigned long lastActionTime = millis();
    19c6:	4b03      	ldr	r3, [pc, #12]	; (19d4 <_GLOBAL__sub_I_modeChange+0x18>)
    19c8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < nLEDS; i++)
        leds[i] = 0;
	led_show();

    goto begin;
}
    19ca:	b002      	add	sp, #8
    19cc:	4770      	bx	lr
    19ce:	bf00      	nop
    19d0:	1fff91a8 	.word	0x1fff91a8
    19d4:	1fff90bc 	.word	0x1fff90bc

000019d8 <_ZN8BaseModeD1Ev>:
#include "BaseMode.h"

BaseMode::BaseMode() {
}

BaseMode::~BaseMode() {
    19d8:	4b01      	ldr	r3, [pc, #4]	; (19e0 <_ZN8BaseModeD1Ev+0x8>)
    19da:	6003      	str	r3, [r0, #0]
}
    19dc:	4770      	bx	lr
    19de:	bf00      	nop
    19e0:	00014130 	.word	0x00014130

000019e4 <_ZN8BaseModeD0Ev>:
#include "BaseMode.h"

BaseMode::BaseMode() {
}

BaseMode::~BaseMode() {
    19e4:	b510      	push	{r4, lr}
    19e6:	4b03      	ldr	r3, [pc, #12]	; (19f4 <_ZN8BaseModeD0Ev+0x10>)
    19e8:	6003      	str	r3, [r0, #0]
    19ea:	4604      	mov	r4, r0
}
    19ec:	f003 fcfc 	bl	53e8 <_ZdlPv>
    19f0:	4620      	mov	r0, r4
    19f2:	bd10      	pop	{r4, pc}
    19f4:	00014130 	.word	0x00014130

000019f8 <_ZN8BaseModeC1Ev>:
#include "BaseMode.h"

BaseMode::BaseMode() {
    19f8:	4b01      	ldr	r3, [pc, #4]	; (1a00 <_ZN8BaseModeC1Ev+0x8>)
    19fa:	6003      	str	r3, [r0, #0]
}
    19fc:	4770      	bx	lr
    19fe:	bf00      	nop
    1a00:	00014130 	.word	0x00014130

00001a04 <_ZL15nscale8x3_videoRhS_S_h>:
#endif
}


LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
    1a04:	b530      	push	{r4, r5, lr}
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    1a06:	7805      	ldrb	r5, [r0, #0]


LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    1a08:	1c1c      	adds	r4, r3, #0
    1a0a:	bf18      	it	ne
    1a0c:	2401      	movne	r4, #1
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    1a0e:	b125      	cbz	r5, 1a1a <_ZL15nscale8x3_videoRhS_S_h+0x16>
    1a10:	fb15 f503 	smulbb	r5, r5, r3
    1a14:	eb04 2515 	add.w	r5, r4, r5, lsr #8
    1a18:	b2ed      	uxtb	r5, r5
    1a1a:	7005      	strb	r5, [r0, #0]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    1a1c:	7808      	ldrb	r0, [r1, #0]
    1a1e:	b120      	cbz	r0, 1a2a <_ZL15nscale8x3_videoRhS_S_h+0x26>
    1a20:	fb10 f003 	smulbb	r0, r0, r3
    1a24:	eb04 2010 	add.w	r0, r4, r0, lsr #8
    1a28:	b2c0      	uxtb	r0, r0
    1a2a:	7008      	strb	r0, [r1, #0]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    1a2c:	7811      	ldrb	r1, [r2, #0]
    1a2e:	b121      	cbz	r1, 1a3a <_ZL15nscale8x3_videoRhS_S_h+0x36>
    1a30:	fb11 f103 	smulbb	r1, r1, r3
    1a34:	eb04 2111 	add.w	r1, r4, r1, lsr #8
    1a38:	b2c9      	uxtb	r1, r1
    1a3a:	7011      	strb	r1, [r2, #0]
    1a3c:	bd30      	pop	{r4, r5, pc}
    1a3e:	ffff 4a06 	vtbl.8	d20, {d15-d17}, d6

00001a40 <_ZL7random8v>:
extern uint16_t rand16seed;// = RAND16_SEED;


LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * RAND16_2053) + RAND16_13849;
    1a40:	4a06      	ldr	r2, [pc, #24]	; (1a5c <_ZL7random8v+0x1c>)
    1a42:	8813      	ldrh	r3, [r2, #0]
    1a44:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    1a48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1a4c:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1a50:	3019      	adds	r0, #25
    1a52:	b280      	uxth	r0, r0
    1a54:	8010      	strh	r0, [r2, #0]
    return rand16seed;
}
    1a56:	b2c0      	uxtb	r0, r0
    1a58:	4770      	bx	lr
    1a5a:	bf00      	nop
    1a5c:	1fff8404 	.word	0x1fff8404

00001a60 <_ZN15CloseEncounters4nameEv>:
    CloseEncounters();
    virtual ~CloseEncounters();

public:
    virtual void frame();
    virtual const char* name() { return _name; }
    1a60:	6840      	ldr	r0, [r0, #4]
    1a62:	4770      	bx	lr

00001a64 <_ZN15CloseEncountersD1Ev>:
    _lastBlueChange = millis();
    _blueDelay = 125;
    _lastNewDotCheckTime = millis();
}

CloseEncounters::~CloseEncounters() {
    1a64:	b538      	push	{r3, r4, r5, lr}
    1a66:	4b0d      	ldr	r3, [pc, #52]	; (1a9c <_ZN15CloseEncountersD1Ev+0x38>)
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    1a68:	69c5      	ldr	r5, [r0, #28]
    1a6a:	6003      	str	r3, [r0, #0]
    1a6c:	4604      	mov	r4, r0
	for(std::vector<Bar*>::iterator i = _colorBars.begin(); i != _colorBars.end(); ++i )
    1a6e:	6a23      	ldr	r3, [r4, #32]
    1a70:	429d      	cmp	r5, r3
    1a72:	d004      	beq.n	1a7e <_ZN15CloseEncountersD1Ev+0x1a>
	{
    	delete *i;
    1a74:	f855 0b04 	ldr.w	r0, [r5], #4
    1a78:	f003 fcb6 	bl	53e8 <_ZdlPv>
    1a7c:	e7f7      	b.n	1a6e <_ZN15CloseEncountersD1Ev+0xa>
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
    1a7e:	6b60      	ldr	r0, [r4, #52]	; 0x34
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos)
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
    1a80:	69e3      	ldr	r3, [r4, #28]
    1a82:	6223      	str	r3, [r4, #32]
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
    1a84:	b108      	cbz	r0, 1a8a <_ZN15CloseEncountersD1Ev+0x26>
    1a86:	f003 fcaf 	bl	53e8 <_ZdlPv>
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
    1a8a:	69e0      	ldr	r0, [r4, #28]
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
    1a8c:	b108      	cbz	r0, 1a92 <_ZN15CloseEncountersD1Ev+0x2e>
    1a8e:	f003 fcab 	bl	53e8 <_ZdlPv>
	}
	_colorBars.clear();
}
    1a92:	4620      	mov	r0, r4
    1a94:	f7ff ffa0 	bl	19d8 <_ZN8BaseModeD1Ev>
    1a98:	4620      	mov	r0, r4
    1a9a:	bd38      	pop	{r3, r4, r5, pc}
    1a9c:	00014148 	.word	0x00014148

00001aa0 <_ZN15CloseEncountersD0Ev>:
    _lastBlueChange = millis();
    _blueDelay = 125;
    _lastNewDotCheckTime = millis();
}

CloseEncounters::~CloseEncounters() {
    1aa0:	b510      	push	{r4, lr}
    1aa2:	4604      	mov	r4, r0
	for(std::vector<Bar*>::iterator i = _colorBars.begin(); i != _colorBars.end(); ++i )
	{
    	delete *i;
	}
	_colorBars.clear();
}
    1aa4:	f7ff ffde 	bl	1a64 <_ZN15CloseEncountersD1Ev>
    1aa8:	4620      	mov	r0, r4
    1aaa:	f003 fc9d 	bl	53e8 <_ZdlPv>
    1aae:	4620      	mov	r0, r4
    1ab0:	bd10      	pop	{r4, pc}

00001ab2 <_ZN5Print7printlnEPKc>:
    1ab2:	b538      	push	{r3, r4, r5, lr}
    1ab4:	4604      	mov	r4, r0
class Print
{
  public:
	Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1ab6:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1ab8:	460d      	mov	r5, r1
class Print
{
  public:
	Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1aba:	f001 fe37 	bl	372c <strlen>
    1abe:	6823      	ldr	r3, [r4, #0]
    1ac0:	4602      	mov	r2, r0
    1ac2:	4629      	mov	r1, r5
    1ac4:	685b      	ldr	r3, [r3, #4]
    1ac6:	4620      	mov	r0, r4
    1ac8:	4798      	blx	r3
    1aca:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1acc:	4620      	mov	r0, r4
    1ace:	f002 f881 	bl	3bd4 <_ZN5Print7printlnEv>
    1ad2:	4428      	add	r0, r5
    1ad4:	bd38      	pop	{r3, r4, r5, pc}

00001ad6 <_ZN4CRGBpLERKS_>:
        return *this;
    }


    // add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    1ad6:	b510      	push	{r4, lr}
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1ad8:	7802      	ldrb	r2, [r0, #0]
    1ada:	780c      	ldrb	r4, [r1, #0]
    1adc:	fa82 f254 	uqadd8	r2, r2, r4
    {
        r = qadd8( r, rhs.r);
    1ae0:	7002      	strb	r2, [r0, #0]
    1ae2:	784c      	ldrb	r4, [r1, #1]
    1ae4:	7842      	ldrb	r2, [r0, #1]
    1ae6:	fa82 f254 	uqadd8	r2, r2, r4
        g = qadd8( g, rhs.g);
    1aea:	7042      	strb	r2, [r0, #1]
    1aec:	7889      	ldrb	r1, [r1, #2]
    1aee:	7882      	ldrb	r2, [r0, #2]
    1af0:	fa82 f251 	uqadd8	r2, r2, r1
        b = qadd8( b, rhs.b);
    1af4:	7082      	strb	r2, [r0, #2]
        return *this;
    }
    1af6:	bd10      	pop	{r4, pc}

00001af8 <_ZN15CloseEncountersC1Ev>:
#include "CloseEncounters.h"

CloseEncounters::CloseEncounters() {
    1af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1afa:	4604      	mov	r4, r0
    1afc:	f7ff ff7c 	bl	19f8 <_ZN8BaseModeC1Ev>
    1b00:	4b13      	ldr	r3, [pc, #76]	; (1b50 <_ZN15CloseEncountersC1Ev+0x58>)
    1b02:	6023      	str	r3, [r4, #0]
    _name = "closeEncounters";
    1b04:	4a13      	ldr	r2, [pc, #76]	; (1b54 <_ZN15CloseEncountersC1Ev+0x5c>)
    1b06:	6062      	str	r2, [r4, #4]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    1b08:	2300      	movs	r3, #0
    1b0a:	61e3      	str	r3, [r4, #28]
    1b0c:	6223      	str	r3, [r4, #32]
    1b0e:	6263      	str	r3, [r4, #36]	; 0x24
    1b10:	6363      	str	r3, [r4, #52]	; 0x34
    1b12:	63a3      	str	r3, [r4, #56]	; 0x38
    1b14:	63e3      	str	r3, [r4, #60]	; 0x3c
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1b16:	2214      	movs	r2, #20
    1b18:	75e3      	strb	r3, [r4, #23]
        s = rhs.s;
    1b1a:	7623      	strb	r3, [r4, #24]
        v = rhs.v;
    1b1c:	7663      	strb	r3, [r4, #25]
    _stripeHSV = CHSV(20, 150, 150);
    _blackHSV = CHSV(0, 0, 0);
    _frame = 0;
    1b1e:	60e3      	str	r3, [r4, #12]
    _startStage = 0;
    1b20:	7223      	strb	r3, [r4, #8]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    1b22:	4b0d      	ldr	r3, [pc, #52]	; (1b58 <_ZN15CloseEncountersC1Ev+0x60>)
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1b24:	7522      	strb	r2, [r4, #20]
        s = rhs.s;
    1b26:	2296      	movs	r2, #150	; 0x96
    1b28:	7562      	strb	r2, [r4, #21]
        v = rhs.v;
    1b2a:	75a2      	strb	r2, [r4, #22]
    1b2c:	681a      	ldr	r2, [r3, #0]
    1b2e:	9201      	str	r2, [sp, #4]
	return ret;
    1b30:	9a01      	ldr	r2, [sp, #4]
    _lastNewBarCheckTime = millis();
    1b32:	6122      	str	r2, [r4, #16]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    1b34:	681a      	ldr	r2, [r3, #0]
    1b36:	9202      	str	r2, [sp, #8]
	return ret;
    1b38:	9a02      	ldr	r2, [sp, #8]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    1b3a:	681b      	ldr	r3, [r3, #0]
    1b3c:	9303      	str	r3, [sp, #12]
	return ret;
    1b3e:	9b03      	ldr	r3, [sp, #12]
    _lastBlueChange = millis();
    1b40:	62a2      	str	r2, [r4, #40]	; 0x28
    _blueDelay = 125;
    _lastNewDotCheckTime = millis();
}
    1b42:	4620      	mov	r0, r4
    _blackHSV = CHSV(0, 0, 0);
    _frame = 0;
    _startStage = 0;
    _lastNewBarCheckTime = millis();
    _lastBlueChange = millis();
    _blueDelay = 125;
    1b44:	227d      	movs	r2, #125	; 0x7d
    1b46:	62e2      	str	r2, [r4, #44]	; 0x2c
    _lastNewDotCheckTime = millis();
    1b48:	6323      	str	r3, [r4, #48]	; 0x30
}
    1b4a:	b004      	add	sp, #16
    1b4c:	bd10      	pop	{r4, pc}
    1b4e:	bf00      	nop
    1b50:	00014148 	.word	0x00014148
    1b54:	00014158 	.word	0x00014158
    1b58:	1fff91a8 	.word	0x1fff91a8

00001b5c <_ZN15CloseEncounters18setTransitionColorEP4CRGBffS0_S0_>:

    CloseEncounters::setTransitionColor(led, numerator, denomenator, from, to);
}

void CloseEncounters::setTransitionColor(CRGB* led, float numerator, float denomenator, CRGB fromColor, CRGB toColor)
{
    1b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1b60:	460c      	mov	r4, r1
    if (numerator <= 0)
    1b62:	4610      	mov	r0, r2
    1b64:	2100      	movs	r1, #0

    CloseEncounters::setTransitionColor(led, numerator, denomenator, from, to);
}

void CloseEncounters::setTransitionColor(CRGB* led, float numerator, float denomenator, CRGB fromColor, CRGB toColor)
{
    1b66:	4617      	mov	r7, r2
    1b68:	461e      	mov	r6, r3
    if (numerator <= 0)
    1b6a:	f00c f92f 	bl	ddcc <__aeabi_fcmple>

    CloseEncounters::setTransitionColor(led, numerator, denomenator, from, to);
}

void CloseEncounters::setTransitionColor(CRGB* led, float numerator, float denomenator, CRGB fromColor, CRGB toColor)
{
    1b6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    1b70:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    if (numerator <= 0)
    1b74:	4680      	mov	r8, r0
    1b76:	b128      	cbz	r0, 1b84 <_ZN15CloseEncounters18setTransitionColorEP4CRGBffS0_S0_+0x28>
    }

    // allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b78:	782b      	ldrb	r3, [r5, #0]
    1b7a:	7023      	strb	r3, [r4, #0]
        g = rhs.g;
    1b7c:	786b      	ldrb	r3, [r5, #1]
    1b7e:	7063      	strb	r3, [r4, #1]
        b = rhs.b;
    1b80:	78ab      	ldrb	r3, [r5, #2]
    1b82:	e00c      	b.n	1b9e <_ZN15CloseEncounters18setTransitionColorEP4CRGBffS0_S0_+0x42>
        *led = fromColor;
    else if (numerator >= denomenator)
    1b84:	4631      	mov	r1, r6
    1b86:	4638      	mov	r0, r7
    1b88:	f00c f92a 	bl	dde0 <__aeabi_fcmpge>
    1b8c:	f899 1000 	ldrb.w	r1, [r9]
    1b90:	f899 2001 	ldrb.w	r2, [r9, #1]
    1b94:	f899 3002 	ldrb.w	r3, [r9, #2]
    1b98:	b118      	cbz	r0, 1ba2 <_ZN15CloseEncounters18setTransitionColorEP4CRGBffS0_S0_+0x46>
    }

    // allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b9a:	7021      	strb	r1, [r4, #0]
        g = rhs.g;
    1b9c:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1b9e:	70a3      	strb	r3, [r4, #2]
    1ba0:	e041      	b.n	1c26 <_ZN15CloseEncounters18setTransitionColorEP4CRGBffS0_S0_+0xca>
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1ba2:	f88d 1000 	strb.w	r1, [sp]
        *led = toColor;
    else
    {
        CRGB toDelta = toColor;
        toDelta %= (byte)(255 * ((float)numerator/(float)denomenator));
    1ba6:	4638      	mov	r0, r7
    1ba8:	4631      	mov	r1, r6
        g = rhs.g;
    1baa:	f88d 2001 	strb.w	r2, [sp, #1]
        b = rhs.b;
    1bae:	f88d 3002 	strb.w	r3, [sp, #2]
    1bb2:	f00c f817 	bl	dbe4 <__aeabi_fdiv>
    1bb6:	491d      	ldr	r1, [pc, #116]	; (1c2c <_ZN15CloseEncounters18setTransitionColorEP4CRGBffS0_S0_+0xd0>)
    1bb8:	f00b ff60 	bl	da7c <__aeabi_fmul>
    1bbc:	f00c f924 	bl	de08 <__aeabi_f2uiz>

    // %= is a synonym for nscale8_video.  Think of it is scaling down
    // by "a percentage"
    inline CRGB& operator%= (uint8_t scaledown )
    {
        nscale8x3_video( r, g, b, scaledown);
    1bc0:	f10d 0202 	add.w	r2, sp, #2
    1bc4:	b2c3      	uxtb	r3, r0
    1bc6:	f10d 0101 	add.w	r1, sp, #1
    1bca:	4668      	mov	r0, sp
    1bcc:	f7ff ff1a 	bl	1a04 <_ZL15nscale8x3_videoRhS_S_h>
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1bd0:	782b      	ldrb	r3, [r5, #0]
    1bd2:	f88d 3004 	strb.w	r3, [sp, #4]
        g = rhs.g;
    1bd6:	786b      	ldrb	r3, [r5, #1]
    1bd8:	f88d 3005 	strb.w	r3, [sp, #5]

        CRGB fromDelta = fromColor;
        fromDelta %= (byte)(255 * ((float)(denomenator - numerator)/(float)denomenator));
    1bdc:	4639      	mov	r1, r7
        b = rhs.b;
    1bde:	78ab      	ldrb	r3, [r5, #2]
    1be0:	f88d 3006 	strb.w	r3, [sp, #6]
    1be4:	4630      	mov	r0, r6
    1be6:	f00b fe3f 	bl	d868 <__aeabi_fsub>
    1bea:	4631      	mov	r1, r6
    1bec:	f00b fffa 	bl	dbe4 <__aeabi_fdiv>
    1bf0:	490e      	ldr	r1, [pc, #56]	; (1c2c <_ZN15CloseEncounters18setTransitionColorEP4CRGBffS0_S0_+0xd0>)
    1bf2:	f00b ff43 	bl	da7c <__aeabi_fmul>
    1bf6:	f00c f907 	bl	de08 <__aeabi_f2uiz>

    // %= is a synonym for nscale8_video.  Think of it is scaling down
    // by "a percentage"
    inline CRGB& operator%= (uint8_t scaledown )
    {
        nscale8x3_video( r, g, b, scaledown);
    1bfa:	f10d 0105 	add.w	r1, sp, #5
    1bfe:	b2c3      	uxtb	r3, r0
    1c00:	f10d 0206 	add.w	r2, sp, #6
    1c04:	a801      	add	r0, sp, #4
    1c06:	f7ff fefd 	bl	1a04 <_ZL15nscale8x3_videoRhS_S_h>

        *led = CRGB::Black;
        *led += fromDelta;
    1c0a:	a901      	add	r1, sp, #4
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1c0c:	f884 8000 	strb.w	r8, [r4]
        g = (colorcode >>  8) & 0xFF;
    1c10:	f884 8001 	strb.w	r8, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    1c14:	f884 8002 	strb.w	r8, [r4, #2]
    1c18:	4620      	mov	r0, r4
    1c1a:	f7ff ff5c 	bl	1ad6 <_ZN4CRGBpLERKS_>
        *led += toDelta;
    1c1e:	4620      	mov	r0, r4
    1c20:	4669      	mov	r1, sp
    1c22:	f7ff ff58 	bl	1ad6 <_ZN4CRGBpLERKS_>
    }
}
    1c26:	b003      	add	sp, #12
    1c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c2c:	437f0000 	.word	0x437f0000

00001c30 <_ZN15CloseEncounters18setTransitionColorEP4CRGBff4CHSVS2_>:
    if ((*stage) >= STAGE_COUNT)
        (*stage) = 0;
}

void CloseEncounters::setTransitionColor(CRGB* led, float numerator, float denomenator, CHSV fromColor, CHSV toColor)
{
    1c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c32:	b087      	sub	sp, #28
    1c34:	4605      	mov	r5, r0
    1c36:	460c      	mov	r4, r1
    }

    // allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1c38:	980c      	ldr	r0, [sp, #48]	; 0x30
    1c3a:	a902      	add	r1, sp, #8
    1c3c:	461e      	mov	r6, r3
    1c3e:	4617      	mov	r7, r2
    1c40:	f7fe fc79 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    1c44:	980d      	ldr	r0, [sp, #52]	; 0x34
    1c46:	a903      	add	r1, sp, #12
    1c48:	f7fe fc75 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c4c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1c50:	f88d 3010 	strb.w	r3, [sp, #16]
        g = rhs.g;
    1c54:	f89d 3009 	ldrb.w	r3, [sp, #9]
    1c58:	f88d 3011 	strb.w	r3, [sp, #17]
        b = rhs.b;
    1c5c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    1c60:	f88d 3012 	strb.w	r3, [sp, #18]
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c64:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1c68:	f88d 3014 	strb.w	r3, [sp, #20]
        g = rhs.g;
    1c6c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    1c70:	f88d 3015 	strb.w	r3, [sp, #21]
        b = rhs.b;
    1c74:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1c78:	f88d 3016 	strb.w	r3, [sp, #22]
    CRGB from = fromColor;
    CRGB to = toColor;

    CloseEncounters::setTransitionColor(led, numerator, denomenator, from, to);
    1c7c:	ab04      	add	r3, sp, #16
    1c7e:	9300      	str	r3, [sp, #0]
    1c80:	ab05      	add	r3, sp, #20
    1c82:	9301      	str	r3, [sp, #4]
    1c84:	4628      	mov	r0, r5
    1c86:	4621      	mov	r1, r4
    1c88:	463a      	mov	r2, r7
    1c8a:	4633      	mov	r3, r6
    1c8c:	f7ff ff66 	bl	1b5c <_ZN15CloseEncounters18setTransitionColorEP4CRGBffS0_S0_>
}
    1c90:	b007      	add	sp, #28
    1c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c94 <_ZN15CloseEncounters10paintPixelEPhib>:
	    ++i;
	}
}

void CloseEncounters::paintPixel(byte (*stage), int index, bool add)
{
    1c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c98:	461e      	mov	r6, r3
    CRGB tmpPixel;
    if ((*stage) == 0)
    1c9a:	780b      	ldrb	r3, [r1, #0]
	    ++i;
	}
}

void CloseEncounters::paintPixel(byte (*stage), int index, bool add)
{
    1c9c:	b087      	sub	sp, #28
    1c9e:	4604      	mov	r4, r0
    1ca0:	460f      	mov	r7, r1
    1ca2:	4615      	mov	r5, r2
    CRGB tmpPixel;
    if ((*stage) == 0)
    1ca4:	bb2b      	cbnz	r3, 1cf2 <_ZN15CloseEncounters10paintPixelEPhib+0x5e>
    {
        setTransitionColor(&(tmpPixel), _frame, nSTRIPE_FRAMES, _blackHSV, _stripeHSV);
    1ca6:	68c0      	ldr	r0, [r0, #12]
    1ca8:	f00b fe94 	bl	d9d4 <__aeabi_i2f>
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1cac:	7de3      	ldrb	r3, [r4, #23]
    1cae:	f88d 3010 	strb.w	r3, [sp, #16]
        s = rhs.s;
    1cb2:	7e23      	ldrb	r3, [r4, #24]
    1cb4:	f88d 3011 	strb.w	r3, [sp, #17]
        v = rhs.v;
    1cb8:	7e63      	ldrb	r3, [r4, #25]
    1cba:	f88d 3012 	strb.w	r3, [sp, #18]
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1cbe:	7d23      	ldrb	r3, [r4, #20]
    1cc0:	f88d 3014 	strb.w	r3, [sp, #20]
        s = rhs.s;
    1cc4:	7d63      	ldrb	r3, [r4, #21]
    1cc6:	f88d 3015 	strb.w	r3, [sp, #21]
        v = rhs.v;
    1cca:	7da3      	ldrb	r3, [r4, #22]
    1ccc:	4602      	mov	r2, r0
    1cce:	f88d 3016 	strb.w	r3, [sp, #22]
    1cd2:	ab04      	add	r3, sp, #16
    1cd4:	9300      	str	r3, [sp, #0]
    1cd6:	ab05      	add	r3, sp, #20
    1cd8:	9301      	str	r3, [sp, #4]
    1cda:	4620      	mov	r0, r4
    1cdc:	a903      	add	r1, sp, #12
    1cde:	4b2c      	ldr	r3, [pc, #176]	; (1d90 <_ZN15CloseEncounters10paintPixelEPhib+0xfc>)
    1ce0:	f7ff ffa6 	bl	1c30 <_ZN15CloseEncounters18setTransitionColorEP4CRGBff4CHSVS2_>
        if (add)
            leds[index] += tmpPixel;
    1ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
{
    CRGB tmpPixel;
    if ((*stage) == 0)
    {
        setTransitionColor(&(tmpPixel), _frame, nSTRIPE_FRAMES, _blackHSV, _stripeHSV);
        if (add)
    1ce8:	b32e      	cbz	r6, 1d36 <_ZN15CloseEncounters10paintPixelEPhib+0xa2>
            leds[index] += tmpPixel;
    1cea:	482a      	ldr	r0, [pc, #168]	; (1d94 <_ZN15CloseEncounters10paintPixelEPhib+0x100>)
    1cec:	a903      	add	r1, sp, #12
    1cee:	4428      	add	r0, r5
    1cf0:	e03c      	b.n	1d6c <_ZN15CloseEncounters10paintPixelEPhib+0xd8>
        else
            leds[index] = tmpPixel;
    }
    else if (((*stage) >= 1) && ((*stage) <= 9))
    1cf2:	1e5a      	subs	r2, r3, #1
    1cf4:	2a08      	cmp	r2, #8
    1cf6:	d807      	bhi.n	1d08 <_ZN15CloseEncounters10paintPixelEPhib+0x74>
    {
        if (!add)
    1cf8:	2e00      	cmp	r6, #0
    1cfa:	d13f      	bne.n	1d7c <_ZN15CloseEncounters10paintPixelEPhib+0xe8>
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1cfc:	4925      	ldr	r1, [pc, #148]	; (1d94 <_ZN15CloseEncounters10paintPixelEPhib+0x100>)
        leds[index] = _blackHSV;
    1cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1d02:	3017      	adds	r0, #23
    1d04:	4429      	add	r1, r5
    1d06:	e037      	b.n	1d78 <_ZN15CloseEncounters10paintPixelEPhib+0xe4>
    }
    else if ((*stage) == 10)
    1d08:	2b0a      	cmp	r3, #10
    1d0a:	d120      	bne.n	1d4e <_ZN15CloseEncounters10paintPixelEPhib+0xba>
    {
        setTransitionColor(&(tmpPixel), _frame, nSTRIPE_FRAMES, _stripeHSV, _blackHSV);
    1d0c:	68c0      	ldr	r0, [r0, #12]
    1d0e:	f00b fe61 	bl	d9d4 <__aeabi_i2f>
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1d12:	7d23      	ldrb	r3, [r4, #20]
    1d14:	f88d 3010 	strb.w	r3, [sp, #16]
        s = rhs.s;
    1d18:	7d63      	ldrb	r3, [r4, #21]
    1d1a:	f88d 3011 	strb.w	r3, [sp, #17]
        v = rhs.v;
    1d1e:	7da3      	ldrb	r3, [r4, #22]
    1d20:	f88d 3012 	strb.w	r3, [sp, #18]
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1d24:	7de3      	ldrb	r3, [r4, #23]
    1d26:	f88d 3014 	strb.w	r3, [sp, #20]
        s = rhs.s;
    1d2a:	7e23      	ldrb	r3, [r4, #24]
    1d2c:	f88d 3015 	strb.w	r3, [sp, #21]
    1d30:	4602      	mov	r2, r0
        v = rhs.v;
    1d32:	7e63      	ldrb	r3, [r4, #25]
    1d34:	e7cb      	b.n	1cce <_ZN15CloseEncounters10paintPixelEPhib+0x3a>
        if (add)
            leds[index] += tmpPixel;
        else
            leds[index] = tmpPixel;
    1d36:	4a17      	ldr	r2, [pc, #92]	; (1d94 <_ZN15CloseEncounters10paintPixelEPhib+0x100>)
    }

    // allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1d38:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1d3c:	54a9      	strb	r1, [r5, r2]
    1d3e:	18ab      	adds	r3, r5, r2
        g = rhs.g;
    1d40:	f89d 200d 	ldrb.w	r2, [sp, #13]
    1d44:	705a      	strb	r2, [r3, #1]
        b = rhs.b;
    1d46:	f89d 200e 	ldrb.w	r2, [sp, #14]
    1d4a:	709a      	strb	r2, [r3, #2]
    1d4c:	e016      	b.n	1d7c <_ZN15CloseEncounters10paintPixelEPhib+0xe8>
    }
    else if ((*stage) == 11)
    1d4e:	2b0b      	cmp	r3, #11
    1d50:	d114      	bne.n	1d7c <_ZN15CloseEncounters10paintPixelEPhib+0xe8>
    1d52:	ea4f 0945 	mov.w	r9, r5, lsl #1
    1d56:	f8df 803c 	ldr.w	r8, [pc, #60]	; 1d94 <_ZN15CloseEncounters10paintPixelEPhib+0x100>
    1d5a:	3014      	adds	r0, #20
    {
        if (add)
    1d5c:	b14e      	cbz	r6, 1d72 <_ZN15CloseEncounters10paintPixelEPhib+0xde>
    }

    // allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1d5e:	a905      	add	r1, sp, #20
    1d60:	f7fe fbe9 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
            leds[index] += _stripeHSV;
    1d64:	eb09 0005 	add.w	r0, r9, r5
    1d68:	4440      	add	r0, r8
    1d6a:	a905      	add	r1, sp, #20
    1d6c:	f7ff feb3 	bl	1ad6 <_ZN4CRGBpLERKS_>
    1d70:	e004      	b.n	1d7c <_ZN15CloseEncounters10paintPixelEPhib+0xe8>
        else
            leds[index] = _stripeHSV;
    1d72:	eb09 0105 	add.w	r1, r9, r5
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1d76:	4441      	add	r1, r8
    1d78:	f7fe fbdd 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    }

    (*stage)++;
    1d7c:	783b      	ldrb	r3, [r7, #0]
    1d7e:	3301      	adds	r3, #1
    1d80:	b2db      	uxtb	r3, r3
    if ((*stage) >= STAGE_COUNT)
        (*stage) = 0;
    1d82:	2b0c      	cmp	r3, #12
    1d84:	bf28      	it	cs
    1d86:	2300      	movcs	r3, #0
    1d88:	703b      	strb	r3, [r7, #0]
}
    1d8a:	b007      	add	sp, #28
    1d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d90:	43200000 	.word	0x43200000
    1d94:	1fff8d68 	.word	0x1fff8d68

00001d98 <_ZN15CloseEncounters7stripesEv>:
//	    leds[i] = CHSV(0, 0, 0);
    colors();
    blue();
}

void CloseEncounters::stripes() {
    1d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    byte stage = _startStage;
    1d9a:	7a03      	ldrb	r3, [r0, #8]
    1d9c:	f88d 3007 	strb.w	r3, [sp, #7]
//	    leds[i] = CHSV(0, 0, 0);
    colors();
    blue();
}

void CloseEncounters::stripes() {
    1da0:	4604      	mov	r4, r0
    byte stage = _startStage;
    for (int i = 0; i < nLEDS_ONE + nLEDS_TWO; i++)
    1da2:	2500      	movs	r5, #0
        paintPixel(&stage, i, false);
    1da4:	462a      	mov	r2, r5
    1da6:	4620      	mov	r0, r4
    1da8:	f10d 0107 	add.w	r1, sp, #7
    1dac:	2300      	movs	r3, #0
    blue();
}

void CloseEncounters::stripes() {
    byte stage = _startStage;
    for (int i = 0; i < nLEDS_ONE + nLEDS_TWO; i++)
    1dae:	3501      	adds	r5, #1
        paintPixel(&stage, i, false);
    1db0:	f7ff ff70 	bl	1c94 <_ZN15CloseEncounters10paintPixelEPhib>
    blue();
}

void CloseEncounters::stripes() {
    byte stage = _startStage;
    for (int i = 0; i < nLEDS_ONE + nLEDS_TWO; i++)
    1db4:	2dc8      	cmp	r5, #200	; 0xc8
    1db6:	d1f5      	bne.n	1da4 <_ZN15CloseEncounters7stripesEv+0xc>
        paintPixel(&stage, i, false);

    stage = _startStage;
    1db8:	7a23      	ldrb	r3, [r4, #8]
    1dba:	f88d 3007 	strb.w	r3, [sp, #7]
    for (int i = nLEDS_ONE + nLEDS_TWO - 1; i >= 0; i--)
    1dbe:	25c7      	movs	r5, #199	; 0xc7
        paintPixel(&stage, i, true);
    1dc0:	462a      	mov	r2, r5
    1dc2:	4620      	mov	r0, r4
    1dc4:	f10d 0107 	add.w	r1, sp, #7
    1dc8:	2301      	movs	r3, #1
    1dca:	f7ff ff63 	bl	1c94 <_ZN15CloseEncounters10paintPixelEPhib>
    byte stage = _startStage;
    for (int i = 0; i < nLEDS_ONE + nLEDS_TWO; i++)
        paintPixel(&stage, i, false);

    stage = _startStage;
    for (int i = nLEDS_ONE + nLEDS_TWO - 1; i >= 0; i--)
    1dce:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    1dd2:	d2f5      	bcs.n	1dc0 <_ZN15CloseEncounters7stripesEv+0x28>
        paintPixel(&stage, i, true);

    _frame++;
    1dd4:	68e3      	ldr	r3, [r4, #12]
    1dd6:	3301      	adds	r3, #1
    if (_frame >= nSTRIPE_FRAMES)
    1dd8:	2b9f      	cmp	r3, #159	; 0x9f
    1dda:	dc01      	bgt.n	1de0 <_ZN15CloseEncounters7stripesEv+0x48>

    stage = _startStage;
    for (int i = nLEDS_ONE + nLEDS_TWO - 1; i >= 0; i--)
        paintPixel(&stage, i, true);

    _frame++;
    1ddc:	60e3      	str	r3, [r4, #12]
    1dde:	e007      	b.n	1df0 <_ZN15CloseEncounters7stripesEv+0x58>
    if (_frame >= nSTRIPE_FRAMES)
    {
        _frame = 0;
    1de0:	2300      	movs	r3, #0
    1de2:	60e3      	str	r3, [r4, #12]
        if (_startStage <= 0)
    1de4:	7a23      	ldrb	r3, [r4, #8]
    1de6:	b90b      	cbnz	r3, 1dec <_ZN15CloseEncounters7stripesEv+0x54>
            _startStage = (STAGE_COUNT - 1);
    1de8:	230b      	movs	r3, #11
    1dea:	e000      	b.n	1dee <_ZN15CloseEncounters7stripesEv+0x56>
        else
            _startStage--;
    1dec:	3b01      	subs	r3, #1
    1dee:	7223      	strb	r3, [r4, #8]
    }
}
    1df0:	b003      	add	sp, #12
    1df2:	bd30      	pop	{r4, r5, pc}

00001df4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP3BarEEPT_PKS5_S8_S6_>:
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
	  const ptrdiff_t _Num = __last - __first;
    1df4:	1a09      	subs	r1, r1, r0
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    1df6:	b538      	push	{r3, r4, r5, lr}
        {
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    1df8:	108c      	asrs	r4, r1, #2
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    1dfa:	4605      	mov	r5, r0
    1dfc:	4613      	mov	r3, r2
    1dfe:	ea4f 0484 	mov.w	r4, r4, lsl #2
        {
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    1e02:	d005      	beq.n	1e10 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP3BarEEPT_PKS5_S8_S6_+0x1c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    1e04:	4610      	mov	r0, r2
    1e06:	4629      	mov	r1, r5
    1e08:	4622      	mov	r2, r4
    1e0a:	f00d fdab 	bl	f964 <memmove>
    1e0e:	4603      	mov	r3, r0
	  return __result + _Num;
	}
    1e10:	1918      	adds	r0, r3, r4
    1e12:	bd38      	pop	{r3, r4, r5, pc}

00001e14 <_ZNSt6vectorIP3BarSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    1e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1e16:	e890 0048 	ldmia.w	r0, {r3, r6}
    1e1a:	1af6      	subs	r6, r6, r3
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    1e1c:	10b6      	asrs	r6, r6, #2
    1e1e:	bf14      	ite	ne
    1e20:	4633      	movne	r3, r6
    1e22:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    1e24:	199b      	adds	r3, r3, r6
    1e26:	4604      	mov	r4, r0
    1e28:	460f      	mov	r7, r1
    1e2a:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
    1e2e:	d203      	bcs.n	1e38 <_ZNSt6vectorIP3BarSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x24>
    1e30:	42b3      	cmp	r3, r6
    1e32:	bf38      	it	cc
    1e34:	461e      	movcc	r6, r3
    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
    1e36:	b126      	cbz	r6, 1e42 <_ZNSt6vectorIP3BarSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x2e>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    1e38:	00b0      	lsls	r0, r6, #2
    1e3a:	f003 fad9 	bl	53f0 <_Znwj>
    1e3e:	4605      	mov	r5, r0
    1e40:	e000      	b.n	1e44 <_ZNSt6vectorIP3BarSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x30>
    1e42:	4635      	mov	r5, r6

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1e44:	6862      	ldr	r2, [r4, #4]
    1e46:	6823      	ldr	r3, [r4, #0]
    1e48:	1ad3      	subs	r3, r2, r3
    1e4a:	109b      	asrs	r3, r3, #2
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
    1e4c:	eb05 0183 	add.w	r1, r5, r3, lsl #2

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    1e50:	683a      	ldr	r2, [r7, #0]
    1e52:	b109      	cbz	r1, 1e58 <_ZNSt6vectorIP3BarSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x44>
    1e54:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
    1e58:	e894 0003 	ldmia.w	r4, {r0, r1}
    1e5c:	462a      	mov	r2, r5
    1e5e:	f7ff ffc9 	bl	1df4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP3BarEEPT_PKS5_S8_S6_>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
    1e62:	1d07      	adds	r7, r0, #4
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
    1e64:	6820      	ldr	r0, [r4, #0]
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
    1e66:	b108      	cbz	r0, 1e6c <_ZNSt6vectorIP3BarSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x58>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
    1e68:	f003 fabe 	bl	53e8 <_ZdlPv>
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
    1e6c:	e884 00a0 	stmia.w	r4, {r5, r7}
	this->_M_impl._M_end_of_storage = __new_start + __len;
    1e70:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    1e74:	60a5      	str	r5, [r4, #8]
    1e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001e78 <_ZN15CloseEncounters6colorsEv>:

void CloseEncounters::colors()
{
    1e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e7c:	b089      	sub	sp, #36	; 0x24
    1e7e:	4604      	mov	r4, r0
    random16_add_entropy(random());
    1e80:	f003 fa6a 	bl	5358 <_Z6randomv>
    return rand16seed;
}

LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    1e84:	4ba3      	ldr	r3, [pc, #652]	; (2114 <_ZN15CloseEncounters6colorsEv+0x29c>)
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    1e86:	4ea4      	ldr	r6, [pc, #656]	; (2118 <_ZN15CloseEncounters6colorsEv+0x2a0>)
    1e88:	881a      	ldrh	r2, [r3, #0]
    1e8a:	4410      	add	r0, r2
    1e8c:	6832      	ldr	r2, [r6, #0]
    1e8e:	8018      	strh	r0, [r3, #0]
    1e90:	9205      	str	r2, [sp, #20]

    if ((_lastNewBarCheckTime + 1600) < millis())
    1e92:	6923      	ldr	r3, [r4, #16]
	return ret;
    1e94:	9a05      	ldr	r2, [sp, #20]
    1e96:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
    1e9a:	4293      	cmp	r3, r2
    1e9c:	d24b      	bcs.n	1f36 <_ZN15CloseEncounters6colorsEv+0xbe>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    1e9e:	6833      	ldr	r3, [r6, #0]
    1ea0:	9306      	str	r3, [sp, #24]
	return ret;
    1ea2:	9b06      	ldr	r3, [sp, #24]
    {
        _lastNewBarCheckTime = millis();
    1ea4:	6123      	str	r3, [r4, #16]
        if ((random8() < 140) && (_colorBars.size() < 4))
    1ea6:	f7ff fdcb 	bl	1a40 <_ZL7random8v>
    1eaa:	288b      	cmp	r0, #139	; 0x8b
    1eac:	d843      	bhi.n	1f36 <_ZN15CloseEncounters6colorsEv+0xbe>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1eae:	6a22      	ldr	r2, [r4, #32]
    1eb0:	69e3      	ldr	r3, [r4, #28]
    1eb2:	1ad3      	subs	r3, r2, r3
    1eb4:	2b0f      	cmp	r3, #15
    1eb6:	d83e      	bhi.n	1f36 <_ZN15CloseEncounters6colorsEv+0xbe>
//        if (_colorBars.size() < 1)
        {
            Bar *newBar = new Bar;
    1eb8:	2010      	movs	r0, #16
    1eba:	f003 fa99 	bl	53f0 <_Znwj>
    1ebe:	4605      	mov	r5, r0
    1ec0:	9004      	str	r0, [sp, #16]
            newBar->color = CHSV(random8(), 255, 255);
    1ec2:	f7ff fdbd 	bl	1a40 <_ZL7random8v>
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
        s = rhs.s;
    1ec6:	23ff      	movs	r3, #255	; 0xff
    1ec8:	706b      	strb	r3, [r5, #1]
        v = rhs.v;
    1eca:	70ab      	strb	r3, [r5, #2]
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1ecc:	7028      	strb	r0, [r5, #0]
            newBar->index = random8(0, nLEDS_ONE + nLEDS_TWO);
    1ece:	9d04      	ldr	r5, [sp, #16]
}


LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    1ed0:	f7ff fdb6 	bl	1a40 <_ZL7random8v>
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1ed4:	23c8      	movs	r3, #200	; 0xc8
    1ed6:	fb10 f003 	smulbb	r0, r0, r3
    1eda:	1200      	asrs	r0, r0, #8
    1edc:	70e8      	strb	r0, [r5, #3]
            newBar->width = random(10, 25);
    1ede:	2119      	movs	r1, #25
    1ee0:	200a      	movs	r0, #10
    1ee2:	9d04      	ldr	r5, [sp, #16]
    1ee4:	f003 fa65 	bl	53b2 <_Z6randomll>
    1ee8:	7128      	strb	r0, [r5, #4]
            newBar->lifeLength = newBar->width * 4.5 * nCOLOR_FRAMES;
    1eea:	9d04      	ldr	r5, [sp, #16]
    1eec:	792f      	ldrb	r7, [r5, #4]
    1eee:	4638      	mov	r0, r7
    1ef0:	f00b f96e 	bl	d1d0 <__aeabi_i2d>
    1ef4:	2200      	movs	r2, #0
    1ef6:	4b89      	ldr	r3, [pc, #548]	; (211c <_ZN15CloseEncounters6colorsEv+0x2a4>)
    1ef8:	f00b f9d0 	bl	d29c <__aeabi_dmul>
    1efc:	2200      	movs	r2, #0
    1efe:	4b88      	ldr	r3, [pc, #544]	; (2120 <_ZN15CloseEncounters6colorsEv+0x2a8>)
    1f00:	f00b f9cc 	bl	d29c <__aeabi_dmul>
    1f04:	f00b fc8c 	bl	d820 <__aeabi_d2uiz>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    1f08:	6832      	ldr	r2, [r6, #0]
    1f0a:	9207      	str	r2, [sp, #28]
	return ret;
    1f0c:	9a07      	ldr	r2, [sp, #28]
            newBar->birth = millis();
    1f0e:	60aa      	str	r2, [r5, #8]
        {
            Bar *newBar = new Bar;
            newBar->color = CHSV(random8(), 255, 255);
            newBar->index = random8(0, nLEDS_ONE + nLEDS_TWO);
            newBar->width = random(10, 25);
            newBar->lifeLength = newBar->width * 4.5 * nCOLOR_FRAMES;
    1f10:	b283      	uxth	r3, r0
            newBar->birth = millis();
            newBar->frame = 0;
    1f12:	2200      	movs	r2, #0
        {
            Bar *newBar = new Bar;
            newBar->color = CHSV(random8(), 255, 255);
            newBar->index = random8(0, nLEDS_ONE + nLEDS_TWO);
            newBar->width = random(10, 25);
            newBar->lifeLength = newBar->width * 4.5 * nCOLOR_FRAMES;
    1f14:	80eb      	strh	r3, [r5, #6]
            newBar->birth = millis();
            newBar->frame = 0;
    1f16:	81aa      	strh	r2, [r5, #12]
            Serial.printf("created bar w/ width: %d lifeLength: %d\r\n", newBar->width, newBar->lifeLength);
    1f18:	4882      	ldr	r0, [pc, #520]	; (2124 <_ZN15CloseEncounters6colorsEv+0x2ac>)
    1f1a:	4983      	ldr	r1, [pc, #524]	; (2128 <_ZN15CloseEncounters6colorsEv+0x2b0>)
    1f1c:	463a      	mov	r2, r7
    1f1e:	f001 fe6f 	bl	3c00 <_ZN5Print6printfEPKcz>
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    1f22:	6a23      	ldr	r3, [r4, #32]
    1f24:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1f26:	4293      	cmp	r3, r2
    1f28:	d05d      	beq.n	1fe6 <_ZN15CloseEncounters6colorsEv+0x16e>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    1f2a:	9a04      	ldr	r2, [sp, #16]
    1f2c:	b103      	cbz	r3, 1f30 <_ZN15CloseEncounters6colorsEv+0xb8>
    1f2e:	601a      	str	r2, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
    1f30:	6a23      	ldr	r3, [r4, #32]
    1f32:	3304      	adds	r3, #4
    1f34:	6223      	str	r3, [r4, #32]
    1f36:	69e5      	ldr	r5, [r4, #28]

            _colorBars.push_back(newBar);
        }
    }

	for(std::vector<Bar*>::iterator i = _colorBars.begin(); i != _colorBars.end();)
    1f38:	6a23      	ldr	r3, [r4, #32]
    1f3a:	429d      	cmp	r5, r3
    1f3c:	f000 8194 	beq.w	2268 <_ZN15CloseEncounters6colorsEv+0x3f0>
	{
	    if ((*i)->frame >= (*i)->lifeLength)
    1f40:	682b      	ldr	r3, [r5, #0]
    1f42:	8999      	ldrh	r1, [r3, #12]
    1f44:	88da      	ldrh	r2, [r3, #6]
    1f46:	4291      	cmp	r1, r2
    1f48:	d313      	bcc.n	1f72 <_ZN15CloseEncounters6colorsEv+0xfa>
        {
	        Serial.printf("deleting bar w/ lifeLength %d\r\n", (*i)->lifeLength);
            delete *i;
    1f4a:	462e      	mov	r6, r5

	for(std::vector<Bar*>::iterator i = _colorBars.begin(); i != _colorBars.end();)
	{
	    if ((*i)->frame >= (*i)->lifeLength)
        {
	        Serial.printf("deleting bar w/ lifeLength %d\r\n", (*i)->lifeLength);
    1f4c:	4977      	ldr	r1, [pc, #476]	; (212c <_ZN15CloseEncounters6colorsEv+0x2b4>)
    1f4e:	4875      	ldr	r0, [pc, #468]	; (2124 <_ZN15CloseEncounters6colorsEv+0x2ac>)
    1f50:	f001 fe56 	bl	3c00 <_ZN5Print6printfEPKcz>
            delete *i;
    1f54:	f856 0b04 	ldr.w	r0, [r6], #4
    1f58:	f003 fa46 	bl	53e8 <_ZdlPv>
    1f5c:	6a21      	ldr	r1, [r4, #32]
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
    1f5e:	428e      	cmp	r6, r1
    1f60:	d003      	beq.n	1f6a <_ZN15CloseEncounters6colorsEv+0xf2>
    1f62:	4630      	mov	r0, r6
    1f64:	462a      	mov	r2, r5
    1f66:	f7ff ff45 	bl	1df4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP3BarEEPT_PKS5_S8_S6_>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
    1f6a:	6a23      	ldr	r3, [r4, #32]
    1f6c:	3b04      	subs	r3, #4
    1f6e:	6223      	str	r3, [r4, #32]
    1f70:	e7e2      	b.n	1f38 <_ZN15CloseEncounters6colorsEv+0xc0>
        }

        CRGB tmp;
        int j;
        uint8_t fullPixelCount;
	    if ((*i)->lifeLength - (*i)->frame <= nCOLOR_FRAMES * (*i)->width)
    1f72:	ebc1 0802 	rsb	r8, r1, r2
    1f76:	791a      	ldrb	r2, [r3, #4]
    1f78:	4f6d      	ldr	r7, [pc, #436]	; (2130 <_ZN15CloseEncounters6colorsEv+0x2b8>)
    1f7a:	ebb8 0fc2 	cmp.w	r8, r2, lsl #3
    1f7e:	dc1d      	bgt.n	1fbc <_ZN15CloseEncounters6colorsEv+0x144>
//            setTransitionColor(&(tmp), nCOLOR_FRAMES - ((*i)->lifeLength - (*i)->frame), nCOLOR_FRAMES, (*i)->color, _blackHSV);
//	        for (int j = (*i)->index - (*i)->width / 2; (j >= 0) && (j < nLEDS_ONE + nLEDS_TWO) && (j < (*i)->index + (*i)->width / 2); j++)
//                leds[j] += tmp;

            int frame = (*i)->lifeLength - (*i)->frame;
            fullPixelCount = frame/ nCOLOR_FRAMES; //(*i)->frame / nCOLOR_FRAMES;
    1f80:	f04f 0908 	mov.w	r9, #8
    1f84:	fb98 f9f9 	sdiv	r9, r8, r9
            Serial.printf("%d\t%d\r\n", frame, fullPixelCount);
    1f88:	fa5f f989 	uxtb.w	r9, r9
    1f8c:	464b      	mov	r3, r9
    1f8e:	4865      	ldr	r0, [pc, #404]	; (2124 <_ZN15CloseEncounters6colorsEv+0x2ac>)
    1f90:	4968      	ldr	r1, [pc, #416]	; (2134 <_ZN15CloseEncounters6colorsEv+0x2bc>)
    1f92:	4642      	mov	r2, r8
    1f94:	f001 fe34 	bl	3c00 <_ZN5Print6printfEPKcz>
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
    1f98:	682b      	ldr	r3, [r5, #0]
    1f9a:	78de      	ldrb	r6, [r3, #3]
    1f9c:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
    1fa0:	44ba      	add	sl, r7
    1fa2:	2ec7      	cmp	r6, #199	; 0xc7
    1fa4:	6828      	ldr	r0, [r5, #0]
    1fa6:	dc24      	bgt.n	1ff2 <_ZN15CloseEncounters6colorsEv+0x17a>
    1fa8:	78c3      	ldrb	r3, [r0, #3]
    1faa:	7902      	ldrb	r2, [r0, #4]
    1fac:	eb03 0252 	add.w	r2, r3, r2, lsr #1
    1fb0:	4296      	cmp	r6, r2
    1fb2:	da1e      	bge.n	1ff2 <_ZN15CloseEncounters6colorsEv+0x17a>
    1fb4:	444b      	add	r3, r9
    1fb6:	429e      	cmp	r6, r3
    1fb8:	db37      	blt.n	202a <_ZN15CloseEncounters6colorsEv+0x1b2>
    1fba:	e01a      	b.n	1ff2 <_ZN15CloseEncounters6colorsEv+0x17a>
            }
	    }
	    else
	    {
            fullPixelCount = (*i)->frame / nCOLOR_FRAMES;
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
    1fbc:	78de      	ldrb	r6, [r3, #3]
    1fbe:	eb06 0946 	add.w	r9, r6, r6, lsl #1
                    leds[j] += tmp;
            }
	    }
	    else
	    {
            fullPixelCount = (*i)->frame / nCOLOR_FRAMES;
    1fc2:	f3c1 08c7 	ubfx	r8, r1, #3, #8
    1fc6:	44b9      	add	r9, r7
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
    1fc8:	2ec7      	cmp	r6, #199	; 0xc7
    1fca:	682b      	ldr	r3, [r5, #0]
    1fcc:	f300 8082 	bgt.w	20d4 <_ZN15CloseEncounters6colorsEv+0x25c>
    1fd0:	78da      	ldrb	r2, [r3, #3]
    1fd2:	7919      	ldrb	r1, [r3, #4]
    1fd4:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    1fd8:	428e      	cmp	r6, r1
    1fda:	da7b      	bge.n	20d4 <_ZN15CloseEncounters6colorsEv+0x25c>
    1fdc:	4442      	add	r2, r8
    1fde:	4296      	cmp	r6, r2
    1fe0:	f2c0 80d4 	blt.w	218c <_ZN15CloseEncounters6colorsEv+0x314>
    1fe4:	e076      	b.n	20d4 <_ZN15CloseEncounters6colorsEv+0x25c>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
    1fe6:	f104 001c 	add.w	r0, r4, #28
    1fea:	a904      	add	r1, sp, #16
    1fec:	f7ff ff12 	bl	1e14 <_ZNSt6vectorIP3BarSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_>
    1ff0:	e7a1      	b.n	1f36 <_ZN15CloseEncounters6colorsEv+0xbe>
            fullPixelCount = frame/ nCOLOR_FRAMES; //(*i)->frame / nCOLOR_FRAMES;
            Serial.printf("%d\t%d\r\n", frame, fullPixelCount);
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
                leds[j] += (*i)->color;

            if ((frame % nCOLOR_FRAMES != 0) && (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))))
    1ff2:	f018 0a07 	ands.w	sl, r8, #7
    1ff6:	d007      	beq.n	2008 <_ZN15CloseEncounters6colorsEv+0x190>
    1ff8:	2ec7      	cmp	r6, #199	; 0xc7
    1ffa:	dc05      	bgt.n	2008 <_ZN15CloseEncounters6colorsEv+0x190>
    1ffc:	78c3      	ldrb	r3, [r0, #3]
    1ffe:	7902      	ldrb	r2, [r0, #4]
    2000:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    2004:	429e      	cmp	r6, r3
    2006:	db1b      	blt.n	2040 <_ZN15CloseEncounters6colorsEv+0x1c8>
            {
                setTransitionColor(&(tmp), frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
                leds[j] += tmp;
            }

            for (j = (*i)->index; (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))) && (j > (*i)->index - fullPixelCount); j--)
    2008:	682b      	ldr	r3, [r5, #0]
    200a:	78de      	ldrb	r6, [r3, #3]
    200c:	eb06 0b46 	add.w	fp, r6, r6, lsl #1
    2010:	44bb      	add	fp, r7
    2012:	6828      	ldr	r0, [r5, #0]
    2014:	78c3      	ldrb	r3, [r0, #3]
    2016:	7902      	ldrb	r2, [r0, #4]
    2018:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
    201c:	4296      	cmp	r6, r2
    201e:	dd4a      	ble.n	20b6 <_ZN15CloseEncounters6colorsEv+0x23e>
    2020:	ebc9 0303 	rsb	r3, r9, r3
    2024:	429e      	cmp	r6, r3
    2026:	dc3a      	bgt.n	209e <_ZN15CloseEncounters6colorsEv+0x226>
    2028:	e045      	b.n	20b6 <_ZN15CloseEncounters6colorsEv+0x23e>
    }

    // allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    202a:	a904      	add	r1, sp, #16
    202c:	f7fe fa83 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>

            int frame = (*i)->lifeLength - (*i)->frame;
            fullPixelCount = frame/ nCOLOR_FRAMES; //(*i)->frame / nCOLOR_FRAMES;
            Serial.printf("%d\t%d\r\n", frame, fullPixelCount);
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
                leds[j] += (*i)->color;
    2030:	4650      	mov	r0, sl
    2032:	a904      	add	r1, sp, #16
    2034:	f7ff fd4f 	bl	1ad6 <_ZN4CRGBpLERKS_>
//                leds[j] += tmp;

            int frame = (*i)->lifeLength - (*i)->frame;
            fullPixelCount = frame/ nCOLOR_FRAMES; //(*i)->frame / nCOLOR_FRAMES;
            Serial.printf("%d\t%d\r\n", frame, fullPixelCount);
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
    2038:	3601      	adds	r6, #1
    203a:	f10a 0a03 	add.w	sl, sl, #3
    203e:	e7b0      	b.n	1fa2 <_ZN15CloseEncounters6colorsEv+0x12a>
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2040:	7de3      	ldrb	r3, [r4, #23]
    2042:	f88d 300c 	strb.w	r3, [sp, #12]
        s = rhs.s;
    2046:	7e23      	ldrb	r3, [r4, #24]
    2048:	f88d 300d 	strb.w	r3, [sp, #13]
        v = rhs.v;
    204c:	7e63      	ldrb	r3, [r4, #25]
    204e:	f88d 300e 	strb.w	r3, [sp, #14]
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2052:	7803      	ldrb	r3, [r0, #0]
    2054:	f88d 3010 	strb.w	r3, [sp, #16]
        s = rhs.s;
    2058:	7843      	ldrb	r3, [r0, #1]
    205a:	f88d 3011 	strb.w	r3, [sp, #17]
        v = rhs.v;
    205e:	7883      	ldrb	r3, [r0, #2]
                leds[j] += (*i)->color;

            if ((frame % nCOLOR_FRAMES != 0) && (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))))
            {
                setTransitionColor(&(tmp), frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
    2060:	4835      	ldr	r0, [pc, #212]	; (2138 <_ZN15CloseEncounters6colorsEv+0x2c0>)
    2062:	f88d 3012 	strb.w	r3, [sp, #18]
    2066:	ea08 0000 	and.w	r0, r8, r0
    206a:	2800      	cmp	r0, #0
    206c:	da03      	bge.n	2076 <_ZN15CloseEncounters6colorsEv+0x1fe>
    206e:	3801      	subs	r0, #1
    2070:	f060 0007 	orn	r0, r0, #7
    2074:	3001      	adds	r0, #1
    2076:	f00b fcad 	bl	d9d4 <__aeabi_i2f>
    207a:	ab03      	add	r3, sp, #12
    207c:	9300      	str	r3, [sp, #0]
    207e:	ab04      	add	r3, sp, #16
    2080:	4602      	mov	r2, r0
    2082:	9301      	str	r3, [sp, #4]
    2084:	4620      	mov	r0, r4
    2086:	a902      	add	r1, sp, #8
    2088:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    208c:	f7ff fdd0 	bl	1c30 <_ZN15CloseEncounters18setTransitionColorEP4CRGBff4CHSVS2_>
                leds[j] += tmp;
    2090:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2094:	4438      	add	r0, r7
    2096:	a902      	add	r1, sp, #8
    2098:	f7ff fd1d 	bl	1ad6 <_ZN4CRGBpLERKS_>
    209c:	e7b4      	b.n	2008 <_ZN15CloseEncounters6colorsEv+0x190>
    }

    // allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    209e:	a904      	add	r1, sp, #16
    20a0:	f7fe fa49 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
            }

            for (j = (*i)->index; (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))) && (j > (*i)->index - fullPixelCount); j--)
    20a4:	3e01      	subs	r6, #1
                leds[j] += (*i)->color;
    20a6:	4658      	mov	r0, fp
    20a8:	a904      	add	r1, sp, #16
    20aa:	f7ff fd14 	bl	1ad6 <_ZN4CRGBpLERKS_>
            {
                setTransitionColor(&(tmp), frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
                leds[j] += tmp;
            }

            for (j = (*i)->index; (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))) && (j > (*i)->index - fullPixelCount); j--)
    20ae:	1c72      	adds	r2, r6, #1
    20b0:	f1ab 0b03 	sub.w	fp, fp, #3
    20b4:	d1ad      	bne.n	2012 <_ZN15CloseEncounters6colorsEv+0x19a>
                leds[j] += (*i)->color;

            if ((frame % nCOLOR_FRAMES!= 0) && (j < (*i)->index) && (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))))
    20b6:	f1ba 0f00 	cmp.w	sl, #0
    20ba:	d025      	beq.n	2108 <_ZN15CloseEncounters6colorsEv+0x290>
    20bc:	682b      	ldr	r3, [r5, #0]
    20be:	78da      	ldrb	r2, [r3, #3]
    20c0:	4296      	cmp	r6, r2
    20c2:	da21      	bge.n	2108 <_ZN15CloseEncounters6colorsEv+0x290>
    20c4:	2e00      	cmp	r6, #0
    20c6:	db1f      	blt.n	2108 <_ZN15CloseEncounters6colorsEv+0x290>
    20c8:	7919      	ldrb	r1, [r3, #4]
    20ca:	eba2 0251 	sub.w	r2, r2, r1, lsr #1
    20ce:	4296      	cmp	r6, r2
    20d0:	dc34      	bgt.n	213c <_ZN15CloseEncounters6colorsEv+0x2c4>
    20d2:	e019      	b.n	2108 <_ZN15CloseEncounters6colorsEv+0x290>
	    {
            fullPixelCount = (*i)->frame / nCOLOR_FRAMES;
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
                leds[j] += (*i)->color;

            if (((*i)->frame % nCOLOR_FRAMES != 0) && (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))))
    20d4:	8998      	ldrh	r0, [r3, #12]
    20d6:	f010 0007 	ands.w	r0, r0, #7
    20da:	d001      	beq.n	20e0 <_ZN15CloseEncounters6colorsEv+0x268>
    20dc:	2ec7      	cmp	r6, #199	; 0xc7
    20de:	dd49      	ble.n	2174 <_ZN15CloseEncounters6colorsEv+0x2fc>
            {
                setTransitionColor(&(tmp), (*i)->frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
                leds[j] += tmp;
            }

            for (j = (*i)->index; (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))) && (j > (*i)->index - fullPixelCount); j--)
    20e0:	682b      	ldr	r3, [r5, #0]
    20e2:	78de      	ldrb	r6, [r3, #3]
    20e4:	eb06 0946 	add.w	r9, r6, r6, lsl #1
    20e8:	44b9      	add	r9, r7
    20ea:	6828      	ldr	r0, [r5, #0]
    20ec:	78c3      	ldrb	r3, [r0, #3]
    20ee:	7902      	ldrb	r2, [r0, #4]
    20f0:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
    20f4:	4296      	cmp	r6, r2
    20f6:	dc44      	bgt.n	2182 <_ZN15CloseEncounters6colorsEv+0x30a>
                leds[j] += (*i)->color;

            if (((*i)->frame % nCOLOR_FRAMES != 0) && (j < (*i)->index) && (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))))
    20f8:	682b      	ldr	r3, [r5, #0]
    20fa:	8998      	ldrh	r0, [r3, #12]
    20fc:	f010 0007 	ands.w	r0, r0, #7
    2100:	d002      	beq.n	2108 <_ZN15CloseEncounters6colorsEv+0x290>
    2102:	78da      	ldrb	r2, [r3, #3]
    2104:	4296      	cmp	r6, r2
    2106:	db73      	blt.n	21f0 <_ZN15CloseEncounters6colorsEv+0x378>
                setTransitionColor(&(tmp), (*i)->frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
                leds[j] += tmp;
            }
	    }

        (*i)->frame += 1;
    2108:	f855 3b04 	ldr.w	r3, [r5], #4
    210c:	899a      	ldrh	r2, [r3, #12]
    210e:	3201      	adds	r2, #1
    2110:	819a      	strh	r2, [r3, #12]
    2112:	e711      	b.n	1f38 <_ZN15CloseEncounters6colorsEv+0xc0>
    2114:	1fff8404 	.word	0x1fff8404
    2118:	1fff91a8 	.word	0x1fff91a8
    211c:	40120000 	.word	0x40120000
    2120:	40200000 	.word	0x40200000
    2124:	1fff9408 	.word	0x1fff9408
    2128:	00014190 	.word	0x00014190
    212c:	00014168 	.word	0x00014168
    2130:	1fff8d68 	.word	0x1fff8d68
    2134:	00014188 	.word	0x00014188
    2138:	80000007 	.word	0x80000007
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    213c:	7de2      	ldrb	r2, [r4, #23]
    213e:	f88d 200c 	strb.w	r2, [sp, #12]
            for (j = (*i)->index; (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))) && (j > (*i)->index - fullPixelCount); j--)
                leds[j] += (*i)->color;

            if ((frame % nCOLOR_FRAMES!= 0) && (j < (*i)->index) && (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))))
            {
                setTransitionColor(&(tmp), frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
    2142:	484b      	ldr	r0, [pc, #300]	; (2270 <_ZN15CloseEncounters6colorsEv+0x3f8>)
        s = rhs.s;
    2144:	7e22      	ldrb	r2, [r4, #24]
    2146:	f88d 200d 	strb.w	r2, [sp, #13]
        v = rhs.v;
    214a:	7e62      	ldrb	r2, [r4, #25]
    214c:	f88d 200e 	strb.w	r2, [sp, #14]
    2150:	ea08 0000 	and.w	r0, r8, r0
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2154:	781a      	ldrb	r2, [r3, #0]
    2156:	f88d 2010 	strb.w	r2, [sp, #16]
    215a:	2800      	cmp	r0, #0
        s = rhs.s;
    215c:	785a      	ldrb	r2, [r3, #1]
        v = rhs.v;
    215e:	789b      	ldrb	r3, [r3, #2]

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
        s = rhs.s;
    2160:	f88d 2011 	strb.w	r2, [sp, #17]
        v = rhs.v;
    2164:	f88d 3012 	strb.w	r3, [sp, #18]
    2168:	da6a      	bge.n	2240 <_ZN15CloseEncounters6colorsEv+0x3c8>
    216a:	3801      	subs	r0, #1
    216c:	f060 0007 	orn	r0, r0, #7
    2170:	3001      	adds	r0, #1
    2172:	e065      	b.n	2240 <_ZN15CloseEncounters6colorsEv+0x3c8>
	    {
            fullPixelCount = (*i)->frame / nCOLOR_FRAMES;
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
                leds[j] += (*i)->color;

            if (((*i)->frame % nCOLOR_FRAMES != 0) && (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))))
    2174:	78da      	ldrb	r2, [r3, #3]
    2176:	7919      	ldrb	r1, [r3, #4]
    2178:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    217c:	4296      	cmp	r6, r2
    217e:	db11      	blt.n	21a4 <_ZN15CloseEncounters6colorsEv+0x32c>
    2180:	e7ae      	b.n	20e0 <_ZN15CloseEncounters6colorsEv+0x268>
            {
                setTransitionColor(&(tmp), (*i)->frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
                leds[j] += tmp;
            }

            for (j = (*i)->index; (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))) && (j > (*i)->index - fullPixelCount); j--)
    2182:	ebc8 0303 	rsb	r3, r8, r3
    2186:	429e      	cmp	r6, r3
    2188:	dc4c      	bgt.n	2224 <_ZN15CloseEncounters6colorsEv+0x3ac>
    218a:	e7b5      	b.n	20f8 <_ZN15CloseEncounters6colorsEv+0x280>
    }

    // allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    218c:	4618      	mov	r0, r3
    218e:	a904      	add	r1, sp, #16
    2190:	f7fe f9d1 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
	    }
	    else
	    {
            fullPixelCount = (*i)->frame / nCOLOR_FRAMES;
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
                leds[j] += (*i)->color;
    2194:	4648      	mov	r0, r9
    2196:	a904      	add	r1, sp, #16
    2198:	f7ff fc9d 	bl	1ad6 <_ZN4CRGBpLERKS_>
            }
	    }
	    else
	    {
            fullPixelCount = (*i)->frame / nCOLOR_FRAMES;
            for (j = (*i)->index; (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))) && (j < (*i)->index + fullPixelCount); j++)
    219c:	3601      	adds	r6, #1
    219e:	f109 0903 	add.w	r9, r9, #3
    21a2:	e711      	b.n	1fc8 <_ZN15CloseEncounters6colorsEv+0x150>
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    21a4:	7de2      	ldrb	r2, [r4, #23]
    21a6:	f88d 200c 	strb.w	r2, [sp, #12]
        s = rhs.s;
    21aa:	7e22      	ldrb	r2, [r4, #24]
    21ac:	f88d 200d 	strb.w	r2, [sp, #13]
        v = rhs.v;
    21b0:	7e62      	ldrb	r2, [r4, #25]
    21b2:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    21b6:	781a      	ldrb	r2, [r3, #0]
    21b8:	f88d 2010 	strb.w	r2, [sp, #16]
        s = rhs.s;
    21bc:	785a      	ldrb	r2, [r3, #1]
        v = rhs.v;
    21be:	789b      	ldrb	r3, [r3, #2]

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
        s = rhs.s;
    21c0:	f88d 2011 	strb.w	r2, [sp, #17]
        v = rhs.v;
    21c4:	f88d 3012 	strb.w	r3, [sp, #18]
                leds[j] += (*i)->color;

            if (((*i)->frame % nCOLOR_FRAMES != 0) && (j < nLEDS_ONE + nLEDS_TWO) && (j < ((*i)->index + ((*i)->width / 2))))
            {
                setTransitionColor(&(tmp), (*i)->frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
    21c8:	f00b fc04 	bl	d9d4 <__aeabi_i2f>
    21cc:	ab03      	add	r3, sp, #12
    21ce:	9300      	str	r3, [sp, #0]
    21d0:	ab04      	add	r3, sp, #16
    21d2:	4602      	mov	r2, r0
    21d4:	9301      	str	r3, [sp, #4]
    21d6:	4620      	mov	r0, r4
    21d8:	a902      	add	r1, sp, #8
    21da:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    21de:	f7ff fd27 	bl	1c30 <_ZN15CloseEncounters18setTransitionColorEP4CRGBff4CHSVS2_>
                leds[j] += tmp;
    21e2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    21e6:	4438      	add	r0, r7
    21e8:	a902      	add	r1, sp, #8
    21ea:	f7ff fc74 	bl	1ad6 <_ZN4CRGBpLERKS_>
    21ee:	e777      	b.n	20e0 <_ZN15CloseEncounters6colorsEv+0x268>
            }

            for (j = (*i)->index; (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))) && (j > (*i)->index - fullPixelCount); j--)
                leds[j] += (*i)->color;

            if (((*i)->frame % nCOLOR_FRAMES != 0) && (j < (*i)->index) && (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))))
    21f0:	2e00      	cmp	r6, #0
    21f2:	db89      	blt.n	2108 <_ZN15CloseEncounters6colorsEv+0x290>
    21f4:	7919      	ldrb	r1, [r3, #4]
    21f6:	eba2 0251 	sub.w	r2, r2, r1, lsr #1
    21fa:	4296      	cmp	r6, r2
    21fc:	dd84      	ble.n	2108 <_ZN15CloseEncounters6colorsEv+0x290>
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    21fe:	7de2      	ldrb	r2, [r4, #23]
    2200:	f88d 200c 	strb.w	r2, [sp, #12]
        s = rhs.s;
    2204:	7e22      	ldrb	r2, [r4, #24]
    2206:	f88d 200d 	strb.w	r2, [sp, #13]
        v = rhs.v;
    220a:	7e62      	ldrb	r2, [r4, #25]
    220c:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2210:	781a      	ldrb	r2, [r3, #0]
    2212:	f88d 2010 	strb.w	r2, [sp, #16]
        s = rhs.s;
    2216:	785a      	ldrb	r2, [r3, #1]
        v = rhs.v;
    2218:	789b      	ldrb	r3, [r3, #2]

    // allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
        s = rhs.s;
    221a:	f88d 2011 	strb.w	r2, [sp, #17]
        v = rhs.v;
    221e:	f88d 3012 	strb.w	r3, [sp, #18]
    2222:	e00d      	b.n	2240 <_ZN15CloseEncounters6colorsEv+0x3c8>
    }

    // allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2224:	a904      	add	r1, sp, #16
    2226:	f7fe f986 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
            {
                setTransitionColor(&(tmp), (*i)->frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
                leds[j] += tmp;
            }

            for (j = (*i)->index; (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))) && (j > (*i)->index - fullPixelCount); j--)
    222a:	3e01      	subs	r6, #1
                leds[j] += (*i)->color;
    222c:	4648      	mov	r0, r9
    222e:	a904      	add	r1, sp, #16
    2230:	f7ff fc51 	bl	1ad6 <_ZN4CRGBpLERKS_>
            {
                setTransitionColor(&(tmp), (*i)->frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
                leds[j] += tmp;
            }

            for (j = (*i)->index; (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))) && (j > (*i)->index - fullPixelCount); j--)
    2234:	1c73      	adds	r3, r6, #1
    2236:	f1a9 0903 	sub.w	r9, r9, #3
    223a:	f47f af56 	bne.w	20ea <_ZN15CloseEncounters6colorsEv+0x272>
    223e:	e75b      	b.n	20f8 <_ZN15CloseEncounters6colorsEv+0x280>
                leds[j] += (*i)->color;

            if (((*i)->frame % nCOLOR_FRAMES != 0) && (j < (*i)->index) && (j >= 0) && (j > ((*i)->index - ((*i)->width / 2))))
            {
                setTransitionColor(&(tmp), (*i)->frame % nCOLOR_FRAMES, nCOLOR_FRAMES, _blackHSV, (*i)->color);
    2240:	f00b fbc8 	bl	d9d4 <__aeabi_i2f>
    2244:	ab03      	add	r3, sp, #12
    2246:	9300      	str	r3, [sp, #0]
    2248:	ab04      	add	r3, sp, #16
    224a:	4602      	mov	r2, r0
    224c:	9301      	str	r3, [sp, #4]
    224e:	4620      	mov	r0, r4
    2250:	a902      	add	r1, sp, #8
    2252:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2256:	f7ff fceb 	bl	1c30 <_ZN15CloseEncounters18setTransitionColorEP4CRGBff4CHSVS2_>
                leds[j] += tmp;
    225a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    225e:	4438      	add	r0, r7
    2260:	a902      	add	r1, sp, #8
    2262:	f7ff fc38 	bl	1ad6 <_ZN4CRGBpLERKS_>
    2266:	e74f      	b.n	2108 <_ZN15CloseEncounters6colorsEv+0x290>
	    }

        (*i)->frame += 1;
	    ++i;
	}
}
    2268:	b009      	add	sp, #36	; 0x24
    226a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    226e:	bf00      	nop
    2270:	80000007 	.word	0x80000007

00002274 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP7BlueDotEEPT_PKS5_S8_S6_>:
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
	  const ptrdiff_t _Num = __last - __first;
    2274:	1a09      	subs	r1, r1, r0
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    2276:	b538      	push	{r3, r4, r5, lr}
        {
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    2278:	108c      	asrs	r4, r1, #2
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    227a:	4605      	mov	r5, r0
    227c:	4613      	mov	r3, r2
    227e:	ea4f 0484 	mov.w	r4, r4, lsl #2
        {
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    2282:	d005      	beq.n	2290 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP7BlueDotEEPT_PKS5_S8_S6_+0x1c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    2284:	4610      	mov	r0, r2
    2286:	4629      	mov	r1, r5
    2288:	4622      	mov	r2, r4
    228a:	f00d fb6b 	bl	f964 <memmove>
    228e:	4603      	mov	r3, r0
	  return __result + _Num;
	}
    2290:	1918      	adds	r0, r3, r4
    2292:	bd38      	pop	{r3, r4, r5, pc}

00002294 <_ZNSt6vectorIP7BlueDotSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    2294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    2296:	e890 0048 	ldmia.w	r0, {r3, r6}
    229a:	1af6      	subs	r6, r6, r3
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    229c:	10b6      	asrs	r6, r6, #2
    229e:	bf14      	ite	ne
    22a0:	4633      	movne	r3, r6
    22a2:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    22a4:	199b      	adds	r3, r3, r6
    22a6:	4604      	mov	r4, r0
    22a8:	460f      	mov	r7, r1
    22aa:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
    22ae:	d203      	bcs.n	22b8 <_ZNSt6vectorIP7BlueDotSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x24>
    22b0:	42b3      	cmp	r3, r6
    22b2:	bf38      	it	cc
    22b4:	461e      	movcc	r6, r3
    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
    22b6:	b126      	cbz	r6, 22c2 <_ZNSt6vectorIP7BlueDotSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x2e>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    22b8:	00b0      	lsls	r0, r6, #2
    22ba:	f003 f899 	bl	53f0 <_Znwj>
    22be:	4605      	mov	r5, r0
    22c0:	e000      	b.n	22c4 <_ZNSt6vectorIP7BlueDotSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x30>
    22c2:	4635      	mov	r5, r6

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    22c4:	6862      	ldr	r2, [r4, #4]
    22c6:	6823      	ldr	r3, [r4, #0]
    22c8:	1ad3      	subs	r3, r2, r3
    22ca:	109b      	asrs	r3, r3, #2
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
    22cc:	eb05 0183 	add.w	r1, r5, r3, lsl #2

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    22d0:	683a      	ldr	r2, [r7, #0]
    22d2:	b109      	cbz	r1, 22d8 <_ZNSt6vectorIP7BlueDotSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x44>
    22d4:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
    22d8:	e894 0003 	ldmia.w	r4, {r0, r1}
    22dc:	462a      	mov	r2, r5
    22de:	f7ff ffc9 	bl	2274 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP7BlueDotEEPT_PKS5_S8_S6_>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
    22e2:	1d07      	adds	r7, r0, #4
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
    22e4:	6820      	ldr	r0, [r4, #0]
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
    22e6:	b108      	cbz	r0, 22ec <_ZNSt6vectorIP7BlueDotSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x58>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
    22e8:	f003 f87e 	bl	53e8 <_ZdlPv>
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
    22ec:	e884 00a0 	stmia.w	r4, {r5, r7}
	this->_M_impl._M_end_of_storage = __new_start + __len;
    22f0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    22f4:	60a5      	str	r5, [r4, #8]
    22f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000022f8 <_ZN15CloseEncounters4blueEv>:

void CloseEncounters::blue()
{
    22f8:	b5f0      	push	{r4, r5, r6, r7, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    22fa:	4a72      	ldr	r2, [pc, #456]	; (24c4 <_ZN15CloseEncounters4blueEv+0x1cc>)
    22fc:	b087      	sub	sp, #28
    22fe:	4604      	mov	r4, r0
    2300:	6813      	ldr	r3, [r2, #0]
    2302:	9303      	str	r3, [sp, #12]
    unsigned long currentTime = millis();
    if (currentTime <= _lastBlueChange + _blueDelay)
    2304:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    2306:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	return ret;
    2308:	9b03      	ldr	r3, [sp, #12]
    230a:	4401      	add	r1, r0
    230c:	428b      	cmp	r3, r1
    230e:	4616      	mov	r6, r2
    2310:	f240 80d6 	bls.w	24c0 <_ZN15CloseEncounters4blueEv+0x1c8>
        return;

    _lastBlueChange = currentTime;
    2314:	62a3      	str	r3, [r4, #40]	; 0x28
    2316:	2500      	movs	r5, #0

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS_THREE; i++) {
	    dice = random8();
    2318:	f7ff fb92 	bl	1a40 <_ZL7random8v>

	    if ((dice <= 5) && (_blueDelay > 0))
    231c:	2805      	cmp	r0, #5
    231e:	dc12      	bgt.n	2346 <_ZN15CloseEncounters4blueEv+0x4e>
    2320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2322:	2b00      	cmp	r3, #0
    2324:	dd0f      	ble.n	2346 <_ZN15CloseEncounters4blueEv+0x4e>
}


LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    2326:	f7ff fb8b 	bl	1a40 <_ZL7random8v>
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    232a:	b200      	sxth	r0, r0
    232c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2330:	23a0      	movs	r3, #160	; 0xa0
    2332:	1200      	asrs	r0, r0, #8
    2334:	f88d 3004 	strb.w	r3, [sp, #4]
}

LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2338:	3014      	adds	r0, #20
        s = rhs.s;
    233a:	23ff      	movs	r3, #255	; 0xff
    233c:	f88d 3005 	strb.w	r3, [sp, #5]
        v = rhs.v;
    2340:	f88d 0006 	strb.w	r0, [sp, #6]
            tmp = CHSV(160, 255, random8(20, 23));
    2344:	e008      	b.n	2358 <_ZN15CloseEncounters4blueEv+0x60>
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2346:	23a0      	movs	r3, #160	; 0xa0
    2348:	f88d 3004 	strb.w	r3, [sp, #4]
        s = rhs.s;
    234c:	23ff      	movs	r3, #255	; 0xff
    234e:	f88d 3005 	strb.w	r3, [sp, #5]
        v = rhs.v;
    2352:	2317      	movs	r3, #23
    2354:	f88d 3006 	strb.w	r3, [sp, #6]
	    else
	        tmp = CHSV(160, 255, 23);
	    leds_three[i] = tmp;
    2358:	4f5b      	ldr	r7, [pc, #364]	; (24c8 <_ZN15CloseEncounters4blueEv+0x1d0>)
    235a:	6839      	ldr	r1, [r7, #0]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    235c:	a801      	add	r0, sp, #4
    235e:	4429      	add	r1, r5
    2360:	3503      	adds	r5, #3
    2362:	f7fe f8e8 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>

    _lastBlueChange = currentTime;

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS_THREE; i++) {
    2366:	2d96      	cmp	r5, #150	; 0x96
    2368:	d1d6      	bne.n	2318 <_ZN15CloseEncounters4blueEv+0x20>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    236a:	6832      	ldr	r2, [r6, #0]
	    else
	        tmp = CHSV(160, 255, 23);
	    leds_three[i] = tmp;
	}

    if ((_lastNewDotCheckTime + 1000) < millis())
    236c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    236e:	9204      	str	r2, [sp, #16]
	return ret;
    2370:	9a04      	ldr	r2, [sp, #16]
    2372:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    2376:	4293      	cmp	r3, r2
    2378:	d241      	bcs.n	23fe <_ZN15CloseEncounters4blueEv+0x106>
    {
        Serial.println("checking");
    237a:	4954      	ldr	r1, [pc, #336]	; (24cc <_ZN15CloseEncounters4blueEv+0x1d4>)
    237c:	4854      	ldr	r0, [pc, #336]	; (24d0 <_ZN15CloseEncounters4blueEv+0x1d8>)
    237e:	f7ff fb98 	bl	1ab2 <_ZN5Print7printlnEPKc>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    2382:	4b50      	ldr	r3, [pc, #320]	; (24c4 <_ZN15CloseEncounters4blueEv+0x1cc>)
    2384:	681b      	ldr	r3, [r3, #0]
    2386:	9305      	str	r3, [sp, #20]
	return ret;
    2388:	9b05      	ldr	r3, [sp, #20]
        _lastNewDotCheckTime = millis();
    238a:	6323      	str	r3, [r4, #48]	; 0x30
        if ((random8() < 180) && (_dots.size() < 18))
    238c:	f7ff fb58 	bl	1a40 <_ZL7random8v>
    2390:	28b3      	cmp	r0, #179	; 0xb3
    2392:	d834      	bhi.n	23fe <_ZN15CloseEncounters4blueEv+0x106>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    2394:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2396:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2398:	1ad3      	subs	r3, r2, r3
    239a:	2b47      	cmp	r3, #71	; 0x47
    239c:	d82f      	bhi.n	23fe <_ZN15CloseEncounters4blueEv+0x106>
//        if (_dots.size() < 1)
        {
            BlueDot *newDot = new BlueDot;
    239e:	2006      	movs	r0, #6
    23a0:	f003 f826 	bl	53f0 <_Znwj>
    23a4:	9002      	str	r0, [sp, #8]
            if (random8() < 85)
    23a6:	f7ff fb4b 	bl	1a40 <_ZL7random8v>
    23aa:	2854      	cmp	r0, #84	; 0x54
    23ac:	9d02      	ldr	r5, [sp, #8]
    23ae:	d87c      	bhi.n	24aa <_ZN15CloseEncounters4blueEv+0x1b2>
}


LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    23b0:	f7ff fb46 	bl	1a40 <_ZL7random8v>
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    23b4:	f340 004e 	sbfx	r0, r0, #1, #15
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    23b8:	2300      	movs	r3, #0
}

LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    23ba:	307f      	adds	r0, #127	; 0x7f
    23bc:	702b      	strb	r3, [r5, #0]
        s = rhs.s;
    23be:	7068      	strb	r0, [r5, #1]
        v = rhs.v;
    23c0:	2306      	movs	r3, #6
    23c2:	70ab      	strb	r3, [r5, #2]
               newDot->color = CHSV(0, random8(127, 255), 6);
            else
               newDot->color = CHSV(160, 255, 6);
            newDot->index = random8(0, nLEDS_THREE);
    23c4:	9d02      	ldr	r5, [sp, #8]
}


LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    23c6:	f7ff fb3b 	bl	1a40 <_ZL7random8v>
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    23ca:	2332      	movs	r3, #50	; 0x32
    23cc:	fb10 f003 	smulbb	r0, r0, r3
    23d0:	1200      	asrs	r0, r0, #8
    23d2:	70e8      	strb	r0, [r5, #3]
            newDot->goingDown = false;
    23d4:	9d02      	ldr	r5, [sp, #8]
    23d6:	2300      	movs	r3, #0
    23d8:	712b      	strb	r3, [r5, #4]
}


LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    23da:	f7ff fb31 	bl	1a40 <_ZL7random8v>
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    23de:	b200      	sxth	r0, r0
    23e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    23e4:	1200      	asrs	r0, r0, #8
}

LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    23e6:	3005      	adds	r0, #5
            newDot->speed = random8(5, 12);
    23e8:	7168      	strb	r0, [r5, #5]
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    23ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    23ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    23ee:	4293      	cmp	r3, r2
    23f0:	d060      	beq.n	24b4 <_ZN15CloseEncounters4blueEv+0x1bc>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    23f2:	9a02      	ldr	r2, [sp, #8]
    23f4:	b103      	cbz	r3, 23f8 <_ZN15CloseEncounters4blueEv+0x100>
    23f6:	601a      	str	r2, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
    23f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    23fa:	3304      	adds	r3, #4
    23fc:	63a3      	str	r3, [r4, #56]	; 0x38
    23fe:	6b65      	ldr	r5, [r4, #52]	; 0x34

            _dots.push_back(newDot);
        }
    }

	for(std::vector<BlueDot*>::iterator i = _dots.begin(); i != _dots.end();)
    2400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2402:	429d      	cmp	r5, r3
    2404:	d05c      	beq.n	24c0 <_ZN15CloseEncounters4blueEv+0x1c8>
	{
	    if ((*i)->color.val >= 250)
    2406:	682b      	ldr	r3, [r5, #0]
    2408:	789a      	ldrb	r2, [r3, #2]
    240a:	2af9      	cmp	r2, #249	; 0xf9
    240c:	d906      	bls.n	241c <_ZN15CloseEncounters4blueEv+0x124>
	    {
	        Serial.printf("val >= 250: %d\r\n", (*i)->color.val);
    240e:	4830      	ldr	r0, [pc, #192]	; (24d0 <_ZN15CloseEncounters4blueEv+0x1d8>)
    2410:	4930      	ldr	r1, [pc, #192]	; (24d4 <_ZN15CloseEncounters4blueEv+0x1dc>)
    2412:	f001 fbf5 	bl	3c00 <_ZN5Print6printfEPKcz>
	        (*i)->goingDown = true;
    2416:	682b      	ldr	r3, [r5, #0]
    2418:	2201      	movs	r2, #1
    241a:	711a      	strb	r2, [r3, #4]
	    }

	    if ((*i)->color.val <= 5)
    241c:	462e      	mov	r6, r5
    241e:	f856 2b04 	ldr.w	r2, [r6], #4
    2422:	7893      	ldrb	r3, [r2, #2]
    2424:	2b05      	cmp	r3, #5
    2426:	d811      	bhi.n	244c <_ZN15CloseEncounters4blueEv+0x154>
	    {
	        Serial.println("deleting dot");
    2428:	492b      	ldr	r1, [pc, #172]	; (24d8 <_ZN15CloseEncounters4blueEv+0x1e0>)
    242a:	4829      	ldr	r0, [pc, #164]	; (24d0 <_ZN15CloseEncounters4blueEv+0x1d8>)
    242c:	f7ff fb41 	bl	1ab2 <_ZN5Print7printlnEPKc>
            delete *i;
    2430:	6828      	ldr	r0, [r5, #0]
    2432:	f002 ffd9 	bl	53e8 <_ZdlPv>
    2436:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
    2438:	428e      	cmp	r6, r1
    243a:	d003      	beq.n	2444 <_ZN15CloseEncounters4blueEv+0x14c>
    243c:	4630      	mov	r0, r6
    243e:	462a      	mov	r2, r5
    2440:	f7ff ff18 	bl	2274 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP7BlueDotEEPT_PKS5_S8_S6_>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
    2444:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2446:	3b04      	subs	r3, #4
    2448:	63a3      	str	r3, [r4, #56]	; 0x38
            i = _dots.erase(i);
	        continue;
    244a:	e7d9      	b.n	2400 <_ZN15CloseEncounters4blueEv+0x108>
	    }

	    if ((*i)->goingDown)
    244c:	7911      	ldrb	r1, [r2, #4]
	    {
	        Serial.printf("subtracting %d to val of %d = ", (*i)->speed, (*i)->color.val);
    244e:	4820      	ldr	r0, [pc, #128]	; (24d0 <_ZN15CloseEncounters4blueEv+0x1d8>)
    2450:	7952      	ldrb	r2, [r2, #5]
            delete *i;
            i = _dots.erase(i);
	        continue;
	    }

	    if ((*i)->goingDown)
    2452:	b139      	cbz	r1, 2464 <_ZN15CloseEncounters4blueEv+0x16c>
	    {
	        Serial.printf("subtracting %d to val of %d = ", (*i)->speed, (*i)->color.val);
    2454:	4921      	ldr	r1, [pc, #132]	; (24dc <_ZN15CloseEncounters4blueEv+0x1e4>)
    2456:	f001 fbd3 	bl	3c00 <_ZN5Print6printfEPKcz>
	        (*i)->color.val -= (*i)->speed;
    245a:	682b      	ldr	r3, [r5, #0]
    245c:	7899      	ldrb	r1, [r3, #2]
    245e:	795a      	ldrb	r2, [r3, #5]
    2460:	1a8a      	subs	r2, r1, r2
    2462:	e007      	b.n	2474 <_ZN15CloseEncounters4blueEv+0x17c>
	    }
	    else
	    {
	        Serial.printf("adding %d to val of %d = ", (*i)->speed, (*i)->color.val);
    2464:	491e      	ldr	r1, [pc, #120]	; (24e0 <_ZN15CloseEncounters4blueEv+0x1e8>)
    2466:	f001 fbcb 	bl	3c00 <_ZN5Print6printfEPKcz>
	        (*i)->color.val = qadd8((*i)->color.val, (*i)->speed);
    246a:	682b      	ldr	r3, [r5, #0]
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    246c:	7959      	ldrb	r1, [r3, #5]
    246e:	789a      	ldrb	r2, [r3, #2]
    2470:	fa82 f251 	uqadd8	r2, r2, r1
    2474:	709a      	strb	r2, [r3, #2]
	    }
	    Serial.printf("%d\r\n", (*i)->color.val);
    2476:	682b      	ldr	r3, [r5, #0]
    2478:	491a      	ldr	r1, [pc, #104]	; (24e4 <_ZN15CloseEncounters4blueEv+0x1ec>)
    247a:	789a      	ldrb	r2, [r3, #2]
    247c:	4814      	ldr	r0, [pc, #80]	; (24d0 <_ZN15CloseEncounters4blueEv+0x1d8>)
    247e:	f001 fbbf 	bl	3c00 <_ZN5Print6printfEPKcz>

	    leds_three[(*i)->index] = CHSV((*i)->color.hue, (*i)->color.sat, (*i)->color.val);
    2482:	682b      	ldr	r3, [r5, #0]
    2484:	683a      	ldr	r2, [r7, #0]
    2486:	78d9      	ldrb	r1, [r3, #3]
    2488:	7898      	ldrb	r0, [r3, #2]
    248a:	785d      	ldrb	r5, [r3, #1]
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	f88d 000a 	strb.w	r0, [sp, #10]
    2492:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2496:	a802      	add	r0, sp, #8
    2498:	4411      	add	r1, r2
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    249a:	f88d 5009 	strb.w	r5, [sp, #9]
    249e:	f88d 3008 	strb.w	r3, [sp, #8]
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
	++_M_current;
    24a2:	4635      	mov	r5, r6
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    24a4:	f7fe f847 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    24a8:	e7aa      	b.n	2400 <_ZN15CloseEncounters4blueEv+0x108>
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    24aa:	23a0      	movs	r3, #160	; 0xa0
    24ac:	702b      	strb	r3, [r5, #0]
        s = rhs.s;
    24ae:	23ff      	movs	r3, #255	; 0xff
    24b0:	706b      	strb	r3, [r5, #1]
    24b2:	e785      	b.n	23c0 <_ZN15CloseEncounters4blueEv+0xc8>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
    24b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
    24b8:	a902      	add	r1, sp, #8
    24ba:	f7ff feeb 	bl	2294 <_ZNSt6vectorIP7BlueDotSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_>
    24be:	e79e      	b.n	23fe <_ZN15CloseEncounters4blueEv+0x106>

	    ++i;
	}
}
    24c0:	b007      	add	sp, #28
    24c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24c4:	1fff91a8 	.word	0x1fff91a8
    24c8:	1fff8408 	.word	0x1fff8408
    24cc:	000141ba 	.word	0x000141ba
    24d0:	1fff9408 	.word	0x1fff9408
    24d4:	000141c3 	.word	0x000141c3
    24d8:	000141d4 	.word	0x000141d4
    24dc:	000141e1 	.word	0x000141e1
    24e0:	00014200 	.word	0x00014200
    24e4:	0001418b 	.word	0x0001418b

000024e8 <_ZN15CloseEncounters5frameEv>:
    	delete *i;
	}
	_colorBars.clear();
}

void CloseEncounters::frame() {
    24e8:	b510      	push	{r4, lr}
    24ea:	4604      	mov	r4, r0
    stripes();
    24ec:	f7ff fc54 	bl	1d98 <_ZN15CloseEncounters7stripesEv>
//	for (uint8_t i = 0; i < nLEDS; i++)
//	    leds[i] = CHSV(0, 0, 0);
    colors();
    24f0:	4620      	mov	r0, r4
    24f2:	f7ff fcc1 	bl	1e78 <_ZN15CloseEncounters6colorsEv>
    blue();
    24f6:	4620      	mov	r0, r4
}
    24f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void CloseEncounters::frame() {
    stripes();
//	for (uint8_t i = 0; i < nLEDS; i++)
//	    leds[i] = CHSV(0, 0, 0);
    colors();
    blue();
    24fc:	f7ff befc 	b.w	22f8 <_ZN15CloseEncounters4blueEv>

00002500 <_ZN9ColorMode4nameEv>:
    ColorMode(const char *name, CHSV color, long delay);
    virtual ~ColorMode();

public:
    virtual void frame();
    virtual const char* name() { return _name; }
    2500:	6840      	ldr	r0, [r0, #4]
    2502:	4770      	bx	lr

00002504 <_ZN9ColorModeD1Ev>:
    _color = color;
    _lastChange = millis();
    _delay = delay;
}

ColorMode::~ColorMode() {
    2504:	b510      	push	{r4, lr}
    2506:	4b03      	ldr	r3, [pc, #12]	; (2514 <_ZN9ColorModeD1Ev+0x10>)
    2508:	6003      	str	r3, [r0, #0]
    250a:	4604      	mov	r4, r0
}
    250c:	f7ff fa64 	bl	19d8 <_ZN8BaseModeD1Ev>
    2510:	4620      	mov	r0, r4
    2512:	bd10      	pop	{r4, pc}
    2514:	00014228 	.word	0x00014228

00002518 <_ZN9ColorModeD0Ev>:
    _color = color;
    _lastChange = millis();
    _delay = delay;
}

ColorMode::~ColorMode() {
    2518:	b510      	push	{r4, lr}
    251a:	4604      	mov	r4, r0
}
    251c:	f7ff fff2 	bl	2504 <_ZN9ColorModeD1Ev>
    2520:	4620      	mov	r0, r4
    2522:	f002 ff61 	bl	53e8 <_ZdlPv>
    2526:	4620      	mov	r0, r4
    2528:	bd10      	pop	{r4, pc}
    252a:	ffff b573 	vsli.32	<illegal reg q13.5>, <illegal reg q9.5>, #31

0000252c <_ZN9ColorMode5frameEv>:

void ColorMode::frame() {
    252c:	b573      	push	{r0, r1, r4, r5, r6, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    252e:	4b24      	ldr	r3, [pc, #144]	; (25c0 <_ZN9ColorMode5frameEv+0x94>)
    unsigned long currentTime = millis();
    if (currentTime <= _lastChange + _delay)
    2530:	6901      	ldr	r1, [r0, #16]
    2532:	681b      	ldr	r3, [r3, #0]
    2534:	9301      	str	r3, [sp, #4]
    2536:	68c2      	ldr	r2, [r0, #12]
	return ret;
    2538:	9b01      	ldr	r3, [sp, #4]
    253a:	440a      	add	r2, r1
    253c:	4293      	cmp	r3, r2
}

ColorMode::~ColorMode() {
}

void ColorMode::frame() {
    253e:	4604      	mov	r4, r0
    unsigned long currentTime = millis();
    if (currentTime <= _lastChange + _delay)
    2540:	d93c      	bls.n	25bc <_ZN9ColorMode5frameEv+0x90>
        return;

    _lastChange = currentTime;
    2542:	60c3      	str	r3, [r0, #12]
    2544:	2500      	movs	r5, #0
extern uint16_t rand16seed;// = RAND16_SEED;


LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * RAND16_2053) + RAND16_13849;
    2546:	4a1f      	ldr	r2, [pc, #124]	; (25c4 <_ZN9ColorMode5frameEv+0x98>)
    2548:	8813      	ldrh	r3, [r2, #0]
    254a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    254e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2552:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2556:	3319      	adds	r3, #25
    2558:	b29b      	uxth	r3, r3

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS; i++) {
	    dice = random8();
    255a:	b2d9      	uxtb	r1, r3

	    if ((dice <= 10) && (_delay > 0))
    255c:	290a      	cmp	r1, #10
    255e:	8013      	strh	r3, [r2, #0]
    2560:	dc19      	bgt.n	2596 <_ZN9ColorMode5frameEv+0x6a>
    2562:	6921      	ldr	r1, [r4, #16]
    2564:	2900      	cmp	r1, #0
    2566:	dd16      	ble.n	2596 <_ZN9ColorMode5frameEv+0x6a>
    2568:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    256c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    2570:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2574:	3319      	adds	r3, #25
    2576:	b29b      	uxth	r3, r3
    2578:	8013      	strh	r3, [r2, #0]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    257a:	b2db      	uxtb	r3, r3
    257c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    2580:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
            tmp = CHSV(_color.hue, _color.sat, random8(200, 255));
    2584:	7a20      	ldrb	r0, [r4, #8]
    2586:	7a61      	ldrb	r1, [r4, #9]
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2588:	f88d 0000 	strb.w	r0, [sp]
    258c:	121b      	asrs	r3, r3, #8
        s = rhs.s;
    258e:	f88d 1001 	strb.w	r1, [sp, #1]
}

LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2592:	3b38      	subs	r3, #56	; 0x38
    2594:	e006      	b.n	25a4 <_ZN9ColorMode5frameEv+0x78>
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2596:	7a23      	ldrb	r3, [r4, #8]
    2598:	f88d 3000 	strb.w	r3, [sp]
        s = rhs.s;
    259c:	7a63      	ldrb	r3, [r4, #9]
    259e:	f88d 3001 	strb.w	r3, [sp, #1]
        v = rhs.v;
    25a2:	7aa3      	ldrb	r3, [r4, #10]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    25a4:	4908      	ldr	r1, [pc, #32]	; (25c8 <_ZN9ColorMode5frameEv+0x9c>)

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
        s = rhs.s;
        v = rhs.v;
    25a6:	f88d 3002 	strb.w	r3, [sp, #2]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    25aa:	4429      	add	r1, r5
    25ac:	4668      	mov	r0, sp
    25ae:	f7fd ffc2 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    25b2:	3503      	adds	r5, #3

    _lastChange = currentTime;

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS; i++) {
    25b4:	f240 23ee 	movw	r3, #750	; 0x2ee
    25b8:	429d      	cmp	r5, r3
    25ba:	d1c4      	bne.n	2546 <_ZN9ColorMode5frameEv+0x1a>
            tmp = CHSV(_color.hue, _color.sat, random8(200, 255));
	    else
	        tmp = _color;
	    leds[i] = tmp;
	}
}
    25bc:	b002      	add	sp, #8
    25be:	bd70      	pop	{r4, r5, r6, pc}
    25c0:	1fff91a8 	.word	0x1fff91a8
    25c4:	1fff8404 	.word	0x1fff8404
    25c8:	1fff8d68 	.word	0x1fff8d68

000025cc <_ZN9ColorModeC1EPKc4CHSVl>:
#include "ColorMode.h"

ColorMode::ColorMode(const char *name, CHSV color, long delay) {
    25cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    25ce:	4604      	mov	r4, r0
    25d0:	4615      	mov	r5, r2
    25d2:	461f      	mov	r7, r3
    25d4:	460e      	mov	r6, r1
    25d6:	f7ff fa0f 	bl	19f8 <_ZN8BaseModeC1Ev>
    25da:	4b09      	ldr	r3, [pc, #36]	; (2600 <_ZN9ColorModeC1EPKc4CHSVl+0x34>)
    _name = name;
    25dc:	e884 0048 	stmia.w	r4, {r3, r6}
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    25e0:	782b      	ldrb	r3, [r5, #0]
    25e2:	7223      	strb	r3, [r4, #8]
        s = rhs.s;
    25e4:	786b      	ldrb	r3, [r5, #1]
    25e6:	7263      	strb	r3, [r4, #9]
        v = rhs.v;
    25e8:	78ab      	ldrb	r3, [r5, #2]
    25ea:	72a3      	strb	r3, [r4, #10]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    25ec:	4b05      	ldr	r3, [pc, #20]	; (2604 <_ZN9ColorModeC1EPKc4CHSVl+0x38>)
    _color = color;
    _lastChange = millis();
    _delay = delay;
    25ee:	6127      	str	r7, [r4, #16]
    25f0:	681b      	ldr	r3, [r3, #0]
    25f2:	9301      	str	r3, [sp, #4]
	return ret;
    25f4:	9a01      	ldr	r2, [sp, #4]
#include "ColorMode.h"

ColorMode::ColorMode(const char *name, CHSV color, long delay) {
    _name = name;
    _color = color;
    _lastChange = millis();
    25f6:	60e2      	str	r2, [r4, #12]
    _delay = delay;
}
    25f8:	4620      	mov	r0, r4
    25fa:	b003      	add	sp, #12
    25fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25fe:	bf00      	nop
    2600:	00014228 	.word	0x00014228
    2604:	1fff91a8 	.word	0x1fff91a8

00002608 <_ZL8random16v>:
    return rand16seed;
}

LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * RAND16_2053) + RAND16_13849;
    2608:	4a05      	ldr	r2, [pc, #20]	; (2620 <_ZL8random16v+0x18>)
    260a:	8813      	ldrh	r3, [r2, #0]
    260c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2610:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2614:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2618:	3019      	adds	r0, #25
    261a:	b280      	uxth	r0, r0
    261c:	8010      	strh	r0, [r2, #0]
    return rand16seed;
}
    261e:	4770      	bx	lr
    2620:	1fff8404 	.word	0x1fff8404

00002624 <_ZN8MeltMode4nameEv>:
    MeltMode();
    virtual ~MeltMode();

public:
    virtual void frame();
    virtual const char* name() { return "melt"; }
    2624:	4800      	ldr	r0, [pc, #0]	; (2628 <_ZN8MeltMode4nameEv+0x4>)
    2626:	4770      	bx	lr
    2628:	00014238 	.word	0x00014238

0000262c <_ZN8MeltModeD1Ev>:
    threeValueTracker = random16();

    perlins = new Perlins();
}

MeltMode::~MeltMode() {
    262c:	4b06      	ldr	r3, [pc, #24]	; (2648 <_ZN8MeltModeD1Ev+0x1c>)
    262e:	b510      	push	{r4, lr}
    2630:	4604      	mov	r4, r0
    2632:	6003      	str	r3, [r0, #0]
    delete perlins;
    2634:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2636:	b110      	cbz	r0, 263e <_ZN8MeltModeD1Ev+0x12>
    2638:	6803      	ldr	r3, [r0, #0]
    263a:	685b      	ldr	r3, [r3, #4]
    263c:	4798      	blx	r3
}
    263e:	4620      	mov	r0, r4
    2640:	f7ff f9ca 	bl	19d8 <_ZN8BaseModeD1Ev>
    2644:	4620      	mov	r0, r4
    2646:	bd10      	pop	{r4, pc}
    2648:	00014248 	.word	0x00014248

0000264c <_ZN8MeltModeD0Ev>:
    threeValueTracker = random16();

    perlins = new Perlins();
}

MeltMode::~MeltMode() {
    264c:	b510      	push	{r4, lr}
    264e:	4604      	mov	r4, r0
    delete perlins;
}
    2650:	f7ff ffec 	bl	262c <_ZN8MeltModeD1Ev>
    2654:	4620      	mov	r0, r4
    2656:	f002 fec7 	bl	53e8 <_ZdlPv>
    265a:	4620      	mov	r0, r4
    265c:	bd10      	pop	{r4, pc}
    265e:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00002660 <_ZN8MeltMode5frameEv>:

void MeltMode::frame() {
    2660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    2664:	a3a6      	add	r3, pc, #664	; (adr r3, 2900 <_ZN8MeltMode5frameEv+0x2a0>)
    2666:	e9d3 2300 	ldrd	r2, r3, [r3]

MeltMode::~MeltMode() {
    delete perlins;
}

void MeltMode::frame() {
    266a:	4682      	mov	sl, r0
    266c:	b08b      	sub	sp, #44	; 0x2c
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    266e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    2672:	f00a fc61 	bl	cf38 <__adddf3>
    valueTracker += 0.001;
    2676:	a3a2      	add	r3, pc, #648	; (adr r3, 2900 <_ZN8MeltMode5frameEv+0x2a0>)
    2678:	e9d3 2300 	ldrd	r2, r3, [r3]
}

void MeltMode::frame() {
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    267c:	e9ca 0102 	strd	r0, r1, [sl, #8]
    valueTracker += 0.001;
    2680:	e9da 0104 	ldrd	r0, r1, [sl, #16]
    2684:	f00a fc58 	bl	cf38 <__adddf3>
    2688:	e9ca 0104 	strd	r0, r1, [sl, #16]
    for (j = 0; j < nLEDS_ONE; j++)
    268c:	f04f 0b00 	mov.w	fp, #0
    {
        valueTracker += 0.0001;
    2690:	e9da 0104 	ldrd	r0, r1, [sl, #16]
    2694:	a39c      	add	r3, pc, #624	; (adr r3, 2908 <_ZN8MeltMode5frameEv+0x2a8>)
    2696:	e9d3 2300 	ldrd	r2, r3, [r3]
    269a:	f00a fc4d 	bl	cf38 <__adddf3>
    269e:	4604      	mov	r4, r0
    26a0:	460d      	mov	r5, r1
        hueTracker += 0.00001;
    26a2:	a39b      	add	r3, pc, #620	; (adr r3, 2910 <_ZN8MeltMode5frameEv+0x2b0>)
    26a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    int j = 0;
    hueTracker += 0.001;
    valueTracker += 0.001;
    for (j = 0; j < nLEDS_ONE; j++)
    {
        valueTracker += 0.0001;
    26a8:	e9ca 4504 	strd	r4, r5, [sl, #16]
        hueTracker += 0.00001;
    26ac:	e9da 0102 	ldrd	r0, r1, [sl, #8]
    26b0:	f00a fc42 	bl	cf38 <__adddf3>
    26b4:	e9ca 0102 	strd	r0, r1, [sl, #8]

        value = perlins->pnoise(valueTracker + sin((j + valueTracker) / 2) , cos(valueTracker), valueTracker);
    26b8:	4658      	mov	r0, fp
    26ba:	f00a fd89 	bl	d1d0 <__aeabi_i2d>
    26be:	4622      	mov	r2, r4
    26c0:	462b      	mov	r3, r5
    26c2:	4606      	mov	r6, r0
    26c4:	460f      	mov	r7, r1
    26c6:	f00a fc37 	bl	cf38 <__adddf3>
    26ca:	2200      	movs	r2, #0
    26cc:	4b98      	ldr	r3, [pc, #608]	; (2930 <_ZN8MeltMode5frameEv+0x2d0>)
    26ce:	f00a fde5 	bl	d29c <__aeabi_dmul>
    26d2:	f009 fb45 	bl	bd60 <sin>
    26d6:	4680      	mov	r8, r0
    26d8:	4689      	mov	r9, r1
    26da:	4620      	mov	r0, r4
    26dc:	4629      	mov	r1, r5
    26de:	f009 fa73 	bl	bbc8 <cos>
    26e2:	4642      	mov	r2, r8
    26e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    26e8:	464b      	mov	r3, r9
    26ea:	4620      	mov	r0, r4
    26ec:	4629      	mov	r1, r5
    26ee:	f00a fc23 	bl	cf38 <__adddf3>
    26f2:	4602      	mov	r2, r0
    26f4:	460b      	mov	r3, r1
    26f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    26fa:	e9cd 4502 	strd	r4, r5, [sp, #8]
    26fe:	e9cd 0100 	strd	r0, r1, [sp]
    2702:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    2706:	f7fe f83b 	bl	780 <_ZN7Perlins6pnoiseEddd>
        hue = perlins->pnoise(cos(hueTracker / 2.0) + sin((j + hueTracker) / 10.0) , cos(hueTracker / 5.0), hueTracker);
    270a:	e9da 8902 	ldrd	r8, r9, [sl, #8]
    for (j = 0; j < nLEDS_ONE; j++)
    {
        valueTracker += 0.0001;
        hueTracker += 0.00001;

        value = perlins->pnoise(valueTracker + sin((j + valueTracker) / 2) , cos(valueTracker), valueTracker);
    270e:	e9cd 0104 	strd	r0, r1, [sp, #16]
        hue = perlins->pnoise(cos(hueTracker / 2.0) + sin((j + hueTracker) / 10.0) , cos(hueTracker / 5.0), hueTracker);
    2712:	2200      	movs	r2, #0
    2714:	4b86      	ldr	r3, [pc, #536]	; (2930 <_ZN8MeltMode5frameEv+0x2d0>)
    2716:	4640      	mov	r0, r8
    2718:	4649      	mov	r1, r9
    271a:	f00a fdbf 	bl	d29c <__aeabi_dmul>
    271e:	f009 fa53 	bl	bbc8 <cos>
    2722:	4642      	mov	r2, r8
    2724:	e9cd 0106 	strd	r0, r1, [sp, #24]
    2728:	464b      	mov	r3, r9
    272a:	4630      	mov	r0, r6
    272c:	4639      	mov	r1, r7
    272e:	f00a fc03 	bl	cf38 <__adddf3>
    2732:	2200      	movs	r2, #0
    2734:	4b7f      	ldr	r3, [pc, #508]	; (2934 <_ZN8MeltMode5frameEv+0x2d4>)
    2736:	f00a fedb 	bl	d4f0 <__aeabi_ddiv>
    273a:	f009 fb11 	bl	bd60 <sin>
    273e:	2200      	movs	r2, #0
    2740:	4606      	mov	r6, r0
    2742:	460f      	mov	r7, r1
    2744:	4b7c      	ldr	r3, [pc, #496]	; (2938 <_ZN8MeltMode5frameEv+0x2d8>)
    2746:	4640      	mov	r0, r8
    2748:	4649      	mov	r1, r9
    274a:	f00a fed1 	bl	d4f0 <__aeabi_ddiv>
    274e:	f009 fa3b 	bl	bbc8 <cos>
    2752:	4632      	mov	r2, r6
    2754:	4604      	mov	r4, r0
    2756:	460d      	mov	r5, r1
    2758:	463b      	mov	r3, r7
    275a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    275e:	f00a fbeb 	bl	cf38 <__adddf3>
    2762:	e9cd 4500 	strd	r4, r5, [sp]
    2766:	4602      	mov	r2, r0
    2768:	e9cd 8902 	strd	r8, r9, [sp, #8]
    276c:	460b      	mov	r3, r1
    276e:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    2772:	f7fe f805 	bl	780 <_ZN7Perlins6pnoiseEddd>

        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    2776:	4b71      	ldr	r3, [pc, #452]	; (293c <_ZN8MeltMode5frameEv+0x2dc>)
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
    {
        valueTracker += 0.0001;
        hueTracker += 0.00001;

        value = perlins->pnoise(valueTracker + sin((j + valueTracker) / 2) , cos(valueTracker), valueTracker);
        hue = perlins->pnoise(cos(hueTracker / 2.0) + sin((j + hueTracker) / 10.0) , cos(hueTracker / 5.0), hueTracker);
    277e:	4604      	mov	r4, r0
    2780:	460d      	mov	r5, r1

        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    2782:	eb03 0806 	add.w	r8, r3, r6
    2786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    278a:	a363      	add	r3, pc, #396	; (adr r3, 2918 <_ZN8MeltMode5frameEv+0x2b8>)
    278c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2790:	f00a fd84 	bl	d29c <__aeabi_dmul>
    2794:	2200      	movs	r2, #0
    2796:	4b6a      	ldr	r3, [pc, #424]	; (2940 <_ZN8MeltMode5frameEv+0x2e0>)
    2798:	f00a fbce 	bl	cf38 <__adddf3>
    279c:	27ff      	movs	r7, #255	; 0xff
    279e:	f00b f817 	bl	d7d0 <__aeabi_d2iz>
    27a2:	2100      	movs	r1, #0
    27a4:	463a      	mov	r2, r7
    27a6:	2364      	movs	r3, #100	; 0x64
    27a8:	9700      	str	r7, [sp, #0]
    27aa:	f002 fe0c 	bl	53c6 <_Z3maplllll>
    27ae:	a35a      	add	r3, pc, #360	; (adr r3, 2918 <_ZN8MeltMode5frameEv+0x2b8>)
    27b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    27b4:	4681      	mov	r9, r0
    27b6:	4629      	mov	r1, r5
    27b8:	4620      	mov	r0, r4
    27ba:	f00a fd6f 	bl	d29c <__aeabi_dmul>
    27be:	2200      	movs	r2, #0
    27c0:	4b5f      	ldr	r3, [pc, #380]	; (2940 <_ZN8MeltMode5frameEv+0x2e0>)
    27c2:	f00a fbb9 	bl	cf38 <__adddf3>
    27c6:	f00b f82b 	bl	d820 <__aeabi_d2uiz>
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    27ca:	4641      	mov	r1, r8
    27cc:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    27d0:	a809      	add	r0, sp, #36	; 0x24
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    27d2:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    27d6:	f88d 9026 	strb.w	r9, [sp, #38]	; 0x26
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    27da:	f7fd feac 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
        if (j < nLEDS_TWO)
            leds_two[j] = leds[j];
    27de:	4b59      	ldr	r3, [pc, #356]	; (2944 <_ZN8MeltMode5frameEv+0x2e4>)
    }

    // allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    27e0:	4859      	ldr	r0, [pc, #356]	; (2948 <_ZN8MeltMode5frameEv+0x2e8>)
    27e2:	6819      	ldr	r1, [r3, #0]
    27e4:	1832      	adds	r2, r6, r0
    27e6:	5c30      	ldrb	r0, [r6, r0]
    27e8:	5588      	strb	r0, [r1, r6]
    27ea:	198b      	adds	r3, r1, r6
        g = rhs.g;
    27ec:	7851      	ldrb	r1, [r2, #1]
    27ee:	7059      	strb	r1, [r3, #1]
void MeltMode::frame() {
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    valueTracker += 0.001;
    for (j = 0; j < nLEDS_ONE; j++)
    27f0:	f10b 0b01 	add.w	fp, fp, #1
        b = rhs.b;
    27f4:	7892      	ldrb	r2, [r2, #2]
    27f6:	709a      	strb	r2, [r3, #2]
    27f8:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
    27fc:	f47f af48 	bne.w	2690 <_ZN8MeltMode5frameEv+0x30>
        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
        if (j < nLEDS_TWO)
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    2800:	e9da 0106 	ldrd	r0, r1, [sl, #24]
    2804:	a346      	add	r3, pc, #280	; (adr r3, 2920 <_ZN8MeltMode5frameEv+0x2c0>)
    2806:	e9d3 2300 	ldrd	r2, r3, [r3]
    280a:	f00a fb95 	bl	cf38 <__adddf3>
    threeValueTracker += 0.008;
    280e:	a346      	add	r3, pc, #280	; (adr r3, 2928 <_ZN8MeltMode5frameEv+0x2c8>)
    2810:	e9d3 2300 	ldrd	r2, r3, [r3]
        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
        if (j < nLEDS_TWO)
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    2814:	e9ca 0106 	strd	r0, r1, [sl, #24]
    threeValueTracker += 0.008;
    2818:	e9da 0108 	ldrd	r0, r1, [sl, #32]
    281c:	f00a fb8c 	bl	cf38 <__adddf3>
    2820:	e9ca 0108 	strd	r0, r1, [sl, #32]
    for (j = 0; j < nLEDS_THREE; j++)
    2824:	f04f 0b00 	mov.w	fp, #0
    {
        threeValueTracker += 0.001;
    2828:	e9da 0108 	ldrd	r0, r1, [sl, #32]
    282c:	a334      	add	r3, pc, #208	; (adr r3, 2900 <_ZN8MeltMode5frameEv+0x2a0>)
    282e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2832:	f00a fb81 	bl	cf38 <__adddf3>
    2836:	4604      	mov	r4, r0
    2838:	460d      	mov	r5, r1
        threeHueTracker += 0.0001;
    283a:	a333      	add	r3, pc, #204	; (adr r3, 2908 <_ZN8MeltMode5frameEv+0x2a8>)
    283c:	e9d3 2300 	ldrd	r2, r3, [r3]

    threeHueTracker += 0.01;
    threeValueTracker += 0.008;
    for (j = 0; j < nLEDS_THREE; j++)
    {
        threeValueTracker += 0.001;
    2840:	e9ca 4508 	strd	r4, r5, [sl, #32]
        threeHueTracker += 0.0001;
    2844:	e9da 0106 	ldrd	r0, r1, [sl, #24]
    2848:	f00a fb76 	bl	cf38 <__adddf3>
    284c:	e9ca 0106 	strd	r0, r1, [sl, #24]

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
    2850:	4658      	mov	r0, fp
    2852:	f00a fcbd 	bl	d1d0 <__aeabi_i2d>
    2856:	4622      	mov	r2, r4
    2858:	462b      	mov	r3, r5
    285a:	4606      	mov	r6, r0
    285c:	460f      	mov	r7, r1
    285e:	f00a fb6b 	bl	cf38 <__adddf3>
    2862:	2200      	movs	r2, #0
    2864:	4b32      	ldr	r3, [pc, #200]	; (2930 <_ZN8MeltMode5frameEv+0x2d0>)
    2866:	f00a fd19 	bl	d29c <__aeabi_dmul>
    286a:	f009 fa79 	bl	bd60 <sin>
    286e:	4680      	mov	r8, r0
    2870:	4689      	mov	r9, r1
    2872:	4620      	mov	r0, r4
    2874:	4629      	mov	r1, r5
    2876:	f009 f9a7 	bl	bbc8 <cos>
    287a:	4642      	mov	r2, r8
    287c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2880:	464b      	mov	r3, r9
    2882:	4620      	mov	r0, r4
    2884:	4629      	mov	r1, r5
    2886:	f00a fb57 	bl	cf38 <__adddf3>
    288a:	4602      	mov	r2, r0
    288c:	460b      	mov	r3, r1
    288e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2892:	e9cd 4502 	strd	r4, r5, [sp, #8]
    2896:	e9cd 0100 	strd	r0, r1, [sp]
    289a:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    289e:	f7fd ff6f 	bl	780 <_ZN7Perlins6pnoiseEddd>
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);
    28a2:	e9da 8906 	ldrd	r8, r9, [sl, #24]
    for (j = 0; j < nLEDS_THREE; j++)
    {
        threeValueTracker += 0.001;
        threeHueTracker += 0.0001;

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
    28a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);
    28aa:	2200      	movs	r2, #0
    28ac:	4b20      	ldr	r3, [pc, #128]	; (2930 <_ZN8MeltMode5frameEv+0x2d0>)
    28ae:	4640      	mov	r0, r8
    28b0:	4649      	mov	r1, r9
    28b2:	f00a fcf3 	bl	d29c <__aeabi_dmul>
    28b6:	f009 f987 	bl	bbc8 <cos>
    28ba:	4642      	mov	r2, r8
    28bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    28c0:	464b      	mov	r3, r9
    28c2:	4630      	mov	r0, r6
    28c4:	4639      	mov	r1, r7
    28c6:	f00a fb37 	bl	cf38 <__adddf3>
    28ca:	2200      	movs	r2, #0
    28cc:	4b19      	ldr	r3, [pc, #100]	; (2934 <_ZN8MeltMode5frameEv+0x2d4>)
    28ce:	f00a fe0f 	bl	d4f0 <__aeabi_ddiv>
    28d2:	f009 fa45 	bl	bd60 <sin>
    28d6:	2200      	movs	r2, #0
    28d8:	4606      	mov	r6, r0
    28da:	460f      	mov	r7, r1
    28dc:	4b16      	ldr	r3, [pc, #88]	; (2938 <_ZN8MeltMode5frameEv+0x2d8>)
    28de:	4640      	mov	r0, r8
    28e0:	4649      	mov	r1, r9
    28e2:	f00a fe05 	bl	d4f0 <__aeabi_ddiv>
    28e6:	f009 f96f 	bl	bbc8 <cos>
    28ea:	4632      	mov	r2, r6
    28ec:	4604      	mov	r4, r0
    28ee:	460d      	mov	r5, r1
    28f0:	463b      	mov	r3, r7
    28f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    28f6:	f00a fb1f 	bl	cf38 <__adddf3>
    28fa:	e027      	b.n	294c <_ZN8MeltMode5frameEv+0x2ec>
    28fc:	f3af 8000 	nop.w
    2900:	d2f1a9fc 	.word	0xd2f1a9fc
    2904:	3f50624d 	.word	0x3f50624d
    2908:	eb1c432d 	.word	0xeb1c432d
    290c:	3f1a36e2 	.word	0x3f1a36e2
    2910:	88e368f1 	.word	0x88e368f1
    2914:	3ee4f8b5 	.word	0x3ee4f8b5
    2918:	00000000 	.word	0x00000000
    291c:	405fc000 	.word	0x405fc000
    2920:	47ae147b 	.word	0x47ae147b
    2924:	3f847ae1 	.word	0x3f847ae1
    2928:	d2f1a9fc 	.word	0xd2f1a9fc
    292c:	3f80624d 	.word	0x3f80624d
    2930:	3fe00000 	.word	0x3fe00000
    2934:	40240000 	.word	0x40240000
    2938:	40140000 	.word	0x40140000
    293c:	1fff8410 	.word	0x1fff8410
    2940:	40600000 	.word	0x40600000
    2944:	1fff840c 	.word	0x1fff840c
    2948:	1fff8d68 	.word	0x1fff8d68
    294c:	e9cd 4500 	strd	r4, r5, [sp]
    2950:	4602      	mov	r2, r0
    2952:	460b      	mov	r3, r1
    2954:	e9cd 8902 	strd	r8, r9, [sp, #8]
    2958:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    295c:	f7fd ff10 	bl	780 <_ZN7Perlins6pnoiseEddd>

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    2960:	4a1f      	ldr	r2, [pc, #124]	; (29e0 <_ZN8MeltMode5frameEv+0x380>)
    2962:	6817      	ldr	r7, [r2, #0]
    2964:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    {
        threeValueTracker += 0.001;
        threeHueTracker += 0.0001;

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);
    2968:	4604      	mov	r4, r0
    296a:	460d      	mov	r5, r1

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    296c:	441f      	add	r7, r3
    296e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2972:	a319      	add	r3, pc, #100	; (adr r3, 29d8 <_ZN8MeltMode5frameEv+0x378>)
    2974:	e9d3 2300 	ldrd	r2, r3, [r3]
    2978:	f00a fc90 	bl	d29c <__aeabi_dmul>
    297c:	2200      	movs	r2, #0
    297e:	4b19      	ldr	r3, [pc, #100]	; (29e4 <_ZN8MeltMode5frameEv+0x384>)
    2980:	f00a fada 	bl	cf38 <__adddf3>
    2984:	26ff      	movs	r6, #255	; 0xff
    2986:	f00a ff23 	bl	d7d0 <__aeabi_d2iz>
    298a:	2100      	movs	r1, #0
    298c:	4632      	mov	r2, r6
    298e:	2364      	movs	r3, #100	; 0x64
    2990:	9600      	str	r6, [sp, #0]
    2992:	f002 fd18 	bl	53c6 <_Z3maplllll>
    2996:	a310      	add	r3, pc, #64	; (adr r3, 29d8 <_ZN8MeltMode5frameEv+0x378>)
    2998:	e9d3 2300 	ldrd	r2, r3, [r3]
    299c:	4680      	mov	r8, r0
    299e:	4629      	mov	r1, r5
    29a0:	4620      	mov	r0, r4
    29a2:	f00a fc7b 	bl	d29c <__aeabi_dmul>
    29a6:	2200      	movs	r2, #0
    29a8:	4b0e      	ldr	r3, [pc, #56]	; (29e4 <_ZN8MeltMode5frameEv+0x384>)
    29aa:	f00a fac5 	bl	cf38 <__adddf3>
    29ae:	f00a ff37 	bl	d820 <__aeabi_d2uiz>
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    threeValueTracker += 0.008;
    for (j = 0; j < nLEDS_THREE; j++)
    29b2:	f10b 0b01 	add.w	fp, fp, #1
        threeHueTracker += 0.0001;

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    29b6:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    29ba:	4639      	mov	r1, r7
    29bc:	a809      	add	r0, sp, #36	; 0x24
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    29be:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
    29c2:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    29c6:	f7fd fdb6 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    threeValueTracker += 0.008;
    for (j = 0; j < nLEDS_THREE; j++)
    29ca:	f1bb 0f32 	cmp.w	fp, #50	; 0x32
    29ce:	f47f af2b 	bne.w	2828 <_ZN8MeltMode5frameEv+0x1c8>
        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    }
}
    29d2:	b00b      	add	sp, #44	; 0x2c
    29d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29d8:	00000000 	.word	0x00000000
    29dc:	405fc000 	.word	0x405fc000
    29e0:	1fff8408 	.word	0x1fff8408
    29e4:	40600000 	.word	0x40600000

000029e8 <_ZN8MeltModeC1Ev>:
#include "MeltMode.h"

MeltMode::MeltMode() {
    29e8:	b538      	push	{r3, r4, r5, lr}
    29ea:	4604      	mov	r4, r0
    29ec:	f7ff f804 	bl	19f8 <_ZN8BaseModeC1Ev>
    29f0:	4b11      	ldr	r3, [pc, #68]	; (2a38 <_ZN8MeltModeC1Ev+0x50>)
    29f2:	6023      	str	r3, [r4, #0]
    hueTracker = random16();
    29f4:	f7ff fe08 	bl	2608 <_ZL8random16v>
    29f8:	f00a fbda 	bl	d1b0 <__aeabi_ui2d>
    29fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
    valueTracker = random16();
    2a00:	f7ff fe02 	bl	2608 <_ZL8random16v>
    2a04:	f00a fbd4 	bl	d1b0 <__aeabi_ui2d>
    2a08:	e9c4 0104 	strd	r0, r1, [r4, #16]

    threeHueTracker = random16();
    2a0c:	f7ff fdfc 	bl	2608 <_ZL8random16v>
    2a10:	f00a fbce 	bl	d1b0 <__aeabi_ui2d>
    2a14:	e9c4 0106 	strd	r0, r1, [r4, #24]
    threeValueTracker = random16();
    2a18:	f7ff fdf6 	bl	2608 <_ZL8random16v>
    2a1c:	f00a fbc8 	bl	d1b0 <__aeabi_ui2d>
    2a20:	e9c4 0108 	strd	r0, r1, [r4, #32]

    perlins = new Perlins();
    2a24:	2004      	movs	r0, #4
    2a26:	f002 fce3 	bl	53f0 <_Znwj>
    2a2a:	4605      	mov	r5, r0
    2a2c:	f7fd fe4a 	bl	6c4 <_ZN7PerlinsC1Ev>
    2a30:	62a5      	str	r5, [r4, #40]	; 0x28
}
    2a32:	4620      	mov	r0, r4
    2a34:	bd38      	pop	{r3, r4, r5, pc}
    2a36:	bf00      	nop
    2a38:	00014248 	.word	0x00014248

00002a3c <_ZN4Moon4nameEv>:
    Moon();
    virtual ~Moon();

public:
    virtual void frame();
    virtual const char* name() { return _name; }
    2a3c:	6840      	ldr	r0, [r0, #4]
    2a3e:	4770      	bx	lr

00002a40 <_ZN4MoonD1Ev>:

    perlins = new Perlins();
    _valueTracker = random16();
}

Moon::~Moon() {
    2a40:	b510      	push	{r4, lr}
    2a42:	4b03      	ldr	r3, [pc, #12]	; (2a50 <_ZN4MoonD1Ev+0x10>)
    2a44:	6003      	str	r3, [r0, #0]
    2a46:	4604      	mov	r4, r0
}
    2a48:	f7fe ffc6 	bl	19d8 <_ZN8BaseModeD1Ev>
    2a4c:	4620      	mov	r0, r4
    2a4e:	bd10      	pop	{r4, pc}
    2a50:	00014268 	.word	0x00014268

00002a54 <_ZN4MoonD0Ev>:

    perlins = new Perlins();
    _valueTracker = random16();
}

Moon::~Moon() {
    2a54:	b510      	push	{r4, lr}
    2a56:	4604      	mov	r4, r0
}
    2a58:	f7ff fff2 	bl	2a40 <_ZN4MoonD1Ev>
    2a5c:	4620      	mov	r0, r4
    2a5e:	f002 fcc3 	bl	53e8 <_ZdlPv>
    2a62:	4620      	mov	r0, r4
    2a64:	bd10      	pop	{r4, pc}
    2a66:	ffff b537 	vsli.32	d27, d23, #31

00002a68 <_ZN4MoonC1Ev>:
#include "Moon.h"

Moon::Moon() {
    2a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2a6a:	4604      	mov	r4, r0
    2a6c:	f7fe ffc4 	bl	19f8 <_ZN8BaseModeC1Ev>
    2a70:	4b17      	ldr	r3, [pc, #92]	; (2ad0 <_ZN4MoonC1Ev+0x68>)
    2a72:	6023      	str	r3, [r4, #0]
    _name = "moon";
    2a74:	4b17      	ldr	r3, [pc, #92]	; (2ad4 <_ZN4MoonC1Ev+0x6c>)
    2a76:	6063      	str	r3, [r4, #4]
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2a78:	23a4      	movs	r3, #164	; 0xa4
    2a7a:	7223      	strb	r3, [r4, #8]
        s = rhs.s;
    2a7c:	23ff      	movs	r3, #255	; 0xff
    2a7e:	7263      	strb	r3, [r4, #9]
        v = rhs.v;
    2a80:	7363      	strb	r3, [r4, #13]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    2a82:	4b15      	ldr	r3, [pc, #84]	; (2ad8 <_ZN4MoonC1Ev+0x70>)
    2a84:	681b      	ldr	r3, [r3, #0]
    2a86:	9301      	str	r3, [sp, #4]
    2a88:	22c8      	movs	r2, #200	; 0xc8
	return ret;
    2a8a:	9b01      	ldr	r3, [sp, #4]
    2a8c:	72a2      	strb	r2, [r4, #10]
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2a8e:	22a0      	movs	r2, #160	; 0xa0
    2a90:	72e2      	strb	r2, [r4, #11]
    _skyColor = CHSV(164, 255, 200);
    _moonColor = CHSV(160, 0, 255);
    _lastChange = millis();
    2a92:	6123      	str	r3, [r4, #16]
        s = rhs.s;
    2a94:	2200      	movs	r2, #0
    _delay = 125;
    2a96:	237d      	movs	r3, #125	; 0x7d
    2a98:	7322      	strb	r2, [r4, #12]
    2a9a:	6163      	str	r3, [r4, #20]

    perlins = new Perlins();
    2a9c:	2004      	movs	r0, #4
    2a9e:	f002 fca7 	bl	53f0 <_Znwj>
    2aa2:	4605      	mov	r5, r0
    2aa4:	f7fd fe0e 	bl	6c4 <_ZN7PerlinsC1Ev>
    return rand16seed;
}

LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * RAND16_2053) + RAND16_13849;
    2aa8:	4a0c      	ldr	r2, [pc, #48]	; (2adc <_ZN4MoonC1Ev+0x74>)
    2aaa:	61a5      	str	r5, [r4, #24]
    2aac:	8813      	ldrh	r3, [r2, #0]
    2aae:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2ab2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2ab6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2aba:	3019      	adds	r0, #25
    2abc:	b280      	uxth	r0, r0
    2abe:	8010      	strh	r0, [r2, #0]
    _valueTracker = random16();
    2ac0:	f00a fb76 	bl	d1b0 <__aeabi_ui2d>
    2ac4:	e9c4 0108 	strd	r0, r1, [r4, #32]
}
    2ac8:	4620      	mov	r0, r4
    2aca:	b003      	add	sp, #12
    2acc:	bd30      	pop	{r4, r5, pc}
    2ace:	bf00      	nop
    2ad0:	00014268 	.word	0x00014268
    2ad4:	00014258 	.word	0x00014258
    2ad8:	1fff91a8 	.word	0x1fff91a8
    2adc:	1fff8404 	.word	0x1fff8404

00002ae0 <_ZN4Moon4moonEv>:
    moon();
    sky();
}

void Moon::moon()
{
    2ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    2ae2:	4b24      	ldr	r3, [pc, #144]	; (2b74 <_ZN4Moon4moonEv+0x94>)
    unsigned long currentTime = millis();
    if (currentTime <= _lastChange + _delay)
    2ae4:	6941      	ldr	r1, [r0, #20]
    2ae6:	681b      	ldr	r3, [r3, #0]
    2ae8:	9301      	str	r3, [sp, #4]
    2aea:	6902      	ldr	r2, [r0, #16]
	return ret;
    2aec:	9b01      	ldr	r3, [sp, #4]
    2aee:	440a      	add	r2, r1
    2af0:	4293      	cmp	r3, r2
    moon();
    sky();
}

void Moon::moon()
{
    2af2:	4604      	mov	r4, r0
    unsigned long currentTime = millis();
    if (currentTime <= _lastChange + _delay)
    2af4:	d93b      	bls.n	2b6e <_ZN4Moon4moonEv+0x8e>
        return;

    _lastChange = currentTime;
    2af6:	6103      	str	r3, [r0, #16]
    2af8:	2500      	movs	r5, #0
extern uint16_t rand16seed;// = RAND16_SEED;


LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * RAND16_2053) + RAND16_13849;
    2afa:	4a1f      	ldr	r2, [pc, #124]	; (2b78 <_ZN4Moon4moonEv+0x98>)
    2afc:	8813      	ldrh	r3, [r2, #0]
    2afe:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2b02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2b06:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2b0a:	3319      	adds	r3, #25
    2b0c:	b29b      	uxth	r3, r3

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS_THREE; i++)
	{
	    dice = random8();
    2b0e:	b2d9      	uxtb	r1, r3

	    if ((dice <= 10) && (_delay > 0))
    2b10:	290a      	cmp	r1, #10
    2b12:	8013      	strh	r3, [r2, #0]
    2b14:	dc19      	bgt.n	2b4a <_ZN4Moon4moonEv+0x6a>
    2b16:	6961      	ldr	r1, [r4, #20]
    2b18:	2900      	cmp	r1, #0
    2b1a:	dd16      	ble.n	2b4a <_ZN4Moon4moonEv+0x6a>
    2b1c:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    2b20:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    2b24:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2b28:	3319      	adds	r3, #25
    2b2a:	b29b      	uxth	r3, r3
    2b2c:	8013      	strh	r3, [r2, #0]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    2b2e:	b2db      	uxtb	r3, r3
    2b30:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    2b34:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
            tmp = CHSV(_moonColor.hue, _moonColor.sat, random8(200, 255));
    2b38:	7ae0      	ldrb	r0, [r4, #11]
    2b3a:	7b21      	ldrb	r1, [r4, #12]
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2b3c:	f88d 0000 	strb.w	r0, [sp]
    2b40:	121b      	asrs	r3, r3, #8
        s = rhs.s;
    2b42:	f88d 1001 	strb.w	r1, [sp, #1]
}

LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2b46:	3b38      	subs	r3, #56	; 0x38
    2b48:	e006      	b.n	2b58 <_ZN4Moon4moonEv+0x78>
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    2b4a:	7ae3      	ldrb	r3, [r4, #11]
    2b4c:	f88d 3000 	strb.w	r3, [sp]
        s = rhs.s;
    2b50:	7b23      	ldrb	r3, [r4, #12]
    2b52:	f88d 3001 	strb.w	r3, [sp, #1]
        v = rhs.v;
    2b56:	7b63      	ldrb	r3, [r4, #13]
    2b58:	f88d 3002 	strb.w	r3, [sp, #2]
	    else
	        tmp = _moonColor;
	    leds_three[i] = tmp;
    2b5c:	4b07      	ldr	r3, [pc, #28]	; (2b7c <_ZN4Moon4moonEv+0x9c>)
    2b5e:	6819      	ldr	r1, [r3, #0]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2b60:	4668      	mov	r0, sp
    2b62:	4429      	add	r1, r5
    2b64:	3503      	adds	r5, #3
    2b66:	f7fd fce6 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>

    _lastChange = currentTime;

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS_THREE; i++)
    2b6a:	2d96      	cmp	r5, #150	; 0x96
    2b6c:	d1c5      	bne.n	2afa <_ZN4Moon4moonEv+0x1a>
            tmp = CHSV(_moonColor.hue, _moonColor.sat, random8(200, 255));
	    else
	        tmp = _moonColor;
	    leds_three[i] = tmp;
	}
}
    2b6e:	b002      	add	sp, #8
    2b70:	bd70      	pop	{r4, r5, r6, pc}
    2b72:	bf00      	nop
    2b74:	1fff91a8 	.word	0x1fff91a8
    2b78:	1fff8404 	.word	0x1fff8404
    2b7c:	1fff8408 	.word	0x1fff8408

00002b80 <_ZN4Moon3skyEv>:

void Moon::sky()
{
    2b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    double value;
    _valueTracker += 0.0004;
    2b84:	a330      	add	r3, pc, #192	; (adr r3, 2c48 <_ZN4Moon3skyEv+0xc8>)
    2b86:	e9d3 2300 	ldrd	r2, r3, [r3]
	    leds_three[i] = tmp;
	}
}

void Moon::sky()
{
    2b8a:	4682      	mov	sl, r0
    2b8c:	b087      	sub	sp, #28
    double value;
    _valueTracker += 0.0004;
    2b8e:	e9d0 0108 	ldrd	r0, r1, [r0, #32]
    2b92:	f00a f9d1 	bl	cf38 <__adddf3>
    2b96:	e9ca 0108 	strd	r0, r1, [sl, #32]
	for (int i = 0; i < (nLEDS_ONE + nLEDS_TWO); i++)
    2b9a:	f04f 0b00 	mov.w	fp, #0
	{
        _valueTracker += 0.00005;
    2b9e:	a32c      	add	r3, pc, #176	; (adr r3, 2c50 <_ZN4Moon3skyEv+0xd0>)
    2ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ba4:	e9da 0108 	ldrd	r0, r1, [sl, #32]
    2ba8:	f00a f9c6 	bl	cf38 <__adddf3>
    2bac:	4604      	mov	r4, r0
    2bae:	460d      	mov	r5, r1
        value = perlins->pnoise(_valueTracker + sin((i + _valueTracker) / 2) , cos(_valueTracker), _valueTracker);
    2bb0:	4658      	mov	r0, fp
{
    double value;
    _valueTracker += 0.0004;
	for (int i = 0; i < (nLEDS_ONE + nLEDS_TWO); i++)
	{
        _valueTracker += 0.00005;
    2bb2:	e9ca 4508 	strd	r4, r5, [sl, #32]
        value = perlins->pnoise(_valueTracker + sin((i + _valueTracker) / 2) , cos(_valueTracker), _valueTracker);
    2bb6:	f00a fb0b 	bl	d1d0 <__aeabi_i2d>
    2bba:	4622      	mov	r2, r4
    2bbc:	462b      	mov	r3, r5
    2bbe:	f00a f9bb 	bl	cf38 <__adddf3>
    2bc2:	2200      	movs	r2, #0
    2bc4:	4b26      	ldr	r3, [pc, #152]	; (2c60 <_ZN4Moon3skyEv+0xe0>)
    2bc6:	f00a fb69 	bl	d29c <__aeabi_dmul>
    2bca:	f009 f8c9 	bl	bd60 <sin>
    2bce:	4680      	mov	r8, r0
    2bd0:	4689      	mov	r9, r1
    2bd2:	4620      	mov	r0, r4
    2bd4:	4629      	mov	r1, r5
    2bd6:	f008 fff7 	bl	bbc8 <cos>
    2bda:	4642      	mov	r2, r8
    2bdc:	4606      	mov	r6, r0
    2bde:	460f      	mov	r7, r1
    2be0:	464b      	mov	r3, r9
    2be2:	4620      	mov	r0, r4
    2be4:	4629      	mov	r1, r5
    2be6:	f00a f9a7 	bl	cf38 <__adddf3>
    2bea:	e9cd 6700 	strd	r6, r7, [sp]
    2bee:	4602      	mov	r2, r0
    2bf0:	460b      	mov	r3, r1
    2bf2:	e9cd 4502 	strd	r4, r5, [sp, #8]
    2bf6:	f8da 0018 	ldr.w	r0, [sl, #24]
    2bfa:	f7fd fdc1 	bl	780 <_ZN7Perlins6pnoiseEddd>
	    leds[i] = CHSV(_skyColor.hue, _skyColor.sat, (value * (double)127) + 128);
    2bfe:	f89a 3009 	ldrb.w	r3, [sl, #9]
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2c02:	f89a 2008 	ldrb.w	r2, [sl, #8]
    2c06:	f88d 2014 	strb.w	r2, [sp, #20]
    2c0a:	f88d 3015 	strb.w	r3, [sp, #21]
    2c0e:	a312      	add	r3, pc, #72	; (adr r3, 2c58 <_ZN4Moon3skyEv+0xd8>)
    2c10:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c14:	f00a fb42 	bl	d29c <__aeabi_dmul>
    2c18:	2200      	movs	r2, #0
    2c1a:	4b12      	ldr	r3, [pc, #72]	; (2c64 <_ZN4Moon3skyEv+0xe4>)
    2c1c:	f00a f98c 	bl	cf38 <__adddf3>
    2c20:	f00a fdfe 	bl	d820 <__aeabi_d2uiz>
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2c24:	4910      	ldr	r1, [pc, #64]	; (2c68 <_ZN4Moon3skyEv+0xe8>)
    2c26:	f88d 0016 	strb.w	r0, [sp, #22]
    2c2a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    2c2e:	a805      	add	r0, sp, #20
    2c30:	4419      	add	r1, r3

void Moon::sky()
{
    double value;
    _valueTracker += 0.0004;
	for (int i = 0; i < (nLEDS_ONE + nLEDS_TWO); i++)
    2c32:	f10b 0b01 	add.w	fp, fp, #1
    2c36:	f7fd fc7e 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    2c3a:	f1bb 0fc8 	cmp.w	fp, #200	; 0xc8
    2c3e:	d1ae      	bne.n	2b9e <_ZN4Moon3skyEv+0x1e>
        _valueTracker += 0.00005;
        value = perlins->pnoise(_valueTracker + sin((i + _valueTracker) / 2) , cos(_valueTracker), _valueTracker);
	    leds[i] = CHSV(_skyColor.hue, _skyColor.sat, (value * (double)127) + 128);
        //leds[i] = _skyColor;
	}
}
    2c40:	b007      	add	sp, #28
    2c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c46:	bf00      	nop
    2c48:	eb1c432d 	.word	0xeb1c432d
    2c4c:	3f3a36e2 	.word	0x3f3a36e2
    2c50:	eb1c432d 	.word	0xeb1c432d
    2c54:	3f0a36e2 	.word	0x3f0a36e2
    2c58:	00000000 	.word	0x00000000
    2c5c:	405fc000 	.word	0x405fc000
    2c60:	3fe00000 	.word	0x3fe00000
    2c64:	40600000 	.word	0x40600000
    2c68:	1fff8d68 	.word	0x1fff8d68
    2c6c:	f3af 8000 	nop.w

00002c70 <_ZN4Moon5frameEv>:

Moon::~Moon() {
}

void Moon::frame()
{
    2c70:	b510      	push	{r4, lr}
    2c72:	4604      	mov	r4, r0
    moon();
    2c74:	f7ff ff34 	bl	2ae0 <_ZN4Moon4moonEv>
    sky();
    2c78:	4620      	mov	r0, r4
}
    2c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void Moon::frame()
{
    moon();
    sky();
    2c7e:	f7ff bf7f 	b.w	2b80 <_ZN4Moon3skyEv>

00002c82 <_ZN7Rainbow4nameEv>:
    Rainbow();
    virtual ~Rainbow();

public:
    virtual void frame();
    virtual const char* name() { return _name; }
    2c82:	6880      	ldr	r0, [r0, #8]
    2c84:	4770      	bx	lr
    2c86:	ffff b510 	vsli.32	d27, d0, #31

00002c88 <_ZN7RainbowD1Ev>:
    _lastTopStartHue = 0;
    _topIncrement = (float)255/(float)nLEDS_THREE;
    _topDelay = 8;
}

Rainbow::~Rainbow() {
    2c88:	b510      	push	{r4, lr}
    2c8a:	4b03      	ldr	r3, [pc, #12]	; (2c98 <_ZN7RainbowD1Ev+0x10>)
    2c8c:	6003      	str	r3, [r0, #0]
    2c8e:	4604      	mov	r4, r0
}
    2c90:	f7fe fea2 	bl	19d8 <_ZN8BaseModeD1Ev>
    2c94:	4620      	mov	r0, r4
    2c96:	bd10      	pop	{r4, pc}
    2c98:	00014288 	.word	0x00014288

00002c9c <_ZN7RainbowD0Ev>:
    _lastTopStartHue = 0;
    _topIncrement = (float)255/(float)nLEDS_THREE;
    _topDelay = 8;
}

Rainbow::~Rainbow() {
    2c9c:	b510      	push	{r4, lr}
    2c9e:	4604      	mov	r4, r0
}
    2ca0:	f7ff fff2 	bl	2c88 <_ZN7RainbowD1Ev>
    2ca4:	4620      	mov	r0, r4
    2ca6:	f002 fb9f 	bl	53e8 <_ZdlPv>
    2caa:	4620      	mov	r0, r4
    2cac:	bd10      	pop	{r4, pc}
    2cae:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00002cb0 <_ZN7Rainbow5frameEv>:

void Rainbow::frame()
{
    2cb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    2cb4:	4b43      	ldr	r3, [pc, #268]	; (2dc4 <_ZN7Rainbow5frameEv+0x114>)
    unsigned long currentTime = millis();
    if (currentTime > (_lastChangeTime + _delay))
    2cb6:	7d02      	ldrb	r2, [r0, #20]
    2cb8:	681b      	ldr	r3, [r3, #0]
    2cba:	9301      	str	r3, [sp, #4]
    2cbc:	6843      	ldr	r3, [r0, #4]
	return ret;
    2cbe:	9e01      	ldr	r6, [sp, #4]
    2cc0:	4413      	add	r3, r2
    2cc2:	429e      	cmp	r6, r3

Rainbow::~Rainbow() {
}

void Rainbow::frame()
{
    2cc4:	4604      	mov	r4, r0
    unsigned long currentTime = millis();
    if (currentTime > (_lastChangeTime + _delay))
    2cc6:	d94c      	bls.n	2d62 <_ZN7Rainbow5frameEv+0xb2>
    {
        _lastChangeTime = currentTime;
    2cc8:	6046      	str	r6, [r0, #4]

        for (int i = 0; i < nLEDS_ONE; i++)
    2cca:	2500      	movs	r5, #0
            leds_one[i] = CHSV(_lastStartHue + (((float)i) * _increment), 255, 255);
    2ccc:	4a3e      	ldr	r2, [pc, #248]	; (2dc8 <_ZN7Rainbow5frameEv+0x118>)
    2cce:	7b20      	ldrb	r0, [r4, #12]
    2cd0:	6817      	ldr	r7, [r2, #0]
    2cd2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2cd6:	441f      	add	r7, r3
    2cd8:	f00a fe7c 	bl	d9d4 <__aeabi_i2f>
    2cdc:	4680      	mov	r8, r0
    2cde:	4628      	mov	r0, r5
    2ce0:	f00a fe78 	bl	d9d4 <__aeabi_i2f>
    2ce4:	6921      	ldr	r1, [r4, #16]
    2ce6:	f00a fec9 	bl	da7c <__aeabi_fmul>
    2cea:	4601      	mov	r1, r0
    2cec:	4640      	mov	r0, r8
    2cee:	f00a fdbd 	bl	d86c <__addsf3>
    2cf2:	f00b f889 	bl	de08 <__aeabi_f2uiz>
    unsigned long currentTime = millis();
    if (currentTime > (_lastChangeTime + _delay))
    {
        _lastChangeTime = currentTime;

        for (int i = 0; i < nLEDS_ONE; i++)
    2cf6:	3501      	adds	r5, #1
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2cf8:	23ff      	movs	r3, #255	; 0xff
            leds_one[i] = CHSV(_lastStartHue + (((float)i) * _increment), 255, 255);
    2cfa:	f88d 0000 	strb.w	r0, [sp]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2cfe:	4639      	mov	r1, r7
    2d00:	4668      	mov	r0, sp
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2d02:	f88d 3001 	strb.w	r3, [sp, #1]
    2d06:	f88d 3002 	strb.w	r3, [sp, #2]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2d0a:	f7fd fc14 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    unsigned long currentTime = millis();
    if (currentTime > (_lastChangeTime + _delay))
    {
        _lastChangeTime = currentTime;

        for (int i = 0; i < nLEDS_ONE; i++)
    2d0e:	2d64      	cmp	r5, #100	; 0x64
    2d10:	d1dc      	bne.n	2ccc <_ZN7Rainbow5frameEv+0x1c>
    2d12:	2563      	movs	r5, #99	; 0x63
            leds_one[i] = CHSV(_lastStartHue + (((float)i) * _increment), 255, 255);
        for (int i = 0; i < nLEDS_TWO; i++)
            leds_two[nLEDS_TWO - i - 1] = CHSV(_lastStartHue + (((float)(i + nLEDS_ONE)) * _increment), 255, 255);
    2d14:	4a2d      	ldr	r2, [pc, #180]	; (2dcc <_ZN7Rainbow5frameEv+0x11c>)
    2d16:	7b20      	ldrb	r0, [r4, #12]
    2d18:	6817      	ldr	r7, [r2, #0]
    2d1a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2d1e:	441f      	add	r7, r3
    2d20:	f00a fe58 	bl	d9d4 <__aeabi_i2f>
    2d24:	4680      	mov	r8, r0
    2d26:	f1c5 00c7 	rsb	r0, r5, #199	; 0xc7
    2d2a:	f00a fe53 	bl	d9d4 <__aeabi_i2f>
    2d2e:	6921      	ldr	r1, [r4, #16]
    2d30:	f00a fea4 	bl	da7c <__aeabi_fmul>
    2d34:	4601      	mov	r1, r0
    2d36:	4640      	mov	r0, r8
    2d38:	f00a fd98 	bl	d86c <__addsf3>
    2d3c:	f00b f864 	bl	de08 <__aeabi_f2uiz>
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2d40:	23ff      	movs	r3, #255	; 0xff
    2d42:	f88d 0000 	strb.w	r0, [sp]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2d46:	4639      	mov	r1, r7
    2d48:	4668      	mov	r0, sp
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2d4a:	f88d 3001 	strb.w	r3, [sp, #1]
    2d4e:	f88d 3002 	strb.w	r3, [sp, #2]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2d52:	f7fd fbf0 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    {
        _lastChangeTime = currentTime;

        for (int i = 0; i < nLEDS_ONE; i++)
            leds_one[i] = CHSV(_lastStartHue + (((float)i) * _increment), 255, 255);
        for (int i = 0; i < nLEDS_TWO; i++)
    2d56:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    2d5a:	d2db      	bcs.n	2d14 <_ZN7Rainbow5frameEv+0x64>
            leds_two[nLEDS_TWO - i - 1] = CHSV(_lastStartHue + (((float)(i + nLEDS_ONE)) * _increment), 255, 255);

        // <gerstle> let it roll over
        _lastStartHue++;
    2d5c:	7b23      	ldrb	r3, [r4, #12]
    2d5e:	3301      	adds	r3, #1
    2d60:	7323      	strb	r3, [r4, #12]
    }

    if (currentTime > (_lastTopChangeTime + _topDelay))
    2d62:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    2d66:	69a3      	ldr	r3, [r4, #24]
    2d68:	4413      	add	r3, r2
    2d6a:	429e      	cmp	r6, r3
    2d6c:	d927      	bls.n	2dbe <_ZN7Rainbow5frameEv+0x10e>
    {
        _lastTopChangeTime = currentTime;
    2d6e:	61a6      	str	r6, [r4, #24]

        for (int i = 0; i < nLEDS_THREE; i++)
    2d70:	2500      	movs	r5, #0
            leds_three[i] = CHSV(_lastTopStartHue + (((float)i) * _topIncrement), 255, 255);
    2d72:	4a17      	ldr	r2, [pc, #92]	; (2dd0 <_ZN7Rainbow5frameEv+0x120>)
    2d74:	7f20      	ldrb	r0, [r4, #28]
    2d76:	6816      	ldr	r6, [r2, #0]
    2d78:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2d7c:	441e      	add	r6, r3
    2d7e:	f00a fe29 	bl	d9d4 <__aeabi_i2f>
    2d82:	4607      	mov	r7, r0
    2d84:	4628      	mov	r0, r5
    2d86:	f00a fe25 	bl	d9d4 <__aeabi_i2f>
    2d8a:	6a21      	ldr	r1, [r4, #32]
    2d8c:	f00a fe76 	bl	da7c <__aeabi_fmul>
    2d90:	4601      	mov	r1, r0
    2d92:	4638      	mov	r0, r7
    2d94:	f00a fd6a 	bl	d86c <__addsf3>
    2d98:	f00b f836 	bl	de08 <__aeabi_f2uiz>

    if (currentTime > (_lastTopChangeTime + _topDelay))
    {
        _lastTopChangeTime = currentTime;

        for (int i = 0; i < nLEDS_THREE; i++)
    2d9c:	3501      	adds	r5, #1
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2d9e:	23ff      	movs	r3, #255	; 0xff
            leds_three[i] = CHSV(_lastTopStartHue + (((float)i) * _topIncrement), 255, 255);
    2da0:	f88d 0000 	strb.w	r0, [sp]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2da4:	4631      	mov	r1, r6
    2da6:	4668      	mov	r0, sp
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2da8:	f88d 3001 	strb.w	r3, [sp, #1]
    2dac:	f88d 3002 	strb.w	r3, [sp, #2]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2db0:	f7fd fbc1 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>

    if (currentTime > (_lastTopChangeTime + _topDelay))
    {
        _lastTopChangeTime = currentTime;

        for (int i = 0; i < nLEDS_THREE; i++)
    2db4:	2d32      	cmp	r5, #50	; 0x32
    2db6:	d1dc      	bne.n	2d72 <_ZN7Rainbow5frameEv+0xc2>
            leds_three[i] = CHSV(_lastTopStartHue + (((float)i) * _topIncrement), 255, 255);

        // <gerstle> let it roll over
        _lastTopStartHue++;
    2db8:	7f23      	ldrb	r3, [r4, #28]
    2dba:	3301      	adds	r3, #1
    2dbc:	7723      	strb	r3, [r4, #28]
    }
}
    2dbe:	b002      	add	sp, #8
    2dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dc4:	1fff91a8 	.word	0x1fff91a8
    2dc8:	1fff8410 	.word	0x1fff8410
    2dcc:	1fff840c 	.word	0x1fff840c
    2dd0:	1fff8408 	.word	0x1fff8408

00002dd4 <_ZN7RainbowC1Ev>:
 *      Author: cgerstle
 */

#include "Rainbow.h"

Rainbow::Rainbow() {
    2dd4:	b513      	push	{r0, r1, r4, lr}
    2dd6:	4604      	mov	r4, r0
    2dd8:	f7fe fe0e 	bl	19f8 <_ZN8BaseModeC1Ev>
    2ddc:	4b0d      	ldr	r3, [pc, #52]	; (2e14 <_ZN7RainbowC1Ev+0x40>)
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    2dde:	4a0e      	ldr	r2, [pc, #56]	; (2e18 <_ZN7RainbowC1Ev+0x44>)
    2de0:	6023      	str	r3, [r4, #0]
    _name = "rainbow";
    2de2:	4b0e      	ldr	r3, [pc, #56]	; (2e1c <_ZN7RainbowC1Ev+0x48>)
    2de4:	60a3      	str	r3, [r4, #8]
    2de6:	6813      	ldr	r3, [r2, #0]
    2de8:	9300      	str	r3, [sp, #0]
	return ret;
    2dea:	9b00      	ldr	r3, [sp, #0]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    2dec:	6812      	ldr	r2, [r2, #0]
    _lastChangeTime = millis();
    2dee:	6063      	str	r3, [r4, #4]
    2df0:	9201      	str	r2, [sp, #4]
    _lastStartHue = 0;
    2df2:	2300      	movs	r3, #0
    2df4:	7323      	strb	r3, [r4, #12]
    _increment = (float)255/(float) (nLEDS_ONE + nLEDS_TWO);
    2df6:	490a      	ldr	r1, [pc, #40]	; (2e20 <_ZN7RainbowC1Ev+0x4c>)
	return ret;
    2df8:	9a01      	ldr	r2, [sp, #4]
    _delay = 60;

    _lastTopChangeTime = millis();
    _lastTopStartHue = 0;
    2dfa:	7723      	strb	r3, [r4, #28]
    _topIncrement = (float)255/(float)nLEDS_THREE;
    2dfc:	4b09      	ldr	r3, [pc, #36]	; (2e24 <_ZN7RainbowC1Ev+0x50>)

Rainbow::Rainbow() {
    _name = "rainbow";
    _lastChangeTime = millis();
    _lastStartHue = 0;
    _increment = (float)255/(float) (nLEDS_ONE + nLEDS_TWO);
    2dfe:	6121      	str	r1, [r4, #16]
    _delay = 60;

    _lastTopChangeTime = millis();
    _lastTopStartHue = 0;
    _topIncrement = (float)255/(float)nLEDS_THREE;
    2e00:	6223      	str	r3, [r4, #32]
Rainbow::Rainbow() {
    _name = "rainbow";
    _lastChangeTime = millis();
    _lastStartHue = 0;
    _increment = (float)255/(float) (nLEDS_ONE + nLEDS_TWO);
    _delay = 60;
    2e02:	213c      	movs	r1, #60	; 0x3c

    _lastTopChangeTime = millis();
    _lastTopStartHue = 0;
    _topIncrement = (float)255/(float)nLEDS_THREE;
    _topDelay = 8;
    2e04:	2308      	movs	r3, #8
}
    2e06:	4620      	mov	r0, r4
Rainbow::Rainbow() {
    _name = "rainbow";
    _lastChangeTime = millis();
    _lastStartHue = 0;
    _increment = (float)255/(float) (nLEDS_ONE + nLEDS_TWO);
    _delay = 60;
    2e08:	7521      	strb	r1, [r4, #20]

    _lastTopChangeTime = millis();
    2e0a:	61a2      	str	r2, [r4, #24]
    _lastTopStartHue = 0;
    _topIncrement = (float)255/(float)nLEDS_THREE;
    _topDelay = 8;
    2e0c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
    2e10:	b002      	add	sp, #8
    2e12:	bd10      	pop	{r4, pc}
    2e14:	00014288 	.word	0x00014288
    2e18:	1fff91a8 	.word	0x1fff91a8
    2e1c:	00014278 	.word	0x00014278
    2e20:	3fa33333 	.word	0x3fa33333
    2e24:	40a33333 	.word	0x40a33333

00002e28 <wait_for_cal>:
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    2e28:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(__MK20DX128__)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#elif defined(__MK20DX256__)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    2e2a:	4b30      	ldr	r3, [pc, #192]	; (2eec <wait_for_cal+0xc4>)
    2e2c:	681b      	ldr	r3, [r3, #0]
    2e2e:	061b      	lsls	r3, r3, #24
    2e30:	d4fb      	bmi.n	2e2a <wait_for_cal+0x2>
    2e32:	4b2f      	ldr	r3, [pc, #188]	; (2ef0 <wait_for_cal+0xc8>)
    2e34:	681b      	ldr	r3, [r3, #0]
    2e36:	f013 0280 	ands.w	r2, r3, #128	; 0x80
    2e3a:	d1f6      	bne.n	2e2a <wait_for_cal+0x2>
		// wait
	}
#endif
	__disable_irq();
    2e3c:	b672      	cpsid	i
	if (calibrating) {
    2e3e:	4b2d      	ldr	r3, [pc, #180]	; (2ef4 <wait_for_cal+0xcc>)
    2e40:	7819      	ldrb	r1, [r3, #0]
    2e42:	2900      	cmp	r1, #0
    2e44:	d050      	beq.n	2ee8 <wait_for_cal+0xc0>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2e46:	492c      	ldr	r1, [pc, #176]	; (2ef8 <wait_for_cal+0xd0>)
    2e48:	6808      	ldr	r0, [r1, #0]
    2e4a:	684f      	ldr	r7, [r1, #4]
    2e4c:	688e      	ldr	r6, [r1, #8]
    2e4e:	68cd      	ldr	r5, [r1, #12]
    2e50:	690c      	ldr	r4, [r1, #16]
    2e52:	4438      	add	r0, r7
    2e54:	3114      	adds	r1, #20
    2e56:	4430      	add	r0, r6
    2e58:	6809      	ldr	r1, [r1, #0]
    2e5a:	4428      	add	r0, r5
    2e5c:	4420      	add	r0, r4
    2e5e:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    2e60:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC0_PG = sum;
    2e64:	4925      	ldr	r1, [pc, #148]	; (2efc <wait_for_cal+0xd4>)
    2e66:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    2e6a:	6008      	str	r0, [r1, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2e6c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    2e6e:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    2e70:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    2e72:	6b8d      	ldr	r5, [r1, #56]	; 0x38
    2e74:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2e76:	4438      	add	r0, r7
    2e78:	3140      	adds	r1, #64	; 0x40
    2e7a:	4430      	add	r0, r6
    2e7c:	6809      	ldr	r1, [r1, #0]
    2e7e:	4428      	add	r0, r5
    2e80:	4420      	add	r0, r4
    2e82:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    2e84:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC0_MG = sum;
    2e88:	491d      	ldr	r1, [pc, #116]	; (2f00 <wait_for_cal+0xd8>)
    2e8a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    2e8e:	6008      	str	r0, [r1, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#if defined(__MK20DX256__)
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2e90:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
    2e94:	3114      	adds	r1, #20
    2e96:	f851 0c14 	ldr.w	r0, [r1, #-20]
    2e9a:	f851 7c10 	ldr.w	r7, [r1, #-16]
    2e9e:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    2ea2:	f851 5c08 	ldr.w	r5, [r1, #-8]
    2ea6:	f851 4c04 	ldr.w	r4, [r1, #-4]
    2eaa:	6809      	ldr	r1, [r1, #0]
    2eac:	4438      	add	r0, r7
    2eae:	4430      	add	r0, r6
    2eb0:	4428      	add	r0, r5
    2eb2:	4420      	add	r0, r4
    2eb4:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    2eb6:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC1_PG = sum;
    2eba:	4912      	ldr	r1, [pc, #72]	; (2f04 <wait_for_cal+0xdc>)
    2ebc:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    2ec0:	6008      	str	r0, [r1, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2ec2:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    2ec4:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    2ec6:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    2ec8:	6b8d      	ldr	r5, [r1, #56]	; 0x38
    2eca:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2ecc:	4438      	add	r0, r7
    2ece:	3140      	adds	r1, #64	; 0x40
    2ed0:	4430      	add	r0, r6
    2ed2:	6809      	ldr	r1, [r1, #0]
    2ed4:	4428      	add	r0, r5
    2ed6:	4420      	add	r0, r4
    2ed8:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    2eda:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC1_MG = sum;
    2ede:	490a      	ldr	r1, [pc, #40]	; (2f08 <wait_for_cal+0xe0>)
    2ee0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    2ee4:	6008      	str	r0, [r1, #0]
#endif
		calibrating = 0;
    2ee6:	701a      	strb	r2, [r3, #0]
	}
	__enable_irq();
    2ee8:	b662      	cpsie	i
    2eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eec:	4003b024 	.word	0x4003b024
    2ef0:	400bb024 	.word	0x400bb024
    2ef4:	1fff90c2 	.word	0x1fff90c2
    2ef8:	4003b038 	.word	0x4003b038
    2efc:	4003b02c 	.word	0x4003b02c
    2f00:	4003b030 	.word	0x4003b030
    2f04:	400bb02c 	.word	0x400bb02c
    2f08:	400bb030 	.word	0x400bb030

00002f0c <analog_init>:
#else
#error "F_BUS must be 60, 56, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2f0c:	b510      	push	{r4, lr}
	uint32_t num;

	VREF_TRM = 0x60;
    2f0e:	4b20      	ldr	r3, [pc, #128]	; (2f90 <analog_init+0x84>)
    2f10:	4820      	ldr	r0, [pc, #128]	; (2f94 <analog_init+0x88>)
    2f12:	4921      	ldr	r1, [pc, #132]	; (2f98 <analog_init+0x8c>)
    2f14:	2260      	movs	r2, #96	; 0x60
    2f16:	701a      	strb	r2, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2f18:	22e1      	movs	r2, #225	; 0xe1
    2f1a:	705a      	strb	r2, [r3, #1]

	if (analog_config_bits == 8) {
    2f1c:	4b1f      	ldr	r3, [pc, #124]	; (2f9c <analog_init+0x90>)
    2f1e:	4a20      	ldr	r2, [pc, #128]	; (2fa0 <analog_init+0x94>)
    2f20:	781c      	ldrb	r4, [r3, #0]
    2f22:	4b20      	ldr	r3, [pc, #128]	; (2fa4 <analog_init+0x98>)
    2f24:	2c08      	cmp	r4, #8
    2f26:	d101      	bne.n	2f2c <analog_init+0x20>
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2f28:	2401      	movs	r4, #1
    2f2a:	e002      	b.n	2f32 <analog_init+0x26>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2f2c:	2c0a      	cmp	r4, #10
    2f2e:	d103      	bne.n	2f38 <analog_init+0x2c>
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2f30:	2419      	movs	r4, #25
    2f32:	6004      	str	r4, [r0, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2f34:	2013      	movs	r0, #19
    2f36:	e005      	b.n	2f44 <analog_init+0x38>
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2f38:	2c0c      	cmp	r4, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2f3a:	bf0c      	ite	eq
    2f3c:	2415      	moveq	r4, #21
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2f3e:	243d      	movne	r4, #61	; 0x3d
    2f40:	6004      	str	r4, [r0, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2f42:	2012      	movs	r0, #18
    2f44:	6008      	str	r0, [r1, #0]
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2f46:	6014      	str	r4, [r2, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2f48:	6018      	str	r0, [r3, #0]
		#endif
	}

	if (analog_reference_internal) {
    2f4a:	4b17      	ldr	r3, [pc, #92]	; (2fa8 <analog_init+0x9c>)
    2f4c:	4917      	ldr	r1, [pc, #92]	; (2fac <analog_init+0xa0>)
    2f4e:	781b      	ldrb	r3, [r3, #0]
    2f50:	4a17      	ldr	r2, [pc, #92]	; (2fb0 <analog_init+0xa4>)
    2f52:	b103      	cbz	r3, 2f56 <analog_init+0x4a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2f54:	2301      	movs	r3, #1
		#if defined(__MK20DX256__)
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		#endif
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2f56:	600b      	str	r3, [r1, #0]
		#if defined(__MK20DX256__)
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2f58:	6013      	str	r3, [r2, #0]
		#endif
	}

	num = analog_num_average;
    2f5a:	4b16      	ldr	r3, [pc, #88]	; (2fb4 <analog_init+0xa8>)
    2f5c:	4a16      	ldr	r2, [pc, #88]	; (2fb8 <analog_init+0xac>)
    2f5e:	7819      	ldrb	r1, [r3, #0]
    2f60:	4b16      	ldr	r3, [pc, #88]	; (2fbc <analog_init+0xb0>)
	if (num <= 1) {
    2f62:	2901      	cmp	r1, #1
    2f64:	d801      	bhi.n	2f6a <analog_init+0x5e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2f66:	2180      	movs	r1, #128	; 0x80
    2f68:	e00b      	b.n	2f82 <analog_init+0x76>
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2f6a:	2904      	cmp	r1, #4
    2f6c:	d801      	bhi.n	2f72 <analog_init+0x66>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2f6e:	2184      	movs	r1, #132	; 0x84
    2f70:	e007      	b.n	2f82 <analog_init+0x76>
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2f72:	2908      	cmp	r1, #8
    2f74:	d801      	bhi.n	2f7a <analog_init+0x6e>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2f76:	2185      	movs	r1, #133	; 0x85
    2f78:	e003      	b.n	2f82 <analog_init+0x76>
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2f7a:	2910      	cmp	r1, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2f7c:	bf94      	ite	ls
    2f7e:	2186      	movls	r1, #134	; 0x86
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2f80:	2187      	movhi	r1, #135	; 0x87
    2f82:	6011      	str	r1, [r2, #0]
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2f84:	6019      	str	r1, [r3, #0]
		#endif
	}
	calibrating = 1;
    2f86:	4b0e      	ldr	r3, [pc, #56]	; (2fc0 <analog_init+0xb4>)
    2f88:	2201      	movs	r2, #1
    2f8a:	701a      	strb	r2, [r3, #0]
    2f8c:	bd10      	pop	{r4, pc}
    2f8e:	bf00      	nop
    2f90:	40074000 	.word	0x40074000
    2f94:	4003b008 	.word	0x4003b008
    2f98:	4003b00c 	.word	0x4003b00c
    2f9c:	1fff8414 	.word	0x1fff8414
    2fa0:	400bb008 	.word	0x400bb008
    2fa4:	400bb00c 	.word	0x400bb00c
    2fa8:	1fff90c5 	.word	0x1fff90c5
    2fac:	4003b020 	.word	0x4003b020
    2fb0:	400bb020 	.word	0x400bb020
    2fb4:	1fff8415 	.word	0x1fff8415
    2fb8:	4003b024 	.word	0x4003b024
    2fbc:	400bb024 	.word	0x400bb024
    2fc0:	1fff90c2 	.word	0x1fff90c2

00002fc4 <analogReference>:
#define INTERNAL1V2     2
#define INTERNAL1V1     2
#define EXTERNAL        0

void analogReference(uint8_t type)
{
    2fc4:	4b0e      	ldr	r3, [pc, #56]	; (3000 <analogReference+0x3c>)
	if (type) {
		// internal reference requested
		if (!analog_reference_internal) {
    2fc6:	781a      	ldrb	r2, [r3, #0]
#define INTERNAL1V1     2
#define EXTERNAL        0

void analogReference(uint8_t type)
{
	if (type) {
    2fc8:	b160      	cbz	r0, 2fe4 <analogReference+0x20>
		// internal reference requested
		if (!analog_reference_internal) {
    2fca:	b9ba      	cbnz	r2, 2ffc <analogReference+0x38>
			analog_reference_internal = 1;
    2fcc:	2101      	movs	r1, #1
    2fce:	7019      	strb	r1, [r3, #0]
			if (calibrating) {
    2fd0:	4b0c      	ldr	r3, [pc, #48]	; (3004 <analogReference+0x40>)
    2fd2:	781b      	ldrb	r3, [r3, #0]
    2fd4:	b123      	cbz	r3, 2fe0 <analogReference+0x1c>
				ADC0_SC3 = 0; // cancel cal
    2fd6:	4b0c      	ldr	r3, [pc, #48]	; (3008 <analogReference+0x44>)
    2fd8:	601a      	str	r2, [r3, #0]
#if defined(__MK20DX256__)
				ADC1_SC3 = 0; // cancel cal
    2fda:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    2fde:	601a      	str	r2, [r3, #0]
#endif
			}
			analog_init();
    2fe0:	f7ff bf94 	b.w	2f0c <analog_init>
		}
	} else {
		// vcc or external reference requested
		if (analog_reference_internal) {
    2fe4:	b152      	cbz	r2, 2ffc <analogReference+0x38>
			analog_reference_internal = 0;
    2fe6:	7018      	strb	r0, [r3, #0]
			if (calibrating) {
    2fe8:	4b06      	ldr	r3, [pc, #24]	; (3004 <analogReference+0x40>)
    2fea:	781b      	ldrb	r3, [r3, #0]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d0f7      	beq.n	2fe0 <analogReference+0x1c>
				ADC0_SC3 = 0; // cancel cal
    2ff0:	4b05      	ldr	r3, [pc, #20]	; (3008 <analogReference+0x44>)
    2ff2:	6018      	str	r0, [r3, #0]
#if defined(__MK20DX256__)
				ADC1_SC3 = 0; // cancel cal
    2ff4:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    2ff8:	6018      	str	r0, [r3, #0]
    2ffa:	e7f1      	b.n	2fe0 <analogReference+0x1c>
    2ffc:	4770      	bx	lr
    2ffe:	bf00      	nop
    3000:	1fff90c5 	.word	0x1fff90c5
    3004:	1fff90c2 	.word	0x1fff90c2
    3008:	4003b024 	.word	0x4003b024

0000300c <analogReadAveraging>:
		analog_init();
	}
}

void analogReadAveraging(unsigned int num)
{
    300c:	b510      	push	{r4, lr}

	if (calibrating) wait_for_cal();
    300e:	4b11      	ldr	r3, [pc, #68]	; (3054 <analogReadAveraging+0x48>)
    3010:	781b      	ldrb	r3, [r3, #0]
		analog_init();
	}
}

void analogReadAveraging(unsigned int num)
{
    3012:	4604      	mov	r4, r0

	if (calibrating) wait_for_cal();
    3014:	b10b      	cbz	r3, 301a <analogReadAveraging+0xe>
    3016:	f7ff ff07 	bl	2e28 <wait_for_cal>
	if (num <= 1) {
    301a:	2c01      	cmp	r4, #1
    301c:	4a0e      	ldr	r2, [pc, #56]	; (3058 <analogReadAveraging+0x4c>)
    301e:	d801      	bhi.n	3024 <analogReadAveraging+0x18>
		num = 0;
		ADC0_SC3 = 0;
    3020:	2300      	movs	r3, #0
    3022:	e002      	b.n	302a <analogReadAveraging+0x1e>
	} else if (num <= 4) {
    3024:	2c04      	cmp	r4, #4
    3026:	d802      	bhi.n	302e <analogReadAveraging+0x22>
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    3028:	2304      	movs	r3, #4
    302a:	6013      	str	r3, [r2, #0]
    302c:	e00e      	b.n	304c <analogReadAveraging+0x40>
	} else if (num <= 8) {
    302e:	2c08      	cmp	r4, #8
    3030:	d803      	bhi.n	303a <analogReadAveraging+0x2e>
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    3032:	2305      	movs	r3, #5
    3034:	6013      	str	r3, [r2, #0]
		ADC0_SC3 = 0;
	} else if (num <= 4) {
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
	} else if (num <= 8) {
		num = 8;
    3036:	2308      	movs	r3, #8
    3038:	e008      	b.n	304c <analogReadAveraging+0x40>
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
	} else if (num <= 16) {
    303a:	2c10      	cmp	r4, #16
    303c:	d803      	bhi.n	3046 <analogReadAveraging+0x3a>
		num = 16;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    303e:	2306      	movs	r3, #6
    3040:	6013      	str	r3, [r2, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
	} else if (num <= 8) {
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
	} else if (num <= 16) {
		num = 16;
    3042:	2310      	movs	r3, #16
    3044:	e002      	b.n	304c <analogReadAveraging+0x40>
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
	} else {
		num = 32;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    3046:	2307      	movs	r3, #7
    3048:	6013      	str	r3, [r2, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
	} else if (num <= 16) {
		num = 16;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
	} else {
		num = 32;
    304a:	2320      	movs	r3, #32
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
	}
	analog_num_average = num;
    304c:	4a03      	ldr	r2, [pc, #12]	; (305c <analogReadAveraging+0x50>)
    304e:	7013      	strb	r3, [r2, #0]
    3050:	bd10      	pop	{r4, pc}
    3052:	bf00      	nop
    3054:	1fff90c2 	.word	0x1fff90c2
    3058:	4003b024 	.word	0x4003b024
    305c:	1fff8415 	.word	0x1fff8415

00003060 <analogRead>:
	uint8_t index, channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin <= 13) {
    3060:	280d      	cmp	r0, #13
#if defined(__MK20DX256__)
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    3062:	b538      	push	{r3, r4, r5, lr}
	uint8_t index, channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin <= 13) {
    3064:	d90f      	bls.n	3086 <analogRead+0x26>
		index = pin;      // 0-13 refer to A0-A13
	} else if (pin <= 23) {
    3066:	2817      	cmp	r0, #23
    3068:	d801      	bhi.n	306e <analogRead+0xe>
		index = pin - 14; // 14-23 are A0-A9
    306a:	380e      	subs	r0, #14
    306c:	e00a      	b.n	3084 <analogRead+0x24>
#if defined(__MK20DX256__)
	} else if (pin >= 26 && pin <= 31) {
    306e:	f1a0 031a 	sub.w	r3, r0, #26
    3072:	2b05      	cmp	r3, #5
    3074:	d801      	bhi.n	307a <analogRead+0x1a>
		index = pin - 9;  // 26-31 are A15-A20
    3076:	3809      	subs	r0, #9
    3078:	e004      	b.n	3084 <analogRead+0x24>
#endif
	} else if (pin >= 34 && pin <= 40) {
    307a:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    307e:	2b06      	cmp	r3, #6
    3080:	d847      	bhi.n	3112 <analogRead+0xb2>
		index = pin - 24;  // 34-37 are A10-A13, 38 is temp sensor,
    3082:	3818      	subs	r0, #24
    3084:	b2c0      	uxtb	r0, r0
	}

	//serial_phex(index);
	//serial_print(" ");

	channel = channel2sc1a[index];
    3086:	4b24      	ldr	r3, [pc, #144]	; (3118 <analogRead+0xb8>)
    3088:	5c1c      	ldrb	r4, [r3, r0]
	//serial_phex(channel);
	//serial_print(" ");

	//serial_print("analogRead");
	//return 0;
	if (calibrating) wait_for_cal();
    308a:	4b24      	ldr	r3, [pc, #144]	; (311c <analogRead+0xbc>)
    308c:	781b      	ldrb	r3, [r3, #0]
    308e:	b10b      	cbz	r3, 3094 <analogRead+0x34>
    3090:	f7ff feca 	bl	2e28 <wait_for_cal>
	//pin = 5; // PTD1/SE5b, pin 14, analog 0

#if defined(__MK20DX256__)
	if (channel & 0x80) goto beginADC1;
    3094:	0621      	lsls	r1, r4, #24
    3096:	d414      	bmi.n	30c2 <analogRead+0x62>
#endif

	__disable_irq();
    3098:	b672      	cpsid	i
startADC0:
	//serial_print("startADC0\n");
	ADC0_SC1A = channel;
    309a:	4b21      	ldr	r3, [pc, #132]	; (3120 <analogRead+0xc0>)
	analogReadBusyADC0 = 1;
    309c:	4d21      	ldr	r5, [pc, #132]	; (3124 <analogRead+0xc4>)
#endif

	__disable_irq();
startADC0:
	//serial_print("startADC0\n");
	ADC0_SC1A = channel;
    309e:	601c      	str	r4, [r3, #0]
	analogReadBusyADC0 = 1;
    30a0:	2301      	movs	r3, #1
    30a2:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    30a4:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    30a6:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    30a8:	4b1d      	ldr	r3, [pc, #116]	; (3120 <analogRead+0xc0>)
    30aa:	681b      	ldr	r3, [r3, #0]
    30ac:	061a      	lsls	r2, r3, #24
    30ae:	d501      	bpl.n	30b4 <analogRead+0x54>
			result = ADC0_RA;
    30b0:	4b1d      	ldr	r3, [pc, #116]	; (3128 <analogRead+0xc8>)
    30b2:	e01f      	b.n	30f4 <analogRead+0x94>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    30b4:	782b      	ldrb	r3, [r5, #0]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d0ef      	beq.n	309a <analogRead+0x3a>
		__enable_irq();
    30ba:	b662      	cpsie	i
		yield();
    30bc:	f002 f98d 	bl	53da <yield>
	}
    30c0:	e7f1      	b.n	30a6 <analogRead+0x46>

#if defined(__MK20DX256__)
beginADC1:
	__disable_irq();
    30c2:	b672      	cpsid	i
    30c4:	4b19      	ldr	r3, [pc, #100]	; (312c <analogRead+0xcc>)
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    30c6:	4d1a      	ldr	r5, [pc, #104]	; (3130 <analogRead+0xd0>)
	__disable_irq();
startADC1:
	//serial_print("startADC0\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    30c8:	681a      	ldr	r2, [r3, #0]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC0\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    30ca:	f014 0f40 	tst.w	r4, #64	; 0x40
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    30ce:	bf14      	ite	ne
    30d0:	f022 0210 	bicne.w	r2, r2, #16
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    30d4:	f042 0210 	orreq.w	r2, r2, #16
    30d8:	601a      	str	r2, [r3, #0]
	}
	ADC1_SC1A = channel & 0x3F;
    30da:	4b16      	ldr	r3, [pc, #88]	; (3134 <analogRead+0xd4>)
    30dc:	f004 023f 	and.w	r2, r4, #63	; 0x3f
    30e0:	601a      	str	r2, [r3, #0]
	analogReadBusyADC1 = 1;
    30e2:	2301      	movs	r3, #1
    30e4:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    30e6:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    30e8:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    30ea:	4b12      	ldr	r3, [pc, #72]	; (3134 <analogRead+0xd4>)
    30ec:	681b      	ldr	r3, [r3, #0]
    30ee:	061b      	lsls	r3, r3, #24
    30f0:	d508      	bpl.n	3104 <analogRead+0xa4>
			result = ADC1_RA;
    30f2:	4b11      	ldr	r3, [pc, #68]	; (3138 <analogRead+0xd8>)
    30f4:	6818      	ldr	r0, [r3, #0]
			analogReadBusyADC1 = 0;
    30f6:	2300      	movs	r3, #0
    30f8:	702b      	strb	r3, [r5, #0]
			__enable_irq();
    30fa:	b662      	cpsie	i
			result >>= analog_right_shift;
    30fc:	4b0f      	ldr	r3, [pc, #60]	; (313c <analogRead+0xdc>)
    30fe:	781b      	ldrb	r3, [r3, #0]
    3100:	4118      	asrs	r0, r3
			return result;
    3102:	bd38      	pop	{r3, r4, r5, pc}
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    3104:	782b      	ldrb	r3, [r5, #0]
    3106:	2b00      	cmp	r3, #0
    3108:	d0dc      	beq.n	30c4 <analogRead+0x64>
		__enable_irq();
    310a:	b662      	cpsie	i
		yield();
    310c:	f002 f965 	bl	53da <yield>
	}
    3110:	e7ea      	b.n	30e8 <analogRead+0x88>
#endif
	} else if (pin >= 34 && pin <= 40) {
		index = pin - 24;  // 34-37 are A10-A13, 38 is temp sensor,
			    // 39 is vref, 40 is unused (A14 on Teensy 3.1)
	} else {
		return 0;   // all others are invalid
    3112:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    3114:	bd38      	pop	{r3, r4, r5, pc}
    3116:	bf00      	nop
    3118:	00014298 	.word	0x00014298
    311c:	1fff90c2 	.word	0x1fff90c2
    3120:	4003b000 	.word	0x4003b000
    3124:	1fff90c4 	.word	0x1fff90c4
    3128:	4003b010 	.word	0x4003b010
    312c:	400bb00c 	.word	0x400bb00c
    3130:	1fff90c3 	.word	0x1fff90c3
    3134:	400bb000 	.word	0x400bb000
    3138:	400bb010 	.word	0x400bb010
    313c:	1fff90c1 	.word	0x1fff90c1

00003140 <software_isr>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    3140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    3142:	4b16      	ldr	r3, [pc, #88]	; (319c <software_isr+0x5c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    3144:	4d16      	ldr	r5, [pc, #88]	; (31a0 <software_isr+0x60>)

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    3146:	681a      	ldr	r2, [r3, #0]
    3148:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    314c:	601a      	str	r2, [r3, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    314e:	4b15      	ldr	r3, [pc, #84]	; (31a4 <software_isr+0x64>)
    3150:	681a      	ldr	r2, [r3, #0]
    3152:	f042 0201 	orr.w	r2, r2, #1
    3156:	601a      	str	r2, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    3158:	4b13      	ldr	r3, [pc, #76]	; (31a8 <software_isr+0x68>)
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    315a:	682e      	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    315c:	681c      	ldr	r4, [r3, #0]
    315e:	b18c      	cbz	r4, 3184 <software_isr+0x44>
		if (p->active) {
    3160:	7a23      	ldrb	r3, [r4, #8]
    3162:	b16b      	cbz	r3, 3180 <software_isr+0x40>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    3164:	6823      	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    3166:	682f      	ldr	r7, [r5, #0]
			p->update();
    3168:	681b      	ldr	r3, [r3, #0]
    316a:	4620      	mov	r0, r4
    316c:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    316e:	682a      	ldr	r2, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    3170:	88e1      	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    3172:	1bd2      	subs	r2, r2, r7
    3174:	0912      	lsrs	r2, r2, #4
			p->cpu_cycles = cycles;
    3176:	b293      	uxth	r3, r2
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    3178:	428a      	cmp	r2, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    317a:	80a3      	strh	r3, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    317c:	bf88      	it	hi
    317e:	80e3      	strhhi	r3, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    3180:	6964      	ldr	r4, [r4, #20]
    3182:	e7ec      	b.n	315e <software_isr+0x1e>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    3184:	6829      	ldr	r1, [r5, #0]
	AudioStream::cpu_cycles_total = totalcycles;
    3186:	4b09      	ldr	r3, [pc, #36]	; (31ac <software_isr+0x6c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    3188:	1b89      	subs	r1, r1, r6
    318a:	0909      	lsrs	r1, r1, #4
	AudioStream::cpu_cycles_total = totalcycles;
    318c:	b28a      	uxth	r2, r1
    318e:	801a      	strh	r2, [r3, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    3190:	4b07      	ldr	r3, [pc, #28]	; (31b0 <software_isr+0x70>)
    3192:	8818      	ldrh	r0, [r3, #0]
    3194:	4281      	cmp	r1, r0
		AudioStream::cpu_cycles_total_max = totalcycles;
    3196:	bf88      	it	hi
    3198:	801a      	strhhi	r2, [r3, #0]
    319a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    319c:	e000edfc 	.word	0xe000edfc
    31a0:	e0001004 	.word	0xe0001004
    31a4:	e0001000 	.word	0xe0001000
    31a8:	1fff90c8 	.word	0x1fff90c8
    31ac:	1fff90ce 	.word	0x1fff90ce
    31b0:	1fff90cc 	.word	0x1fff90cc

000031b4 <flexram_wait>:
	return (FTFL_FCNFG & FTFL_FCNFG_EEERDY) ? 1 : 0;
}

static void flexram_wait(void)
{
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    31b4:	4b02      	ldr	r3, [pc, #8]	; (31c0 <flexram_wait+0xc>)
    31b6:	781b      	ldrb	r3, [r3, #0]
    31b8:	07db      	lsls	r3, r3, #31
    31ba:	d5fb      	bpl.n	31b4 <flexram_wait>
		// TODO: timeout
	}
}
    31bc:	4770      	bx	lr
    31be:	bf00      	nop
    31c0:	40020001 	.word	0x40020001

000031c4 <eeprom_initialize>:
#elif (EEPROM_SIZE == 32)	// 2555000 writes/byte or 5110000 writes/word
  #define EEESIZE 0x39
#endif

void eeprom_initialize(void)
{
    31c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    31c6:	4b17      	ldr	r3, [pc, #92]	; (3224 <eeprom_initialize+0x60>)
    31c8:	466a      	mov	r2, sp
    31ca:	f103 0510 	add.w	r5, r3, #16
    31ce:	466e      	mov	r6, sp
    31d0:	6818      	ldr	r0, [r3, #0]
    31d2:	6859      	ldr	r1, [r3, #4]
    31d4:	4614      	mov	r4, r2
    31d6:	c403      	stmia	r4!, {r0, r1}
    31d8:	3308      	adds	r3, #8
    31da:	42ab      	cmp	r3, r5
    31dc:	4622      	mov	r2, r4
    31de:	d1f7      	bne.n	31d0 <eeprom_initialize+0xc>
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    31e0:	4b11      	ldr	r3, [pc, #68]	; (3228 <eeprom_initialize+0x64>)
    31e2:	781a      	ldrb	r2, [r3, #0]
    31e4:	f012 0f02 	tst.w	r2, #2
    31e8:	461d      	mov	r5, r3
    31ea:	d012      	beq.n	3212 <eeprom_initialize+0x4e>
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    31ec:	2280      	movs	r2, #128	; 0x80
    31ee:	719a      	strb	r2, [r3, #6]
		FTFL_FCCOB4 = EEESIZE; // EEPROM Size
    31f0:	2234      	movs	r2, #52	; 0x34
    31f2:	729a      	strb	r2, [r3, #10]
		FTFL_FCCOB5 = 0x03; // 0K for Dataflash, 32K for EEPROM backup
    31f4:	2203      	movs	r2, #3
    31f6:	725a      	strb	r2, [r3, #9]
		__disable_irq();
    31f8:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    31fa:	4c0c      	ldr	r4, [pc, #48]	; (322c <eeprom_initialize+0x68>)
    31fc:	f046 0601 	orr.w	r6, r6, #1
    3200:	4620      	mov	r0, r4
    3202:	47b0      	blx	r6
		__enable_irq();
    3204:	b662      	cpsie	i
		status = FTFL_FSTAT;
    3206:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    3208:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    320c:	d001      	beq.n	3212 <eeprom_initialize+0x4e>
			FTFL_FSTAT = (status & 0x70);
    320e:	7023      	strb	r3, [r4, #0]
    3210:	e006      	b.n	3220 <eeprom_initialize+0x5c>
#elif (EEPROM_SIZE == 32)	// 2555000 writes/byte or 5110000 writes/word
  #define EEESIZE 0x39
#endif

void eeprom_initialize(void)
{
    3212:	f644 6321 	movw	r3, #20001	; 0x4e21
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    3216:	782a      	ldrb	r2, [r5, #0]
    3218:	07d2      	lsls	r2, r2, #31
    321a:	d401      	bmi.n	3220 <eeprom_initialize+0x5c>
		if (++count > 20000) break;
    321c:	3b01      	subs	r3, #1
    321e:	d1fa      	bne.n	3216 <eeprom_initialize+0x52>
	}
}
    3220:	b004      	add	sp, #16
    3222:	bd70      	pop	{r4, r5, r6, pc}
    3224:	000142b0 	.word	0x000142b0
    3228:	40020001 	.word	0x40020001
    322c:	40020000 	.word	0x40020000

00003230 <eeprom_read_byte>:
#define FlexRAM ((uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    3230:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
}

#define FlexRAM ((uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
    3234:	b510      	push	{r4, lr}
    3236:	4604      	mov	r4, r0
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    3238:	d209      	bcs.n	324e <eeprom_read_byte+0x1e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    323a:	4b06      	ldr	r3, [pc, #24]	; (3254 <eeprom_read_byte+0x24>)
    323c:	781b      	ldrb	r3, [r3, #0]
    323e:	07db      	lsls	r3, r3, #31
    3240:	d401      	bmi.n	3246 <eeprom_read_byte+0x16>
    3242:	f7ff ffbf 	bl	31c4 <eeprom_initialize>
	return FlexRAM[offset];
    3246:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    324a:	7820      	ldrb	r0, [r4, #0]
    324c:	bd10      	pop	{r4, pc}
#define FlexRAM ((uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    324e:	2000      	movs	r0, #0
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
	return FlexRAM[offset];
}
    3250:	bd10      	pop	{r4, pc}
    3252:	bf00      	nop
    3254:	40020001 	.word	0x40020001

00003258 <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    3258:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
		// TODO: timeout
	}
}

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
    325c:	b538      	push	{r3, r4, r5, lr}
    325e:	4604      	mov	r4, r0
    3260:	460d      	mov	r5, r1
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    3262:	d20f      	bcs.n	3284 <eeprom_write_byte+0x2c>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    3264:	4b08      	ldr	r3, [pc, #32]	; (3288 <eeprom_write_byte+0x30>)
    3266:	781b      	ldrb	r3, [r3, #0]
    3268:	07db      	lsls	r3, r3, #31
    326a:	d401      	bmi.n	3270 <eeprom_write_byte+0x18>
    326c:	f7ff ffaa 	bl	31c4 <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    3270:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    3274:	7823      	ldrb	r3, [r4, #0]
    3276:	42ab      	cmp	r3, r5
    3278:	d004      	beq.n	3284 <eeprom_write_byte+0x2c>
		FlexRAM[offset] = value;
    327a:	7025      	strb	r5, [r4, #0]
		flexram_wait();
	}
}
    327c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	if (offset >= EEPROM_SIZE) return;
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
	if (FlexRAM[offset] != value) {
		FlexRAM[offset] = value;
		flexram_wait();
    3280:	f7ff bf98 	b.w	31b4 <flexram_wait>
    3284:	bd38      	pop	{r3, r4, r5, pc}
    3286:	bf00      	nop
    3288:	40020001 	.word	0x40020001

0000328c <_ZN14HardwareSerial5writeEm>:
	virtual int peek(void)          { return serial_peek(); }
	virtual int read(void)          { return serial_getchar(); }
	virtual void flush(void)        { serial_flush(); }
	virtual void clear(void)	{ serial_clear(); }
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    328c:	b508      	push	{r3, lr}
    328e:	6803      	ldr	r3, [r0, #0]
    3290:	b2c9      	uxtb	r1, r1
    3292:	681b      	ldr	r3, [r3, #0]
    3294:	4798      	blx	r3
    3296:	bd08      	pop	{r3, pc}

00003298 <_ZN14HardwareSerial5writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    3298:	b508      	push	{r3, lr}
    329a:	6803      	ldr	r3, [r0, #0]
    329c:	b2c9      	uxtb	r1, r1
    329e:	681b      	ldr	r3, [r3, #0]
    32a0:	4798      	blx	r3
    32a2:	bd08      	pop	{r3, pc}

000032a4 <_ZN14HardwareSerial5writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    32a4:	b508      	push	{r3, lr}
    32a6:	6803      	ldr	r3, [r0, #0]
    32a8:	b2c9      	uxtb	r1, r1
    32aa:	681b      	ldr	r3, [r3, #0]
    32ac:	4798      	blx	r3
    32ae:	bd08      	pop	{r3, pc}

000032b0 <_ZN14HardwareSerial5writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    32b0:	b508      	push	{r3, lr}
    32b2:	6803      	ldr	r3, [r0, #0]
    32b4:	b2c9      	uxtb	r1, r1
    32b6:	681b      	ldr	r3, [r3, #0]
    32b8:	4798      	blx	r3
    32ba:	bd08      	pop	{r3, pc}

000032bc <_ZN14HardwareSerial5beginEm>:
#ifdef __cplusplus
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
    32bc:	4803      	ldr	r0, [pc, #12]	; (32cc <_ZN14HardwareSerial5beginEm+0x10>)
    32be:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    32c2:	fbb0 f0f1 	udiv	r0, r0, r1
    32c6:	f000 bce1 	b.w	3c8c <serial_begin>
    32ca:	bf00      	nop
    32cc:	08954400 	.word	0x08954400

000032d0 <_ZN14HardwareSerial5beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    32d0:	b510      	push	{r4, lr}
					  serial_begin(BAUD2DIV(baud));
    32d2:	4806      	ldr	r0, [pc, #24]	; (32ec <_ZN14HardwareSerial5beginEmm+0x1c>)
    32d4:	eb00 0051 	add.w	r0, r0, r1, lsr #1
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    32d8:	4614      	mov	r4, r2
					  serial_begin(BAUD2DIV(baud));
    32da:	fbb0 f0f1 	udiv	r0, r0, r1
    32de:	f000 fcd5 	bl	3c8c <serial_begin>
					  serial_format(format); }
    32e2:	4620      	mov	r0, r4
    32e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    32e8:	f000 bd1e 	b.w	3d28 <serial_format>
    32ec:	08954400 	.word	0x08954400

000032f0 <_ZN14HardwareSerial3endEv>:
	virtual void end(void)		{ serial_end(); }
    32f0:	f000 bd48 	b.w	3d84 <serial_end>

000032f4 <_ZN14HardwareSerial17transmitterEnableEh>:
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
    32f4:	4608      	mov	r0, r1
    32f6:	f000 bd71 	b.w	3ddc <serial_set_transmit_pin>

000032fa <_ZN14HardwareSerial9availableEv>:
	virtual int available(void)     { return serial_available(); }
    32fa:	f000 be45 	b.w	3f88 <serial_available>

000032fe <_ZN14HardwareSerial4peekEv>:
	virtual int peek(void)          { return serial_peek(); }
    32fe:	f000 be6d 	b.w	3fdc <serial_peek>

00003302 <_ZN14HardwareSerial4readEv>:
	virtual int read(void)          { return serial_getchar(); }
    3302:	f000 be51 	b.w	3fa8 <serial_getchar>

00003306 <_ZN14HardwareSerial5flushEv>:
	virtual void flush(void)        { serial_flush(); }
    3306:	f000 be35 	b.w	3f74 <serial_flush>

0000330a <_ZN14HardwareSerial5clearEv>:
	virtual void clear(void)	{ serial_clear(); }
    330a:	f000 be7f 	b.w	400c <serial_clear>

0000330e <_ZN14HardwareSerial5writeEh>:
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
    330e:	b508      	push	{r3, lr}
    3310:	4608      	mov	r0, r1
    3312:	f000 fd7f 	bl	3e14 <serial_putchar>
    3316:	2001      	movs	r0, #1
    3318:	bd08      	pop	{r3, pc}

0000331a <_ZN14HardwareSerial9write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
    331a:	b508      	push	{r3, lr}
    331c:	4608      	mov	r0, r1
    331e:	f000 fd79 	bl	3e14 <serial_putchar>
    3322:	2001      	movs	r0, #1
    3324:	bd08      	pop	{r3, pc}

00003326 <_ZN14HardwareSerial5writeEPKhj>:
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    3326:	b510      	push	{r4, lr}
					{ serial_write(buffer, size); return size; }
    3328:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    332a:	4614      	mov	r4, r2
					{ serial_write(buffer, size); return size; }
    332c:	4611      	mov	r1, r2
    332e:	f000 fdbf 	bl	3eb0 <serial_write>
    3332:	4620      	mov	r0, r4
    3334:	bd10      	pop	{r4, pc}

00003336 <_ZN14HardwareSerial5writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    3336:	b538      	push	{r3, r4, r5, lr}
    3338:	4608      	mov	r0, r1
    333a:	460d      	mov	r5, r1
    333c:	f000 f9f6 	bl	372c <strlen>
    3340:	4604      	mov	r4, r0
					  serial_write((const uint8_t *)str, len);
    3342:	4621      	mov	r1, r4
    3344:	4628      	mov	r0, r5
    3346:	f000 fdb3 	bl	3eb0 <serial_write>
					  return len; }
    334a:	4620      	mov	r0, r4
    334c:	bd38      	pop	{r3, r4, r5, pc}
    334e:	ffff 4b04 	vtbl.8	d20, {d15-d18}, d4

00003350 <_GLOBAL__sub_I_Serial1>:
class __FlashStringHelper;

class Print
{
  public:
	Print() : write_error(0) {}
    3350:	4b04      	ldr	r3, [pc, #16]	; (3364 <_GLOBAL__sub_I_Serial1+0x14>)
    3352:	2200      	movs	r2, #0
    3354:	711a      	strb	r2, [r3, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    3356:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    335a:	731a      	strb	r2, [r3, #12]

// C++ interface
//
#ifdef __cplusplus
#include "Stream.h"
class HardwareSerial : public Stream
    335c:	4a02      	ldr	r2, [pc, #8]	; (3368 <_GLOBAL__sub_I_Serial1+0x18>)
    335e:	6099      	str	r1, [r3, #8]
    3360:	601a      	str	r2, [r3, #0]
    3362:	4770      	bx	lr
    3364:	1fff90d0 	.word	0x1fff90d0
    3368:	000142c8 	.word	0x000142c8

0000336c <_ZN15HardwareSerial25writeEm>:
	virtual int peek(void)          { return serial2_peek(); }
	virtual int read(void)          { return serial2_getchar(); }
	virtual void flush(void)        { serial2_flush(); }
	virtual void clear(void)	{ serial2_clear(); }
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    336c:	b508      	push	{r3, lr}
    336e:	6803      	ldr	r3, [r0, #0]
    3370:	b2c9      	uxtb	r1, r1
    3372:	681b      	ldr	r3, [r3, #0]
    3374:	4798      	blx	r3
    3376:	bd08      	pop	{r3, pc}

00003378 <_ZN15HardwareSerial25writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    3378:	b508      	push	{r3, lr}
    337a:	6803      	ldr	r3, [r0, #0]
    337c:	b2c9      	uxtb	r1, r1
    337e:	681b      	ldr	r3, [r3, #0]
    3380:	4798      	blx	r3
    3382:	bd08      	pop	{r3, pc}

00003384 <_ZN15HardwareSerial25writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    3384:	b508      	push	{r3, lr}
    3386:	6803      	ldr	r3, [r0, #0]
    3388:	b2c9      	uxtb	r1, r1
    338a:	681b      	ldr	r3, [r3, #0]
    338c:	4798      	blx	r3
    338e:	bd08      	pop	{r3, pc}

00003390 <_ZN15HardwareSerial25writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    3390:	b508      	push	{r3, lr}
    3392:	6803      	ldr	r3, [r0, #0]
    3394:	b2c9      	uxtb	r1, r1
    3396:	681b      	ldr	r3, [r3, #0]
    3398:	4798      	blx	r3
    339a:	bd08      	pop	{r3, pc}

0000339c <_ZN15HardwareSerial25beginEm>:
extern HardwareSerial Serial1;

class HardwareSerial2 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial2_begin(BAUD2DIV(baud)); }
    339c:	4803      	ldr	r0, [pc, #12]	; (33ac <_ZN15HardwareSerial25beginEm+0x10>)
    339e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    33a2:	fbb0 f0f1 	udiv	r0, r0, r1
    33a6:	f000 becd 	b.w	4144 <serial2_begin>
    33aa:	bf00      	nop
    33ac:	08954400 	.word	0x08954400

000033b0 <_ZN15HardwareSerial25beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    33b0:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV(baud));
    33b2:	4806      	ldr	r0, [pc, #24]	; (33cc <_ZN15HardwareSerial25beginEmm+0x1c>)
    33b4:	eb00 0051 	add.w	r0, r0, r1, lsr #1

class HardwareSerial2 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial2_begin(BAUD2DIV(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    33b8:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV(baud));
    33ba:	fbb0 f0f1 	udiv	r0, r0, r1
    33be:	f000 fec1 	bl	4144 <serial2_begin>
					  serial2_format(format); }
    33c2:	4620      	mov	r0, r4
    33c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33c8:	f000 bf00 	b.w	41cc <serial2_format>
    33cc:	08954400 	.word	0x08954400

000033d0 <_ZN15HardwareSerial23endEv>:
	virtual void end(void)		{ serial2_end(); }
    33d0:	f000 bf2a 	b.w	4228 <serial2_end>

000033d4 <_ZN15HardwareSerial29availableEv>:
	virtual int available(void)     { return serial2_available(); }
    33d4:	f000 bfb2 	b.w	433c <serial2_available>

000033d8 <_ZN15HardwareSerial24peekEv>:
	virtual int peek(void)          { return serial2_peek(); }
    33d8:	f000 bfda 	b.w	4390 <serial2_peek>

000033dc <_ZN15HardwareSerial24readEv>:
	virtual int read(void)          { return serial2_getchar(); }
    33dc:	f000 bfbe 	b.w	435c <serial2_getchar>

000033e0 <_ZN15HardwareSerial25flushEv>:
	virtual void flush(void)        { serial2_flush(); }
    33e0:	f000 bfa2 	b.w	4328 <serial2_flush>

000033e4 <_ZN15HardwareSerial25clearEv>:
	virtual void clear(void)	{ serial2_clear(); }
    33e4:	f000 bfec 	b.w	43c0 <serial2_clear>

000033e8 <_ZN15HardwareSerial25writeEh>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    33e8:	b508      	push	{r3, lr}
    33ea:	4608      	mov	r0, r1
    33ec:	f000 ff48 	bl	4280 <serial2_putchar>
    33f0:	2001      	movs	r0, #1
    33f2:	bd08      	pop	{r3, pc}

000033f4 <_ZN15HardwareSerial29write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    33f4:	b508      	push	{r3, lr}
    33f6:	4608      	mov	r0, r1
    33f8:	f000 ff42 	bl	4280 <serial2_putchar>
    33fc:	2001      	movs	r0, #1
    33fe:	bd08      	pop	{r3, pc}

00003400 <_ZN15HardwareSerial25writeEPKhj>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    3400:	b510      	push	{r4, lr}
					{ serial2_write(buffer, size); return size; }
    3402:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    3404:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    3406:	4611      	mov	r1, r2
    3408:	f000 ff82 	bl	4310 <serial2_write>
    340c:	4620      	mov	r0, r4
    340e:	bd10      	pop	{r4, pc}

00003410 <_ZN15HardwareSerial25writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    3410:	b538      	push	{r3, r4, r5, lr}
    3412:	4608      	mov	r0, r1
    3414:	460d      	mov	r5, r1
    3416:	f000 f989 	bl	372c <strlen>
    341a:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    341c:	4621      	mov	r1, r4
    341e:	4628      	mov	r0, r5
    3420:	f000 ff76 	bl	4310 <serial2_write>
					  return len; }
    3424:	4620      	mov	r0, r4
    3426:	bd38      	pop	{r3, r4, r5, pc}

00003428 <_GLOBAL__sub_I_Serial2>:
    3428:	4b04      	ldr	r3, [pc, #16]	; (343c <_GLOBAL__sub_I_Serial2+0x14>)
    342a:	2200      	movs	r2, #0
    342c:	711a      	strb	r2, [r3, #4]
    342e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3432:	731a      	strb	r2, [r3, #12]
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
};
extern HardwareSerial Serial1;

class HardwareSerial2 : public HardwareSerial
    3434:	4a02      	ldr	r2, [pc, #8]	; (3440 <_GLOBAL__sub_I_Serial2+0x18>)
    3436:	6099      	str	r1, [r3, #8]
    3438:	601a      	str	r2, [r3, #0]
    343a:	4770      	bx	lr
    343c:	1fff90e0 	.word	0x1fff90e0
    3440:	00014318 	.word	0x00014318

00003444 <_ZN15HardwareSerial35writeEm>:
	virtual int peek(void)          { return serial3_peek(); }
	virtual int read(void)          { return serial3_getchar(); }
	virtual void flush(void)        { serial3_flush(); }
	virtual void clear(void)	{ serial3_clear(); }
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    3444:	b508      	push	{r3, lr}
    3446:	6803      	ldr	r3, [r0, #0]
    3448:	b2c9      	uxtb	r1, r1
    344a:	681b      	ldr	r3, [r3, #0]
    344c:	4798      	blx	r3
    344e:	bd08      	pop	{r3, pc}

00003450 <_ZN15HardwareSerial35writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    3450:	b508      	push	{r3, lr}
    3452:	6803      	ldr	r3, [r0, #0]
    3454:	b2c9      	uxtb	r1, r1
    3456:	681b      	ldr	r3, [r3, #0]
    3458:	4798      	blx	r3
    345a:	bd08      	pop	{r3, pc}

0000345c <_ZN15HardwareSerial35writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    345c:	b508      	push	{r3, lr}
    345e:	6803      	ldr	r3, [r0, #0]
    3460:	b2c9      	uxtb	r1, r1
    3462:	681b      	ldr	r3, [r3, #0]
    3464:	4798      	blx	r3
    3466:	bd08      	pop	{r3, pc}

00003468 <_ZN15HardwareSerial35writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    3468:	b508      	push	{r3, lr}
    346a:	6803      	ldr	r3, [r0, #0]
    346c:	b2c9      	uxtb	r1, r1
    346e:	681b      	ldr	r3, [r3, #0]
    3470:	4798      	blx	r3
    3472:	bd08      	pop	{r3, pc}

00003474 <_ZN15HardwareSerial35beginEm>:
extern HardwareSerial2 Serial2;

class HardwareSerial3 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
    3474:	4803      	ldr	r0, [pc, #12]	; (3484 <_ZN15HardwareSerial35beginEm+0x10>)
    3476:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    347a:	fbb0 f0f1 	udiv	r0, r0, r1
    347e:	f000 bffb 	b.w	4478 <serial3_begin>
    3482:	bf00      	nop
    3484:	044aa200 	.word	0x044aa200

00003488 <_ZN15HardwareSerial35beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    3488:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    348a:	4806      	ldr	r0, [pc, #24]	; (34a4 <_ZN15HardwareSerial35beginEmm+0x1c>)
    348c:	eb00 0051 	add.w	r0, r0, r1, lsr #1

class HardwareSerial3 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    3490:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    3492:	fbb0 f0f1 	udiv	r0, r0, r1
    3496:	f000 ffef 	bl	4478 <serial3_begin>
					  serial3_format(format); }
    349a:	4620      	mov	r0, r4
    349c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34a0:	f001 b82e 	b.w	4500 <serial3_format>
    34a4:	044aa200 	.word	0x044aa200

000034a8 <_ZN15HardwareSerial33endEv>:
	virtual void end(void)          { serial3_end(); }
    34a8:	f001 b858 	b.w	455c <serial3_end>

000034ac <_ZN15HardwareSerial39availableEv>:
	virtual int available(void)     { return serial3_available(); }
    34ac:	f001 b8e0 	b.w	4670 <serial3_available>

000034b0 <_ZN15HardwareSerial34peekEv>:
	virtual int peek(void)          { return serial3_peek(); }
    34b0:	f001 b908 	b.w	46c4 <serial3_peek>

000034b4 <_ZN15HardwareSerial34readEv>:
	virtual int read(void)          { return serial3_getchar(); }
    34b4:	f001 b8ec 	b.w	4690 <serial3_getchar>

000034b8 <_ZN15HardwareSerial35flushEv>:
	virtual void flush(void)        { serial3_flush(); }
    34b8:	f001 b8d0 	b.w	465c <serial3_flush>

000034bc <_ZN15HardwareSerial35clearEv>:
	virtual void clear(void)	{ serial3_clear(); }
    34bc:	f001 b91a 	b.w	46f4 <serial3_clear>

000034c0 <_ZN15HardwareSerial35writeEh>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    34c0:	b508      	push	{r3, lr}
    34c2:	4608      	mov	r0, r1
    34c4:	f001 f876 	bl	45b4 <serial3_putchar>
    34c8:	2001      	movs	r0, #1
    34ca:	bd08      	pop	{r3, pc}

000034cc <_ZN15HardwareSerial39write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    34cc:	b508      	push	{r3, lr}
    34ce:	4608      	mov	r0, r1
    34d0:	f001 f870 	bl	45b4 <serial3_putchar>
    34d4:	2001      	movs	r0, #1
    34d6:	bd08      	pop	{r3, pc}

000034d8 <_ZN15HardwareSerial35writeEPKhj>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    34d8:	b510      	push	{r4, lr}
					{ serial3_write(buffer, size); return size; }
    34da:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    34dc:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    34de:	4611      	mov	r1, r2
    34e0:	f001 f8b0 	bl	4644 <serial3_write>
    34e4:	4620      	mov	r0, r4
    34e6:	bd10      	pop	{r4, pc}

000034e8 <_ZN15HardwareSerial35writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    34e8:	b538      	push	{r3, r4, r5, lr}
    34ea:	4608      	mov	r0, r1
    34ec:	460d      	mov	r5, r1
    34ee:	f000 f91d 	bl	372c <strlen>
    34f2:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    34f4:	4621      	mov	r1, r4
    34f6:	4628      	mov	r0, r5
    34f8:	f001 f8a4 	bl	4644 <serial3_write>
					  return len; }
    34fc:	4620      	mov	r0, r4
    34fe:	bd38      	pop	{r3, r4, r5, pc}

00003500 <_GLOBAL__sub_I_Serial3>:
    3500:	4b04      	ldr	r3, [pc, #16]	; (3514 <_GLOBAL__sub_I_Serial3+0x14>)
    3502:	2200      	movs	r2, #0
    3504:	711a      	strb	r2, [r3, #4]
    3506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    350a:	731a      	strb	r2, [r3, #12]
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
};
extern HardwareSerial2 Serial2;

class HardwareSerial3 : public HardwareSerial
    350c:	4a02      	ldr	r2, [pc, #8]	; (3518 <_GLOBAL__sub_I_Serial3+0x18>)
    350e:	6099      	str	r1, [r3, #8]
    3510:	601a      	str	r2, [r3, #0]
    3512:	4770      	bx	lr
    3514:	1fff90f0 	.word	0x1fff90f0
    3518:	00014368 	.word	0x00014368

0000351c <pit0_isr>:
// these are the ISRs (Interrupt Service Routines) that get
// called by each PIT timer when it fires. they're defined here
// so that they can auto-clear themselves and so the user can
// specify a custom ISR and reassign it as needed
// ------------------------------------------------------------
void pit0_isr() { PIT_TFLG0 = 1; IntervalTimer::PIT_ISR[0](); }
    351c:	b508      	push	{r3, lr}
    351e:	4b03      	ldr	r3, [pc, #12]	; (352c <pit0_isr+0x10>)
    3520:	2201      	movs	r2, #1
    3522:	601a      	str	r2, [r3, #0]
    3524:	4b02      	ldr	r3, [pc, #8]	; (3530 <pit0_isr+0x14>)
    3526:	681b      	ldr	r3, [r3, #0]
    3528:	4798      	blx	r3
    352a:	bd08      	pop	{r3, pc}
    352c:	4003710c 	.word	0x4003710c
    3530:	1fff9108 	.word	0x1fff9108

00003534 <pit1_isr>:
void pit1_isr() { PIT_TFLG1 = 1; IntervalTimer::PIT_ISR[1](); }
    3534:	b508      	push	{r3, lr}
    3536:	4b03      	ldr	r3, [pc, #12]	; (3544 <pit1_isr+0x10>)
    3538:	2201      	movs	r2, #1
    353a:	601a      	str	r2, [r3, #0]
    353c:	4b02      	ldr	r3, [pc, #8]	; (3548 <pit1_isr+0x14>)
    353e:	685b      	ldr	r3, [r3, #4]
    3540:	4798      	blx	r3
    3542:	bd08      	pop	{r3, pc}
    3544:	4003711c 	.word	0x4003711c
    3548:	1fff9108 	.word	0x1fff9108

0000354c <pit2_isr>:
void pit2_isr() { PIT_TFLG2 = 1; IntervalTimer::PIT_ISR[2](); }
    354c:	b508      	push	{r3, lr}
    354e:	4b03      	ldr	r3, [pc, #12]	; (355c <pit2_isr+0x10>)
    3550:	2201      	movs	r2, #1
    3552:	601a      	str	r2, [r3, #0]
    3554:	4b02      	ldr	r3, [pc, #8]	; (3560 <pit2_isr+0x14>)
    3556:	689b      	ldr	r3, [r3, #8]
    3558:	4798      	blx	r3
    355a:	bd08      	pop	{r3, pc}
    355c:	4003712c 	.word	0x4003712c
    3560:	1fff9108 	.word	0x1fff9108

00003564 <pit3_isr>:
void pit3_isr() { PIT_TFLG3 = 1; IntervalTimer::PIT_ISR[3](); }
    3564:	b508      	push	{r3, lr}
    3566:	4b03      	ldr	r3, [pc, #12]	; (3574 <pit3_isr+0x10>)
    3568:	2201      	movs	r2, #1
    356a:	601a      	str	r2, [r3, #0]
    356c:	4b02      	ldr	r3, [pc, #8]	; (3578 <pit3_isr+0x14>)
    356e:	68db      	ldr	r3, [r3, #12]
    3570:	4798      	blx	r3
    3572:	bd08      	pop	{r3, pc}
    3574:	4003713c 	.word	0x4003713c
    3578:	1fff9108 	.word	0x1fff9108

0000357c <_ZN13IntervalTimer11disable_PITEv>:

// ------------------------------------------------------------
// disables the master PIT reg, the PIT clock bit, and unsets flag
// ------------------------------------------------------------
void IntervalTimer::disable_PIT() {
  PIT_MCR = 1;
    357c:	4b06      	ldr	r3, [pc, #24]	; (3598 <_ZN13IntervalTimer11disable_PITEv+0x1c>)
    357e:	2201      	movs	r2, #1
    3580:	601a      	str	r2, [r3, #0]
  SIM_SCGC6 &= ~SIM_SCGC6_PIT;
    3582:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3586:	333c      	adds	r3, #60	; 0x3c
    3588:	681a      	ldr	r2, [r3, #0]
    358a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    358e:	601a      	str	r2, [r3, #0]
  PIT_enabled = false;
    3590:	4b02      	ldr	r3, [pc, #8]	; (359c <_ZN13IntervalTimer11disable_PITEv+0x20>)
    3592:	2200      	movs	r2, #0
    3594:	701a      	strb	r2, [r3, #0]
    3596:	4770      	bx	lr
    3598:	40037000 	.word	0x40037000
    359c:	1fff9104 	.word	0x1fff9104

000035a0 <_ZN13IntervalTimer8stop_PITEv>:
// also, if no PITs remain in use, disables the core PIT clock
// ------------------------------------------------------------
void IntervalTimer::stop_PIT() {
  
  // disable interrupt and PIT
  NVIC_DISABLE_IRQ(IRQ_PIT_CH);
    35a0:	7b03      	ldrb	r3, [r0, #12]
    35a2:	2201      	movs	r2, #1
    35a4:	1159      	asrs	r1, r3, #5
    35a6:	f003 031f 	and.w	r3, r3, #31
    35aa:	fa02 f303 	lsl.w	r3, r2, r3
    35ae:	4a08      	ldr	r2, [pc, #32]	; (35d0 <_ZN13IntervalTimer8stop_PITEv+0x30>)
    35b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  *PIT_TCTRL = 0;
    35b4:	6882      	ldr	r2, [r0, #8]
    35b6:	2300      	movs	r3, #0
    35b8:	6013      	str	r3, [r2, #0]
  
  // free PIT for future use
  PIT_used[PIT_id] = false;
    35ba:	7841      	ldrb	r1, [r0, #1]
    35bc:	4a05      	ldr	r2, [pc, #20]	; (35d4 <_ZN13IntervalTimer8stop_PITEv+0x34>)
    35be:	5453      	strb	r3, [r2, r1]
  
  // check if we're still using any PIT
  for (uint8_t id = 0; id < NUM_PIT; id++) {
    if (PIT_used[id]) return;
    35c0:	5cd1      	ldrb	r1, [r2, r3]
    35c2:	b921      	cbnz	r1, 35ce <_ZN13IntervalTimer8stop_PITEv+0x2e>
    35c4:	3301      	adds	r3, #1
  
  // free PIT for future use
  PIT_used[PIT_id] = false;
  
  // check if we're still using any PIT
  for (uint8_t id = 0; id < NUM_PIT; id++) {
    35c6:	2b04      	cmp	r3, #4
    35c8:	d1fa      	bne.n	35c0 <_ZN13IntervalTimer8stop_PITEv+0x20>
    if (PIT_used[id]) return;
  }
  
  // none used, disable PIT clock
  disable_PIT();
    35ca:	f7ff bfd7 	b.w	357c <_ZN13IntervalTimer11disable_PITEv>
    35ce:	4770      	bx	lr
    35d0:	e000e180 	.word	0xe000e180
    35d4:	1fff9100 	.word	0x1fff9100

000035d8 <_ZN13IntervalTimer3endEv>:
// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
  if (status == TIMER_PIT) stop_PIT();
    35d8:	7803      	ldrb	r3, [r0, #0]

// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
    35da:	b510      	push	{r4, lr}
    35dc:	4604      	mov	r4, r0
  if (status == TIMER_PIT) stop_PIT();
    35de:	b10b      	cbz	r3, 35e4 <_ZN13IntervalTimer3endEv+0xc>
    35e0:	f7ff ffde 	bl	35a0 <_ZN13IntervalTimer8stop_PITEv>
  status = TIMER_OFF;
    35e4:	2300      	movs	r3, #0
    35e6:	7023      	strb	r3, [r4, #0]
    35e8:	bd10      	pop	{r4, pc}

000035ea <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    35ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t n = 0;
    for (int i =0; i < 3; i++)
    35ee:	2400      	movs	r4, #0
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    35f0:	4607      	mov	r7, r0
    35f2:	460d      	mov	r5, r1
    size_t n = 0;
    35f4:	4626      	mov	r6, r4
    35f6:	193b      	adds	r3, r7, r4
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    35f8:	220a      	movs	r2, #10
    35fa:	7919      	ldrb	r1, [r3, #4]
    35fc:	4628      	mov	r0, r5
    35fe:	2300      	movs	r3, #0
    3600:	f000 fb0b 	bl	3c1a <_ZN5Print11printNumberEmhh>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
    3604:	682b      	ldr	r3, [r5, #0]
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3606:	4680      	mov	r8, r0
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	4628      	mov	r0, r5
    360c:	212e      	movs	r1, #46	; 0x2e
    360e:	4798      	blx	r3
    for (int i =0; i < 3; i++)
    3610:	3401      	adds	r4, #1
    {
        n += p.print(_address[i], DEC);
    3612:	4440      	add	r0, r8
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    3614:	2c03      	cmp	r4, #3
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    3616:	4406      	add	r6, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    3618:	d1ed      	bne.n	35f6 <_ZNK9IPAddress7printToER5Print+0xc>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    361a:	4628      	mov	r0, r5
    361c:	79f9      	ldrb	r1, [r7, #7]
    361e:	220a      	movs	r2, #10
    3620:	2300      	movs	r3, #0
    3622:	f000 fafa 	bl	3c1a <_ZN5Print11printNumberEmhh>
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    3626:	4430      	add	r0, r6
    3628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000362c <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    362c:	4b04      	ldr	r3, [pc, #16]	; (3640 <_GLOBAL__sub_I__ZN9IPAddressC2Ev+0x14>)
    362e:	4a05      	ldr	r2, [pc, #20]	; (3644 <_GLOBAL__sub_I__ZN9IPAddressC2Ev+0x18>)
    3630:	601a      	str	r2, [r3, #0]
{
    _address[0] = first_octet;
    3632:	2200      	movs	r2, #0
    3634:	711a      	strb	r2, [r3, #4]
    _address[1] = second_octet;
    3636:	715a      	strb	r2, [r3, #5]
    _address[2] = third_octet;
    3638:	719a      	strb	r2, [r3, #6]
    _address[3] = fourth_octet;
    363a:	71da      	strb	r2, [r3, #7]
    363c:	4770      	bx	lr
    363e:	bf00      	nop
    3640:	1fff9118 	.word	0x1fff9118
    3644:	000143b8 	.word	0x000143b8

00003648 <systick_default_isr>:
}

extern volatile uint32_t systick_millis_count;
void systick_default_isr(void)
{
	systick_millis_count++;
    3648:	4b02      	ldr	r3, [pc, #8]	; (3654 <systick_default_isr+0xc>)
    364a:	681a      	ldr	r2, [r3, #0]
    364c:	3201      	adds	r2, #1
    364e:	601a      	str	r2, [r3, #0]
    3650:	4770      	bx	lr
    3652:	bf00      	nop
    3654:	1fff91a8 	.word	0x1fff91a8

00003658 <fault_isr>:
void _init_Teensyduino_internal_(void);
void __libc_init_array(void);


void fault_isr(void)
{
    3658:	b508      	push	{r3, lr}
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    365a:	4c0b      	ldr	r4, [pc, #44]	; (3688 <fault_isr+0x30>)
    365c:	6823      	ldr	r3, [r4, #0]
    365e:	0358      	lsls	r0, r3, #13
    3660:	d501      	bpl.n	3666 <fault_isr+0xe>
    3662:	f001 f9b9 	bl	49d8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3666:	6823      	ldr	r3, [r4, #0]
    3668:	0559      	lsls	r1, r3, #21
    366a:	d501      	bpl.n	3670 <fault_isr+0x18>
    366c:	f000 fcee 	bl	404c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3670:	6823      	ldr	r3, [r4, #0]
    3672:	051a      	lsls	r2, r3, #20
    3674:	d501      	bpl.n	367a <fault_isr+0x22>
    3676:	f000 fead 	bl	43d4 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    367a:	6823      	ldr	r3, [r4, #0]
    367c:	04db      	lsls	r3, r3, #19
    367e:	d5ec      	bpl.n	365a <fault_isr+0x2>
    3680:	f001 f842 	bl	4708 <uart2_status_isr>
    3684:	e7e9      	b.n	365a <fault_isr+0x2>
    3686:	bf00      	nop
    3688:	40048034 	.word	0x40048034

0000368c <unused_isr>:
	}
}

void unused_isr(void)
{
    368c:	b508      	push	{r3, lr}
	fault_isr();
    368e:	f7ff ffe3 	bl	3658 <fault_isr>
    3692:	ffff 4b01 	vtbl.8	d20, {d15-d18}, d1

00003694 <startup_early_hook>:
#define TIME_T 1349049600 // default 1 Oct 2012 (never used, Arduino sets this)
#endif
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) { WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE; }
    3694:	4b01      	ldr	r3, [pc, #4]	; (369c <startup_early_hook+0x8>)
    3696:	2210      	movs	r2, #16
    3698:	801a      	strh	r2, [r3, #0]
    369a:	4770      	bx	lr
    369c:	40052000 	.word	0x40052000

000036a0 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    36a0:	4770      	bx	lr

000036a2 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    36a2:	2000      	movs	r0, #0
    36a4:	4770      	bx	lr

000036a6 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    36a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36aa:	4770      	bx	lr

000036ac <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    36ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    36b0:	604b      	str	r3, [r1, #4]
	return 0;
}
    36b2:	2000      	movs	r0, #0
    36b4:	4770      	bx	lr

000036b6 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    36b6:	2001      	movs	r0, #1
    36b8:	4770      	bx	lr

000036ba <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    36ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36be:	4770      	bx	lr

000036c0 <_exit>:

__attribute__((weak)) 
void _exit(int status)
{
    36c0:	e7fe      	b.n	36c0 <_exit>

000036c2 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    36c2:	e7fe      	b.n	36c2 <__cxa_pure_virtual>

000036c4 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    36c4:	7800      	ldrb	r0, [r0, #0]
}
    36c6:	f1d0 0001 	rsbs	r0, r0, #1
    36ca:	bf38      	it	cc
    36cc:	2000      	movcc	r0, #0
    36ce:	4770      	bx	lr

000036d0 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    36d0:	2301      	movs	r3, #1
    36d2:	7003      	strb	r3, [r0, #0]
    36d4:	4770      	bx	lr
    36d6:	ffff f3ef 			; <UNDEFINED> instruction: 0xfffff3ef

000036d8 <nvic_execution_priority>:
	int priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    36d8:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    36dc:	b99b      	cbnz	r3, 3706 <nvic_execution_priority+0x2e>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    36de:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    36e2:	b998      	cbnz	r0, 370c <nvic_execution_priority+0x34>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    36e4:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    36e8:	b123      	cbz	r3, 36f4 <nvic_execution_priority+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    36ea:	2b0f      	cmp	r3, #15
    36ec:	d904      	bls.n	36f8 <nvic_execution_priority+0x20>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    36ee:	4a08      	ldr	r2, [pc, #32]	; (3710 <nvic_execution_priority+0x38>)
    36f0:	5c98      	ldrb	r0, [r3, r2]
    36f2:	e001      	b.n	36f8 <nvic_execution_priority+0x20>
	*g = 1;
}

int nvic_execution_priority(void)
{
	int priority=256;
    36f4:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    36f8:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    36fc:	b13b      	cbz	r3, 370e <nvic_execution_priority+0x36>
    36fe:	4283      	cmp	r3, r0
    3700:	bf38      	it	cc
    3702:	4618      	movcc	r0, r3
    3704:	4770      	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    3706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    370a:	4770      	bx	lr
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
    370c:	4618      	mov	r0, r3
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
	if (basepri > 0 && basepri < priority) priority = basepri;
	return priority;
}
    370e:	4770      	bx	lr
    3710:	e000e3f0 	.word	0xe000e3f0

00003714 <_sbrk>:
	return 0;
}

void * _sbrk(int incr)
{
	char *prev = __brkval;
    3714:	4a02      	ldr	r2, [pc, #8]	; (3720 <_sbrk+0xc>)
    3716:	6813      	ldr	r3, [r2, #0]
	__brkval += incr;
    3718:	4418      	add	r0, r3
    371a:	6010      	str	r0, [r2, #0]
	return prev;
}
    371c:	4618      	mov	r0, r3
    371e:	4770      	bx	lr
    3720:	1fff8418 	.word	0x1fff8418

00003724 <_kill>:

int _kill(int pid, int sig)
{
	// duuh.
	return 0;
}
    3724:	2000      	movs	r0, #0
    3726:	4770      	bx	lr

00003728 <_getpid>:

int _getpid()
{
	return 0;
}
    3728:	2000      	movs	r0, #0
    372a:	4770      	bx	lr

0000372c <strlen>:
#include <string.h>
#include <stdio.h>

size_t strlen(const char *s)
{
	size_t n=0;
    372c:	2300      	movs	r3, #0

	while (*s++) n++;
    372e:	5cc2      	ldrb	r2, [r0, r3]
    3730:	b10a      	cbz	r2, 3736 <strlen+0xa>
    3732:	3301      	adds	r3, #1
    3734:	e7fb      	b.n	372e <strlen+0x2>
	return n;
}
    3736:	4618      	mov	r0, r3
    3738:	4770      	bx	lr

0000373a <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix) 	
{
    373a:	b510      	push	{r4, lr}
	unsigned digit;
	int i=0, j;
    373c:	2300      	movs	r3, #0
	char t;

	while (1) {
		digit = val % radix;
    373e:	fbb0 f4f2 	udiv	r4, r0, r2
    3742:	fb02 0014 	mls	r0, r2, r4, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3746:	2809      	cmp	r0, #9
    3748:	bf94      	ite	ls
    374a:	3030      	addls	r0, #48	; 0x30
    374c:	3037      	addhi	r0, #55	; 0x37
    374e:	b2c0      	uxtb	r0, r0
    3750:	54c8      	strb	r0, [r1, r3]
		val /= radix;
		if (val == 0) break;
    3752:	4620      	mov	r0, r4
    3754:	b10c      	cbz	r4, 375a <ultoa+0x20>
		i++;
    3756:	3301      	adds	r3, #1
	}
    3758:	e7f1      	b.n	373e <ultoa+0x4>
	buf[i + 1] = 0;
    375a:	18ca      	adds	r2, r1, r3
    375c:	7054      	strb	r4, [r2, #1]
	for (j=0; j < i; j++, i--) {
    375e:	4622      	mov	r2, r4
    3760:	429a      	cmp	r2, r3
    3762:	da06      	bge.n	3772 <ultoa+0x38>
		t = buf[j];
    3764:	5c88      	ldrb	r0, [r1, r2]
		buf[j] = buf[i];
    3766:	5ccc      	ldrb	r4, [r1, r3]
    3768:	548c      	strb	r4, [r1, r2]
		buf[i] = t;
    376a:	54c8      	strb	r0, [r1, r3]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    376c:	3201      	adds	r2, #1
    376e:	3b01      	subs	r3, #1
    3770:	e7f6      	b.n	3760 <ultoa+0x26>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3772:	4608      	mov	r0, r1
    3774:	bd10      	pop	{r4, pc}
    3776:	ffff 4b08 	vtbl.8	d20, {d15-d18}, d8

00003778 <init_pin_interrupts>:
volatile static voidFuncPtr intFunc[CORE_NUM_DIGITAL];

void init_pin_interrupts(void)
{
	//SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3778:	4b08      	ldr	r3, [pc, #32]	; (379c <init_pin_interrupts+0x24>)
    377a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    377e:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    3780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3784:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    3786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    378a:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    378c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    3790:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    3792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    3796:	601a      	str	r2, [r3, #0]
    3798:	4770      	bx	lr
    379a:	bf00      	nop
    379c:	e000e108 	.word	0xe000e108

000037a0 <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    37a0:	2821      	cmp	r0, #33	; 0x21
	// so if the user puts lots of slow code on attachInterrupt
	// fast interrupts will still be serviced quickly?
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    37a2:	b530      	push	{r4, r5, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    37a4:	d821      	bhi.n	37ea <attachInterrupt+0x4a>
	switch (mode) {
    37a6:	2a04      	cmp	r2, #4
    37a8:	d81f      	bhi.n	37ea <attachInterrupt+0x4a>
    37aa:	e8df f002 	tbb	[pc, r2]
    37ae:	0907      	.short	0x0907
    37b0:	0b05      	.short	0x0b05
    37b2:	03          	.byte	0x03
    37b3:	00          	.byte	0x00
	  case CHANGE:	mask = 0x0B; break;
    37b4:	230b      	movs	r3, #11
    37b6:	e006      	b.n	37c6 <attachInterrupt+0x26>
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
    37b8:	230a      	movs	r3, #10
    37ba:	e004      	b.n	37c6 <attachInterrupt+0x26>
	  case LOW:	mask = 0x08; break;
    37bc:	2308      	movs	r3, #8
    37be:	e002      	b.n	37c6 <attachInterrupt+0x26>
	  case HIGH:	mask = 0x0C; break;
    37c0:	230c      	movs	r3, #12
    37c2:	e000      	b.n	37c6 <attachInterrupt+0x26>
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
    37c4:	2309      	movs	r3, #9
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);
    37c6:	4a09      	ldr	r2, [pc, #36]	; (37ec <attachInterrupt+0x4c>)
    37c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    37cc:	6852      	ldr	r2, [r2, #4]

	__disable_irq();
    37ce:	b672      	cpsid	i
	cfg = *config;
    37d0:	6814      	ldr	r4, [r2, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	intFunc[pin] = function;	// set the function pointer
    37d2:	4d07      	ldr	r5, [pc, #28]	; (37f0 <attachInterrupt+0x50>)
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);

	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
    37d4:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
	*config = cfg;
    37d8:	6014      	str	r4, [r2, #0]
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
    37da:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	intFunc[pin] = function;	// set the function pointer
	cfg |= mask;
    37de:	ea44 4303 	orr.w	r3, r4, r3, lsl #16

	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	intFunc[pin] = function;	// set the function pointer
    37e2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
    37e6:	6013      	str	r3, [r2, #0]
	__enable_irq();
    37e8:	b662      	cpsie	i
    37ea:	bd30      	pop	{r4, r5, pc}
    37ec:	000143c0 	.word	0x000143c0
    37f0:	1fff9120 	.word	0x1fff9120

000037f4 <porta_isr>:
}


void porta_isr(void)
{
	uint32_t isfr = PORTA_ISFR;
    37f4:	4b11      	ldr	r3, [pc, #68]	; (383c <porta_isr+0x48>)
	__enable_irq();
}


void porta_isr(void)
{
    37f6:	b510      	push	{r4, lr}
	uint32_t isfr = PORTA_ISFR;
    37f8:	681c      	ldr	r4, [r3, #0]
	PORTA_ISFR = isfr;
    37fa:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN3_BITMASK) && intFunc[3]) intFunc[3]();
    37fc:	04e0      	lsls	r0, r4, #19
    37fe:	d504      	bpl.n	380a <porta_isr+0x16>
    3800:	4b0f      	ldr	r3, [pc, #60]	; (3840 <porta_isr+0x4c>)
    3802:	68da      	ldr	r2, [r3, #12]
    3804:	b10a      	cbz	r2, 380a <porta_isr+0x16>
    3806:	68db      	ldr	r3, [r3, #12]
    3808:	4798      	blx	r3
	if ((isfr & CORE_PIN4_BITMASK) && intFunc[4]) intFunc[4]();
    380a:	04a1      	lsls	r1, r4, #18
    380c:	d504      	bpl.n	3818 <porta_isr+0x24>
    380e:	4b0c      	ldr	r3, [pc, #48]	; (3840 <porta_isr+0x4c>)
    3810:	691a      	ldr	r2, [r3, #16]
    3812:	b10a      	cbz	r2, 3818 <porta_isr+0x24>
    3814:	691b      	ldr	r3, [r3, #16]
    3816:	4798      	blx	r3
	if ((isfr & CORE_PIN24_BITMASK) && intFunc[24]) intFunc[24]();
    3818:	06a2      	lsls	r2, r4, #26
    381a:	d504      	bpl.n	3826 <porta_isr+0x32>
    381c:	4b08      	ldr	r3, [pc, #32]	; (3840 <porta_isr+0x4c>)
    381e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    3820:	b10a      	cbz	r2, 3826 <porta_isr+0x32>
    3822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3824:	4798      	blx	r3
	if ((isfr & CORE_PIN33_BITMASK) && intFunc[33]) intFunc[33]();
    3826:	06e3      	lsls	r3, r4, #27
    3828:	d506      	bpl.n	3838 <porta_isr+0x44>
    382a:	4b05      	ldr	r3, [pc, #20]	; (3840 <porta_isr+0x4c>)
    382c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    3830:	b112      	cbz	r2, 3838 <porta_isr+0x44>
    3832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    3836:	4798      	blx	r3
    3838:	bd10      	pop	{r4, pc}
    383a:	bf00      	nop
    383c:	400490a0 	.word	0x400490a0
    3840:	1fff9120 	.word	0x1fff9120

00003844 <portb_isr>:
}

void portb_isr(void)
{
	uint32_t isfr = PORTB_ISFR;
    3844:	4b1f      	ldr	r3, [pc, #124]	; (38c4 <portb_isr+0x80>)
	if ((isfr & CORE_PIN24_BITMASK) && intFunc[24]) intFunc[24]();
	if ((isfr & CORE_PIN33_BITMASK) && intFunc[33]) intFunc[33]();
}

void portb_isr(void)
{
    3846:	b510      	push	{r4, lr}
	uint32_t isfr = PORTB_ISFR;
    3848:	681c      	ldr	r4, [r3, #0]
	PORTB_ISFR = isfr;
    384a:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN0_BITMASK) && intFunc[0]) intFunc[0]();
    384c:	03e0      	lsls	r0, r4, #15
    384e:	d504      	bpl.n	385a <portb_isr+0x16>
    3850:	4b1d      	ldr	r3, [pc, #116]	; (38c8 <portb_isr+0x84>)
    3852:	681a      	ldr	r2, [r3, #0]
    3854:	b10a      	cbz	r2, 385a <portb_isr+0x16>
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	4798      	blx	r3
	if ((isfr & CORE_PIN1_BITMASK) && intFunc[1]) intFunc[1]();
    385a:	03a1      	lsls	r1, r4, #14
    385c:	d504      	bpl.n	3868 <portb_isr+0x24>
    385e:	4b1a      	ldr	r3, [pc, #104]	; (38c8 <portb_isr+0x84>)
    3860:	685a      	ldr	r2, [r3, #4]
    3862:	b10a      	cbz	r2, 3868 <portb_isr+0x24>
    3864:	685b      	ldr	r3, [r3, #4]
    3866:	4798      	blx	r3
	if ((isfr & CORE_PIN16_BITMASK) && intFunc[16]) intFunc[16]();
    3868:	07e2      	lsls	r2, r4, #31
    386a:	d504      	bpl.n	3876 <portb_isr+0x32>
    386c:	4b16      	ldr	r3, [pc, #88]	; (38c8 <portb_isr+0x84>)
    386e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3870:	b10a      	cbz	r2, 3876 <portb_isr+0x32>
    3872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3874:	4798      	blx	r3
	if ((isfr & CORE_PIN17_BITMASK) && intFunc[17]) intFunc[17]();
    3876:	07a3      	lsls	r3, r4, #30
    3878:	d504      	bpl.n	3884 <portb_isr+0x40>
    387a:	4b13      	ldr	r3, [pc, #76]	; (38c8 <portb_isr+0x84>)
    387c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    387e:	b10a      	cbz	r2, 3884 <portb_isr+0x40>
    3880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3882:	4798      	blx	r3
	if ((isfr & CORE_PIN18_BITMASK) && intFunc[18]) intFunc[18]();
    3884:	0720      	lsls	r0, r4, #28
    3886:	d504      	bpl.n	3892 <portb_isr+0x4e>
    3888:	4b0f      	ldr	r3, [pc, #60]	; (38c8 <portb_isr+0x84>)
    388a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    388c:	b10a      	cbz	r2, 3892 <portb_isr+0x4e>
    388e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3890:	4798      	blx	r3
	if ((isfr & CORE_PIN19_BITMASK) && intFunc[19]) intFunc[19]();
    3892:	0761      	lsls	r1, r4, #29
    3894:	d504      	bpl.n	38a0 <portb_isr+0x5c>
    3896:	4b0c      	ldr	r3, [pc, #48]	; (38c8 <portb_isr+0x84>)
    3898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    389a:	b10a      	cbz	r2, 38a0 <portb_isr+0x5c>
    389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    389e:	4798      	blx	r3
	if ((isfr & CORE_PIN25_BITMASK) && intFunc[25]) intFunc[25]();
    38a0:	0322      	lsls	r2, r4, #12
    38a2:	d504      	bpl.n	38ae <portb_isr+0x6a>
    38a4:	4b08      	ldr	r3, [pc, #32]	; (38c8 <portb_isr+0x84>)
    38a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    38a8:	b10a      	cbz	r2, 38ae <portb_isr+0x6a>
    38aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    38ac:	4798      	blx	r3
	if ((isfr & CORE_PIN32_BITMASK) && intFunc[32]) intFunc[32]();
    38ae:	0363      	lsls	r3, r4, #13
    38b0:	d506      	bpl.n	38c0 <portb_isr+0x7c>
    38b2:	4b05      	ldr	r3, [pc, #20]	; (38c8 <portb_isr+0x84>)
    38b4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    38b8:	b112      	cbz	r2, 38c0 <portb_isr+0x7c>
    38ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    38be:	4798      	blx	r3
    38c0:	bd10      	pop	{r4, pc}
    38c2:	bf00      	nop
    38c4:	4004a0a0 	.word	0x4004a0a0
    38c8:	1fff9120 	.word	0x1fff9120

000038cc <portc_isr>:
}

void portc_isr(void)
{
	// TODO: these are inefficent.  Use CLZ somehow....
	uint32_t isfr = PORTC_ISFR;
    38cc:	4b2c      	ldr	r3, [pc, #176]	; (3980 <portc_isr+0xb4>)
	if ((isfr & CORE_PIN25_BITMASK) && intFunc[25]) intFunc[25]();
	if ((isfr & CORE_PIN32_BITMASK) && intFunc[32]) intFunc[32]();
}

void portc_isr(void)
{
    38ce:	b510      	push	{r4, lr}
	// TODO: these are inefficent.  Use CLZ somehow....
	uint32_t isfr = PORTC_ISFR;
    38d0:	681c      	ldr	r4, [r3, #0]
	PORTC_ISFR = isfr;
    38d2:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN9_BITMASK) && intFunc[9]) intFunc[9]();
    38d4:	0720      	lsls	r0, r4, #28
    38d6:	d504      	bpl.n	38e2 <portc_isr+0x16>
    38d8:	4b2a      	ldr	r3, [pc, #168]	; (3984 <portc_isr+0xb8>)
    38da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    38dc:	b10a      	cbz	r2, 38e2 <portc_isr+0x16>
    38de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38e0:	4798      	blx	r3
	if ((isfr & CORE_PIN10_BITMASK) && intFunc[10]) intFunc[10]();
    38e2:	06e1      	lsls	r1, r4, #27
    38e4:	d504      	bpl.n	38f0 <portc_isr+0x24>
    38e6:	4b27      	ldr	r3, [pc, #156]	; (3984 <portc_isr+0xb8>)
    38e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38ea:	b10a      	cbz	r2, 38f0 <portc_isr+0x24>
    38ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38ee:	4798      	blx	r3
	if ((isfr & CORE_PIN11_BITMASK) && intFunc[11]) intFunc[11]();
    38f0:	0662      	lsls	r2, r4, #25
    38f2:	d504      	bpl.n	38fe <portc_isr+0x32>
    38f4:	4b23      	ldr	r3, [pc, #140]	; (3984 <portc_isr+0xb8>)
    38f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38f8:	b10a      	cbz	r2, 38fe <portc_isr+0x32>
    38fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38fc:	4798      	blx	r3
	if ((isfr & CORE_PIN12_BITMASK) && intFunc[12]) intFunc[12]();
    38fe:	0623      	lsls	r3, r4, #24
    3900:	d504      	bpl.n	390c <portc_isr+0x40>
    3902:	4b20      	ldr	r3, [pc, #128]	; (3984 <portc_isr+0xb8>)
    3904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3906:	b10a      	cbz	r2, 390c <portc_isr+0x40>
    3908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    390a:	4798      	blx	r3
	if ((isfr & CORE_PIN13_BITMASK) && intFunc[13]) intFunc[13]();
    390c:	06a0      	lsls	r0, r4, #26
    390e:	d504      	bpl.n	391a <portc_isr+0x4e>
    3910:	4b1c      	ldr	r3, [pc, #112]	; (3984 <portc_isr+0xb8>)
    3912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3914:	b10a      	cbz	r2, 391a <portc_isr+0x4e>
    3916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3918:	4798      	blx	r3
	if ((isfr & CORE_PIN15_BITMASK) && intFunc[15]) intFunc[15]();
    391a:	07e1      	lsls	r1, r4, #31
    391c:	d504      	bpl.n	3928 <portc_isr+0x5c>
    391e:	4b19      	ldr	r3, [pc, #100]	; (3984 <portc_isr+0xb8>)
    3920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3922:	b10a      	cbz	r2, 3928 <portc_isr+0x5c>
    3924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3926:	4798      	blx	r3
	if ((isfr & CORE_PIN22_BITMASK) && intFunc[22]) intFunc[22]();
    3928:	07a2      	lsls	r2, r4, #30
    392a:	d504      	bpl.n	3936 <portc_isr+0x6a>
    392c:	4b15      	ldr	r3, [pc, #84]	; (3984 <portc_isr+0xb8>)
    392e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    3930:	b10a      	cbz	r2, 3936 <portc_isr+0x6a>
    3932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3934:	4798      	blx	r3
	if ((isfr & CORE_PIN23_BITMASK) && intFunc[23]) intFunc[23]();
    3936:	0763      	lsls	r3, r4, #29
    3938:	d504      	bpl.n	3944 <portc_isr+0x78>
    393a:	4b12      	ldr	r3, [pc, #72]	; (3984 <portc_isr+0xb8>)
    393c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    393e:	b10a      	cbz	r2, 3944 <portc_isr+0x78>
    3940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3942:	4798      	blx	r3
	if ((isfr & CORE_PIN27_BITMASK) && intFunc[27]) intFunc[27]();
    3944:	05a0      	lsls	r0, r4, #22
    3946:	d504      	bpl.n	3952 <portc_isr+0x86>
    3948:	4b0e      	ldr	r3, [pc, #56]	; (3984 <portc_isr+0xb8>)
    394a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    394c:	b10a      	cbz	r2, 3952 <portc_isr+0x86>
    394e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3950:	4798      	blx	r3
	if ((isfr & CORE_PIN28_BITMASK) && intFunc[28]) intFunc[28]();
    3952:	05e1      	lsls	r1, r4, #23
    3954:	d504      	bpl.n	3960 <portc_isr+0x94>
    3956:	4b0b      	ldr	r3, [pc, #44]	; (3984 <portc_isr+0xb8>)
    3958:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    395a:	b10a      	cbz	r2, 3960 <portc_isr+0x94>
    395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    395e:	4798      	blx	r3
	if ((isfr & CORE_PIN29_BITMASK) && intFunc[29]) intFunc[29]();
    3960:	0562      	lsls	r2, r4, #21
    3962:	d504      	bpl.n	396e <portc_isr+0xa2>
    3964:	4b07      	ldr	r3, [pc, #28]	; (3984 <portc_isr+0xb8>)
    3966:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    3968:	b10a      	cbz	r2, 396e <portc_isr+0xa2>
    396a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    396c:	4798      	blx	r3
	if ((isfr & CORE_PIN30_BITMASK) && intFunc[30]) intFunc[30]();
    396e:	0523      	lsls	r3, r4, #20
    3970:	d504      	bpl.n	397c <portc_isr+0xb0>
    3972:	4b04      	ldr	r3, [pc, #16]	; (3984 <portc_isr+0xb8>)
    3974:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    3976:	b10a      	cbz	r2, 397c <portc_isr+0xb0>
    3978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    397a:	4798      	blx	r3
    397c:	bd10      	pop	{r4, pc}
    397e:	bf00      	nop
    3980:	4004b0a0 	.word	0x4004b0a0
    3984:	1fff9120 	.word	0x1fff9120

00003988 <portd_isr>:
}

void portd_isr(void)
{
	uint32_t isfr = PORTD_ISFR;
    3988:	4b1e      	ldr	r3, [pc, #120]	; (3a04 <portd_isr+0x7c>)
	if ((isfr & CORE_PIN29_BITMASK) && intFunc[29]) intFunc[29]();
	if ((isfr & CORE_PIN30_BITMASK) && intFunc[30]) intFunc[30]();
}

void portd_isr(void)
{
    398a:	b510      	push	{r4, lr}
	uint32_t isfr = PORTD_ISFR;
    398c:	681c      	ldr	r4, [r3, #0]
	PORTD_ISFR = isfr;
    398e:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN2_BITMASK) && intFunc[2]) intFunc[2]();
    3990:	07e0      	lsls	r0, r4, #31
    3992:	d504      	bpl.n	399e <portd_isr+0x16>
    3994:	4b1c      	ldr	r3, [pc, #112]	; (3a08 <portd_isr+0x80>)
    3996:	689a      	ldr	r2, [r3, #8]
    3998:	b10a      	cbz	r2, 399e <portd_isr+0x16>
    399a:	689b      	ldr	r3, [r3, #8]
    399c:	4798      	blx	r3
	if ((isfr & CORE_PIN5_BITMASK) && intFunc[5]) intFunc[5]();
    399e:	0621      	lsls	r1, r4, #24
    39a0:	d504      	bpl.n	39ac <portd_isr+0x24>
    39a2:	4b19      	ldr	r3, [pc, #100]	; (3a08 <portd_isr+0x80>)
    39a4:	695a      	ldr	r2, [r3, #20]
    39a6:	b10a      	cbz	r2, 39ac <portd_isr+0x24>
    39a8:	695b      	ldr	r3, [r3, #20]
    39aa:	4798      	blx	r3
	if ((isfr & CORE_PIN6_BITMASK) && intFunc[6]) intFunc[6]();
    39ac:	06e2      	lsls	r2, r4, #27
    39ae:	d504      	bpl.n	39ba <portd_isr+0x32>
    39b0:	4b15      	ldr	r3, [pc, #84]	; (3a08 <portd_isr+0x80>)
    39b2:	699a      	ldr	r2, [r3, #24]
    39b4:	b10a      	cbz	r2, 39ba <portd_isr+0x32>
    39b6:	699b      	ldr	r3, [r3, #24]
    39b8:	4798      	blx	r3
	if ((isfr & CORE_PIN7_BITMASK) && intFunc[7]) intFunc[7]();
    39ba:	0763      	lsls	r3, r4, #29
    39bc:	d504      	bpl.n	39c8 <portd_isr+0x40>
    39be:	4b12      	ldr	r3, [pc, #72]	; (3a08 <portd_isr+0x80>)
    39c0:	69da      	ldr	r2, [r3, #28]
    39c2:	b10a      	cbz	r2, 39c8 <portd_isr+0x40>
    39c4:	69db      	ldr	r3, [r3, #28]
    39c6:	4798      	blx	r3
	if ((isfr & CORE_PIN8_BITMASK) && intFunc[8]) intFunc[8]();
    39c8:	0720      	lsls	r0, r4, #28
    39ca:	d504      	bpl.n	39d6 <portd_isr+0x4e>
    39cc:	4b0e      	ldr	r3, [pc, #56]	; (3a08 <portd_isr+0x80>)
    39ce:	6a1a      	ldr	r2, [r3, #32]
    39d0:	b10a      	cbz	r2, 39d6 <portd_isr+0x4e>
    39d2:	6a1b      	ldr	r3, [r3, #32]
    39d4:	4798      	blx	r3
	if ((isfr & CORE_PIN14_BITMASK) && intFunc[14]) intFunc[14]();
    39d6:	07a1      	lsls	r1, r4, #30
    39d8:	d504      	bpl.n	39e4 <portd_isr+0x5c>
    39da:	4b0b      	ldr	r3, [pc, #44]	; (3a08 <portd_isr+0x80>)
    39dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    39de:	b10a      	cbz	r2, 39e4 <portd_isr+0x5c>
    39e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    39e2:	4798      	blx	r3
	if ((isfr & CORE_PIN20_BITMASK) && intFunc[20]) intFunc[20]();
    39e4:	06a2      	lsls	r2, r4, #26
    39e6:	d504      	bpl.n	39f2 <portd_isr+0x6a>
    39e8:	4b07      	ldr	r3, [pc, #28]	; (3a08 <portd_isr+0x80>)
    39ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    39ec:	b10a      	cbz	r2, 39f2 <portd_isr+0x6a>
    39ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    39f0:	4798      	blx	r3
	if ((isfr & CORE_PIN21_BITMASK) && intFunc[21]) intFunc[21]();
    39f2:	0663      	lsls	r3, r4, #25
    39f4:	d504      	bpl.n	3a00 <portd_isr+0x78>
    39f6:	4b04      	ldr	r3, [pc, #16]	; (3a08 <portd_isr+0x80>)
    39f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    39fa:	b10a      	cbz	r2, 3a00 <portd_isr+0x78>
    39fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    39fe:	4798      	blx	r3
    3a00:	bd10      	pop	{r4, pc}
    3a02:	bf00      	nop
    3a04:	4004c0a0 	.word	0x4004c0a0
    3a08:	1fff9120 	.word	0x1fff9120

00003a0c <porte_isr>:
}

void porte_isr(void)
{
	uint32_t isfr = PORTE_ISFR;
    3a0c:	4b09      	ldr	r3, [pc, #36]	; (3a34 <porte_isr+0x28>)
	if ((isfr & CORE_PIN20_BITMASK) && intFunc[20]) intFunc[20]();
	if ((isfr & CORE_PIN21_BITMASK) && intFunc[21]) intFunc[21]();
}

void porte_isr(void)
{
    3a0e:	b510      	push	{r4, lr}
	uint32_t isfr = PORTE_ISFR;
    3a10:	681c      	ldr	r4, [r3, #0]
	PORTE_ISFR = isfr;
    3a12:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN26_BITMASK) && intFunc[26]) intFunc[26]();
    3a14:	07a2      	lsls	r2, r4, #30
    3a16:	d504      	bpl.n	3a22 <porte_isr+0x16>
    3a18:	4b07      	ldr	r3, [pc, #28]	; (3a38 <porte_isr+0x2c>)
    3a1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    3a1c:	b10a      	cbz	r2, 3a22 <porte_isr+0x16>
    3a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3a20:	4798      	blx	r3
	if ((isfr & CORE_PIN31_BITMASK) && intFunc[31]) intFunc[31]();
    3a22:	07e3      	lsls	r3, r4, #31
    3a24:	d504      	bpl.n	3a30 <porte_isr+0x24>
    3a26:	4b04      	ldr	r3, [pc, #16]	; (3a38 <porte_isr+0x2c>)
    3a28:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    3a2a:	b10a      	cbz	r2, 3a30 <porte_isr+0x24>
    3a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3a2e:	4798      	blx	r3
    3a30:	bd10      	pop	{r4, pc}
    3a32:	bf00      	nop
    3a34:	4004d0a0 	.word	0x4004d0a0
    3a38:	1fff9120 	.word	0x1fff9120

00003a3c <rtc_set>:
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    3a3c:	4b04      	ldr	r3, [pc, #16]	; (3a50 <rtc_set+0x14>)
	RTC_TPR = 0;
    3a3e:	4905      	ldr	r1, [pc, #20]	; (3a54 <rtc_set+0x18>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    3a40:	2200      	movs	r2, #0
    3a42:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    3a44:	600a      	str	r2, [r1, #0]
	RTC_TSR = t;
    3a46:	4a04      	ldr	r2, [pc, #16]	; (3a58 <rtc_set+0x1c>)
    3a48:	6010      	str	r0, [r2, #0]
	RTC_SR = RTC_SR_TCE;
    3a4a:	2210      	movs	r2, #16
    3a4c:	601a      	str	r2, [r3, #0]
    3a4e:	4770      	bx	lr
    3a50:	4003d014 	.word	0x4003d014
    3a54:	4003d004 	.word	0x4003d004
    3a58:	4003d000 	.word	0x4003d000

00003a5c <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    3a5c:	2821      	cmp	r0, #33	; 0x21


// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
    3a5e:	b510      	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    3a60:	d818      	bhi.n	3a94 <digitalWrite+0x38>
	if (*portModeRegister(pin)) {
    3a62:	4a0d      	ldr	r2, [pc, #52]	; (3a98 <digitalWrite+0x3c>)
    3a64:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    3a68:	f893 4280 	ldrb.w	r4, [r3, #640]	; 0x280
    3a6c:	b13c      	cbz	r4, 3a7e <digitalWrite+0x22>
    3a6e:	2201      	movs	r2, #1
		if (val) {
    3a70:	b111      	cbz	r1, 3a78 <digitalWrite+0x1c>
			*portSetRegister(pin) = 1;
    3a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    3a76:	bd10      	pop	{r4, pc}
		} else {
			*portClearRegister(pin) = 1;
    3a78:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    3a7c:	bd10      	pop	{r4, pc}
		}
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    3a7e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    3a82:	6843      	ldr	r3, [r0, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3a84:	681a      	ldr	r2, [r3, #0]
		} else {
			*portClearRegister(pin) = 1;
		}
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    3a86:	b111      	cbz	r1, 3a8e <digitalWrite+0x32>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3a88:	f042 0203 	orr.w	r2, r2, #3
    3a8c:	e001      	b.n	3a92 <digitalWrite+0x36>
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    3a8e:	f022 0202 	bic.w	r2, r2, #2
    3a92:	601a      	str	r2, [r3, #0]
    3a94:	bd10      	pop	{r4, pc}
    3a96:	bf00      	nop
    3a98:	000143c0 	.word	0x000143c0

00003a9c <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3a9c:	2821      	cmp	r0, #33	; 0x21
    3a9e:	d806      	bhi.n	3aae <digitalRead+0x12>
	return *portInputRegister(pin);
    3aa0:	4b04      	ldr	r3, [pc, #16]	; (3ab4 <digitalRead+0x18>)
    3aa2:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    3aa6:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    3aaa:	b2c0      	uxtb	r0, r0
    3aac:	4770      	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3aae:	2000      	movs	r0, #0
	return *portInputRegister(pin);
}
    3ab0:	4770      	bx	lr
    3ab2:	bf00      	nop
    3ab4:	000143c0 	.word	0x000143c0

00003ab8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    3ab8:	2821      	cmp	r0, #33	; 0x21
    3aba:	d816      	bhi.n	3aea <pinMode+0x32>
	config = portConfigRegister(pin);
    3abc:	4a0b      	ldr	r2, [pc, #44]	; (3aec <pinMode+0x34>)
    3abe:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT) {
    3ac2:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    3ac4:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT) {
		*portModeRegister(pin) = 1;
    3ac6:	f852 2030 	ldr.w	r2, [r2, r0, lsl #3]
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT) {
    3aca:	d104      	bne.n	3ad6 <pinMode+0x1e>
		*portModeRegister(pin) = 1;
    3acc:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3ad0:	f44f 72a2 	mov.w	r2, #324	; 0x144
    3ad4:	e008      	b.n	3ae8 <pinMode+0x30>
	} else {
		*portModeRegister(pin) = 0;
    3ad6:	2000      	movs	r0, #0
    3ad8:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		if (mode == INPUT) {
    3adc:	b911      	cbnz	r1, 3ae4 <pinMode+0x2c>
			*config = PORT_PCR_MUX(1);
    3ade:	f44f 7280 	mov.w	r2, #256	; 0x100
    3ae2:	e001      	b.n	3ae8 <pinMode+0x30>
		} else {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS; // pullup
    3ae4:	f240 1203 	movw	r2, #259	; 0x103
    3ae8:	601a      	str	r2, [r3, #0]
    3aea:	4770      	bx	lr
    3aec:	000143c0 	.word	0x000143c0

00003af0 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3af0:	b672      	cpsid	i
	current = SYST_CVR;
    3af2:	4b0c      	ldr	r3, [pc, #48]	; (3b24 <micros+0x34>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3af4:	490c      	ldr	r1, [pc, #48]	; (3b28 <micros+0x38>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3af6:	681a      	ldr	r2, [r3, #0]
	count = systick_millis_count;
    3af8:	4b0c      	ldr	r3, [pc, #48]	; (3b2c <micros+0x3c>)
    3afa:	681b      	ldr	r3, [r3, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3afc:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    3afe:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3b00:	0149      	lsls	r1, r1, #5
    3b02:	d502      	bpl.n	3b0a <micros+0x1a>
    3b04:	2a32      	cmp	r2, #50	; 0x32
    3b06:	bf88      	it	hi
    3b08:	3301      	addhi	r3, #1
	current = ((F_CPU / 1000) - 1) - current;
    3b0a:	f5c2 328c 	rsb	r2, r2, #71680	; 0x11800
	return count * 1000 + current / (F_CPU / 1000000);
    3b0e:	2148      	movs	r1, #72	; 0x48
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
	current = ((F_CPU / 1000) - 1) - current;
    3b10:	f202 123f 	addw	r2, r2, #319	; 0x13f
	return count * 1000 + current / (F_CPU / 1000000);
    3b14:	fbb2 f2f1 	udiv	r2, r2, r1
}
    3b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3b1c:	fb00 2003 	mla	r0, r0, r3, r2
    3b20:	4770      	bx	lr
    3b22:	bf00      	nop
    3b24:	e000e018 	.word	0xe000e018
    3b28:	e000ed04 	.word	0xe000ed04
    3b2c:	1fff91a8 	.word	0x1fff91a8

00003b30 <delay>:

void delay(uint32_t ms)
{
    3b30:	b538      	push	{r3, r4, r5, lr}
    3b32:	4604      	mov	r4, r0
	uint32_t start = micros();
    3b34:	f7ff ffdc 	bl	3af0 <micros>
    3b38:	4605      	mov	r5, r0

	if (ms > 0) {
    3b3a:	b164      	cbz	r4, 3b56 <delay+0x26>
		while (1) {
			if ((micros() - start) >= 1000) {
    3b3c:	f7ff ffd8 	bl	3af0 <micros>
    3b40:	1b40      	subs	r0, r0, r5
    3b42:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    3b46:	d303      	bcc.n	3b50 <delay+0x20>
				ms--;
				if (ms == 0) return;
    3b48:	3c01      	subs	r4, #1
    3b4a:	d004      	beq.n	3b56 <delay+0x26>
				start += 1000;
    3b4c:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
			}
			yield();
    3b50:	f001 fc43 	bl	53da <yield>
		}
    3b54:	e7f2      	b.n	3b3c <delay+0xc>
    3b56:	bd38      	pop	{r3, r4, r5, pc}

00003b58 <_init_Teensyduino_internal_>:
#define DEFAULT_FTM_PRESCALE 0
#endif

//void init_pins(void)
void _init_Teensyduino_internal_(void)
{
    3b58:	b510      	push	{r4, lr}
	init_pin_interrupts();
    3b5a:	f7ff fe0d 	bl	3778 <init_pin_interrupts>

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3b5e:	4b17      	ldr	r3, [pc, #92]	; (3bbc <_init_Teensyduino_internal_+0x64>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3b60:	4a17      	ldr	r2, [pc, #92]	; (3bc0 <_init_Teensyduino_internal_+0x68>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3b62:	4c18      	ldr	r4, [pc, #96]	; (3bc4 <_init_Teensyduino_internal_+0x6c>)
{
	init_pin_interrupts();

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3b64:	2000      	movs	r0, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    3b66:	f648 71ff 	movw	r1, #36863	; 0x8fff
{
	init_pin_interrupts();

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3b6a:	6018      	str	r0, [r3, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
    3b6c:	6059      	str	r1, [r3, #4]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3b6e:	2328      	movs	r3, #40	; 0x28
    3b70:	6013      	str	r3, [r2, #0]
	FTM0_C1SC = 0x28;
    3b72:	6093      	str	r3, [r2, #8]
	FTM0_C2SC = 0x28;
    3b74:	6113      	str	r3, [r2, #16]
	FTM0_C3SC = 0x28;
    3b76:	6193      	str	r3, [r2, #24]
	FTM0_C4SC = 0x28;
    3b78:	6213      	str	r3, [r2, #32]
	FTM0_C5SC = 0x28;
    3b7a:	6293      	str	r3, [r2, #40]	; 0x28
	FTM0_C6SC = 0x28;
    3b7c:	6313      	str	r3, [r2, #48]	; 0x30
	FTM0_C7SC = 0x28;
    3b7e:	6393      	str	r3, [r2, #56]	; 0x38
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3b80:	2209      	movs	r2, #9
    3b82:	6022      	str	r2, [r4, #0]
	FTM1_CNT = 0;
    3b84:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    3b88:	3404      	adds	r4, #4
    3b8a:	6020      	str	r0, [r4, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    3b8c:	6061      	str	r1, [r4, #4]
	FTM1_C0SC = 0x28;
    3b8e:	60a3      	str	r3, [r4, #8]
	FTM1_C1SC = 0x28;
    3b90:	6123      	str	r3, [r4, #16]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3b92:	f844 2c04 	str.w	r2, [r4, #-4]
#if defined(__MK20DX256__)
	FTM2_CNT = 0;
    3b96:	f504 24fe 	add.w	r4, r4, #520192	; 0x7f000
    3b9a:	6020      	str	r0, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    3b9c:	480a      	ldr	r0, [pc, #40]	; (3bc8 <_init_Teensyduino_internal_+0x70>)
    3b9e:	6001      	str	r1, [r0, #0]
	FTM2_C0SC = 0x28;
    3ba0:	490a      	ldr	r1, [pc, #40]	; (3bcc <_init_Teensyduino_internal_+0x74>)
    3ba2:	600b      	str	r3, [r1, #0]
	FTM2_C1SC = 0x28;
    3ba4:	608b      	str	r3, [r1, #8]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3ba6:	4b0a      	ldr	r3, [pc, #40]	; (3bd0 <_init_Teensyduino_internal_+0x78>)
    3ba8:	601a      	str	r2, [r3, #0]
#endif

	analog_init();
    3baa:	f7ff f9af 	bl	2f0c <analog_init>
	//delay(100); // TODO: this is not necessary, right?
	delay(4);
    3bae:	2004      	movs	r0, #4
    3bb0:	f7ff ffbe 	bl	3b30 <delay>
	usb_init();
}
    3bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

	analog_init();
	//delay(100); // TODO: this is not necessary, right?
	delay(4);
	usb_init();
    3bb8:	f001 ba04 	b.w	4fc4 <usb_init>
    3bbc:	40038004 	.word	0x40038004
    3bc0:	4003800c 	.word	0x4003800c
    3bc4:	40038000 	.word	0x40038000
    3bc8:	400b8008 	.word	0x400b8008
    3bcc:	400b800c 	.word	0x400b800c
    3bd0:	400b8000 	.word	0x400b8000

00003bd4 <_ZN5Print7printlnEv>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3bd4:	b507      	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    3bd6:	4b06      	ldr	r3, [pc, #24]	; (3bf0 <_ZN5Print7printlnEv+0x1c>)
    3bd8:	881b      	ldrh	r3, [r3, #0]
    3bda:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    3bde:	6803      	ldr	r3, [r0, #0]
    3be0:	a901      	add	r1, sp, #4
    3be2:	685b      	ldr	r3, [r3, #4]
    3be4:	2202      	movs	r2, #2
    3be6:	4798      	blx	r3
}
    3be8:	b003      	add	sp, #12
    3bea:	f85d fb04 	ldr.w	pc, [sp], #4
    3bee:	bf00      	nop
    3bf0:	000144d0 	.word	0x000144d0

00003bf4 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    3bf4:	b508      	push	{r3, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    3bf6:	6803      	ldr	r3, [r0, #0]
    3bf8:	685b      	ldr	r3, [r3, #4]
    3bfa:	4798      	blx	r3
	return 0;
}
    3bfc:	2000      	movs	r0, #0
    3bfe:	bd08      	pop	{r3, pc}

00003c00 <_ZN5Print6printfEPKcz>:
}

int Print::printf(const char *format, ...)
{
    3c00:	b40e      	push	{r1, r2, r3}
    3c02:	b503      	push	{r0, r1, lr}
    3c04:	aa03      	add	r2, sp, #12
    3c06:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    3c0a:	9201      	str	r2, [sp, #4]
	return vdprintf((int)this, format, ap);
    3c0c:	f00d fdfe 	bl	1180c <vdprintf>
}
    3c10:	b002      	add	sp, #8
    3c12:	f85d eb04 	ldr.w	lr, [sp], #4
    3c16:	b003      	add	sp, #12
    3c18:	4770      	bx	lr

00003c1a <_ZN5Print11printNumberEmhh>:
	return vdprintf((int)this, (const char *)format, ap);
}


size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3c1a:	b570      	push	{r4, r5, r6, lr}
    3c1c:	4605      	mov	r5, r0
    3c1e:	b08a      	sub	sp, #40	; 0x28
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3c20:	b922      	cbnz	r2, 3c2c <_ZN5Print11printNumberEmhh+0x12>
		return write((uint8_t)n);
    3c22:	6803      	ldr	r3, [r0, #0]
    3c24:	b2c9      	uxtb	r1, r1
    3c26:	681b      	ldr	r3, [r3, #0]
    3c28:	4798      	blx	r3
    3c2a:	e02c      	b.n	3c86 <_ZN5Print11printNumberEmhh+0x6c>
	} else if (base == 1) {
		base = 10;
    3c2c:	2a01      	cmp	r2, #1
    3c2e:	bf08      	it	eq
    3c30:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    3c32:	b921      	cbnz	r1, 3c3e <_ZN5Print11printNumberEmhh+0x24>
		buf[sizeof(buf) - 1] = '0';
    3c34:	2230      	movs	r2, #48	; 0x30
    3c36:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    3c3a:	2421      	movs	r4, #33	; 0x21
    3c3c:	e013      	b.n	3c66 <_ZN5Print11printNumberEmhh+0x4c>
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    3c3e:	2421      	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3c40:	fbb1 f0f2 	udiv	r0, r1, r2
    3c44:	fb02 1110 	mls	r1, r2, r0, r1
    3c48:	b2c9      	uxtb	r1, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3c4a:	2909      	cmp	r1, #9
    3c4c:	ae0a      	add	r6, sp, #40	; 0x28
    3c4e:	bf94      	ite	ls
    3c50:	3130      	addls	r1, #48	; 0x30
    3c52:	3137      	addhi	r1, #55	; 0x37
    3c54:	4426      	add	r6, r4
    3c56:	b2c9      	uxtb	r1, r1
    3c58:	f806 1c24 	strb.w	r1, [r6, #-36]
			n /= base;
			if (n == 0) break;
    3c5c:	4601      	mov	r1, r0
    3c5e:	b110      	cbz	r0, 3c66 <_ZN5Print11printNumberEmhh+0x4c>
			i--;
    3c60:	3c01      	subs	r4, #1
    3c62:	b2e4      	uxtb	r4, r4
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    3c64:	e7ec      	b.n	3c40 <_ZN5Print11printNumberEmhh+0x26>
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    3c66:	b133      	cbz	r3, 3c76 <_ZN5Print11printNumberEmhh+0x5c>
		i--;
    3c68:	3c01      	subs	r4, #1
    3c6a:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    3c6c:	ab0a      	add	r3, sp, #40	; 0x28
    3c6e:	4423      	add	r3, r4
    3c70:	222d      	movs	r2, #45	; 0x2d
    3c72:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3c76:	682b      	ldr	r3, [r5, #0]
    3c78:	a901      	add	r1, sp, #4
    3c7a:	685b      	ldr	r3, [r3, #4]
    3c7c:	4628      	mov	r0, r5
    3c7e:	4421      	add	r1, r4
    3c80:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    3c84:	4798      	blx	r3
}
    3c86:	b00a      	add	sp, #40	; 0x28
    3c88:	bd70      	pop	{r4, r5, r6, pc}
    3c8a:	ffff 4b1b 			; <UNDEFINED> instruction: 0xffff4b1b

00003c8c <serial_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    3c8c:	4b1b      	ldr	r3, [pc, #108]	; (3cfc <serial_begin+0x70>)
    3c8e:	681a      	ldr	r2, [r3, #0]
    3c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3c94:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
    3c96:	4a1a      	ldr	r2, [pc, #104]	; (3d00 <serial_begin+0x74>)
    3c98:	2300      	movs	r3, #0
    3c9a:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    3c9c:	4a19      	ldr	r2, [pc, #100]	; (3d04 <serial_begin+0x78>)
    3c9e:	7013      	strb	r3, [r2, #0]
	tx_buffer_head = 0;
    3ca0:	4a19      	ldr	r2, [pc, #100]	; (3d08 <serial_begin+0x7c>)
    3ca2:	7013      	strb	r3, [r2, #0]
	tx_buffer_tail = 0;
    3ca4:	4a19      	ldr	r2, [pc, #100]	; (3d0c <serial_begin+0x80>)
    3ca6:	7013      	strb	r3, [r2, #0]
	transmitting = 0;
    3ca8:	4a19      	ldr	r2, [pc, #100]	; (3d10 <serial_begin+0x84>)
    3caa:	7013      	strb	r3, [r2, #0]
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    3cac:	4b19      	ldr	r3, [pc, #100]	; (3d14 <serial_begin+0x88>)
    3cae:	f240 3213 	movw	r2, #787	; 0x313
    3cb2:	601a      	str	r2, [r3, #0]
	CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    3cb4:	f44f 7251 	mov.w	r2, #836	; 0x344
    3cb8:	605a      	str	r2, [r3, #4]
	UART0_BDH = (divisor >> 13) & 0x1F;
    3cba:	4b17      	ldr	r3, [pc, #92]	; (3d18 <serial_begin+0x8c>)
    3cbc:	f3c0 3244 	ubfx	r2, r0, #13, #5
    3cc0:	701a      	strb	r2, [r3, #0]
	UART0_BDL = (divisor >> 5) & 0xFF;
    3cc2:	f3c0 1247 	ubfx	r2, r0, #5, #8
    3cc6:	705a      	strb	r2, [r3, #1]
	UART0_C4 = divisor & 0x1F;
    3cc8:	f000 001f 	and.w	r0, r0, #31
	//UART0_C1 = 0;
	UART0_C1 = UART_C1_ILT;
    3ccc:	4a13      	ldr	r2, [pc, #76]	; (3d1c <serial_begin+0x90>)
	transmitting = 0;
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
    3cce:	7298      	strb	r0, [r3, #10]
	//UART0_C1 = 0;
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    3cd0:	2102      	movs	r1, #2
	CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
	//UART0_C1 = 0;
	UART0_C1 = UART_C1_ILT;
    3cd2:	2304      	movs	r3, #4
    3cd4:	7013      	strb	r3, [r2, #0]
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    3cd6:	7451      	strb	r1, [r2, #17]
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    3cd8:	74d3      	strb	r3, [r2, #19]
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    3cda:	4b11      	ldr	r3, [pc, #68]	; (3d20 <serial_begin+0x94>)
    3cdc:	2288      	movs	r2, #136	; 0x88
    3cde:	701a      	strb	r2, [r3, #0]
	UART0_C2 = C2_TX_INACTIVE;
    3ce0:	223c      	movs	r2, #60	; 0x3c
    3ce2:	f803 2c0d 	strb.w	r2, [r3, #-13]
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    3ce6:	4b0f      	ldr	r3, [pc, #60]	; (3d24 <serial_begin+0x98>)
    3ce8:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    3cea:	f46f 714a 	mvn.w	r1, #808	; 0x328
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    3cee:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    3cf0:	440b      	add	r3, r1
    3cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3cf6:	601a      	str	r2, [r3, #0]
    3cf8:	4770      	bx	lr
    3cfa:	bf00      	nop
    3cfc:	40048034 	.word	0x40048034
    3d00:	1fff922e 	.word	0x1fff922e
    3d04:	1fff91ad 	.word	0x1fff91ad
    3d08:	1fff9234 	.word	0x1fff9234
    3d0c:	1fff922f 	.word	0x1fff922f
    3d10:	1fff91ac 	.word	0x1fff91ac
    3d14:	4004a040 	.word	0x4004a040
    3d18:	4006a000 	.word	0x4006a000
    3d1c:	4006a002 	.word	0x4006a002
    3d20:	4006a010 	.word	0x4006a010
    3d24:	e000e42d 	.word	0xe000e42d

00003d28 <serial_format>:

void serial_format(uint32_t format)
{
        uint8_t c;

        c = UART0_C1;
    3d28:	4a13      	ldr	r2, [pc, #76]	; (3d78 <serial_format+0x50>)
    3d2a:	7813      	ldrb	r3, [r2, #0]
        c = (c & ~0x13) | (format & 0x03);      // configure parity
    3d2c:	f000 0103 	and.w	r1, r0, #3
    3d30:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    3d34:	430b      	orrs	r3, r1
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
    3d36:	0741      	lsls	r1, r0, #29
    3d38:	bf48      	it	mi
    3d3a:	f043 0310 	orrmi.w	r3, r3, #16
        UART0_C1 = c;
    3d3e:	7013      	strb	r3, [r2, #0]
        if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    3d40:	f000 030f 	and.w	r3, r0, #15
    3d44:	2b04      	cmp	r3, #4
    3d46:	4b0d      	ldr	r3, [pc, #52]	; (3d7c <serial_format+0x54>)
    3d48:	d103      	bne.n	3d52 <serial_format+0x2a>
    3d4a:	781a      	ldrb	r2, [r3, #0]
    3d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3d50:	701a      	strb	r2, [r3, #0]
        c = UART0_S2 & ~0x10;
    3d52:	490b      	ldr	r1, [pc, #44]	; (3d80 <serial_format+0x58>)
    3d54:	780a      	ldrb	r2, [r1, #0]
        if (format & 0x10) c |= 0x10;           // rx invert
    3d56:	f010 0f10 	tst.w	r0, #16
        c = UART0_C1;
        c = (c & ~0x13) | (format & 0x03);      // configure parity
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
        UART0_C1 = c;
        if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART0_S2 & ~0x10;
    3d5a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x10) c |= 0x10;           // rx invert
    3d5e:	bf18      	it	ne
    3d60:	f042 0210 	orrne.w	r2, r2, #16
        UART0_S2 = c;
    3d64:	700a      	strb	r2, [r1, #0]
        c = UART0_C3 & ~0x10;
    3d66:	781a      	ldrb	r2, [r3, #0]
        if (format & 0x20) c |= 0x10;           // tx invert
    3d68:	0681      	lsls	r1, r0, #26
        UART0_C1 = c;
        if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART0_S2 & ~0x10;
        if (format & 0x10) c |= 0x10;           // rx invert
        UART0_S2 = c;
        c = UART0_C3 & ~0x10;
    3d6a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x20) c |= 0x10;           // tx invert
    3d6e:	bf48      	it	mi
    3d70:	f042 0210 	orrmi.w	r2, r2, #16
        UART0_C3 = c;
    3d74:	701a      	strb	r2, [r3, #0]
    3d76:	4770      	bx	lr
    3d78:	4006a002 	.word	0x4006a002
    3d7c:	4006a006 	.word	0x4006a006
    3d80:	4006a005 	.word	0x4006a005

00003d84 <serial_end>:
        use9Bits = format & 0x80;
#endif
}

void serial_end(void)
{
    3d84:	b508      	push	{r3, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    3d86:	4b0e      	ldr	r3, [pc, #56]	; (3dc0 <serial_end+0x3c>)
    3d88:	681b      	ldr	r3, [r3, #0]
    3d8a:	055b      	lsls	r3, r3, #21
    3d8c:	d400      	bmi.n	3d90 <serial_end+0xc>
    3d8e:	bd08      	pop	{r3, pc}
	while (transmitting) yield();  // wait for buffered data to send
    3d90:	4b0c      	ldr	r3, [pc, #48]	; (3dc4 <serial_end+0x40>)
    3d92:	781a      	ldrb	r2, [r3, #0]
    3d94:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    3d98:	b112      	cbz	r2, 3da0 <serial_end+0x1c>
    3d9a:	f001 fb1e 	bl	53da <yield>
    3d9e:	e7f7      	b.n	3d90 <serial_end+0xc>
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    3da0:	4a09      	ldr	r2, [pc, #36]	; (3dc8 <serial_end+0x44>)
    3da2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    3da6:	6011      	str	r1, [r2, #0]
	UART0_C2 = 0;
    3da8:	4a08      	ldr	r2, [pc, #32]	; (3dcc <serial_end+0x48>)
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    3daa:	4909      	ldr	r1, [pc, #36]	; (3dd0 <serial_end+0x4c>)
void serial_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
	UART0_C2 = 0;
    3dac:	7013      	strb	r3, [r2, #0]
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    3dae:	f240 1203 	movw	r2, #259	; 0x103
    3db2:	600a      	str	r2, [r1, #0]
	CORE_PIN1_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    3db4:	604a      	str	r2, [r1, #4]
	rx_buffer_head = 0;
    3db6:	4a07      	ldr	r2, [pc, #28]	; (3dd4 <serial_end+0x50>)
    3db8:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    3dba:	4a07      	ldr	r2, [pc, #28]	; (3dd8 <serial_end+0x54>)
    3dbc:	7013      	strb	r3, [r2, #0]
    3dbe:	bd08      	pop	{r3, pc}
    3dc0:	40048034 	.word	0x40048034
    3dc4:	1fff91ac 	.word	0x1fff91ac
    3dc8:	e000e184 	.word	0xe000e184
    3dcc:	4006a003 	.word	0x4006a003
    3dd0:	4004a040 	.word	0x4004a040
    3dd4:	1fff922e 	.word	0x1fff922e
    3dd8:	1fff91ad 	.word	0x1fff91ad

00003ddc <serial_set_transmit_pin>:
}

void serial_set_transmit_pin(uint8_t pin)
{
    3ddc:	b538      	push	{r3, r4, r5, lr}
    3dde:	4604      	mov	r4, r0
	while (transmitting) ;
    3de0:	4b09      	ldr	r3, [pc, #36]	; (3e08 <serial_set_transmit_pin+0x2c>)
    3de2:	781b      	ldrb	r3, [r3, #0]
    3de4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    3de8:	2b00      	cmp	r3, #0
    3dea:	d1f9      	bne.n	3de0 <serial_set_transmit_pin+0x4>
	pinMode(pin, OUTPUT);
    3dec:	4620      	mov	r0, r4
    3dee:	2101      	movs	r1, #1
    3df0:	f7ff fe62 	bl	3ab8 <pinMode>
	digitalWrite(pin, LOW);
    3df4:	4620      	mov	r0, r4
    3df6:	4629      	mov	r1, r5
    3df8:	f7ff fe30 	bl	3a5c <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    3dfc:	4b03      	ldr	r3, [pc, #12]	; (3e0c <serial_set_transmit_pin+0x30>)
    3dfe:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    3e02:	4b03      	ldr	r3, [pc, #12]	; (3e10 <serial_set_transmit_pin+0x34>)
    3e04:	601a      	str	r2, [r3, #0]
    3e06:	bd38      	pop	{r3, r4, r5, pc}
    3e08:	1fff91ac 	.word	0x1fff91ac
    3e0c:	000143c0 	.word	0x000143c0
    3e10:	1fff9230 	.word	0x1fff9230

00003e14 <serial_putchar>:
}

void serial_putchar(uint32_t c)
{
    3e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    3e16:	4b1d      	ldr	r3, [pc, #116]	; (3e8c <serial_putchar+0x78>)
    3e18:	681b      	ldr	r3, [r3, #0]
    3e1a:	055a      	lsls	r2, r3, #21
	digitalWrite(pin, LOW);
	transmit_pin = portOutputRegister(pin);
}

void serial_putchar(uint32_t c)
{
    3e1c:	4607      	mov	r7, r0
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    3e1e:	d534      	bpl.n	3e8a <serial_putchar+0x76>
	if (transmit_pin) *transmit_pin = 1;
    3e20:	4b1b      	ldr	r3, [pc, #108]	; (3e90 <serial_putchar+0x7c>)
    3e22:	681b      	ldr	r3, [r3, #0]
    3e24:	b10b      	cbz	r3, 3e2a <serial_putchar+0x16>
    3e26:	2201      	movs	r2, #1
    3e28:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    3e2a:	4b1a      	ldr	r3, [pc, #104]	; (3e94 <serial_putchar+0x80>)
    3e2c:	781c      	ldrb	r4, [r3, #0]
	if (++head >= TX_BUFFER_SIZE) head = 0;
    3e2e:	3401      	adds	r4, #1
    3e30:	2c40      	cmp	r4, #64	; 0x40
    3e32:	461e      	mov	r6, r3
    3e34:	bf28      	it	cs
    3e36:	2400      	movcs	r4, #0
	while (tx_buffer_tail == head) {
    3e38:	4d17      	ldr	r5, [pc, #92]	; (3e98 <serial_putchar+0x84>)
    3e3a:	782b      	ldrb	r3, [r5, #0]
    3e3c:	42a3      	cmp	r3, r4
    3e3e:	d119      	bne.n	3e74 <serial_putchar+0x60>
		int priority = nvic_execution_priority();
    3e40:	f7ff fc4a 	bl	36d8 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    3e44:	2840      	cmp	r0, #64	; 0x40
    3e46:	dc10      	bgt.n	3e6a <serial_putchar+0x56>
			if ((UART0_S1 & UART_S1_TDRE)) {
    3e48:	4b14      	ldr	r3, [pc, #80]	; (3e9c <serial_putchar+0x88>)
    3e4a:	781b      	ldrb	r3, [r3, #0]
    3e4c:	061b      	lsls	r3, r3, #24
    3e4e:	d5f3      	bpl.n	3e38 <serial_putchar+0x24>
				uint32_t tail = tx_buffer_tail;
    3e50:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    3e52:	4a13      	ldr	r2, [pc, #76]	; (3ea0 <serial_putchar+0x8c>)
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3e54:	3301      	adds	r3, #1
    3e56:	2b40      	cmp	r3, #64	; 0x40
    3e58:	bf28      	it	cs
    3e5a:	2300      	movcs	r3, #0
				n = tx_buffer[tail];
    3e5c:	5cd1      	ldrb	r1, [r2, r3]
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
    3e5e:	4a11      	ldr	r2, [pc, #68]	; (3ea4 <serial_putchar+0x90>)
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    3e60:	b2c9      	uxtb	r1, r1
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
				tx_buffer_tail = tail;
    3e62:	b2db      	uxtb	r3, r3
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
    3e64:	7011      	strb	r1, [r2, #0]
				tx_buffer_tail = tail;
    3e66:	702b      	strb	r3, [r5, #0]
    3e68:	e7e6      	b.n	3e38 <serial_putchar+0x24>
			}
		} else if (priority >= 256) {
    3e6a:	28ff      	cmp	r0, #255	; 0xff
    3e6c:	dde4      	ble.n	3e38 <serial_putchar+0x24>
			yield();
    3e6e:	f001 fab4 	bl	53da <yield>
    3e72:	e7e1      	b.n	3e38 <serial_putchar+0x24>
		}
	}
	tx_buffer[head] = c;
    3e74:	4b0a      	ldr	r3, [pc, #40]	; (3ea0 <serial_putchar+0x8c>)
    3e76:	b2ff      	uxtb	r7, r7
    3e78:	551f      	strb	r7, [r3, r4]
	transmitting = 1;
    3e7a:	4b0b      	ldr	r3, [pc, #44]	; (3ea8 <serial_putchar+0x94>)
    3e7c:	2201      	movs	r2, #1
    3e7e:	701a      	strb	r2, [r3, #0]
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
    3e80:	4b0a      	ldr	r3, [pc, #40]	; (3eac <serial_putchar+0x98>)
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    3e82:	b2e4      	uxtb	r4, r4
	UART0_C2 = C2_TX_ACTIVE;
    3e84:	22bc      	movs	r2, #188	; 0xbc
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    3e86:	7034      	strb	r4, [r6, #0]
	UART0_C2 = C2_TX_ACTIVE;
    3e88:	701a      	strb	r2, [r3, #0]
    3e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e8c:	40048034 	.word	0x40048034
    3e90:	1fff9230 	.word	0x1fff9230
    3e94:	1fff9234 	.word	0x1fff9234
    3e98:	1fff922f 	.word	0x1fff922f
    3e9c:	4006a004 	.word	0x4006a004
    3ea0:	1fff91ae 	.word	0x1fff91ae
    3ea4:	4006a007 	.word	0x4006a007
    3ea8:	1fff91ac 	.word	0x1fff91ac
    3eac:	4006a003 	.word	0x4006a003

00003eb0 <serial_write>:
{
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    3eb0:	4b27      	ldr	r3, [pc, #156]	; (3f50 <serial_write+0xa0>)
    3eb2:	681b      	ldr	r3, [r3, #0]
    3eb4:	055a      	lsls	r2, r3, #21
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
}

void serial_write(const void *buf, unsigned int count)
{
    3eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3eba:	4607      	mov	r7, r0
    3ebc:	468a      	mov	sl, r1
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    3ebe:	d545      	bpl.n	3f4c <serial_write+0x9c>
	if (transmit_pin) *transmit_pin = 1;
    3ec0:	4b24      	ldr	r3, [pc, #144]	; (3f54 <serial_write+0xa4>)
    3ec2:	681b      	ldr	r3, [r3, #0]
    3ec4:	b10b      	cbz	r3, 3eca <serial_write+0x1a>
    3ec6:	2201      	movs	r2, #1
    3ec8:	701a      	strb	r2, [r3, #0]
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3eca:	463d      	mov	r5, r7
}

void serial_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
    3ecc:	eb07 030a 	add.w	r3, r7, sl
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) *transmit_pin = 1;
	while (p < end) {
    3ed0:	429d      	cmp	r5, r3
    3ed2:	d238      	bcs.n	3f46 <serial_write+0x96>
        	head = tx_buffer_head;
    3ed4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3f70 <serial_write+0xc0>
        	if (++head >= TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
    3ed8:	4e1f      	ldr	r6, [pc, #124]	; (3f58 <serial_write+0xa8>)
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) *transmit_pin = 1;
	while (p < end) {
        	head = tx_buffer_head;
    3eda:	f898 4000 	ldrb.w	r4, [r8]
        	if (++head >= TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
    3ede:	f896 9000 	ldrb.w	r9, [r6]

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) *transmit_pin = 1;
	while (p < end) {
        	head = tx_buffer_head;
        	if (++head >= TX_BUFFER_SIZE) head = 0;
    3ee2:	3401      	adds	r4, #1
    3ee4:	2c40      	cmp	r4, #64	; 0x40
    3ee6:	bf28      	it	cs
    3ee8:	2400      	movcs	r4, #0
		if (tx_buffer_tail == head) {
    3eea:	fa5f f989 	uxtb.w	r9, r9
    3eee:	45a1      	cmp	r9, r4
    3ef0:	d11e      	bne.n	3f30 <serial_write+0x80>
        		UART0_C2 = C2_TX_ACTIVE;
    3ef2:	4b1a      	ldr	r3, [pc, #104]	; (3f5c <serial_write+0xac>)
    3ef4:	22bc      	movs	r2, #188	; 0xbc
    3ef6:	701a      	strb	r2, [r3, #0]
			do {
				int priority = nvic_execution_priority();
    3ef8:	f7ff fbee 	bl	36d8 <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    3efc:	2840      	cmp	r0, #64	; 0x40
    3efe:	dc10      	bgt.n	3f22 <serial_write+0x72>
					if ((UART0_S1 & UART_S1_TDRE)) {
    3f00:	4b17      	ldr	r3, [pc, #92]	; (3f60 <serial_write+0xb0>)
    3f02:	781b      	ldrb	r3, [r3, #0]
    3f04:	061b      	lsls	r3, r3, #24
    3f06:	d510      	bpl.n	3f2a <serial_write+0x7a>
						uint32_t tail = tx_buffer_tail;
    3f08:	7833      	ldrb	r3, [r6, #0]
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
    3f0a:	4a16      	ldr	r2, [pc, #88]	; (3f64 <serial_write+0xb4>)
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3f0c:	3301      	adds	r3, #1
    3f0e:	2b40      	cmp	r3, #64	; 0x40
    3f10:	bf28      	it	cs
    3f12:	2300      	movcs	r3, #0
						n = tx_buffer[tail];
    3f14:	5cd1      	ldrb	r1, [r2, r3]
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
    3f16:	4a14      	ldr	r2, [pc, #80]	; (3f68 <serial_write+0xb8>)
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
    3f18:	b2c9      	uxtb	r1, r1
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
						tx_buffer_tail = tail;
    3f1a:	b2db      	uxtb	r3, r3
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
    3f1c:	7011      	strb	r1, [r2, #0]
						tx_buffer_tail = tail;
    3f1e:	7033      	strb	r3, [r6, #0]
    3f20:	e003      	b.n	3f2a <serial_write+0x7a>
					}
				} else if (priority >= 256) {
    3f22:	28ff      	cmp	r0, #255	; 0xff
    3f24:	dd01      	ble.n	3f2a <serial_write+0x7a>
					yield();
    3f26:	f001 fa58 	bl	53da <yield>
				}
			} while (tx_buffer_tail == head);
    3f2a:	7833      	ldrb	r3, [r6, #0]
    3f2c:	454b      	cmp	r3, r9
    3f2e:	d0e3      	beq.n	3ef8 <serial_write+0x48>
		}
        	tx_buffer[head] = *p++;
    3f30:	4b0c      	ldr	r3, [pc, #48]	; (3f64 <serial_write+0xb4>)
    3f32:	f815 2b01 	ldrb.w	r2, [r5], #1
    3f36:	551a      	strb	r2, [r3, r4]
        	transmitting = 1;
    3f38:	4b0c      	ldr	r3, [pc, #48]	; (3f6c <serial_write+0xbc>)
    3f3a:	2201      	movs	r2, #1
        	tx_buffer_head = head;
    3f3c:	b2e4      	uxtb	r4, r4
					yield();
				}
			} while (tx_buffer_tail == head);
		}
        	tx_buffer[head] = *p++;
        	transmitting = 1;
    3f3e:	701a      	strb	r2, [r3, #0]
        	tx_buffer_head = head;
    3f40:	f888 4000 	strb.w	r4, [r8]
    3f44:	e7c2      	b.n	3ecc <serial_write+0x1c>
	}
        UART0_C2 = C2_TX_ACTIVE;
    3f46:	4b05      	ldr	r3, [pc, #20]	; (3f5c <serial_write+0xac>)
    3f48:	22bc      	movs	r2, #188	; 0xbc
    3f4a:	701a      	strb	r2, [r3, #0]
    3f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f50:	40048034 	.word	0x40048034
    3f54:	1fff9230 	.word	0x1fff9230
    3f58:	1fff922f 	.word	0x1fff922f
    3f5c:	4006a003 	.word	0x4006a003
    3f60:	4006a004 	.word	0x4006a004
    3f64:	1fff91ae 	.word	0x1fff91ae
    3f68:	4006a007 	.word	0x4006a007
    3f6c:	1fff91ac 	.word	0x1fff91ac
    3f70:	1fff9234 	.word	0x1fff9234

00003f74 <serial_flush>:
}

void serial_flush(void)
{
    3f74:	b508      	push	{r3, lr}
	while (transmitting) yield(); // wait
    3f76:	4b03      	ldr	r3, [pc, #12]	; (3f84 <serial_flush+0x10>)
    3f78:	781b      	ldrb	r3, [r3, #0]
    3f7a:	b113      	cbz	r3, 3f82 <serial_flush+0xe>
    3f7c:	f001 fa2d 	bl	53da <yield>
    3f80:	e7f9      	b.n	3f76 <serial_flush+0x2>
}
    3f82:	bd08      	pop	{r3, pc}
    3f84:	1fff91ac 	.word	0x1fff91ac

00003f88 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f88:	4b05      	ldr	r3, [pc, #20]	; (3fa0 <serial_available+0x18>)
    3f8a:	7818      	ldrb	r0, [r3, #0]
	tail = rx_buffer_tail;
    3f8c:	4b05      	ldr	r3, [pc, #20]	; (3fa4 <serial_available+0x1c>)
    3f8e:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f90:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    3f92:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3f94:	4298      	cmp	r0, r3
	return RX_BUFFER_SIZE + head - tail;
    3f96:	bf38      	it	cc
    3f98:	3040      	addcc	r0, #64	; 0x40
    3f9a:	1ac0      	subs	r0, r0, r3
}
    3f9c:	4770      	bx	lr
    3f9e:	bf00      	nop
    3fa0:	1fff922e 	.word	0x1fff922e
    3fa4:	1fff91ad 	.word	0x1fff91ad

00003fa8 <serial_getchar>:
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    3fa8:	4b09      	ldr	r3, [pc, #36]	; (3fd0 <serial_getchar+0x28>)
	tail = rx_buffer_tail;
    3faa:	4a0a      	ldr	r2, [pc, #40]	; (3fd4 <serial_getchar+0x2c>)
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    3fac:	7819      	ldrb	r1, [r3, #0]
	tail = rx_buffer_tail;
    3fae:	7813      	ldrb	r3, [r2, #0]
    3fb0:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    3fb2:	4299      	cmp	r1, r3
    3fb4:	d008      	beq.n	3fc8 <serial_getchar+0x20>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    3fb6:	3301      	adds	r3, #1
    3fb8:	2b40      	cmp	r3, #64	; 0x40
    3fba:	bf28      	it	cs
    3fbc:	2300      	movcs	r3, #0
	c = rx_buffer[tail];
    3fbe:	4906      	ldr	r1, [pc, #24]	; (3fd8 <serial_getchar+0x30>)
    3fc0:	5cc8      	ldrb	r0, [r1, r3]
	rx_buffer_tail = tail;
    3fc2:	b2db      	uxtb	r3, r3
    3fc4:	7013      	strb	r3, [r2, #0]
	return c;
    3fc6:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    3fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
	return c;
}
    3fcc:	4770      	bx	lr
    3fce:	bf00      	nop
    3fd0:	1fff922e 	.word	0x1fff922e
    3fd4:	1fff91ad 	.word	0x1fff91ad
    3fd8:	1fff91ee 	.word	0x1fff91ee

00003fdc <serial_peek>:

int serial_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3fdc:	4b08      	ldr	r3, [pc, #32]	; (4000 <serial_peek+0x24>)
    3fde:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    3fe0:	4b08      	ldr	r3, [pc, #32]	; (4004 <serial_peek+0x28>)
    3fe2:	781b      	ldrb	r3, [r3, #0]
    3fe4:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    3fe6:	429a      	cmp	r2, r3
    3fe8:	d007      	beq.n	3ffa <serial_peek+0x1e>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    3fea:	3301      	adds	r3, #1
    3fec:	2b40      	cmp	r3, #64	; 0x40
    3fee:	bf28      	it	cs
    3ff0:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    3ff2:	4a05      	ldr	r2, [pc, #20]	; (4008 <serial_peek+0x2c>)
    3ff4:	5cd0      	ldrb	r0, [r2, r3]
    3ff6:	b2c0      	uxtb	r0, r0
    3ff8:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    3ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    3ffe:	4770      	bx	lr
    4000:	1fff922e 	.word	0x1fff922e
    4004:	1fff91ad 	.word	0x1fff91ad
    4008:	1fff91ee 	.word	0x1fff91ee

0000400c <serial_clear>:

void serial_clear(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    400c:	4b0a      	ldr	r3, [pc, #40]	; (4038 <serial_clear+0x2c>)
    400e:	681b      	ldr	r3, [r3, #0]
    4010:	055b      	lsls	r3, r3, #21
    4012:	d510      	bpl.n	4036 <serial_clear+0x2a>
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    4014:	4b09      	ldr	r3, [pc, #36]	; (403c <serial_clear+0x30>)
    4016:	781a      	ldrb	r2, [r3, #0]
    4018:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    401c:	701a      	strb	r2, [r3, #0]
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
    401e:	4a08      	ldr	r2, [pc, #32]	; (4040 <serial_clear+0x34>)
    4020:	2140      	movs	r1, #64	; 0x40
    4022:	7011      	strb	r1, [r2, #0]
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    4024:	781a      	ldrb	r2, [r3, #0]
    4026:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    402a:	701a      	strb	r2, [r3, #0]
	rx_buffer_head = rx_buffer_tail;
    402c:	4b05      	ldr	r3, [pc, #20]	; (4044 <serial_clear+0x38>)
    402e:	781a      	ldrb	r2, [r3, #0]
    4030:	4b05      	ldr	r3, [pc, #20]	; (4048 <serial_clear+0x3c>)
    4032:	b2d2      	uxtb	r2, r2
    4034:	701a      	strb	r2, [r3, #0]
    4036:	4770      	bx	lr
    4038:	40048034 	.word	0x40048034
    403c:	4006a003 	.word	0x4006a003
    4040:	4006a011 	.word	0x4006a011
    4044:	1fff91ad 	.word	0x1fff91ad
    4048:	1fff922e 	.word	0x1fff922e

0000404c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect               UART_S2_LBKDIF
//   RxD pin active edge            UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    404c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t head, newhead, tail, n;
	uint8_t avail, c;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    404e:	4a30      	ldr	r2, [pc, #192]	; (4110 <uart0_status_isr+0xc4>)
    4050:	7813      	ldrb	r3, [r2, #0]
    4052:	f013 0f30 	tst.w	r3, #48	; 0x30
    4056:	d025      	beq.n	40a4 <uart0_status_isr+0x58>
		__disable_irq();
    4058:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    405a:	4b2e      	ldr	r3, [pc, #184]	; (4114 <uart0_status_isr+0xc8>)
    405c:	4c2e      	ldr	r4, [pc, #184]	; (4118 <uart0_status_isr+0xcc>)
    405e:	781b      	ldrb	r3, [r3, #0]
		if (avail == 0) {
    4060:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4064:	b92b      	cbnz	r3, 4072 <uart0_status_isr+0x26>
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    4066:	7823      	ldrb	r3, [r4, #0]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4068:	4b2c      	ldr	r3, [pc, #176]	; (411c <uart0_status_isr+0xd0>)
    406a:	2140      	movs	r1, #64	; 0x40
    406c:	7019      	strb	r1, [r3, #0]
			__enable_irq();
    406e:	b662      	cpsie	i
    4070:	e018      	b.n	40a4 <uart0_status_isr+0x58>
		} else {
			__enable_irq();
    4072:	b662      	cpsie	i
			head = rx_buffer_head;
    4074:	4b2a      	ldr	r3, [pc, #168]	; (4120 <uart0_status_isr+0xd4>)
			tail = rx_buffer_tail;
    4076:	4d2b      	ldr	r5, [pc, #172]	; (4124 <uart0_status_isr+0xd8>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4078:	7819      	ldrb	r1, [r3, #0]
			tail = rx_buffer_tail;
    407a:	782e      	ldrb	r6, [r5, #0]
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    407c:	b2c9      	uxtb	r1, r1
			tail = rx_buffer_tail;
    407e:	b2f6      	uxtb	r6, r6
    4080:	461d      	mov	r5, r3
			do {
				n = UART0_D;
				if (use9Bits && (UART0_C3 & 0x80)) n |= 0x100;
				newhead = head + 1;
    4082:	1c4b      	adds	r3, r1, #1
				if (newhead >= RX_BUFFER_SIZE) newhead = 0;
    4084:	2b40      	cmp	r3, #64	; 0x40
		} else {
			__enable_irq();
			head = rx_buffer_head;
			tail = rx_buffer_tail;
			do {
				n = UART0_D;
    4086:	7827      	ldrb	r7, [r4, #0]
				if (use9Bits && (UART0_C3 & 0x80)) n |= 0x100;
				newhead = head + 1;
				if (newhead >= RX_BUFFER_SIZE) newhead = 0;
    4088:	bf28      	it	cs
    408a:	2300      	movcs	r3, #0
				if (newhead != tail) {
    408c:	42b3      	cmp	r3, r6
		} else {
			__enable_irq();
			head = rx_buffer_head;
			tail = rx_buffer_tail;
			do {
				n = UART0_D;
    408e:	b2ff      	uxtb	r7, r7
				if (use9Bits && (UART0_C3 & 0x80)) n |= 0x100;
				newhead = head + 1;
				if (newhead >= RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
    4090:	d002      	beq.n	4098 <uart0_status_isr+0x4c>
					head = newhead;
					rx_buffer[head] = n;
    4092:	4925      	ldr	r1, [pc, #148]	; (4128 <uart0_status_isr+0xdc>)
    4094:	54cf      	strb	r7, [r1, r3]
    4096:	4619      	mov	r1, r3
				}
			} while (--avail > 0);
    4098:	1e43      	subs	r3, r0, #1
    409a:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
    409e:	d1f0      	bne.n	4082 <uart0_status_isr+0x36>
			rx_buffer_head = head;
    40a0:	b2c9      	uxtb	r1, r1
    40a2:	7029      	strb	r1, [r5, #0]
		}
	}
	c = UART0_C2;
    40a4:	4b21      	ldr	r3, [pc, #132]	; (412c <uart0_status_isr+0xe0>)
    40a6:	7819      	ldrb	r1, [r3, #0]
    40a8:	b2c9      	uxtb	r1, r1
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    40aa:	060d      	lsls	r5, r1, #24
    40ac:	d520      	bpl.n	40f0 <uart0_status_isr+0xa4>
    40ae:	7813      	ldrb	r3, [r2, #0]
    40b0:	061c      	lsls	r4, r3, #24
    40b2:	d51d      	bpl.n	40f0 <uart0_status_isr+0xa4>
		head = tx_buffer_head;
    40b4:	4b1e      	ldr	r3, [pc, #120]	; (4130 <uart0_status_isr+0xe4>)
		tail = tx_buffer_tail;
    40b6:	481f      	ldr	r0, [pc, #124]	; (4134 <uart0_status_isr+0xe8>)
			rx_buffer_head = head;
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    40b8:	781e      	ldrb	r6, [r3, #0]
		tail = tx_buffer_tail;
    40ba:	7803      	ldrb	r3, [r0, #0]
			rx_buffer_head = head;
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    40bc:	b2f6      	uxtb	r6, r6
		tail = tx_buffer_tail;
    40be:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    40c0:	42b3      	cmp	r3, r6
    40c2:	d00d      	beq.n	40e0 <uart0_status_isr+0x94>
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    40c4:	3301      	adds	r3, #1
    40c6:	2b40      	cmp	r3, #64	; 0x40
			avail = UART0_S1;
    40c8:	7814      	ldrb	r4, [r2, #0]
			n = tx_buffer[tail];
    40ca:	4c1b      	ldr	r4, [pc, #108]	; (4138 <uart0_status_isr+0xec>)
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    40cc:	bf28      	it	cs
    40ce:	2300      	movcs	r3, #0
			avail = UART0_S1;
			n = tx_buffer[tail];
    40d0:	5ce5      	ldrb	r5, [r4, r3]
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    40d2:	4c11      	ldr	r4, [pc, #68]	; (4118 <uart0_status_isr+0xcc>)
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			avail = UART0_S1;
			n = tx_buffer[tail];
    40d4:	b2ed      	uxtb	r5, r5
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    40d6:	7025      	strb	r5, [r4, #0]
		} while (UART0_TCFIFO < 8);
    40d8:	340d      	adds	r4, #13
    40da:	7824      	ldrb	r4, [r4, #0]
    40dc:	2c07      	cmp	r4, #7
    40de:	d9ef      	bls.n	40c0 <uart0_status_isr+0x74>
		tx_buffer_tail = tail;
    40e0:	b2db      	uxtb	r3, r3
    40e2:	7003      	strb	r3, [r0, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    40e4:	7813      	ldrb	r3, [r2, #0]
    40e6:	0618      	lsls	r0, r3, #24
    40e8:	d502      	bpl.n	40f0 <uart0_status_isr+0xa4>
    40ea:	4b10      	ldr	r3, [pc, #64]	; (412c <uart0_status_isr+0xe0>)
    40ec:	207c      	movs	r0, #124	; 0x7c
    40ee:	7018      	strb	r0, [r3, #0]
	}
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    40f0:	0649      	lsls	r1, r1, #25
    40f2:	d50c      	bpl.n	410e <uart0_status_isr+0xc2>
    40f4:	7813      	ldrb	r3, [r2, #0]
    40f6:	065b      	lsls	r3, r3, #25
    40f8:	d509      	bpl.n	410e <uart0_status_isr+0xc2>
		transmitting = 0;
    40fa:	4b10      	ldr	r3, [pc, #64]	; (413c <uart0_status_isr+0xf0>)
    40fc:	2200      	movs	r2, #0
    40fe:	701a      	strb	r2, [r3, #0]
		if (transmit_pin) *transmit_pin = 0;
    4100:	4b0f      	ldr	r3, [pc, #60]	; (4140 <uart0_status_isr+0xf4>)
    4102:	681b      	ldr	r3, [r3, #0]
    4104:	b103      	cbz	r3, 4108 <uart0_status_isr+0xbc>
    4106:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    4108:	4b08      	ldr	r3, [pc, #32]	; (412c <uart0_status_isr+0xe0>)
    410a:	223c      	movs	r2, #60	; 0x3c
    410c:	701a      	strb	r2, [r3, #0]
    410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4110:	4006a004 	.word	0x4006a004
    4114:	4006a016 	.word	0x4006a016
    4118:	4006a007 	.word	0x4006a007
    411c:	4006a011 	.word	0x4006a011
    4120:	1fff922e 	.word	0x1fff922e
    4124:	1fff91ad 	.word	0x1fff91ad
    4128:	1fff91ee 	.word	0x1fff91ee
    412c:	4006a003 	.word	0x4006a003
    4130:	1fff9234 	.word	0x1fff9234
    4134:	1fff922f 	.word	0x1fff922f
    4138:	1fff91ae 	.word	0x1fff91ae
    413c:	1fff91ac 	.word	0x1fff91ac
    4140:	1fff9230 	.word	0x1fff9230

00004144 <serial2_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    4144:	4b17      	ldr	r3, [pc, #92]	; (41a4 <serial2_begin+0x60>)
    4146:	681a      	ldr	r2, [r3, #0]
    4148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    414c:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
    414e:	4a16      	ldr	r2, [pc, #88]	; (41a8 <serial2_begin+0x64>)
    4150:	2300      	movs	r3, #0
    4152:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    4154:	4a15      	ldr	r2, [pc, #84]	; (41ac <serial2_begin+0x68>)
    4156:	7013      	strb	r3, [r2, #0]
	tx_buffer_head = 0;
    4158:	4a15      	ldr	r2, [pc, #84]	; (41b0 <serial2_begin+0x6c>)
    415a:	7013      	strb	r3, [r2, #0]
	tx_buffer_tail = 0;
    415c:	4a15      	ldr	r2, [pc, #84]	; (41b4 <serial2_begin+0x70>)
    415e:	7013      	strb	r3, [r2, #0]
	transmitting = 0;
    4160:	4a15      	ldr	r2, [pc, #84]	; (41b8 <serial2_begin+0x74>)
    4162:	7013      	strb	r3, [r2, #0]
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    4164:	4a15      	ldr	r2, [pc, #84]	; (41bc <serial2_begin+0x78>)
    4166:	f240 3113 	movw	r1, #787	; 0x313
    416a:	6011      	str	r1, [r2, #0]
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    416c:	f44f 7151 	mov.w	r1, #836	; 0x344
    4170:	6051      	str	r1, [r2, #4]
	UART1_BDH = (divisor >> 13) & 0x1F;
    4172:	4a13      	ldr	r2, [pc, #76]	; (41c0 <serial2_begin+0x7c>)
    4174:	f3c0 3144 	ubfx	r1, r0, #13, #5
    4178:	7011      	strb	r1, [r2, #0]
	UART1_BDL = (divisor >> 5) & 0xFF;
    417a:	f3c0 1147 	ubfx	r1, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    417e:	f000 001f 	and.w	r0, r0, #31
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART1_BDH = (divisor >> 13) & 0x1F;
	UART1_BDL = (divisor >> 5) & 0xFF;
    4182:	7051      	strb	r1, [r2, #1]
	UART1_C4 = divisor & 0x1F;
    4184:	7290      	strb	r0, [r2, #10]
	UART1_C1 = 0;
    4186:	7093      	strb	r3, [r2, #2]
	UART1_PFIFO = 0;
    4188:	7413      	strb	r3, [r2, #16]
	UART1_C2 = C2_TX_INACTIVE;
    418a:	4b0e      	ldr	r3, [pc, #56]	; (41c4 <serial2_begin+0x80>)
    418c:	222c      	movs	r2, #44	; 0x2c
    418e:	701a      	strb	r2, [r3, #0]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    4190:	4b0d      	ldr	r3, [pc, #52]	; (41c8 <serial2_begin+0x84>)
    4192:	2240      	movs	r2, #64	; 0x40
    4194:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    4196:	f2a3 332b 	subw	r3, r3, #811	; 0x32b
    419a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    419e:	601a      	str	r2, [r3, #0]
    41a0:	4770      	bx	lr
    41a2:	bf00      	nop
    41a4:	40048034 	.word	0x40048034
    41a8:	1fff929f 	.word	0x1fff929f
    41ac:	1fff9236 	.word	0x1fff9236
    41b0:	1fff92a1 	.word	0x1fff92a1
    41b4:	1fff92a0 	.word	0x1fff92a0
    41b8:	1fff9235 	.word	0x1fff9235
    41bc:	4004b00c 	.word	0x4004b00c
    41c0:	4006b000 	.word	0x4006b000
    41c4:	4006b003 	.word	0x4006b003
    41c8:	e000e42f 	.word	0xe000e42f

000041cc <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    41cc:	4a13      	ldr	r2, [pc, #76]	; (421c <serial2_format+0x50>)
    41ce:	7813      	ldrb	r3, [r2, #0]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    41d0:	f000 0103 	and.w	r1, r0, #3
    41d4:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    41d8:	430b      	orrs	r3, r1
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    41da:	0741      	lsls	r1, r0, #29
    41dc:	bf48      	it	mi
    41de:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_C1 = c;
    41e2:	7013      	strb	r3, [r2, #0]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    41e4:	f000 030f 	and.w	r3, r0, #15
    41e8:	2b04      	cmp	r3, #4
    41ea:	4b0d      	ldr	r3, [pc, #52]	; (4220 <serial2_format+0x54>)
    41ec:	d103      	bne.n	41f6 <serial2_format+0x2a>
    41ee:	781a      	ldrb	r2, [r3, #0]
    41f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    41f4:	701a      	strb	r2, [r3, #0]
	c = UART1_S2 & ~0x10;
    41f6:	490b      	ldr	r1, [pc, #44]	; (4224 <serial2_format+0x58>)
    41f8:	780a      	ldrb	r2, [r1, #0]
	if (format & 0x10) c |= 0x10;		// rx invert
    41fa:	f010 0f10 	tst.w	r0, #16
	c = UART1_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART1_S2 & ~0x10;
    41fe:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    4202:	bf18      	it	ne
    4204:	f042 0210 	orrne.w	r2, r2, #16
	UART1_S2 = c;
    4208:	700a      	strb	r2, [r1, #0]
	c = UART1_C3 & ~0x10;
    420a:	781a      	ldrb	r2, [r3, #0]
	if (format & 0x20) c |= 0x10;		// tx invert
    420c:	0681      	lsls	r1, r0, #26
	UART1_C1 = c;
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART1_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
	c = UART1_C3 & ~0x10;
    420e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x20) c |= 0x10;		// tx invert
    4212:	bf48      	it	mi
    4214:	f042 0210 	orrmi.w	r2, r2, #16
	UART1_C3 = c;
    4218:	701a      	strb	r2, [r3, #0]
    421a:	4770      	bx	lr
    421c:	4006b002 	.word	0x4006b002
    4220:	4006b006 	.word	0x4006b006
    4224:	4006b005 	.word	0x4006b005

00004228 <serial2_end>:
	// UART1_C3.4 = txinv, 0=normal, 1=inverted
	// UART1_S2.4 = rxinv, 0=normal, 1=inverted
}

void serial2_end(void)
{
    4228:	b508      	push	{r3, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    422a:	4b0e      	ldr	r3, [pc, #56]	; (4264 <serial2_end+0x3c>)
    422c:	681b      	ldr	r3, [r3, #0]
    422e:	051b      	lsls	r3, r3, #20
    4230:	d400      	bmi.n	4234 <serial2_end+0xc>
    4232:	bd08      	pop	{r3, pc}
	while (transmitting) yield();  // wait for buffered data to send
    4234:	4b0c      	ldr	r3, [pc, #48]	; (4268 <serial2_end+0x40>)
    4236:	781a      	ldrb	r2, [r3, #0]
    4238:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    423c:	b112      	cbz	r2, 4244 <serial2_end+0x1c>
    423e:	f001 f8cc 	bl	53da <yield>
    4242:	e7f7      	b.n	4234 <serial2_end+0xc>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    4244:	4a09      	ldr	r2, [pc, #36]	; (426c <serial2_end+0x44>)
    4246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    424a:	6011      	str	r1, [r2, #0]
	UART1_C2 = 0;
    424c:	4a08      	ldr	r2, [pc, #32]	; (4270 <serial2_end+0x48>)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    424e:	4909      	ldr	r1, [pc, #36]	; (4274 <serial2_end+0x4c>)
void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    4250:	7013      	strb	r3, [r2, #0]
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    4252:	f240 1203 	movw	r2, #259	; 0x103
    4256:	600a      	str	r2, [r1, #0]
	CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    4258:	604a      	str	r2, [r1, #4]
	rx_buffer_head = 0;
    425a:	4a07      	ldr	r2, [pc, #28]	; (4278 <serial2_end+0x50>)
    425c:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    425e:	4a07      	ldr	r2, [pc, #28]	; (427c <serial2_end+0x54>)
    4260:	7013      	strb	r3, [r2, #0]
    4262:	bd08      	pop	{r3, pc}
    4264:	40048034 	.word	0x40048034
    4268:	1fff9235 	.word	0x1fff9235
    426c:	e000e184 	.word	0xe000e184
    4270:	4006b003 	.word	0x4006b003
    4274:	4004b00c 	.word	0x4004b00c
    4278:	1fff929f 	.word	0x1fff929f
    427c:	1fff9236 	.word	0x1fff9236

00004280 <serial2_putchar>:
}

void serial2_putchar(uint32_t c)
{
    4280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    4282:	4b1b      	ldr	r3, [pc, #108]	; (42f0 <serial2_putchar+0x70>)
    4284:	681b      	ldr	r3, [r3, #0]
    4286:	051a      	lsls	r2, r3, #20
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
}

void serial2_putchar(uint32_t c)
{
    4288:	4607      	mov	r7, r0
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    428a:	d52f      	bpl.n	42ec <serial2_putchar+0x6c>
	head = tx_buffer_head;
    428c:	4b19      	ldr	r3, [pc, #100]	; (42f4 <serial2_putchar+0x74>)
    428e:	781c      	ldrb	r4, [r3, #0]
	if (++head >= TX_BUFFER_SIZE) head = 0;
    4290:	3401      	adds	r4, #1
    4292:	2c28      	cmp	r4, #40	; 0x28
    4294:	461e      	mov	r6, r3
    4296:	bf28      	it	cs
    4298:	2400      	movcs	r4, #0
	while (tx_buffer_tail == head) {
    429a:	4d17      	ldr	r5, [pc, #92]	; (42f8 <serial2_putchar+0x78>)
    429c:	782b      	ldrb	r3, [r5, #0]
    429e:	42a3      	cmp	r3, r4
    42a0:	d119      	bne.n	42d6 <serial2_putchar+0x56>
		int priority = nvic_execution_priority();
    42a2:	f7ff fa19 	bl	36d8 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    42a6:	2840      	cmp	r0, #64	; 0x40
    42a8:	dc10      	bgt.n	42cc <serial2_putchar+0x4c>
			if ((UART1_S1 & UART_S1_TDRE)) {
    42aa:	4b14      	ldr	r3, [pc, #80]	; (42fc <serial2_putchar+0x7c>)
    42ac:	781b      	ldrb	r3, [r3, #0]
    42ae:	061b      	lsls	r3, r3, #24
    42b0:	d5f3      	bpl.n	429a <serial2_putchar+0x1a>
				uint32_t tail = tx_buffer_tail;
    42b2:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART1_D = tx_buffer[tail];
    42b4:	4a12      	ldr	r2, [pc, #72]	; (4300 <serial2_putchar+0x80>)
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART1_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
    42b6:	3301      	adds	r3, #1
    42b8:	2b28      	cmp	r3, #40	; 0x28
    42ba:	bf28      	it	cs
    42bc:	2300      	movcs	r3, #0
				UART1_D = tx_buffer[tail];
    42be:	5cd1      	ldrb	r1, [r2, r3]
    42c0:	4a10      	ldr	r2, [pc, #64]	; (4304 <serial2_putchar+0x84>)
    42c2:	b2c9      	uxtb	r1, r1
				tx_buffer_tail = tail;
    42c4:	b2db      	uxtb	r3, r3
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART1_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART1_D = tx_buffer[tail];
    42c6:	7011      	strb	r1, [r2, #0]
				tx_buffer_tail = tail;
    42c8:	702b      	strb	r3, [r5, #0]
    42ca:	e7e6      	b.n	429a <serial2_putchar+0x1a>
			}
		} else if (priority >= 256) {
    42cc:	28ff      	cmp	r0, #255	; 0xff
    42ce:	dde4      	ble.n	429a <serial2_putchar+0x1a>
			yield(); // wait
    42d0:	f001 f883 	bl	53da <yield>
    42d4:	e7e1      	b.n	429a <serial2_putchar+0x1a>
		}
	}
	tx_buffer[head] = c;
    42d6:	4b0a      	ldr	r3, [pc, #40]	; (4300 <serial2_putchar+0x80>)
    42d8:	b2ff      	uxtb	r7, r7
    42da:	551f      	strb	r7, [r3, r4]
	transmitting = 1;
    42dc:	4b0a      	ldr	r3, [pc, #40]	; (4308 <serial2_putchar+0x88>)
    42de:	2201      	movs	r2, #1
    42e0:	701a      	strb	r2, [r3, #0]
	tx_buffer_head = head;
	UART1_C2 = C2_TX_ACTIVE;
    42e2:	4b0a      	ldr	r3, [pc, #40]	; (430c <serial2_putchar+0x8c>)
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    42e4:	b2e4      	uxtb	r4, r4
	UART1_C2 = C2_TX_ACTIVE;
    42e6:	22ac      	movs	r2, #172	; 0xac
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    42e8:	7034      	strb	r4, [r6, #0]
	UART1_C2 = C2_TX_ACTIVE;
    42ea:	701a      	strb	r2, [r3, #0]
    42ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42ee:	bf00      	nop
    42f0:	40048034 	.word	0x40048034
    42f4:	1fff92a1 	.word	0x1fff92a1
    42f8:	1fff92a0 	.word	0x1fff92a0
    42fc:	4006b004 	.word	0x4006b004
    4300:	1fff9237 	.word	0x1fff9237
    4304:	4006b007 	.word	0x4006b007
    4308:	1fff9235 	.word	0x1fff9235
    430c:	4006b003 	.word	0x4006b003

00004310 <serial2_write>:
}

void serial2_write(const void *buf, unsigned int count)
{
    4310:	b538      	push	{r3, r4, r5, lr}
    4312:	4604      	mov	r4, r0
    4314:	1845      	adds	r5, r0, r1
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial2_putchar(*p++);
    4316:	42ac      	cmp	r4, r5
    4318:	d004      	beq.n	4324 <serial2_write+0x14>
    431a:	f814 0b01 	ldrb.w	r0, [r4], #1
    431e:	f7ff ffaf 	bl	4280 <serial2_putchar>
    4322:	e7f8      	b.n	4316 <serial2_write+0x6>
}
    4324:	bd38      	pop	{r3, r4, r5, pc}
    4326:	ffff b508 	vabal.u<illegal width 64>	<illegal reg q13.5>, d15, d8

00004328 <serial2_flush>:

void serial2_flush(void)
{
    4328:	b508      	push	{r3, lr}
	while (transmitting) yield(); // wait
    432a:	4b03      	ldr	r3, [pc, #12]	; (4338 <serial2_flush+0x10>)
    432c:	781b      	ldrb	r3, [r3, #0]
    432e:	b113      	cbz	r3, 4336 <serial2_flush+0xe>
    4330:	f001 f853 	bl	53da <yield>
    4334:	e7f9      	b.n	432a <serial2_flush+0x2>
}
    4336:	bd08      	pop	{r3, pc}
    4338:	1fff9235 	.word	0x1fff9235

0000433c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    433c:	4b05      	ldr	r3, [pc, #20]	; (4354 <serial2_available+0x18>)
    433e:	7818      	ldrb	r0, [r3, #0]
	tail = rx_buffer_tail;
    4340:	4b05      	ldr	r3, [pc, #20]	; (4358 <serial2_available+0x1c>)
    4342:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4344:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4346:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4348:	4298      	cmp	r0, r3
	return RX_BUFFER_SIZE + head - tail;
    434a:	bf38      	it	cc
    434c:	3040      	addcc	r0, #64	; 0x40
    434e:	1ac0      	subs	r0, r0, r3
}
    4350:	4770      	bx	lr
    4352:	bf00      	nop
    4354:	1fff929f 	.word	0x1fff929f
    4358:	1fff9236 	.word	0x1fff9236

0000435c <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    435c:	4b09      	ldr	r3, [pc, #36]	; (4384 <serial2_getchar+0x28>)
	tail = rx_buffer_tail;
    435e:	4a0a      	ldr	r2, [pc, #40]	; (4388 <serial2_getchar+0x2c>)
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4360:	7819      	ldrb	r1, [r3, #0]
	tail = rx_buffer_tail;
    4362:	7813      	ldrb	r3, [r2, #0]
    4364:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    4366:	4299      	cmp	r1, r3
    4368:	d008      	beq.n	437c <serial2_getchar+0x20>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    436a:	3301      	adds	r3, #1
    436c:	2b40      	cmp	r3, #64	; 0x40
    436e:	bf28      	it	cs
    4370:	2300      	movcs	r3, #0
	c = rx_buffer[tail];
    4372:	4906      	ldr	r1, [pc, #24]	; (438c <serial2_getchar+0x30>)
    4374:	5cc8      	ldrb	r0, [r1, r3]
	rx_buffer_tail = tail;
    4376:	b2db      	uxtb	r3, r3
    4378:	7013      	strb	r3, [r2, #0]
	return c;
    437a:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    437c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
	return c;
}
    4380:	4770      	bx	lr
    4382:	bf00      	nop
    4384:	1fff929f 	.word	0x1fff929f
    4388:	1fff9236 	.word	0x1fff9236
    438c:	1fff925f 	.word	0x1fff925f

00004390 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4390:	4b08      	ldr	r3, [pc, #32]	; (43b4 <serial2_peek+0x24>)
    4392:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    4394:	4b08      	ldr	r3, [pc, #32]	; (43b8 <serial2_peek+0x28>)
    4396:	781b      	ldrb	r3, [r3, #0]
    4398:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    439a:	429a      	cmp	r2, r3
    439c:	d007      	beq.n	43ae <serial2_peek+0x1e>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    439e:	3301      	adds	r3, #1
    43a0:	2b40      	cmp	r3, #64	; 0x40
    43a2:	bf28      	it	cs
    43a4:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    43a6:	4a05      	ldr	r2, [pc, #20]	; (43bc <serial2_peek+0x2c>)
    43a8:	5cd0      	ldrb	r0, [r2, r3]
    43aa:	b2c0      	uxtb	r0, r0
    43ac:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    43ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    43b2:	4770      	bx	lr
    43b4:	1fff929f 	.word	0x1fff929f
    43b8:	1fff9236 	.word	0x1fff9236
    43bc:	1fff925f 	.word	0x1fff925f

000043c0 <serial2_clear>:

void serial2_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    43c0:	4b02      	ldr	r3, [pc, #8]	; (43cc <serial2_clear+0xc>)
    43c2:	781a      	ldrb	r2, [r3, #0]
    43c4:	4b02      	ldr	r3, [pc, #8]	; (43d0 <serial2_clear+0x10>)
    43c6:	b2d2      	uxtb	r2, r2
    43c8:	701a      	strb	r2, [r3, #0]
    43ca:	4770      	bx	lr
    43cc:	1fff9236 	.word	0x1fff9236
    43d0:	1fff929f 	.word	0x1fff929f

000043d4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect               UART_S2_LBKDIF
//   RxD pin active edge            UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    43d4:	b570      	push	{r4, r5, r6, lr}
	uint32_t head, tail, n;
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
    43d6:	491e      	ldr	r1, [pc, #120]	; (4450 <uart1_status_isr+0x7c>)
    43d8:	780b      	ldrb	r3, [r1, #0]
    43da:	069e      	lsls	r6, r3, #26
    43dc:	d510      	bpl.n	4400 <uart1_status_isr+0x2c>
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
    43de:	4b1d      	ldr	r3, [pc, #116]	; (4454 <uart1_status_isr+0x80>)
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    43e0:	4a1d      	ldr	r2, [pc, #116]	; (4458 <uart1_status_isr+0x84>)
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
    43e2:	781c      	ldrb	r4, [r3, #0]
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    43e4:	7813      	ldrb	r3, [r2, #0]
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43e6:	481d      	ldr	r0, [pc, #116]	; (445c <uart1_status_isr+0x88>)
	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    43e8:	3301      	adds	r3, #1
		if (head >= RX_BUFFER_SIZE) head = 0;
    43ea:	2b40      	cmp	r3, #64	; 0x40
		if (head != rx_buffer_tail) {
    43ec:	7800      	ldrb	r0, [r0, #0]
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
    43ee:	bf28      	it	cs
    43f0:	2300      	movcs	r3, #0
		if (head != rx_buffer_tail) {
    43f2:	4283      	cmp	r3, r0
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
    43f4:	b2e4      	uxtb	r4, r4
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43f6:	d003      	beq.n	4400 <uart1_status_isr+0x2c>
			rx_buffer[head] = n;
    43f8:	4819      	ldr	r0, [pc, #100]	; (4460 <uart1_status_isr+0x8c>)
    43fa:	54c4      	strb	r4, [r0, r3]
			rx_buffer_head = head; 
    43fc:	b2db      	uxtb	r3, r3
    43fe:	7013      	strb	r3, [r2, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	c = UART1_C2;
    4400:	4a18      	ldr	r2, [pc, #96]	; (4464 <uart1_status_isr+0x90>)
    4402:	7810      	ldrb	r0, [r2, #0]
    4404:	b2c0      	uxtb	r0, r0
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4406:	0605      	lsls	r5, r0, #24
    4408:	d517      	bpl.n	443a <uart1_status_isr+0x66>
    440a:	780b      	ldrb	r3, [r1, #0]
    440c:	061c      	lsls	r4, r3, #24
    440e:	d514      	bpl.n	443a <uart1_status_isr+0x66>
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    4410:	4b15      	ldr	r3, [pc, #84]	; (4468 <uart1_status_isr+0x94>)
		tail = tx_buffer_tail;
    4412:	4c16      	ldr	r4, [pc, #88]	; (446c <uart1_status_isr+0x98>)
		//digitalWriteFast(5, LOW);
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    4414:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    4416:	7823      	ldrb	r3, [r4, #0]
    4418:	b2db      	uxtb	r3, r3
		if (head == tail) {
    441a:	429d      	cmp	r5, r3
    441c:	d102      	bne.n	4424 <uart1_status_isr+0x50>
			UART1_C2 = C2_TX_COMPLETING;
    441e:	236c      	movs	r3, #108	; 0x6c
    4420:	7013      	strb	r3, [r2, #0]
    4422:	e00a      	b.n	443a <uart1_status_isr+0x66>
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    4424:	3301      	adds	r3, #1
    4426:	2b28      	cmp	r3, #40	; 0x28
    4428:	bf28      	it	cs
    442a:	2300      	movcs	r3, #0
			n = tx_buffer[tail];
    442c:	4d10      	ldr	r5, [pc, #64]	; (4470 <uart1_status_isr+0x9c>)
    442e:	5cee      	ldrb	r6, [r5, r3]
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    4430:	4d08      	ldr	r5, [pc, #32]	; (4454 <uart1_status_isr+0x80>)
		tail = tx_buffer_tail;
		if (head == tail) {
			UART1_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4432:	b2f6      	uxtb	r6, r6
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
			tx_buffer_tail = tail;
    4434:	b2db      	uxtb	r3, r3
			UART1_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    4436:	702e      	strb	r6, [r5, #0]
			tx_buffer_tail = tail;
    4438:	7023      	strb	r3, [r4, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    443a:	0640      	lsls	r0, r0, #25
    443c:	d507      	bpl.n	444e <uart1_status_isr+0x7a>
    443e:	780b      	ldrb	r3, [r1, #0]
    4440:	065b      	lsls	r3, r3, #25
    4442:	d504      	bpl.n	444e <uart1_status_isr+0x7a>
		transmitting = 0;
    4444:	4b0b      	ldr	r3, [pc, #44]	; (4474 <uart1_status_isr+0xa0>)
    4446:	2100      	movs	r1, #0
    4448:	7019      	strb	r1, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    444a:	232c      	movs	r3, #44	; 0x2c
    444c:	7013      	strb	r3, [r2, #0]
    444e:	bd70      	pop	{r4, r5, r6, pc}
    4450:	4006b004 	.word	0x4006b004
    4454:	4006b007 	.word	0x4006b007
    4458:	1fff929f 	.word	0x1fff929f
    445c:	1fff9236 	.word	0x1fff9236
    4460:	1fff925f 	.word	0x1fff925f
    4464:	4006b003 	.word	0x4006b003
    4468:	1fff92a1 	.word	0x1fff92a1
    446c:	1fff92a0 	.word	0x1fff92a0
    4470:	1fff9237 	.word	0x1fff9237
    4474:	1fff9235 	.word	0x1fff9235

00004478 <serial3_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    4478:	4b17      	ldr	r3, [pc, #92]	; (44d8 <serial3_begin+0x60>)
    447a:	681a      	ldr	r2, [r3, #0]
    447c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    4480:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
    4482:	4a16      	ldr	r2, [pc, #88]	; (44dc <serial3_begin+0x64>)
    4484:	2300      	movs	r3, #0
    4486:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    4488:	4a15      	ldr	r2, [pc, #84]	; (44e0 <serial3_begin+0x68>)
    448a:	7013      	strb	r3, [r2, #0]
	tx_buffer_head = 0;
    448c:	4a15      	ldr	r2, [pc, #84]	; (44e4 <serial3_begin+0x6c>)
    448e:	7013      	strb	r3, [r2, #0]
	tx_buffer_tail = 0;
    4490:	4a15      	ldr	r2, [pc, #84]	; (44e8 <serial3_begin+0x70>)
    4492:	7013      	strb	r3, [r2, #0]
	transmitting = 0;
    4494:	4a15      	ldr	r2, [pc, #84]	; (44ec <serial3_begin+0x74>)
    4496:	7013      	strb	r3, [r2, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    4498:	4a15      	ldr	r2, [pc, #84]	; (44f0 <serial3_begin+0x78>)
    449a:	f240 3113 	movw	r1, #787	; 0x313
    449e:	6011      	str	r1, [r2, #0]
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    44a0:	f44f 7151 	mov.w	r1, #836	; 0x344
    44a4:	6051      	str	r1, [r2, #4]
	UART2_BDH = (divisor >> 13) & 0x1F;
    44a6:	4a13      	ldr	r2, [pc, #76]	; (44f4 <serial3_begin+0x7c>)
    44a8:	f3c0 3144 	ubfx	r1, r0, #13, #5
    44ac:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    44ae:	f3c0 1147 	ubfx	r1, r0, #5, #8
	UART2_C4 = divisor & 0x1F;
    44b2:	f000 001f 	and.w	r0, r0, #31
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
    44b6:	7051      	strb	r1, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    44b8:	7290      	strb	r0, [r2, #10]
	UART2_C1 = 0;
    44ba:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    44bc:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    44be:	4b0e      	ldr	r3, [pc, #56]	; (44f8 <serial3_begin+0x80>)
    44c0:	222c      	movs	r2, #44	; 0x2c
    44c2:	701a      	strb	r2, [r3, #0]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    44c4:	4b0d      	ldr	r3, [pc, #52]	; (44fc <serial3_begin+0x84>)
    44c6:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    44c8:	f46f 714b 	mvn.w	r1, #812	; 0x32c
	UART2_BDL = (divisor >> 5) & 0xFF;
	UART2_C4 = divisor & 0x1F;
	UART2_C1 = 0;
	UART2_PFIFO = 0;
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    44cc:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    44ce:	440b      	add	r3, r1
    44d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    44d4:	601a      	str	r2, [r3, #0]
    44d6:	4770      	bx	lr
    44d8:	40048034 	.word	0x40048034
    44dc:	1fff930c 	.word	0x1fff930c
    44e0:	1fff92a3 	.word	0x1fff92a3
    44e4:	1fff930e 	.word	0x1fff930e
    44e8:	1fff930d 	.word	0x1fff930d
    44ec:	1fff92a2 	.word	0x1fff92a2
    44f0:	4004c008 	.word	0x4004c008
    44f4:	4006c000 	.word	0x4006c000
    44f8:	4006c003 	.word	0x4006c003
    44fc:	e000e431 	.word	0xe000e431

00004500 <serial3_format>:

void serial3_format(uint32_t format)
{
        uint8_t c;

        c = UART2_C1;
    4500:	4a13      	ldr	r2, [pc, #76]	; (4550 <serial3_format+0x50>)
    4502:	7813      	ldrb	r3, [r2, #0]
        c = (c & ~0x13) | (format & 0x03);      // configure parity
    4504:	f000 0103 	and.w	r1, r0, #3
    4508:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    450c:	430b      	orrs	r3, r1
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
    450e:	0741      	lsls	r1, r0, #29
    4510:	bf48      	it	mi
    4512:	f043 0310 	orrmi.w	r3, r3, #16
        UART2_C1 = c;
    4516:	7013      	strb	r3, [r2, #0]
        if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    4518:	f000 030f 	and.w	r3, r0, #15
    451c:	2b04      	cmp	r3, #4
    451e:	4b0d      	ldr	r3, [pc, #52]	; (4554 <serial3_format+0x54>)
    4520:	d103      	bne.n	452a <serial3_format+0x2a>
    4522:	781a      	ldrb	r2, [r3, #0]
    4524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    4528:	701a      	strb	r2, [r3, #0]
        c = UART2_S2 & ~0x10;
    452a:	490b      	ldr	r1, [pc, #44]	; (4558 <serial3_format+0x58>)
    452c:	780a      	ldrb	r2, [r1, #0]
        if (format & 0x10) c |= 0x10;           // rx invert
    452e:	f010 0f10 	tst.w	r0, #16
        c = UART2_C1;
        c = (c & ~0x13) | (format & 0x03);      // configure parity
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
        UART2_C1 = c;
        if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART2_S2 & ~0x10;
    4532:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x10) c |= 0x10;           // rx invert
    4536:	bf18      	it	ne
    4538:	f042 0210 	orrne.w	r2, r2, #16
        UART2_S2 = c;
    453c:	700a      	strb	r2, [r1, #0]
        c = UART2_C3 & ~0x10;
    453e:	781a      	ldrb	r2, [r3, #0]
        if (format & 0x20) c |= 0x10;           // tx invert
    4540:	0681      	lsls	r1, r0, #26
        UART2_C1 = c;
        if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART2_S2 & ~0x10;
        if (format & 0x10) c |= 0x10;           // rx invert
        UART2_S2 = c;
        c = UART2_C3 & ~0x10;
    4542:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x20) c |= 0x10;           // tx invert
    4546:	bf48      	it	mi
    4548:	f042 0210 	orrmi.w	r2, r2, #16
        UART2_C3 = c;
    454c:	701a      	strb	r2, [r3, #0]
    454e:	4770      	bx	lr
    4550:	4006c002 	.word	0x4006c002
    4554:	4006c006 	.word	0x4006c006
    4558:	4006c005 	.word	0x4006c005

0000455c <serial3_end>:
        use9Bits = format & 0x80;
#endif
}

void serial3_end(void)
{
    455c:	b508      	push	{r3, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    455e:	4b0e      	ldr	r3, [pc, #56]	; (4598 <serial3_end+0x3c>)
    4560:	681b      	ldr	r3, [r3, #0]
    4562:	04db      	lsls	r3, r3, #19
    4564:	d400      	bmi.n	4568 <serial3_end+0xc>
    4566:	bd08      	pop	{r3, pc}
	while (transmitting) yield();  // wait for buffered data to send
    4568:	4b0c      	ldr	r3, [pc, #48]	; (459c <serial3_end+0x40>)
    456a:	781a      	ldrb	r2, [r3, #0]
    456c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4570:	b112      	cbz	r2, 4578 <serial3_end+0x1c>
    4572:	f000 ff32 	bl	53da <yield>
    4576:	e7f7      	b.n	4568 <serial3_end+0xc>
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    4578:	4a09      	ldr	r2, [pc, #36]	; (45a0 <serial3_end+0x44>)
    457a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    457e:	6011      	str	r1, [r2, #0]
	UART2_C2 = 0;
    4580:	4a08      	ldr	r2, [pc, #32]	; (45a4 <serial3_end+0x48>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    4582:	4909      	ldr	r1, [pc, #36]	; (45a8 <serial3_end+0x4c>)
void serial3_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
	UART2_C2 = 0;
    4584:	7013      	strb	r3, [r2, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    4586:	f240 1203 	movw	r2, #259	; 0x103
    458a:	600a      	str	r2, [r1, #0]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    458c:	604a      	str	r2, [r1, #4]
	rx_buffer_head = 0;
    458e:	4a07      	ldr	r2, [pc, #28]	; (45ac <serial3_end+0x50>)
    4590:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    4592:	4a07      	ldr	r2, [pc, #28]	; (45b0 <serial3_end+0x54>)
    4594:	7013      	strb	r3, [r2, #0]
    4596:	bd08      	pop	{r3, pc}
    4598:	40048034 	.word	0x40048034
    459c:	1fff92a2 	.word	0x1fff92a2
    45a0:	e000e184 	.word	0xe000e184
    45a4:	4006c003 	.word	0x4006c003
    45a8:	4004c008 	.word	0x4004c008
    45ac:	1fff930c 	.word	0x1fff930c
    45b0:	1fff92a3 	.word	0x1fff92a3

000045b4 <serial3_putchar>:
}

void serial3_putchar(uint32_t c)
{
    45b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    45b6:	4b1b      	ldr	r3, [pc, #108]	; (4624 <serial3_putchar+0x70>)
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	04da      	lsls	r2, r3, #19
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
}

void serial3_putchar(uint32_t c)
{
    45bc:	4607      	mov	r7, r0
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    45be:	d52f      	bpl.n	4620 <serial3_putchar+0x6c>
	head = tx_buffer_head;
    45c0:	4b19      	ldr	r3, [pc, #100]	; (4628 <serial3_putchar+0x74>)
    45c2:	781c      	ldrb	r4, [r3, #0]
	if (++head >= TX_BUFFER_SIZE) head = 0;
    45c4:	3401      	adds	r4, #1
    45c6:	2c28      	cmp	r4, #40	; 0x28
    45c8:	461e      	mov	r6, r3
    45ca:	bf28      	it	cs
    45cc:	2400      	movcs	r4, #0
	while (tx_buffer_tail == head) {
    45ce:	4d17      	ldr	r5, [pc, #92]	; (462c <serial3_putchar+0x78>)
    45d0:	782b      	ldrb	r3, [r5, #0]
    45d2:	42a3      	cmp	r3, r4
    45d4:	d119      	bne.n	460a <serial3_putchar+0x56>
		int priority = nvic_execution_priority();
    45d6:	f7ff f87f 	bl	36d8 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    45da:	2840      	cmp	r0, #64	; 0x40
    45dc:	dc10      	bgt.n	4600 <serial3_putchar+0x4c>
			if ((UART2_S1 & UART_S1_TDRE)) {
    45de:	4b14      	ldr	r3, [pc, #80]	; (4630 <serial3_putchar+0x7c>)
    45e0:	781b      	ldrb	r3, [r3, #0]
    45e2:	061b      	lsls	r3, r3, #24
    45e4:	d5f3      	bpl.n	45ce <serial3_putchar+0x1a>
				uint32_t tail = tx_buffer_tail;
    45e6:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART2_D = tx_buffer[tail];
    45e8:	4a12      	ldr	r2, [pc, #72]	; (4634 <serial3_putchar+0x80>)
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
    45ea:	3301      	adds	r3, #1
    45ec:	2b28      	cmp	r3, #40	; 0x28
    45ee:	bf28      	it	cs
    45f0:	2300      	movcs	r3, #0
				UART2_D = tx_buffer[tail];
    45f2:	5cd1      	ldrb	r1, [r2, r3]
    45f4:	4a10      	ldr	r2, [pc, #64]	; (4638 <serial3_putchar+0x84>)
    45f6:	b2c9      	uxtb	r1, r1
				tx_buffer_tail = tail;
    45f8:	b2db      	uxtb	r3, r3
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART2_D = tx_buffer[tail];
    45fa:	7011      	strb	r1, [r2, #0]
				tx_buffer_tail = tail;
    45fc:	702b      	strb	r3, [r5, #0]
    45fe:	e7e6      	b.n	45ce <serial3_putchar+0x1a>
			}
		} else if (priority >= 256) {
    4600:	28ff      	cmp	r0, #255	; 0xff
    4602:	dde4      	ble.n	45ce <serial3_putchar+0x1a>
			yield(); // wait
    4604:	f000 fee9 	bl	53da <yield>
    4608:	e7e1      	b.n	45ce <serial3_putchar+0x1a>
		}
	}
	tx_buffer[head] = c;
    460a:	4b0a      	ldr	r3, [pc, #40]	; (4634 <serial3_putchar+0x80>)
    460c:	b2ff      	uxtb	r7, r7
    460e:	551f      	strb	r7, [r3, r4]
	transmitting = 1;
    4610:	4b0a      	ldr	r3, [pc, #40]	; (463c <serial3_putchar+0x88>)
    4612:	2201      	movs	r2, #1
    4614:	701a      	strb	r2, [r3, #0]
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    4616:	4b0a      	ldr	r3, [pc, #40]	; (4640 <serial3_putchar+0x8c>)
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    4618:	b2e4      	uxtb	r4, r4
	UART2_C2 = C2_TX_ACTIVE;
    461a:	22ac      	movs	r2, #172	; 0xac
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    461c:	7034      	strb	r4, [r6, #0]
	UART2_C2 = C2_TX_ACTIVE;
    461e:	701a      	strb	r2, [r3, #0]
    4620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4622:	bf00      	nop
    4624:	40048034 	.word	0x40048034
    4628:	1fff930e 	.word	0x1fff930e
    462c:	1fff930d 	.word	0x1fff930d
    4630:	4006c004 	.word	0x4006c004
    4634:	1fff92a4 	.word	0x1fff92a4
    4638:	4006c007 	.word	0x4006c007
    463c:	1fff92a2 	.word	0x1fff92a2
    4640:	4006c003 	.word	0x4006c003

00004644 <serial3_write>:
}

void serial3_write(const void *buf, unsigned int count)
{
    4644:	b538      	push	{r3, r4, r5, lr}
    4646:	4604      	mov	r4, r0
    4648:	1845      	adds	r5, r0, r1
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    464a:	42ac      	cmp	r4, r5
    464c:	d004      	beq.n	4658 <serial3_write+0x14>
    464e:	f814 0b01 	ldrb.w	r0, [r4], #1
    4652:	f7ff ffaf 	bl	45b4 <serial3_putchar>
    4656:	e7f8      	b.n	464a <serial3_write+0x6>
}
    4658:	bd38      	pop	{r3, r4, r5, pc}
    465a:	ffff b508 	vabal.u<illegal width 64>	<illegal reg q13.5>, d15, d8

0000465c <serial3_flush>:

void serial3_flush(void)
{
    465c:	b508      	push	{r3, lr}
	while (transmitting) yield(); // wait
    465e:	4b03      	ldr	r3, [pc, #12]	; (466c <serial3_flush+0x10>)
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	b113      	cbz	r3, 466a <serial3_flush+0xe>
    4664:	f000 feb9 	bl	53da <yield>
    4668:	e7f9      	b.n	465e <serial3_flush+0x2>
}
    466a:	bd08      	pop	{r3, pc}
    466c:	1fff92a2 	.word	0x1fff92a2

00004670 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4670:	4b05      	ldr	r3, [pc, #20]	; (4688 <serial3_available+0x18>)
    4672:	7818      	ldrb	r0, [r3, #0]
	tail = rx_buffer_tail;
    4674:	4b05      	ldr	r3, [pc, #20]	; (468c <serial3_available+0x1c>)
    4676:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4678:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    467a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    467c:	4298      	cmp	r0, r3
	return RX_BUFFER_SIZE + head - tail;
    467e:	bf38      	it	cc
    4680:	3040      	addcc	r0, #64	; 0x40
    4682:	1ac0      	subs	r0, r0, r3
}
    4684:	4770      	bx	lr
    4686:	bf00      	nop
    4688:	1fff930c 	.word	0x1fff930c
    468c:	1fff92a3 	.word	0x1fff92a3

00004690 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4690:	4b09      	ldr	r3, [pc, #36]	; (46b8 <serial3_getchar+0x28>)
	tail = rx_buffer_tail;
    4692:	4a0a      	ldr	r2, [pc, #40]	; (46bc <serial3_getchar+0x2c>)
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4694:	7819      	ldrb	r1, [r3, #0]
	tail = rx_buffer_tail;
    4696:	7813      	ldrb	r3, [r2, #0]
    4698:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    469a:	4299      	cmp	r1, r3
    469c:	d008      	beq.n	46b0 <serial3_getchar+0x20>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    469e:	3301      	adds	r3, #1
    46a0:	2b40      	cmp	r3, #64	; 0x40
    46a2:	bf28      	it	cs
    46a4:	2300      	movcs	r3, #0
	c = rx_buffer[tail];
    46a6:	4906      	ldr	r1, [pc, #24]	; (46c0 <serial3_getchar+0x30>)
    46a8:	5cc8      	ldrb	r0, [r1, r3]
	rx_buffer_tail = tail;
    46aa:	b2db      	uxtb	r3, r3
    46ac:	7013      	strb	r3, [r2, #0]
	return c;
    46ae:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    46b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
	return c;
}
    46b4:	4770      	bx	lr
    46b6:	bf00      	nop
    46b8:	1fff930c 	.word	0x1fff930c
    46bc:	1fff92a3 	.word	0x1fff92a3
    46c0:	1fff92cc 	.word	0x1fff92cc

000046c4 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    46c4:	4b08      	ldr	r3, [pc, #32]	; (46e8 <serial3_peek+0x24>)
    46c6:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    46c8:	4b08      	ldr	r3, [pc, #32]	; (46ec <serial3_peek+0x28>)
    46ca:	781b      	ldrb	r3, [r3, #0]
    46cc:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    46ce:	429a      	cmp	r2, r3
    46d0:	d007      	beq.n	46e2 <serial3_peek+0x1e>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    46d2:	3301      	adds	r3, #1
    46d4:	2b40      	cmp	r3, #64	; 0x40
    46d6:	bf28      	it	cs
    46d8:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    46da:	4a05      	ldr	r2, [pc, #20]	; (46f0 <serial3_peek+0x2c>)
    46dc:	5cd0      	ldrb	r0, [r2, r3]
    46de:	b2c0      	uxtb	r0, r0
    46e0:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    46e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    46e6:	4770      	bx	lr
    46e8:	1fff930c 	.word	0x1fff930c
    46ec:	1fff92a3 	.word	0x1fff92a3
    46f0:	1fff92cc 	.word	0x1fff92cc

000046f4 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    46f4:	4b02      	ldr	r3, [pc, #8]	; (4700 <serial3_clear+0xc>)
    46f6:	781a      	ldrb	r2, [r3, #0]
    46f8:	4b02      	ldr	r3, [pc, #8]	; (4704 <serial3_clear+0x10>)
    46fa:	b2d2      	uxtb	r2, r2
    46fc:	701a      	strb	r2, [r3, #0]
    46fe:	4770      	bx	lr
    4700:	1fff92a3 	.word	0x1fff92a3
    4704:	1fff930c 	.word	0x1fff930c

00004708 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect               UART_S2_LBKDIF
//   RxD pin active edge            UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4708:	b570      	push	{r4, r5, r6, lr}
	uint32_t head, tail, n;
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
    470a:	491e      	ldr	r1, [pc, #120]	; (4784 <uart2_status_isr+0x7c>)
    470c:	780b      	ldrb	r3, [r1, #0]
    470e:	069e      	lsls	r6, r3, #26
    4710:	d510      	bpl.n	4734 <uart2_status_isr+0x2c>
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
    4712:	4b1d      	ldr	r3, [pc, #116]	; (4788 <uart2_status_isr+0x80>)
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    4714:	4a1d      	ldr	r2, [pc, #116]	; (478c <uart2_status_isr+0x84>)
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
    4716:	781c      	ldrb	r4, [r3, #0]
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    4718:	7813      	ldrb	r3, [r2, #0]
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    471a:	481d      	ldr	r0, [pc, #116]	; (4790 <uart2_status_isr+0x88>)
	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    471c:	3301      	adds	r3, #1
		if (head >= RX_BUFFER_SIZE) head = 0;
    471e:	2b40      	cmp	r3, #64	; 0x40
		if (head != rx_buffer_tail) {
    4720:	7800      	ldrb	r0, [r0, #0]
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
    4722:	bf28      	it	cs
    4724:	2300      	movcs	r3, #0
		if (head != rx_buffer_tail) {
    4726:	4283      	cmp	r3, r0
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
    4728:	b2e4      	uxtb	r4, r4
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    472a:	d003      	beq.n	4734 <uart2_status_isr+0x2c>
			rx_buffer[head] = n;
    472c:	4819      	ldr	r0, [pc, #100]	; (4794 <uart2_status_isr+0x8c>)
    472e:	54c4      	strb	r4, [r0, r3]
			rx_buffer_head = head; 
    4730:	b2db      	uxtb	r3, r3
    4732:	7013      	strb	r3, [r2, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	c = UART2_C2;
    4734:	4a18      	ldr	r2, [pc, #96]	; (4798 <uart2_status_isr+0x90>)
    4736:	7810      	ldrb	r0, [r2, #0]
    4738:	b2c0      	uxtb	r0, r0
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    473a:	0605      	lsls	r5, r0, #24
    473c:	d517      	bpl.n	476e <uart2_status_isr+0x66>
    473e:	780b      	ldrb	r3, [r1, #0]
    4740:	061c      	lsls	r4, r3, #24
    4742:	d514      	bpl.n	476e <uart2_status_isr+0x66>
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    4744:	4b15      	ldr	r3, [pc, #84]	; (479c <uart2_status_isr+0x94>)
		tail = tx_buffer_tail;
    4746:	4c16      	ldr	r4, [pc, #88]	; (47a0 <uart2_status_isr+0x98>)
		//digitalWriteFast(5, LOW);
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    4748:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    474a:	7823      	ldrb	r3, [r4, #0]
    474c:	b2db      	uxtb	r3, r3
		if (head == tail) {
    474e:	429d      	cmp	r5, r3
    4750:	d102      	bne.n	4758 <uart2_status_isr+0x50>
			UART2_C2 = C2_TX_COMPLETING;
    4752:	236c      	movs	r3, #108	; 0x6c
    4754:	7013      	strb	r3, [r2, #0]
    4756:	e00a      	b.n	476e <uart2_status_isr+0x66>
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    4758:	3301      	adds	r3, #1
    475a:	2b28      	cmp	r3, #40	; 0x28
    475c:	bf28      	it	cs
    475e:	2300      	movcs	r3, #0
			n = tx_buffer[tail];
    4760:	4d10      	ldr	r5, [pc, #64]	; (47a4 <uart2_status_isr+0x9c>)
    4762:	5cee      	ldrb	r6, [r5, r3]
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4764:	4d08      	ldr	r5, [pc, #32]	; (4788 <uart2_status_isr+0x80>)
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4766:	b2f6      	uxtb	r6, r6
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
    4768:	b2db      	uxtb	r3, r3
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    476a:	702e      	strb	r6, [r5, #0]
			tx_buffer_tail = tail;
    476c:	7023      	strb	r3, [r4, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    476e:	0640      	lsls	r0, r0, #25
    4770:	d507      	bpl.n	4782 <uart2_status_isr+0x7a>
    4772:	780b      	ldrb	r3, [r1, #0]
    4774:	065b      	lsls	r3, r3, #25
    4776:	d504      	bpl.n	4782 <uart2_status_isr+0x7a>
		transmitting = 0;
    4778:	4b0b      	ldr	r3, [pc, #44]	; (47a8 <uart2_status_isr+0xa0>)
    477a:	2100      	movs	r1, #0
    477c:	7019      	strb	r1, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    477e:	232c      	movs	r3, #44	; 0x2c
    4780:	7013      	strb	r3, [r2, #0]
    4782:	bd70      	pop	{r4, r5, r6, pc}
    4784:	4006c004 	.word	0x4006c004
    4788:	4006c007 	.word	0x4006c007
    478c:	1fff930c 	.word	0x1fff930c
    4790:	1fff92a3 	.word	0x1fff92a3
    4794:	1fff92cc 	.word	0x1fff92cc
    4798:	4006c003 	.word	0x4006c003
    479c:	1fff930e 	.word	0x1fff930e
    47a0:	1fff930d 	.word	0x1fff930d
    47a4:	1fff92a4 	.word	0x1fff92a4
    47a8:	1fff92a2 	.word	0x1fff92a2

000047ac <_ZN13IntervalTimerD1Ev>:
    uint8_t IRQ_PIT_CH;
    ISR myISR;
    bool beginCycles(ISR newISR, uint32_t cycles);
  public:
    IntervalTimer() { status = TIMER_OFF; }
    ~IntervalTimer() { end(); }
    47ac:	b510      	push	{r4, lr}
    47ae:	4604      	mov	r4, r0
    47b0:	f7fe ff12 	bl	35d8 <_ZN13IntervalTimer3endEv>
    47b4:	4620      	mov	r0, r4
    47b6:	bd10      	pop	{r4, pc}

000047b8 <_GLOBAL__sub_I_tone_timer>:
    reg PIT_TCTRL;
    uint8_t IRQ_PIT_CH;
    ISR myISR;
    bool beginCycles(ISR newISR, uint32_t cycles);
  public:
    IntervalTimer() { status = TIMER_OFF; }
    47b8:	4803      	ldr	r0, [pc, #12]	; (47c8 <_GLOBAL__sub_I_tone_timer+0x10>)

static uint32_t tone_toggle_count;
static volatile uint8_t *tone_reg;
static uint8_t tone_pin=255;
static uint16_t tone_frequency=0;
IntervalTimer tone_timer;
    47ba:	4904      	ldr	r1, [pc, #16]	; (47cc <_GLOBAL__sub_I_tone_timer+0x14>)
    47bc:	4a04      	ldr	r2, [pc, #16]	; (47d0 <_GLOBAL__sub_I_tone_timer+0x18>)
    47be:	2300      	movs	r3, #0
    47c0:	7003      	strb	r3, [r0, #0]
    47c2:	f000 be0b 	b.w	53dc <__aeabi_atexit>
    47c6:	bf00      	nop
    47c8:	1fff9310 	.word	0x1fff9310
    47cc:	000047ad 	.word	0x000047ad
    47d0:	1fff8400 	.word	0x1fff8400

000047d4 <usb_init_serialnumber>:
        3,
        {0,0,0,0,0,0,0,0,0,0}
};

void usb_init_serialnumber(void)
{
    47d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    47d6:	b672      	cpsid	i
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    47d8:	4b15      	ldr	r3, [pc, #84]	; (4830 <usb_init_serialnumber+0x5c>)
    47da:	2270      	movs	r2, #112	; 0x70
    47dc:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    47de:	4a15      	ldr	r2, [pc, #84]	; (4834 <usb_init_serialnumber+0x60>)
    47e0:	2141      	movs	r1, #65	; 0x41
    47e2:	7011      	strb	r1, [r2, #0]
	FTFL_FCCOB1 = 15;
    47e4:	210f      	movs	r1, #15
    47e6:	f802 1c01 	strb.w	r1, [r2, #-1]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    47ea:	2280      	movs	r2, #128	; 0x80
    47ec:	701a      	strb	r2, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    47ee:	781a      	ldrb	r2, [r3, #0]
    47f0:	0612      	lsls	r2, r2, #24
    47f2:	d5fc      	bpl.n	47ee <usb_init_serialnumber+0x1a>
	num = *(uint32_t *)&FTFL_FCCOB7;
    47f4:	4b10      	ldr	r3, [pc, #64]	; (4838 <usb_init_serialnumber+0x64>)
    47f6:	6818      	ldr	r0, [r3, #0]
	__enable_irq();
    47f8:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    47fa:	4b10      	ldr	r3, [pc, #64]	; (483c <usb_init_serialnumber+0x68>)
    47fc:	4298      	cmp	r0, r3
    47fe:	bf98      	it	ls
    4800:	230a      	movls	r3, #10
	ultoa(num, buf, 10);
    4802:	ac01      	add	r4, sp, #4
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4804:	bf98      	it	ls
    4806:	4358      	mulls	r0, r3
	ultoa(num, buf, 10);
    4808:	4621      	mov	r1, r4
    480a:	220a      	movs	r2, #10
    480c:	f7fe ff95 	bl	373a <ultoa>
	for (i=0; i<10; i++) {
    4810:	2300      	movs	r3, #0
		char c = buf[i];
    4812:	5ce1      	ldrb	r1, [r4, r3]
    4814:	4a0a      	ldr	r2, [pc, #40]	; (4840 <usb_init_serialnumber+0x6c>)
		if (!c) break;
    4816:	b129      	cbz	r1, 4824 <usb_init_serialnumber+0x50>
    4818:	eb02 0043 	add.w	r0, r2, r3, lsl #1
	num = *(uint32_t *)&FTFL_FCCOB7;
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    481c:	3301      	adds	r3, #1
    481e:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4820:	8041      	strh	r1, [r0, #2]
	num = *(uint32_t *)&FTFL_FCCOB7;
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4822:	d1f6      	bne.n	4812 <usb_init_serialnumber+0x3e>
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4824:	3301      	adds	r3, #1
    4826:	005b      	lsls	r3, r3, #1
    4828:	7013      	strb	r3, [r2, #0]
}
    482a:	b004      	add	sp, #16
    482c:	bd10      	pop	{r4, pc}
    482e:	bf00      	nop
    4830:	40020000 	.word	0x40020000
    4834:	40020007 	.word	0x40020007
    4838:	40020008 	.word	0x40020008
    483c:	0098967f 	.word	0x0098967f
    4840:	1fff84a4 	.word	0x1fff84a4

00004844 <endpoint0_transmit>:
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}


static void endpoint0_transmit(const void *data, uint32_t len)
{
    4844:	b5f0      	push	{r4, r5, r6, r7, lr}
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4846:	4b0c      	ldr	r3, [pc, #48]	; (4878 <endpoint0_transmit+0x34>)
    4848:	4c0c      	ldr	r4, [pc, #48]	; (487c <endpoint0_transmit+0x38>)
    484a:	781a      	ldrb	r2, [r3, #0]
    484c:	f042 0502 	orr.w	r5, r2, #2
    4850:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4854:	f082 0201 	eor.w	r2, r2, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4858:	6070      	str	r0, [r6, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    485a:	4809      	ldr	r0, [pc, #36]	; (4880 <endpoint0_transmit+0x3c>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    485c:	701a      	strb	r2, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    485e:	7806      	ldrb	r6, [r0, #0]
    4860:	2e00      	cmp	r6, #0
    4862:	bf0c      	ite	eq
    4864:	2788      	moveq	r7, #136	; 0x88
    4866:	27c8      	movne	r7, #200	; 0xc8
	ep0_tx_data_toggle ^= 1;
    4868:	f086 0601 	eor.w	r6, r6, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    486c:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
	ep0_tx_data_toggle ^= 1;
    4870:	7006      	strb	r6, [r0, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4872:	f844 1035 	str.w	r1, [r4, r5, lsl #3]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4878:	1fff938c 	.word	0x1fff938c
    487c:	1fff8000 	.word	0x1fff8000
    4880:	1fff9404 	.word	0x1fff9404

00004884 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    4884:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4886:	2b03      	cmp	r3, #3




usb_packet_t *usb_rx(uint32_t endpoint)
{
    4888:	b510      	push	{r4, lr}
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    488a:	d810      	bhi.n	48ae <usb_rx+0x2a>
	__disable_irq();
    488c:	b672      	cpsid	i
	ret = rx_first[endpoint];
    488e:	4a09      	ldr	r2, [pc, #36]	; (48b4 <usb_rx+0x30>)
    4890:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if (ret) {
    4894:	b148      	cbz	r0, 48aa <usb_rx+0x26>
		rx_first[endpoint] = ret->next;
    4896:	6841      	ldr	r1, [r0, #4]
    4898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    489c:	4a06      	ldr	r2, [pc, #24]	; (48b8 <usb_rx+0x34>)
    489e:	8801      	ldrh	r1, [r0, #0]
    48a0:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
    48a4:	1a61      	subs	r1, r4, r1
    48a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	__enable_irq();
    48aa:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    48ac:	bd10      	pop	{r4, pc}

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    48ae:	2000      	movs	r0, #0
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    48b0:	bd10      	pop	{r4, pc}
    48b2:	bf00      	nop
    48b4:	1fff937c 	.word	0x1fff937c
    48b8:	1fff9c80 	.word	0x1fff9c80

000048bc <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    48bc:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    48be:	2803      	cmp	r0, #3
    48c0:	d80a      	bhi.n	48d8 <usb_tx_packet_count+0x1c>
	__disable_irq();
    48c2:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    48c4:	4b05      	ldr	r3, [pc, #20]	; (48dc <usb_tx_packet_count+0x20>)
    48c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    48ca:	2000      	movs	r0, #0

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    48cc:	b113      	cbz	r3, 48d4 <usb_tx_packet_count+0x18>
    48ce:	3001      	adds	r0, #1
    48d0:	685b      	ldr	r3, [r3, #4]
    48d2:	e7fb      	b.n	48cc <usb_tx_packet_count+0x10>
	__enable_irq();
    48d4:	b662      	cpsie	i
	return count;
    48d6:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    48d8:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    48da:	4770      	bx	lr
    48dc:	1fff93d0 	.word	0x1fff93d0

000048e0 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    48e0:	b510      	push	{r4, lr}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    48e2:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    48e4:	2301      	movs	r3, #1
    48e6:	4a17      	ldr	r2, [pc, #92]	; (4944 <usb_rx_memory+0x64>)
    48e8:	441a      	add	r2, r3
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    48ea:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    48ee:	0712      	lsls	r2, r2, #28
    48f0:	d51c      	bpl.n	492c <usb_rx_memory+0x4c>
			if (table[index(i, RX, EVEN)].desc == 0) {
    48f2:	0099      	lsls	r1, r3, #2
    48f4:	4a14      	ldr	r2, [pc, #80]	; (4948 <usb_rx_memory+0x68>)
    48f6:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    48fa:	b92c      	cbnz	r4, 4908 <usb_rx_memory+0x28>
				table[index(i, RX, EVEN)].addr = packet->buf;
    48fc:	eb02 1343 	add.w	r3, r2, r3, lsl #5
    4900:	3008      	adds	r0, #8
    4902:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4904:	4b11      	ldr	r3, [pc, #68]	; (494c <usb_rx_memory+0x6c>)
    4906:	e009      	b.n	491c <usb_rx_memory+0x3c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4908:	f041 0101 	orr.w	r1, r1, #1
    490c:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    4910:	b964      	cbnz	r4, 492c <usb_rx_memory+0x4c>
				table[index(i, RX, ODD)].addr = packet->buf;
    4912:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    4916:	3008      	adds	r0, #8
    4918:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    491a:	4b0d      	ldr	r3, [pc, #52]	; (4950 <usb_rx_memory+0x70>)
    491c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
				usb_rx_memory_needed--;
    4920:	4b0c      	ldr	r3, [pc, #48]	; (4954 <usb_rx_memory+0x74>)
    4922:	781a      	ldrb	r2, [r3, #0]
    4924:	3a01      	subs	r2, #1
    4926:	701a      	strb	r2, [r3, #0]
				__enable_irq();
    4928:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    492a:	bd10      	pop	{r4, pc}
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    492c:	3301      	adds	r3, #1
    492e:	2b05      	cmp	r3, #5
    4930:	d1d9      	bne.n	48e6 <usb_rx_memory+0x6>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    4932:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    4934:	4b07      	ldr	r3, [pc, #28]	; (4954 <usb_rx_memory+0x74>)
    4936:	2200      	movs	r2, #0
    4938:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    493a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    493e:	f000 bbcd 	b.w	50dc <usb_free>
    4942:	bf00      	nop
    4944:	000144d2 	.word	0x000144d2
    4948:	1fff8000 	.word	0x1fff8000
    494c:	00400088 	.word	0x00400088
    4950:	004000c8 	.word	0x004000c8
    4954:	1fff93fa 	.word	0x1fff93fa

00004958 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    4958:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    495a:	2b03      	cmp	r3, #3

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    495c:	b530      	push	{r4, r5, lr}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
    495e:	d832      	bhi.n	49c6 <usb_tx+0x6e>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    4960:	4a19      	ldr	r2, [pc, #100]	; (49c8 <usb_tx+0x70>)
    4962:	0140      	lsls	r0, r0, #5
    4964:	f040 0010 	orr.w	r0, r0, #16
    4968:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    496a:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    496c:	4c17      	ldr	r4, [pc, #92]	; (49cc <usb_tx+0x74>)
    496e:	5ce2      	ldrb	r2, [r4, r3]
    4970:	2a03      	cmp	r2, #3
    4972:	d809      	bhi.n	4988 <usb_tx+0x30>
    4974:	e8df f002 	tbb	[pc, r2]
    4978:	05180216 	.word	0x05180216
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    497c:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    497e:	2202      	movs	r2, #2
		break;
    4980:	e013      	b.n	49aa <usb_tx+0x52>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    4982:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    4984:	2204      	movs	r2, #4
		break;
    4986:	e010      	b.n	49aa <usb_tx+0x52>
	  default:
		if (tx_first[endpoint] == NULL) {
    4988:	4811      	ldr	r0, [pc, #68]	; (49d0 <usb_tx+0x78>)
    498a:	4a12      	ldr	r2, [pc, #72]	; (49d4 <usb_tx+0x7c>)
    498c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    4990:	b914      	cbnz	r4, 4998 <usb_tx+0x40>
			tx_first[endpoint] = packet;
    4992:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    4996:	e002      	b.n	499e <usb_tx+0x46>
		} else {
			tx_last[endpoint]->next = packet;
    4998:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    499c:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    499e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    49a2:	e00f      	b.n	49c4 <usb_tx+0x6c>
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    49a4:	2203      	movs	r2, #3
    49a6:	e000      	b.n	49aa <usb_tx+0x52>
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    49a8:	2205      	movs	r2, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    49aa:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    49ac:	f010 0f08 	tst.w	r0, #8
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    49b0:	f101 0308 	add.w	r3, r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    49b4:	880a      	ldrh	r2, [r1, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    49b6:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    49b8:	bf0c      	ite	eq
    49ba:	2388      	moveq	r3, #136	; 0x88
    49bc:	23c8      	movne	r3, #200	; 0xc8
    49be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    49c2:	6003      	str	r3, [r0, #0]
	__enable_irq();
    49c4:	b662      	cpsie	i
    49c6:	bd30      	pop	{r4, r5, pc}
    49c8:	1fff8000 	.word	0x1fff8000
    49cc:	1fff9338 	.word	0x1fff9338
    49d0:	1fff93d0 	.word	0x1fff93d0
    49d4:	1fff93e0 	.word	0x1fff93e0

000049d8 <usb_isr>:
}



void usb_isr(void)
{
    49d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    49dc:	4fab      	ldr	r7, [pc, #684]	; (4c8c <usb_isr+0x2b4>)
    49de:	783c      	ldrb	r4, [r7, #0]
    49e0:	b2e4      	uxtb	r4, r4

	if ((status & USB_INTEN_SOFTOKEN /* 04 */ )) {
    49e2:	f014 0f04 	tst.w	r4, #4
    49e6:	463d      	mov	r5, r7
    49e8:	d019      	beq.n	4a1e <usb_isr+0x46>
		if (usb_configuration) {
    49ea:	4ba9      	ldr	r3, [pc, #676]	; (4c90 <usb_isr+0x2b8>)
    49ec:	781b      	ldrb	r3, [r3, #0]
    49ee:	b1a3      	cbz	r3, 4a1a <usb_isr+0x42>
			t = usb_reboot_timer;
    49f0:	4aa8      	ldr	r2, [pc, #672]	; (4c94 <usb_isr+0x2bc>)
    49f2:	7811      	ldrb	r1, [r2, #0]
			if (t) {
    49f4:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    49f8:	b121      	cbz	r1, 4a04 <usb_isr+0x2c>
				usb_reboot_timer = --t;
    49fa:	3b01      	subs	r3, #1
    49fc:	b2db      	uxtb	r3, r3
    49fe:	7013      	strb	r3, [r2, #0]
				if (!t) _reboot_Teensyduino_();
    4a00:	b903      	cbnz	r3, 4a04 <usb_isr+0x2c>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    4a02:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    4a04:	4aa4      	ldr	r2, [pc, #656]	; (4c98 <usb_isr+0x2c0>)
    4a06:	7811      	ldrb	r1, [r2, #0]
			if (t) {
    4a08:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    4a0c:	b129      	cbz	r1, 4a1a <usb_isr+0x42>
				usb_cdc_transmit_flush_timer = --t;
    4a0e:	3b01      	subs	r3, #1
    4a10:	b2db      	uxtb	r3, r3
    4a12:	7013      	strb	r3, [r2, #0]
				if (t == 0) usb_serial_flush_callback();
    4a14:	b90b      	cbnz	r3, 4a1a <usb_isr+0x42>
    4a16:	f000 fc75 	bl	5304 <usb_serial_flush_callback>
#endif
#ifdef FLIGHTSIM_INTERFACE
			usb_flightsim_flush_callback();
#endif
		}
		USB0_ISTAT = USB_INTEN_SOFTOKEN;
    4a1a:	2304      	movs	r3, #4
    4a1c:	703b      	strb	r3, [r7, #0]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    4a1e:	f004 0308 	and.w	r3, r4, #8
    4a22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4a26:	2b00      	cmp	r3, #0
    4a28:	f000 8263 	beq.w	4ef2 <usb_isr+0x51a>
		uint8_t endpoint;
		stat = USB0_STAT;
    4a2c:	4b9b      	ldr	r3, [pc, #620]	; (4c9c <usb_isr+0x2c4>)
    4a2e:	4c9c      	ldr	r4, [pc, #624]	; (4ca0 <usb_isr+0x2c8>)
    4a30:	781a      	ldrb	r2, [r3, #0]
    4a32:	b2d2      	uxtb	r2, r2
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    4a34:	0915      	lsrs	r5, r2, #4
    4a36:	ea4f 0892 	mov.w	r8, r2, lsr #2
    4a3a:	f040 81e0 	bne.w	4dfe <usb_isr+0x426>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4a3e:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    4a42:	6859      	ldr	r1, [r3, #4]
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
    4a44:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
    4a48:	f3c3 0383 	ubfx	r3, r3, #2, #4
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4a4c:	3b01      	subs	r3, #1
    4a4e:	2b0c      	cmp	r3, #12
    4a50:	f200 81d2 	bhi.w	4df8 <usb_isr+0x420>
    4a54:	e8df f013 	tbh	[pc, r3, lsl #1]
    4a58:	01910191 	.word	0x01910191
    4a5c:	01d001d0 	.word	0x01d001d0
    4a60:	01d001d0 	.word	0x01d001d0
    4a64:	01d001d0 	.word	0x01d001d0
    4a68:	01d001ac 	.word	0x01d001ac
    4a6c:	01d001d0 	.word	0x01d001d0
    4a70:	000d      	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4a72:	4d8c      	ldr	r5, [pc, #560]	; (4ca4 <usb_isr+0x2cc>)
    4a74:	680a      	ldr	r2, [r1, #0]
		setup.word2 = *(uint32_t *)(buf + 4);
    4a76:	684b      	ldr	r3, [r1, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4a78:	488b      	ldr	r0, [pc, #556]	; (4ca8 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    4a7a:	606b      	str	r3, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4a7c:	2101      	movs	r1, #1
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4a7e:	4b8b      	ldr	r3, [pc, #556]	; (4cac <usb_isr+0x2d4>)
    4a80:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4a84:	602a      	str	r2, [r5, #0]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4a86:	f8df 8250 	ldr.w	r8, [pc, #592]	; 4cd8 <usb_isr+0x300>
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4a8a:	7001      	strb	r1, [r0, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4a8c:	b292      	uxth	r2, r2
    4a8e:	f240 6081 	movw	r0, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4a92:	2300      	movs	r3, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4a94:	4282      	cmp	r2, r0
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4a96:	f8c8 3000 	str.w	r3, [r8]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4a9a:	6123      	str	r3, [r4, #16]
		table[index(0, TX, ODD)].desc = 0;
    4a9c:	61a3      	str	r3, [r4, #24]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4a9e:	d817      	bhi.n	4ad0 <usb_isr+0xf8>
    4aa0:	f5b2 6fd0 	cmp.w	r2, #1664	; 0x680
    4aa4:	f080 811e 	bcs.w	4ce4 <usb_isr+0x30c>
    4aa8:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    4aac:	f000 80cf 	beq.w	4c4e <usb_isr+0x276>
    4ab0:	d806      	bhi.n	4ac0 <usb_isr+0xe8>
    4ab2:	2a80      	cmp	r2, #128	; 0x80
    4ab4:	f000 80ba 	beq.w	4c2c <usb_isr+0x254>
    4ab8:	2a82      	cmp	r2, #130	; 0x82
    4aba:	f000 80bb 	beq.w	4c34 <usb_isr+0x25c>
    4abe:	e12d      	b.n	4d1c <usb_isr+0x344>
    4ac0:	f240 3302 	movw	r3, #770	; 0x302
    4ac4:	429a      	cmp	r2, r3
    4ac6:	f000 80d1 	beq.w	4c6c <usb_isr+0x294>
    4aca:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    4ace:	e01c      	b.n	4b0a <usb_isr+0x132>
    4ad0:	f242 0021 	movw	r0, #8225	; 0x2021
    4ad4:	4282      	cmp	r2, r0
    4ad6:	f000 814d 	beq.w	4d74 <usb_isr+0x39c>
    4ada:	d80e      	bhi.n	4afa <usb_isr+0x122>
    4adc:	f5b2 6f08 	cmp.w	r2, #2176	; 0x880
    4ae0:	f000 809e 	beq.w	4c20 <usb_isr+0x248>
    4ae4:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    4ae8:	f040 8118 	bne.w	4d1c <usb_isr+0x344>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    4aec:	4b68      	ldr	r3, [pc, #416]	; (4c90 <usb_isr+0x2b8>)
    4aee:	4e6c      	ldr	r6, [pc, #432]	; (4ca0 <usb_isr+0x2c8>)
    4af0:	78aa      	ldrb	r2, [r5, #2]
    4af2:	701a      	strb	r2, [r3, #0]
    4af4:	f106 0980 	add.w	r9, r6, #128	; 0x80
    4af8:	e00a      	b.n	4b10 <usb_isr+0x138>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4afa:	f242 2121 	movw	r1, #8737	; 0x2221
    4afe:	428a      	cmp	r2, r1
    4b00:	f000 8108 	beq.w	4d14 <usb_isr+0x33c>
    4b04:	f242 3321 	movw	r3, #8993	; 0x2321
    4b08:	429a      	cmp	r2, r3
    4b0a:	f000 810b 	beq.w	4d24 <usb_isr+0x34c>
    4b0e:	e105      	b.n	4d1c <usb_isr+0x344>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    4b10:	6a33      	ldr	r3, [r6, #32]
    4b12:	061b      	lsls	r3, r3, #24
    4b14:	d503      	bpl.n	4b1e <usb_isr+0x146>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    4b16:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4b18:	3808      	subs	r0, #8
    4b1a:	f000 fadf 	bl	50dc <usb_free>
    4b1e:	3608      	adds	r6, #8
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    4b20:	454e      	cmp	r6, r9
    4b22:	d1f5      	bne.n	4b10 <usb_isr+0x138>
    4b24:	2600      	movs	r6, #0
    4b26:	46b1      	mov	r9, r6
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    4b28:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 4cdc <usb_isr+0x304>
    4b2c:	f856 000a 	ldr.w	r0, [r6, sl]
			while (p) {
    4b30:	b128      	cbz	r0, 4b3e <usb_isr+0x166>
				n = p->next;
    4b32:	f8d0 b004 	ldr.w	fp, [r0, #4]
				usb_free(p);
    4b36:	f000 fad1 	bl	50dc <usb_free>
				p = n;
    4b3a:	4658      	mov	r0, fp
    4b3c:	e7f8      	b.n	4b30 <usb_isr+0x158>
			}
			rx_first[i] = NULL;
    4b3e:	f84a 0006 	str.w	r0, [sl, r6]
			rx_last[i] = NULL;
    4b42:	4b5b      	ldr	r3, [pc, #364]	; (4cb0 <usb_isr+0x2d8>)
			p = tx_first[i];
    4b44:	f8df a198 	ldr.w	sl, [pc, #408]	; 4ce0 <usb_isr+0x308>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    4b48:	50f0      	str	r0, [r6, r3]
			p = tx_first[i];
    4b4a:	f856 000a 	ldr.w	r0, [r6, sl]
			while (p) {
    4b4e:	b128      	cbz	r0, 4b5c <usb_isr+0x184>
				n = p->next;
    4b50:	f8d0 b004 	ldr.w	fp, [r0, #4]
				usb_free(p);
    4b54:	f000 fac2 	bl	50dc <usb_free>
				p = n;
    4b58:	4658      	mov	r0, fp
    4b5a:	e7f8      	b.n	4b4e <usb_isr+0x176>
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    4b5c:	4b55      	ldr	r3, [pc, #340]	; (4cb4 <usb_isr+0x2dc>)
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    4b5e:	f84a 0006 	str.w	r0, [sl, r6]
			tx_last[i] = NULL;
    4b62:	50f0      	str	r0, [r6, r3]
			usb_rx_byte_count_data[i] = 0;
    4b64:	4b54      	ldr	r3, [pc, #336]	; (4cb8 <usb_isr+0x2e0>)
    4b66:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
			switch (tx_state[i]) {
    4b6a:	4b54      	ldr	r3, [pc, #336]	; (4cbc <usb_isr+0x2e4>)
    4b6c:	f819 2003 	ldrb.w	r2, [r9, r3]
    4b70:	3a02      	subs	r2, #2
    4b72:	2a03      	cmp	r2, #3
    4b74:	d808      	bhi.n	4b88 <usb_isr+0x1b0>
    4b76:	e8df f002 	tbb	[pc, r2]
    4b7a:	0402      	.short	0x0402
    4b7c:	0402      	.short	0x0402
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    4b7e:	2200      	movs	r2, #0
    4b80:	e000      	b.n	4b84 <usb_isr+0x1ac>
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4b82:	2201      	movs	r2, #1
    4b84:	f803 2009 	strb.w	r2, [r3, r9]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    4b88:	f109 0901 	add.w	r9, r9, #1
    4b8c:	f1b9 0f04 	cmp.w	r9, #4
    4b90:	f106 0604 	add.w	r6, r6, #4
    4b94:	d1c8      	bne.n	4b28 <usb_isr+0x150>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    4b96:	4b4a      	ldr	r3, [pc, #296]	; (4cc0 <usb_isr+0x2e8>)
    4b98:	2200      	movs	r2, #0
    4b9a:	701a      	strb	r2, [r3, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    4b9c:	2601      	movs	r6, #1
    4b9e:	469a      	mov	sl, r3
    4ba0:	4a48      	ldr	r2, [pc, #288]	; (4cc4 <usb_isr+0x2ec>)
    4ba2:	4b49      	ldr	r3, [pc, #292]	; (4cc8 <usb_isr+0x2f0>)
    4ba4:	4432      	add	r2, r6
    4ba6:	4433      	add	r3, r6
			epconf = *cfg++;
    4ba8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    4bac:	009b      	lsls	r3, r3, #2
			*reg = epconf;
			reg += 4;
			if (epconf & USB_ENDPT_EPRXEN) {
    4bae:	f012 0f08 	tst.w	r2, #8
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4bb2:	701a      	strb	r2, [r3, #0]
    4bb4:	ea4f 0986 	mov.w	r9, r6, lsl #2
			reg += 4;
			if (epconf & USB_ENDPT_EPRXEN) {
    4bb8:	d025      	beq.n	4c06 <usb_isr+0x22e>
				usb_packet_t *p;
				p = usb_malloc();
    4bba:	f000 fa71 	bl	50a0 <usb_malloc>
				if (p) {
    4bbe:	b138      	cbz	r0, 4bd0 <usb_isr+0x1f8>
					table[index(i, RX, EVEN)].addr = p->buf;
    4bc0:	eb04 1346 	add.w	r3, r4, r6, lsl #5
    4bc4:	3008      	adds	r0, #8
    4bc6:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4bc8:	4b40      	ldr	r3, [pc, #256]	; (4ccc <usb_isr+0x2f4>)
    4bca:	f844 3039 	str.w	r3, [r4, r9, lsl #3]
    4bce:	e006      	b.n	4bde <usb_isr+0x206>
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4bd0:	f89a 3000 	ldrb.w	r3, [sl]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4bd4:	f844 0039 	str.w	r0, [r4, r9, lsl #3]
					usb_rx_memory_needed++;
    4bd8:	3301      	adds	r3, #1
    4bda:	f88a 3000 	strb.w	r3, [sl]
				}
				p = usb_malloc();
    4bde:	f000 fa5f 	bl	50a0 <usb_malloc>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    4be2:	f049 0301 	orr.w	r3, r9, #1
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
    4be6:	b138      	cbz	r0, 4bf8 <usb_isr+0x220>
					table[index(i, RX, ODD)].addr = p->buf;
    4be8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4bec:	3008      	adds	r0, #8
    4bee:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4bf0:	4a2e      	ldr	r2, [pc, #184]	; (4cac <usb_isr+0x2d4>)
    4bf2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
    4bf6:	e006      	b.n	4c06 <usb_isr+0x22e>
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4bf8:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
					usb_rx_memory_needed++;
    4bfc:	f89a 3000 	ldrb.w	r3, [sl]
    4c00:	3301      	adds	r3, #1
    4c02:	f88a 3000 	strb.w	r3, [sl]
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c06:	f049 0202 	orr.w	r2, r9, #2
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    4c0a:	3601      	adds	r6, #1
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
			table[index(i, TX, ODD)].desc = 0;
    4c0c:	f049 0903 	orr.w	r9, r9, #3
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c10:	2300      	movs	r3, #0
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    4c12:	2e05      	cmp	r6, #5
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c14:	f844 3032 	str.w	r3, [r4, r2, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    4c18:	f844 3039 	str.w	r3, [r4, r9, lsl #3]
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    4c1c:	d1c0      	bne.n	4ba0 <usb_isr+0x1c8>
    4c1e:	e082      	b.n	4d26 <usb_isr+0x34e>
			table[index(i, TX, EVEN)].desc = 0;
			table[index(i, TX, ODD)].desc = 0;
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    4c20:	4b1b      	ldr	r3, [pc, #108]	; (4c90 <usb_isr+0x2b8>)
    4c22:	4c2b      	ldr	r4, [pc, #172]	; (4cd0 <usb_isr+0x2f8>)
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	7023      	strb	r3, [r4, #0]
		datalen = 1;
    4c28:	460b      	mov	r3, r1
    4c2a:	e07f      	b.n	4d2c <usb_isr+0x354>
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    4c2c:	4c28      	ldr	r4, [pc, #160]	; (4cd0 <usb_isr+0x2f8>)
    4c2e:	7023      	strb	r3, [r4, #0]
		reply_buffer[1] = 0;
    4c30:	7063      	strb	r3, [r4, #1]
    4c32:	e07a      	b.n	4d2a <usb_isr+0x352>
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		if (setup.wIndex > NUM_ENDPOINTS) {
    4c34:	88aa      	ldrh	r2, [r5, #4]
    4c36:	2a04      	cmp	r2, #4
    4c38:	d870      	bhi.n	4d1c <usb_isr+0x344>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4c3a:	4c25      	ldr	r4, [pc, #148]	; (4cd0 <usb_isr+0x2f8>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    4c3c:	0092      	lsls	r2, r2, #2
		if (setup.wIndex > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4c3e:	7023      	strb	r3, [r4, #0]
		reply_buffer[1] = 0;
    4c40:	7063      	strb	r3, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    4c42:	4b24      	ldr	r3, [pc, #144]	; (4cd4 <usb_isr+0x2fc>)
    4c44:	5c9b      	ldrb	r3, [r3, r2]
    4c46:	079e      	lsls	r6, r3, #30
    4c48:	d56f      	bpl.n	4d2a <usb_isr+0x352>
    4c4a:	7021      	strb	r1, [r4, #0]
    4c4c:	e06d      	b.n	4d2a <usb_isr+0x352>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    4c4e:	88aa      	ldrh	r2, [r5, #4]
    4c50:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4c54:	2b04      	cmp	r3, #4
    4c56:	dc61      	bgt.n	4d1c <usb_isr+0x344>
    4c58:	886b      	ldrh	r3, [r5, #2]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d15e      	bne.n	4d1c <usb_isr+0x344>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
    4c5e:	0091      	lsls	r1, r2, #2
    4c60:	4a1c      	ldr	r2, [pc, #112]	; (4cd4 <usb_isr+0x2fc>)
    4c62:	440a      	add	r2, r1
    4c64:	7811      	ldrb	r1, [r2, #0]
    4c66:	f021 0102 	bic.w	r1, r1, #2
    4c6a:	e055      	b.n	4d18 <usb_isr+0x340>
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    4c6c:	88aa      	ldrh	r2, [r5, #4]
    4c6e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4c72:	2b04      	cmp	r3, #4
    4c74:	dc52      	bgt.n	4d1c <usb_isr+0x344>
    4c76:	886b      	ldrh	r3, [r5, #2]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d14f      	bne.n	4d1c <usb_isr+0x344>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) |= 0x02;
    4c7c:	0091      	lsls	r1, r2, #2
    4c7e:	4a15      	ldr	r2, [pc, #84]	; (4cd4 <usb_isr+0x2fc>)
    4c80:	440a      	add	r2, r1
    4c82:	7811      	ldrb	r1, [r2, #0]
    4c84:	f041 0102 	orr.w	r1, r1, #2
    4c88:	e046      	b.n	4d18 <usb_isr+0x340>
    4c8a:	bf00      	nop
    4c8c:	40072080 	.word	0x40072080
    4c90:	1fff9403 	.word	0x1fff9403
    4c94:	1fff938d 	.word	0x1fff938d
    4c98:	1fff9418 	.word	0x1fff9418
    4c9c:	40072090 	.word	0x40072090
    4ca0:	1fff8000 	.word	0x1fff8000
    4ca4:	1fff93f0 	.word	0x1fff93f0
    4ca8:	1fff9404 	.word	0x1fff9404
    4cac:	004000c8 	.word	0x004000c8
    4cb0:	1fff9328 	.word	0x1fff9328
    4cb4:	1fff93e0 	.word	0x1fff93e0
    4cb8:	1fff9c80 	.word	0x1fff9c80
    4cbc:	1fff9338 	.word	0x1fff9338
    4cc0:	1fff93fa 	.word	0x1fff93fa
    4cc4:	000144d2 	.word	0x000144d2
    4cc8:	1001c830 	.word	0x1001c830
    4ccc:	00400088 	.word	0x00400088
    4cd0:	1fff93fb 	.word	0x1fff93fb
    4cd4:	400720c0 	.word	0x400720c0
    4cd8:	1fff9324 	.word	0x1fff9324
    4cdc:	1fff937c 	.word	0x1fff937c
    4ce0:	1fff93d0 	.word	0x1fff93d0
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4ce4:	886a      	ldrh	r2, [r5, #2]
    4ce6:	88a9      	ldrh	r1, [r5, #4]
    4ce8:	4b9d      	ldr	r3, [pc, #628]	; (4f60 <usb_isr+0x588>)
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    4cea:	f853 4c08 	ldr.w	r4, [r3, #-8]
    4cee:	f1a3 000c 	sub.w	r0, r3, #12
    4cf2:	b19c      	cbz	r4, 4d1c <usb_isr+0x344>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4cf4:	f833 6c0c 	ldrh.w	r6, [r3, #-12]
    4cf8:	4296      	cmp	r6, r2
    4cfa:	d109      	bne.n	4d10 <usb_isr+0x338>
    4cfc:	f833 6c0a 	ldrh.w	r6, [r3, #-10]
    4d00:	428e      	cmp	r6, r1
    4d02:	d105      	bne.n	4d10 <usb_isr+0x338>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    4d04:	0a12      	lsrs	r2, r2, #8
    4d06:	2a03      	cmp	r2, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    4d08:	bf0c      	ite	eq
    4d0a:	7823      	ldrbeq	r3, [r4, #0]
				} else {
					datalen = list->length;
    4d0c:	8903      	ldrhne	r3, [r0, #8]
    4d0e:	e00d      	b.n	4d2c <usb_isr+0x354>
    4d10:	330c      	adds	r3, #12
    4d12:	e7ea      	b.n	4cea <usb_isr+0x312>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr = setup.wValue;
    4d14:	78a9      	ldrb	r1, [r5, #2]
    4d16:	4a93      	ldr	r2, [pc, #588]	; (4f64 <usb_isr+0x58c>)
    4d18:	7011      	strb	r1, [r2, #0]
    4d1a:	e004      	b.n	4d26 <usb_isr+0x34e>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4d1c:	4b92      	ldr	r3, [pc, #584]	; (4f68 <usb_isr+0x590>)
    4d1e:	220f      	movs	r2, #15
    4d20:	701a      	strb	r2, [r3, #0]
    4d22:	e027      	b.n	4d74 <usb_isr+0x39c>
static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    4d24:	2300      	movs	r3, #0

static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
    4d26:	461c      	mov	r4, r3
    4d28:	e000      	b.n	4d2c <usb_isr+0x354>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    4d2a:	2302      	movs	r3, #2
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4d2c:	88ee      	ldrh	r6, [r5, #6]
    4d2e:	42b3      	cmp	r3, r6
    4d30:	bf38      	it	cc
    4d32:	461e      	movcc	r6, r3
    4d34:	2e40      	cmp	r6, #64	; 0x40
    4d36:	bf34      	ite	cc
    4d38:	4635      	movcc	r5, r6
    4d3a:	2540      	movcs	r5, #64	; 0x40
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    4d3c:	4620      	mov	r0, r4
    4d3e:	4629      	mov	r1, r5
    4d40:	f7ff fd80 	bl	4844 <endpoint0_transmit>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4d44:	1b76      	subs	r6, r6, r5

	if (datalen > setup.wLength) datalen = setup.wLength;
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4d46:	442c      	add	r4, r5
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4d48:	d103      	bne.n	4d52 <usb_isr+0x37a>
    4d4a:	2d40      	cmp	r5, #64	; 0x40
    4d4c:	d112      	bne.n	4d74 <usb_isr+0x39c>
    4d4e:	4635      	mov	r5, r6
    4d50:	e003      	b.n	4d5a <usb_isr+0x382>
    4d52:	2e40      	cmp	r6, #64	; 0x40
    4d54:	bf34      	ite	cc
    4d56:	4635      	movcc	r5, r6
    4d58:	2540      	movcs	r5, #64	; 0x40

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    4d5a:	4620      	mov	r0, r4
    4d5c:	4629      	mov	r1, r5
    4d5e:	f7ff fd71 	bl	4844 <endpoint0_transmit>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4d62:	1b76      	subs	r6, r6, r5
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4d64:	442c      	add	r4, r5
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4d66:	d101      	bne.n	4d6c <usb_isr+0x394>
    4d68:	2d40      	cmp	r5, #64	; 0x40
    4d6a:	d103      	bne.n	4d74 <usb_isr+0x39c>

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    4d6c:	4a7f      	ldr	r2, [pc, #508]	; (4f6c <usb_isr+0x594>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    4d6e:	f8c8 4000 	str.w	r4, [r8]
	ep0_tx_len = datalen;
    4d72:	8016      	strh	r6, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4d74:	2201      	movs	r2, #1
    4d76:	4b7e      	ldr	r3, [pc, #504]	; (4f70 <usb_isr+0x598>)
    4d78:	e03d      	b.n	4df6 <usb_isr+0x41e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    4d7a:	4b7e      	ldr	r3, [pc, #504]	; (4f74 <usb_isr+0x59c>)
    4d7c:	881a      	ldrh	r2, [r3, #0]
    4d7e:	f242 0321 	movw	r3, #8225	; 0x2021
    4d82:	429a      	cmp	r2, r3
    4d84:	d110      	bne.n	4da8 <usb_isr+0x3d0>
    4d86:	2300      	movs	r3, #0
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4d88:	4a7b      	ldr	r2, [pc, #492]	; (4f78 <usb_isr+0x5a0>)
    4d8a:	5cc8      	ldrb	r0, [r1, r3]
    4d8c:	5498      	strb	r0, [r3, r2]
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
    4d8e:	3301      	adds	r3, #1
    4d90:	2b07      	cmp	r3, #7
    4d92:	d1f9      	bne.n	4d88 <usb_isr+0x3b0>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4d94:	6813      	ldr	r3, [r2, #0]
    4d96:	2b86      	cmp	r3, #134	; 0x86
    4d98:	d102      	bne.n	4da0 <usb_isr+0x3c8>
    4d9a:	4b78      	ldr	r3, [pc, #480]	; (4f7c <usb_isr+0x5a4>)
    4d9c:	220f      	movs	r2, #15
    4d9e:	701a      	strb	r2, [r3, #0]
			endpoint0_transmit(NULL, 0);
    4da0:	2000      	movs	r0, #0
    4da2:	4601      	mov	r1, r0
    4da4:	f7ff fd4e 	bl	4844 <endpoint0_transmit>
			usb_reboot_timer = 5;
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4da8:	4b75      	ldr	r3, [pc, #468]	; (4f80 <usb_isr+0x5a8>)
    4daa:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
    4dae:	e023      	b.n	4df8 <usb_isr+0x420>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    4db0:	4e74      	ldr	r6, [pc, #464]	; (4f84 <usb_isr+0x5ac>)
    4db2:	6835      	ldr	r5, [r6, #0]
		if (data) {
    4db4:	b1b5      	cbz	r5, 4de4 <usb_isr+0x40c>
			size = ep0_tx_len;
    4db6:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 4f6c <usb_isr+0x594>
    4dba:	f8b8 9000 	ldrh.w	r9, [r8]
    4dbe:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
    4dc2:	bf34      	ite	cc
    4dc4:	464c      	movcc	r4, r9
    4dc6:	2440      	movcs	r4, #64	; 0x40
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
    4dc8:	4628      	mov	r0, r5
    4dca:	4621      	mov	r1, r4
    4dcc:	f7ff fd3a 	bl	4844 <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    4dd0:	ebc4 0309 	rsb	r3, r4, r9
    4dd4:	b29b      	uxth	r3, r3
    4dd6:	f8a8 3000 	strh.w	r3, [r8]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4dda:	b90b      	cbnz	r3, 4de0 <usb_isr+0x408>
    4ddc:	2c40      	cmp	r4, #64	; 0x40
    4dde:	d100      	bne.n	4de2 <usb_isr+0x40a>
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    4de0:	192b      	adds	r3, r5, r4
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4de2:	6033      	str	r3, [r6, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    4de4:	4b63      	ldr	r3, [pc, #396]	; (4f74 <usb_isr+0x59c>)
    4de6:	881a      	ldrh	r2, [r3, #0]
    4de8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    4dec:	d104      	bne.n	4df8 <usb_isr+0x420>
			setup.bRequest = 0;
    4dee:	2200      	movs	r2, #0
    4df0:	705a      	strb	r2, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4df2:	789a      	ldrb	r2, [r3, #2]
    4df4:	4b64      	ldr	r3, [pc, #400]	; (4f88 <usb_isr+0x5b0>)
    4df6:	701a      	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4df8:	2201      	movs	r2, #1
    4dfa:	4b5d      	ldr	r3, [pc, #372]	; (4f70 <usb_isr+0x598>)
    4dfc:	e06c      	b.n	4ed8 <usb_isr+0x500>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    4dfe:	eb04 06c8 	add.w	r6, r4, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    4e02:	3d01      	subs	r5, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4e04:	6873      	ldr	r3, [r6, #4]
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays

			if (stat & 0x08) { // transmit
    4e06:	f002 0208 	and.w	r2, r2, #8
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4e0a:	f1a3 0008 	sub.w	r0, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    4e0e:	b2ed      	uxtb	r5, r5

			if (stat & 0x08) { // transmit
    4e10:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    4e14:	2a00      	cmp	r2, #0
    4e16:	d036      	beq.n	4e86 <usb_isr+0x4ae>
				usb_free(packet);
    4e18:	f000 f960 	bl	50dc <usb_free>
				packet = tx_first[endpoint];
    4e1c:	485b      	ldr	r0, [pc, #364]	; (4f8c <usb_isr+0x5b4>)
    4e1e:	4b5c      	ldr	r3, [pc, #368]	; (4f90 <usb_isr+0x5b8>)
    4e20:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
				if (packet) {
    4e24:	b1ea      	cbz	r2, 4e62 <usb_isr+0x48a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    4e26:	6851      	ldr	r1, [r2, #4]
    4e28:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
					b->addr = packet->buf;
    4e2c:	f102 0108 	add.w	r1, r2, #8
    4e30:	6071      	str	r1, [r6, #4]
					switch (tx_state[endpoint]) {
    4e32:	5d59      	ldrb	r1, [r3, r5]
    4e34:	2903      	cmp	r1, #3
    4e36:	d80b      	bhi.n	4e50 <usb_isr+0x478>
    4e38:	e8df f001 	tbb	[pc, r1]
    4e3c:	08060402 	.word	0x08060402
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    4e40:	2103      	movs	r1, #3
    4e42:	e004      	b.n	4e4e <usb_isr+0x476>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    4e44:	2102      	movs	r1, #2
    4e46:	e002      	b.n	4e4e <usb_isr+0x476>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    4e48:	2105      	movs	r1, #5
    4e4a:	e000      	b.n	4e4e <usb_isr+0x476>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    4e4c:	2104      	movs	r1, #4
    4e4e:	5559      	strb	r1, [r3, r5]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4e50:	f016 0f08 	tst.w	r6, #8
    4e54:	8812      	ldrh	r2, [r2, #0]
    4e56:	bf0c      	ite	eq
    4e58:	2388      	moveq	r3, #136	; 0x88
    4e5a:	23c8      	movne	r3, #200	; 0xc8
    4e5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    4e60:	e042      	b.n	4ee8 <usb_isr+0x510>
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    4e62:	5d5a      	ldrb	r2, [r3, r5]
    4e64:	2a03      	cmp	r2, #3
    4e66:	d807      	bhi.n	4e78 <usb_isr+0x4a0>
    4e68:	e8df f002 	tbb	[pc, r2]
    4e6c:	04024040 	.word	0x04024040
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    4e70:	2200      	movs	r2, #0
    4e72:	e006      	b.n	4e82 <usb_isr+0x4aa>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4e74:	2201      	movs	r2, #1
    4e76:	e004      	b.n	4e82 <usb_isr+0x4aa>
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    4e78:	f016 0f08 	tst.w	r6, #8
    4e7c:	bf0c      	ite	eq
    4e7e:	2202      	moveq	r2, #2
    4e80:	2203      	movne	r2, #3
    4e82:	555a      	strb	r2, [r3, r5]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    4e84:	e032      	b.n	4eec <usb_isr+0x514>
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    4e86:	f854 2038 	ldr.w	r2, [r4, r8, lsl #3]
    4e8a:	0c12      	lsrs	r2, r2, #16
    4e8c:	f823 2c08 	strh.w	r2, [r3, #-8]
				if (packet->len > 0) {
    4e90:	b322      	cbz	r2, 4edc <usb_isr+0x504>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    4e92:	f8df e12c 	ldr.w	lr, [pc, #300]	; 4fc0 <usb_isr+0x5e8>
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    4e96:	f823 1c06 	strh.w	r1, [r3, #-6]
					packet->next = NULL;
    4e9a:	f843 1c04 	str.w	r1, [r3, #-4]
					if (rx_first[endpoint] == NULL) {
    4e9e:	f85e 3025 	ldr.w	r3, [lr, r5, lsl #2]
    4ea2:	493c      	ldr	r1, [pc, #240]	; (4f94 <usb_isr+0x5bc>)
    4ea4:	b913      	cbnz	r3, 4eac <usb_isr+0x4d4>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    4ea6:	f84e 0025 	str.w	r0, [lr, r5, lsl #2]
    4eaa:	e002      	b.n	4eb2 <usb_isr+0x4da>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    4eac:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    4eb0:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    4eb2:	4b39      	ldr	r3, [pc, #228]	; (4f98 <usb_isr+0x5c0>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    4eb4:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    4eb8:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
    4ebc:	440a      	add	r2, r1
    4ebe:	f823 2015 	strh.w	r2, [r3, r5, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated packets
					// so a flood of incoming data on 1 endpoint doesn't starve
					// the others if the user isn't reading it regularly
					packet = usb_malloc();
    4ec2:	f000 f8ed 	bl	50a0 <usb_malloc>
					if (packet) {
    4ec6:	b110      	cbz	r0, 4ece <usb_isr+0x4f6>
						b->addr = packet->buf;
    4ec8:	3008      	adds	r0, #8
    4eca:	6070      	str	r0, [r6, #4]
    4ecc:	e006      	b.n	4edc <usb_isr+0x504>
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
						usb_rx_memory_needed++;
    4ece:	4b33      	ldr	r3, [pc, #204]	; (4f9c <usb_isr+0x5c4>)
						b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
    4ed0:	f844 0038 	str.w	r0, [r4, r8, lsl #3]
						usb_rx_memory_needed++;
    4ed4:	781a      	ldrb	r2, [r3, #0]
    4ed6:	3201      	adds	r2, #1
    4ed8:	701a      	strb	r2, [r3, #0]
    4eda:	e007      	b.n	4eec <usb_isr+0x514>
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4edc:	4b28      	ldr	r3, [pc, #160]	; (4f80 <usb_isr+0x5a8>)
    4ede:	4a30      	ldr	r2, [pc, #192]	; (4fa0 <usb_isr+0x5c8>)
    4ee0:	f016 0f08 	tst.w	r6, #8
    4ee4:	bf08      	it	eq
    4ee6:	4613      	moveq	r3, r2
    4ee8:	f844 3038 	str.w	r3, [r4, r8, lsl #3]




		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    4eec:	2308      	movs	r3, #8
    4eee:	703b      	strb	r3, [r7, #0]
		goto restart;
    4ef0:	e574      	b.n	49dc <usb_isr+0x4>
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    4ef2:	07e0      	lsls	r0, r4, #31
    4ef4:	d51f      	bpl.n	4f36 <usb_isr+0x55e>
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    4ef6:	491e      	ldr	r1, [pc, #120]	; (4f70 <usb_isr+0x598>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4ef8:	4829      	ldr	r0, [pc, #164]	; (4fa0 <usb_isr+0x5c8>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4efa:	4c2a      	ldr	r4, [pc, #168]	; (4fa4 <usb_isr+0x5cc>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    4efc:	2302      	movs	r3, #2
    4efe:	700b      	strb	r3, [r1, #0]
		ep0_tx_bdt_bank = 0;
    4f00:	4b29      	ldr	r3, [pc, #164]	; (4fa8 <usb_isr+0x5d0>)
    4f02:	701a      	strb	r2, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4f04:	4b29      	ldr	r3, [pc, #164]	; (4fac <usb_isr+0x5d4>)
    4f06:	6018      	str	r0, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    4f08:	6098      	str	r0, [r3, #8]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    4f0a:	4829      	ldr	r0, [pc, #164]	; (4fb0 <usb_isr+0x5d8>)
    4f0c:	60d8      	str	r0, [r3, #12]
		table[index(0, TX, EVEN)].desc = 0;
    4f0e:	611a      	str	r2, [r3, #16]
		table[index(0, TX, ODD)].desc = 0;
    4f10:	619a      	str	r2, [r3, #24]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4f12:	605c      	str	r4, [r3, #4]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4f14:	4b14      	ldr	r3, [pc, #80]	; (4f68 <usb_isr+0x590>)
    4f16:	200d      	movs	r0, #13
    4f18:	7018      	strb	r0, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    4f1a:	4826      	ldr	r0, [pc, #152]	; (4fb4 <usb_isr+0x5dc>)
    4f1c:	23ff      	movs	r3, #255	; 0xff
    4f1e:	7003      	strb	r3, [r0, #0]
		USB0_ISTAT = 0xFF;
    4f20:	702b      	strb	r3, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    4f22:	7402      	strb	r2, [r0, #16]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    4f24:	4a24      	ldr	r2, [pc, #144]	; (4fb8 <usb_isr+0x5e0>)
    4f26:	7013      	strb	r3, [r2, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    4f28:	4b24      	ldr	r3, [pc, #144]	; (4fbc <usb_isr+0x5e4>)
    4f2a:	229f      	movs	r2, #159	; 0x9f
    4f2c:	701a      	strb	r2, [r3, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    4f2e:	2301      	movs	r3, #1
    4f30:	700b      	strb	r3, [r1, #0]
		return;
    4f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    4f36:	0621      	lsls	r1, r4, #24
    4f38:	d504      	bpl.n	4f44 <usb_isr+0x56c>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4f3a:	4b0b      	ldr	r3, [pc, #44]	; (4f68 <usb_isr+0x590>)
    4f3c:	220d      	movs	r2, #13
    4f3e:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    4f40:	2380      	movs	r3, #128	; 0x80
    4f42:	702b      	strb	r3, [r5, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    4f44:	07a2      	lsls	r2, r4, #30
    4f46:	d505      	bpl.n	4f54 <usb_isr+0x57c>
		uint8_t err = USB0_ERRSTAT;
    4f48:	4b1a      	ldr	r3, [pc, #104]	; (4fb4 <usb_isr+0x5dc>)
    4f4a:	781a      	ldrb	r2, [r3, #0]
    4f4c:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    4f4e:	701a      	strb	r2, [r3, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4f50:	2302      	movs	r3, #2
    4f52:	702b      	strb	r3, [r5, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    4f54:	06e3      	lsls	r3, r4, #27
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    4f56:	bf44      	itt	mi
    4f58:	2310      	movmi	r3, #16
    4f5a:	702b      	strbmi	r3, [r5, #0]
    4f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f60:	000144e4 	.word	0x000144e4
    4f64:	1fff9428 	.word	0x1fff9428
    4f68:	400720c0 	.word	0x400720c0
    4f6c:	1fff93f8 	.word	0x1fff93f8
    4f70:	40072094 	.word	0x40072094
    4f74:	1fff93f0 	.word	0x1fff93f0
    4f78:	1fff9c88 	.word	0x1fff9c88
    4f7c:	1fff938d 	.word	0x1fff938d
    4f80:	004000c8 	.word	0x004000c8
    4f84:	1fff9324 	.word	0x1fff9324
    4f88:	40072098 	.word	0x40072098
    4f8c:	1fff93d0 	.word	0x1fff93d0
    4f90:	1fff9338 	.word	0x1fff9338
    4f94:	1fff9328 	.word	0x1fff9328
    4f98:	1fff9c80 	.word	0x1fff9c80
    4f9c:	1fff93fa 	.word	0x1fff93fa
    4fa0:	00400088 	.word	0x00400088
    4fa4:	1fff933c 	.word	0x1fff933c
    4fa8:	1fff938c 	.word	0x1fff938c
    4fac:	1fff8000 	.word	0x1fff8000
    4fb0:	1fff9390 	.word	0x1fff9390
    4fb4:	40072088 	.word	0x40072088
    4fb8:	4007208c 	.word	0x4007208c
    4fbc:	40072084 	.word	0x40072084
    4fc0:	1fff937c 	.word	0x1fff937c

00004fc4 <usb_init>:
}



void usb_init(void)
{
    4fc4:	b508      	push	{r3, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4fc6:	f7ff fc05 	bl	47d4 <usb_init_serialnumber>
    4fca:	2300      	movs	r3, #0

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4fcc:	4a1f      	ldr	r2, [pc, #124]	; (504c <usb_init+0x88>)
    4fce:	2100      	movs	r1, #0
    4fd0:	5099      	str	r1, [r3, r2]
    4fd2:	18d0      	adds	r0, r2, r3
    4fd4:	3308      	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    4fd6:	2b88      	cmp	r3, #136	; 0x88
		table[i].desc = 0;
		table[i].addr = 0;
    4fd8:	6041      	str	r1, [r0, #4]
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    4fda:	d1f7      	bne.n	4fcc <usb_init+0x8>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4fdc:	4b1c      	ldr	r3, [pc, #112]	; (5050 <usb_init+0x8c>)
    4fde:	6819      	ldr	r1, [r3, #0]
    4fe0:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    4fe4:	6019      	str	r1, [r3, #0]

	// reset USB module
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
    4fe6:	f503 3328 	add.w	r3, r3, #172032	; 0x2a000
    4fea:	33d8      	adds	r3, #216	; 0xd8
    4fec:	2180      	movs	r1, #128	; 0x80
    4fee:	7019      	strb	r1, [r3, #0]
	while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end
    4ff0:	7818      	ldrb	r0, [r3, #0]
    4ff2:	4918      	ldr	r1, [pc, #96]	; (5054 <usb_init+0x90>)
    4ff4:	0600      	lsls	r0, r0, #24
    4ff6:	d4fb      	bmi.n	4ff0 <usb_init+0x2c>

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4ff8:	4b17      	ldr	r3, [pc, #92]	; (5058 <usb_init+0x94>)
    4ffa:	f3c2 2007 	ubfx	r0, r2, #8, #8
    4ffe:	7018      	strb	r0, [r3, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5000:	f3c2 4007 	ubfx	r0, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5004:	0e12      	lsrs	r2, r2, #24
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
	while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5006:	7518      	strb	r0, [r3, #20]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5008:	761a      	strb	r2, [r3, #24]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    500a:	4a14      	ldr	r2, [pc, #80]	; (505c <usb_init+0x98>)
    500c:	23ff      	movs	r3, #255	; 0xff
    500e:	7013      	strb	r3, [r2, #0]
	USB0_ERRSTAT = 0xFF;
    5010:	7213      	strb	r3, [r2, #8]
	USB0_OTGISTAT = 0xFF;
    5012:	f802 3c70 	strb.w	r3, [r2, #-112]

	USB0_USBTRC0 |= 0x40; // undocumented bit
    5016:	780b      	ldrb	r3, [r1, #0]
    5018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    501c:	700b      	strb	r3, [r1, #0]

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    501e:	2301      	movs	r3, #1
	USB0_USBCTRL = 0;
    5020:	2100      	movs	r1, #0
	USB0_OTGISTAT = 0xFF;

	USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5022:	7513      	strb	r3, [r2, #20]
	USB0_USBCTRL = 0;
    5024:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5028:	7113      	strb	r3, [r2, #4]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    502a:	4b0d      	ldr	r3, [pc, #52]	; (5060 <usb_init+0x9c>)
    502c:	2270      	movs	r2, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    502e:	f46f 7150 	mvn.w	r1, #832	; 0x340

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5032:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5034:	440b      	add	r3, r1
    5036:	f44f 7200 	mov.w	r2, #512	; 0x200
    503a:	601a      	str	r2, [r3, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    503c:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
    5040:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
    5044:	2210      	movs	r2, #16
    5046:	701a      	strb	r2, [r3, #0]
    5048:	bd08      	pop	{r3, pc}
    504a:	bf00      	nop
    504c:	1fff8000 	.word	0x1fff8000
    5050:	40048034 	.word	0x40048034
    5054:	4007210c 	.word	0x4007210c
    5058:	4007209c 	.word	0x4007209c
    505c:	40072080 	.word	0x40072080
    5060:	e000e449 	.word	0xe000e449

00005064 <_ZN16usb_serial_class9availableEv>:
class usb_serial_class : public Stream
{
public:
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5064:	f000 b89e 	b.w	51a4 <usb_serial_available>

00005068 <_ZN16usb_serial_class4readEv>:
        virtual int read() { return usb_serial_getchar(); }
    5068:	f000 b85a 	b.w	5120 <usb_serial_getchar>

0000506c <_ZN16usb_serial_class4peekEv>:
        virtual int peek() { return usb_serial_peekchar(); }
    506c:	f000 b87e 	b.w	516c <usb_serial_peekchar>

00005070 <_ZN16usb_serial_class5flushEv>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    5070:	f000 b91a 	b.w	52a8 <usb_serial_flush_output>

00005074 <_ZN16usb_serial_class5writeEh>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5074:	4608      	mov	r0, r1
    5076:	f000 b90b 	b.w	5290 <usb_serial_putchar>

0000507a <_ZN16usb_serial_class5writeEPKhj>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    507a:	4608      	mov	r0, r1
    507c:	4611      	mov	r1, r2
    507e:	f000 b89f 	b.w	51c0 <usb_serial_write>
    5082:	ffff 4b04 	vtbl.8	d20, {d15-d18}, d4

00005084 <_GLOBAL__sub_I_Serial>:
class __FlashStringHelper;

class Print
{
  public:
	Print() : write_error(0) {}
    5084:	4b04      	ldr	r3, [pc, #16]	; (5098 <_GLOBAL__sub_I_Serial+0x14>)
    5086:	2200      	movs	r2, #0
    5088:	711a      	strb	r2, [r3, #4]
    508a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    508e:	731a      	strb	r2, [r3, #12]
#define USB_SERIAL_RTS  0x02

// C++ interface
#ifdef __cplusplus
#include "Stream.h"
class usb_serial_class : public Stream
    5090:	4a02      	ldr	r2, [pc, #8]	; (509c <_GLOBAL__sub_I_Serial+0x18>)
    5092:	6099      	str	r1, [r3, #8]
    5094:	601a      	str	r2, [r3, #0]
    5096:	4770      	bx	lr
    5098:	1fff9408 	.word	0x1fff9408
    509c:	00014538 	.word	0x00014538

000050a0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    50a0:	b672      	cpsid	i
	avail = usb_buffer_available;
    50a2:	4a0c      	ldr	r2, [pc, #48]	; (50d4 <usb_malloc+0x34>)
    50a4:	6811      	ldr	r1, [r2, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    50a6:	fab1 f381 	clz	r3, r1
	if (n >= NUM_USB_BUFFERS) {
    50aa:	2b0b      	cmp	r3, #11
    50ac:	d902      	bls.n	50b4 <usb_malloc+0x14>
		__enable_irq();
    50ae:	b662      	cpsie	i
		return NULL;
    50b0:	2000      	movs	r0, #0
    50b2:	4770      	bx	lr
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    50b4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    50b8:	40d8      	lsrs	r0, r3
    50ba:	ea21 0100 	bic.w	r1, r1, r0
    50be:	6011      	str	r1, [r2, #0]
	__enable_irq();
    50c0:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    50c2:	4905      	ldr	r1, [pc, #20]	; (50d8 <usb_malloc+0x38>)
    50c4:	2248      	movs	r2, #72	; 0x48
    50c6:	4353      	muls	r3, r2
    50c8:	18c8      	adds	r0, r1, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    50ca:	2200      	movs	r2, #0
    50cc:	50ca      	str	r2, [r1, r3]
	*(uint32_t *)(p + 4) = 0;
    50ce:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    50d0:	4770      	bx	lr
    50d2:	bf00      	nop
    50d4:	1fff84bc 	.word	0x1fff84bc
    50d8:	1fff80a0 	.word	0x1fff80a0

000050dc <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    50dc:	4b0c      	ldr	r3, [pc, #48]	; (5110 <usb_free+0x34>)
    50de:	2248      	movs	r2, #72	; 0x48
    50e0:	1ac3      	subs	r3, r0, r3
    50e2:	fbb3 f3f2 	udiv	r3, r3, r2
	if (n >= NUM_USB_BUFFERS) return;
    50e6:	2b0b      	cmp	r3, #11
    50e8:	d811      	bhi.n	510e <usb_free+0x32>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    50ea:	4a0a      	ldr	r2, [pc, #40]	; (5114 <usb_free+0x38>)
    50ec:	7812      	ldrb	r2, [r2, #0]
    50ee:	b122      	cbz	r2, 50fa <usb_free+0x1e>
    50f0:	4a09      	ldr	r2, [pc, #36]	; (5118 <usb_free+0x3c>)
    50f2:	7812      	ldrb	r2, [r2, #0]
    50f4:	b10a      	cbz	r2, 50fa <usb_free+0x1e>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    50f6:	f7ff bbf3 	b.w	48e0 <usb_rx_memory>
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    50fa:	b672      	cpsid	i
	usb_buffer_available |= mask;
    50fc:	4a07      	ldr	r2, [pc, #28]	; (511c <usb_free+0x40>)
		//serial_print("\n");
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
    50fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5102:	fa21 f303 	lsr.w	r3, r1, r3
	__disable_irq();
	usb_buffer_available |= mask;
    5106:	6811      	ldr	r1, [r2, #0]
    5108:	4319      	orrs	r1, r3
    510a:	6011      	str	r1, [r2, #0]
	__enable_irq();
    510c:	b662      	cpsie	i
    510e:	4770      	bx	lr
    5110:	1fff80a0 	.word	0x1fff80a0
    5114:	1fff93fa 	.word	0x1fff93fa
    5118:	1fff9403 	.word	0x1fff9403
    511c:	1fff84bc 	.word	0x1fff84bc

00005120 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    5120:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    5122:	4c10      	ldr	r4, [pc, #64]	; (5164 <usb_serial_getchar+0x44>)
    5124:	6823      	ldr	r3, [r4, #0]
    5126:	b16b      	cbz	r3, 5144 <usb_serial_getchar+0x24>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    5128:	6820      	ldr	r0, [r4, #0]
    512a:	8842      	ldrh	r2, [r0, #2]
	c = rx_packet->buf[i++];
    512c:	1c53      	adds	r3, r2, #1
    512e:	4402      	add	r2, r0
    5130:	7a14      	ldrb	r4, [r2, #8]
	if (i >= rx_packet->len) {
    5132:	8802      	ldrh	r2, [r0, #0]
    5134:	4293      	cmp	r3, r2
    5136:	d312      	bcc.n	515e <usb_serial_getchar+0x3e>
		usb_free(rx_packet);
    5138:	f7ff ffd0 	bl	50dc <usb_free>
		rx_packet = NULL;
    513c:	4b09      	ldr	r3, [pc, #36]	; (5164 <usb_serial_getchar+0x44>)
    513e:	2200      	movs	r2, #0
    5140:	601a      	str	r2, [r3, #0]
    5142:	e00d      	b.n	5160 <usb_serial_getchar+0x40>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5144:	4b08      	ldr	r3, [pc, #32]	; (5168 <usb_serial_getchar+0x48>)
    5146:	781b      	ldrb	r3, [r3, #0]
    5148:	b913      	cbnz	r3, 5150 <usb_serial_getchar+0x30>
    514a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    514e:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5150:	2003      	movs	r0, #3
    5152:	f7ff fb97 	bl	4884 <usb_rx>
    5156:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    5158:	2800      	cmp	r0, #0
    515a:	d1e5      	bne.n	5128 <usb_serial_getchar+0x8>
    515c:	e7f5      	b.n	514a <usb_serial_getchar+0x2a>
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    515e:	8043      	strh	r3, [r0, #2]
	}
	return c;
    5160:	4620      	mov	r0, r4
}
    5162:	bd10      	pop	{r4, pc}
    5164:	1fff9424 	.word	0x1fff9424
    5168:	1fff9403 	.word	0x1fff9403

0000516c <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    516c:	b510      	push	{r4, lr}
	if (!rx_packet) {
    516e:	4c0b      	ldr	r4, [pc, #44]	; (519c <usb_serial_peekchar+0x30>)
    5170:	6823      	ldr	r3, [r4, #0]
    5172:	b113      	cbz	r3, 517a <usb_serial_peekchar+0xe>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
    5174:	6823      	ldr	r3, [r4, #0]
    5176:	b96b      	cbnz	r3, 5194 <usb_serial_peekchar+0x28>
    5178:	e002      	b.n	5180 <usb_serial_peekchar+0x14>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    517a:	4b09      	ldr	r3, [pc, #36]	; (51a0 <usb_serial_peekchar+0x34>)
    517c:	781b      	ldrb	r3, [r3, #0]
    517e:	b913      	cbnz	r3, 5186 <usb_serial_peekchar+0x1a>
    5180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5184:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5186:	2003      	movs	r0, #3
    5188:	f7ff fb7c 	bl	4884 <usb_rx>
    518c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    518e:	2800      	cmp	r0, #0
    5190:	d1f0      	bne.n	5174 <usb_serial_peekchar+0x8>
    5192:	e7f5      	b.n	5180 <usb_serial_peekchar+0x14>
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    5194:	885a      	ldrh	r2, [r3, #2]
    5196:	4413      	add	r3, r2
    5198:	7a18      	ldrb	r0, [r3, #8]
}
    519a:	bd10      	pop	{r4, pc}
    519c:	1fff9424 	.word	0x1fff9424
    51a0:	1fff9403 	.word	0x1fff9403

000051a4 <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    51a4:	4b04      	ldr	r3, [pc, #16]	; (51b8 <usb_serial_available+0x14>)

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    51a6:	8898      	ldrh	r0, [r3, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    51a8:	4b04      	ldr	r3, [pc, #16]	; (51bc <usb_serial_available+0x18>)
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	b11b      	cbz	r3, 51b6 <usb_serial_available+0x12>
    51ae:	881a      	ldrh	r2, [r3, #0]
    51b0:	885b      	ldrh	r3, [r3, #2]
    51b2:	1ad3      	subs	r3, r2, r3
    51b4:	4418      	add	r0, r3
	return count;
}
    51b6:	4770      	bx	lr
    51b8:	1fff9c80 	.word	0x1fff9c80
    51bc:	1fff9424 	.word	0x1fff9424

000051c0 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    51c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    51c4:	4e2d      	ldr	r6, [pc, #180]	; (527c <usb_serial_write+0xbc>)
    51c6:	2301      	movs	r3, #1
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    51c8:	4607      	mov	r7, r0
    51ca:	460c      	mov	r4, r1
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    51cc:	7033      	strb	r3, [r6, #0]
	while (size > 0) {
    51ce:	2c00      	cmp	r4, #0
    51d0:	d04f      	beq.n	5272 <usb_serial_write+0xb2>
		if (!tx_packet) {
    51d2:	4d2b      	ldr	r5, [pc, #172]	; (5280 <usb_serial_write+0xc0>)
    51d4:	682b      	ldr	r3, [r5, #0]
    51d6:	46a9      	mov	r9, r5
    51d8:	bb2b      	cbnz	r3, 5226 <usb_serial_write+0x66>
    51da:	f648 4801 	movw	r8, #35841	; 0x8c01
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    51de:	4b29      	ldr	r3, [pc, #164]	; (5284 <usb_serial_write+0xc4>)
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    51e6:	b90b      	cbnz	r3, 51ec <usb_serial_write+0x2c>
					tx_noautoflush = 0;
    51e8:	7032      	strb	r2, [r6, #0]
    51ea:	e015      	b.n	5218 <usb_serial_write+0x58>
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    51ec:	2004      	movs	r0, #4
    51ee:	f7ff fb65 	bl	48bc <usb_tx_packet_count>
    51f2:	2807      	cmp	r0, #7
    51f4:	d808      	bhi.n	5208 <usb_serial_write+0x48>
					tx_noautoflush = 1;
    51f6:	2301      	movs	r3, #1
    51f8:	7033      	strb	r3, [r6, #0]
					tx_packet = usb_malloc();
    51fa:	f7ff ff51 	bl	50a0 <usb_malloc>
    51fe:	f8c9 0000 	str.w	r0, [r9]
					if (tx_packet) break;
    5202:	b980      	cbnz	r0, 5226 <usb_serial_write+0x66>
					tx_noautoflush = 0;
    5204:	4b1d      	ldr	r3, [pc, #116]	; (527c <usb_serial_write+0xbc>)
    5206:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5208:	f1b8 0801 	subs.w	r8, r8, #1
    520c:	4b1e      	ldr	r3, [pc, #120]	; (5288 <usb_serial_write+0xc8>)
    520e:	d001      	beq.n	5214 <usb_serial_write+0x54>
    5210:	781a      	ldrb	r2, [r3, #0]
    5212:	b12a      	cbz	r2, 5220 <usb_serial_write+0x60>
					transmit_previous_timeout = 1;
    5214:	2201      	movs	r2, #1
    5216:	701a      	strb	r2, [r3, #0]
					return -1;
    5218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    521c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				yield();
    5220:	f000 f8db 	bl	53da <yield>
			}
    5224:	e7db      	b.n	51de <usb_serial_write+0x1e>
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    5226:	6829      	ldr	r1, [r5, #0]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5228:	4a17      	ldr	r2, [pc, #92]	; (5288 <usb_serial_write+0xc8>)
		len = CDC_TX_SIZE - tx_packet->index;
    522a:	8848      	ldrh	r0, [r1, #2]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    522c:	2300      	movs	r3, #0
    522e:	7013      	strb	r3, [r2, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    5230:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    5234:	4294      	cmp	r4, r2
    5236:	bf38      	it	cc
    5238:	4622      	movcc	r2, r4
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    523a:	f100 0c08 	add.w	ip, r0, #8
		tx_packet->index += len;
    523e:	4410      	add	r0, r2
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    5240:	448c      	add	ip, r1
		tx_packet->index += len;
    5242:	8048      	strh	r0, [r1, #2]
		size -= len;
    5244:	1aa4      	subs	r4, r4, r2
		while (len-- > 0) *dest++ = *src++;
    5246:	4293      	cmp	r3, r2
    5248:	d004      	beq.n	5254 <usb_serial_write+0x94>
    524a:	5cf8      	ldrb	r0, [r7, r3]
    524c:	f80c 0003 	strb.w	r0, [ip, r3]
    5250:	3301      	adds	r3, #1
    5252:	e7f8      	b.n	5246 <usb_serial_write+0x86>
    5254:	441f      	add	r7, r3
		if (tx_packet->index >= CDC_TX_SIZE) {
    5256:	884b      	ldrh	r3, [r1, #2]
    5258:	2b3f      	cmp	r3, #63	; 0x3f
    525a:	d906      	bls.n	526a <usb_serial_write+0xaa>
			tx_packet->len = CDC_TX_SIZE;
    525c:	2340      	movs	r3, #64	; 0x40
    525e:	800b      	strh	r3, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5260:	2004      	movs	r0, #4
    5262:	f7ff fb79 	bl	4958 <usb_tx>
			tx_packet = NULL;
    5266:	2300      	movs	r3, #0
    5268:	602b      	str	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    526a:	4b08      	ldr	r3, [pc, #32]	; (528c <usb_serial_write+0xcc>)
    526c:	2205      	movs	r2, #5
    526e:	701a      	strb	r2, [r3, #0]
    5270:	e7ad      	b.n	51ce <usb_serial_write+0xe>
	}
	tx_noautoflush = 0;
    5272:	7034      	strb	r4, [r6, #0]
	return 0;
    5274:	4620      	mov	r0, r4
}
    5276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    527a:	bf00      	nop
    527c:	1fff9419 	.word	0x1fff9419
    5280:	1fff941c 	.word	0x1fff941c
    5284:	1fff9403 	.word	0x1fff9403
    5288:	1fff9420 	.word	0x1fff9420
    528c:	1fff9418 	.word	0x1fff9418

00005290 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5290:	b507      	push	{r0, r1, r2, lr}
    5292:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    5294:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5296:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    529a:	4618      	mov	r0, r3
    529c:	f7ff ff90 	bl	51c0 <usb_serial_write>
}
    52a0:	b003      	add	sp, #12
    52a2:	f85d fb04 	ldr.w	pc, [sp], #4
    52a6:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

000052a8 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return 0;
}

void usb_serial_flush_output(void)
{
    52a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!usb_configuration) return;
    52ac:	4b11      	ldr	r3, [pc, #68]	; (52f4 <usb_serial_flush_output+0x4c>)
    52ae:	781b      	ldrb	r3, [r3, #0]
    52b0:	b1f3      	cbz	r3, 52f0 <usb_serial_flush_output+0x48>
	tx_noautoflush = 1;
	if (tx_packet) {
    52b2:	4e11      	ldr	r6, [pc, #68]	; (52f8 <usb_serial_flush_output+0x50>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    52b4:	4b11      	ldr	r3, [pc, #68]	; (52fc <usb_serial_flush_output+0x54>)
	if (tx_packet) {
    52b6:	6834      	ldr	r4, [r6, #0]
    52b8:	4d11      	ldr	r5, [pc, #68]	; (5300 <usb_serial_flush_output+0x58>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    52ba:	2701      	movs	r7, #1
    52bc:	701f      	strb	r7, [r3, #0]
    52be:	4698      	mov	r8, r3
	if (tx_packet) {
    52c0:	b14c      	cbz	r4, 52d6 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    52c2:	2700      	movs	r7, #0
		tx_packet->len = tx_packet->index;
    52c4:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    52c6:	702f      	strb	r7, [r5, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    52c8:	2004      	movs	r0, #4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    52ca:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    52cc:	4621      	mov	r1, r4
    52ce:	f7ff fb43 	bl	4958 <usb_tx>
		tx_packet = NULL;
    52d2:	6037      	str	r7, [r6, #0]
    52d4:	e009      	b.n	52ea <usb_serial_flush_output+0x42>
	} else {
		usb_packet_t *tx = usb_malloc();
    52d6:	f7ff fee3 	bl	50a0 <usb_malloc>
		if (tx) {
    52da:	4601      	mov	r1, r0
    52dc:	b120      	cbz	r0, 52e8 <usb_serial_flush_output+0x40>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    52de:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    52e0:	702c      	strb	r4, [r5, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    52e2:	f7ff fb39 	bl	4958 <usb_tx>
    52e6:	e000      	b.n	52ea <usb_serial_flush_output+0x42>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    52e8:	702f      	strb	r7, [r5, #0]
		}
	}
	tx_noautoflush = 0;
    52ea:	2300      	movs	r3, #0
    52ec:	f888 3000 	strb.w	r3, [r8]
    52f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52f4:	1fff9403 	.word	0x1fff9403
    52f8:	1fff941c 	.word	0x1fff941c
    52fc:	1fff9419 	.word	0x1fff9419
    5300:	1fff9418 	.word	0x1fff9418

00005304 <usb_serial_flush_callback>:
}

void usb_serial_flush_callback(void)
{
    5304:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    5306:	4b0e      	ldr	r3, [pc, #56]	; (5340 <usb_serial_flush_callback+0x3c>)
    5308:	781b      	ldrb	r3, [r3, #0]
    530a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    530e:	b9ab      	cbnz	r3, 533c <usb_serial_flush_callback+0x38>
	if (tx_packet) {
    5310:	4c0c      	ldr	r4, [pc, #48]	; (5344 <usb_serial_flush_callback+0x40>)
    5312:	6821      	ldr	r1, [r4, #0]
    5314:	b131      	cbz	r1, 5324 <usb_serial_flush_callback+0x20>
		tx_packet->len = tx_packet->index;
    5316:	884b      	ldrh	r3, [r1, #2]
    5318:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    531a:	2004      	movs	r0, #4
    531c:	f7ff fb1c 	bl	4958 <usb_tx>
		tx_packet = NULL;
    5320:	6025      	str	r5, [r4, #0]
    5322:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    5324:	f7ff febc 	bl	50a0 <usb_malloc>
		if (tx) {
    5328:	4601      	mov	r1, r0
    532a:	b120      	cbz	r0, 5336 <usb_serial_flush_callback+0x32>
			usb_tx(CDC_TX_ENDPOINT, tx);
    532c:	2004      	movs	r0, #4
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    532e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    5332:	f7ff bb11 	b.w	4958 <usb_tx>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5336:	4b04      	ldr	r3, [pc, #16]	; (5348 <usb_serial_flush_callback+0x44>)
    5338:	2201      	movs	r2, #1
    533a:	701a      	strb	r2, [r3, #0]
    533c:	bd38      	pop	{r3, r4, r5, pc}
    533e:	bf00      	nop
    5340:	1fff9419 	.word	0x1fff9419
    5344:	1fff941c 	.word	0x1fff941c
    5348:	1fff9418 	.word	0x1fff9418

0000534c <_Z10randomSeedm>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    534c:	b108      	cbz	r0, 5352 <_Z10randomSeedm+0x6>
    534e:	4b01      	ldr	r3, [pc, #4]	; (5354 <_Z10randomSeedm+0x8>)
    5350:	6018      	str	r0, [r3, #0]
    5352:	4770      	bx	lr
    5354:	1fff942c 	.word	0x1fff942c

00005358 <_Z6randomv>:
uint32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    5358:	4a0c      	ldr	r2, [pc, #48]	; (538c <_Z6randomv+0x34>)
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
    535a:	480d      	ldr	r0, [pc, #52]	; (5390 <_Z6randomv+0x38>)
uint32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    535c:	6813      	ldr	r3, [r2, #0]
    535e:	4611      	mov	r1, r2
	if (x == 0) x = 123459876;
    5360:	4a0c      	ldr	r2, [pc, #48]	; (5394 <_Z6randomv+0x3c>)
    5362:	2b00      	cmp	r3, #0
    5364:	bf08      	it	eq
    5366:	4613      	moveq	r3, r2
	hi = x / 127773;
	lo = x % 127773;
    5368:	fb93 f2f0 	sdiv	r2, r3, r0
    536c:	fb00 3312 	mls	r3, r0, r2, r3
	x = 16807 * lo - 2836 * hi;
    5370:	4809      	ldr	r0, [pc, #36]	; (5398 <_Z6randomv+0x40>)
    5372:	4342      	muls	r2, r0
    5374:	f244 10a7 	movw	r0, #16807	; 0x41a7
    5378:	fb00 2003 	mla	r0, r0, r3, r2
	if (x < 0) x += 0x7FFFFFFF;
    537c:	2800      	cmp	r0, #0
    537e:	bfbc      	itt	lt
    5380:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
    5384:	f100 30ff 	addlt.w	r0, r0, #4294967295	; 0xffffffff
	seed = x;
    5388:	6008      	str	r0, [r1, #0]
	return x;
}
    538a:	4770      	bx	lr
    538c:	1fff942c 	.word	0x1fff942c
    5390:	0001f31d 	.word	0x0001f31d
    5394:	075bd924 	.word	0x075bd924
    5398:	fffff4ec 	.word	0xfffff4ec

0000539c <_Z6randomm>:

uint32_t random(uint32_t howbig)
{
    539c:	b510      	push	{r4, lr}
	if (howbig == 0) return 0;
    539e:	4604      	mov	r4, r0
    53a0:	b130      	cbz	r0, 53b0 <_Z6randomm+0x14>
	return random() % howbig;
    53a2:	f7ff ffd9 	bl	5358 <_Z6randomv>
    53a6:	fbb0 f3f4 	udiv	r3, r0, r4
    53aa:	fb03 0014 	mls	r0, r3, r4, r0
    53ae:	bd10      	pop	{r4, pc}
}
    53b0:	bd10      	pop	{r4, pc}

000053b2 <_Z6randomll>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    53b2:	4288      	cmp	r0, r1
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    53b4:	b510      	push	{r4, lr}
    53b6:	4604      	mov	r4, r0
	if (howsmall >= howbig) return howsmall;
    53b8:	da04      	bge.n	53c4 <_Z6randomll+0x12>
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    53ba:	1a08      	subs	r0, r1, r0
    53bc:	f7ff ffee 	bl	539c <_Z6randomm>
    53c0:	4420      	add	r0, r4
    53c2:	bd10      	pop	{r4, pc}
}
    53c4:	bd10      	pop	{r4, pc}

000053c6 <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    53c6:	b510      	push	{r4, lr}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    53c8:	9c02      	ldr	r4, [sp, #8]
    53ca:	1a40      	subs	r0, r0, r1
    53cc:	1ae4      	subs	r4, r4, r3
    53ce:	4344      	muls	r4, r0
    53d0:	1a52      	subs	r2, r2, r1
    53d2:	fb94 f0f2 	sdiv	r0, r4, r2
}
    53d6:	4418      	add	r0, r3
    53d8:	bd10      	pop	{r4, pc}

000053da <yield>:
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

void yield(void) __attribute__ ((weak));
void yield(void) {};
    53da:	4770      	bx	lr

000053dc <__aeabi_atexit>:
    53dc:	4603      	mov	r3, r0
    53de:	4608      	mov	r0, r1
    53e0:	4619      	mov	r1, r3
    53e2:	f009 bcbb 	b.w	ed5c <__cxa_atexit>
    53e6:	bf00      	nop

000053e8 <_ZdlPv>:
    53e8:	b108      	cbz	r0, 53ee <_ZdlPv+0x6>
    53ea:	f009 bf01 	b.w	f1f0 <free>
    53ee:	4770      	bx	lr

000053f0 <_Znwj>:
    53f0:	b538      	push	{r3, r4, r5, lr}
    53f2:	2800      	cmp	r0, #0
    53f4:	bf14      	ite	ne
    53f6:	4604      	movne	r4, r0
    53f8:	2401      	moveq	r4, #1
    53fa:	4620      	mov	r0, r4
    53fc:	f009 fef0 	bl	f1e0 <malloc>
    5400:	b948      	cbnz	r0, 5416 <_Znwj+0x26>
    5402:	4d0d      	ldr	r5, [pc, #52]	; (5438 <_Znwj+0x48>)
    5404:	682b      	ldr	r3, [r5, #0]
    5406:	b13b      	cbz	r3, 5418 <_Znwj+0x28>
    5408:	4798      	blx	r3
    540a:	4620      	mov	r0, r4
    540c:	f009 fee8 	bl	f1e0 <malloc>
    5410:	2800      	cmp	r0, #0
    5412:	d0f7      	beq.n	5404 <_Znwj+0x14>
    5414:	bd38      	pop	{r3, r4, r5, pc}
    5416:	bd38      	pop	{r3, r4, r5, pc}
    5418:	2004      	movs	r0, #4
    541a:	f000 f831 	bl	5480 <__cxa_allocate_exception>
    541e:	4b07      	ldr	r3, [pc, #28]	; (543c <_Znwj+0x4c>)
    5420:	6003      	str	r3, [r0, #0]
    5422:	4907      	ldr	r1, [pc, #28]	; (5440 <_Znwj+0x50>)
    5424:	4a07      	ldr	r2, [pc, #28]	; (5444 <_Znwj+0x54>)
    5426:	f000 fdbf 	bl	5fa8 <__cxa_throw>
    542a:	3101      	adds	r1, #1
    542c:	d001      	beq.n	5432 <_Znwj+0x42>
    542e:	f000 f86d 	bl	550c <__cxa_end_cleanup>
    5432:	f000 f95f 	bl	56f4 <__cxa_call_unexpected>
    5436:	bf00      	nop
    5438:	1fff9c44 	.word	0x1fff9c44
    543c:	00014558 	.word	0x00014558
    5440:	00014568 	.word	0x00014568
    5444:	00005451 	.word	0x00005451

00005448 <_ZNKSt9bad_alloc4whatEv>:
    5448:	4800      	ldr	r0, [pc, #0]	; (544c <_ZNKSt9bad_alloc4whatEv+0x4>)
    544a:	4770      	bx	lr
    544c:	00014574 	.word	0x00014574

00005450 <_ZNSt9bad_allocD1Ev>:
    5450:	b510      	push	{r4, lr}
    5452:	4b03      	ldr	r3, [pc, #12]	; (5460 <_ZNSt9bad_allocD1Ev+0x10>)
    5454:	6003      	str	r3, [r0, #0]
    5456:	4604      	mov	r4, r0
    5458:	f000 fa44 	bl	58e4 <_ZNSt9exceptionD1Ev>
    545c:	4620      	mov	r0, r4
    545e:	bd10      	pop	{r4, pc}
    5460:	00014558 	.word	0x00014558

00005464 <_ZNSt9bad_allocD0Ev>:
    5464:	b510      	push	{r4, lr}
    5466:	4b05      	ldr	r3, [pc, #20]	; (547c <_ZNSt9bad_allocD0Ev+0x18>)
    5468:	6003      	str	r3, [r0, #0]
    546a:	4604      	mov	r4, r0
    546c:	f000 fa3a 	bl	58e4 <_ZNSt9exceptionD1Ev>
    5470:	4620      	mov	r0, r4
    5472:	f7ff ffb9 	bl	53e8 <_ZdlPv>
    5476:	4620      	mov	r0, r4
    5478:	bd10      	pop	{r4, pc}
    547a:	bf00      	nop
    547c:	00014558 	.word	0x00014558

00005480 <__cxa_allocate_exception>:
    5480:	b538      	push	{r3, r4, r5, lr}
    5482:	f100 0580 	add.w	r5, r0, #128	; 0x80
    5486:	4628      	mov	r0, r5
    5488:	f009 feaa 	bl	f1e0 <malloc>
    548c:	4604      	mov	r4, r0
    548e:	b138      	cbz	r0, 54a0 <__cxa_allocate_exception+0x20>
    5490:	4620      	mov	r0, r4
    5492:	2100      	movs	r1, #0
    5494:	2280      	movs	r2, #128	; 0x80
    5496:	f00a fac5 	bl	fa24 <memset>
    549a:	f104 0080 	add.w	r0, r4, #128	; 0x80
    549e:	bd38      	pop	{r3, r4, r5, pc}
    54a0:	4a0b      	ldr	r2, [pc, #44]	; (54d0 <__cxa_allocate_exception+0x50>)
    54a2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    54a6:	6811      	ldr	r1, [r2, #0]
    54a8:	d807      	bhi.n	54ba <__cxa_allocate_exception+0x3a>
    54aa:	460b      	mov	r3, r1
    54ac:	07d8      	lsls	r0, r3, #31
    54ae:	d506      	bpl.n	54be <__cxa_allocate_exception+0x3e>
    54b0:	3401      	adds	r4, #1
    54b2:	2c04      	cmp	r4, #4
    54b4:	ea4f 0353 	mov.w	r3, r3, lsr #1
    54b8:	d1f8      	bne.n	54ac <__cxa_allocate_exception+0x2c>
    54ba:	f000 fd3f 	bl	5f3c <_ZSt9terminatev>
    54be:	2001      	movs	r0, #1
    54c0:	40a0      	lsls	r0, r4
    54c2:	4b04      	ldr	r3, [pc, #16]	; (54d4 <__cxa_allocate_exception+0x54>)
    54c4:	4301      	orrs	r1, r0
    54c6:	6011      	str	r1, [r2, #0]
    54c8:	eb03 2444 	add.w	r4, r3, r4, lsl #9
    54cc:	e7e0      	b.n	5490 <__cxa_allocate_exception+0x10>
    54ce:	bf00      	nop
    54d0:	1fff9430 	.word	0x1fff9430
    54d4:	1fff9438 	.word	0x1fff9438

000054d8 <__cxa_free_exception>:
    54d8:	4b0a      	ldr	r3, [pc, #40]	; (5504 <__cxa_free_exception+0x2c>)
    54da:	4298      	cmp	r0, r3
    54dc:	d303      	bcc.n	54e6 <__cxa_free_exception+0xe>
    54de:	f503 6200 	add.w	r2, r3, #2048	; 0x800
    54e2:	4290      	cmp	r0, r2
    54e4:	d302      	bcc.n	54ec <__cxa_free_exception+0x14>
    54e6:	3880      	subs	r0, #128	; 0x80
    54e8:	f009 be82 	b.w	f1f0 <free>
    54ec:	4a06      	ldr	r2, [pc, #24]	; (5508 <__cxa_free_exception+0x30>)
    54ee:	1ac3      	subs	r3, r0, r3
    54f0:	6811      	ldr	r1, [r2, #0]
    54f2:	0a5b      	lsrs	r3, r3, #9
    54f4:	2001      	movs	r0, #1
    54f6:	fa00 f303 	lsl.w	r3, r0, r3
    54fa:	ea21 0103 	bic.w	r1, r1, r3
    54fe:	6011      	str	r1, [r2, #0]
    5500:	4770      	bx	lr
    5502:	bf00      	nop
    5504:	1fff9438 	.word	0x1fff9438
    5508:	1fff9430 	.word	0x1fff9430

0000550c <__cxa_end_cleanup>:
    550c:	b41e      	push	{r1, r2, r3, r4}
    550e:	f000 f88b 	bl	5628 <__gnu_end_cleanup>
    5512:	bc1e      	pop	{r1, r2, r3, r4}
    5514:	f009 fa34 	bl	e980 <_Unwind_Resume>

00005518 <__cxa_type_match>:
    5518:	b5f0      	push	{r4, r5, r6, r7, lr}
    551a:	7802      	ldrb	r2, [r0, #0]
    551c:	2a47      	cmp	r2, #71	; 0x47
    551e:	b083      	sub	sp, #12
    5520:	460d      	mov	r5, r1
    5522:	461e      	mov	r6, r3
    5524:	d01a      	beq.n	555c <__cxa_type_match+0x44>
    5526:	2300      	movs	r3, #0
    5528:	4c24      	ldr	r4, [pc, #144]	; (55bc <__cxa_type_match+0xa4>)
    552a:	9301      	str	r3, [sp, #4]
    552c:	6822      	ldr	r2, [r4, #0]
    552e:	4620      	mov	r0, r4
    5530:	6893      	ldr	r3, [r2, #8]
    5532:	4798      	blx	r3
    5534:	b180      	cbz	r0, 5558 <__cxa_type_match+0x40>
    5536:	9b01      	ldr	r3, [sp, #4]
    5538:	681b      	ldr	r3, [r3, #0]
    553a:	9301      	str	r3, [sp, #4]
    553c:	2702      	movs	r7, #2
    553e:	682a      	ldr	r2, [r5, #0]
    5540:	4621      	mov	r1, r4
    5542:	4628      	mov	r0, r5
    5544:	6914      	ldr	r4, [r2, #16]
    5546:	2301      	movs	r3, #1
    5548:	aa01      	add	r2, sp, #4
    554a:	47a0      	blx	r4
    554c:	b110      	cbz	r0, 5554 <__cxa_type_match+0x3c>
    554e:	9b01      	ldr	r3, [sp, #4]
    5550:	6033      	str	r3, [r6, #0]
    5552:	4638      	mov	r0, r7
    5554:	b003      	add	sp, #12
    5556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5558:	2701      	movs	r7, #1
    555a:	e7f0      	b.n	553e <__cxa_type_match+0x26>
    555c:	7843      	ldrb	r3, [r0, #1]
    555e:	2b4e      	cmp	r3, #78	; 0x4e
    5560:	d1e1      	bne.n	5526 <__cxa_type_match+0xe>
    5562:	7883      	ldrb	r3, [r0, #2]
    5564:	2b55      	cmp	r3, #85	; 0x55
    5566:	d1de      	bne.n	5526 <__cxa_type_match+0xe>
    5568:	78c3      	ldrb	r3, [r0, #3]
    556a:	2b43      	cmp	r3, #67	; 0x43
    556c:	d1db      	bne.n	5526 <__cxa_type_match+0xe>
    556e:	7903      	ldrb	r3, [r0, #4]
    5570:	2b46      	cmp	r3, #70	; 0x46
    5572:	d016      	beq.n	55a2 <__cxa_type_match+0x8a>
    5574:	7903      	ldrb	r3, [r0, #4]
    5576:	2b43      	cmp	r3, #67	; 0x43
    5578:	d1d5      	bne.n	5526 <__cxa_type_match+0xe>
    557a:	7943      	ldrb	r3, [r0, #5]
    557c:	2b2b      	cmp	r3, #43	; 0x2b
    557e:	d1d2      	bne.n	5526 <__cxa_type_match+0xe>
    5580:	7983      	ldrb	r3, [r0, #6]
    5582:	2b2b      	cmp	r3, #43	; 0x2b
    5584:	d1cf      	bne.n	5526 <__cxa_type_match+0xe>
    5586:	79c3      	ldrb	r3, [r0, #7]
    5588:	2b01      	cmp	r3, #1
    558a:	d8cc      	bhi.n	5526 <__cxa_type_match+0xe>
    558c:	d004      	beq.n	5598 <__cxa_type_match+0x80>
    558e:	f850 4c20 	ldr.w	r4, [r0, #-32]
    5592:	3058      	adds	r0, #88	; 0x58
    5594:	9001      	str	r0, [sp, #4]
    5596:	e7c9      	b.n	552c <__cxa_type_match+0x14>
    5598:	f850 0c20 	ldr.w	r0, [r0, #-32]
    559c:	f850 4c78 	ldr.w	r4, [r0, #-120]
    55a0:	e7f8      	b.n	5594 <__cxa_type_match+0x7c>
    55a2:	7943      	ldrb	r3, [r0, #5]
    55a4:	2b4f      	cmp	r3, #79	; 0x4f
    55a6:	d1e5      	bne.n	5574 <__cxa_type_match+0x5c>
    55a8:	7983      	ldrb	r3, [r0, #6]
    55aa:	2b52      	cmp	r3, #82	; 0x52
    55ac:	d1e2      	bne.n	5574 <__cxa_type_match+0x5c>
    55ae:	79c3      	ldrb	r3, [r0, #7]
    55b0:	2b00      	cmp	r3, #0
    55b2:	d1df      	bne.n	5574 <__cxa_type_match+0x5c>
    55b4:	9301      	str	r3, [sp, #4]
    55b6:	4c02      	ldr	r4, [pc, #8]	; (55c0 <__cxa_type_match+0xa8>)
    55b8:	e7b8      	b.n	552c <__cxa_type_match+0x14>
    55ba:	bf00      	nop
    55bc:	0001461c 	.word	0x0001461c
    55c0:	000145b0 	.word	0x000145b0

000055c4 <__cxa_begin_cleanup>:
    55c4:	b510      	push	{r4, lr}
    55c6:	4604      	mov	r4, r0
    55c8:	f000 f9b8 	bl	593c <__cxa_get_globals>
    55cc:	7823      	ldrb	r3, [r4, #0]
    55ce:	2b47      	cmp	r3, #71	; 0x47
    55d0:	f1a4 0220 	sub.w	r2, r4, #32
    55d4:	d004      	beq.n	55e0 <__cxa_begin_cleanup+0x1c>
    55d6:	6883      	ldr	r3, [r0, #8]
    55d8:	bb23      	cbnz	r3, 5624 <__cxa_begin_cleanup+0x60>
    55da:	6082      	str	r2, [r0, #8]
    55dc:	2001      	movs	r0, #1
    55de:	bd10      	pop	{r4, pc}
    55e0:	7863      	ldrb	r3, [r4, #1]
    55e2:	2b4e      	cmp	r3, #78	; 0x4e
    55e4:	d1f7      	bne.n	55d6 <__cxa_begin_cleanup+0x12>
    55e6:	78a3      	ldrb	r3, [r4, #2]
    55e8:	2b55      	cmp	r3, #85	; 0x55
    55ea:	d1f4      	bne.n	55d6 <__cxa_begin_cleanup+0x12>
    55ec:	78e3      	ldrb	r3, [r4, #3]
    55ee:	2b43      	cmp	r3, #67	; 0x43
    55f0:	d1f1      	bne.n	55d6 <__cxa_begin_cleanup+0x12>
    55f2:	7923      	ldrb	r3, [r4, #4]
    55f4:	2b43      	cmp	r3, #67	; 0x43
    55f6:	d1ee      	bne.n	55d6 <__cxa_begin_cleanup+0x12>
    55f8:	7963      	ldrb	r3, [r4, #5]
    55fa:	2b2b      	cmp	r3, #43	; 0x2b
    55fc:	d1eb      	bne.n	55d6 <__cxa_begin_cleanup+0x12>
    55fe:	79a3      	ldrb	r3, [r4, #6]
    5600:	2b2b      	cmp	r3, #43	; 0x2b
    5602:	d1e8      	bne.n	55d6 <__cxa_begin_cleanup+0x12>
    5604:	79e3      	ldrb	r3, [r4, #7]
    5606:	2b01      	cmp	r3, #1
    5608:	d8e5      	bhi.n	55d6 <__cxa_begin_cleanup+0x12>
    560a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    560e:	3301      	adds	r3, #1
    5610:	2b01      	cmp	r3, #1
    5612:	f844 3c04 	str.w	r3, [r4, #-4]
    5616:	d1e1      	bne.n	55dc <__cxa_begin_cleanup+0x18>
    5618:	6883      	ldr	r3, [r0, #8]
    561a:	f844 3c08 	str.w	r3, [r4, #-8]
    561e:	6082      	str	r2, [r0, #8]
    5620:	2001      	movs	r0, #1
    5622:	bd10      	pop	{r4, pc}
    5624:	f000 fc8a 	bl	5f3c <_ZSt9terminatev>

00005628 <__gnu_end_cleanup>:
    5628:	b508      	push	{r3, lr}
    562a:	f000 f987 	bl	593c <__cxa_get_globals>
    562e:	6883      	ldr	r3, [r0, #8]
    5630:	b383      	cbz	r3, 5694 <__gnu_end_cleanup+0x6c>
    5632:	f893 2020 	ldrb.w	r2, [r3, #32]
    5636:	2a47      	cmp	r2, #71	; 0x47
    5638:	d004      	beq.n	5644 <__gnu_end_cleanup+0x1c>
    563a:	2200      	movs	r2, #0
    563c:	6082      	str	r2, [r0, #8]
    563e:	f103 0020 	add.w	r0, r3, #32
    5642:	bd08      	pop	{r3, pc}
    5644:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    5648:	2a4e      	cmp	r2, #78	; 0x4e
    564a:	d1f6      	bne.n	563a <__gnu_end_cleanup+0x12>
    564c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    5650:	2a55      	cmp	r2, #85	; 0x55
    5652:	d1f2      	bne.n	563a <__gnu_end_cleanup+0x12>
    5654:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    5658:	2a43      	cmp	r2, #67	; 0x43
    565a:	d1ee      	bne.n	563a <__gnu_end_cleanup+0x12>
    565c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    5660:	2a43      	cmp	r2, #67	; 0x43
    5662:	d1ea      	bne.n	563a <__gnu_end_cleanup+0x12>
    5664:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    5668:	2a2b      	cmp	r2, #43	; 0x2b
    566a:	d1e6      	bne.n	563a <__gnu_end_cleanup+0x12>
    566c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    5670:	2a2b      	cmp	r2, #43	; 0x2b
    5672:	d1e2      	bne.n	563a <__gnu_end_cleanup+0x12>
    5674:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    5678:	2a01      	cmp	r2, #1
    567a:	d8de      	bhi.n	563a <__gnu_end_cleanup+0x12>
    567c:	69da      	ldr	r2, [r3, #28]
    567e:	3a01      	subs	r2, #1
    5680:	61da      	str	r2, [r3, #28]
    5682:	2a00      	cmp	r2, #0
    5684:	d1db      	bne.n	563e <__gnu_end_cleanup+0x16>
    5686:	699a      	ldr	r2, [r3, #24]
    5688:	6082      	str	r2, [r0, #8]
    568a:	2200      	movs	r2, #0
    568c:	619a      	str	r2, [r3, #24]
    568e:	f103 0020 	add.w	r0, r3, #32
    5692:	bd08      	pop	{r3, pc}
    5694:	f000 fc52 	bl	5f3c <_ZSt9terminatev>

00005698 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
    5698:	7803      	ldrb	r3, [r0, #0]
    569a:	2b47      	cmp	r3, #71	; 0x47
    569c:	d001      	beq.n	56a2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
    569e:	2000      	movs	r0, #0
    56a0:	4770      	bx	lr
    56a2:	7843      	ldrb	r3, [r0, #1]
    56a4:	2b4e      	cmp	r3, #78	; 0x4e
    56a6:	d1fa      	bne.n	569e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    56a8:	7883      	ldrb	r3, [r0, #2]
    56aa:	2b55      	cmp	r3, #85	; 0x55
    56ac:	d1f7      	bne.n	569e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    56ae:	78c3      	ldrb	r3, [r0, #3]
    56b0:	2b43      	cmp	r3, #67	; 0x43
    56b2:	d1f4      	bne.n	569e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    56b4:	7903      	ldrb	r3, [r0, #4]
    56b6:	2b43      	cmp	r3, #67	; 0x43
    56b8:	d1f1      	bne.n	569e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    56ba:	7943      	ldrb	r3, [r0, #5]
    56bc:	2b2b      	cmp	r3, #43	; 0x2b
    56be:	d1ee      	bne.n	569e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    56c0:	7983      	ldrb	r3, [r0, #6]
    56c2:	2b2b      	cmp	r3, #43	; 0x2b
    56c4:	d1eb      	bne.n	569e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    56c6:	79c0      	ldrb	r0, [r0, #7]
    56c8:	2801      	cmp	r0, #1
    56ca:	bf8c      	ite	hi
    56cc:	2000      	movhi	r0, #0
    56ce:	2001      	movls	r0, #1
    56d0:	4770      	bx	lr
    56d2:	bf00      	nop

000056d4 <__cxa_call_terminate>:
    56d4:	b510      	push	{r4, lr}
    56d6:	4604      	mov	r4, r0
    56d8:	b128      	cbz	r0, 56e6 <__cxa_call_terminate+0x12>
    56da:	f000 f877 	bl	57cc <__cxa_begin_catch>
    56de:	4620      	mov	r0, r4
    56e0:	f7ff ffda 	bl	5698 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    56e4:	b908      	cbnz	r0, 56ea <__cxa_call_terminate+0x16>
    56e6:	f000 fc29 	bl	5f3c <_ZSt9terminatev>
    56ea:	f854 0c14 	ldr.w	r0, [r4, #-20]
    56ee:	f000 fc11 	bl	5f14 <_ZN10__cxxabiv111__terminateEPFvvE>
    56f2:	bf00      	nop

000056f4 <__cxa_call_unexpected>:
    56f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56f8:	b083      	sub	sp, #12
    56fa:	4604      	mov	r4, r0
    56fc:	f7ff ffcc 	bl	5698 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    5700:	b170      	cbz	r0, 5720 <__cxa_call_unexpected+0x2c>
    5702:	f854 5c18 	ldr.w	r5, [r4, #-24]
    5706:	f854 6c14 	ldr.w	r6, [r4, #-20]
    570a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    570c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
    5710:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
    5714:	4620      	mov	r0, r4
    5716:	f000 f859 	bl	57cc <__cxa_begin_catch>
    571a:	4628      	mov	r0, r5
    571c:	f000 fc16 	bl	5f4c <_ZN10__cxxabiv112__unexpectedEPFvvE>
    5720:	4620      	mov	r0, r4
    5722:	f000 f853 	bl	57cc <__cxa_begin_catch>
    5726:	f000 fc15 	bl	5f54 <_ZSt10unexpectedv>
    572a:	f000 f84f 	bl	57cc <__cxa_begin_catch>
    572e:	f000 fc05 	bl	5f3c <_ZSt9terminatev>
    5732:	f000 f84b 	bl	57cc <__cxa_begin_catch>
    5736:	f000 f8fd 	bl	5934 <__cxa_get_globals_fast>
    573a:	6803      	ldr	r3, [r0, #0]
    573c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    5740:	2a01      	cmp	r2, #1
    5742:	d030      	beq.n	57a6 <__cxa_call_unexpected+0xb2>
    5744:	f103 0278 	add.w	r2, r3, #120	; 0x78
    5748:	2400      	movs	r4, #0
    574a:	9200      	str	r2, [sp, #0]
    574c:	f028 0803 	bic.w	r8, r8, #3
    5750:	f103 0b20 	add.w	fp, r3, #32
    5754:	46a2      	mov	sl, r4
    5756:	45ba      	cmp	sl, r7
    5758:	da1b      	bge.n	5792 <__cxa_call_unexpected+0x9e>
    575a:	f8d9 5000 	ldr.w	r5, [r9]
    575e:	b105      	cbz	r5, 5762 <__cxa_call_unexpected+0x6e>
    5760:	444d      	add	r5, r9
    5762:	4658      	mov	r0, fp
    5764:	4629      	mov	r1, r5
    5766:	2200      	movs	r2, #0
    5768:	466b      	mov	r3, sp
    576a:	f7ff fed5 	bl	5518 <__cxa_type_match>
    576e:	b9f8      	cbnz	r0, 57b0 <__cxa_call_unexpected+0xbc>
    5770:	682b      	ldr	r3, [r5, #0]
    5772:	4913      	ldr	r1, [pc, #76]	; (57c0 <__cxa_call_unexpected+0xcc>)
    5774:	f8d3 c010 	ldr.w	ip, [r3, #16]
    5778:	aa02      	add	r2, sp, #8
    577a:	2301      	movs	r3, #1
    577c:	f842 0d04 	str.w	r0, [r2, #-4]!
    5780:	4628      	mov	r0, r5
    5782:	47e0      	blx	ip
    5784:	2800      	cmp	r0, #0
    5786:	bf18      	it	ne
    5788:	2401      	movne	r4, #1
    578a:	f10a 0a01 	add.w	sl, sl, #1
    578e:	44c1      	add	r9, r8
    5790:	e7e1      	b.n	5756 <__cxa_call_unexpected+0x62>
    5792:	b154      	cbz	r4, 57aa <__cxa_call_unexpected+0xb6>
    5794:	2004      	movs	r0, #4
    5796:	f7ff fe73 	bl	5480 <__cxa_allocate_exception>
    579a:	4b0a      	ldr	r3, [pc, #40]	; (57c4 <__cxa_call_unexpected+0xd0>)
    579c:	6003      	str	r3, [r0, #0]
    579e:	4908      	ldr	r1, [pc, #32]	; (57c0 <__cxa_call_unexpected+0xcc>)
    57a0:	4a09      	ldr	r2, [pc, #36]	; (57c8 <__cxa_call_unexpected+0xd4>)
    57a2:	f000 fc01 	bl	5fa8 <__cxa_throw>
    57a6:	681a      	ldr	r2, [r3, #0]
    57a8:	e7ce      	b.n	5748 <__cxa_call_unexpected+0x54>
    57aa:	4630      	mov	r0, r6
    57ac:	f000 fbb2 	bl	5f14 <_ZN10__cxxabiv111__terminateEPFvvE>
    57b0:	f000 fc42 	bl	6038 <__cxa_rethrow>
    57b4:	f000 f850 	bl	5858 <__cxa_end_catch>
    57b8:	f000 f84e 	bl	5858 <__cxa_end_catch>
    57bc:	f7ff fea6 	bl	550c <__cxa_end_cleanup>
    57c0:	00014670 	.word	0x00014670
    57c4:	00014630 	.word	0x00014630
    57c8:	000058f1 	.word	0x000058f1

000057cc <__cxa_begin_catch>:
    57cc:	b538      	push	{r3, r4, r5, lr}
    57ce:	4604      	mov	r4, r0
    57d0:	f000 f8b4 	bl	593c <__cxa_get_globals>
    57d4:	7821      	ldrb	r1, [r4, #0]
    57d6:	6803      	ldr	r3, [r0, #0]
    57d8:	2947      	cmp	r1, #71	; 0x47
    57da:	f1a4 0220 	sub.w	r2, r4, #32
    57de:	d005      	beq.n	57ec <__cxa_begin_catch+0x20>
    57e0:	2b00      	cmp	r3, #0
    57e2:	d131      	bne.n	5848 <__cxa_begin_catch+0x7c>
    57e4:	461c      	mov	r4, r3
    57e6:	6002      	str	r2, [r0, #0]
    57e8:	4620      	mov	r0, r4
    57ea:	bd38      	pop	{r3, r4, r5, pc}
    57ec:	7861      	ldrb	r1, [r4, #1]
    57ee:	294e      	cmp	r1, #78	; 0x4e
    57f0:	d1f6      	bne.n	57e0 <__cxa_begin_catch+0x14>
    57f2:	78a1      	ldrb	r1, [r4, #2]
    57f4:	2955      	cmp	r1, #85	; 0x55
    57f6:	d1f3      	bne.n	57e0 <__cxa_begin_catch+0x14>
    57f8:	78e1      	ldrb	r1, [r4, #3]
    57fa:	2943      	cmp	r1, #67	; 0x43
    57fc:	d1f0      	bne.n	57e0 <__cxa_begin_catch+0x14>
    57fe:	7921      	ldrb	r1, [r4, #4]
    5800:	2943      	cmp	r1, #67	; 0x43
    5802:	d1ed      	bne.n	57e0 <__cxa_begin_catch+0x14>
    5804:	7961      	ldrb	r1, [r4, #5]
    5806:	292b      	cmp	r1, #43	; 0x2b
    5808:	d1ea      	bne.n	57e0 <__cxa_begin_catch+0x14>
    580a:	79a1      	ldrb	r1, [r4, #6]
    580c:	292b      	cmp	r1, #43	; 0x2b
    580e:	d1e7      	bne.n	57e0 <__cxa_begin_catch+0x14>
    5810:	79e1      	ldrb	r1, [r4, #7]
    5812:	2901      	cmp	r1, #1
    5814:	d8e4      	bhi.n	57e0 <__cxa_begin_catch+0x14>
    5816:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    581a:	2d00      	cmp	r5, #0
    581c:	db11      	blt.n	5842 <__cxa_begin_catch+0x76>
    581e:	3501      	adds	r5, #1
    5820:	6841      	ldr	r1, [r0, #4]
    5822:	f844 5c0c 	str.w	r5, [r4, #-12]
    5826:	429a      	cmp	r2, r3
    5828:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    582c:	6041      	str	r1, [r0, #4]
    582e:	bf1c      	itt	ne
    5830:	f844 3c10 	strne.w	r3, [r4, #-16]
    5834:	6002      	strne	r2, [r0, #0]
    5836:	4620      	mov	r0, r4
    5838:	6a64      	ldr	r4, [r4, #36]	; 0x24
    583a:	f008 fcdd 	bl	e1f8 <_Unwind_Complete>
    583e:	4620      	mov	r0, r4
    5840:	bd38      	pop	{r3, r4, r5, pc}
    5842:	f1c5 0501 	rsb	r5, r5, #1
    5846:	e7eb      	b.n	5820 <__cxa_begin_catch+0x54>
    5848:	f000 fb78 	bl	5f3c <_ZSt9terminatev>
    584c:	3101      	adds	r1, #1
    584e:	d001      	beq.n	5854 <__cxa_begin_catch+0x88>
    5850:	f7ff fe5c 	bl	550c <__cxa_end_cleanup>
    5854:	f7ff ff4e 	bl	56f4 <__cxa_call_unexpected>

00005858 <__cxa_end_catch>:
    5858:	b508      	push	{r3, lr}
    585a:	f000 f86b 	bl	5934 <__cxa_get_globals_fast>
    585e:	4602      	mov	r2, r0
    5860:	6800      	ldr	r0, [r0, #0]
    5862:	2800      	cmp	r0, #0
    5864:	d03d      	beq.n	58e2 <__cxa_end_catch+0x8a>
    5866:	f890 1020 	ldrb.w	r1, [r0, #32]
    586a:	2947      	cmp	r1, #71	; 0x47
    586c:	d006      	beq.n	587c <__cxa_end_catch+0x24>
    586e:	2100      	movs	r1, #0
    5870:	3020      	adds	r0, #32
    5872:	6011      	str	r1, [r2, #0]
    5874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5878:	f008 bcc0 	b.w	e1fc <_Unwind_DeleteException>
    587c:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    5880:	294e      	cmp	r1, #78	; 0x4e
    5882:	d1f4      	bne.n	586e <__cxa_end_catch+0x16>
    5884:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    5888:	2955      	cmp	r1, #85	; 0x55
    588a:	d1f0      	bne.n	586e <__cxa_end_catch+0x16>
    588c:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
    5890:	2943      	cmp	r1, #67	; 0x43
    5892:	d1ec      	bne.n	586e <__cxa_end_catch+0x16>
    5894:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    5898:	2943      	cmp	r1, #67	; 0x43
    589a:	d1e8      	bne.n	586e <__cxa_end_catch+0x16>
    589c:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
    58a0:	292b      	cmp	r1, #43	; 0x2b
    58a2:	d1e4      	bne.n	586e <__cxa_end_catch+0x16>
    58a4:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
    58a8:	292b      	cmp	r1, #43	; 0x2b
    58aa:	d1e0      	bne.n	586e <__cxa_end_catch+0x16>
    58ac:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
    58b0:	2901      	cmp	r1, #1
    58b2:	d8dc      	bhi.n	586e <__cxa_end_catch+0x16>
    58b4:	6941      	ldr	r1, [r0, #20]
    58b6:	2900      	cmp	r1, #0
    58b8:	db05      	blt.n	58c6 <__cxa_end_catch+0x6e>
    58ba:	3901      	subs	r1, #1
    58bc:	d008      	beq.n	58d0 <__cxa_end_catch+0x78>
    58be:	1c4b      	adds	r3, r1, #1
    58c0:	d00d      	beq.n	58de <__cxa_end_catch+0x86>
    58c2:	6141      	str	r1, [r0, #20]
    58c4:	bd08      	pop	{r3, pc}
    58c6:	3101      	adds	r1, #1
    58c8:	d1fb      	bne.n	58c2 <__cxa_end_catch+0x6a>
    58ca:	6903      	ldr	r3, [r0, #16]
    58cc:	6013      	str	r3, [r2, #0]
    58ce:	e7f8      	b.n	58c2 <__cxa_end_catch+0x6a>
    58d0:	6901      	ldr	r1, [r0, #16]
    58d2:	6011      	str	r1, [r2, #0]
    58d4:	3020      	adds	r0, #32
    58d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    58da:	f008 bc8f 	b.w	e1fc <_Unwind_DeleteException>
    58de:	f000 fb2d 	bl	5f3c <_ZSt9terminatev>
    58e2:	bd08      	pop	{r3, pc}

000058e4 <_ZNSt9exceptionD1Ev>:
    58e4:	4b01      	ldr	r3, [pc, #4]	; (58ec <_ZNSt9exceptionD1Ev+0x8>)
    58e6:	6003      	str	r3, [r0, #0]
    58e8:	4770      	bx	lr
    58ea:	bf00      	nop
    58ec:	000145a0 	.word	0x000145a0

000058f0 <_ZNSt13bad_exceptionD1Ev>:
    58f0:	4b01      	ldr	r3, [pc, #4]	; (58f8 <_ZNSt13bad_exceptionD1Ev+0x8>)
    58f2:	6003      	str	r3, [r0, #0]
    58f4:	4770      	bx	lr
    58f6:	bf00      	nop
    58f8:	000145a0 	.word	0x000145a0

000058fc <_ZNKSt9exception4whatEv>:
    58fc:	4800      	ldr	r0, [pc, #0]	; (5900 <_ZNKSt9exception4whatEv+0x4>)
    58fe:	4770      	bx	lr
    5900:	000145d4 	.word	0x000145d4

00005904 <_ZNKSt13bad_exception4whatEv>:
    5904:	4800      	ldr	r0, [pc, #0]	; (5908 <_ZNKSt13bad_exception4whatEv+0x4>)
    5906:	4770      	bx	lr
    5908:	000145e4 	.word	0x000145e4

0000590c <_ZNSt9exceptionD0Ev>:
    590c:	b510      	push	{r4, lr}
    590e:	4b03      	ldr	r3, [pc, #12]	; (591c <_ZNSt9exceptionD0Ev+0x10>)
    5910:	6003      	str	r3, [r0, #0]
    5912:	4604      	mov	r4, r0
    5914:	f7ff fd68 	bl	53e8 <_ZdlPv>
    5918:	4620      	mov	r0, r4
    591a:	bd10      	pop	{r4, pc}
    591c:	000145a0 	.word	0x000145a0

00005920 <_ZNSt13bad_exceptionD0Ev>:
    5920:	b510      	push	{r4, lr}
    5922:	4b03      	ldr	r3, [pc, #12]	; (5930 <_ZNSt13bad_exceptionD0Ev+0x10>)
    5924:	6003      	str	r3, [r0, #0]
    5926:	4604      	mov	r4, r0
    5928:	f7ff fd5e 	bl	53e8 <_ZdlPv>
    592c:	4620      	mov	r0, r4
    592e:	bd10      	pop	{r4, pc}
    5930:	000145a0 	.word	0x000145a0

00005934 <__cxa_get_globals_fast>:
    5934:	4800      	ldr	r0, [pc, #0]	; (5938 <__cxa_get_globals_fast+0x4>)
    5936:	4770      	bx	lr
    5938:	1fff9c38 	.word	0x1fff9c38

0000593c <__cxa_get_globals>:
    593c:	4800      	ldr	r0, [pc, #0]	; (5940 <__cxa_get_globals+0x4>)
    593e:	4770      	bx	lr
    5940:	1fff9c38 	.word	0x1fff9c38

00005944 <_ZL12read_sleb128PKhPl>:
    5944:	b430      	push	{r4, r5}
    5946:	2400      	movs	r4, #0
    5948:	4623      	mov	r3, r4
    594a:	f810 2b01 	ldrb.w	r2, [r0], #1
    594e:	f002 057f 	and.w	r5, r2, #127	; 0x7f
    5952:	409d      	lsls	r5, r3
    5954:	432c      	orrs	r4, r5
    5956:	0615      	lsls	r5, r2, #24
    5958:	f103 0307 	add.w	r3, r3, #7
    595c:	d4f5      	bmi.n	594a <_ZL12read_sleb128PKhPl+0x6>
    595e:	2b1f      	cmp	r3, #31
    5960:	d806      	bhi.n	5970 <_ZL12read_sleb128PKhPl+0x2c>
    5962:	0652      	lsls	r2, r2, #25
    5964:	d504      	bpl.n	5970 <_ZL12read_sleb128PKhPl+0x2c>
    5966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    596a:	fa02 f303 	lsl.w	r3, r2, r3
    596e:	431c      	orrs	r4, r3
    5970:	600c      	str	r4, [r1, #0]
    5972:	bc30      	pop	{r4, r5}
    5974:	4770      	bx	lr
    5976:	bf00      	nop

00005978 <_ZL28read_encoded_value_with_basehjPKhPj>:
    5978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    597c:	2850      	cmp	r0, #80	; 0x50
    597e:	b084      	sub	sp, #16
    5980:	4606      	mov	r6, r0
    5982:	4688      	mov	r8, r1
    5984:	d046      	beq.n	5a14 <_ZL28read_encoded_value_with_basehjPKhPj+0x9c>
    5986:	f000 010f 	and.w	r1, r0, #15
    598a:	290c      	cmp	r1, #12
    598c:	d840      	bhi.n	5a10 <_ZL28read_encoded_value_with_basehjPKhPj+0x98>
    598e:	e8df f001 	tbb	[pc, r1]
    5992:	2c07      	.short	0x2c07
    5994:	3f19073b 	.word	0x3f19073b
    5998:	213f3f3f 	.word	0x213f3f3f
    599c:	071d      	.short	0x071d
    599e:	19          	.byte	0x19
    599f:	00          	.byte	0x00
    59a0:	4615      	mov	r5, r2
    59a2:	f855 4b04 	ldr.w	r4, [r5], #4
    59a6:	b144      	cbz	r4, 59ba <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
    59a8:	f006 0170 	and.w	r1, r6, #112	; 0x70
    59ac:	2910      	cmp	r1, #16
    59ae:	bf08      	it	eq
    59b0:	4690      	moveq	r8, r2
    59b2:	4444      	add	r4, r8
    59b4:	0632      	lsls	r2, r6, #24
    59b6:	bf48      	it	mi
    59b8:	6824      	ldrmi	r4, [r4, #0]
    59ba:	4628      	mov	r0, r5
    59bc:	601c      	str	r4, [r3, #0]
    59be:	b004      	add	sp, #16
    59c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59c4:	6814      	ldr	r4, [r2, #0]
    59c6:	f102 0508 	add.w	r5, r2, #8
    59ca:	e7ec      	b.n	59a6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    59cc:	4615      	mov	r5, r2
    59ce:	f935 4b02 	ldrsh.w	r4, [r5], #2
    59d2:	e7e8      	b.n	59a6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    59d4:	4610      	mov	r0, r2
    59d6:	a903      	add	r1, sp, #12
    59d8:	9201      	str	r2, [sp, #4]
    59da:	9300      	str	r3, [sp, #0]
    59dc:	f7ff ffb2 	bl	5944 <_ZL12read_sleb128PKhPl>
    59e0:	9c03      	ldr	r4, [sp, #12]
    59e2:	9a01      	ldr	r2, [sp, #4]
    59e4:	9b00      	ldr	r3, [sp, #0]
    59e6:	4605      	mov	r5, r0
    59e8:	e7dd      	b.n	59a6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    59ea:	2400      	movs	r4, #0
    59ec:	4627      	mov	r7, r4
    59ee:	4615      	mov	r5, r2
    59f0:	f815 1b01 	ldrb.w	r1, [r5], #1
    59f4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    59f8:	40b8      	lsls	r0, r7
    59fa:	0609      	lsls	r1, r1, #24
    59fc:	ea44 0400 	orr.w	r4, r4, r0
    5a00:	f107 0707 	add.w	r7, r7, #7
    5a04:	d4f4      	bmi.n	59f0 <_ZL28read_encoded_value_with_basehjPKhPj+0x78>
    5a06:	e7ce      	b.n	59a6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    5a08:	4615      	mov	r5, r2
    5a0a:	f835 4b02 	ldrh.w	r4, [r5], #2
    5a0e:	e7ca      	b.n	59a6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    5a10:	f009 f99c 	bl	ed4c <abort>
    5a14:	1cd5      	adds	r5, r2, #3
    5a16:	f025 0503 	bic.w	r5, r5, #3
    5a1a:	f855 4b04 	ldr.w	r4, [r5], #4
    5a1e:	601c      	str	r4, [r3, #0]
    5a20:	4628      	mov	r0, r5
    5a22:	b004      	add	sp, #16
    5a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005a28 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    5a28:	28ff      	cmp	r0, #255	; 0xff
    5a2a:	b508      	push	{r3, lr}
    5a2c:	d00f      	beq.n	5a4e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    5a2e:	f000 0370 	and.w	r3, r0, #112	; 0x70
    5a32:	2b20      	cmp	r3, #32
    5a34:	d018      	beq.n	5a68 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
    5a36:	d90c      	bls.n	5a52 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
    5a38:	2b40      	cmp	r3, #64	; 0x40
    5a3a:	d010      	beq.n	5a5e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
    5a3c:	2b50      	cmp	r3, #80	; 0x50
    5a3e:	d006      	beq.n	5a4e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    5a40:	2b30      	cmp	r3, #48	; 0x30
    5a42:	d10a      	bne.n	5a5a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
    5a44:	4608      	mov	r0, r1
    5a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5a4a:	f009 b977 	b.w	ed3c <_Unwind_GetDataRelBase>
    5a4e:	2000      	movs	r0, #0
    5a50:	bd08      	pop	{r3, pc}
    5a52:	2b00      	cmp	r3, #0
    5a54:	d0fb      	beq.n	5a4e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    5a56:	2b10      	cmp	r3, #16
    5a58:	d0f9      	beq.n	5a4e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    5a5a:	f009 f977 	bl	ed4c <abort>
    5a5e:	4608      	mov	r0, r1
    5a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5a64:	f009 b95a 	b.w	ed1c <_Unwind_GetRegionStart>
    5a68:	4608      	mov	r0, r1
    5a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5a6e:	f009 b969 	b.w	ed44 <_Unwind_GetTextRelBase>
    5a72:	bf00      	nop

00005a74 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    5a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a76:	460c      	mov	r4, r1
    5a78:	4616      	mov	r6, r2
    5a7a:	4607      	mov	r7, r0
    5a7c:	b108      	cbz	r0, 5a82 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
    5a7e:	f009 f94d 	bl	ed1c <_Unwind_GetRegionStart>
    5a82:	6030      	str	r0, [r6, #0]
    5a84:	7825      	ldrb	r5, [r4, #0]
    5a86:	2dff      	cmp	r5, #255	; 0xff
    5a88:	f104 0401 	add.w	r4, r4, #1
    5a8c:	d033      	beq.n	5af6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
    5a8e:	4639      	mov	r1, r7
    5a90:	4628      	mov	r0, r5
    5a92:	f7ff ffc9 	bl	5a28 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    5a96:	4622      	mov	r2, r4
    5a98:	4601      	mov	r1, r0
    5a9a:	1d33      	adds	r3, r6, #4
    5a9c:	4628      	mov	r0, r5
    5a9e:	f7ff ff6b 	bl	5978 <_ZL28read_encoded_value_with_basehjPKhPj>
    5aa2:	4604      	mov	r4, r0
    5aa4:	1c60      	adds	r0, r4, #1
    5aa6:	7823      	ldrb	r3, [r4, #0]
    5aa8:	7533      	strb	r3, [r6, #20]
    5aaa:	2bff      	cmp	r3, #255	; 0xff
    5aac:	d02a      	beq.n	5b04 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
    5aae:	2310      	movs	r3, #16
    5ab0:	2200      	movs	r2, #0
    5ab2:	7533      	strb	r3, [r6, #20]
    5ab4:	4613      	mov	r3, r2
    5ab6:	f810 1b01 	ldrb.w	r1, [r0], #1
    5aba:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    5abe:	409c      	lsls	r4, r3
    5ac0:	0609      	lsls	r1, r1, #24
    5ac2:	ea42 0204 	orr.w	r2, r2, r4
    5ac6:	f103 0307 	add.w	r3, r3, #7
    5aca:	d4f4      	bmi.n	5ab6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x42>
    5acc:	4402      	add	r2, r0
    5ace:	60f2      	str	r2, [r6, #12]
    5ad0:	7803      	ldrb	r3, [r0, #0]
    5ad2:	7573      	strb	r3, [r6, #21]
    5ad4:	2400      	movs	r4, #0
    5ad6:	3001      	adds	r0, #1
    5ad8:	4623      	mov	r3, r4
    5ada:	f810 1b01 	ldrb.w	r1, [r0], #1
    5ade:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    5ae2:	409d      	lsls	r5, r3
    5ae4:	060a      	lsls	r2, r1, #24
    5ae6:	ea44 0405 	orr.w	r4, r4, r5
    5aea:	f103 0307 	add.w	r3, r3, #7
    5aee:	d4f4      	bmi.n	5ada <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x66>
    5af0:	4404      	add	r4, r0
    5af2:	6134      	str	r4, [r6, #16]
    5af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5af6:	6070      	str	r0, [r6, #4]
    5af8:	7823      	ldrb	r3, [r4, #0]
    5afa:	7533      	strb	r3, [r6, #20]
    5afc:	2bff      	cmp	r3, #255	; 0xff
    5afe:	f104 0001 	add.w	r0, r4, #1
    5b02:	d1d4      	bne.n	5aae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>
    5b04:	2300      	movs	r3, #0
    5b06:	60f3      	str	r3, [r6, #12]
    5b08:	e7e2      	b.n	5ad0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
    5b0a:	bf00      	nop

00005b0c <__gxx_personality_v0>:
    5b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b10:	f000 0303 	and.w	r3, r0, #3
    5b14:	b093      	sub	sp, #76	; 0x4c
    5b16:	2500      	movs	r5, #0
    5b18:	2b01      	cmp	r3, #1
    5b1a:	460e      	mov	r6, r1
    5b1c:	4614      	mov	r4, r2
    5b1e:	9506      	str	r5, [sp, #24]
    5b20:	f000 80a6 	beq.w	5c70 <__gxx_personality_v0+0x164>
    5b24:	d30e      	bcc.n	5b44 <__gxx_personality_v0+0x38>
    5b26:	2b02      	cmp	r3, #2
    5b28:	d10a      	bne.n	5b40 <__gxx_personality_v0+0x34>
    5b2a:	4630      	mov	r0, r6
    5b2c:	4621      	mov	r1, r4
    5b2e:	f009 f8df 	bl	ecf0 <__gnu_unwind_frame>
    5b32:	2800      	cmp	r0, #0
    5b34:	f000 80a4 	beq.w	5c80 <__gxx_personality_v0+0x174>
    5b38:	2009      	movs	r0, #9
    5b3a:	b013      	add	sp, #76	; 0x4c
    5b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b40:	f009 f904 	bl	ed4c <abort>
    5b44:	f000 0008 	and.w	r0, r0, #8
    5b48:	fa5f f880 	uxtb.w	r8, r0
    5b4c:	f04f 0901 	mov.w	r9, #1
    5b50:	aa12      	add	r2, sp, #72	; 0x48
    5b52:	2100      	movs	r1, #0
    5b54:	f842 6d2c 	str.w	r6, [r2, #-44]!
    5b58:	460b      	mov	r3, r1
    5b5a:	9200      	str	r2, [sp, #0]
    5b5c:	4620      	mov	r0, r4
    5b5e:	220c      	movs	r2, #12
    5b60:	f008 fb7c 	bl	e25c <_Unwind_VRS_Set>
    5b64:	4620      	mov	r0, r4
    5b66:	f009 f8df 	bl	ed28 <_Unwind_GetLanguageSpecificData>
    5b6a:	4607      	mov	r7, r0
    5b6c:	2800      	cmp	r0, #0
    5b6e:	d0dc      	beq.n	5b2a <__gxx_personality_v0+0x1e>
    5b70:	aa0c      	add	r2, sp, #48	; 0x30
    5b72:	4639      	mov	r1, r7
    5b74:	4620      	mov	r0, r4
    5b76:	9203      	str	r2, [sp, #12]
    5b78:	f7ff ff7c 	bl	5a74 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    5b7c:	4621      	mov	r1, r4
    5b7e:	4683      	mov	fp, r0
    5b80:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    5b84:	f7ff ff50 	bl	5a28 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    5b88:	ad0b      	add	r5, sp, #44	; 0x2c
    5b8a:	2100      	movs	r1, #0
    5b8c:	900e      	str	r0, [sp, #56]	; 0x38
    5b8e:	460b      	mov	r3, r1
    5b90:	220f      	movs	r2, #15
    5b92:	9500      	str	r5, [sp, #0]
    5b94:	4620      	mov	r0, r4
    5b96:	f008 fb39 	bl	e20c <_Unwind_VRS_Get>
    5b9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5b9e:	f022 0201 	bic.w	r2, r2, #1
    5ba2:	459b      	cmp	fp, r3
    5ba4:	ea48 0809 	orr.w	r8, r8, r9
    5ba8:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    5bac:	d239      	bcs.n	5c22 <__gxx_personality_v0+0x116>
    5bae:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
    5bb2:	2100      	movs	r1, #0
    5bb4:	4650      	mov	r0, sl
    5bb6:	f7ff ff37 	bl	5a28 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    5bba:	465a      	mov	r2, fp
    5bbc:	4601      	mov	r1, r0
    5bbe:	ab09      	add	r3, sp, #36	; 0x24
    5bc0:	4650      	mov	r0, sl
    5bc2:	f7ff fed9 	bl	5978 <_ZL28read_encoded_value_with_basehjPKhPj>
    5bc6:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
    5bca:	4683      	mov	fp, r0
    5bcc:	2100      	movs	r1, #0
    5bce:	4650      	mov	r0, sl
    5bd0:	f7ff ff2a 	bl	5a28 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    5bd4:	465a      	mov	r2, fp
    5bd6:	4601      	mov	r1, r0
    5bd8:	ab0a      	add	r3, sp, #40	; 0x28
    5bda:	4650      	mov	r0, sl
    5bdc:	f7ff fecc 	bl	5978 <_ZL28read_encoded_value_with_basehjPKhPj>
    5be0:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
    5be4:	4683      	mov	fp, r0
    5be6:	2100      	movs	r1, #0
    5be8:	4650      	mov	r0, sl
    5bea:	f7ff ff1d 	bl	5a28 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    5bee:	465a      	mov	r2, fp
    5bf0:	4601      	mov	r1, r0
    5bf2:	462b      	mov	r3, r5
    5bf4:	4650      	mov	r0, sl
    5bf6:	f7ff febf 	bl	5978 <_ZL28read_encoded_value_with_basehjPKhPj>
    5bfa:	2100      	movs	r1, #0
    5bfc:	4683      	mov	fp, r0
    5bfe:	460b      	mov	r3, r1
    5c00:	f81b eb01 	ldrb.w	lr, [fp], #1
    5c04:	f00e 027f 	and.w	r2, lr, #127	; 0x7f
    5c08:	409a      	lsls	r2, r3
    5c0a:	f01e 0f80 	tst.w	lr, #128	; 0x80
    5c0e:	ea41 0102 	orr.w	r1, r1, r2
    5c12:	f103 0307 	add.w	r3, r3, #7
    5c16:	d1f3      	bne.n	5c00 <__gxx_personality_v0+0xf4>
    5c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c1c:	4413      	add	r3, r2
    5c1e:	4599      	cmp	r9, r3
    5c20:	d21d      	bcs.n	5c5e <__gxx_personality_v0+0x152>
    5c22:	f04f 0900 	mov.w	r9, #0
    5c26:	f04f 0b01 	mov.w	fp, #1
    5c2a:	2500      	movs	r5, #0
    5c2c:	f018 0f01 	tst.w	r8, #1
    5c30:	d04c      	beq.n	5ccc <__gxx_personality_v0+0x1c0>
    5c32:	f1bb 0f02 	cmp.w	fp, #2
    5c36:	f43f af78 	beq.w	5b2a <__gxx_personality_v0+0x1e>
    5c3a:	ab0a      	add	r3, sp, #40	; 0x28
    5c3c:	2100      	movs	r1, #0
    5c3e:	4620      	mov	r0, r4
    5c40:	9300      	str	r3, [sp, #0]
    5c42:	220d      	movs	r2, #13
    5c44:	460b      	mov	r3, r1
    5c46:	9c06      	ldr	r4, [sp, #24]
    5c48:	f008 fae0 	bl	e20c <_Unwind_VRS_Get>
    5c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c4e:	6274      	str	r4, [r6, #36]	; 0x24
    5c50:	62b5      	str	r5, [r6, #40]	; 0x28
    5c52:	62f7      	str	r7, [r6, #44]	; 0x2c
    5c54:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
    5c58:	6233      	str	r3, [r6, #32]
    5c5a:	2006      	movs	r0, #6
    5c5c:	e76d      	b.n	5b3a <__gxx_personality_v0+0x2e>
    5c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5c60:	4413      	add	r3, r2
    5c62:	4599      	cmp	r9, r3
    5c64:	f0c0 8092 	bcc.w	5d8c <__gxx_personality_v0+0x280>
    5c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5c6a:	459b      	cmp	fp, r3
    5c6c:	d39f      	bcc.n	5bae <__gxx_personality_v0+0xa2>
    5c6e:	e7d8      	b.n	5c22 <__gxx_personality_v0+0x116>
    5c70:	f000 0008 	and.w	r0, r0, #8
    5c74:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    5c78:	b130      	cbz	r0, 5c88 <__gxx_personality_v0+0x17c>
    5c7a:	f04f 0902 	mov.w	r9, #2
    5c7e:	e767      	b.n	5b50 <__gxx_personality_v0+0x44>
    5c80:	2008      	movs	r0, #8
    5c82:	b013      	add	sp, #76	; 0x4c
    5c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c88:	a90c      	add	r1, sp, #48	; 0x30
    5c8a:	9100      	str	r1, [sp, #0]
    5c8c:	9103      	str	r1, [sp, #12]
    5c8e:	4610      	mov	r0, r2
    5c90:	4643      	mov	r3, r8
    5c92:	4641      	mov	r1, r8
    5c94:	220d      	movs	r2, #13
    5c96:	6a35      	ldr	r5, [r6, #32]
    5c98:	f008 fab8 	bl	e20c <_Unwind_VRS_Get>
    5c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c9e:	429d      	cmp	r5, r3
    5ca0:	d1eb      	bne.n	5c7a <__gxx_personality_v0+0x16e>
    5ca2:	aa12      	add	r2, sp, #72	; 0x48
    5ca4:	4641      	mov	r1, r8
    5ca6:	f842 6d2c 	str.w	r6, [r2, #-44]!
    5caa:	4643      	mov	r3, r8
    5cac:	9200      	str	r2, [sp, #0]
    5cae:	4620      	mov	r0, r4
    5cb0:	220c      	movs	r2, #12
    5cb2:	f106 0528 	add.w	r5, r6, #40	; 0x28
    5cb6:	f008 fad1 	bl	e25c <_Unwind_VRS_Set>
    5cba:	e895 02a0 	ldmia.w	r5, {r5, r7, r9}
    5cbe:	f1b9 0f00 	cmp.w	r9, #0
    5cc2:	f000 8115 	beq.w	5ef0 <__gxx_personality_v0+0x3e4>
    5cc6:	f04f 0b03 	mov.w	fp, #3
    5cca:	e03d      	b.n	5d48 <__gxx_personality_v0+0x23c>
    5ccc:	f018 0f08 	tst.w	r8, #8
    5cd0:	d036      	beq.n	5d40 <__gxx_personality_v0+0x234>
    5cd2:	f1bb 0f01 	cmp.w	fp, #1
    5cd6:	f000 811a 	beq.w	5f0e <__gxx_personality_v0+0x402>
    5cda:	2d00      	cmp	r5, #0
    5cdc:	f2c0 8113 	blt.w	5f06 <__gxx_personality_v0+0x3fa>
    5ce0:	ab12      	add	r3, sp, #72	; 0x48
    5ce2:	2100      	movs	r1, #0
    5ce4:	f843 6d28 	str.w	r6, [r3, #-40]!
    5ce8:	460a      	mov	r2, r1
    5cea:	9300      	str	r3, [sp, #0]
    5cec:	4620      	mov	r0, r4
    5cee:	460b      	mov	r3, r1
    5cf0:	f008 fab4 	bl	e25c <_Unwind_VRS_Set>
    5cf4:	aa12      	add	r2, sp, #72	; 0x48
    5cf6:	2100      	movs	r1, #0
    5cf8:	f842 5d24 	str.w	r5, [r2, #-36]!
    5cfc:	460b      	mov	r3, r1
    5cfe:	9200      	str	r2, [sp, #0]
    5d00:	4620      	mov	r0, r4
    5d02:	2201      	movs	r2, #1
    5d04:	f008 faaa 	bl	e25c <_Unwind_VRS_Set>
    5d08:	ad0a      	add	r5, sp, #40	; 0x28
    5d0a:	2100      	movs	r1, #0
    5d0c:	460b      	mov	r3, r1
    5d0e:	4620      	mov	r0, r4
    5d10:	220f      	movs	r2, #15
    5d12:	9500      	str	r5, [sp, #0]
    5d14:	f008 fa7a 	bl	e20c <_Unwind_VRS_Get>
    5d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5d1a:	9500      	str	r5, [sp, #0]
    5d1c:	f003 0301 	and.w	r3, r3, #1
    5d20:	2100      	movs	r1, #0
    5d22:	4620      	mov	r0, r4
    5d24:	220f      	movs	r2, #15
    5d26:	ea49 0403 	orr.w	r4, r9, r3
    5d2a:	460b      	mov	r3, r1
    5d2c:	940a      	str	r4, [sp, #40]	; 0x28
    5d2e:	f008 fa95 	bl	e25c <_Unwind_VRS_Set>
    5d32:	f1bb 0f02 	cmp.w	fp, #2
    5d36:	d036      	beq.n	5da6 <__gxx_personality_v0+0x29a>
    5d38:	2007      	movs	r0, #7
    5d3a:	b013      	add	sp, #76	; 0x4c
    5d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d40:	f1bb 0f01 	cmp.w	fp, #1
    5d44:	f000 80d4 	beq.w	5ef0 <__gxx_personality_v0+0x3e4>
    5d48:	2d00      	cmp	r5, #0
    5d4a:	dac9      	bge.n	5ce0 <__gxx_personality_v0+0x1d4>
    5d4c:	4639      	mov	r1, r7
    5d4e:	9a03      	ldr	r2, [sp, #12]
    5d50:	4620      	mov	r0, r4
    5d52:	f7ff fe8f 	bl	5a74 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    5d56:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    5d5a:	4621      	mov	r1, r4
    5d5c:	f7ff fe64 	bl	5a28 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    5d60:	00aa      	lsls	r2, r5, #2
    5d62:	f082 0203 	eor.w	r2, r2, #3
    5d66:	43d2      	mvns	r2, r2
    5d68:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5d6a:	900e      	str	r0, [sp, #56]	; 0x38
    5d6c:	58bb      	ldr	r3, [r7, r2]
    5d6e:	4417      	add	r7, r2
    5d70:	b133      	cbz	r3, 5d80 <__gxx_personality_v0+0x274>
    5d72:	463a      	mov	r2, r7
    5d74:	2300      	movs	r3, #0
    5d76:	f852 1f04 	ldr.w	r1, [r2, #4]!
    5d7a:	3301      	adds	r3, #1
    5d7c:	2900      	cmp	r1, #0
    5d7e:	d1fa      	bne.n	5d76 <__gxx_personality_v0+0x26a>
    5d80:	2204      	movs	r2, #4
    5d82:	62b3      	str	r3, [r6, #40]	; 0x28
    5d84:	62f0      	str	r0, [r6, #44]	; 0x2c
    5d86:	6377      	str	r7, [r6, #52]	; 0x34
    5d88:	6332      	str	r2, [r6, #48]	; 0x30
    5d8a:	e7a9      	b.n	5ce0 <__gxx_personality_v0+0x1d4>
    5d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d8e:	b17b      	cbz	r3, 5db0 <__gxx_personality_v0+0x2a4>
    5d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5d92:	eb03 0902 	add.w	r9, r3, r2
    5d96:	b969      	cbnz	r1, 5db4 <__gxx_personality_v0+0x2a8>
    5d98:	f1b9 0f00 	cmp.w	r9, #0
    5d9c:	f43f aec5 	beq.w	5b2a <__gxx_personality_v0+0x1e>
    5da0:	f04f 0b02 	mov.w	fp, #2
    5da4:	e741      	b.n	5c2a <__gxx_personality_v0+0x11e>
    5da6:	4630      	mov	r0, r6
    5da8:	f7ff fc0c 	bl	55c4 <__cxa_begin_cleanup>
    5dac:	2007      	movs	r0, #7
    5dae:	e6c4      	b.n	5b3a <__gxx_personality_v0+0x2e>
    5db0:	4699      	mov	r9, r3
    5db2:	e7f0      	b.n	5d96 <__gxx_personality_v0+0x28a>
    5db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5db6:	3901      	subs	r1, #1
    5db8:	1858      	adds	r0, r3, r1
    5dba:	f1b9 0f00 	cmp.w	r9, #0
    5dbe:	f43f aeb4 	beq.w	5b2a <__gxx_personality_v0+0x1e>
    5dc2:	2800      	cmp	r0, #0
    5dc4:	d0ec      	beq.n	5da0 <__gxx_personality_v0+0x294>
    5dc6:	f018 0308 	ands.w	r3, r8, #8
    5dca:	9305      	str	r3, [sp, #20]
    5dcc:	d07c      	beq.n	5ec8 <__gxx_personality_v0+0x3bc>
    5dce:	2247      	movs	r2, #71	; 0x47
    5dd0:	234e      	movs	r3, #78	; 0x4e
    5dd2:	2155      	movs	r1, #85	; 0x55
    5dd4:	7032      	strb	r2, [r6, #0]
    5dd6:	7073      	strb	r3, [r6, #1]
    5dd8:	2243      	movs	r2, #67	; 0x43
    5dda:	2346      	movs	r3, #70	; 0x46
    5ddc:	70b1      	strb	r1, [r6, #2]
    5dde:	70f2      	strb	r2, [r6, #3]
    5de0:	214f      	movs	r1, #79	; 0x4f
    5de2:	2252      	movs	r2, #82	; 0x52
    5de4:	7133      	strb	r3, [r6, #4]
    5de6:	2300      	movs	r3, #0
    5de8:	7171      	strb	r1, [r6, #5]
    5dea:	71b2      	strb	r2, [r6, #6]
    5dec:	71f3      	strb	r3, [r6, #7]
    5dee:	f04f 0b00 	mov.w	fp, #0
    5df2:	9404      	str	r4, [sp, #16]
    5df4:	a908      	add	r1, sp, #32
    5df6:	f7ff fda5 	bl	5944 <_ZL12read_sleb128PKhPl>
    5dfa:	a909      	add	r1, sp, #36	; 0x24
    5dfc:	4682      	mov	sl, r0
    5dfe:	f7ff fda1 	bl	5944 <_ZL12read_sleb128PKhPl>
    5e02:	9b08      	ldr	r3, [sp, #32]
    5e04:	2b00      	cmp	r3, #0
    5e06:	d02f      	beq.n	5e68 <__gxx_personality_v0+0x35c>
    5e08:	dd31      	ble.n	5e6e <__gxx_personality_v0+0x362>
    5e0a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    5e0e:	28ff      	cmp	r0, #255	; 0xff
    5e10:	d058      	beq.n	5ec4 <__gxx_personality_v0+0x3b8>
    5e12:	f000 0207 	and.w	r2, r0, #7
    5e16:	2a04      	cmp	r2, #4
    5e18:	f63f ae92 	bhi.w	5b40 <__gxx_personality_v0+0x34>
    5e1c:	a101      	add	r1, pc, #4	; (adr r1, 5e24 <__gxx_personality_v0+0x318>)
    5e1e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    5e22:	bf00      	nop
    5e24:	00005e63 	.word	0x00005e63
    5e28:	00005b41 	.word	0x00005b41
    5e2c:	00005e5d 	.word	0x00005e5d
    5e30:	00005e63 	.word	0x00005e63
    5e34:	00005e39 	.word	0x00005e39
    5e38:	00db      	lsls	r3, r3, #3
    5e3a:	425a      	negs	r2, r3
    5e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5e3e:	990e      	ldr	r1, [sp, #56]	; 0x38
    5e40:	441a      	add	r2, r3
    5e42:	ab0a      	add	r3, sp, #40	; 0x28
    5e44:	f7ff fd98 	bl	5978 <_ZL28read_encoded_value_with_basehjPKhPj>
    5e48:	990a      	ldr	r1, [sp, #40]	; 0x28
    5e4a:	b1f9      	cbz	r1, 5e8c <__gxx_personality_v0+0x380>
    5e4c:	2e00      	cmp	r6, #0
    5e4e:	d152      	bne.n	5ef6 <__gxx_personality_v0+0x3ea>
    5e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e52:	2b00      	cmp	r3, #0
    5e54:	d043      	beq.n	5ede <__gxx_personality_v0+0x3d2>
    5e56:	eb0a 0003 	add.w	r0, sl, r3
    5e5a:	e7cb      	b.n	5df4 <__gxx_personality_v0+0x2e8>
    5e5c:	005b      	lsls	r3, r3, #1
    5e5e:	425a      	negs	r2, r3
    5e60:	e7ec      	b.n	5e3c <__gxx_personality_v0+0x330>
    5e62:	009b      	lsls	r3, r3, #2
    5e64:	425a      	negs	r2, r3
    5e66:	e7e9      	b.n	5e3c <__gxx_personality_v0+0x330>
    5e68:	f04f 0b01 	mov.w	fp, #1
    5e6c:	e7f0      	b.n	5e50 <__gxx_personality_v0+0x344>
    5e6e:	3301      	adds	r3, #1
    5e70:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
    5e74:	b10e      	cbz	r6, 5e7a <__gxx_personality_v0+0x36e>
    5e76:	9a05      	ldr	r2, [sp, #20]
    5e78:	b16a      	cbz	r2, 5e96 <__gxx_personality_v0+0x38a>
    5e7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e80:	f1d3 0301 	rsbs	r3, r3, #1
    5e84:	bf38      	it	cc
    5e86:	2300      	movcc	r3, #0
    5e88:	2b00      	cmp	r3, #0
    5e8a:	d0e1      	beq.n	5e50 <__gxx_personality_v0+0x344>
    5e8c:	9c04      	ldr	r4, [sp, #16]
    5e8e:	9d08      	ldr	r5, [sp, #32]
    5e90:	f04f 0b03 	mov.w	fp, #3
    5e94:	e6ca      	b.n	5c2c <__gxx_personality_v0+0x120>
    5e96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5e98:	9806      	ldr	r0, [sp, #24]
    5e9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    5e9e:	900b      	str	r0, [sp, #44]	; 0x2c
    5ea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5ea4:	461c      	mov	r4, r3
    5ea6:	b919      	cbnz	r1, 5eb0 <__gxx_personality_v0+0x3a4>
    5ea8:	e017      	b.n	5eda <__gxx_personality_v0+0x3ce>
    5eaa:	f854 1f04 	ldr.w	r1, [r4, #4]!
    5eae:	b1a1      	cbz	r1, 5eda <__gxx_personality_v0+0x3ce>
    5eb0:	4421      	add	r1, r4
    5eb2:	4630      	mov	r0, r6
    5eb4:	2200      	movs	r2, #0
    5eb6:	462b      	mov	r3, r5
    5eb8:	f7ff fb2e 	bl	5518 <__cxa_type_match>
    5ebc:	2800      	cmp	r0, #0
    5ebe:	d0f4      	beq.n	5eaa <__gxx_personality_v0+0x39e>
    5ec0:	2300      	movs	r3, #0
    5ec2:	e7e1      	b.n	5e88 <__gxx_personality_v0+0x37c>
    5ec4:	2200      	movs	r2, #0
    5ec6:	e7b9      	b.n	5e3c <__gxx_personality_v0+0x330>
    5ec8:	79f3      	ldrb	r3, [r6, #7]
    5eca:	2b01      	cmp	r3, #1
    5ecc:	bf0c      	ite	eq
    5ece:	f856 3c20 	ldreq.w	r3, [r6, #-32]
    5ed2:	f106 0358 	addne.w	r3, r6, #88	; 0x58
    5ed6:	9306      	str	r3, [sp, #24]
    5ed8:	e789      	b.n	5dee <__gxx_personality_v0+0x2e2>
    5eda:	2301      	movs	r3, #1
    5edc:	e7d4      	b.n	5e88 <__gxx_personality_v0+0x37c>
    5ede:	9c04      	ldr	r4, [sp, #16]
    5ee0:	f1bb 0f00 	cmp.w	fp, #0
    5ee4:	f43f ae21 	beq.w	5b2a <__gxx_personality_v0+0x1e>
    5ee8:	461d      	mov	r5, r3
    5eea:	f04f 0b02 	mov.w	fp, #2
    5eee:	e69d      	b.n	5c2c <__gxx_personality_v0+0x120>
    5ef0:	4630      	mov	r0, r6
    5ef2:	f7ff fbef 	bl	56d4 <__cxa_call_terminate>
    5ef6:	4630      	mov	r0, r6
    5ef8:	2200      	movs	r2, #0
    5efa:	ab06      	add	r3, sp, #24
    5efc:	f7ff fb0c 	bl	5518 <__cxa_type_match>
    5f00:	2800      	cmp	r0, #0
    5f02:	d1c3      	bne.n	5e8c <__gxx_personality_v0+0x380>
    5f04:	e7a4      	b.n	5e50 <__gxx_personality_v0+0x344>
    5f06:	f000 f825 	bl	5f54 <_ZSt10unexpectedv>
    5f0a:	f7ff fc5f 	bl	57cc <__cxa_begin_catch>
    5f0e:	f000 f815 	bl	5f3c <_ZSt9terminatev>
    5f12:	bf00      	nop

00005f14 <_ZN10__cxxabiv111__terminateEPFvvE>:
    5f14:	b508      	push	{r3, lr}
    5f16:	4780      	blx	r0
    5f18:	f008 ff18 	bl	ed4c <abort>
    5f1c:	f7ff fc56 	bl	57cc <__cxa_begin_catch>
    5f20:	f008 ff14 	bl	ed4c <abort>
    5f24:	460c      	mov	r4, r1
    5f26:	4605      	mov	r5, r0
    5f28:	f7ff fc96 	bl	5858 <__cxa_end_catch>
    5f2c:	3401      	adds	r4, #1
    5f2e:	d001      	beq.n	5f34 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
    5f30:	f7ff faec 	bl	550c <__cxa_end_cleanup>
    5f34:	4628      	mov	r0, r5
    5f36:	f7ff fbdd 	bl	56f4 <__cxa_call_unexpected>
    5f3a:	bf00      	nop

00005f3c <_ZSt9terminatev>:
    5f3c:	b508      	push	{r3, lr}
    5f3e:	4b02      	ldr	r3, [pc, #8]	; (5f48 <_ZSt9terminatev+0xc>)
    5f40:	6818      	ldr	r0, [r3, #0]
    5f42:	f7ff ffe7 	bl	5f14 <_ZN10__cxxabiv111__terminateEPFvvE>
    5f46:	bf00      	nop
    5f48:	1fff84c4 	.word	0x1fff84c4

00005f4c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    5f4c:	b508      	push	{r3, lr}
    5f4e:	4780      	blx	r0
    5f50:	f7ff fff4 	bl	5f3c <_ZSt9terminatev>

00005f54 <_ZSt10unexpectedv>:
    5f54:	b508      	push	{r3, lr}
    5f56:	4b02      	ldr	r3, [pc, #8]	; (5f60 <_ZSt10unexpectedv+0xc>)
    5f58:	6818      	ldr	r0, [r3, #0]
    5f5a:	f7ff fff7 	bl	5f4c <_ZN10__cxxabiv112__unexpectedEPFvvE>
    5f5e:	bf00      	nop
    5f60:	1fff84c0 	.word	0x1fff84c0

00005f64 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
    5f64:	2801      	cmp	r0, #1
    5f66:	b510      	push	{r4, lr}
    5f68:	d81a      	bhi.n	5fa0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
    5f6a:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
    5f6e:	f3bf 8f5f 	dmb	sy
    5f72:	e853 2f00 	ldrex	r2, [r3]
    5f76:	3a01      	subs	r2, #1
    5f78:	e843 2000 	strex	r0, r2, [r3]
    5f7c:	2800      	cmp	r0, #0
    5f7e:	d1f8      	bne.n	5f72 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
    5f80:	f3bf 8f5f 	dmb	sy
    5f84:	b95a      	cbnz	r2, 5f9e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
    5f86:	f851 3c1c 	ldr.w	r3, [r1, #-28]
    5f8a:	f101 0458 	add.w	r4, r1, #88	; 0x58
    5f8e:	b10b      	cbz	r3, 5f94 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
    5f90:	4620      	mov	r0, r4
    5f92:	4798      	blx	r3
    5f94:	4620      	mov	r0, r4
    5f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f9a:	f7ff ba9d 	b.w	54d8 <__cxa_free_exception>
    5f9e:	bd10      	pop	{r4, pc}
    5fa0:	f851 0c14 	ldr.w	r0, [r1, #-20]
    5fa4:	f7ff ffb6 	bl	5f14 <_ZN10__cxxabiv111__terminateEPFvvE>

00005fa8 <__cxa_throw>:
    5fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fac:	4604      	mov	r4, r0
    5fae:	460f      	mov	r7, r1
    5fb0:	4690      	mov	r8, r2
    5fb2:	f7ff fcc3 	bl	593c <__cxa_get_globals>
    5fb6:	4603      	mov	r3, r0
    5fb8:	4a1c      	ldr	r2, [pc, #112]	; (602c <__cxa_throw+0x84>)
    5fba:	6859      	ldr	r1, [r3, #4]
    5fbc:	481c      	ldr	r0, [pc, #112]	; (6030 <__cxa_throw+0x88>)
    5fbe:	1c4e      	adds	r6, r1, #1
    5fc0:	605e      	str	r6, [r3, #4]
    5fc2:	f8d0 a000 	ldr.w	sl, [r0]
    5fc6:	6810      	ldr	r0, [r2, #0]
    5fc8:	4a1a      	ldr	r2, [pc, #104]	; (6034 <__cxa_throw+0x8c>)
    5fca:	f844 0c6c 	str.w	r0, [r4, #-108]
    5fce:	232b      	movs	r3, #43	; 0x2b
    5fd0:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
    5fd4:	f04f 0e55 	mov.w	lr, #85	; 0x55
    5fd8:	2100      	movs	r1, #0
    5fda:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
    5fde:	2643      	movs	r6, #67	; 0x43
    5fe0:	f04f 0b01 	mov.w	fp, #1
    5fe4:	f04f 0947 	mov.w	r9, #71	; 0x47
    5fe8:	f804 cc57 	strb.w	ip, [r4, #-87]
    5fec:	f804 ec56 	strb.w	lr, [r4, #-86]
    5ff0:	f804 1c51 	strb.w	r1, [r4, #-81]
    5ff4:	f844 2c50 	str.w	r2, [r4, #-80]
    5ff8:	f804 3c53 	strb.w	r3, [r4, #-83]
    5ffc:	f804 3c52 	strb.w	r3, [r4, #-82]
    6000:	f844 7c78 	str.w	r7, [r4, #-120]
    6004:	f844 8c74 	str.w	r8, [r4, #-116]
    6008:	f844 bc80 	str.w	fp, [r4, #-128]
    600c:	f844 ac70 	str.w	sl, [r4, #-112]
    6010:	f804 9c58 	strb.w	r9, [r4, #-88]
    6014:	4628      	mov	r0, r5
    6016:	f804 6c55 	strb.w	r6, [r4, #-85]
    601a:	f804 6c54 	strb.w	r6, [r4, #-84]
    601e:	f008 fc9d 	bl	e95c <_Unwind_RaiseException>
    6022:	4628      	mov	r0, r5
    6024:	f7ff fbd2 	bl	57cc <__cxa_begin_catch>
    6028:	f7ff ff88 	bl	5f3c <_ZSt9terminatev>
    602c:	1fff84c4 	.word	0x1fff84c4
    6030:	1fff84c0 	.word	0x1fff84c0
    6034:	00005f65 	.word	0x00005f65

00006038 <__cxa_rethrow>:
    6038:	b510      	push	{r4, lr}
    603a:	f7ff fc7f 	bl	593c <__cxa_get_globals>
    603e:	6842      	ldr	r2, [r0, #4]
    6040:	6803      	ldr	r3, [r0, #0]
    6042:	3201      	adds	r2, #1
    6044:	6042      	str	r2, [r0, #4]
    6046:	b16b      	cbz	r3, 6064 <__cxa_rethrow+0x2c>
    6048:	f893 2020 	ldrb.w	r2, [r3, #32]
    604c:	2a47      	cmp	r2, #71	; 0x47
    604e:	d00b      	beq.n	6068 <__cxa_rethrow+0x30>
    6050:	2200      	movs	r2, #0
    6052:	6002      	str	r2, [r0, #0]
    6054:	f103 0420 	add.w	r4, r3, #32
    6058:	4620      	mov	r0, r4
    605a:	f008 fca3 	bl	e9a4 <_Unwind_Resume_or_Rethrow>
    605e:	4620      	mov	r0, r4
    6060:	f7ff fbb4 	bl	57cc <__cxa_begin_catch>
    6064:	f7ff ff6a 	bl	5f3c <_ZSt9terminatev>
    6068:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    606c:	2a4e      	cmp	r2, #78	; 0x4e
    606e:	d1ef      	bne.n	6050 <__cxa_rethrow+0x18>
    6070:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    6074:	2a55      	cmp	r2, #85	; 0x55
    6076:	d1eb      	bne.n	6050 <__cxa_rethrow+0x18>
    6078:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    607c:	2a43      	cmp	r2, #67	; 0x43
    607e:	d1e7      	bne.n	6050 <__cxa_rethrow+0x18>
    6080:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    6084:	2a43      	cmp	r2, #67	; 0x43
    6086:	d1e3      	bne.n	6050 <__cxa_rethrow+0x18>
    6088:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    608c:	2a2b      	cmp	r2, #43	; 0x2b
    608e:	d1df      	bne.n	6050 <__cxa_rethrow+0x18>
    6090:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    6094:	2a2b      	cmp	r2, #43	; 0x2b
    6096:	d1db      	bne.n	6050 <__cxa_rethrow+0x18>
    6098:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    609c:	2a01      	cmp	r2, #1
    609e:	d8d7      	bhi.n	6050 <__cxa_rethrow+0x18>
    60a0:	695a      	ldr	r2, [r3, #20]
    60a2:	4252      	negs	r2, r2
    60a4:	615a      	str	r2, [r3, #20]
    60a6:	e7d5      	b.n	6054 <__cxa_rethrow+0x1c>

000060a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    60a8:	b510      	push	{r4, lr}
    60aa:	4b03      	ldr	r3, [pc, #12]	; (60b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
    60ac:	6003      	str	r3, [r0, #0]
    60ae:	4604      	mov	r4, r0
    60b0:	f000 f8da 	bl	6268 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    60b4:	4620      	mov	r0, r4
    60b6:	bd10      	pop	{r4, pc}
    60b8:	00014688 	.word	0x00014688

000060bc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    60bc:	b510      	push	{r4, lr}
    60be:	4b05      	ldr	r3, [pc, #20]	; (60d4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
    60c0:	6003      	str	r3, [r0, #0]
    60c2:	4604      	mov	r4, r0
    60c4:	f000 f8d0 	bl	6268 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    60c8:	4620      	mov	r0, r4
    60ca:	f7ff f98d 	bl	53e8 <_ZdlPv>
    60ce:	4620      	mov	r0, r4
    60d0:	bd10      	pop	{r4, pc}
    60d2:	bf00      	nop
    60d4:	00014688 	.word	0x00014688

000060d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    60d8:	b570      	push	{r4, r5, r6, lr}
    60da:	b084      	sub	sp, #16
    60dc:	460d      	mov	r5, r1
    60de:	9c08      	ldr	r4, [sp, #32]
    60e0:	4294      	cmp	r4, r2
    60e2:	4606      	mov	r6, r0
    60e4:	d007      	beq.n	60f6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1e>
    60e6:	68b0      	ldr	r0, [r6, #8]
    60e8:	6806      	ldr	r6, [r0, #0]
    60ea:	9400      	str	r4, [sp, #0]
    60ec:	4629      	mov	r1, r5
    60ee:	6a34      	ldr	r4, [r6, #32]
    60f0:	47a0      	blx	r4
    60f2:	b004      	add	sp, #16
    60f4:	bd70      	pop	{r4, r5, r6, pc}
    60f6:	4619      	mov	r1, r3
    60f8:	9203      	str	r2, [sp, #12]
    60fa:	9302      	str	r3, [sp, #8]
    60fc:	f000 f878 	bl	61f0 <_ZNKSt9type_infoeqERKS_>
    6100:	9a03      	ldr	r2, [sp, #12]
    6102:	9b02      	ldr	r3, [sp, #8]
    6104:	2800      	cmp	r0, #0
    6106:	d0ee      	beq.n	60e6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
    6108:	2006      	movs	r0, #6
    610a:	e7f2      	b.n	60f2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>

0000610c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6110:	b085      	sub	sp, #20
    6112:	4688      	mov	r8, r1
    6114:	4619      	mov	r1, r3
    6116:	461f      	mov	r7, r3
    6118:	4692      	mov	sl, r2
    611a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    611c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    6120:	9d11      	ldr	r5, [sp, #68]	; 0x44
    6122:	4683      	mov	fp, r0
    6124:	f000 f864 	bl	61f0 <_ZNKSt9type_infoeqERKS_>
    6128:	4604      	mov	r4, r0
    612a:	b198      	cbz	r0, 6154 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
    612c:	f1b8 0f00 	cmp.w	r8, #0
    6130:	602e      	str	r6, [r5, #0]
    6132:	f885 a004 	strb.w	sl, [r5, #4]
    6136:	db22      	blt.n	617e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x72>
    6138:	4446      	add	r6, r8
    613a:	2400      	movs	r4, #0
    613c:	45b1      	cmp	r9, r6
    613e:	bf14      	ite	ne
    6140:	f04f 0901 	movne.w	r9, #1
    6144:	f04f 0906 	moveq.w	r9, #6
    6148:	4620      	mov	r0, r4
    614a:	f885 9006 	strb.w	r9, [r5, #6]
    614e:	b005      	add	sp, #20
    6150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6154:	454e      	cmp	r6, r9
    6156:	d017      	beq.n	6188 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    6158:	f8db 0008 	ldr.w	r0, [fp, #8]
    615c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    615e:	6804      	ldr	r4, [r0, #0]
    6160:	9301      	str	r3, [sp, #4]
    6162:	9600      	str	r6, [sp, #0]
    6164:	f8cd 9008 	str.w	r9, [sp, #8]
    6168:	9503      	str	r5, [sp, #12]
    616a:	69e4      	ldr	r4, [r4, #28]
    616c:	4641      	mov	r1, r8
    616e:	4652      	mov	r2, sl
    6170:	463b      	mov	r3, r7
    6172:	47a0      	blx	r4
    6174:	4604      	mov	r4, r0
    6176:	4620      	mov	r0, r4
    6178:	b005      	add	sp, #20
    617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    617e:	f118 0f02 	cmn.w	r8, #2
    6182:	d00a      	beq.n	619a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8e>
    6184:	2400      	movs	r4, #0
    6186:	e7f6      	b.n	6176 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
    6188:	4658      	mov	r0, fp
    618a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    618c:	f000 f830 	bl	61f0 <_ZNKSt9type_infoeqERKS_>
    6190:	2800      	cmp	r0, #0
    6192:	d0e1      	beq.n	6158 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
    6194:	f885 a005 	strb.w	sl, [r5, #5]
    6198:	e7ed      	b.n	6176 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
    619a:	2301      	movs	r3, #1
    619c:	71ab      	strb	r3, [r5, #6]
    619e:	2400      	movs	r4, #0
    61a0:	e7e9      	b.n	6176 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
    61a2:	bf00      	nop

000061a4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    61a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61a6:	4607      	mov	r7, r0
    61a8:	460e      	mov	r6, r1
    61aa:	4615      	mov	r5, r2
    61ac:	461c      	mov	r4, r3
    61ae:	f000 f873 	bl	6298 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    61b2:	b930      	cbnz	r0, 61c2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1e>
    61b4:	68b8      	ldr	r0, [r7, #8]
    61b6:	6807      	ldr	r7, [r0, #0]
    61b8:	4623      	mov	r3, r4
    61ba:	4631      	mov	r1, r6
    61bc:	462a      	mov	r2, r5
    61be:	69bc      	ldr	r4, [r7, #24]
    61c0:	47a0      	blx	r4
    61c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000061c4 <_ZNSt9type_infoD1Ev>:
    61c4:	4b01      	ldr	r3, [pc, #4]	; (61cc <_ZNSt9type_infoD1Ev+0x8>)
    61c6:	6003      	str	r3, [r0, #0]
    61c8:	4770      	bx	lr
    61ca:	bf00      	nop
    61cc:	00014708 	.word	0x00014708

000061d0 <_ZNKSt9type_info14__is_pointer_pEv>:
    61d0:	2000      	movs	r0, #0
    61d2:	4770      	bx	lr

000061d4 <_ZNKSt9type_info15__is_function_pEv>:
    61d4:	2000      	movs	r0, #0
    61d6:	4770      	bx	lr

000061d8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    61d8:	2000      	movs	r0, #0
    61da:	4770      	bx	lr

000061dc <_ZNSt9type_infoD0Ev>:
    61dc:	b510      	push	{r4, lr}
    61de:	4b03      	ldr	r3, [pc, #12]	; (61ec <_ZNSt9type_infoD0Ev+0x10>)
    61e0:	6003      	str	r3, [r0, #0]
    61e2:	4604      	mov	r4, r0
    61e4:	f7ff f900 	bl	53e8 <_ZdlPv>
    61e8:	4620      	mov	r0, r4
    61ea:	bd10      	pop	{r4, pc}
    61ec:	00014708 	.word	0x00014708

000061f0 <_ZNKSt9type_infoeqERKS_>:
    61f0:	4281      	cmp	r1, r0
    61f2:	b508      	push	{r3, lr}
    61f4:	d011      	beq.n	621a <_ZNKSt9type_infoeqERKS_+0x2a>
    61f6:	6840      	ldr	r0, [r0, #4]
    61f8:	7803      	ldrb	r3, [r0, #0]
    61fa:	2b2a      	cmp	r3, #42	; 0x2a
    61fc:	d00b      	beq.n	6216 <_ZNKSt9type_infoeqERKS_+0x26>
    61fe:	6849      	ldr	r1, [r1, #4]
    6200:	780b      	ldrb	r3, [r1, #0]
    6202:	2b2a      	cmp	r3, #42	; 0x2a
    6204:	bf08      	it	eq
    6206:	3101      	addeq	r1, #1
    6208:	f009 fef6 	bl	fff8 <strcmp>
    620c:	f1d0 0001 	rsbs	r0, r0, #1
    6210:	bf38      	it	cc
    6212:	2000      	movcc	r0, #0
    6214:	bd08      	pop	{r3, pc}
    6216:	2000      	movs	r0, #0
    6218:	bd08      	pop	{r3, pc}
    621a:	2001      	movs	r0, #1
    621c:	bd08      	pop	{r3, pc}
    621e:	bf00      	nop

00006220 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    6220:	f7ff bfe6 	b.w	61f0 <_ZNKSt9type_infoeqERKS_>

00006224 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    6224:	b570      	push	{r4, r5, r6, lr}
    6226:	6803      	ldr	r3, [r0, #0]
    6228:	b084      	sub	sp, #16
    622a:	2400      	movs	r4, #0
    622c:	699e      	ldr	r6, [r3, #24]
    622e:	9400      	str	r4, [sp, #0]
    6230:	2310      	movs	r3, #16
    6232:	4615      	mov	r5, r2
    6234:	9302      	str	r3, [sp, #8]
    6236:	6812      	ldr	r2, [r2, #0]
    6238:	f88d 4004 	strb.w	r4, [sp, #4]
    623c:	466b      	mov	r3, sp
    623e:	9403      	str	r4, [sp, #12]
    6240:	47b0      	blx	r6
    6242:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6246:	f003 0306 	and.w	r3, r3, #6
    624a:	2b06      	cmp	r3, #6
    624c:	bf03      	ittte	eq
    624e:	9b00      	ldreq	r3, [sp, #0]
    6250:	602b      	streq	r3, [r5, #0]
    6252:	2001      	moveq	r0, #1
    6254:	4620      	movne	r0, r4
    6256:	b004      	add	sp, #16
    6258:	bd70      	pop	{r4, r5, r6, pc}
    625a:	bf00      	nop

0000625c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    625c:	9800      	ldr	r0, [sp, #0]
    625e:	4290      	cmp	r0, r2
    6260:	bf14      	ite	ne
    6262:	2001      	movne	r0, #1
    6264:	2006      	moveq	r0, #6
    6266:	4770      	bx	lr

00006268 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    6268:	b510      	push	{r4, lr}
    626a:	4b03      	ldr	r3, [pc, #12]	; (6278 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
    626c:	6003      	str	r3, [r0, #0]
    626e:	4604      	mov	r4, r0
    6270:	f7ff ffa8 	bl	61c4 <_ZNSt9type_infoD1Ev>
    6274:	4620      	mov	r0, r4
    6276:	bd10      	pop	{r4, pc}
    6278:	00014728 	.word	0x00014728

0000627c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    627c:	b510      	push	{r4, lr}
    627e:	4b05      	ldr	r3, [pc, #20]	; (6294 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
    6280:	6003      	str	r3, [r0, #0]
    6282:	4604      	mov	r4, r0
    6284:	f7ff ff9e 	bl	61c4 <_ZNSt9type_infoD1Ev>
    6288:	4620      	mov	r0, r4
    628a:	f7ff f8ad 	bl	53e8 <_ZdlPv>
    628e:	4620      	mov	r0, r4
    6290:	bd10      	pop	{r4, pc}
    6292:	bf00      	nop
    6294:	00014728 	.word	0x00014728

00006298 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    6298:	b538      	push	{r3, r4, r5, lr}
    629a:	4615      	mov	r5, r2
    629c:	461c      	mov	r4, r3
    629e:	f7ff ffa7 	bl	61f0 <_ZNKSt9type_infoeqERKS_>
    62a2:	b120      	cbz	r0, 62ae <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
    62a4:	2208      	movs	r2, #8
    62a6:	2306      	movs	r3, #6
    62a8:	6025      	str	r5, [r4, #0]
    62aa:	60e2      	str	r2, [r4, #12]
    62ac:	7123      	strb	r3, [r4, #4]
    62ae:	bd38      	pop	{r3, r4, r5, pc}

000062b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    62b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62b2:	4616      	mov	r6, r2
    62b4:	461c      	mov	r4, r3
    62b6:	4607      	mov	r7, r0
    62b8:	460d      	mov	r5, r1
    62ba:	f7ff ff99 	bl	61f0 <_ZNKSt9type_infoeqERKS_>
    62be:	b908      	cbnz	r0, 62c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
    62c0:	2c03      	cmp	r4, #3
    62c2:	d900      	bls.n	62c6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
    62c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62c6:	682b      	ldr	r3, [r5, #0]
    62c8:	4639      	mov	r1, r7
    62ca:	4632      	mov	r2, r6
    62cc:	695b      	ldr	r3, [r3, #20]
    62ce:	4628      	mov	r0, r5
    62d0:	4798      	blx	r3
    62d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000062d4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    62d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62d6:	b083      	sub	sp, #12
    62d8:	4617      	mov	r7, r2
    62da:	9c08      	ldr	r4, [sp, #32]
    62dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    62de:	42ac      	cmp	r4, r5
    62e0:	4606      	mov	r6, r0
    62e2:	d00c      	beq.n	62fe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
    62e4:	4630      	mov	r0, r6
    62e6:	4619      	mov	r1, r3
    62e8:	f7ff ff82 	bl	61f0 <_ZNKSt9type_infoeqERKS_>
    62ec:	b120      	cbz	r0, 62f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
    62ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
    62f0:	2301      	movs	r3, #1
    62f2:	600c      	str	r4, [r1, #0]
    62f4:	710f      	strb	r7, [r1, #4]
    62f6:	718b      	strb	r3, [r1, #6]
    62f8:	2000      	movs	r0, #0
    62fa:	b003      	add	sp, #12
    62fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62fe:	9909      	ldr	r1, [sp, #36]	; 0x24
    6300:	9301      	str	r3, [sp, #4]
    6302:	f7ff ff75 	bl	61f0 <_ZNKSt9type_infoeqERKS_>
    6306:	9b01      	ldr	r3, [sp, #4]
    6308:	2800      	cmp	r0, #0
    630a:	d0eb      	beq.n	62e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x10>
    630c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    630e:	7157      	strb	r7, [r2, #5]
    6310:	e7f2      	b.n	62f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
    6312:	bf00      	nop

00006314 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
    6314:	b570      	push	{r4, r5, r6, lr}
    6316:	4b3d      	ldr	r3, [pc, #244]	; (640c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    6318:	781a      	ldrb	r2, [r3, #0]
    631a:	b082      	sub	sp, #8
    631c:	2a00      	cmp	r2, #0
    631e:	d136      	bne.n	638e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7a>
    6320:	2401      	movs	r4, #1
    6322:	701c      	strb	r4, [r3, #0]
    6324:	f005 fc42 	bl	bbac <__cxa_current_exception_type>
    6328:	2800      	cmp	r0, #0
    632a:	d05c      	beq.n	63e6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd2>
    632c:	6840      	ldr	r0, [r0, #4]
    632e:	7803      	ldrb	r3, [r0, #0]
    6330:	2b2a      	cmp	r3, #42	; 0x2a
    6332:	ab02      	add	r3, sp, #8
    6334:	bf0c      	ite	eq
    6336:	1905      	addeq	r5, r0, r4
    6338:	4605      	movne	r5, r0
    633a:	2100      	movs	r1, #0
    633c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6340:	f843 2d04 	str.w	r2, [r3, #-4]!
    6344:	4c32      	ldr	r4, [pc, #200]	; (6410 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    6346:	460a      	mov	r2, r1
    6348:	4628      	mov	r0, r5
    634a:	f005 fbbf 	bl	bacc <__cxa_demangle>
    634e:	6823      	ldr	r3, [r4, #0]
    6350:	4606      	mov	r6, r0
    6352:	68db      	ldr	r3, [r3, #12]
    6354:	482f      	ldr	r0, [pc, #188]	; (6414 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
    6356:	2101      	movs	r1, #1
    6358:	2230      	movs	r2, #48	; 0x30
    635a:	f008 ff09 	bl	f170 <fwrite>
    635e:	9b01      	ldr	r3, [sp, #4]
    6360:	b17b      	cbz	r3, 6382 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
    6362:	6823      	ldr	r3, [r4, #0]
    6364:	4628      	mov	r0, r5
    6366:	68d9      	ldr	r1, [r3, #12]
    6368:	f008 fd3c 	bl	ede4 <fputs>
    636c:	6823      	ldr	r3, [r4, #0]
    636e:	482a      	ldr	r0, [pc, #168]	; (6418 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
    6370:	68db      	ldr	r3, [r3, #12]
    6372:	2101      	movs	r1, #1
    6374:	2202      	movs	r2, #2
    6376:	f008 fefb 	bl	f170 <fwrite>
    637a:	9b01      	ldr	r3, [sp, #4]
    637c:	b18b      	cbz	r3, 63a2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
    637e:	f7ff fe5b 	bl	6038 <__cxa_rethrow>
    6382:	6823      	ldr	r3, [r4, #0]
    6384:	4630      	mov	r0, r6
    6386:	68d9      	ldr	r1, [r3, #12]
    6388:	f008 fd2c 	bl	ede4 <fputs>
    638c:	e7ee      	b.n	636c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x58>
    638e:	4b20      	ldr	r3, [pc, #128]	; (6410 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    6390:	4822      	ldr	r0, [pc, #136]	; (641c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
    6392:	681b      	ldr	r3, [r3, #0]
    6394:	2101      	movs	r1, #1
    6396:	68db      	ldr	r3, [r3, #12]
    6398:	221d      	movs	r2, #29
    639a:	f008 fee9 	bl	f170 <fwrite>
    639e:	f008 fcd5 	bl	ed4c <abort>
    63a2:	4630      	mov	r0, r6
    63a4:	f008 ff24 	bl	f1f0 <free>
    63a8:	e7e9      	b.n	637e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6a>
    63aa:	2901      	cmp	r1, #1
    63ac:	460d      	mov	r5, r1
    63ae:	d127      	bne.n	6400 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xec>
    63b0:	f7ff fa0c 	bl	57cc <__cxa_begin_catch>
    63b4:	6803      	ldr	r3, [r0, #0]
    63b6:	689b      	ldr	r3, [r3, #8]
    63b8:	4798      	blx	r3
    63ba:	6823      	ldr	r3, [r4, #0]
    63bc:	4606      	mov	r6, r0
    63be:	68db      	ldr	r3, [r3, #12]
    63c0:	4817      	ldr	r0, [pc, #92]	; (6420 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
    63c2:	4629      	mov	r1, r5
    63c4:	220b      	movs	r2, #11
    63c6:	f008 fed3 	bl	f170 <fwrite>
    63ca:	6823      	ldr	r3, [r4, #0]
    63cc:	4630      	mov	r0, r6
    63ce:	68d9      	ldr	r1, [r3, #12]
    63d0:	f008 fd08 	bl	ede4 <fputs>
    63d4:	6823      	ldr	r3, [r4, #0]
    63d6:	200a      	movs	r0, #10
    63d8:	68d9      	ldr	r1, [r3, #12]
    63da:	f008 fcc9 	bl	ed70 <fputc>
    63de:	f7ff fa3b 	bl	5858 <__cxa_end_catch>
    63e2:	f008 fcb3 	bl	ed4c <abort>
    63e6:	4b0a      	ldr	r3, [pc, #40]	; (6410 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    63e8:	480e      	ldr	r0, [pc, #56]	; (6424 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	4621      	mov	r1, r4
    63ee:	68db      	ldr	r3, [r3, #12]
    63f0:	222d      	movs	r2, #45	; 0x2d
    63f2:	f008 febd 	bl	f170 <fwrite>
    63f6:	e7f4      	b.n	63e2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
    63f8:	f7ff fa2e 	bl	5858 <__cxa_end_catch>
    63fc:	f7ff f886 	bl	550c <__cxa_end_cleanup>
    6400:	f7ff f9e4 	bl	57cc <__cxa_begin_catch>
    6404:	f7ff fa28 	bl	5858 <__cxa_end_catch>
    6408:	e7eb      	b.n	63e2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
    640a:	bf00      	nop
    640c:	1fff9c48 	.word	0x1fff9c48
    6410:	1fff88f0 	.word	0x1fff88f0
    6414:	000147a0 	.word	0x000147a0
    6418:	000147d4 	.word	0x000147d4
    641c:	00014780 	.word	0x00014780
    6420:	00014808 	.word	0x00014808
    6424:	000147d8 	.word	0x000147d8

00006428 <d_make_comp>:
    6428:	b470      	push	{r4, r5, r6}
    642a:	1e4c      	subs	r4, r1, #1
    642c:	2c4a      	cmp	r4, #74	; 0x4a
    642e:	d82c      	bhi.n	648a <d_make_comp+0x62>
    6430:	e8df f004 	tbb	[pc, r4]
    6434:	3c3c3c3c 	.word	0x3c3c3c3c
    6438:	2b2b2b2b 	.word	0x2b2b2b2b
    643c:	263c2626 	.word	0x263c2626
    6440:	26262626 	.word	0x26262626
    6444:	26262626 	.word	0x26262626
    6448:	2b262626 	.word	0x2b262626
    644c:	27272727 	.word	0x27272727
    6450:	27272727 	.word	0x27272727
    6454:	2626263c 	.word	0x2626263c
    6458:	262b2626 	.word	0x262b2626
    645c:	2b3c3d27 	.word	0x2b3c3d27
    6460:	3d27273c 	.word	0x3d27273c
    6464:	26262b2b 	.word	0x26262b2b
    6468:	3c3c3c3c 	.word	0x3c3c3c3c
    646c:	3c3c263c 	.word	0x3c3c263c
    6470:	2b2b3c26 	.word	0x2b2b3c26
    6474:	2b262626 	.word	0x2b262626
    6478:	26262b2b 	.word	0x26262b2b
    647c:	3c26      	.short	0x3c26
    647e:	3c          	.byte	0x3c
    647f:	00          	.byte	0x00
    6480:	b1ca      	cbz	r2, 64b6 <d_make_comp+0x8e>
    6482:	6944      	ldr	r4, [r0, #20]
    6484:	6985      	ldr	r5, [r0, #24]
    6486:	42ac      	cmp	r4, r5
    6488:	db02      	blt.n	6490 <d_make_comp+0x68>
    648a:	2000      	movs	r0, #0
    648c:	bc70      	pop	{r4, r5, r6}
    648e:	4770      	bx	lr
    6490:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    6494:	6906      	ldr	r6, [r0, #16]
    6496:	3401      	adds	r4, #1
    6498:	00ad      	lsls	r5, r5, #2
    649a:	6144      	str	r4, [r0, #20]
    649c:	1974      	adds	r4, r6, r5
    649e:	d00c      	beq.n	64ba <d_make_comp+0x92>
    64a0:	5571      	strb	r1, [r6, r5]
    64a2:	6062      	str	r2, [r4, #4]
    64a4:	60a3      	str	r3, [r4, #8]
    64a6:	4620      	mov	r0, r4
    64a8:	bc70      	pop	{r4, r5, r6}
    64aa:	4770      	bx	lr
    64ac:	b11a      	cbz	r2, 64b6 <d_make_comp+0x8e>
    64ae:	2b00      	cmp	r3, #0
    64b0:	d1e7      	bne.n	6482 <d_make_comp+0x5a>
    64b2:	4618      	mov	r0, r3
    64b4:	e7ea      	b.n	648c <d_make_comp+0x64>
    64b6:	4610      	mov	r0, r2
    64b8:	e7e8      	b.n	648c <d_make_comp+0x64>
    64ba:	4620      	mov	r0, r4
    64bc:	e7e6      	b.n	648c <d_make_comp+0x64>
    64be:	bf00      	nop

000064c0 <d_make_name>:
    64c0:	b430      	push	{r4, r5}
    64c2:	6943      	ldr	r3, [r0, #20]
    64c4:	6984      	ldr	r4, [r0, #24]
    64c6:	42a3      	cmp	r3, r4
    64c8:	da09      	bge.n	64de <d_make_name+0x1e>
    64ca:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    64ce:	6905      	ldr	r5, [r0, #16]
    64d0:	3301      	adds	r3, #1
    64d2:	00a4      	lsls	r4, r4, #2
    64d4:	6143      	str	r3, [r0, #20]
    64d6:	192b      	adds	r3, r5, r4
    64d8:	d001      	beq.n	64de <d_make_name+0x1e>
    64da:	b101      	cbz	r1, 64de <d_make_name+0x1e>
    64dc:	b912      	cbnz	r2, 64e4 <d_make_name+0x24>
    64de:	2000      	movs	r0, #0
    64e0:	bc30      	pop	{r4, r5}
    64e2:	4770      	bx	lr
    64e4:	2000      	movs	r0, #0
    64e6:	5528      	strb	r0, [r5, r4]
    64e8:	6059      	str	r1, [r3, #4]
    64ea:	609a      	str	r2, [r3, #8]
    64ec:	4618      	mov	r0, r3
    64ee:	bc30      	pop	{r4, r5}
    64f0:	4770      	bx	lr
    64f2:	bf00      	nop

000064f4 <d_cv_qualifiers>:
    64f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64f8:	68c5      	ldr	r5, [r0, #12]
    64fa:	4604      	mov	r4, r0
    64fc:	4688      	mov	r8, r1
    64fe:	4617      	mov	r7, r2
    6500:	782b      	ldrb	r3, [r5, #0]
    6502:	460e      	mov	r6, r1
    6504:	e017      	b.n	6536 <d_cv_qualifiers+0x42>
    6506:	2b56      	cmp	r3, #86	; 0x56
    6508:	d022      	beq.n	6550 <d_cv_qualifiers+0x5c>
    650a:	2b4b      	cmp	r3, #75	; 0x4b
    650c:	d12d      	bne.n	656a <d_cv_qualifiers+0x76>
    650e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6510:	3501      	adds	r5, #1
    6512:	2f00      	cmp	r7, #0
    6514:	f103 0306 	add.w	r3, r3, #6
    6518:	60e5      	str	r5, [r4, #12]
    651a:	6323      	str	r3, [r4, #48]	; 0x30
    651c:	bf0c      	ite	eq
    651e:	211b      	moveq	r1, #27
    6520:	211e      	movne	r1, #30
    6522:	2200      	movs	r2, #0
    6524:	4613      	mov	r3, r2
    6526:	4620      	mov	r0, r4
    6528:	f7ff ff7e 	bl	6428 <d_make_comp>
    652c:	6030      	str	r0, [r6, #0]
    652e:	b1d0      	cbz	r0, 6566 <d_cv_qualifiers+0x72>
    6530:	68e5      	ldr	r5, [r4, #12]
    6532:	782b      	ldrb	r3, [r5, #0]
    6534:	1d06      	adds	r6, r0, #4
    6536:	2b72      	cmp	r3, #114	; 0x72
    6538:	d1e5      	bne.n	6506 <d_cv_qualifiers+0x12>
    653a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    653c:	3501      	adds	r5, #1
    653e:	2f00      	cmp	r7, #0
    6540:	f103 0309 	add.w	r3, r3, #9
    6544:	60e5      	str	r5, [r4, #12]
    6546:	6323      	str	r3, [r4, #48]	; 0x30
    6548:	bf0c      	ite	eq
    654a:	2119      	moveq	r1, #25
    654c:	211c      	movne	r1, #28
    654e:	e7e8      	b.n	6522 <d_cv_qualifiers+0x2e>
    6550:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6552:	3501      	adds	r5, #1
    6554:	2f00      	cmp	r7, #0
    6556:	f103 0309 	add.w	r3, r3, #9
    655a:	60e5      	str	r5, [r4, #12]
    655c:	6323      	str	r3, [r4, #48]	; 0x30
    655e:	bf0c      	ite	eq
    6560:	211a      	moveq	r1, #26
    6562:	211d      	movne	r1, #29
    6564:	e7dd      	b.n	6522 <d_cv_qualifiers+0x2e>
    6566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    656a:	b9bf      	cbnz	r7, 659c <d_cv_qualifiers+0xa8>
    656c:	2b46      	cmp	r3, #70	; 0x46
    656e:	d115      	bne.n	659c <d_cv_qualifiers+0xa8>
    6570:	4546      	cmp	r6, r8
    6572:	d013      	beq.n	659c <d_cv_qualifiers+0xa8>
    6574:	241d      	movs	r4, #29
    6576:	201e      	movs	r0, #30
    6578:	211c      	movs	r1, #28
    657a:	e008      	b.n	658e <d_cv_qualifiers+0x9a>
    657c:	2a1b      	cmp	r2, #27
    657e:	d010      	beq.n	65a2 <d_cv_qualifiers+0xae>
    6580:	2a19      	cmp	r2, #25
    6582:	d100      	bne.n	6586 <d_cv_qualifiers+0x92>
    6584:	7019      	strb	r1, [r3, #0]
    6586:	f103 0804 	add.w	r8, r3, #4
    658a:	4546      	cmp	r6, r8
    658c:	d006      	beq.n	659c <d_cv_qualifiers+0xa8>
    658e:	f8d8 3000 	ldr.w	r3, [r8]
    6592:	781a      	ldrb	r2, [r3, #0]
    6594:	2a1a      	cmp	r2, #26
    6596:	d1f1      	bne.n	657c <d_cv_qualifiers+0x88>
    6598:	701c      	strb	r4, [r3, #0]
    659a:	e7f4      	b.n	6586 <d_cv_qualifiers+0x92>
    659c:	4630      	mov	r0, r6
    659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65a2:	7018      	strb	r0, [r3, #0]
    65a4:	e7ef      	b.n	6586 <d_cv_qualifiers+0x92>
    65a6:	bf00      	nop

000065a8 <d_ref_qualifier>:
    65a8:	b410      	push	{r4}
    65aa:	68c4      	ldr	r4, [r0, #12]
    65ac:	7823      	ldrb	r3, [r4, #0]
    65ae:	2b52      	cmp	r3, #82	; 0x52
    65b0:	460a      	mov	r2, r1
    65b2:	d010      	beq.n	65d6 <d_ref_qualifier+0x2e>
    65b4:	2b4f      	cmp	r3, #79	; 0x4f
    65b6:	d003      	beq.n	65c0 <d_ref_qualifier+0x18>
    65b8:	4608      	mov	r0, r1
    65ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    65be:	4770      	bx	lr
    65c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    65c2:	3303      	adds	r3, #3
    65c4:	6303      	str	r3, [r0, #48]	; 0x30
    65c6:	2120      	movs	r1, #32
    65c8:	3401      	adds	r4, #1
    65ca:	60c4      	str	r4, [r0, #12]
    65cc:	2300      	movs	r3, #0
    65ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    65d2:	f7ff bf29 	b.w	6428 <d_make_comp>
    65d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    65d8:	3302      	adds	r3, #2
    65da:	6303      	str	r3, [r0, #48]	; 0x30
    65dc:	211f      	movs	r1, #31
    65de:	e7f3      	b.n	65c8 <d_ref_qualifier+0x20>

000065e0 <d_clone_suffix>:
    65e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65e4:	460f      	mov	r7, r1
    65e6:	68c1      	ldr	r1, [r0, #12]
    65e8:	780c      	ldrb	r4, [r1, #0]
    65ea:	2c2e      	cmp	r4, #46	; 0x2e
    65ec:	4680      	mov	r8, r0
    65ee:	d027      	beq.n	6640 <d_clone_suffix+0x60>
    65f0:	460b      	mov	r3, r1
    65f2:	2c2e      	cmp	r4, #46	; 0x2e
    65f4:	d114      	bne.n	6620 <d_clone_suffix+0x40>
    65f6:	785c      	ldrb	r4, [r3, #1]
    65f8:	3c30      	subs	r4, #48	; 0x30
    65fa:	2c09      	cmp	r4, #9
    65fc:	d810      	bhi.n	6620 <d_clone_suffix+0x40>
    65fe:	789c      	ldrb	r4, [r3, #2]
    6600:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    6604:	2a09      	cmp	r2, #9
    6606:	f103 0002 	add.w	r0, r3, #2
    660a:	d817      	bhi.n	663c <d_clone_suffix+0x5c>
    660c:	1cdd      	adds	r5, r3, #3
    660e:	462b      	mov	r3, r5
    6610:	3501      	adds	r5, #1
    6612:	781c      	ldrb	r4, [r3, #0]
    6614:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    6618:	2e09      	cmp	r6, #9
    661a:	d9f8      	bls.n	660e <d_clone_suffix+0x2e>
    661c:	2c2e      	cmp	r4, #46	; 0x2e
    661e:	d0ea      	beq.n	65f6 <d_clone_suffix+0x16>
    6620:	1a5a      	subs	r2, r3, r1
    6622:	f8c8 300c 	str.w	r3, [r8, #12]
    6626:	4640      	mov	r0, r8
    6628:	f7ff ff4a 	bl	64c0 <d_make_name>
    662c:	463a      	mov	r2, r7
    662e:	4603      	mov	r3, r0
    6630:	214b      	movs	r1, #75	; 0x4b
    6632:	4640      	mov	r0, r8
    6634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6638:	f7ff bef6 	b.w	6428 <d_make_comp>
    663c:	4603      	mov	r3, r0
    663e:	e7d8      	b.n	65f2 <d_clone_suffix+0x12>
    6640:	784b      	ldrb	r3, [r1, #1]
    6642:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    6646:	2a19      	cmp	r2, #25
    6648:	d80a      	bhi.n	6660 <d_clone_suffix+0x80>
    664a:	1c8a      	adds	r2, r1, #2
    664c:	4613      	mov	r3, r2
    664e:	3201      	adds	r2, #1
    6650:	781c      	ldrb	r4, [r3, #0]
    6652:	f1a4 0061 	sub.w	r0, r4, #97	; 0x61
    6656:	2819      	cmp	r0, #25
    6658:	d9f8      	bls.n	664c <d_clone_suffix+0x6c>
    665a:	2c5f      	cmp	r4, #95	; 0x5f
    665c:	d0f6      	beq.n	664c <d_clone_suffix+0x6c>
    665e:	e7c8      	b.n	65f2 <d_clone_suffix+0x12>
    6660:	2b5f      	cmp	r3, #95	; 0x5f
    6662:	d1c5      	bne.n	65f0 <d_clone_suffix+0x10>
    6664:	e7f1      	b.n	664a <d_clone_suffix+0x6a>
    6666:	bf00      	nop

00006668 <d_substitution>:
    6668:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    666c:	68c2      	ldr	r2, [r0, #12]
    666e:	7813      	ldrb	r3, [r2, #0]
    6670:	2b53      	cmp	r3, #83	; 0x53
    6672:	d003      	beq.n	667c <d_substitution+0x14>
    6674:	2000      	movs	r0, #0
    6676:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    667a:	4770      	bx	lr
    667c:	1c53      	adds	r3, r2, #1
    667e:	60c3      	str	r3, [r0, #12]
    6680:	7853      	ldrb	r3, [r2, #1]
    6682:	b1ab      	cbz	r3, 66b0 <d_substitution+0x48>
    6684:	1c93      	adds	r3, r2, #2
    6686:	60c3      	str	r3, [r0, #12]
    6688:	7853      	ldrb	r3, [r2, #1]
    668a:	2b5f      	cmp	r3, #95	; 0x5f
    668c:	d152      	bne.n	6734 <d_substitution+0xcc>
    668e:	2100      	movs	r1, #0
    6690:	6a03      	ldr	r3, [r0, #32]
    6692:	4299      	cmp	r1, r3
    6694:	d2ee      	bcs.n	6674 <d_substitution+0xc>
    6696:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6698:	69c2      	ldr	r2, [r0, #28]
    669a:	3301      	adds	r3, #1
    669c:	6283      	str	r3, [r0, #40]	; 0x28
    669e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    66a2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    66a6:	4770      	bx	lr
    66a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    66ac:	2a19      	cmp	r2, #25
    66ae:	d946      	bls.n	673e <d_substitution+0xd6>
    66b0:	6882      	ldr	r2, [r0, #8]
    66b2:	0712      	lsls	r2, r2, #28
    66b4:	d46a      	bmi.n	678c <d_substitution+0x124>
    66b6:	2900      	cmp	r1, #0
    66b8:	d16a      	bne.n	6790 <d_substitution+0x128>
    66ba:	4a3f      	ldr	r2, [pc, #252]	; (67b8 <d_substitution+0x150>)
    66bc:	f102 05c4 	add.w	r5, r2, #196	; 0xc4
    66c0:	e002      	b.n	66c8 <d_substitution+0x60>
    66c2:	321c      	adds	r2, #28
    66c4:	42aa      	cmp	r2, r5
    66c6:	d0d5      	beq.n	6674 <d_substitution+0xc>
    66c8:	7814      	ldrb	r4, [r2, #0]
    66ca:	429c      	cmp	r4, r3
    66cc:	d1f9      	bne.n	66c2 <d_substitution+0x5a>
    66ce:	6955      	ldr	r5, [r2, #20]
    66d0:	2d00      	cmp	r5, #0
    66d2:	d06a      	beq.n	67aa <d_substitution+0x142>
    66d4:	6943      	ldr	r3, [r0, #20]
    66d6:	6984      	ldr	r4, [r0, #24]
    66d8:	f8d2 8018 	ldr.w	r8, [r2, #24]
    66dc:	42a3      	cmp	r3, r4
    66de:	da62      	bge.n	67a6 <d_substitution+0x13e>
    66e0:	eb03 0743 	add.w	r7, r3, r3, lsl #1
    66e4:	f8d0 c010 	ldr.w	ip, [r0, #16]
    66e8:	00bf      	lsls	r7, r7, #2
    66ea:	3301      	adds	r3, #1
    66ec:	eb1c 0607 	adds.w	r6, ip, r7
    66f0:	6143      	str	r3, [r0, #20]
    66f2:	d05f      	beq.n	67b4 <d_substitution+0x14c>
    66f4:	f04f 0918 	mov.w	r9, #24
    66f8:	f80c 9007 	strb.w	r9, [ip, r7]
    66fc:	4637      	mov	r7, r6
    66fe:	6075      	str	r5, [r6, #4]
    6700:	f8c6 8008 	str.w	r8, [r6, #8]
    6704:	62c7      	str	r7, [r0, #44]	; 0x2c
    6706:	2900      	cmp	r1, #0
    6708:	d04a      	beq.n	67a0 <d_substitution+0x138>
    670a:	68d5      	ldr	r5, [r2, #12]
    670c:	6912      	ldr	r2, [r2, #16]
    670e:	6b01      	ldr	r1, [r0, #48]	; 0x30
    6710:	42a3      	cmp	r3, r4
    6712:	4411      	add	r1, r2
    6714:	6301      	str	r1, [r0, #48]	; 0x30
    6716:	daad      	bge.n	6674 <d_substitution+0xc>
    6718:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    671c:	6904      	ldr	r4, [r0, #16]
    671e:	3301      	adds	r3, #1
    6720:	0089      	lsls	r1, r1, #2
    6722:	6143      	str	r3, [r0, #20]
    6724:	1863      	adds	r3, r4, r1
    6726:	d043      	beq.n	67b0 <d_substitution+0x148>
    6728:	2018      	movs	r0, #24
    672a:	5460      	strb	r0, [r4, r1]
    672c:	4618      	mov	r0, r3
    672e:	605d      	str	r5, [r3, #4]
    6730:	609a      	str	r2, [r3, #8]
    6732:	e7a0      	b.n	6676 <d_substitution+0xe>
    6734:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    6738:	b2ea      	uxtb	r2, r5
    673a:	2a09      	cmp	r2, #9
    673c:	d8b4      	bhi.n	66a8 <d_substitution+0x40>
    673e:	2200      	movs	r2, #0
    6740:	e012      	b.n	6768 <d_substitution+0x100>
    6742:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
    6746:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    674a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    674e:	428a      	cmp	r2, r1
    6750:	d890      	bhi.n	6674 <d_substitution+0xc>
    6752:	68c2      	ldr	r2, [r0, #12]
    6754:	7813      	ldrb	r3, [r2, #0]
    6756:	1c54      	adds	r4, r2, #1
    6758:	b11b      	cbz	r3, 6762 <d_substitution+0xfa>
    675a:	60c4      	str	r4, [r0, #12]
    675c:	7813      	ldrb	r3, [r2, #0]
    675e:	2b5f      	cmp	r3, #95	; 0x5f
    6760:	d012      	beq.n	6788 <d_substitution+0x120>
    6762:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    6766:	460a      	mov	r2, r1
    6768:	b2e9      	uxtb	r1, r5
    676a:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
    676e:	2909      	cmp	r1, #9
    6770:	b2e4      	uxtb	r4, r4
    6772:	d9e6      	bls.n	6742 <d_substitution+0xda>
    6774:	2c19      	cmp	r4, #25
    6776:	f63f af7d 	bhi.w	6674 <d_substitution+0xc>
    677a:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
    677e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6782:	f1a3 0137 	sub.w	r1, r3, #55	; 0x37
    6786:	e7e2      	b.n	674e <d_substitution+0xe6>
    6788:	3101      	adds	r1, #1
    678a:	e781      	b.n	6690 <d_substitution+0x28>
    678c:	2101      	movs	r1, #1
    678e:	e794      	b.n	66ba <d_substitution+0x52>
    6790:	68c2      	ldr	r2, [r0, #12]
    6792:	7811      	ldrb	r1, [r2, #0]
    6794:	3943      	subs	r1, #67	; 0x43
    6796:	2901      	cmp	r1, #1
    6798:	bf8c      	ite	hi
    679a:	2100      	movhi	r1, #0
    679c:	2101      	movls	r1, #1
    679e:	e78c      	b.n	66ba <d_substitution+0x52>
    67a0:	6855      	ldr	r5, [r2, #4]
    67a2:	6892      	ldr	r2, [r2, #8]
    67a4:	e7b3      	b.n	670e <d_substitution+0xa6>
    67a6:	2700      	movs	r7, #0
    67a8:	e7ac      	b.n	6704 <d_substitution+0x9c>
    67aa:	6984      	ldr	r4, [r0, #24]
    67ac:	6943      	ldr	r3, [r0, #20]
    67ae:	e7aa      	b.n	6706 <d_substitution+0x9e>
    67b0:	4618      	mov	r0, r3
    67b2:	e760      	b.n	6676 <d_substitution+0xe>
    67b4:	4637      	mov	r7, r6
    67b6:	e7a5      	b.n	6704 <d_substitution+0x9c>
    67b8:	00014814 	.word	0x00014814

000067bc <d_append_char>:
    67bc:	b570      	push	{r4, r5, r6, lr}
    67be:	460d      	mov	r5, r1
    67c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    67c4:	29ff      	cmp	r1, #255	; 0xff
    67c6:	4604      	mov	r4, r0
    67c8:	d006      	beq.n	67d8 <d_append_char+0x1c>
    67ca:	1c4a      	adds	r2, r1, #1
    67cc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    67d0:	5465      	strb	r5, [r4, r1]
    67d2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    67d6:	bd70      	pop	{r4, r5, r6, pc}
    67d8:	2600      	movs	r6, #0
    67da:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    67de:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    67e2:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    67e6:	4798      	blx	r3
    67e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    67ec:	4631      	mov	r1, r6
    67ee:	1c5a      	adds	r2, r3, #1
    67f0:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    67f4:	2201      	movs	r2, #1
    67f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    67fa:	5465      	strb	r5, [r4, r1]
    67fc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    6800:	bd70      	pop	{r4, r5, r6, pc}
    6802:	bf00      	nop

00006804 <d_number.isra.0>:
    6804:	b470      	push	{r4, r5, r6}
    6806:	6802      	ldr	r2, [r0, #0]
    6808:	7813      	ldrb	r3, [r2, #0]
    680a:	2b6e      	cmp	r3, #110	; 0x6e
    680c:	4605      	mov	r5, r0
    680e:	d018      	beq.n	6842 <d_number.isra.0+0x3e>
    6810:	2600      	movs	r6, #0
    6812:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    6816:	2a09      	cmp	r2, #9
    6818:	d818      	bhi.n	684c <d_number.isra.0+0x48>
    681a:	682a      	ldr	r2, [r5, #0]
    681c:	2000      	movs	r0, #0
    681e:	3201      	adds	r2, #1
    6820:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    6824:	602a      	str	r2, [r5, #0]
    6826:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    682a:	f812 3b01 	ldrb.w	r3, [r2], #1
    682e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    6832:	2909      	cmp	r1, #9
    6834:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
    6838:	d9f2      	bls.n	6820 <d_number.isra.0+0x1c>
    683a:	b106      	cbz	r6, 683e <d_number.isra.0+0x3a>
    683c:	4240      	negs	r0, r0
    683e:	bc70      	pop	{r4, r5, r6}
    6840:	4770      	bx	lr
    6842:	1c53      	adds	r3, r2, #1
    6844:	6003      	str	r3, [r0, #0]
    6846:	7853      	ldrb	r3, [r2, #1]
    6848:	2601      	movs	r6, #1
    684a:	e7e2      	b.n	6812 <d_number.isra.0+0xe>
    684c:	2000      	movs	r0, #0
    684e:	e7f4      	b.n	683a <d_number.isra.0+0x36>

00006850 <d_number_component>:
    6850:	6943      	ldr	r3, [r0, #20]
    6852:	6982      	ldr	r2, [r0, #24]
    6854:	4293      	cmp	r3, r2
    6856:	b510      	push	{r4, lr}
    6858:	da13      	bge.n	6882 <d_number_component+0x32>
    685a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    685e:	6901      	ldr	r1, [r0, #16]
    6860:	0092      	lsls	r2, r2, #2
    6862:	3301      	adds	r3, #1
    6864:	188c      	adds	r4, r1, r2
    6866:	6143      	str	r3, [r0, #20]
    6868:	d008      	beq.n	687c <d_number_component+0x2c>
    686a:	2340      	movs	r3, #64	; 0x40
    686c:	548b      	strb	r3, [r1, r2]
    686e:	300c      	adds	r0, #12
    6870:	f7ff ffc8 	bl	6804 <d_number.isra.0>
    6874:	4623      	mov	r3, r4
    6876:	6060      	str	r0, [r4, #4]
    6878:	4618      	mov	r0, r3
    687a:	bd10      	pop	{r4, pc}
    687c:	4623      	mov	r3, r4
    687e:	4618      	mov	r0, r3
    6880:	bd10      	pop	{r4, pc}
    6882:	2300      	movs	r3, #0
    6884:	4618      	mov	r0, r3
    6886:	bd10      	pop	{r4, pc}

00006888 <d_compact_number>:
    6888:	b510      	push	{r4, lr}
    688a:	68c3      	ldr	r3, [r0, #12]
    688c:	781a      	ldrb	r2, [r3, #0]
    688e:	2a5f      	cmp	r2, #95	; 0x5f
    6890:	4604      	mov	r4, r0
    6892:	d00b      	beq.n	68ac <d_compact_number+0x24>
    6894:	2a6e      	cmp	r2, #110	; 0x6e
    6896:	d006      	beq.n	68a6 <d_compact_number+0x1e>
    6898:	300c      	adds	r0, #12
    689a:	f7ff ffb3 	bl	6804 <d_number.isra.0>
    689e:	68e3      	ldr	r3, [r4, #12]
    68a0:	781a      	ldrb	r2, [r3, #0]
    68a2:	2a5f      	cmp	r2, #95	; 0x5f
    68a4:	d006      	beq.n	68b4 <d_compact_number+0x2c>
    68a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    68aa:	bd10      	pop	{r4, pc}
    68ac:	2000      	movs	r0, #0
    68ae:	3301      	adds	r3, #1
    68b0:	60e3      	str	r3, [r4, #12]
    68b2:	bd10      	pop	{r4, pc}
    68b4:	3001      	adds	r0, #1
    68b6:	e7fa      	b.n	68ae <d_compact_number+0x26>

000068b8 <d_template_param>:
    68b8:	b538      	push	{r3, r4, r5, lr}
    68ba:	68c3      	ldr	r3, [r0, #12]
    68bc:	781a      	ldrb	r2, [r3, #0]
    68be:	2a54      	cmp	r2, #84	; 0x54
    68c0:	4604      	mov	r4, r0
    68c2:	d001      	beq.n	68c8 <d_template_param+0x10>
    68c4:	2000      	movs	r0, #0
    68c6:	bd38      	pop	{r3, r4, r5, pc}
    68c8:	3301      	adds	r3, #1
    68ca:	60c3      	str	r3, [r0, #12]
    68cc:	f7ff ffdc 	bl	6888 <d_compact_number>
    68d0:	1e05      	subs	r5, r0, #0
    68d2:	dbf7      	blt.n	68c4 <d_template_param+0xc>
    68d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    68d6:	6963      	ldr	r3, [r4, #20]
    68d8:	69a2      	ldr	r2, [r4, #24]
    68da:	3101      	adds	r1, #1
    68dc:	4293      	cmp	r3, r2
    68de:	62a1      	str	r1, [r4, #40]	; 0x28
    68e0:	daf0      	bge.n	68c4 <d_template_param+0xc>
    68e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    68e6:	6921      	ldr	r1, [r4, #16]
    68e8:	3301      	adds	r3, #1
    68ea:	0092      	lsls	r2, r2, #2
    68ec:	6163      	str	r3, [r4, #20]
    68ee:	188b      	adds	r3, r1, r2
    68f0:	d0e8      	beq.n	68c4 <d_template_param+0xc>
    68f2:	2405      	movs	r4, #5
    68f4:	548c      	strb	r4, [r1, r2]
    68f6:	605d      	str	r5, [r3, #4]
    68f8:	4618      	mov	r0, r3
    68fa:	bd38      	pop	{r3, r4, r5, pc}

000068fc <d_discriminator>:
    68fc:	b508      	push	{r3, lr}
    68fe:	68c3      	ldr	r3, [r0, #12]
    6900:	781a      	ldrb	r2, [r3, #0]
    6902:	2a5f      	cmp	r2, #95	; 0x5f
    6904:	d001      	beq.n	690a <d_discriminator+0xe>
    6906:	2001      	movs	r0, #1
    6908:	bd08      	pop	{r3, pc}
    690a:	3301      	adds	r3, #1
    690c:	f840 3f0c 	str.w	r3, [r0, #12]!
    6910:	f7ff ff78 	bl	6804 <d_number.isra.0>
    6914:	43c0      	mvns	r0, r0
    6916:	0fc0      	lsrs	r0, r0, #31
    6918:	bd08      	pop	{r3, pc}
    691a:	bf00      	nop

0000691c <d_source_name>:
    691c:	b570      	push	{r4, r5, r6, lr}
    691e:	4604      	mov	r4, r0
    6920:	300c      	adds	r0, #12
    6922:	f7ff ff6f 	bl	6804 <d_number.isra.0>
    6926:	1e06      	subs	r6, r0, #0
    6928:	dd32      	ble.n	6990 <d_source_name+0x74>
    692a:	68e5      	ldr	r5, [r4, #12]
    692c:	6863      	ldr	r3, [r4, #4]
    692e:	1b5b      	subs	r3, r3, r5
    6930:	429e      	cmp	r6, r3
    6932:	dc2f      	bgt.n	6994 <d_source_name+0x78>
    6934:	68a2      	ldr	r2, [r4, #8]
    6936:	19ab      	adds	r3, r5, r6
    6938:	0752      	lsls	r2, r2, #29
    693a:	60e3      	str	r3, [r4, #12]
    693c:	d415      	bmi.n	696a <d_source_name+0x4e>
    693e:	2e09      	cmp	r6, #9
    6940:	dd0c      	ble.n	695c <d_source_name+0x40>
    6942:	4628      	mov	r0, r5
    6944:	4914      	ldr	r1, [pc, #80]	; (6998 <d_source_name+0x7c>)
    6946:	2208      	movs	r2, #8
    6948:	f008 ff3e 	bl	f7c8 <memcmp>
    694c:	b930      	cbnz	r0, 695c <d_source_name+0x40>
    694e:	7a2b      	ldrb	r3, [r5, #8]
    6950:	2b2e      	cmp	r3, #46	; 0x2e
    6952:	d010      	beq.n	6976 <d_source_name+0x5a>
    6954:	2b5f      	cmp	r3, #95	; 0x5f
    6956:	d00e      	beq.n	6976 <d_source_name+0x5a>
    6958:	2b24      	cmp	r3, #36	; 0x24
    695a:	d00c      	beq.n	6976 <d_source_name+0x5a>
    695c:	4629      	mov	r1, r5
    695e:	4632      	mov	r2, r6
    6960:	4620      	mov	r0, r4
    6962:	f7ff fdad 	bl	64c0 <d_make_name>
    6966:	62e0      	str	r0, [r4, #44]	; 0x2c
    6968:	bd70      	pop	{r4, r5, r6, pc}
    696a:	5daa      	ldrb	r2, [r5, r6]
    696c:	2a24      	cmp	r2, #36	; 0x24
    696e:	bf04      	itt	eq
    6970:	3301      	addeq	r3, #1
    6972:	60e3      	streq	r3, [r4, #12]
    6974:	e7e3      	b.n	693e <d_source_name+0x22>
    6976:	7a6b      	ldrb	r3, [r5, #9]
    6978:	2b4e      	cmp	r3, #78	; 0x4e
    697a:	d1ef      	bne.n	695c <d_source_name+0x40>
    697c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    697e:	4907      	ldr	r1, [pc, #28]	; (699c <d_source_name+0x80>)
    6980:	3316      	adds	r3, #22
    6982:	1b9e      	subs	r6, r3, r6
    6984:	6326      	str	r6, [r4, #48]	; 0x30
    6986:	4620      	mov	r0, r4
    6988:	2215      	movs	r2, #21
    698a:	f7ff fd99 	bl	64c0 <d_make_name>
    698e:	e7ea      	b.n	6966 <d_source_name+0x4a>
    6990:	2000      	movs	r0, #0
    6992:	bd70      	pop	{r4, r5, r6, pc}
    6994:	2000      	movs	r0, #0
    6996:	e7e6      	b.n	6966 <d_source_name+0x4a>
    6998:	00014f4c 	.word	0x00014f4c
    699c:	00014f58 	.word	0x00014f58

000069a0 <d_call_offset>:
    69a0:	b538      	push	{r3, r4, r5, lr}
    69a2:	4604      	mov	r4, r0
    69a4:	b929      	cbnz	r1, 69b2 <d_call_offset+0x12>
    69a6:	68c3      	ldr	r3, [r0, #12]
    69a8:	781a      	ldrb	r2, [r3, #0]
    69aa:	b132      	cbz	r2, 69ba <d_call_offset+0x1a>
    69ac:	1c5a      	adds	r2, r3, #1
    69ae:	60c2      	str	r2, [r0, #12]
    69b0:	7819      	ldrb	r1, [r3, #0]
    69b2:	2968      	cmp	r1, #104	; 0x68
    69b4:	d012      	beq.n	69dc <d_call_offset+0x3c>
    69b6:	2976      	cmp	r1, #118	; 0x76
    69b8:	d001      	beq.n	69be <d_call_offset+0x1e>
    69ba:	2000      	movs	r0, #0
    69bc:	bd38      	pop	{r3, r4, r5, pc}
    69be:	f104 050c 	add.w	r5, r4, #12
    69c2:	4628      	mov	r0, r5
    69c4:	f7ff ff1e 	bl	6804 <d_number.isra.0>
    69c8:	68e3      	ldr	r3, [r4, #12]
    69ca:	781a      	ldrb	r2, [r3, #0]
    69cc:	2a5f      	cmp	r2, #95	; 0x5f
    69ce:	d1f4      	bne.n	69ba <d_call_offset+0x1a>
    69d0:	3301      	adds	r3, #1
    69d2:	60e3      	str	r3, [r4, #12]
    69d4:	4628      	mov	r0, r5
    69d6:	f7ff ff15 	bl	6804 <d_number.isra.0>
    69da:	e003      	b.n	69e4 <d_call_offset+0x44>
    69dc:	f104 000c 	add.w	r0, r4, #12
    69e0:	f7ff ff10 	bl	6804 <d_number.isra.0>
    69e4:	68e3      	ldr	r3, [r4, #12]
    69e6:	781a      	ldrb	r2, [r3, #0]
    69e8:	2a5f      	cmp	r2, #95	; 0x5f
    69ea:	d1e6      	bne.n	69ba <d_call_offset+0x1a>
    69ec:	3301      	adds	r3, #1
    69ee:	60e3      	str	r3, [r4, #12]
    69f0:	2001      	movs	r0, #1
    69f2:	bd38      	pop	{r3, r4, r5, pc}

000069f4 <d_lookup_template_argument.isra.6>:
    69f4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    69f8:	4602      	mov	r2, r0
    69fa:	b1c3      	cbz	r3, 6a2e <d_lookup_template_argument.isra.6+0x3a>
    69fc:	685a      	ldr	r2, [r3, #4]
    69fe:	680b      	ldr	r3, [r1, #0]
    6a00:	6890      	ldr	r0, [r2, #8]
    6a02:	b170      	cbz	r0, 6a22 <d_lookup_template_argument.isra.6+0x2e>
    6a04:	7802      	ldrb	r2, [r0, #0]
    6a06:	2a2f      	cmp	r2, #47	; 0x2f
    6a08:	d10d      	bne.n	6a26 <d_lookup_template_argument.isra.6+0x32>
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	dc04      	bgt.n	6a18 <d_lookup_template_argument.isra.6+0x24>
    6a0e:	e009      	b.n	6a24 <d_lookup_template_argument.isra.6+0x30>
    6a10:	7802      	ldrb	r2, [r0, #0]
    6a12:	2a2f      	cmp	r2, #47	; 0x2f
    6a14:	d107      	bne.n	6a26 <d_lookup_template_argument.isra.6+0x32>
    6a16:	b143      	cbz	r3, 6a2a <d_lookup_template_argument.isra.6+0x36>
    6a18:	6880      	ldr	r0, [r0, #8]
    6a1a:	3b01      	subs	r3, #1
    6a1c:	2800      	cmp	r0, #0
    6a1e:	d1f7      	bne.n	6a10 <d_lookup_template_argument.isra.6+0x1c>
    6a20:	4770      	bx	lr
    6a22:	4770      	bx	lr
    6a24:	d001      	beq.n	6a2a <d_lookup_template_argument.isra.6+0x36>
    6a26:	2000      	movs	r0, #0
    6a28:	4770      	bx	lr
    6a2a:	6840      	ldr	r0, [r0, #4]
    6a2c:	4770      	bx	lr
    6a2e:	2101      	movs	r1, #1
    6a30:	4618      	mov	r0, r3
    6a32:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    6a36:	4770      	bx	lr

00006a38 <d_find_pack>:
    6a38:	b538      	push	{r3, r4, r5, lr}
    6a3a:	460c      	mov	r4, r1
    6a3c:	4605      	mov	r5, r0
    6a3e:	b391      	cbz	r1, 6aa6 <d_find_pack+0x6e>
    6a40:	7823      	ldrb	r3, [r4, #0]
    6a42:	2b4a      	cmp	r3, #74	; 0x4a
    6a44:	d827      	bhi.n	6a96 <d_find_pack+0x5e>
    6a46:	e8df f003 	tbb	[pc, r3]
    6a4a:	262e      	.short	0x262e
    6a4c:	30262626 	.word	0x30262626
    6a50:	262b2b2e 	.word	0x262b2b2e
    6a54:	26262626 	.word	0x26262626
    6a58:	26262626 	.word	0x26262626
    6a5c:	26262626 	.word	0x26262626
    6a60:	262e2626 	.word	0x262e2626
    6a64:	26262626 	.word	0x26262626
    6a68:	26262626 	.word	0x26262626
    6a6c:	26262626 	.word	0x26262626
    6a70:	26262e26 	.word	0x26262e26
    6a74:	26262626 	.word	0x26262626
    6a78:	2e262626 	.word	0x2e262626
    6a7c:	2626262b 	.word	0x2626262b
    6a80:	26262626 	.word	0x26262626
    6a84:	26262626 	.word	0x26262626
    6a88:	26262e26 	.word	0x26262e26
    6a8c:	262e2626 	.word	0x262e2626
    6a90:	2e26262e 	.word	0x2e26262e
    6a94:	2e          	.byte	0x2e
    6a95:	00          	.byte	0x00
    6a96:	4628      	mov	r0, r5
    6a98:	6861      	ldr	r1, [r4, #4]
    6a9a:	f7ff ffcd 	bl	6a38 <d_find_pack>
    6a9e:	b918      	cbnz	r0, 6aa8 <d_find_pack+0x70>
    6aa0:	68a4      	ldr	r4, [r4, #8]
    6aa2:	2c00      	cmp	r4, #0
    6aa4:	d1cc      	bne.n	6a40 <d_find_pack+0x8>
    6aa6:	2000      	movs	r0, #0
    6aa8:	bd38      	pop	{r3, r4, r5, pc}
    6aaa:	4628      	mov	r0, r5
    6aac:	1d21      	adds	r1, r4, #4
    6aae:	f7ff ffa1 	bl	69f4 <d_lookup_template_argument.isra.6>
    6ab2:	2800      	cmp	r0, #0
    6ab4:	d0f7      	beq.n	6aa6 <d_find_pack+0x6e>
    6ab6:	7803      	ldrb	r3, [r0, #0]
    6ab8:	2b2f      	cmp	r3, #47	; 0x2f
    6aba:	d1f4      	bne.n	6aa6 <d_find_pack+0x6e>
    6abc:	bd38      	pop	{r3, r4, r5, pc}
    6abe:	bf00      	nop

00006ac0 <d_growable_string_callback_adapter>:
    6ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ac2:	6853      	ldr	r3, [r2, #4]
    6ac4:	6894      	ldr	r4, [r2, #8]
    6ac6:	3301      	adds	r3, #1
    6ac8:	440b      	add	r3, r1
    6aca:	42a3      	cmp	r3, r4
    6acc:	b083      	sub	sp, #12
    6ace:	4615      	mov	r5, r2
    6ad0:	460e      	mov	r6, r1
    6ad2:	4607      	mov	r7, r0
    6ad4:	d813      	bhi.n	6afe <d_growable_string_callback_adapter+0x3e>
    6ad6:	68ec      	ldr	r4, [r5, #12]
    6ad8:	b10c      	cbz	r4, 6ade <d_growable_string_callback_adapter+0x1e>
    6ada:	b003      	add	sp, #12
    6adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ade:	e895 0009 	ldmia.w	r5, {r0, r3}
    6ae2:	4632      	mov	r2, r6
    6ae4:	4639      	mov	r1, r7
    6ae6:	4418      	add	r0, r3
    6ae8:	f008 fea2 	bl	f830 <memcpy>
    6aec:	e895 000c 	ldmia.w	r5, {r2, r3}
    6af0:	4432      	add	r2, r6
    6af2:	54d4      	strb	r4, [r2, r3]
    6af4:	686b      	ldr	r3, [r5, #4]
    6af6:	441e      	add	r6, r3
    6af8:	606e      	str	r6, [r5, #4]
    6afa:	b003      	add	sp, #12
    6afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6afe:	68d2      	ldr	r2, [r2, #12]
    6b00:	2a00      	cmp	r2, #0
    6b02:	d1ea      	bne.n	6ada <d_growable_string_callback_adapter+0x1a>
    6b04:	b91c      	cbnz	r4, 6b0e <d_growable_string_callback_adapter+0x4e>
    6b06:	2b02      	cmp	r3, #2
    6b08:	f04f 0402 	mov.w	r4, #2
    6b0c:	d902      	bls.n	6b14 <d_growable_string_callback_adapter+0x54>
    6b0e:	0064      	lsls	r4, r4, #1
    6b10:	42a3      	cmp	r3, r4
    6b12:	d8fc      	bhi.n	6b0e <d_growable_string_callback_adapter+0x4e>
    6b14:	6828      	ldr	r0, [r5, #0]
    6b16:	4621      	mov	r1, r4
    6b18:	f008 fffe 	bl	fb18 <realloc>
    6b1c:	4603      	mov	r3, r0
    6b1e:	b110      	cbz	r0, 6b26 <d_growable_string_callback_adapter+0x66>
    6b20:	6028      	str	r0, [r5, #0]
    6b22:	60ac      	str	r4, [r5, #8]
    6b24:	e7d7      	b.n	6ad6 <d_growable_string_callback_adapter+0x16>
    6b26:	6828      	ldr	r0, [r5, #0]
    6b28:	9301      	str	r3, [sp, #4]
    6b2a:	f008 fb61 	bl	f1f0 <free>
    6b2e:	9b01      	ldr	r3, [sp, #4]
    6b30:	602b      	str	r3, [r5, #0]
    6b32:	2201      	movs	r2, #1
    6b34:	606b      	str	r3, [r5, #4]
    6b36:	60ab      	str	r3, [r5, #8]
    6b38:	60ea      	str	r2, [r5, #12]
    6b3a:	e7ce      	b.n	6ada <d_growable_string_callback_adapter+0x1a>

00006b3c <d_expr_primary>:
    6b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b40:	68c3      	ldr	r3, [r0, #12]
    6b42:	781a      	ldrb	r2, [r3, #0]
    6b44:	2a4c      	cmp	r2, #76	; 0x4c
    6b46:	4605      	mov	r5, r0
    6b48:	d002      	beq.n	6b50 <d_expr_primary+0x14>
    6b4a:	2000      	movs	r0, #0
    6b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b50:	1c5a      	adds	r2, r3, #1
    6b52:	60c2      	str	r2, [r0, #12]
    6b54:	7859      	ldrb	r1, [r3, #1]
    6b56:	295f      	cmp	r1, #95	; 0x5f
    6b58:	d03a      	beq.n	6bd0 <d_expr_primary+0x94>
    6b5a:	295a      	cmp	r1, #90	; 0x5a
    6b5c:	d10d      	bne.n	6b7a <d_expr_primary+0x3e>
    6b5e:	3201      	adds	r2, #1
    6b60:	60ea      	str	r2, [r5, #12]
    6b62:	4628      	mov	r0, r5
    6b64:	2100      	movs	r1, #0
    6b66:	f000 fdf3 	bl	7750 <d_encoding>
    6b6a:	68ea      	ldr	r2, [r5, #12]
    6b6c:	7813      	ldrb	r3, [r2, #0]
    6b6e:	2b45      	cmp	r3, #69	; 0x45
    6b70:	d1eb      	bne.n	6b4a <d_expr_primary+0xe>
    6b72:	3201      	adds	r2, #1
    6b74:	60ea      	str	r2, [r5, #12]
    6b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b7a:	f000 fa03 	bl	6f84 <d_type>
    6b7e:	4607      	mov	r7, r0
    6b80:	2800      	cmp	r0, #0
    6b82:	d0e2      	beq.n	6b4a <d_expr_primary+0xe>
    6b84:	7803      	ldrb	r3, [r0, #0]
    6b86:	2b27      	cmp	r3, #39	; 0x27
    6b88:	d033      	beq.n	6bf2 <d_expr_primary+0xb6>
    6b8a:	68e9      	ldr	r1, [r5, #12]
    6b8c:	780b      	ldrb	r3, [r1, #0]
    6b8e:	2b6e      	cmp	r3, #110	; 0x6e
    6b90:	d028      	beq.n	6be4 <d_expr_primary+0xa8>
    6b92:	f04f 083b 	mov.w	r8, #59	; 0x3b
    6b96:	2b45      	cmp	r3, #69	; 0x45
    6b98:	d034      	beq.n	6c04 <d_expr_primary+0xc8>
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d0d5      	beq.n	6b4a <d_expr_primary+0xe>
    6b9e:	1c4b      	adds	r3, r1, #1
    6ba0:	e001      	b.n	6ba6 <d_expr_primary+0x6a>
    6ba2:	2c00      	cmp	r4, #0
    6ba4:	d0d1      	beq.n	6b4a <d_expr_primary+0xe>
    6ba6:	60eb      	str	r3, [r5, #12]
    6ba8:	461e      	mov	r6, r3
    6baa:	f813 4b01 	ldrb.w	r4, [r3], #1
    6bae:	2c45      	cmp	r4, #69	; 0x45
    6bb0:	d1f7      	bne.n	6ba2 <d_expr_primary+0x66>
    6bb2:	1a72      	subs	r2, r6, r1
    6bb4:	4628      	mov	r0, r5
    6bb6:	f7ff fc83 	bl	64c0 <d_make_name>
    6bba:	463a      	mov	r2, r7
    6bbc:	4603      	mov	r3, r0
    6bbe:	4641      	mov	r1, r8
    6bc0:	4628      	mov	r0, r5
    6bc2:	f7ff fc31 	bl	6428 <d_make_comp>
    6bc6:	68ea      	ldr	r2, [r5, #12]
    6bc8:	7813      	ldrb	r3, [r2, #0]
    6bca:	2b45      	cmp	r3, #69	; 0x45
    6bcc:	d1bd      	bne.n	6b4a <d_expr_primary+0xe>
    6bce:	e7d0      	b.n	6b72 <d_expr_primary+0x36>
    6bd0:	1c9a      	adds	r2, r3, #2
    6bd2:	60c2      	str	r2, [r0, #12]
    6bd4:	789b      	ldrb	r3, [r3, #2]
    6bd6:	2b5a      	cmp	r3, #90	; 0x5a
    6bd8:	d0c1      	beq.n	6b5e <d_expr_primary+0x22>
    6bda:	2b45      	cmp	r3, #69	; 0x45
    6bdc:	f04f 0000 	mov.w	r0, #0
    6be0:	d1b3      	bne.n	6b4a <d_expr_primary+0xe>
    6be2:	e7c6      	b.n	6b72 <d_expr_primary+0x36>
    6be4:	1c4a      	adds	r2, r1, #1
    6be6:	60ea      	str	r2, [r5, #12]
    6be8:	784b      	ldrb	r3, [r1, #1]
    6bea:	f04f 083c 	mov.w	r8, #60	; 0x3c
    6bee:	4611      	mov	r1, r2
    6bf0:	e7d1      	b.n	6b96 <d_expr_primary+0x5a>
    6bf2:	6843      	ldr	r3, [r0, #4]
    6bf4:	7c1a      	ldrb	r2, [r3, #16]
    6bf6:	2a00      	cmp	r2, #0
    6bf8:	d0c7      	beq.n	6b8a <d_expr_primary+0x4e>
    6bfa:	685a      	ldr	r2, [r3, #4]
    6bfc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    6bfe:	1a9b      	subs	r3, r3, r2
    6c00:	632b      	str	r3, [r5, #48]	; 0x30
    6c02:	e7c2      	b.n	6b8a <d_expr_primary+0x4e>
    6c04:	2200      	movs	r2, #0
    6c06:	e7d5      	b.n	6bb4 <d_expr_primary+0x78>

00006c08 <d_template_args>:
    6c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c0a:	68c1      	ldr	r1, [r0, #12]
    6c0c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    6c0e:	780b      	ldrb	r3, [r1, #0]
    6c10:	3b49      	subs	r3, #73	; 0x49
    6c12:	2b01      	cmp	r3, #1
    6c14:	b083      	sub	sp, #12
    6c16:	4604      	mov	r4, r0
    6c18:	d81e      	bhi.n	6c58 <d_template_args+0x50>
    6c1a:	1c4a      	adds	r2, r1, #1
    6c1c:	60c2      	str	r2, [r0, #12]
    6c1e:	784b      	ldrb	r3, [r1, #1]
    6c20:	2b45      	cmp	r3, #69	; 0x45
    6c22:	d045      	beq.n	6cb0 <d_template_args+0xa8>
    6c24:	ae02      	add	r6, sp, #8
    6c26:	2100      	movs	r1, #0
    6c28:	f846 1d04 	str.w	r1, [r6, #-4]!
    6c2c:	3b49      	subs	r3, #73	; 0x49
    6c2e:	2b0f      	cmp	r3, #15
    6c30:	d835      	bhi.n	6c9e <d_template_args+0x96>
    6c32:	e8df f003 	tbb	[pc, r3]
    6c36:	2f2f      	.short	0x2f2f
    6c38:	34341434 	.word	0x34341434
    6c3c:	34343434 	.word	0x34343434
    6c40:	34343434 	.word	0x34343434
    6c44:	0834      	.short	0x0834
    6c46:	3201      	adds	r2, #1
    6c48:	60e2      	str	r2, [r4, #12]
    6c4a:	4620      	mov	r0, r4
    6c4c:	f001 fa6c 	bl	8128 <d_expression>
    6c50:	68e3      	ldr	r3, [r4, #12]
    6c52:	781a      	ldrb	r2, [r3, #0]
    6c54:	2a45      	cmp	r2, #69	; 0x45
    6c56:	d027      	beq.n	6ca8 <d_template_args+0xa0>
    6c58:	2000      	movs	r0, #0
    6c5a:	b003      	add	sp, #12
    6c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c5e:	4620      	mov	r0, r4
    6c60:	f7ff ff6c 	bl	6b3c <d_expr_primary>
    6c64:	4605      	mov	r5, r0
    6c66:	4620      	mov	r0, r4
    6c68:	212f      	movs	r1, #47	; 0x2f
    6c6a:	462a      	mov	r2, r5
    6c6c:	2300      	movs	r3, #0
    6c6e:	2d00      	cmp	r5, #0
    6c70:	d0f2      	beq.n	6c58 <d_template_args+0x50>
    6c72:	f7ff fbd9 	bl	6428 <d_make_comp>
    6c76:	6030      	str	r0, [r6, #0]
    6c78:	f100 0608 	add.w	r6, r0, #8
    6c7c:	2800      	cmp	r0, #0
    6c7e:	d0eb      	beq.n	6c58 <d_template_args+0x50>
    6c80:	68e2      	ldr	r2, [r4, #12]
    6c82:	7813      	ldrb	r3, [r2, #0]
    6c84:	2b45      	cmp	r3, #69	; 0x45
    6c86:	d1d1      	bne.n	6c2c <d_template_args+0x24>
    6c88:	9801      	ldr	r0, [sp, #4]
    6c8a:	62e7      	str	r7, [r4, #44]	; 0x2c
    6c8c:	3201      	adds	r2, #1
    6c8e:	60e2      	str	r2, [r4, #12]
    6c90:	b003      	add	sp, #12
    6c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c94:	4620      	mov	r0, r4
    6c96:	f7ff ffb7 	bl	6c08 <d_template_args>
    6c9a:	4605      	mov	r5, r0
    6c9c:	e7e3      	b.n	6c66 <d_template_args+0x5e>
    6c9e:	4620      	mov	r0, r4
    6ca0:	f000 f970 	bl	6f84 <d_type>
    6ca4:	4605      	mov	r5, r0
    6ca6:	e7de      	b.n	6c66 <d_template_args+0x5e>
    6ca8:	3301      	adds	r3, #1
    6caa:	60e3      	str	r3, [r4, #12]
    6cac:	4605      	mov	r5, r0
    6cae:	e7da      	b.n	6c66 <d_template_args+0x5e>
    6cb0:	3102      	adds	r1, #2
    6cb2:	2200      	movs	r2, #0
    6cb4:	60c1      	str	r1, [r0, #12]
    6cb6:	4613      	mov	r3, r2
    6cb8:	212f      	movs	r1, #47	; 0x2f
    6cba:	b003      	add	sp, #12
    6cbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6cc0:	f7ff bbb2 	b.w	6428 <d_make_comp>

00006cc4 <d_name>:
    6cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cc8:	68c2      	ldr	r2, [r0, #12]
    6cca:	7813      	ldrb	r3, [r2, #0]
    6ccc:	3b4c      	subs	r3, #76	; 0x4c
    6cce:	b082      	sub	sp, #8
    6cd0:	4605      	mov	r5, r0
    6cd2:	2b0e      	cmp	r3, #14
    6cd4:	d86d      	bhi.n	6db2 <d_name+0xee>
    6cd6:	e8df f003 	tbb	[pc, r3]
    6cda:	6c2c      	.short	0x6c2c
    6cdc:	6c6c6c31 	.word	0x6c6c6c31
    6ce0:	2c6c176c 	.word	0x2c6c176c
    6ce4:	6c6c6c6c 	.word	0x6c6c6c6c
    6ce8:	08          	.byte	0x08
    6ce9:	00          	.byte	0x00
    6cea:	3201      	adds	r2, #1
    6cec:	2100      	movs	r1, #0
    6cee:	60c2      	str	r2, [r0, #12]
    6cf0:	f000 fd2e 	bl	7750 <d_encoding>
    6cf4:	68eb      	ldr	r3, [r5, #12]
    6cf6:	7819      	ldrb	r1, [r3, #0]
    6cf8:	2945      	cmp	r1, #69	; 0x45
    6cfa:	4606      	mov	r6, r0
    6cfc:	f000 80d1 	beq.w	6ea2 <d_name+0x1de>
    6d00:	2000      	movs	r0, #0
    6d02:	b002      	add	sp, #8
    6d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d08:	7853      	ldrb	r3, [r2, #1]
    6d0a:	2b74      	cmp	r3, #116	; 0x74
    6d0c:	d069      	beq.n	6de2 <d_name+0x11e>
    6d0e:	2100      	movs	r1, #0
    6d10:	f7ff fcaa 	bl	6668 <d_substitution>
    6d14:	68eb      	ldr	r3, [r5, #12]
    6d16:	781b      	ldrb	r3, [r3, #0]
    6d18:	2b49      	cmp	r3, #73	; 0x49
    6d1a:	4604      	mov	r4, r0
    6d1c:	d150      	bne.n	6dc0 <d_name+0xfc>
    6d1e:	4628      	mov	r0, r5
    6d20:	f7ff ff72 	bl	6c08 <d_template_args>
    6d24:	4622      	mov	r2, r4
    6d26:	4603      	mov	r3, r0
    6d28:	2104      	movs	r1, #4
    6d2a:	4628      	mov	r0, r5
    6d2c:	f7ff fb7c 	bl	6428 <d_make_comp>
    6d30:	e001      	b.n	6d36 <d_name+0x72>
    6d32:	f001 f8bb 	bl	7eac <d_unqualified_name>
    6d36:	b002      	add	sp, #8
    6d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d3c:	3201      	adds	r2, #1
    6d3e:	60c2      	str	r2, [r0, #12]
    6d40:	a901      	add	r1, sp, #4
    6d42:	2201      	movs	r2, #1
    6d44:	f7ff fbd6 	bl	64f4 <d_cv_qualifiers>
    6d48:	4607      	mov	r7, r0
    6d4a:	2800      	cmp	r0, #0
    6d4c:	d0d8      	beq.n	6d00 <d_name+0x3c>
    6d4e:	4628      	mov	r0, r5
    6d50:	2100      	movs	r1, #0
    6d52:	f7ff fc29 	bl	65a8 <d_ref_qualifier>
    6d56:	68eb      	ldr	r3, [r5, #12]
    6d58:	781c      	ldrb	r4, [r3, #0]
    6d5a:	4680      	mov	r8, r0
    6d5c:	2600      	movs	r6, #0
    6d5e:	2c00      	cmp	r4, #0
    6d60:	f000 808e 	beq.w	6e80 <d_name+0x1bc>
    6d64:	2c44      	cmp	r4, #68	; 0x44
    6d66:	f000 8082 	beq.w	6e6e <d_name+0x1aa>
    6d6a:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    6d6e:	b2d2      	uxtb	r2, r2
    6d70:	2a09      	cmp	r2, #9
    6d72:	d95c      	bls.n	6e2e <d_name+0x16a>
    6d74:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    6d78:	b2d2      	uxtb	r2, r2
    6d7a:	2a19      	cmp	r2, #25
    6d7c:	d957      	bls.n	6e2e <d_name+0x16a>
    6d7e:	2c43      	cmp	r4, #67	; 0x43
    6d80:	d055      	beq.n	6e2e <d_name+0x16a>
    6d82:	2c55      	cmp	r4, #85	; 0x55
    6d84:	d053      	beq.n	6e2e <d_name+0x16a>
    6d86:	2c4c      	cmp	r4, #76	; 0x4c
    6d88:	d051      	beq.n	6e2e <d_name+0x16a>
    6d8a:	2c53      	cmp	r4, #83	; 0x53
    6d8c:	f000 8084 	beq.w	6e98 <d_name+0x1d4>
    6d90:	2c49      	cmp	r4, #73	; 0x49
    6d92:	d07a      	beq.n	6e8a <d_name+0x1c6>
    6d94:	2c54      	cmp	r4, #84	; 0x54
    6d96:	f000 80b3 	beq.w	6f00 <d_name+0x23c>
    6d9a:	2c45      	cmp	r4, #69	; 0x45
    6d9c:	f000 80d8 	beq.w	6f50 <d_name+0x28c>
    6da0:	2c4d      	cmp	r4, #77	; 0x4d
    6da2:	d16d      	bne.n	6e80 <d_name+0x1bc>
    6da4:	2e00      	cmp	r6, #0
    6da6:	d06b      	beq.n	6e80 <d_name+0x1bc>
    6da8:	1c5a      	adds	r2, r3, #1
    6daa:	60ea      	str	r2, [r5, #12]
    6dac:	785c      	ldrb	r4, [r3, #1]
    6dae:	4613      	mov	r3, r2
    6db0:	e7d5      	b.n	6d5e <d_name+0x9a>
    6db2:	f001 f87b 	bl	7eac <d_unqualified_name>
    6db6:	68eb      	ldr	r3, [r5, #12]
    6db8:	781b      	ldrb	r3, [r3, #0]
    6dba:	2b49      	cmp	r3, #73	; 0x49
    6dbc:	4604      	mov	r4, r0
    6dbe:	d003      	beq.n	6dc8 <d_name+0x104>
    6dc0:	4620      	mov	r0, r4
    6dc2:	b002      	add	sp, #8
    6dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dc8:	2800      	cmp	r0, #0
    6dca:	d099      	beq.n	6d00 <d_name+0x3c>
    6dcc:	6a2b      	ldr	r3, [r5, #32]
    6dce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6dd0:	4293      	cmp	r3, r2
    6dd2:	da95      	bge.n	6d00 <d_name+0x3c>
    6dd4:	69ea      	ldr	r2, [r5, #28]
    6dd6:	1c59      	adds	r1, r3, #1
    6dd8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6ddc:	4628      	mov	r0, r5
    6dde:	6229      	str	r1, [r5, #32]
    6de0:	e79e      	b.n	6d20 <d_name+0x5c>
    6de2:	3202      	adds	r2, #2
    6de4:	4965      	ldr	r1, [pc, #404]	; (6f7c <d_name+0x2b8>)
    6de6:	60c2      	str	r2, [r0, #12]
    6de8:	2203      	movs	r2, #3
    6dea:	f7ff fb69 	bl	64c0 <d_make_name>
    6dee:	4604      	mov	r4, r0
    6df0:	4628      	mov	r0, r5
    6df2:	f001 f85b 	bl	7eac <d_unqualified_name>
    6df6:	4622      	mov	r2, r4
    6df8:	4603      	mov	r3, r0
    6dfa:	2101      	movs	r1, #1
    6dfc:	4628      	mov	r0, r5
    6dfe:	f7ff fb13 	bl	6428 <d_make_comp>
    6e02:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    6e04:	68eb      	ldr	r3, [r5, #12]
    6e06:	3203      	adds	r2, #3
    6e08:	632a      	str	r2, [r5, #48]	; 0x30
    6e0a:	781b      	ldrb	r3, [r3, #0]
    6e0c:	2b49      	cmp	r3, #73	; 0x49
    6e0e:	4604      	mov	r4, r0
    6e10:	d1d6      	bne.n	6dc0 <d_name+0xfc>
    6e12:	2800      	cmp	r0, #0
    6e14:	f43f af74 	beq.w	6d00 <d_name+0x3c>
    6e18:	6a2b      	ldr	r3, [r5, #32]
    6e1a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6e1c:	4293      	cmp	r3, r2
    6e1e:	f6bf af6f 	bge.w	6d00 <d_name+0x3c>
    6e22:	69ea      	ldr	r2, [r5, #28]
    6e24:	1c59      	adds	r1, r3, #1
    6e26:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6e2a:	6229      	str	r1, [r5, #32]
    6e2c:	e777      	b.n	6d1e <d_name+0x5a>
    6e2e:	4628      	mov	r0, r5
    6e30:	f001 f83c 	bl	7eac <d_unqualified_name>
    6e34:	b1ce      	cbz	r6, 6e6a <d_name+0x1a6>
    6e36:	2101      	movs	r1, #1
    6e38:	4632      	mov	r2, r6
    6e3a:	4603      	mov	r3, r0
    6e3c:	4628      	mov	r0, r5
    6e3e:	f7ff faf3 	bl	6428 <d_make_comp>
    6e42:	4606      	mov	r6, r0
    6e44:	68eb      	ldr	r3, [r5, #12]
    6e46:	2c53      	cmp	r4, #83	; 0x53
    6e48:	781c      	ldrb	r4, [r3, #0]
    6e4a:	d088      	beq.n	6d5e <d_name+0x9a>
    6e4c:	2c45      	cmp	r4, #69	; 0x45
    6e4e:	d08c      	beq.n	6d6a <d_name+0xa6>
    6e50:	b1b6      	cbz	r6, 6e80 <d_name+0x1bc>
    6e52:	6a2b      	ldr	r3, [r5, #32]
    6e54:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6e56:	4293      	cmp	r3, r2
    6e58:	da12      	bge.n	6e80 <d_name+0x1bc>
    6e5a:	69ea      	ldr	r2, [r5, #28]
    6e5c:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    6e60:	1c5a      	adds	r2, r3, #1
    6e62:	68eb      	ldr	r3, [r5, #12]
    6e64:	622a      	str	r2, [r5, #32]
    6e66:	781c      	ldrb	r4, [r3, #0]
    6e68:	e779      	b.n	6d5e <d_name+0x9a>
    6e6a:	4606      	mov	r6, r0
    6e6c:	e7ea      	b.n	6e44 <d_name+0x180>
    6e6e:	785b      	ldrb	r3, [r3, #1]
    6e70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6e74:	2b54      	cmp	r3, #84	; 0x54
    6e76:	d1da      	bne.n	6e2e <d_name+0x16a>
    6e78:	4628      	mov	r0, r5
    6e7a:	f000 f883 	bl	6f84 <d_type>
    6e7e:	e7d9      	b.n	6e34 <d_name+0x170>
    6e80:	2000      	movs	r0, #0
    6e82:	6038      	str	r0, [r7, #0]
    6e84:	b002      	add	sp, #8
    6e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e8a:	2e00      	cmp	r6, #0
    6e8c:	d0f8      	beq.n	6e80 <d_name+0x1bc>
    6e8e:	4628      	mov	r0, r5
    6e90:	f7ff feba 	bl	6c08 <d_template_args>
    6e94:	2104      	movs	r1, #4
    6e96:	e7cf      	b.n	6e38 <d_name+0x174>
    6e98:	4628      	mov	r0, r5
    6e9a:	2101      	movs	r1, #1
    6e9c:	f7ff fbe4 	bl	6668 <d_substitution>
    6ea0:	e7c8      	b.n	6e34 <d_name+0x170>
    6ea2:	1c5a      	adds	r2, r3, #1
    6ea4:	60ea      	str	r2, [r5, #12]
    6ea6:	785a      	ldrb	r2, [r3, #1]
    6ea8:	2a73      	cmp	r2, #115	; 0x73
    6eaa:	d03d      	beq.n	6f28 <d_name+0x264>
    6eac:	2a64      	cmp	r2, #100	; 0x64
    6eae:	d02b      	beq.n	6f08 <d_name+0x244>
    6eb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    6eb4:	4628      	mov	r0, r5
    6eb6:	f7ff ff05 	bl	6cc4 <d_name>
    6eba:	4604      	mov	r4, r0
    6ebc:	b120      	cbz	r0, 6ec8 <d_name+0x204>
    6ebe:	7803      	ldrb	r3, [r0, #0]
    6ec0:	2b44      	cmp	r3, #68	; 0x44
    6ec2:	d001      	beq.n	6ec8 <d_name+0x204>
    6ec4:	2b46      	cmp	r3, #70	; 0x46
    6ec6:	d129      	bne.n	6f1c <d_name+0x258>
    6ec8:	1c7b      	adds	r3, r7, #1
    6eca:	d025      	beq.n	6f18 <d_name+0x254>
    6ecc:	696b      	ldr	r3, [r5, #20]
    6ece:	69aa      	ldr	r2, [r5, #24]
    6ed0:	4293      	cmp	r3, r2
    6ed2:	da13      	bge.n	6efc <d_name+0x238>
    6ed4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6ed8:	6929      	ldr	r1, [r5, #16]
    6eda:	3301      	adds	r3, #1
    6edc:	0092      	lsls	r2, r2, #2
    6ede:	616b      	str	r3, [r5, #20]
    6ee0:	188b      	adds	r3, r1, r2
    6ee2:	d003      	beq.n	6eec <d_name+0x228>
    6ee4:	2045      	movs	r0, #69	; 0x45
    6ee6:	5488      	strb	r0, [r1, r2]
    6ee8:	609f      	str	r7, [r3, #8]
    6eea:	605c      	str	r4, [r3, #4]
    6eec:	4628      	mov	r0, r5
    6eee:	4632      	mov	r2, r6
    6ef0:	2102      	movs	r1, #2
    6ef2:	f7ff fa99 	bl	6428 <d_make_comp>
    6ef6:	b002      	add	sp, #8
    6ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6efc:	2300      	movs	r3, #0
    6efe:	e7f5      	b.n	6eec <d_name+0x228>
    6f00:	4628      	mov	r0, r5
    6f02:	f7ff fcd9 	bl	68b8 <d_template_param>
    6f06:	e795      	b.n	6e34 <d_name+0x170>
    6f08:	3302      	adds	r3, #2
    6f0a:	60eb      	str	r3, [r5, #12]
    6f0c:	4628      	mov	r0, r5
    6f0e:	f7ff fcbb 	bl	6888 <d_compact_number>
    6f12:	1e07      	subs	r7, r0, #0
    6f14:	dace      	bge.n	6eb4 <d_name+0x1f0>
    6f16:	e6f3      	b.n	6d00 <d_name+0x3c>
    6f18:	4623      	mov	r3, r4
    6f1a:	e7e7      	b.n	6eec <d_name+0x228>
    6f1c:	4628      	mov	r0, r5
    6f1e:	f7ff fced 	bl	68fc <d_discriminator>
    6f22:	2800      	cmp	r0, #0
    6f24:	d1d0      	bne.n	6ec8 <d_name+0x204>
    6f26:	e6eb      	b.n	6d00 <d_name+0x3c>
    6f28:	3302      	adds	r3, #2
    6f2a:	60eb      	str	r3, [r5, #12]
    6f2c:	4628      	mov	r0, r5
    6f2e:	f7ff fce5 	bl	68fc <d_discriminator>
    6f32:	2800      	cmp	r0, #0
    6f34:	f43f aee4 	beq.w	6d00 <d_name+0x3c>
    6f38:	4628      	mov	r0, r5
    6f3a:	4911      	ldr	r1, [pc, #68]	; (6f80 <d_name+0x2bc>)
    6f3c:	220e      	movs	r2, #14
    6f3e:	f7ff fabf 	bl	64c0 <d_make_name>
    6f42:	4632      	mov	r2, r6
    6f44:	4603      	mov	r3, r0
    6f46:	2102      	movs	r1, #2
    6f48:	4628      	mov	r0, r5
    6f4a:	f7ff fa6d 	bl	6428 <d_make_comp>
    6f4e:	e6f2      	b.n	6d36 <d_name+0x72>
    6f50:	603e      	str	r6, [r7, #0]
    6f52:	2e00      	cmp	r6, #0
    6f54:	f43f aed4 	beq.w	6d00 <d_name+0x3c>
    6f58:	f1b8 0f00 	cmp.w	r8, #0
    6f5c:	d004      	beq.n	6f68 <d_name+0x2a4>
    6f5e:	9b01      	ldr	r3, [sp, #4]
    6f60:	f8c8 3004 	str.w	r3, [r8, #4]
    6f64:	f8cd 8004 	str.w	r8, [sp, #4]
    6f68:	68eb      	ldr	r3, [r5, #12]
    6f6a:	781a      	ldrb	r2, [r3, #0]
    6f6c:	2a45      	cmp	r2, #69	; 0x45
    6f6e:	f47f aec7 	bne.w	6d00 <d_name+0x3c>
    6f72:	3301      	adds	r3, #1
    6f74:	60eb      	str	r3, [r5, #12]
    6f76:	9801      	ldr	r0, [sp, #4]
    6f78:	e6dd      	b.n	6d36 <d_name+0x72>
    6f7a:	bf00      	nop
    6f7c:	00014f80 	.word	0x00014f80
    6f80:	00014f70 	.word	0x00014f70

00006f84 <d_type>:
    6f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f86:	68c2      	ldr	r2, [r0, #12]
    6f88:	7813      	ldrb	r3, [r2, #0]
    6f8a:	2b72      	cmp	r3, #114	; 0x72
    6f8c:	b083      	sub	sp, #12
    6f8e:	4604      	mov	r4, r0
    6f90:	d054      	beq.n	703c <d_type+0xb8>
    6f92:	2b56      	cmp	r3, #86	; 0x56
    6f94:	d052      	beq.n	703c <d_type+0xb8>
    6f96:	2b4b      	cmp	r3, #75	; 0x4b
    6f98:	d050      	beq.n	703c <d_type+0xb8>
    6f9a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    6f9e:	294a      	cmp	r1, #74	; 0x4a
    6fa0:	d87d      	bhi.n	709e <d_type+0x11a>
    6fa2:	e8df f011 	tbh	[pc, r1, lsl #1]
    6fa6:	00a2      	.short	0x00a2
    6fa8:	00a200a2 	.word	0x00a200a2
    6fac:	00a200a2 	.word	0x00a200a2
    6fb0:	00a200a2 	.word	0x00a200a2
    6fb4:	00a200a2 	.word	0x00a200a2
    6fb8:	007c00a2 	.word	0x007c00a2
    6fbc:	007c007c 	.word	0x007c007c
    6fc0:	007c007c 	.word	0x007c007c
    6fc4:	007c007c 	.word	0x007c007c
    6fc8:	007c00a7 	.word	0x007c00a7
    6fcc:	00ff00cf 	.word	0x00ff00cf
    6fd0:	00dc007c 	.word	0x00dc007c
    6fd4:	007c00f2 	.word	0x007c00f2
    6fd8:	007c007c 	.word	0x007c007c
    6fdc:	007c007c 	.word	0x007c007c
    6fe0:	00a20171 	.word	0x00a20171
    6fe4:	01a701c1 	.word	0x01a701c1
    6fe8:	01b4007c 	.word	0x01b4007c
    6fec:	01ef01ce 	.word	0x01ef01ce
    6ff0:	007c0207 	.word	0x007c0207
    6ff4:	007c007c 	.word	0x007c007c
    6ff8:	00a2007c 	.word	0x00a2007c
    6ffc:	007c007c 	.word	0x007c007c
    7000:	007c007c 	.word	0x007c007c
    7004:	007c007c 	.word	0x007c007c
    7008:	02180218 	.word	0x02180218
    700c:	02180218 	.word	0x02180218
    7010:	02180218 	.word	0x02180218
    7014:	02180218 	.word	0x02180218
    7018:	02180218 	.word	0x02180218
    701c:	0218007c 	.word	0x0218007c
    7020:	02180218 	.word	0x02180218
    7024:	007c0218 	.word	0x007c0218
    7028:	007c007c 	.word	0x007c007c
    702c:	02180218 	.word	0x02180218
    7030:	02180089 	.word	0x02180089
    7034:	02180218 	.word	0x02180218
    7038:	02180218 	.word	0x02180218
    703c:	4620      	mov	r0, r4
    703e:	a901      	add	r1, sp, #4
    7040:	2200      	movs	r2, #0
    7042:	f7ff fa57 	bl	64f4 <d_cv_qualifiers>
    7046:	4605      	mov	r5, r0
    7048:	b348      	cbz	r0, 709e <d_type+0x11a>
    704a:	4620      	mov	r0, r4
    704c:	f7ff ff9a 	bl	6f84 <d_type>
    7050:	6028      	str	r0, [r5, #0]
    7052:	b320      	cbz	r0, 709e <d_type+0x11a>
    7054:	7802      	ldrb	r2, [r0, #0]
    7056:	3a1f      	subs	r2, #31
    7058:	2a01      	cmp	r2, #1
    705a:	d923      	bls.n	70a4 <d_type+0x120>
    705c:	9a01      	ldr	r2, [sp, #4]
    705e:	b1f2      	cbz	r2, 709e <d_type+0x11a>
    7060:	6a23      	ldr	r3, [r4, #32]
    7062:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7064:	428b      	cmp	r3, r1
    7066:	da1a      	bge.n	709e <d_type+0x11a>
    7068:	69e1      	ldr	r1, [r4, #28]
    706a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    706e:	9801      	ldr	r0, [sp, #4]
    7070:	1c5d      	adds	r5, r3, #1
    7072:	6225      	str	r5, [r4, #32]
    7074:	b003      	add	sp, #12
    7076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7078:	4620      	mov	r0, r4
    707a:	f001 f855 	bl	8128 <d_expression>
    707e:	2141      	movs	r1, #65	; 0x41
    7080:	4602      	mov	r2, r0
    7082:	2300      	movs	r3, #0
    7084:	4620      	mov	r0, r4
    7086:	f7ff f9cf 	bl	6428 <d_make_comp>
    708a:	9001      	str	r0, [sp, #4]
    708c:	b138      	cbz	r0, 709e <d_type+0x11a>
    708e:	68e3      	ldr	r3, [r4, #12]
    7090:	781a      	ldrb	r2, [r3, #0]
    7092:	b122      	cbz	r2, 709e <d_type+0x11a>
    7094:	1c5a      	adds	r2, r3, #1
    7096:	60e2      	str	r2, [r4, #12]
    7098:	781b      	ldrb	r3, [r3, #0]
    709a:	2b45      	cmp	r3, #69	; 0x45
    709c:	d01a      	beq.n	70d4 <d_type+0x150>
    709e:	2000      	movs	r0, #0
    70a0:	b003      	add	sp, #12
    70a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70a4:	9a01      	ldr	r2, [sp, #4]
    70a6:	6841      	ldr	r1, [r0, #4]
    70a8:	6042      	str	r2, [r0, #4]
    70aa:	682b      	ldr	r3, [r5, #0]
    70ac:	9301      	str	r3, [sp, #4]
    70ae:	6029      	str	r1, [r5, #0]
    70b0:	9a01      	ldr	r2, [sp, #4]
    70b2:	2a00      	cmp	r2, #0
    70b4:	d1d4      	bne.n	7060 <d_type+0xdc>
    70b6:	e7f2      	b.n	709e <d_type+0x11a>
    70b8:	3201      	adds	r2, #1
    70ba:	60e2      	str	r2, [r4, #12]
    70bc:	4620      	mov	r0, r4
    70be:	f7ff fc2d 	bl	691c <d_source_name>
    70c2:	2128      	movs	r1, #40	; 0x28
    70c4:	4602      	mov	r2, r0
    70c6:	2300      	movs	r3, #0
    70c8:	4620      	mov	r0, r4
    70ca:	f7ff f9ad 	bl	6428 <d_make_comp>
    70ce:	9001      	str	r0, [sp, #4]
    70d0:	2800      	cmp	r0, #0
    70d2:	d0e4      	beq.n	709e <d_type+0x11a>
    70d4:	6a23      	ldr	r3, [r4, #32]
    70d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    70d8:	4293      	cmp	r3, r2
    70da:	dae0      	bge.n	709e <d_type+0x11a>
    70dc:	69e2      	ldr	r2, [r4, #28]
    70de:	1c59      	adds	r1, r3, #1
    70e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    70e4:	9801      	ldr	r0, [sp, #4]
    70e6:	6221      	str	r1, [r4, #32]
    70e8:	e7da      	b.n	70a0 <d_type+0x11c>
    70ea:	4620      	mov	r0, r4
    70ec:	f7ff fdea 	bl	6cc4 <d_name>
    70f0:	9001      	str	r0, [sp, #4]
    70f2:	e7ed      	b.n	70d0 <d_type+0x14c>
    70f4:	1c51      	adds	r1, r2, #1
    70f6:	60e1      	str	r1, [r4, #12]
    70f8:	7853      	ldrb	r3, [r2, #1]
    70fa:	2b5f      	cmp	r3, #95	; 0x5f
    70fc:	f000 8279 	beq.w	75f2 <d_type+0x66e>
    7100:	3b30      	subs	r3, #48	; 0x30
    7102:	2b09      	cmp	r3, #9
    7104:	f200 827e 	bhi.w	7604 <d_type+0x680>
    7108:	460a      	mov	r2, r1
    710a:	3201      	adds	r2, #1
    710c:	60e2      	str	r2, [r4, #12]
    710e:	7813      	ldrb	r3, [r2, #0]
    7110:	3b30      	subs	r3, #48	; 0x30
    7112:	2b09      	cmp	r3, #9
    7114:	d9f9      	bls.n	710a <d_type+0x186>
    7116:	1a52      	subs	r2, r2, r1
    7118:	4620      	mov	r0, r4
    711a:	f7ff f9d1 	bl	64c0 <d_make_name>
    711e:	4605      	mov	r5, r0
    7120:	2800      	cmp	r0, #0
    7122:	d030      	beq.n	7186 <d_type+0x202>
    7124:	68e1      	ldr	r1, [r4, #12]
    7126:	780b      	ldrb	r3, [r1, #0]
    7128:	2b5f      	cmp	r3, #95	; 0x5f
    712a:	d12c      	bne.n	7186 <d_type+0x202>
    712c:	3101      	adds	r1, #1
    712e:	60e1      	str	r1, [r4, #12]
    7130:	4620      	mov	r0, r4
    7132:	f7ff ff27 	bl	6f84 <d_type>
    7136:	462a      	mov	r2, r5
    7138:	4603      	mov	r3, r0
    713a:	212a      	movs	r1, #42	; 0x2a
    713c:	4620      	mov	r0, r4
    713e:	f7ff f973 	bl	6428 <d_make_comp>
    7142:	e7d5      	b.n	70f0 <d_type+0x16c>
    7144:	3201      	adds	r2, #1
    7146:	60e2      	str	r2, [r4, #12]
    7148:	4620      	mov	r0, r4
    714a:	f7ff ff1b 	bl	6f84 <d_type>
    714e:	2125      	movs	r1, #37	; 0x25
    7150:	4602      	mov	r2, r0
    7152:	2300      	movs	r3, #0
    7154:	4620      	mov	r0, r4
    7156:	f7ff f967 	bl	6428 <d_make_comp>
    715a:	9001      	str	r0, [sp, #4]
    715c:	e7b8      	b.n	70d0 <d_type+0x14c>
    715e:	1c53      	adds	r3, r2, #1
    7160:	60e3      	str	r3, [r4, #12]
    7162:	7853      	ldrb	r3, [r2, #1]
    7164:	2b59      	cmp	r3, #89	; 0x59
    7166:	bf04      	itt	eq
    7168:	3202      	addeq	r2, #2
    716a:	60e2      	streq	r2, [r4, #12]
    716c:	2101      	movs	r1, #1
    716e:	4620      	mov	r0, r4
    7170:	f000 fad0 	bl	7714 <d_bare_function_type>
    7174:	4601      	mov	r1, r0
    7176:	4620      	mov	r0, r4
    7178:	f7ff fa16 	bl	65a8 <d_ref_qualifier>
    717c:	68e3      	ldr	r3, [r4, #12]
    717e:	781a      	ldrb	r2, [r3, #0]
    7180:	2a45      	cmp	r2, #69	; 0x45
    7182:	f000 823c 	beq.w	75fe <d_type+0x67a>
    7186:	2000      	movs	r0, #0
    7188:	e7b2      	b.n	70f0 <d_type+0x16c>
    718a:	3201      	adds	r2, #1
    718c:	60e2      	str	r2, [r4, #12]
    718e:	4620      	mov	r0, r4
    7190:	f7ff fef8 	bl	6f84 <d_type>
    7194:	2126      	movs	r1, #38	; 0x26
    7196:	4602      	mov	r2, r0
    7198:	2300      	movs	r3, #0
    719a:	4620      	mov	r0, r4
    719c:	f7ff f944 	bl	6428 <d_make_comp>
    71a0:	9001      	str	r0, [sp, #4]
    71a2:	e795      	b.n	70d0 <d_type+0x14c>
    71a4:	1c53      	adds	r3, r2, #1
    71a6:	60e3      	str	r3, [r4, #12]
    71a8:	7853      	ldrb	r3, [r2, #1]
    71aa:	2b00      	cmp	r3, #0
    71ac:	f43f af77 	beq.w	709e <d_type+0x11a>
    71b0:	1c93      	adds	r3, r2, #2
    71b2:	60e3      	str	r3, [r4, #12]
    71b4:	7853      	ldrb	r3, [r2, #1]
    71b6:	3b46      	subs	r3, #70	; 0x46
    71b8:	2b30      	cmp	r3, #48	; 0x30
    71ba:	f63f af70 	bhi.w	709e <d_type+0x11a>
    71be:	a101      	add	r1, pc, #4	; (adr r1, 71c4 <d_type+0x240>)
    71c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    71c4:	000074dd 	.word	0x000074dd
    71c8:	0000709f 	.word	0x0000709f
    71cc:	0000709f 	.word	0x0000709f
    71d0:	0000709f 	.word	0x0000709f
    71d4:	0000709f 	.word	0x0000709f
    71d8:	0000709f 	.word	0x0000709f
    71dc:	0000709f 	.word	0x0000709f
    71e0:	0000709f 	.word	0x0000709f
    71e4:	0000709f 	.word	0x0000709f
    71e8:	0000709f 	.word	0x0000709f
    71ec:	0000709f 	.word	0x0000709f
    71f0:	0000709f 	.word	0x0000709f
    71f4:	0000709f 	.word	0x0000709f
    71f8:	0000709f 	.word	0x0000709f
    71fc:	00007079 	.word	0x00007079
    7200:	0000709f 	.word	0x0000709f
    7204:	0000709f 	.word	0x0000709f
    7208:	0000709f 	.word	0x0000709f
    720c:	0000709f 	.word	0x0000709f
    7210:	0000709f 	.word	0x0000709f
    7214:	0000709f 	.word	0x0000709f
    7218:	0000709f 	.word	0x0000709f
    721c:	0000709f 	.word	0x0000709f
    7220:	0000709f 	.word	0x0000709f
    7224:	0000709f 	.word	0x0000709f
    7228:	0000709f 	.word	0x0000709f
    722c:	0000709f 	.word	0x0000709f
    7230:	000074d1 	.word	0x000074d1
    7234:	0000709f 	.word	0x0000709f
    7238:	0000709f 	.word	0x0000709f
    723c:	000074a9 	.word	0x000074a9
    7240:	00007481 	.word	0x00007481
    7244:	00007459 	.word	0x00007459
    7248:	0000709f 	.word	0x0000709f
    724c:	00007431 	.word	0x00007431
    7250:	00007401 	.word	0x00007401
    7254:	0000709f 	.word	0x0000709f
    7258:	0000709f 	.word	0x0000709f
    725c:	0000709f 	.word	0x0000709f
    7260:	0000709f 	.word	0x0000709f
    7264:	000075b5 	.word	0x000075b5
    7268:	0000709f 	.word	0x0000709f
    726c:	0000759f 	.word	0x0000759f
    7270:	0000709f 	.word	0x0000709f
    7274:	0000709f 	.word	0x0000709f
    7278:	0000757b 	.word	0x0000757b
    727c:	00007079 	.word	0x00007079
    7280:	0000709f 	.word	0x0000709f
    7284:	00007543 	.word	0x00007543
    7288:	3201      	adds	r2, #1
    728a:	60e2      	str	r2, [r4, #12]
    728c:	4620      	mov	r0, r4
    728e:	f7ff fe79 	bl	6f84 <d_type>
    7292:	ae01      	add	r6, sp, #4
    7294:	4607      	mov	r7, r0
    7296:	4631      	mov	r1, r6
    7298:	4620      	mov	r0, r4
    729a:	2201      	movs	r2, #1
    729c:	f7ff f92a 	bl	64f4 <d_cv_qualifiers>
    72a0:	4605      	mov	r5, r0
    72a2:	2800      	cmp	r0, #0
    72a4:	f43f af6f 	beq.w	7186 <d_type+0x202>
    72a8:	4620      	mov	r0, r4
    72aa:	f7ff fe6b 	bl	6f84 <d_type>
    72ae:	6028      	str	r0, [r5, #0]
    72b0:	2800      	cmp	r0, #0
    72b2:	f43f af68 	beq.w	7186 <d_type+0x202>
    72b6:	42b5      	cmp	r5, r6
    72b8:	d015      	beq.n	72e6 <d_type+0x362>
    72ba:	7801      	ldrb	r1, [r0, #0]
    72bc:	f1a1 021f 	sub.w	r2, r1, #31
    72c0:	2a01      	cmp	r2, #1
    72c2:	f240 81a7 	bls.w	7614 <d_type+0x690>
    72c6:	2929      	cmp	r1, #41	; 0x29
    72c8:	d00d      	beq.n	72e6 <d_type+0x362>
    72ca:	9a01      	ldr	r2, [sp, #4]
    72cc:	2a00      	cmp	r2, #0
    72ce:	f43f af5a 	beq.w	7186 <d_type+0x202>
    72d2:	6a23      	ldr	r3, [r4, #32]
    72d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    72d6:	428b      	cmp	r3, r1
    72d8:	f6bf af55 	bge.w	7186 <d_type+0x202>
    72dc:	69e1      	ldr	r1, [r4, #28]
    72de:	1c58      	adds	r0, r3, #1
    72e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    72e4:	6220      	str	r0, [r4, #32]
    72e6:	463a      	mov	r2, r7
    72e8:	4620      	mov	r0, r4
    72ea:	212b      	movs	r1, #43	; 0x2b
    72ec:	9b01      	ldr	r3, [sp, #4]
    72ee:	f7ff f89b 	bl	6428 <d_make_comp>
    72f2:	e6fd      	b.n	70f0 <d_type+0x16c>
    72f4:	3201      	adds	r2, #1
    72f6:	60e2      	str	r2, [r4, #12]
    72f8:	4620      	mov	r0, r4
    72fa:	f7ff fe43 	bl	6f84 <d_type>
    72fe:	2122      	movs	r1, #34	; 0x22
    7300:	4602      	mov	r2, r0
    7302:	2300      	movs	r3, #0
    7304:	4620      	mov	r0, r4
    7306:	f7ff f88f 	bl	6428 <d_make_comp>
    730a:	9001      	str	r0, [sp, #4]
    730c:	e6e0      	b.n	70d0 <d_type+0x14c>
    730e:	3201      	adds	r2, #1
    7310:	60e2      	str	r2, [r4, #12]
    7312:	4620      	mov	r0, r4
    7314:	f7ff fe36 	bl	6f84 <d_type>
    7318:	2123      	movs	r1, #35	; 0x23
    731a:	4602      	mov	r2, r0
    731c:	2300      	movs	r3, #0
    731e:	4620      	mov	r0, r4
    7320:	f7ff f882 	bl	6428 <d_make_comp>
    7324:	9001      	str	r0, [sp, #4]
    7326:	e6d3      	b.n	70d0 <d_type+0x14c>
    7328:	3201      	adds	r2, #1
    732a:	60e2      	str	r2, [r4, #12]
    732c:	4620      	mov	r0, r4
    732e:	f7ff fe29 	bl	6f84 <d_type>
    7332:	2124      	movs	r1, #36	; 0x24
    7334:	4602      	mov	r2, r0
    7336:	2300      	movs	r3, #0
    7338:	4620      	mov	r0, r4
    733a:	f7ff f875 	bl	6428 <d_make_comp>
    733e:	9001      	str	r0, [sp, #4]
    7340:	e6c6      	b.n	70d0 <d_type+0x14c>
    7342:	7853      	ldrb	r3, [r2, #1]
    7344:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7348:	2a09      	cmp	r2, #9
    734a:	d905      	bls.n	7358 <d_type+0x3d4>
    734c:	2b5f      	cmp	r3, #95	; 0x5f
    734e:	d003      	beq.n	7358 <d_type+0x3d4>
    7350:	3b41      	subs	r3, #65	; 0x41
    7352:	2b19      	cmp	r3, #25
    7354:	f200 8166 	bhi.w	7624 <d_type+0x6a0>
    7358:	4620      	mov	r0, r4
    735a:	2100      	movs	r1, #0
    735c:	f7ff f984 	bl	6668 <d_substitution>
    7360:	68e3      	ldr	r3, [r4, #12]
    7362:	9001      	str	r0, [sp, #4]
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	2b49      	cmp	r3, #73	; 0x49
    7368:	4605      	mov	r5, r0
    736a:	f47f ae99 	bne.w	70a0 <d_type+0x11c>
    736e:	4620      	mov	r0, r4
    7370:	f7ff fc4a 	bl	6c08 <d_template_args>
    7374:	462a      	mov	r2, r5
    7376:	4603      	mov	r3, r0
    7378:	2104      	movs	r1, #4
    737a:	4620      	mov	r0, r4
    737c:	f7ff f854 	bl	6428 <d_make_comp>
    7380:	9001      	str	r0, [sp, #4]
    7382:	e6a5      	b.n	70d0 <d_type+0x14c>
    7384:	4620      	mov	r0, r4
    7386:	f7ff fa97 	bl	68b8 <d_template_param>
    738a:	68e3      	ldr	r3, [r4, #12]
    738c:	9001      	str	r0, [sp, #4]
    738e:	781b      	ldrb	r3, [r3, #0]
    7390:	2b49      	cmp	r3, #73	; 0x49
    7392:	f47f ae9d 	bne.w	70d0 <d_type+0x14c>
    7396:	2800      	cmp	r0, #0
    7398:	f43f ae81 	beq.w	709e <d_type+0x11a>
    739c:	6a23      	ldr	r3, [r4, #32]
    739e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    73a0:	4293      	cmp	r3, r2
    73a2:	f6bf ae7c 	bge.w	709e <d_type+0x11a>
    73a6:	69e2      	ldr	r2, [r4, #28]
    73a8:	1c59      	adds	r1, r3, #1
    73aa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    73ae:	9d01      	ldr	r5, [sp, #4]
    73b0:	6221      	str	r1, [r4, #32]
    73b2:	e7dc      	b.n	736e <d_type+0x3ea>
    73b4:	3201      	adds	r2, #1
    73b6:	60e2      	str	r2, [r4, #12]
    73b8:	4620      	mov	r0, r4
    73ba:	f7ff faaf 	bl	691c <d_source_name>
    73be:	9001      	str	r0, [sp, #4]
    73c0:	4620      	mov	r0, r4
    73c2:	f7ff fddf 	bl	6f84 <d_type>
    73c6:	2121      	movs	r1, #33	; 0x21
    73c8:	4602      	mov	r2, r0
    73ca:	9b01      	ldr	r3, [sp, #4]
    73cc:	4620      	mov	r0, r4
    73ce:	f7ff f82b 	bl	6428 <d_make_comp>
    73d2:	9001      	str	r0, [sp, #4]
    73d4:	e67c      	b.n	70d0 <d_type+0x14c>
    73d6:	6961      	ldr	r1, [r4, #20]
    73d8:	69a0      	ldr	r0, [r4, #24]
    73da:	4da3      	ldr	r5, [pc, #652]	; (7668 <d_type+0x6e4>)
    73dc:	3b61      	subs	r3, #97	; 0x61
    73de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    73e2:	4281      	cmp	r1, r0
    73e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    73e8:	f2c0 80f6 	blt.w	75d8 <d_type+0x654>
    73ec:	2300      	movs	r3, #0
    73ee:	4618      	mov	r0, r3
    73f0:	685b      	ldr	r3, [r3, #4]
    73f2:	6859      	ldr	r1, [r3, #4]
    73f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    73f6:	3201      	adds	r2, #1
    73f8:	440b      	add	r3, r1
    73fa:	60e2      	str	r2, [r4, #12]
    73fc:	6323      	str	r3, [r4, #48]	; 0x30
    73fe:	e64f      	b.n	70a0 <d_type+0x11c>
    7400:	6963      	ldr	r3, [r4, #20]
    7402:	69a2      	ldr	r2, [r4, #24]
    7404:	4293      	cmp	r3, r2
    7406:	f280 80f6 	bge.w	75f6 <d_type+0x672>
    740a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    740e:	6921      	ldr	r1, [r4, #16]
    7410:	0092      	lsls	r2, r2, #2
    7412:	3301      	adds	r3, #1
    7414:	1888      	adds	r0, r1, r2
    7416:	6163      	str	r3, [r4, #20]
    7418:	f000 8121 	beq.w	765e <d_type+0x6da>
    741c:	4d93      	ldr	r5, [pc, #588]	; (766c <d_type+0x6e8>)
    741e:	2327      	movs	r3, #39	; 0x27
    7420:	548b      	strb	r3, [r1, r2]
    7422:	462b      	mov	r3, r5
    7424:	6045      	str	r5, [r0, #4]
    7426:	685a      	ldr	r2, [r3, #4]
    7428:	6b23      	ldr	r3, [r4, #48]	; 0x30
    742a:	4413      	add	r3, r2
    742c:	6323      	str	r3, [r4, #48]	; 0x30
    742e:	e637      	b.n	70a0 <d_type+0x11c>
    7430:	6963      	ldr	r3, [r4, #20]
    7432:	69a2      	ldr	r2, [r4, #24]
    7434:	4293      	cmp	r3, r2
    7436:	f280 80de 	bge.w	75f6 <d_type+0x672>
    743a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    743e:	6921      	ldr	r1, [r4, #16]
    7440:	0092      	lsls	r2, r2, #2
    7442:	3301      	adds	r3, #1
    7444:	1888      	adds	r0, r1, r2
    7446:	6163      	str	r3, [r4, #20]
    7448:	f000 8109 	beq.w	765e <d_type+0x6da>
    744c:	4d88      	ldr	r5, [pc, #544]	; (7670 <d_type+0x6ec>)
    744e:	2327      	movs	r3, #39	; 0x27
    7450:	548b      	strb	r3, [r1, r2]
    7452:	462b      	mov	r3, r5
    7454:	6045      	str	r5, [r0, #4]
    7456:	e7e6      	b.n	7426 <d_type+0x4a2>
    7458:	6963      	ldr	r3, [r4, #20]
    745a:	69a2      	ldr	r2, [r4, #24]
    745c:	4293      	cmp	r3, r2
    745e:	f280 80ca 	bge.w	75f6 <d_type+0x672>
    7462:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    7466:	6921      	ldr	r1, [r4, #16]
    7468:	0092      	lsls	r2, r2, #2
    746a:	3301      	adds	r3, #1
    746c:	1888      	adds	r0, r1, r2
    746e:	6163      	str	r3, [r4, #20]
    7470:	f000 80f5 	beq.w	765e <d_type+0x6da>
    7474:	4d7f      	ldr	r5, [pc, #508]	; (7674 <d_type+0x6f0>)
    7476:	2327      	movs	r3, #39	; 0x27
    7478:	548b      	strb	r3, [r1, r2]
    747a:	462b      	mov	r3, r5
    747c:	6045      	str	r5, [r0, #4]
    747e:	e7d2      	b.n	7426 <d_type+0x4a2>
    7480:	6963      	ldr	r3, [r4, #20]
    7482:	69a2      	ldr	r2, [r4, #24]
    7484:	4293      	cmp	r3, r2
    7486:	f280 80b6 	bge.w	75f6 <d_type+0x672>
    748a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    748e:	6921      	ldr	r1, [r4, #16]
    7490:	0092      	lsls	r2, r2, #2
    7492:	3301      	adds	r3, #1
    7494:	1888      	adds	r0, r1, r2
    7496:	6163      	str	r3, [r4, #20]
    7498:	f000 80e1 	beq.w	765e <d_type+0x6da>
    749c:	4d76      	ldr	r5, [pc, #472]	; (7678 <d_type+0x6f4>)
    749e:	2327      	movs	r3, #39	; 0x27
    74a0:	548b      	strb	r3, [r1, r2]
    74a2:	462b      	mov	r3, r5
    74a4:	6045      	str	r5, [r0, #4]
    74a6:	e7be      	b.n	7426 <d_type+0x4a2>
    74a8:	6963      	ldr	r3, [r4, #20]
    74aa:	69a2      	ldr	r2, [r4, #24]
    74ac:	4293      	cmp	r3, r2
    74ae:	f280 80a2 	bge.w	75f6 <d_type+0x672>
    74b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    74b6:	6921      	ldr	r1, [r4, #16]
    74b8:	0092      	lsls	r2, r2, #2
    74ba:	3301      	adds	r3, #1
    74bc:	1888      	adds	r0, r1, r2
    74be:	6163      	str	r3, [r4, #20]
    74c0:	f000 80cd 	beq.w	765e <d_type+0x6da>
    74c4:	4d6d      	ldr	r5, [pc, #436]	; (767c <d_type+0x6f8>)
    74c6:	2327      	movs	r3, #39	; 0x27
    74c8:	548b      	strb	r3, [r1, r2]
    74ca:	462b      	mov	r3, r5
    74cc:	6045      	str	r5, [r0, #4]
    74ce:	e7aa      	b.n	7426 <d_type+0x4a2>
    74d0:	4620      	mov	r0, r4
    74d2:	496b      	ldr	r1, [pc, #428]	; (7680 <d_type+0x6fc>)
    74d4:	2204      	movs	r2, #4
    74d6:	f7fe fff3 	bl	64c0 <d_make_name>
    74da:	e5e1      	b.n	70a0 <d_type+0x11c>
    74dc:	6963      	ldr	r3, [r4, #20]
    74de:	69a1      	ldr	r1, [r4, #24]
    74e0:	428b      	cmp	r3, r1
    74e2:	f280 80ab 	bge.w	763c <d_type+0x6b8>
    74e6:	6921      	ldr	r1, [r4, #16]
    74e8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    74ec:	3301      	adds	r3, #1
    74ee:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    74f2:	6163      	str	r3, [r4, #20]
    74f4:	232c      	movs	r3, #44	; 0x2c
    74f6:	9501      	str	r5, [sp, #4]
    74f8:	702b      	strb	r3, [r5, #0]
    74fa:	7893      	ldrb	r3, [r2, #2]
    74fc:	3b30      	subs	r3, #48	; 0x30
    74fe:	2b09      	cmp	r3, #9
    7500:	bf8c      	ite	hi
    7502:	2300      	movhi	r3, #0
    7504:	2301      	movls	r3, #1
    7506:	812b      	strh	r3, [r5, #8]
    7508:	2b00      	cmp	r3, #0
    750a:	f040 8099 	bne.w	7640 <d_type+0x6bc>
    750e:	4620      	mov	r0, r4
    7510:	f7ff fd38 	bl	6f84 <d_type>
    7514:	6068      	str	r0, [r5, #4]
    7516:	9b01      	ldr	r3, [sp, #4]
    7518:	685b      	ldr	r3, [r3, #4]
    751a:	2b00      	cmp	r3, #0
    751c:	f43f adbf 	beq.w	709e <d_type+0x11a>
    7520:	f104 000c 	add.w	r0, r4, #12
    7524:	f7ff f96e 	bl	6804 <d_number.isra.0>
    7528:	68e3      	ldr	r3, [r4, #12]
    752a:	781a      	ldrb	r2, [r3, #0]
    752c:	b132      	cbz	r2, 753c <d_type+0x5b8>
    752e:	1c5a      	adds	r2, r3, #1
    7530:	60e2      	str	r2, [r4, #12]
    7532:	781a      	ldrb	r2, [r3, #0]
    7534:	f1b2 0373 	subs.w	r3, r2, #115	; 0x73
    7538:	425a      	negs	r2, r3
    753a:	415a      	adcs	r2, r3
    753c:	9801      	ldr	r0, [sp, #4]
    753e:	8142      	strh	r2, [r0, #10]
    7540:	e5ae      	b.n	70a0 <d_type+0x11c>
    7542:	7893      	ldrb	r3, [r2, #2]
    7544:	2b5f      	cmp	r3, #95	; 0x5f
    7546:	f000 8081 	beq.w	764c <d_type+0x6c8>
    754a:	4620      	mov	r0, r4
    754c:	f7ff f980 	bl	6850 <d_number_component>
    7550:	4605      	mov	r5, r0
    7552:	2d00      	cmp	r5, #0
    7554:	f000 8081 	beq.w	765a <d_type+0x6d6>
    7558:	68e3      	ldr	r3, [r4, #12]
    755a:	781a      	ldrb	r2, [r3, #0]
    755c:	2a5f      	cmp	r2, #95	; 0x5f
    755e:	f47f ae12 	bne.w	7186 <d_type+0x202>
    7562:	3301      	adds	r3, #1
    7564:	60e3      	str	r3, [r4, #12]
    7566:	4620      	mov	r0, r4
    7568:	f7ff fd0c 	bl	6f84 <d_type>
    756c:	462a      	mov	r2, r5
    756e:	4603      	mov	r3, r0
    7570:	212d      	movs	r1, #45	; 0x2d
    7572:	4620      	mov	r0, r4
    7574:	f7fe ff58 	bl	6428 <d_make_comp>
    7578:	e5ba      	b.n	70f0 <d_type+0x16c>
    757a:	6963      	ldr	r3, [r4, #20]
    757c:	69a2      	ldr	r2, [r4, #24]
    757e:	4293      	cmp	r3, r2
    7580:	da39      	bge.n	75f6 <d_type+0x672>
    7582:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    7586:	6921      	ldr	r1, [r4, #16]
    7588:	0092      	lsls	r2, r2, #2
    758a:	3301      	adds	r3, #1
    758c:	1888      	adds	r0, r1, r2
    758e:	6163      	str	r3, [r4, #20]
    7590:	d065      	beq.n	765e <d_type+0x6da>
    7592:	4d3c      	ldr	r5, [pc, #240]	; (7684 <d_type+0x700>)
    7594:	2327      	movs	r3, #39	; 0x27
    7596:	548b      	strb	r3, [r1, r2]
    7598:	462b      	mov	r3, r5
    759a:	6045      	str	r5, [r0, #4]
    759c:	e743      	b.n	7426 <d_type+0x4a2>
    759e:	4620      	mov	r0, r4
    75a0:	f7ff fcf0 	bl	6f84 <d_type>
    75a4:	2149      	movs	r1, #73	; 0x49
    75a6:	4602      	mov	r2, r0
    75a8:	2300      	movs	r3, #0
    75aa:	4620      	mov	r0, r4
    75ac:	f7fe ff3c 	bl	6428 <d_make_comp>
    75b0:	9001      	str	r0, [sp, #4]
    75b2:	e58d      	b.n	70d0 <d_type+0x14c>
    75b4:	6963      	ldr	r3, [r4, #20]
    75b6:	69a2      	ldr	r2, [r4, #24]
    75b8:	4293      	cmp	r3, r2
    75ba:	da1c      	bge.n	75f6 <d_type+0x672>
    75bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    75c0:	6921      	ldr	r1, [r4, #16]
    75c2:	0092      	lsls	r2, r2, #2
    75c4:	3301      	adds	r3, #1
    75c6:	1888      	adds	r0, r1, r2
    75c8:	6163      	str	r3, [r4, #20]
    75ca:	d048      	beq.n	765e <d_type+0x6da>
    75cc:	4d2e      	ldr	r5, [pc, #184]	; (7688 <d_type+0x704>)
    75ce:	2327      	movs	r3, #39	; 0x27
    75d0:	548b      	strb	r3, [r1, r2]
    75d2:	462b      	mov	r3, r5
    75d4:	6045      	str	r5, [r0, #4]
    75d6:	e726      	b.n	7426 <d_type+0x4a2>
    75d8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    75dc:	6925      	ldr	r5, [r4, #16]
    75de:	3101      	adds	r1, #1
    75e0:	0080      	lsls	r0, r0, #2
    75e2:	6161      	str	r1, [r4, #20]
    75e4:	1829      	adds	r1, r5, r0
    75e6:	d03c      	beq.n	7662 <d_type+0x6de>
    75e8:	2627      	movs	r6, #39	; 0x27
    75ea:	542e      	strb	r6, [r5, r0]
    75ec:	4608      	mov	r0, r1
    75ee:	604b      	str	r3, [r1, #4]
    75f0:	e6ff      	b.n	73f2 <d_type+0x46e>
    75f2:	2500      	movs	r5, #0
    75f4:	e59a      	b.n	712c <d_type+0x1a8>
    75f6:	2300      	movs	r3, #0
    75f8:	4618      	mov	r0, r3
    75fa:	685b      	ldr	r3, [r3, #4]
    75fc:	e713      	b.n	7426 <d_type+0x4a2>
    75fe:	3301      	adds	r3, #1
    7600:	60e3      	str	r3, [r4, #12]
    7602:	e575      	b.n	70f0 <d_type+0x16c>
    7604:	4620      	mov	r0, r4
    7606:	f000 fd8f 	bl	8128 <d_expression>
    760a:	4605      	mov	r5, r0
    760c:	2800      	cmp	r0, #0
    760e:	f47f ad89 	bne.w	7124 <d_type+0x1a0>
    7612:	e5b8      	b.n	7186 <d_type+0x202>
    7614:	9901      	ldr	r1, [sp, #4]
    7616:	6842      	ldr	r2, [r0, #4]
    7618:	6041      	str	r1, [r0, #4]
    761a:	682b      	ldr	r3, [r5, #0]
    761c:	9301      	str	r3, [sp, #4]
    761e:	7811      	ldrb	r1, [r2, #0]
    7620:	602a      	str	r2, [r5, #0]
    7622:	e650      	b.n	72c6 <d_type+0x342>
    7624:	4620      	mov	r0, r4
    7626:	f7ff fb4d 	bl	6cc4 <d_name>
    762a:	9001      	str	r0, [sp, #4]
    762c:	2800      	cmp	r0, #0
    762e:	f43f ad36 	beq.w	709e <d_type+0x11a>
    7632:	7803      	ldrb	r3, [r0, #0]
    7634:	2b18      	cmp	r3, #24
    7636:	f47f ad4d 	bne.w	70d4 <d_type+0x150>
    763a:	e531      	b.n	70a0 <d_type+0x11c>
    763c:	2500      	movs	r5, #0
    763e:	e759      	b.n	74f4 <d_type+0x570>
    7640:	f104 000c 	add.w	r0, r4, #12
    7644:	f7ff f8de 	bl	6804 <d_number.isra.0>
    7648:	9d01      	ldr	r5, [sp, #4]
    764a:	e760      	b.n	750e <d_type+0x58a>
    764c:	3203      	adds	r2, #3
    764e:	60e2      	str	r2, [r4, #12]
    7650:	4620      	mov	r0, r4
    7652:	f000 fd69 	bl	8128 <d_expression>
    7656:	4605      	mov	r5, r0
    7658:	e77b      	b.n	7552 <d_type+0x5ce>
    765a:	4628      	mov	r0, r5
    765c:	e548      	b.n	70f0 <d_type+0x16c>
    765e:	6843      	ldr	r3, [r0, #4]
    7660:	e6e1      	b.n	7426 <d_type+0x4a2>
    7662:	684b      	ldr	r3, [r1, #4]
    7664:	4608      	mov	r0, r1
    7666:	e6c4      	b.n	73f2 <d_type+0x46e>
    7668:	000148d8 	.word	0x000148d8
    766c:	00014b44 	.word	0x00014b44
    7670:	00014b1c 	.word	0x00014b1c
    7674:	00014ae0 	.word	0x00014ae0
    7678:	00014b08 	.word	0x00014b08
    767c:	00014af4 	.word	0x00014af4
    7680:	00014f84 	.word	0x00014f84
    7684:	00014b30 	.word	0x00014b30
    7688:	00014b58 	.word	0x00014b58

0000768c <d_parmlist>:
    768c:	b570      	push	{r4, r5, r6, lr}
    768e:	b082      	sub	sp, #8
    7690:	2300      	movs	r3, #0
    7692:	68c1      	ldr	r1, [r0, #12]
    7694:	9301      	str	r3, [sp, #4]
    7696:	780b      	ldrb	r3, [r1, #0]
    7698:	4604      	mov	r4, r0
    769a:	b34b      	cbz	r3, 76f0 <d_parmlist+0x64>
    769c:	2b45      	cmp	r3, #69	; 0x45
    769e:	d027      	beq.n	76f0 <d_parmlist+0x64>
    76a0:	2b2e      	cmp	r3, #46	; 0x2e
    76a2:	d025      	beq.n	76f0 <d_parmlist+0x64>
    76a4:	ae01      	add	r6, sp, #4
    76a6:	e017      	b.n	76d8 <d_parmlist+0x4c>
    76a8:	2b4f      	cmp	r3, #79	; 0x4f
    76aa:	d017      	beq.n	76dc <d_parmlist+0x50>
    76ac:	4620      	mov	r0, r4
    76ae:	f7ff fc69 	bl	6f84 <d_type>
    76b2:	4605      	mov	r5, r0
    76b4:	212e      	movs	r1, #46	; 0x2e
    76b6:	4620      	mov	r0, r4
    76b8:	462a      	mov	r2, r5
    76ba:	2300      	movs	r3, #0
    76bc:	b1c5      	cbz	r5, 76f0 <d_parmlist+0x64>
    76be:	f7fe feb3 	bl	6428 <d_make_comp>
    76c2:	6030      	str	r0, [r6, #0]
    76c4:	b1a0      	cbz	r0, 76f0 <d_parmlist+0x64>
    76c6:	68e1      	ldr	r1, [r4, #12]
    76c8:	780b      	ldrb	r3, [r1, #0]
    76ca:	f100 0608 	add.w	r6, r0, #8
    76ce:	b143      	cbz	r3, 76e2 <d_parmlist+0x56>
    76d0:	2b45      	cmp	r3, #69	; 0x45
    76d2:	d006      	beq.n	76e2 <d_parmlist+0x56>
    76d4:	2b2e      	cmp	r3, #46	; 0x2e
    76d6:	d004      	beq.n	76e2 <d_parmlist+0x56>
    76d8:	2b52      	cmp	r3, #82	; 0x52
    76da:	d1e5      	bne.n	76a8 <d_parmlist+0x1c>
    76dc:	784b      	ldrb	r3, [r1, #1]
    76de:	2b45      	cmp	r3, #69	; 0x45
    76e0:	d1e4      	bne.n	76ac <d_parmlist+0x20>
    76e2:	9b01      	ldr	r3, [sp, #4]
    76e4:	b123      	cbz	r3, 76f0 <d_parmlist+0x64>
    76e6:	689a      	ldr	r2, [r3, #8]
    76e8:	b12a      	cbz	r2, 76f6 <d_parmlist+0x6a>
    76ea:	4618      	mov	r0, r3
    76ec:	b002      	add	sp, #8
    76ee:	bd70      	pop	{r4, r5, r6, pc}
    76f0:	2000      	movs	r0, #0
    76f2:	b002      	add	sp, #8
    76f4:	bd70      	pop	{r4, r5, r6, pc}
    76f6:	6859      	ldr	r1, [r3, #4]
    76f8:	7808      	ldrb	r0, [r1, #0]
    76fa:	2827      	cmp	r0, #39	; 0x27
    76fc:	d1f5      	bne.n	76ea <d_parmlist+0x5e>
    76fe:	6849      	ldr	r1, [r1, #4]
    7700:	7c08      	ldrb	r0, [r1, #16]
    7702:	2809      	cmp	r0, #9
    7704:	d1f1      	bne.n	76ea <d_parmlist+0x5e>
    7706:	6848      	ldr	r0, [r1, #4]
    7708:	6b21      	ldr	r1, [r4, #48]	; 0x30
    770a:	1a09      	subs	r1, r1, r0
    770c:	6321      	str	r1, [r4, #48]	; 0x30
    770e:	4618      	mov	r0, r3
    7710:	605a      	str	r2, [r3, #4]
    7712:	e7eb      	b.n	76ec <d_parmlist+0x60>

00007714 <d_bare_function_type>:
    7714:	b570      	push	{r4, r5, r6, lr}
    7716:	68c3      	ldr	r3, [r0, #12]
    7718:	781a      	ldrb	r2, [r3, #0]
    771a:	2a4a      	cmp	r2, #74	; 0x4a
    771c:	4604      	mov	r4, r0
    771e:	d00d      	beq.n	773c <d_bare_function_type+0x28>
    7720:	b971      	cbnz	r1, 7740 <d_bare_function_type+0x2c>
    7722:	460d      	mov	r5, r1
    7724:	4620      	mov	r0, r4
    7726:	f7ff ffb1 	bl	768c <d_parmlist>
    772a:	4603      	mov	r3, r0
    772c:	b170      	cbz	r0, 774c <d_bare_function_type+0x38>
    772e:	4620      	mov	r0, r4
    7730:	462a      	mov	r2, r5
    7732:	2129      	movs	r1, #41	; 0x29
    7734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7738:	f7fe be76 	b.w	6428 <d_make_comp>
    773c:	3301      	adds	r3, #1
    773e:	60c3      	str	r3, [r0, #12]
    7740:	4620      	mov	r0, r4
    7742:	f7ff fc1f 	bl	6f84 <d_type>
    7746:	4605      	mov	r5, r0
    7748:	2800      	cmp	r0, #0
    774a:	d1eb      	bne.n	7724 <d_bare_function_type+0x10>
    774c:	2000      	movs	r0, #0
    774e:	bd70      	pop	{r4, r5, r6, pc}

00007750 <d_encoding>:
    7750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7754:	68c3      	ldr	r3, [r0, #12]
    7756:	781a      	ldrb	r2, [r3, #0]
    7758:	2a47      	cmp	r2, #71	; 0x47
    775a:	4605      	mov	r5, r0
    775c:	460e      	mov	r6, r1
    775e:	d034      	beq.n	77ca <d_encoding+0x7a>
    7760:	2a54      	cmp	r2, #84	; 0x54
    7762:	d032      	beq.n	77ca <d_encoding+0x7a>
    7764:	f7ff faae 	bl	6cc4 <d_name>
    7768:	4604      	mov	r4, r0
    776a:	b358      	cbz	r0, 77c4 <d_encoding+0x74>
    776c:	b116      	cbz	r6, 7774 <d_encoding+0x24>
    776e:	68ab      	ldr	r3, [r5, #8]
    7770:	07db      	lsls	r3, r3, #31
    7772:	d51f      	bpl.n	77b4 <d_encoding+0x64>
    7774:	68eb      	ldr	r3, [r5, #12]
    7776:	781b      	ldrb	r3, [r3, #0]
    7778:	b323      	cbz	r3, 77c4 <d_encoding+0x74>
    777a:	2b45      	cmp	r3, #69	; 0x45
    777c:	d022      	beq.n	77c4 <d_encoding+0x74>
    777e:	4621      	mov	r1, r4
    7780:	780b      	ldrb	r3, [r1, #0]
    7782:	2b04      	cmp	r3, #4
    7784:	f1a3 021c 	sub.w	r2, r3, #28
    7788:	f000 80a4 	beq.w	78d4 <d_encoding+0x184>
    778c:	f0c0 80a0 	bcc.w	78d0 <d_encoding+0x180>
    7790:	2a04      	cmp	r2, #4
    7792:	f200 809d 	bhi.w	78d0 <d_encoding+0x180>
    7796:	6849      	ldr	r1, [r1, #4]
    7798:	2900      	cmp	r1, #0
    779a:	d1f1      	bne.n	7780 <d_encoding+0x30>
    779c:	4628      	mov	r0, r5
    779e:	f7ff ffb9 	bl	7714 <d_bare_function_type>
    77a2:	4622      	mov	r2, r4
    77a4:	4603      	mov	r3, r0
    77a6:	2103      	movs	r1, #3
    77a8:	4628      	mov	r0, r5
    77aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77ae:	f7fe be3b 	b.w	6428 <d_make_comp>
    77b2:	6864      	ldr	r4, [r4, #4]
    77b4:	7823      	ldrb	r3, [r4, #0]
    77b6:	f1a3 021c 	sub.w	r2, r3, #28
    77ba:	2a04      	cmp	r2, #4
    77bc:	d9f9      	bls.n	77b2 <d_encoding+0x62>
    77be:	2b02      	cmp	r3, #2
    77c0:	f000 816e 	beq.w	7aa0 <d_encoding+0x350>
    77c4:	4620      	mov	r0, r4
    77c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77ca:	6b29      	ldr	r1, [r5, #48]	; 0x30
    77cc:	f101 0214 	add.w	r2, r1, #20
    77d0:	632a      	str	r2, [r5, #48]	; 0x30
    77d2:	781a      	ldrb	r2, [r3, #0]
    77d4:	2a54      	cmp	r2, #84	; 0x54
    77d6:	d005      	beq.n	77e4 <d_encoding+0x94>
    77d8:	2a47      	cmp	r2, #71	; 0x47
    77da:	f000 80ed 	beq.w	79b8 <d_encoding+0x268>
    77de:	2000      	movs	r0, #0
    77e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77e4:	1c5a      	adds	r2, r3, #1
    77e6:	60ea      	str	r2, [r5, #12]
    77e8:	785a      	ldrb	r2, [r3, #1]
    77ea:	2a00      	cmp	r2, #0
    77ec:	d0f7      	beq.n	77de <d_encoding+0x8e>
    77ee:	1c9a      	adds	r2, r3, #2
    77f0:	60ea      	str	r2, [r5, #12]
    77f2:	785b      	ldrb	r3, [r3, #1]
    77f4:	3b43      	subs	r3, #67	; 0x43
    77f6:	2b33      	cmp	r3, #51	; 0x33
    77f8:	d8f1      	bhi.n	77de <d_encoding+0x8e>
    77fa:	a201      	add	r2, pc, #4	; (adr r2, 7800 <d_encoding+0xb0>)
    77fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7800:	00007d0d 	.word	0x00007d0d
    7804:	000077df 	.word	0x000077df
    7808:	000077df 	.word	0x000077df
    780c:	00007cf7 	.word	0x00007cf7
    7810:	000077df 	.word	0x000077df
    7814:	00007ce1 	.word	0x00007ce1
    7818:	00007ccb 	.word	0x00007ccb
    781c:	00007cb5 	.word	0x00007cb5
    7820:	000077df 	.word	0x000077df
    7824:	000077df 	.word	0x000077df
    7828:	000077df 	.word	0x000077df
    782c:	000077df 	.word	0x000077df
    7830:	000077df 	.word	0x000077df
    7834:	000077df 	.word	0x000077df
    7838:	000077df 	.word	0x000077df
    783c:	000077df 	.word	0x000077df
    7840:	00007c9f 	.word	0x00007c9f
    7844:	00007c85 	.word	0x00007c85
    7848:	000077df 	.word	0x000077df
    784c:	00007c6b 	.word	0x00007c6b
    7850:	00007c2f 	.word	0x00007c2f
    7854:	000077df 	.word	0x000077df
    7858:	000077df 	.word	0x000077df
    785c:	000077df 	.word	0x000077df
    7860:	000077df 	.word	0x000077df
    7864:	000077df 	.word	0x000077df
    7868:	000077df 	.word	0x000077df
    786c:	000077df 	.word	0x000077df
    7870:	000077df 	.word	0x000077df
    7874:	000077df 	.word	0x000077df
    7878:	000077df 	.word	0x000077df
    787c:	000077df 	.word	0x000077df
    7880:	00007bfb 	.word	0x00007bfb
    7884:	000077df 	.word	0x000077df
    7888:	000077df 	.word	0x000077df
    788c:	000077df 	.word	0x000077df
    7890:	000077df 	.word	0x000077df
    7894:	00007c45 	.word	0x00007c45
    7898:	000077df 	.word	0x000077df
    789c:	000077df 	.word	0x000077df
    78a0:	000077df 	.word	0x000077df
    78a4:	000077df 	.word	0x000077df
    78a8:	000077df 	.word	0x000077df
    78ac:	000077df 	.word	0x000077df
    78b0:	000077df 	.word	0x000077df
    78b4:	000077df 	.word	0x000077df
    78b8:	000077df 	.word	0x000077df
    78bc:	000077df 	.word	0x000077df
    78c0:	000077df 	.word	0x000077df
    78c4:	000077df 	.word	0x000077df
    78c8:	000077df 	.word	0x000077df
    78cc:	00007bd5 	.word	0x00007bd5
    78d0:	2100      	movs	r1, #0
    78d2:	e763      	b.n	779c <d_encoding+0x4c>
    78d4:	684b      	ldr	r3, [r1, #4]
    78d6:	2b00      	cmp	r3, #0
    78d8:	f000 80f4 	beq.w	7ac4 <d_encoding+0x374>
    78dc:	781a      	ldrb	r2, [r3, #0]
    78de:	3a01      	subs	r2, #1
    78e0:	2a32      	cmp	r2, #50	; 0x32
    78e2:	f200 80ef 	bhi.w	7ac4 <d_encoding+0x374>
    78e6:	a101      	add	r1, pc, #4	; (adr r1, 78ec <d_encoding+0x19c>)
    78e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    78ec:	00007abd 	.word	0x00007abd
    78f0:	00007abd 	.word	0x00007abd
    78f4:	00007ac5 	.word	0x00007ac5
    78f8:	00007ac5 	.word	0x00007ac5
    78fc:	00007ac5 	.word	0x00007ac5
    7900:	00007ac5 	.word	0x00007ac5
    7904:	000078d1 	.word	0x000078d1
    7908:	000078d1 	.word	0x000078d1
    790c:	00007ac5 	.word	0x00007ac5
    7910:	00007ac5 	.word	0x00007ac5
    7914:	00007ac5 	.word	0x00007ac5
    7918:	00007ac5 	.word	0x00007ac5
    791c:	00007ac5 	.word	0x00007ac5
    7920:	00007ac5 	.word	0x00007ac5
    7924:	00007ac5 	.word	0x00007ac5
    7928:	00007ac5 	.word	0x00007ac5
    792c:	00007ac5 	.word	0x00007ac5
    7930:	00007ac5 	.word	0x00007ac5
    7934:	00007ac5 	.word	0x00007ac5
    7938:	00007ac5 	.word	0x00007ac5
    793c:	00007ac5 	.word	0x00007ac5
    7940:	00007ac5 	.word	0x00007ac5
    7944:	00007ac5 	.word	0x00007ac5
    7948:	00007ac5 	.word	0x00007ac5
    794c:	00007ac5 	.word	0x00007ac5
    7950:	00007ac5 	.word	0x00007ac5
    7954:	00007ac5 	.word	0x00007ac5
    7958:	00007ac5 	.word	0x00007ac5
    795c:	00007ac5 	.word	0x00007ac5
    7960:	00007ac5 	.word	0x00007ac5
    7964:	00007ac5 	.word	0x00007ac5
    7968:	00007ac5 	.word	0x00007ac5
    796c:	00007ac5 	.word	0x00007ac5
    7970:	00007ac5 	.word	0x00007ac5
    7974:	00007ac5 	.word	0x00007ac5
    7978:	00007ac5 	.word	0x00007ac5
    797c:	00007ac5 	.word	0x00007ac5
    7980:	00007ac5 	.word	0x00007ac5
    7984:	00007ac5 	.word	0x00007ac5
    7988:	00007ac5 	.word	0x00007ac5
    798c:	00007ac5 	.word	0x00007ac5
    7990:	00007ac5 	.word	0x00007ac5
    7994:	00007ac5 	.word	0x00007ac5
    7998:	00007ac5 	.word	0x00007ac5
    799c:	00007ac5 	.word	0x00007ac5
    79a0:	00007ac5 	.word	0x00007ac5
    79a4:	00007ac5 	.word	0x00007ac5
    79a8:	00007ac5 	.word	0x00007ac5
    79ac:	00007ac5 	.word	0x00007ac5
    79b0:	00007ac5 	.word	0x00007ac5
    79b4:	000078d1 	.word	0x000078d1
    79b8:	1c5a      	adds	r2, r3, #1
    79ba:	60ea      	str	r2, [r5, #12]
    79bc:	785a      	ldrb	r2, [r3, #1]
    79be:	2a00      	cmp	r2, #0
    79c0:	f43f af0d 	beq.w	77de <d_encoding+0x8e>
    79c4:	1c9a      	adds	r2, r3, #2
    79c6:	60ea      	str	r2, [r5, #12]
    79c8:	785a      	ldrb	r2, [r3, #1]
    79ca:	3a41      	subs	r2, #65	; 0x41
    79cc:	2a31      	cmp	r2, #49	; 0x31
    79ce:	f63f af06 	bhi.w	77de <d_encoding+0x8e>
    79d2:	a101      	add	r1, pc, #4	; (adr r1, 79d8 <d_encoding+0x288>)
    79d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    79d8:	00007b91 	.word	0x00007b91
    79dc:	000077df 	.word	0x000077df
    79e0:	000077df 	.word	0x000077df
    79e4:	000077df 	.word	0x000077df
    79e8:	000077df 	.word	0x000077df
    79ec:	000077df 	.word	0x000077df
    79f0:	000077df 	.word	0x000077df
    79f4:	000077df 	.word	0x000077df
    79f8:	000077df 	.word	0x000077df
    79fc:	000077df 	.word	0x000077df
    7a00:	000077df 	.word	0x000077df
    7a04:	000077df 	.word	0x000077df
    7a08:	000077df 	.word	0x000077df
    7a0c:	000077df 	.word	0x000077df
    7a10:	000077df 	.word	0x000077df
    7a14:	000077df 	.word	0x000077df
    7a18:	000077df 	.word	0x000077df
    7a1c:	00007b73 	.word	0x00007b73
    7a20:	000077df 	.word	0x000077df
    7a24:	00007ba9 	.word	0x00007ba9
    7a28:	000077df 	.word	0x000077df
    7a2c:	00007b5d 	.word	0x00007b5d
    7a30:	000077df 	.word	0x000077df
    7a34:	000077df 	.word	0x000077df
    7a38:	000077df 	.word	0x000077df
    7a3c:	000077df 	.word	0x000077df
    7a40:	000077df 	.word	0x000077df
    7a44:	000077df 	.word	0x000077df
    7a48:	000077df 	.word	0x000077df
    7a4c:	000077df 	.word	0x000077df
    7a50:	000077df 	.word	0x000077df
    7a54:	000077df 	.word	0x000077df
    7a58:	000077df 	.word	0x000077df
    7a5c:	000077df 	.word	0x000077df
    7a60:	000077df 	.word	0x000077df
    7a64:	000077df 	.word	0x000077df
    7a68:	000077df 	.word	0x000077df
    7a6c:	000077df 	.word	0x000077df
    7a70:	000077df 	.word	0x000077df
    7a74:	000077df 	.word	0x000077df
    7a78:	000077df 	.word	0x000077df
    7a7c:	000077df 	.word	0x000077df
    7a80:	000077df 	.word	0x000077df
    7a84:	000077df 	.word	0x000077df
    7a88:	000077df 	.word	0x000077df
    7a8c:	000077df 	.word	0x000077df
    7a90:	000077df 	.word	0x000077df
    7a94:	000077df 	.word	0x000077df
    7a98:	000077df 	.word	0x000077df
    7a9c:	00007ac9 	.word	0x00007ac9
    7aa0:	68a3      	ldr	r3, [r4, #8]
    7aa2:	781a      	ldrb	r2, [r3, #0]
    7aa4:	3a1c      	subs	r2, #28
    7aa6:	2a04      	cmp	r2, #4
    7aa8:	d804      	bhi.n	7ab4 <d_encoding+0x364>
    7aaa:	685b      	ldr	r3, [r3, #4]
    7aac:	781a      	ldrb	r2, [r3, #0]
    7aae:	3a1c      	subs	r2, #28
    7ab0:	2a04      	cmp	r2, #4
    7ab2:	d9fa      	bls.n	7aaa <d_encoding+0x35a>
    7ab4:	60a3      	str	r3, [r4, #8]
    7ab6:	4620      	mov	r0, r4
    7ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7abc:	689b      	ldr	r3, [r3, #8]
    7abe:	2b00      	cmp	r3, #0
    7ac0:	f47f af0c 	bne.w	78dc <d_encoding+0x18c>
    7ac4:	2101      	movs	r1, #1
    7ac6:	e669      	b.n	779c <d_encoding+0x4c>
    7ac8:	f105 000c 	add.w	r0, r5, #12
    7acc:	f7fe fe9a 	bl	6804 <d_number.isra.0>
    7ad0:	2801      	cmp	r0, #1
    7ad2:	f77f ae84 	ble.w	77de <d_encoding+0x8e>
    7ad6:	68eb      	ldr	r3, [r5, #12]
    7ad8:	781a      	ldrb	r2, [r3, #0]
    7ada:	2a00      	cmp	r2, #0
    7adc:	f43f ae7f 	beq.w	77de <d_encoding+0x8e>
    7ae0:	1c5e      	adds	r6, r3, #1
    7ae2:	60ee      	str	r6, [r5, #12]
    7ae4:	781b      	ldrb	r3, [r3, #0]
    7ae6:	2b5f      	cmp	r3, #95	; 0x5f
    7ae8:	f47f ae79 	bne.w	77de <d_encoding+0x8e>
    7aec:	1e47      	subs	r7, r0, #1
    7aee:	f04f 0800 	mov.w	r8, #0
    7af2:	f04f 093f 	mov.w	r9, #63	; 0x3f
    7af6:	7833      	ldrb	r3, [r6, #0]
    7af8:	2b00      	cmp	r3, #0
    7afa:	f43f ae70 	beq.w	77de <d_encoding+0x8e>
    7afe:	2b24      	cmp	r3, #36	; 0x24
    7b00:	f000 8124 	beq.w	7d4c <d_encoding+0x5fc>
    7b04:	2400      	movs	r4, #0
    7b06:	5d33      	ldrb	r3, [r6, r4]
    7b08:	b123      	cbz	r3, 7b14 <d_encoding+0x3c4>
    7b0a:	2b24      	cmp	r3, #36	; 0x24
    7b0c:	d002      	beq.n	7b14 <d_encoding+0x3c4>
    7b0e:	3401      	adds	r4, #1
    7b10:	42bc      	cmp	r4, r7
    7b12:	dbf8      	blt.n	7b06 <d_encoding+0x3b6>
    7b14:	4631      	mov	r1, r6
    7b16:	4628      	mov	r0, r5
    7b18:	4622      	mov	r2, r4
    7b1a:	f7fe fcd1 	bl	64c0 <d_make_name>
    7b1e:	68ee      	ldr	r6, [r5, #12]
    7b20:	4426      	add	r6, r4
    7b22:	1b3f      	subs	r7, r7, r4
    7b24:	60ee      	str	r6, [r5, #12]
    7b26:	2800      	cmp	r0, #0
    7b28:	f43f ae59 	beq.w	77de <d_encoding+0x8e>
    7b2c:	f1b8 0f00 	cmp.w	r8, #0
    7b30:	f000 8129 	beq.w	7d86 <d_encoding+0x636>
    7b34:	4642      	mov	r2, r8
    7b36:	4603      	mov	r3, r0
    7b38:	213e      	movs	r1, #62	; 0x3e
    7b3a:	4628      	mov	r0, r5
    7b3c:	f7fe fc74 	bl	6428 <d_make_comp>
    7b40:	4680      	mov	r8, r0
    7b42:	2800      	cmp	r0, #0
    7b44:	f43f ae4b 	beq.w	77de <d_encoding+0x8e>
    7b48:	2f00      	cmp	r7, #0
    7b4a:	dcd4      	bgt.n	7af6 <d_encoding+0x3a6>
    7b4c:	4628      	mov	r0, r5
    7b4e:	4642      	mov	r2, r8
    7b50:	213d      	movs	r1, #61	; 0x3d
    7b52:	2300      	movs	r3, #0
    7b54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b58:	f7fe bc66 	b.w	6428 <d_make_comp>
    7b5c:	4628      	mov	r0, r5
    7b5e:	f7ff f8b1 	bl	6cc4 <d_name>
    7b62:	2113      	movs	r1, #19
    7b64:	4602      	mov	r2, r0
    7b66:	2300      	movs	r3, #0
    7b68:	4628      	mov	r0, r5
    7b6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b6e:	f7fe bc5b 	b.w	6428 <d_make_comp>
    7b72:	4628      	mov	r0, r5
    7b74:	f7ff f8a6 	bl	6cc4 <d_name>
    7b78:	4604      	mov	r4, r0
    7b7a:	4628      	mov	r0, r5
    7b7c:	f7fe fe68 	bl	6850 <d_number_component>
    7b80:	4622      	mov	r2, r4
    7b82:	4603      	mov	r3, r0
    7b84:	2116      	movs	r1, #22
    7b86:	4628      	mov	r0, r5
    7b88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b8c:	f7fe bc4c 	b.w	6428 <d_make_comp>
    7b90:	4628      	mov	r0, r5
    7b92:	2100      	movs	r1, #0
    7b94:	f7ff fddc 	bl	7750 <d_encoding>
    7b98:	2117      	movs	r1, #23
    7b9a:	4602      	mov	r2, r0
    7b9c:	2300      	movs	r3, #0
    7b9e:	4628      	mov	r0, r5
    7ba0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ba4:	f7fe bc40 	b.w	6428 <d_make_comp>
    7ba8:	789a      	ldrb	r2, [r3, #2]
    7baa:	4628      	mov	r0, r5
    7bac:	2100      	movs	r1, #0
    7bae:	2a00      	cmp	r2, #0
    7bb0:	f000 80eb 	beq.w	7d8a <d_encoding+0x63a>
    7bb4:	1cda      	adds	r2, r3, #3
    7bb6:	60ea      	str	r2, [r5, #12]
    7bb8:	789b      	ldrb	r3, [r3, #2]
    7bba:	2b6e      	cmp	r3, #110	; 0x6e
    7bbc:	f040 80e5 	bne.w	7d8a <d_encoding+0x63a>
    7bc0:	f7ff fdc6 	bl	7750 <d_encoding>
    7bc4:	2148      	movs	r1, #72	; 0x48
    7bc6:	4602      	mov	r2, r0
    7bc8:	2300      	movs	r3, #0
    7bca:	4628      	mov	r0, r5
    7bcc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7bd0:	f7fe bc2a 	b.w	6428 <d_make_comp>
    7bd4:	4628      	mov	r0, r5
    7bd6:	2176      	movs	r1, #118	; 0x76
    7bd8:	f7fe fee2 	bl	69a0 <d_call_offset>
    7bdc:	2800      	cmp	r0, #0
    7bde:	f43f adfe 	beq.w	77de <d_encoding+0x8e>
    7be2:	4628      	mov	r0, r5
    7be4:	2100      	movs	r1, #0
    7be6:	f7ff fdb3 	bl	7750 <d_encoding>
    7bea:	2110      	movs	r1, #16
    7bec:	4602      	mov	r2, r0
    7bee:	2300      	movs	r3, #0
    7bf0:	4628      	mov	r0, r5
    7bf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7bf6:	f7fe bc17 	b.w	6428 <d_make_comp>
    7bfa:	4628      	mov	r0, r5
    7bfc:	2100      	movs	r1, #0
    7bfe:	f7fe fecf 	bl	69a0 <d_call_offset>
    7c02:	2800      	cmp	r0, #0
    7c04:	f43f adeb 	beq.w	77de <d_encoding+0x8e>
    7c08:	4628      	mov	r0, r5
    7c0a:	2100      	movs	r1, #0
    7c0c:	f7fe fec8 	bl	69a0 <d_call_offset>
    7c10:	2800      	cmp	r0, #0
    7c12:	f43f ade4 	beq.w	77de <d_encoding+0x8e>
    7c16:	4628      	mov	r0, r5
    7c18:	2100      	movs	r1, #0
    7c1a:	f7ff fd99 	bl	7750 <d_encoding>
    7c1e:	2111      	movs	r1, #17
    7c20:	4602      	mov	r2, r0
    7c22:	2300      	movs	r3, #0
    7c24:	4628      	mov	r0, r5
    7c26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c2a:	f7fe bbfd 	b.w	6428 <d_make_comp>
    7c2e:	4628      	mov	r0, r5
    7c30:	f7ff f848 	bl	6cc4 <d_name>
    7c34:	2115      	movs	r1, #21
    7c36:	4602      	mov	r2, r0
    7c38:	2300      	movs	r3, #0
    7c3a:	4628      	mov	r0, r5
    7c3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c40:	f7fe bbf2 	b.w	6428 <d_make_comp>
    7c44:	4628      	mov	r0, r5
    7c46:	2168      	movs	r1, #104	; 0x68
    7c48:	f7fe feaa 	bl	69a0 <d_call_offset>
    7c4c:	2800      	cmp	r0, #0
    7c4e:	f43f adc6 	beq.w	77de <d_encoding+0x8e>
    7c52:	4628      	mov	r0, r5
    7c54:	2100      	movs	r1, #0
    7c56:	f7ff fd7b 	bl	7750 <d_encoding>
    7c5a:	210f      	movs	r1, #15
    7c5c:	4602      	mov	r2, r0
    7c5e:	2300      	movs	r3, #0
    7c60:	4628      	mov	r0, r5
    7c62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c66:	f7fe bbdf 	b.w	6428 <d_make_comp>
    7c6a:	310f      	adds	r1, #15
    7c6c:	6329      	str	r1, [r5, #48]	; 0x30
    7c6e:	4628      	mov	r0, r5
    7c70:	f7ff f988 	bl	6f84 <d_type>
    7c74:	2109      	movs	r1, #9
    7c76:	4602      	mov	r2, r0
    7c78:	2300      	movs	r3, #0
    7c7a:	4628      	mov	r0, r5
    7c7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c80:	f7fe bbd2 	b.w	6428 <d_make_comp>
    7c84:	310a      	adds	r1, #10
    7c86:	6329      	str	r1, [r5, #48]	; 0x30
    7c88:	4628      	mov	r0, r5
    7c8a:	f7ff f97b 	bl	6f84 <d_type>
    7c8e:	210a      	movs	r1, #10
    7c90:	4602      	mov	r2, r0
    7c92:	2300      	movs	r3, #0
    7c94:	4628      	mov	r0, r5
    7c96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c9a:	f7fe bbc5 	b.w	6428 <d_make_comp>
    7c9e:	4628      	mov	r0, r5
    7ca0:	f7ff f970 	bl	6f84 <d_type>
    7ca4:	210d      	movs	r1, #13
    7ca6:	4602      	mov	r2, r0
    7ca8:	2300      	movs	r3, #0
    7caa:	4628      	mov	r0, r5
    7cac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cb0:	f7fe bbba 	b.w	6428 <d_make_comp>
    7cb4:	4628      	mov	r0, r5
    7cb6:	f7ff f965 	bl	6f84 <d_type>
    7cba:	2112      	movs	r1, #18
    7cbc:	4602      	mov	r2, r0
    7cbe:	2300      	movs	r3, #0
    7cc0:	4628      	mov	r0, r5
    7cc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cc6:	f7fe bbaf 	b.w	6428 <d_make_comp>
    7cca:	4628      	mov	r0, r5
    7ccc:	f7ff f95a 	bl	6f84 <d_type>
    7cd0:	210c      	movs	r1, #12
    7cd2:	4602      	mov	r2, r0
    7cd4:	2300      	movs	r3, #0
    7cd6:	4628      	mov	r0, r5
    7cd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cdc:	f7fe bba4 	b.w	6428 <d_make_comp>
    7ce0:	4628      	mov	r0, r5
    7ce2:	f7fe ffef 	bl	6cc4 <d_name>
    7ce6:	2114      	movs	r1, #20
    7ce8:	4602      	mov	r2, r0
    7cea:	2300      	movs	r3, #0
    7cec:	4628      	mov	r0, r5
    7cee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cf2:	f7fe bb99 	b.w	6428 <d_make_comp>
    7cf6:	4628      	mov	r0, r5
    7cf8:	f7ff f944 	bl	6f84 <d_type>
    7cfc:	210e      	movs	r1, #14
    7cfe:	4602      	mov	r2, r0
    7d00:	2300      	movs	r3, #0
    7d02:	4628      	mov	r0, r5
    7d04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d08:	f7fe bb8e 	b.w	6428 <d_make_comp>
    7d0c:	4628      	mov	r0, r5
    7d0e:	f7ff f939 	bl	6f84 <d_type>
    7d12:	4604      	mov	r4, r0
    7d14:	f105 000c 	add.w	r0, r5, #12
    7d18:	f7fe fd74 	bl	6804 <d_number.isra.0>
    7d1c:	2800      	cmp	r0, #0
    7d1e:	f6ff ad5e 	blt.w	77de <d_encoding+0x8e>
    7d22:	68ea      	ldr	r2, [r5, #12]
    7d24:	7811      	ldrb	r1, [r2, #0]
    7d26:	295f      	cmp	r1, #95	; 0x5f
    7d28:	f47f ad59 	bne.w	77de <d_encoding+0x8e>
    7d2c:	3201      	adds	r2, #1
    7d2e:	60ea      	str	r2, [r5, #12]
    7d30:	4628      	mov	r0, r5
    7d32:	f7ff f927 	bl	6f84 <d_type>
    7d36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    7d38:	1d59      	adds	r1, r3, #5
    7d3a:	6329      	str	r1, [r5, #48]	; 0x30
    7d3c:	4602      	mov	r2, r0
    7d3e:	4623      	mov	r3, r4
    7d40:	4628      	mov	r0, r5
    7d42:	210b      	movs	r1, #11
    7d44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d48:	f7fe bb6e 	b.w	6428 <d_make_comp>
    7d4c:	7873      	ldrb	r3, [r6, #1]
    7d4e:	2b53      	cmp	r3, #83	; 0x53
    7d50:	d027      	beq.n	7da2 <d_encoding+0x652>
    7d52:	2b5f      	cmp	r3, #95	; 0x5f
    7d54:	d023      	beq.n	7d9e <d_encoding+0x64e>
    7d56:	2b24      	cmp	r3, #36	; 0x24
    7d58:	f47f ad41 	bne.w	77de <d_encoding+0x8e>
    7d5c:	461c      	mov	r4, r3
    7d5e:	696b      	ldr	r3, [r5, #20]
    7d60:	69aa      	ldr	r2, [r5, #24]
    7d62:	4293      	cmp	r3, r2
    7d64:	da1f      	bge.n	7da6 <d_encoding+0x656>
    7d66:	692a      	ldr	r2, [r5, #16]
    7d68:	1c58      	adds	r0, r3, #1
    7d6a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    7d6e:	6168      	str	r0, [r5, #20]
    7d70:	eb12 0081 	adds.w	r0, r2, r1, lsl #2
    7d74:	d017      	beq.n	7da6 <d_encoding+0x656>
    7d76:	f802 9021 	strb.w	r9, [r2, r1, lsl #2]
    7d7a:	6044      	str	r4, [r0, #4]
    7d7c:	68ee      	ldr	r6, [r5, #12]
    7d7e:	3602      	adds	r6, #2
    7d80:	3f02      	subs	r7, #2
    7d82:	60ee      	str	r6, [r5, #12]
    7d84:	e6d2      	b.n	7b2c <d_encoding+0x3dc>
    7d86:	4680      	mov	r8, r0
    7d88:	e6de      	b.n	7b48 <d_encoding+0x3f8>
    7d8a:	f7ff fce1 	bl	7750 <d_encoding>
    7d8e:	2147      	movs	r1, #71	; 0x47
    7d90:	4602      	mov	r2, r0
    7d92:	2300      	movs	r3, #0
    7d94:	4628      	mov	r0, r5
    7d96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d9a:	f7fe bb45 	b.w	6428 <d_make_comp>
    7d9e:	242e      	movs	r4, #46	; 0x2e
    7da0:	e7dd      	b.n	7d5e <d_encoding+0x60e>
    7da2:	242f      	movs	r4, #47	; 0x2f
    7da4:	e7db      	b.n	7d5e <d_encoding+0x60e>
    7da6:	68eb      	ldr	r3, [r5, #12]
    7da8:	3302      	adds	r3, #2
    7daa:	60eb      	str	r3, [r5, #12]
    7dac:	e517      	b.n	77de <d_encoding+0x8e>
    7dae:	bf00      	nop

00007db0 <d_operator_name>:
    7db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7db4:	68c3      	ldr	r3, [r0, #12]
    7db6:	781f      	ldrb	r7, [r3, #0]
    7db8:	4680      	mov	r8, r0
    7dba:	b35f      	cbz	r7, 7e14 <d_operator_name+0x64>
    7dbc:	1c5a      	adds	r2, r3, #1
    7dbe:	60c2      	str	r2, [r0, #12]
    7dc0:	7858      	ldrb	r0, [r3, #1]
    7dc2:	781f      	ldrb	r7, [r3, #0]
    7dc4:	b118      	cbz	r0, 7dce <d_operator_name+0x1e>
    7dc6:	1c9a      	adds	r2, r3, #2
    7dc8:	f8c8 200c 	str.w	r2, [r8, #12]
    7dcc:	7858      	ldrb	r0, [r3, #1]
    7dce:	2f76      	cmp	r7, #118	; 0x76
    7dd0:	d141      	bne.n	7e56 <d_operator_name+0xa6>
    7dd2:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
    7dd6:	b2e3      	uxtb	r3, r4
    7dd8:	2b09      	cmp	r3, #9
    7dda:	d81c      	bhi.n	7e16 <d_operator_name+0x66>
    7ddc:	4640      	mov	r0, r8
    7dde:	f7fe fd9d 	bl	691c <d_source_name>
    7de2:	f8d8 3014 	ldr.w	r3, [r8, #20]
    7de6:	f8d8 2018 	ldr.w	r2, [r8, #24]
    7dea:	4293      	cmp	r3, r2
    7dec:	4601      	mov	r1, r0
    7dee:	da2f      	bge.n	7e50 <d_operator_name+0xa0>
    7df0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    7df4:	f8d8 0010 	ldr.w	r0, [r8, #16]
    7df8:	3301      	adds	r3, #1
    7dfa:	0092      	lsls	r2, r2, #2
    7dfc:	f8c8 3014 	str.w	r3, [r8, #20]
    7e00:	1883      	adds	r3, r0, r2
    7e02:	d025      	beq.n	7e50 <d_operator_name+0xa0>
    7e04:	b321      	cbz	r1, 7e50 <d_operator_name+0xa0>
    7e06:	2532      	movs	r5, #50	; 0x32
    7e08:	5485      	strb	r5, [r0, r2]
    7e0a:	605c      	str	r4, [r3, #4]
    7e0c:	6099      	str	r1, [r3, #8]
    7e0e:	4618      	mov	r0, r3
    7e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e14:	4638      	mov	r0, r7
    7e16:	4e24      	ldr	r6, [pc, #144]	; (7ea8 <d_operator_name+0xf8>)
    7e18:	243d      	movs	r4, #61	; 0x3d
    7e1a:	2300      	movs	r3, #0
    7e1c:	e004      	b.n	7e28 <d_operator_name+0x78>
    7e1e:	42ba      	cmp	r2, r7
    7e20:	d913      	bls.n	7e4a <d_operator_name+0x9a>
    7e22:	460c      	mov	r4, r1
    7e24:	42a3      	cmp	r3, r4
    7e26:	d013      	beq.n	7e50 <d_operator_name+0xa0>
    7e28:	1ae2      	subs	r2, r4, r3
    7e2a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    7e2e:	eb03 0162 	add.w	r1, r3, r2, asr #1
    7e32:	010a      	lsls	r2, r1, #4
    7e34:	eb06 0c02 	add.w	ip, r6, r2
    7e38:	58b5      	ldr	r5, [r6, r2]
    7e3a:	782a      	ldrb	r2, [r5, #0]
    7e3c:	4297      	cmp	r7, r2
    7e3e:	d1ee      	bne.n	7e1e <d_operator_name+0x6e>
    7e40:	786a      	ldrb	r2, [r5, #1]
    7e42:	4290      	cmp	r0, r2
    7e44:	d016      	beq.n	7e74 <d_operator_name+0xc4>
    7e46:	4282      	cmp	r2, r0
    7e48:	d8eb      	bhi.n	7e22 <d_operator_name+0x72>
    7e4a:	1c4b      	adds	r3, r1, #1
    7e4c:	42a3      	cmp	r3, r4
    7e4e:	d1eb      	bne.n	7e28 <d_operator_name+0x78>
    7e50:	2000      	movs	r0, #0
    7e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e56:	2f63      	cmp	r7, #99	; 0x63
    7e58:	d1dd      	bne.n	7e16 <d_operator_name+0x66>
    7e5a:	2876      	cmp	r0, #118	; 0x76
    7e5c:	d1db      	bne.n	7e16 <d_operator_name+0x66>
    7e5e:	4640      	mov	r0, r8
    7e60:	f7ff f890 	bl	6f84 <d_type>
    7e64:	2133      	movs	r1, #51	; 0x33
    7e66:	4602      	mov	r2, r0
    7e68:	2300      	movs	r3, #0
    7e6a:	4640      	mov	r0, r8
    7e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e70:	f7fe bada 	b.w	6428 <d_make_comp>
    7e74:	f8d8 3014 	ldr.w	r3, [r8, #20]
    7e78:	f8d8 2018 	ldr.w	r2, [r8, #24]
    7e7c:	4293      	cmp	r3, r2
    7e7e:	dae7      	bge.n	7e50 <d_operator_name+0xa0>
    7e80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    7e84:	f8d8 1010 	ldr.w	r1, [r8, #16]
    7e88:	3301      	adds	r3, #1
    7e8a:	0092      	lsls	r2, r2, #2
    7e8c:	f8c8 3014 	str.w	r3, [r8, #20]
    7e90:	188b      	adds	r3, r1, r2
    7e92:	d006      	beq.n	7ea2 <d_operator_name+0xf2>
    7e94:	2031      	movs	r0, #49	; 0x31
    7e96:	5488      	strb	r0, [r1, r2]
    7e98:	f8c3 c004 	str.w	ip, [r3, #4]
    7e9c:	4618      	mov	r0, r3
    7e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ea2:	4618      	mov	r0, r3
    7ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ea8:	00014b6c 	.word	0x00014b6c

00007eac <d_unqualified_name>:
    7eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eae:	68c2      	ldr	r2, [r0, #12]
    7eb0:	7813      	ldrb	r3, [r2, #0]
    7eb2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    7eb6:	2909      	cmp	r1, #9
    7eb8:	4604      	mov	r4, r0
    7eba:	d92e      	bls.n	7f1a <d_unqualified_name+0x6e>
    7ebc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    7ec0:	2919      	cmp	r1, #25
    7ec2:	d933      	bls.n	7f2c <d_unqualified_name+0x80>
    7ec4:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
    7ec8:	2901      	cmp	r1, #1
    7eca:	d971      	bls.n	7fb0 <d_unqualified_name+0x104>
    7ecc:	2b4c      	cmp	r3, #76	; 0x4c
    7ece:	f000 8087 	beq.w	7fe0 <d_unqualified_name+0x134>
    7ed2:	2b55      	cmp	r3, #85	; 0x55
    7ed4:	f040 808f 	bne.w	7ff6 <d_unqualified_name+0x14a>
    7ed8:	7853      	ldrb	r3, [r2, #1]
    7eda:	2b6c      	cmp	r3, #108	; 0x6c
    7edc:	d030      	beq.n	7f40 <d_unqualified_name+0x94>
    7ede:	2b74      	cmp	r3, #116	; 0x74
    7ee0:	f040 8089 	bne.w	7ff6 <d_unqualified_name+0x14a>
    7ee4:	1c53      	adds	r3, r2, #1
    7ee6:	60c3      	str	r3, [r0, #12]
    7ee8:	7851      	ldrb	r1, [r2, #1]
    7eea:	2974      	cmp	r1, #116	; 0x74
    7eec:	f000 80c3 	beq.w	8076 <d_unqualified_name+0x1ca>
    7ef0:	2942      	cmp	r1, #66	; 0x42
    7ef2:	f04f 0500 	mov.w	r5, #0
    7ef6:	d117      	bne.n	7f28 <d_unqualified_name+0x7c>
    7ef8:	3301      	adds	r3, #1
    7efa:	60e3      	str	r3, [r4, #12]
    7efc:	4620      	mov	r0, r4
    7efe:	f7fe fd0d 	bl	691c <d_source_name>
    7f02:	462a      	mov	r2, r5
    7f04:	4603      	mov	r3, r0
    7f06:	214a      	movs	r1, #74	; 0x4a
    7f08:	4620      	mov	r0, r4
    7f0a:	f7fe fa8d 	bl	6428 <d_make_comp>
    7f0e:	68e3      	ldr	r3, [r4, #12]
    7f10:	781a      	ldrb	r2, [r3, #0]
    7f12:	2a42      	cmp	r2, #66	; 0x42
    7f14:	4605      	mov	r5, r0
    7f16:	d0ef      	beq.n	7ef8 <d_unqualified_name+0x4c>
    7f18:	e006      	b.n	7f28 <d_unqualified_name+0x7c>
    7f1a:	f7fe fcff 	bl	691c <d_source_name>
    7f1e:	68e3      	ldr	r3, [r4, #12]
    7f20:	7819      	ldrb	r1, [r3, #0]
    7f22:	4605      	mov	r5, r0
    7f24:	2942      	cmp	r1, #66	; 0x42
    7f26:	d0e7      	beq.n	7ef8 <d_unqualified_name+0x4c>
    7f28:	4628      	mov	r0, r5
    7f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f2c:	f7ff ff40 	bl	7db0 <d_operator_name>
    7f30:	4605      	mov	r5, r0
    7f32:	b110      	cbz	r0, 7f3a <d_unqualified_name+0x8e>
    7f34:	7803      	ldrb	r3, [r0, #0]
    7f36:	2b31      	cmp	r3, #49	; 0x31
    7f38:	d05f      	beq.n	7ffa <d_unqualified_name+0x14e>
    7f3a:	68e3      	ldr	r3, [r4, #12]
    7f3c:	7819      	ldrb	r1, [r3, #0]
    7f3e:	e7f1      	b.n	7f24 <d_unqualified_name+0x78>
    7f40:	1c53      	adds	r3, r2, #1
    7f42:	60c3      	str	r3, [r0, #12]
    7f44:	7851      	ldrb	r1, [r2, #1]
    7f46:	296c      	cmp	r1, #108	; 0x6c
    7f48:	d1d2      	bne.n	7ef0 <d_unqualified_name+0x44>
    7f4a:	3202      	adds	r2, #2
    7f4c:	60c2      	str	r2, [r0, #12]
    7f4e:	f7ff fb9d 	bl	768c <d_parmlist>
    7f52:	68e3      	ldr	r3, [r4, #12]
    7f54:	4606      	mov	r6, r0
    7f56:	2800      	cmp	r0, #0
    7f58:	f000 80e1 	beq.w	811e <d_unqualified_name+0x272>
    7f5c:	7819      	ldrb	r1, [r3, #0]
    7f5e:	2945      	cmp	r1, #69	; 0x45
    7f60:	d1c6      	bne.n	7ef0 <d_unqualified_name+0x44>
    7f62:	3301      	adds	r3, #1
    7f64:	60e3      	str	r3, [r4, #12]
    7f66:	4620      	mov	r0, r4
    7f68:	f7fe fc8e 	bl	6888 <d_compact_number>
    7f6c:	2800      	cmp	r0, #0
    7f6e:	f2c0 809c 	blt.w	80aa <d_unqualified_name+0x1fe>
    7f72:	6963      	ldr	r3, [r4, #20]
    7f74:	69a2      	ldr	r2, [r4, #24]
    7f76:	4293      	cmp	r3, r2
    7f78:	f280 8097 	bge.w	80aa <d_unqualified_name+0x1fe>
    7f7c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    7f80:	6921      	ldr	r1, [r4, #16]
    7f82:	0092      	lsls	r2, r2, #2
    7f84:	3301      	adds	r3, #1
    7f86:	188d      	adds	r5, r1, r2
    7f88:	6163      	str	r3, [r4, #20]
    7f8a:	f000 808e 	beq.w	80aa <d_unqualified_name+0x1fe>
    7f8e:	2344      	movs	r3, #68	; 0x44
    7f90:	548b      	strb	r3, [r1, r2]
    7f92:	606e      	str	r6, [r5, #4]
    7f94:	60a8      	str	r0, [r5, #8]
    7f96:	6a23      	ldr	r3, [r4, #32]
    7f98:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7f9a:	4293      	cmp	r3, r2
    7f9c:	f280 8085 	bge.w	80aa <d_unqualified_name+0x1fe>
    7fa0:	69e2      	ldr	r2, [r4, #28]
    7fa2:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    7fa6:	1c5a      	adds	r2, r3, #1
    7fa8:	68e3      	ldr	r3, [r4, #12]
    7faa:	6222      	str	r2, [r4, #32]
    7fac:	7819      	ldrb	r1, [r3, #0]
    7fae:	e7b9      	b.n	7f24 <d_unqualified_name+0x78>
    7fb0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    7fb2:	2800      	cmp	r0, #0
    7fb4:	d03c      	beq.n	8030 <d_unqualified_name+0x184>
    7fb6:	7801      	ldrb	r1, [r0, #0]
    7fb8:	2900      	cmp	r1, #0
    7fba:	d137      	bne.n	802c <d_unqualified_name+0x180>
    7fbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7fbe:	6883      	ldr	r3, [r0, #8]
    7fc0:	440b      	add	r3, r1
    7fc2:	6323      	str	r3, [r4, #48]	; 0x30
    7fc4:	7811      	ldrb	r1, [r2, #0]
    7fc6:	2943      	cmp	r1, #67	; 0x43
    7fc8:	d078      	beq.n	80bc <d_unqualified_name+0x210>
    7fca:	2944      	cmp	r1, #68	; 0x44
    7fcc:	d173      	bne.n	80b6 <d_unqualified_name+0x20a>
    7fce:	7853      	ldrb	r3, [r2, #1]
    7fd0:	3b30      	subs	r3, #48	; 0x30
    7fd2:	2b05      	cmp	r3, #5
    7fd4:	d84d      	bhi.n	8072 <d_unqualified_name+0x1c6>
    7fd6:	e8df f003 	tbb	[pc, r3]
    7fda:	2d48      	.short	0x2d48
    7fdc:	4a4c4c46 	.word	0x4a4c4c46
    7fe0:	3201      	adds	r2, #1
    7fe2:	60c2      	str	r2, [r0, #12]
    7fe4:	f7fe fc9a 	bl	691c <d_source_name>
    7fe8:	4605      	mov	r5, r0
    7fea:	b120      	cbz	r0, 7ff6 <d_unqualified_name+0x14a>
    7fec:	4620      	mov	r0, r4
    7fee:	f7fe fc85 	bl	68fc <d_discriminator>
    7ff2:	2800      	cmp	r0, #0
    7ff4:	d1a1      	bne.n	7f3a <d_unqualified_name+0x8e>
    7ff6:	2000      	movs	r0, #0
    7ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ffa:	6843      	ldr	r3, [r0, #4]
    7ffc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7ffe:	689e      	ldr	r6, [r3, #8]
    8000:	6818      	ldr	r0, [r3, #0]
    8002:	4948      	ldr	r1, [pc, #288]	; (8124 <d_unqualified_name+0x278>)
    8004:	4432      	add	r2, r6
    8006:	3207      	adds	r2, #7
    8008:	6322      	str	r2, [r4, #48]	; 0x30
    800a:	f007 fff5 	bl	fff8 <strcmp>
    800e:	2800      	cmp	r0, #0
    8010:	d193      	bne.n	7f3a <d_unqualified_name+0x8e>
    8012:	4620      	mov	r0, r4
    8014:	f7fe fc82 	bl	691c <d_source_name>
    8018:	462a      	mov	r2, r5
    801a:	4603      	mov	r3, r0
    801c:	2135      	movs	r1, #53	; 0x35
    801e:	4620      	mov	r0, r4
    8020:	f7fe fa02 	bl	6428 <d_make_comp>
    8024:	68e3      	ldr	r3, [r4, #12]
    8026:	4605      	mov	r5, r0
    8028:	7819      	ldrb	r1, [r3, #0]
    802a:	e77b      	b.n	7f24 <d_unqualified_name+0x78>
    802c:	2918      	cmp	r1, #24
    802e:	d0c5      	beq.n	7fbc <d_unqualified_name+0x110>
    8030:	4619      	mov	r1, r3
    8032:	e7c8      	b.n	7fc6 <d_unqualified_name+0x11a>
    8034:	2702      	movs	r7, #2
    8036:	6961      	ldr	r1, [r4, #20]
    8038:	69a5      	ldr	r5, [r4, #24]
    803a:	1c93      	adds	r3, r2, #2
    803c:	42a9      	cmp	r1, r5
    803e:	60e3      	str	r3, [r4, #12]
    8040:	da37      	bge.n	80b2 <d_unqualified_name+0x206>
    8042:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    8046:	6926      	ldr	r6, [r4, #16]
    8048:	3101      	adds	r1, #1
    804a:	00ad      	lsls	r5, r5, #2
    804c:	6161      	str	r1, [r4, #20]
    804e:	1971      	adds	r1, r6, r5
    8050:	d02f      	beq.n	80b2 <d_unqualified_name+0x206>
    8052:	b370      	cbz	r0, 80b2 <d_unqualified_name+0x206>
    8054:	f04f 0c08 	mov.w	ip, #8
    8058:	f806 c005 	strb.w	ip, [r6, r5]
    805c:	460d      	mov	r5, r1
    805e:	710f      	strb	r7, [r1, #4]
    8060:	6088      	str	r0, [r1, #8]
    8062:	7891      	ldrb	r1, [r2, #2]
    8064:	e75e      	b.n	7f24 <d_unqualified_name+0x78>
    8066:	2703      	movs	r7, #3
    8068:	e7e5      	b.n	8036 <d_unqualified_name+0x18a>
    806a:	2701      	movs	r7, #1
    806c:	e7e3      	b.n	8036 <d_unqualified_name+0x18a>
    806e:	2704      	movs	r7, #4
    8070:	e7e1      	b.n	8036 <d_unqualified_name+0x18a>
    8072:	2500      	movs	r5, #0
    8074:	e758      	b.n	7f28 <d_unqualified_name+0x7c>
    8076:	3202      	adds	r2, #2
    8078:	60c2      	str	r2, [r0, #12]
    807a:	f7fe fc05 	bl	6888 <d_compact_number>
    807e:	2800      	cmp	r0, #0
    8080:	db13      	blt.n	80aa <d_unqualified_name+0x1fe>
    8082:	6963      	ldr	r3, [r4, #20]
    8084:	69a2      	ldr	r2, [r4, #24]
    8086:	4293      	cmp	r3, r2
    8088:	da0f      	bge.n	80aa <d_unqualified_name+0x1fe>
    808a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    808e:	6921      	ldr	r1, [r4, #16]
    8090:	0092      	lsls	r2, r2, #2
    8092:	3301      	adds	r3, #1
    8094:	188d      	adds	r5, r1, r2
    8096:	6163      	str	r3, [r4, #20]
    8098:	d007      	beq.n	80aa <d_unqualified_name+0x1fe>
    809a:	2346      	movs	r3, #70	; 0x46
    809c:	548b      	strb	r3, [r1, r2]
    809e:	6068      	str	r0, [r5, #4]
    80a0:	6a23      	ldr	r3, [r4, #32]
    80a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    80a4:	4293      	cmp	r3, r2
    80a6:	f6ff af7b 	blt.w	7fa0 <d_unqualified_name+0xf4>
    80aa:	68e3      	ldr	r3, [r4, #12]
    80ac:	2500      	movs	r5, #0
    80ae:	7819      	ldrb	r1, [r3, #0]
    80b0:	e738      	b.n	7f24 <d_unqualified_name+0x78>
    80b2:	2500      	movs	r5, #0
    80b4:	e7d5      	b.n	8062 <d_unqualified_name+0x1b6>
    80b6:	4613      	mov	r3, r2
    80b8:	2500      	movs	r5, #0
    80ba:	e733      	b.n	7f24 <d_unqualified_name+0x78>
    80bc:	7853      	ldrb	r3, [r2, #1]
    80be:	3b31      	subs	r3, #49	; 0x31
    80c0:	2b04      	cmp	r3, #4
    80c2:	d8d6      	bhi.n	8072 <d_unqualified_name+0x1c6>
    80c4:	a101      	add	r1, pc, #4	; (adr r1, 80cc <d_unqualified_name+0x220>)
    80c6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    80ca:	bf00      	nop
    80cc:	00008113 	.word	0x00008113
    80d0:	000080e1 	.word	0x000080e1
    80d4:	0000811b 	.word	0x0000811b
    80d8:	00008073 	.word	0x00008073
    80dc:	00008117 	.word	0x00008117
    80e0:	2702      	movs	r7, #2
    80e2:	6961      	ldr	r1, [r4, #20]
    80e4:	69a5      	ldr	r5, [r4, #24]
    80e6:	1c93      	adds	r3, r2, #2
    80e8:	42a9      	cmp	r1, r5
    80ea:	60e3      	str	r3, [r4, #12]
    80ec:	dae1      	bge.n	80b2 <d_unqualified_name+0x206>
    80ee:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    80f2:	6926      	ldr	r6, [r4, #16]
    80f4:	3101      	adds	r1, #1
    80f6:	00ad      	lsls	r5, r5, #2
    80f8:	6161      	str	r1, [r4, #20]
    80fa:	1971      	adds	r1, r6, r5
    80fc:	d0d9      	beq.n	80b2 <d_unqualified_name+0x206>
    80fe:	2800      	cmp	r0, #0
    8100:	d0d7      	beq.n	80b2 <d_unqualified_name+0x206>
    8102:	f04f 0c07 	mov.w	ip, #7
    8106:	f806 c005 	strb.w	ip, [r6, r5]
    810a:	460d      	mov	r5, r1
    810c:	710f      	strb	r7, [r1, #4]
    810e:	6088      	str	r0, [r1, #8]
    8110:	e7a7      	b.n	8062 <d_unqualified_name+0x1b6>
    8112:	2701      	movs	r7, #1
    8114:	e7e5      	b.n	80e2 <d_unqualified_name+0x236>
    8116:	2704      	movs	r7, #4
    8118:	e7e3      	b.n	80e2 <d_unqualified_name+0x236>
    811a:	2703      	movs	r7, #3
    811c:	e7e1      	b.n	80e2 <d_unqualified_name+0x236>
    811e:	4605      	mov	r5, r0
    8120:	7819      	ldrb	r1, [r3, #0]
    8122:	e6ff      	b.n	7f24 <d_unqualified_name+0x78>
    8124:	00014f8c 	.word	0x00014f8c

00008128 <d_expression>:
    8128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    812c:	68c1      	ldr	r1, [r0, #12]
    812e:	780b      	ldrb	r3, [r1, #0]
    8130:	2b4c      	cmp	r3, #76	; 0x4c
    8132:	4604      	mov	r4, r0
    8134:	f000 809e 	beq.w	8274 <d_expression+0x14c>
    8138:	2b54      	cmp	r3, #84	; 0x54
    813a:	f000 809f 	beq.w	827c <d_expression+0x154>
    813e:	2b73      	cmp	r3, #115	; 0x73
    8140:	d057      	beq.n	81f2 <d_expression+0xca>
    8142:	2b66      	cmp	r3, #102	; 0x66
    8144:	d02d      	beq.n	81a2 <d_expression+0x7a>
    8146:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    814a:	2a09      	cmp	r2, #9
    814c:	d80d      	bhi.n	816a <d_expression+0x42>
    814e:	4620      	mov	r0, r4
    8150:	f7ff feac 	bl	7eac <d_unqualified_name>
    8154:	4605      	mov	r5, r0
    8156:	2800      	cmp	r0, #0
    8158:	f000 8083 	beq.w	8262 <d_expression+0x13a>
    815c:	68e3      	ldr	r3, [r4, #12]
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	2b49      	cmp	r3, #73	; 0x49
    8162:	f000 80a3 	beq.w	82ac <d_expression+0x184>
    8166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    816a:	2b6f      	cmp	r3, #111	; 0x6f
    816c:	d07c      	beq.n	8268 <d_expression+0x140>
    816e:	2b69      	cmp	r3, #105	; 0x69
    8170:	f000 80a7 	beq.w	82c2 <d_expression+0x19a>
    8174:	2b74      	cmp	r3, #116	; 0x74
    8176:	d117      	bne.n	81a8 <d_expression+0x80>
    8178:	784b      	ldrb	r3, [r1, #1]
    817a:	2b6c      	cmp	r3, #108	; 0x6c
    817c:	d114      	bne.n	81a8 <d_expression+0x80>
    817e:	f7fe ff01 	bl	6f84 <d_type>
    8182:	68e1      	ldr	r1, [r4, #12]
    8184:	4605      	mov	r5, r0
    8186:	3102      	adds	r1, #2
    8188:	60e1      	str	r1, [r4, #12]
    818a:	4620      	mov	r0, r4
    818c:	2145      	movs	r1, #69	; 0x45
    818e:	f000 f9a9 	bl	84e4 <d_exprlist>
    8192:	462a      	mov	r2, r5
    8194:	4603      	mov	r3, r0
    8196:	2130      	movs	r1, #48	; 0x30
    8198:	4620      	mov	r0, r4
    819a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    819e:	f7fe b943 	b.w	6428 <d_make_comp>
    81a2:	784b      	ldrb	r3, [r1, #1]
    81a4:	2b70      	cmp	r3, #112	; 0x70
    81a6:	d040      	beq.n	822a <d_expression+0x102>
    81a8:	4620      	mov	r0, r4
    81aa:	f7ff fe01 	bl	7db0 <d_operator_name>
    81ae:	4605      	mov	r5, r0
    81b0:	2800      	cmp	r0, #0
    81b2:	d056      	beq.n	8262 <d_expression+0x13a>
    81b4:	7806      	ldrb	r6, [r0, #0]
    81b6:	2e31      	cmp	r6, #49	; 0x31
    81b8:	d064      	beq.n	8284 <d_expression+0x15c>
    81ba:	2e32      	cmp	r6, #50	; 0x32
    81bc:	d02b      	beq.n	8216 <d_expression+0xee>
    81be:	2e33      	cmp	r6, #51	; 0x33
    81c0:	d14f      	bne.n	8262 <d_expression+0x13a>
    81c2:	2700      	movs	r7, #0
    81c4:	68e3      	ldr	r3, [r4, #12]
    81c6:	781a      	ldrb	r2, [r3, #0]
    81c8:	2a5f      	cmp	r2, #95	; 0x5f
    81ca:	f000 810d 	beq.w	83e8 <d_expression+0x2c0>
    81ce:	4620      	mov	r0, r4
    81d0:	f7ff ffaa 	bl	8128 <d_expression>
    81d4:	4603      	mov	r3, r0
    81d6:	b12f      	cbz	r7, 81e4 <d_expression+0xbc>
    81d8:	461a      	mov	r2, r3
    81da:	4620      	mov	r0, r4
    81dc:	2137      	movs	r1, #55	; 0x37
    81de:	f7fe f923 	bl	6428 <d_make_comp>
    81e2:	4603      	mov	r3, r0
    81e4:	4620      	mov	r0, r4
    81e6:	462a      	mov	r2, r5
    81e8:	2135      	movs	r1, #53	; 0x35
    81ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    81ee:	f7fe b91b 	b.w	6428 <d_make_comp>
    81f2:	784b      	ldrb	r3, [r1, #1]
    81f4:	2b72      	cmp	r3, #114	; 0x72
    81f6:	f000 80de 	beq.w	83b6 <d_expression+0x28e>
    81fa:	2b70      	cmp	r3, #112	; 0x70
    81fc:	d1d4      	bne.n	81a8 <d_expression+0x80>
    81fe:	3102      	adds	r1, #2
    8200:	60c1      	str	r1, [r0, #12]
    8202:	f7ff ff91 	bl	8128 <d_expression>
    8206:	2149      	movs	r1, #73	; 0x49
    8208:	4602      	mov	r2, r0
    820a:	2300      	movs	r3, #0
    820c:	4620      	mov	r0, r4
    820e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8212:	f7fe b909 	b.w	6428 <d_make_comp>
    8216:	6843      	ldr	r3, [r0, #4]
    8218:	2700      	movs	r7, #0
    821a:	2b03      	cmp	r3, #3
    821c:	d821      	bhi.n	8262 <d_expression+0x13a>
    821e:	e8df f013 	tbh	[pc, r3, lsl #1]
    8222:	0056      	.short	0x0056
    8224:	009a013f 	.word	0x009a013f
    8228:	005e      	.short	0x005e
    822a:	1c8b      	adds	r3, r1, #2
    822c:	60c3      	str	r3, [r0, #12]
    822e:	788b      	ldrb	r3, [r1, #2]
    8230:	2b54      	cmp	r3, #84	; 0x54
    8232:	f000 80d5 	beq.w	83e0 <d_expression+0x2b8>
    8236:	f7fe fb27 	bl	6888 <d_compact_number>
    823a:	1c45      	adds	r5, r0, #1
    823c:	d011      	beq.n	8262 <d_expression+0x13a>
    823e:	6963      	ldr	r3, [r4, #20]
    8240:	69a2      	ldr	r2, [r4, #24]
    8242:	4293      	cmp	r3, r2
    8244:	da0d      	bge.n	8262 <d_expression+0x13a>
    8246:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    824a:	6921      	ldr	r1, [r4, #16]
    824c:	3301      	adds	r3, #1
    824e:	0092      	lsls	r2, r2, #2
    8250:	6163      	str	r3, [r4, #20]
    8252:	188b      	adds	r3, r1, r2
    8254:	d005      	beq.n	8262 <d_expression+0x13a>
    8256:	2006      	movs	r0, #6
    8258:	5488      	strb	r0, [r1, r2]
    825a:	605d      	str	r5, [r3, #4]
    825c:	4618      	mov	r0, r3
    825e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8262:	2000      	movs	r0, #0
    8264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8268:	784b      	ldrb	r3, [r1, #1]
    826a:	2b6e      	cmp	r3, #110	; 0x6e
    826c:	d19c      	bne.n	81a8 <d_expression+0x80>
    826e:	3102      	adds	r1, #2
    8270:	60c1      	str	r1, [r0, #12]
    8272:	e76c      	b.n	814e <d_expression+0x26>
    8274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8278:	f7fe bc60 	b.w	6b3c <d_expr_primary>
    827c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8280:	f7fe bb1a 	b.w	68b8 <d_template_param>
    8284:	f8d0 8004 	ldr.w	r8, [r0, #4]
    8288:	6b23      	ldr	r3, [r4, #48]	; 0x30
    828a:	f8d8 2008 	ldr.w	r2, [r8, #8]
    828e:	f8d8 7000 	ldr.w	r7, [r8]
    8292:	498f      	ldr	r1, [pc, #572]	; (84d0 <d_expression+0x3a8>)
    8294:	3a02      	subs	r2, #2
    8296:	4413      	add	r3, r2
    8298:	6323      	str	r3, [r4, #48]	; 0x30
    829a:	4638      	mov	r0, r7
    829c:	f007 feac 	bl	fff8 <strcmp>
    82a0:	2800      	cmp	r0, #0
    82a2:	f000 80a9 	beq.w	83f8 <d_expression+0x2d0>
    82a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
    82aa:	e7b6      	b.n	821a <d_expression+0xf2>
    82ac:	4620      	mov	r0, r4
    82ae:	f7fe fcab 	bl	6c08 <d_template_args>
    82b2:	462a      	mov	r2, r5
    82b4:	4603      	mov	r3, r0
    82b6:	2104      	movs	r1, #4
    82b8:	4620      	mov	r0, r4
    82ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    82be:	f7fe b8b3 	b.w	6428 <d_make_comp>
    82c2:	784b      	ldrb	r3, [r1, #1]
    82c4:	2b6c      	cmp	r3, #108	; 0x6c
    82c6:	f47f af6f 	bne.w	81a8 <d_expression+0x80>
    82ca:	2500      	movs	r5, #0
    82cc:	e75b      	b.n	8186 <d_expression+0x5e>
    82ce:	4620      	mov	r0, r4
    82d0:	462a      	mov	r2, r5
    82d2:	2134      	movs	r1, #52	; 0x34
    82d4:	2300      	movs	r3, #0
    82d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    82da:	f7fe b8a5 	b.w	6428 <d_make_comp>
    82de:	4638      	mov	r0, r7
    82e0:	497c      	ldr	r1, [pc, #496]	; (84d4 <d_expression+0x3ac>)
    82e2:	f007 fe89 	bl	fff8 <strcmp>
    82e6:	2800      	cmp	r0, #0
    82e8:	f000 808a 	beq.w	8400 <d_expression+0x2d8>
    82ec:	783b      	ldrb	r3, [r7, #0]
    82ee:	2b6e      	cmp	r3, #110	; 0x6e
    82f0:	d1b7      	bne.n	8262 <d_expression+0x13a>
    82f2:	787b      	ldrb	r3, [r7, #1]
    82f4:	2b77      	cmp	r3, #119	; 0x77
    82f6:	d001      	beq.n	82fc <d_expression+0x1d4>
    82f8:	2b61      	cmp	r3, #97	; 0x61
    82fa:	d1b2      	bne.n	8262 <d_expression+0x13a>
    82fc:	215f      	movs	r1, #95	; 0x5f
    82fe:	4620      	mov	r0, r4
    8300:	f000 f8f0 	bl	84e4 <d_exprlist>
    8304:	4606      	mov	r6, r0
    8306:	4620      	mov	r0, r4
    8308:	f7fe fe3c 	bl	6f84 <d_type>
    830c:	68e1      	ldr	r1, [r4, #12]
    830e:	780b      	ldrb	r3, [r1, #0]
    8310:	2b45      	cmp	r3, #69	; 0x45
    8312:	4607      	mov	r7, r0
    8314:	f000 80a9 	beq.w	846a <d_expression+0x342>
    8318:	2b70      	cmp	r3, #112	; 0x70
    831a:	f000 80b5 	beq.w	8488 <d_expression+0x360>
    831e:	2b69      	cmp	r3, #105	; 0x69
    8320:	d19f      	bne.n	8262 <d_expression+0x13a>
    8322:	784b      	ldrb	r3, [r1, #1]
    8324:	2b6c      	cmp	r3, #108	; 0x6c
    8326:	d19c      	bne.n	8262 <d_expression+0x13a>
    8328:	4620      	mov	r0, r4
    832a:	f7ff fefd 	bl	8128 <d_expression>
    832e:	4603      	mov	r3, r0
    8330:	463a      	mov	r2, r7
    8332:	4620      	mov	r0, r4
    8334:	213a      	movs	r1, #58	; 0x3a
    8336:	f7fe f877 	bl	6428 <d_make_comp>
    833a:	4632      	mov	r2, r6
    833c:	4603      	mov	r3, r0
    833e:	2139      	movs	r1, #57	; 0x39
    8340:	4620      	mov	r0, r4
    8342:	f7fe f871 	bl	6428 <d_make_comp>
    8346:	462a      	mov	r2, r5
    8348:	4603      	mov	r3, r0
    834a:	2138      	movs	r1, #56	; 0x38
    834c:	4620      	mov	r0, r4
    834e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8352:	f7fe b869 	b.w	6428 <d_make_comp>
    8356:	686b      	ldr	r3, [r5, #4]
    8358:	681b      	ldr	r3, [r3, #0]
    835a:	785a      	ldrb	r2, [r3, #1]
    835c:	2a63      	cmp	r2, #99	; 0x63
    835e:	d062      	beq.n	8426 <d_expression+0x2fe>
    8360:	4620      	mov	r0, r4
    8362:	f7ff fee1 	bl	8128 <d_expression>
    8366:	4680      	mov	r8, r0
    8368:	4638      	mov	r0, r7
    836a:	495b      	ldr	r1, [pc, #364]	; (84d8 <d_expression+0x3b0>)
    836c:	f007 fe44 	bl	fff8 <strcmp>
    8370:	2800      	cmp	r0, #0
    8372:	d052      	beq.n	841a <d_expression+0x2f2>
    8374:	4638      	mov	r0, r7
    8376:	4959      	ldr	r1, [pc, #356]	; (84dc <d_expression+0x3b4>)
    8378:	f007 fe3e 	bl	fff8 <strcmp>
    837c:	b128      	cbz	r0, 838a <d_expression+0x262>
    837e:	4638      	mov	r0, r7
    8380:	4957      	ldr	r1, [pc, #348]	; (84e0 <d_expression+0x3b8>)
    8382:	f007 fe39 	bl	fff8 <strcmp>
    8386:	2800      	cmp	r0, #0
    8388:	d16a      	bne.n	8460 <d_expression+0x338>
    838a:	4620      	mov	r0, r4
    838c:	f7ff fd8e 	bl	7eac <d_unqualified_name>
    8390:	68e3      	ldr	r3, [r4, #12]
    8392:	781b      	ldrb	r3, [r3, #0]
    8394:	2b49      	cmp	r3, #73	; 0x49
    8396:	4606      	mov	r6, r0
    8398:	d06b      	beq.n	8472 <d_expression+0x34a>
    839a:	4642      	mov	r2, r8
    839c:	4633      	mov	r3, r6
    839e:	4620      	mov	r0, r4
    83a0:	2137      	movs	r1, #55	; 0x37
    83a2:	f7fe f841 	bl	6428 <d_make_comp>
    83a6:	462a      	mov	r2, r5
    83a8:	4603      	mov	r3, r0
    83aa:	2136      	movs	r1, #54	; 0x36
    83ac:	4620      	mov	r0, r4
    83ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    83b2:	f7fe b839 	b.w	6428 <d_make_comp>
    83b6:	3102      	adds	r1, #2
    83b8:	60c1      	str	r1, [r0, #12]
    83ba:	f7fe fde3 	bl	6f84 <d_type>
    83be:	4605      	mov	r5, r0
    83c0:	4620      	mov	r0, r4
    83c2:	f7ff fd73 	bl	7eac <d_unqualified_name>
    83c6:	68e1      	ldr	r1, [r4, #12]
    83c8:	7809      	ldrb	r1, [r1, #0]
    83ca:	2949      	cmp	r1, #73	; 0x49
    83cc:	4606      	mov	r6, r0
    83ce:	4620      	mov	r0, r4
    83d0:	d036      	beq.n	8440 <d_expression+0x318>
    83d2:	462a      	mov	r2, r5
    83d4:	4633      	mov	r3, r6
    83d6:	2101      	movs	r1, #1
    83d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    83dc:	f7fe b824 	b.w	6428 <d_make_comp>
    83e0:	3103      	adds	r1, #3
    83e2:	60c1      	str	r1, [r0, #12]
    83e4:	2500      	movs	r5, #0
    83e6:	e72a      	b.n	823e <d_expression+0x116>
    83e8:	3301      	adds	r3, #1
    83ea:	60e3      	str	r3, [r4, #12]
    83ec:	4620      	mov	r0, r4
    83ee:	2145      	movs	r1, #69	; 0x45
    83f0:	f000 f878 	bl	84e4 <d_exprlist>
    83f4:	4603      	mov	r3, r0
    83f6:	e6ee      	b.n	81d6 <d_expression+0xae>
    83f8:	4620      	mov	r0, r4
    83fa:	f7fe fdc3 	bl	6f84 <d_type>
    83fe:	e6f0      	b.n	81e2 <d_expression+0xba>
    8400:	4620      	mov	r0, r4
    8402:	f7ff fe91 	bl	8128 <d_expression>
    8406:	4606      	mov	r6, r0
    8408:	4620      	mov	r0, r4
    840a:	f7ff fe8d 	bl	8128 <d_expression>
    840e:	4607      	mov	r7, r0
    8410:	4620      	mov	r0, r4
    8412:	f7ff fe89 	bl	8128 <d_expression>
    8416:	4603      	mov	r3, r0
    8418:	e78a      	b.n	8330 <d_expression+0x208>
    841a:	4620      	mov	r0, r4
    841c:	2145      	movs	r1, #69	; 0x45
    841e:	f000 f861 	bl	84e4 <d_exprlist>
    8422:	4606      	mov	r6, r0
    8424:	e7b9      	b.n	839a <d_expression+0x272>
    8426:	781b      	ldrb	r3, [r3, #0]
    8428:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
    842c:	2a01      	cmp	r2, #1
    842e:	d902      	bls.n	8436 <d_expression+0x30e>
    8430:	3b72      	subs	r3, #114	; 0x72
    8432:	2b01      	cmp	r3, #1
    8434:	d894      	bhi.n	8360 <d_expression+0x238>
    8436:	4620      	mov	r0, r4
    8438:	f7fe fda4 	bl	6f84 <d_type>
    843c:	4680      	mov	r8, r0
    843e:	e793      	b.n	8368 <d_expression+0x240>
    8440:	f7fe fbe2 	bl	6c08 <d_template_args>
    8444:	4632      	mov	r2, r6
    8446:	4603      	mov	r3, r0
    8448:	2104      	movs	r1, #4
    844a:	4620      	mov	r0, r4
    844c:	f7fd ffec 	bl	6428 <d_make_comp>
    8450:	462a      	mov	r2, r5
    8452:	4603      	mov	r3, r0
    8454:	2101      	movs	r1, #1
    8456:	4620      	mov	r0, r4
    8458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    845c:	f7fd bfe4 	b.w	6428 <d_make_comp>
    8460:	4620      	mov	r0, r4
    8462:	f7ff fe61 	bl	8128 <d_expression>
    8466:	4606      	mov	r6, r0
    8468:	e797      	b.n	839a <d_expression+0x272>
    846a:	3101      	adds	r1, #1
    846c:	60e1      	str	r1, [r4, #12]
    846e:	2300      	movs	r3, #0
    8470:	e75e      	b.n	8330 <d_expression+0x208>
    8472:	4620      	mov	r0, r4
    8474:	f7fe fbc8 	bl	6c08 <d_template_args>
    8478:	4632      	mov	r2, r6
    847a:	4603      	mov	r3, r0
    847c:	2104      	movs	r1, #4
    847e:	4620      	mov	r0, r4
    8480:	f7fd ffd2 	bl	6428 <d_make_comp>
    8484:	4606      	mov	r6, r0
    8486:	e788      	b.n	839a <d_expression+0x272>
    8488:	784b      	ldrb	r3, [r1, #1]
    848a:	2b69      	cmp	r3, #105	; 0x69
    848c:	f47f aee9 	bne.w	8262 <d_expression+0x13a>
    8490:	3102      	adds	r1, #2
    8492:	60e1      	str	r1, [r4, #12]
    8494:	4620      	mov	r0, r4
    8496:	2145      	movs	r1, #69	; 0x45
    8498:	f000 f824 	bl	84e4 <d_exprlist>
    849c:	4603      	mov	r3, r0
    849e:	e747      	b.n	8330 <d_expression+0x208>
    84a0:	b12f      	cbz	r7, 84ae <d_expression+0x386>
    84a2:	783b      	ldrb	r3, [r7, #0]
    84a4:	2b70      	cmp	r3, #112	; 0x70
    84a6:	d006      	beq.n	84b6 <d_expression+0x38e>
    84a8:	2b6d      	cmp	r3, #109	; 0x6d
    84aa:	d004      	beq.n	84b6 <d_expression+0x38e>
    84ac:	2700      	movs	r7, #0
    84ae:	2e33      	cmp	r6, #51	; 0x33
    84b0:	f47f ae8d 	bne.w	81ce <d_expression+0xa6>
    84b4:	e686      	b.n	81c4 <d_expression+0x9c>
    84b6:	787a      	ldrb	r2, [r7, #1]
    84b8:	429a      	cmp	r2, r3
    84ba:	d1f7      	bne.n	84ac <d_expression+0x384>
    84bc:	68e3      	ldr	r3, [r4, #12]
    84be:	781a      	ldrb	r2, [r3, #0]
    84c0:	2a5f      	cmp	r2, #95	; 0x5f
    84c2:	d001      	beq.n	84c8 <d_expression+0x3a0>
    84c4:	2701      	movs	r7, #1
    84c6:	e7f2      	b.n	84ae <d_expression+0x386>
    84c8:	3301      	adds	r3, #1
    84ca:	60e3      	str	r3, [r4, #12]
    84cc:	2700      	movs	r7, #0
    84ce:	e7ee      	b.n	84ae <d_expression+0x386>
    84d0:	00015438 	.word	0x00015438
    84d4:	00014f9c 	.word	0x00014f9c
    84d8:	00014f90 	.word	0x00014f90
    84dc:	00014f94 	.word	0x00014f94
    84e0:	00014f98 	.word	0x00014f98

000084e4 <d_exprlist>:
    84e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    84e6:	68c3      	ldr	r3, [r0, #12]
    84e8:	460f      	mov	r7, r1
    84ea:	7819      	ldrb	r1, [r3, #0]
    84ec:	b083      	sub	sp, #12
    84ee:	2200      	movs	r2, #0
    84f0:	42b9      	cmp	r1, r7
    84f2:	4604      	mov	r4, r0
    84f4:	9201      	str	r2, [sp, #4]
    84f6:	bf18      	it	ne
    84f8:	ae01      	addne	r6, sp, #4
    84fa:	d10a      	bne.n	8512 <d_exprlist+0x2e>
    84fc:	e01b      	b.n	8536 <d_exprlist+0x52>
    84fe:	f7fd ff93 	bl	6428 <d_make_comp>
    8502:	6030      	str	r0, [r6, #0]
    8504:	f100 0608 	add.w	r6, r0, #8
    8508:	b168      	cbz	r0, 8526 <d_exprlist+0x42>
    850a:	68e3      	ldr	r3, [r4, #12]
    850c:	781a      	ldrb	r2, [r3, #0]
    850e:	42ba      	cmp	r2, r7
    8510:	d00c      	beq.n	852c <d_exprlist+0x48>
    8512:	4620      	mov	r0, r4
    8514:	f7ff fe08 	bl	8128 <d_expression>
    8518:	4605      	mov	r5, r0
    851a:	212e      	movs	r1, #46	; 0x2e
    851c:	4620      	mov	r0, r4
    851e:	462a      	mov	r2, r5
    8520:	2300      	movs	r3, #0
    8522:	2d00      	cmp	r5, #0
    8524:	d1eb      	bne.n	84fe <d_exprlist+0x1a>
    8526:	2000      	movs	r0, #0
    8528:	b003      	add	sp, #12
    852a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    852c:	9801      	ldr	r0, [sp, #4]
    852e:	3301      	adds	r3, #1
    8530:	60e3      	str	r3, [r4, #12]
    8532:	b003      	add	sp, #12
    8534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8536:	3301      	adds	r3, #1
    8538:	60c3      	str	r3, [r0, #12]
    853a:	212e      	movs	r1, #46	; 0x2e
    853c:	4613      	mov	r3, r2
    853e:	b003      	add	sp, #12
    8540:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8544:	f7fd bf70 	b.w	6428 <d_make_comp>

00008548 <d_append_string>:
    8548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    854c:	4604      	mov	r4, r0
    854e:	4608      	mov	r0, r1
    8550:	460d      	mov	r5, r1
    8552:	f7fb f8eb 	bl	372c <strlen>
    8556:	b348      	cbz	r0, 85ac <d_append_string+0x64>
    8558:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    855c:	182f      	adds	r7, r5, r0
    855e:	f04f 0800 	mov.w	r8, #0
    8562:	e009      	b.n	8578 <d_append_string+0x30>
    8564:	460b      	mov	r3, r1
    8566:	42bd      	cmp	r5, r7
    8568:	f101 0101 	add.w	r1, r1, #1
    856c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8570:	54e6      	strb	r6, [r4, r3]
    8572:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8576:	d019      	beq.n	85ac <d_append_string+0x64>
    8578:	29ff      	cmp	r1, #255	; 0xff
    857a:	f815 6b01 	ldrb.w	r6, [r5], #1
    857e:	d1f1      	bne.n	8564 <d_append_string+0x1c>
    8580:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8584:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8588:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    858c:	4620      	mov	r0, r4
    858e:	4798      	blx	r3
    8590:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8594:	3301      	adds	r3, #1
    8596:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    859a:	2300      	movs	r3, #0
    859c:	2101      	movs	r1, #1
    859e:	42bd      	cmp	r5, r7
    85a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    85a4:	54e6      	strb	r6, [r4, r3]
    85a6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    85aa:	d1e5      	bne.n	8578 <d_append_string+0x30>
    85ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000085b0 <d_print_comp.part.10>:
    85b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85b4:	7813      	ldrb	r3, [r2, #0]
    85b6:	b097      	sub	sp, #92	; 0x5c
    85b8:	4615      	mov	r5, r2
    85ba:	4604      	mov	r4, r0
    85bc:	460e      	mov	r6, r1
    85be:	2b4b      	cmp	r3, #75	; 0x4b
    85c0:	f201 818c 	bhi.w	98dc <d_print_comp.part.10+0x132c>
    85c4:	e8df f013 	tbh	[pc, r3, lsl #1]
    85c8:	03a80488 	.word	0x03a80488
    85cc:	031f03a8 	.word	0x031f03a8
    85d0:	04e004f8 	.word	0x04e004f8
    85d4:	031a0561 	.word	0x031a0561
    85d8:	02e10308 	.word	0x02e10308
    85dc:	029302ba 	.word	0x029302ba
    85e0:	022e026c 	.word	0x022e026c
    85e4:	01e00207 	.word	0x01e00207
    85e8:	019201b9 	.word	0x019201b9
    85ec:	0144016b 	.word	0x0144016b
    85f0:	00f6011d 	.word	0x00f6011d
    85f4:	00a800cf 	.word	0x00a800cf
    85f8:	006b0080 	.word	0x006b0080
    85fc:	006b006b 	.word	0x006b006b
    8600:	004c004c 	.word	0x004c004c
    8604:	004c004c 	.word	0x004c004c
    8608:	004c004c 	.word	0x004c004c
    860c:	08ed004c 	.word	0x08ed004c
    8610:	004c08ed 	.word	0x004c08ed
    8614:	08bf004c 	.word	0x08bf004c
    8618:	07b3090f 	.word	0x07b3090f
    861c:	07250742 	.word	0x07250742
    8620:	072506e2 	.word	0x072506e2
    8624:	06ae06ae 	.word	0x06ae06ae
    8628:	09150965 	.word	0x09150965
    862c:	0898093e 	.word	0x0898093e
    8630:	0547055b 	.word	0x0547055b
    8634:	0536053b 	.word	0x0536053b
    8638:	06700675 	.word	0x06700675
    863c:	06310670 	.word	0x06310670
    8640:	05fa0631 	.word	0x05fa0631
    8644:	05e105ef 	.word	0x05e105ef
    8648:	058905b0 	.word	0x058905b0
    864c:	08230871 	.word	0x08230871
    8650:	098a084a 	.word	0x098a084a
    8654:	07ee07c8 	.word	0x07ee07c8
    8658:	040c0461 	.word	0x040c0461
    865c:	04b503d5 	.word	0x04b503d5
    8660:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    8664:	ab16      	add	r3, sp, #88	; 0x58
    8666:	2100      	movs	r1, #0
    8668:	f843 2d40 	str.w	r2, [r3, #-64]!
    866c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    8670:	9507      	str	r5, [sp, #28]
    8672:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    8676:	9108      	str	r1, [sp, #32]
    8678:	9209      	str	r2, [sp, #36]	; 0x24
    867a:	686a      	ldr	r2, [r5, #4]
    867c:	4620      	mov	r0, r4
    867e:	4631      	mov	r1, r6
    8680:	f002 fa2c 	bl	aadc <d_print_comp>
    8684:	9b08      	ldr	r3, [sp, #32]
    8686:	b923      	cbnz	r3, 8692 <d_print_comp.part.10+0xe2>
    8688:	4631      	mov	r1, r6
    868a:	462a      	mov	r2, r5
    868c:	4620      	mov	r0, r4
    868e:	f002 fa31 	bl	aaf4 <d_print_mod>
    8692:	9b06      	ldr	r3, [sp, #24]
    8694:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    8698:	b017      	add	sp, #92	; 0x5c
    869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    869e:	f8d0 7114 	ldr.w	r7, [r0, #276]	; 0x114
    86a2:	463a      	mov	r2, r7
    86a4:	2f00      	cmp	r7, #0
    86a6:	d0dd      	beq.n	8664 <d_print_comp.part.10+0xb4>
    86a8:	6891      	ldr	r1, [r2, #8]
    86aa:	b941      	cbnz	r1, 86be <d_print_comp.part.10+0x10e>
    86ac:	6851      	ldr	r1, [r2, #4]
    86ae:	7809      	ldrb	r1, [r1, #0]
    86b0:	f1a1 0019 	sub.w	r0, r1, #25
    86b4:	2802      	cmp	r0, #2
    86b6:	d805      	bhi.n	86c4 <d_print_comp.part.10+0x114>
    86b8:	428b      	cmp	r3, r1
    86ba:	f001 854f 	beq.w	a15c <d_print_comp.part.10+0x1bac>
    86be:	6812      	ldr	r2, [r2, #0]
    86c0:	2a00      	cmp	r2, #0
    86c2:	d1f1      	bne.n	86a8 <d_print_comp.part.10+0xf8>
    86c4:	463a      	mov	r2, r7
    86c6:	e7cd      	b.n	8664 <d_print_comp.part.10+0xb4>
    86c8:	6897      	ldr	r7, [r2, #8]
    86ca:	f8d2 9004 	ldr.w	r9, [r2, #4]
    86ce:	2f00      	cmp	r7, #0
    86d0:	d0e2      	beq.n	8698 <d_print_comp.part.10+0xe8>
    86d2:	2500      	movs	r5, #0
    86d4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    86d8:	46a8      	mov	r8, r5
    86da:	e009      	b.n	86f0 <d_print_comp.part.10+0x140>
    86dc:	460b      	mov	r3, r1
    86de:	3101      	adds	r1, #1
    86e0:	3501      	adds	r5, #1
    86e2:	42af      	cmp	r7, r5
    86e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    86e8:	54e6      	strb	r6, [r4, r3]
    86ea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    86ee:	d0d3      	beq.n	8698 <d_print_comp.part.10+0xe8>
    86f0:	29ff      	cmp	r1, #255	; 0xff
    86f2:	f819 6005 	ldrb.w	r6, [r9, r5]
    86f6:	d1f1      	bne.n	86dc <d_print_comp.part.10+0x12c>
    86f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    86fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8700:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8704:	4620      	mov	r0, r4
    8706:	4798      	blx	r3
    8708:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    870c:	3301      	adds	r3, #1
    870e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8712:	2101      	movs	r1, #1
    8714:	2300      	movs	r3, #0
    8716:	e7e3      	b.n	86e0 <d_print_comp.part.10+0x130>
    8718:	4fd6      	ldr	r7, [pc, #856]	; (8a74 <d_print_comp.part.10+0x4c4>)
    871a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    871e:	f107 0a11 	add.w	sl, r7, #17
    8722:	f04f 0900 	mov.w	r9, #0
    8726:	e00a      	b.n	873e <d_print_comp.part.10+0x18e>
    8728:	460b      	mov	r3, r1
    872a:	3101      	adds	r1, #1
    872c:	4557      	cmp	r7, sl
    872e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8732:	f804 8003 	strb.w	r8, [r4, r3]
    8736:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    873a:	f001 8208 	beq.w	9b4e <d_print_comp.part.10+0x159e>
    873e:	29ff      	cmp	r1, #255	; 0xff
    8740:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8744:	d1f0      	bne.n	8728 <d_print_comp.part.10+0x178>
    8746:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    874a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    874e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8752:	4620      	mov	r0, r4
    8754:	4798      	blx	r3
    8756:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    875a:	3301      	adds	r3, #1
    875c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8760:	2101      	movs	r1, #1
    8762:	2300      	movs	r3, #0
    8764:	e7e2      	b.n	872c <d_print_comp.part.10+0x17c>
    8766:	4fc4      	ldr	r7, [pc, #784]	; (8a78 <d_print_comp.part.10+0x4c8>)
    8768:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    876c:	f107 0a15 	add.w	sl, r7, #21
    8770:	f04f 0900 	mov.w	r9, #0
    8774:	e00a      	b.n	878c <d_print_comp.part.10+0x1dc>
    8776:	460b      	mov	r3, r1
    8778:	3101      	adds	r1, #1
    877a:	4557      	cmp	r7, sl
    877c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8780:	f804 8003 	strb.w	r8, [r4, r3]
    8784:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8788:	f001 80ec 	beq.w	9964 <d_print_comp.part.10+0x13b4>
    878c:	29ff      	cmp	r1, #255	; 0xff
    878e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8792:	d1f0      	bne.n	8776 <d_print_comp.part.10+0x1c6>
    8794:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8798:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    879c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    87a0:	4620      	mov	r0, r4
    87a2:	4798      	blx	r3
    87a4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    87a8:	3301      	adds	r3, #1
    87aa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    87ae:	2101      	movs	r1, #1
    87b0:	2300      	movs	r3, #0
    87b2:	e7e2      	b.n	877a <d_print_comp.part.10+0x1ca>
    87b4:	4fb1      	ldr	r7, [pc, #708]	; (8a7c <d_print_comp.part.10+0x4cc>)
    87b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    87ba:	f107 0a19 	add.w	sl, r7, #25
    87be:	f04f 0900 	mov.w	r9, #0
    87c2:	e00a      	b.n	87da <d_print_comp.part.10+0x22a>
    87c4:	460b      	mov	r3, r1
    87c6:	3101      	adds	r1, #1
    87c8:	4557      	cmp	r7, sl
    87ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    87ce:	f804 8003 	strb.w	r8, [r4, r3]
    87d2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    87d6:	f001 80b4 	beq.w	9942 <d_print_comp.part.10+0x1392>
    87da:	29ff      	cmp	r1, #255	; 0xff
    87dc:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    87e0:	d1f0      	bne.n	87c4 <d_print_comp.part.10+0x214>
    87e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    87e6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    87ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    87ee:	4620      	mov	r0, r4
    87f0:	4798      	blx	r3
    87f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    87f6:	3301      	adds	r3, #1
    87f8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    87fc:	2101      	movs	r1, #1
    87fe:	2300      	movs	r3, #0
    8800:	e7e2      	b.n	87c8 <d_print_comp.part.10+0x218>
    8802:	4f9f      	ldr	r7, [pc, #636]	; (8a80 <d_print_comp.part.10+0x4d0>)
    8804:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8808:	f107 0a16 	add.w	sl, r7, #22
    880c:	f04f 0900 	mov.w	r9, #0
    8810:	e00a      	b.n	8828 <d_print_comp.part.10+0x278>
    8812:	460b      	mov	r3, r1
    8814:	3101      	adds	r1, #1
    8816:	4557      	cmp	r7, sl
    8818:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    881c:	f804 8003 	strb.w	r8, [r4, r3]
    8820:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8824:	f001 80d7 	beq.w	99d6 <d_print_comp.part.10+0x1426>
    8828:	29ff      	cmp	r1, #255	; 0xff
    882a:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    882e:	d1f0      	bne.n	8812 <d_print_comp.part.10+0x262>
    8830:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8834:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8838:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    883c:	4620      	mov	r0, r4
    883e:	4798      	blx	r3
    8840:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8844:	3301      	adds	r3, #1
    8846:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    884a:	2101      	movs	r1, #1
    884c:	2300      	movs	r3, #0
    884e:	e7e2      	b.n	8816 <d_print_comp.part.10+0x266>
    8850:	4f8c      	ldr	r7, [pc, #560]	; (8a84 <d_print_comp.part.10+0x4d4>)
    8852:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8856:	f107 0a13 	add.w	sl, r7, #19
    885a:	f04f 0900 	mov.w	r9, #0
    885e:	e00a      	b.n	8876 <d_print_comp.part.10+0x2c6>
    8860:	460b      	mov	r3, r1
    8862:	3101      	adds	r1, #1
    8864:	4557      	cmp	r7, sl
    8866:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    886a:	f804 8003 	strb.w	r8, [r4, r3]
    886e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8872:	f001 80a9 	beq.w	99c8 <d_print_comp.part.10+0x1418>
    8876:	29ff      	cmp	r1, #255	; 0xff
    8878:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    887c:	d1f0      	bne.n	8860 <d_print_comp.part.10+0x2b0>
    887e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8882:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8886:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    888a:	4620      	mov	r0, r4
    888c:	4798      	blx	r3
    888e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8892:	3301      	adds	r3, #1
    8894:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8898:	2101      	movs	r1, #1
    889a:	2300      	movs	r3, #0
    889c:	e7e2      	b.n	8864 <d_print_comp.part.10+0x2b4>
    889e:	4f7a      	ldr	r7, [pc, #488]	; (8a88 <d_print_comp.part.10+0x4d8>)
    88a0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    88a4:	f107 0a0f 	add.w	sl, r7, #15
    88a8:	f04f 0900 	mov.w	r9, #0
    88ac:	e00a      	b.n	88c4 <d_print_comp.part.10+0x314>
    88ae:	460b      	mov	r3, r1
    88b0:	3101      	adds	r1, #1
    88b2:	4557      	cmp	r7, sl
    88b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    88b8:	f804 8003 	strb.w	r8, [r4, r3]
    88bc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    88c0:	f001 8090 	beq.w	99e4 <d_print_comp.part.10+0x1434>
    88c4:	29ff      	cmp	r1, #255	; 0xff
    88c6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    88ca:	d1f0      	bne.n	88ae <d_print_comp.part.10+0x2fe>
    88cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    88d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    88d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    88d8:	4620      	mov	r0, r4
    88da:	4798      	blx	r3
    88dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    88e0:	3301      	adds	r3, #1
    88e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    88e6:	2101      	movs	r1, #1
    88e8:	2300      	movs	r3, #0
    88ea:	e7e2      	b.n	88b2 <d_print_comp.part.10+0x302>
    88ec:	4f67      	ldr	r7, [pc, #412]	; (8a8c <d_print_comp.part.10+0x4dc>)
    88ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    88f2:	f107 0a1a 	add.w	sl, r7, #26
    88f6:	f04f 0900 	mov.w	r9, #0
    88fa:	e00a      	b.n	8912 <d_print_comp.part.10+0x362>
    88fc:	460b      	mov	r3, r1
    88fe:	3101      	adds	r1, #1
    8900:	4557      	cmp	r7, sl
    8902:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8906:	f804 8003 	strb.w	r8, [r4, r3]
    890a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    890e:	f001 8011 	beq.w	9934 <d_print_comp.part.10+0x1384>
    8912:	29ff      	cmp	r1, #255	; 0xff
    8914:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8918:	d1f0      	bne.n	88fc <d_print_comp.part.10+0x34c>
    891a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    891e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8922:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8926:	4620      	mov	r0, r4
    8928:	4798      	blx	r3
    892a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    892e:	3301      	adds	r3, #1
    8930:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8934:	2101      	movs	r1, #1
    8936:	2300      	movs	r3, #0
    8938:	e7e2      	b.n	8900 <d_print_comp.part.10+0x350>
    893a:	4f55      	ldr	r7, [pc, #340]	; (8a90 <d_print_comp.part.10+0x4e0>)
    893c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8940:	f107 0a11 	add.w	sl, r7, #17
    8944:	f04f 0900 	mov.w	r9, #0
    8948:	e00a      	b.n	8960 <d_print_comp.part.10+0x3b0>
    894a:	460b      	mov	r3, r1
    894c:	3101      	adds	r1, #1
    894e:	4557      	cmp	r7, sl
    8950:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8954:	f804 8003 	strb.w	r8, [r4, r3]
    8958:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    895c:	f001 80a5 	beq.w	9aaa <d_print_comp.part.10+0x14fa>
    8960:	29ff      	cmp	r1, #255	; 0xff
    8962:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8966:	d1f0      	bne.n	894a <d_print_comp.part.10+0x39a>
    8968:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    896c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8970:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8974:	4620      	mov	r0, r4
    8976:	4798      	blx	r3
    8978:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    897c:	3301      	adds	r3, #1
    897e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8982:	2101      	movs	r1, #1
    8984:	2300      	movs	r3, #0
    8986:	e7e2      	b.n	894e <d_print_comp.part.10+0x39e>
    8988:	4f42      	ldr	r7, [pc, #264]	; (8a94 <d_print_comp.part.10+0x4e4>)
    898a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    898e:	f107 0a15 	add.w	sl, r7, #21
    8992:	f04f 0900 	mov.w	r9, #0
    8996:	e00a      	b.n	89ae <d_print_comp.part.10+0x3fe>
    8998:	460b      	mov	r3, r1
    899a:	3101      	adds	r1, #1
    899c:	4557      	cmp	r7, sl
    899e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    89a2:	f804 8003 	strb.w	r8, [r4, r3]
    89a6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    89aa:	f001 8077 	beq.w	9a9c <d_print_comp.part.10+0x14ec>
    89ae:	29ff      	cmp	r1, #255	; 0xff
    89b0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    89b4:	d1f0      	bne.n	8998 <d_print_comp.part.10+0x3e8>
    89b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    89ba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    89be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    89c2:	4620      	mov	r0, r4
    89c4:	4798      	blx	r3
    89c6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    89ca:	3301      	adds	r3, #1
    89cc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    89d0:	2101      	movs	r1, #1
    89d2:	2300      	movs	r3, #0
    89d4:	e7e2      	b.n	899c <d_print_comp.part.10+0x3ec>
    89d6:	4f30      	ldr	r7, [pc, #192]	; (8a98 <d_print_comp.part.10+0x4e8>)
    89d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    89dc:	f107 0a10 	add.w	sl, r7, #16
    89e0:	f04f 0900 	mov.w	r9, #0
    89e4:	e00a      	b.n	89fc <d_print_comp.part.10+0x44c>
    89e6:	460b      	mov	r3, r1
    89e8:	3101      	adds	r1, #1
    89ea:	4557      	cmp	r7, sl
    89ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    89f0:	f804 8003 	strb.w	r8, [r4, r3]
    89f4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    89f8:	f001 8049 	beq.w	9a8e <d_print_comp.part.10+0x14de>
    89fc:	29ff      	cmp	r1, #255	; 0xff
    89fe:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8a02:	d1f0      	bne.n	89e6 <d_print_comp.part.10+0x436>
    8a04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8a08:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8a0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8a10:	4620      	mov	r0, r4
    8a12:	4798      	blx	r3
    8a14:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8a18:	3301      	adds	r3, #1
    8a1a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8a1e:	2101      	movs	r1, #1
    8a20:	2300      	movs	r3, #0
    8a22:	e7e2      	b.n	89ea <d_print_comp.part.10+0x43a>
    8a24:	4f1d      	ldr	r7, [pc, #116]	; (8a9c <d_print_comp.part.10+0x4ec>)
    8a26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8a2a:	f107 0a12 	add.w	sl, r7, #18
    8a2e:	f04f 0900 	mov.w	r9, #0
    8a32:	e00a      	b.n	8a4a <d_print_comp.part.10+0x49a>
    8a34:	460b      	mov	r3, r1
    8a36:	3101      	adds	r1, #1
    8a38:	4557      	cmp	r7, sl
    8a3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8a3e:	f804 8003 	strb.w	r8, [r4, r3]
    8a42:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8a46:	f001 801b 	beq.w	9a80 <d_print_comp.part.10+0x14d0>
    8a4a:	29ff      	cmp	r1, #255	; 0xff
    8a4c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8a50:	d1f0      	bne.n	8a34 <d_print_comp.part.10+0x484>
    8a52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8a56:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8a5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8a5e:	4620      	mov	r0, r4
    8a60:	4798      	blx	r3
    8a62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8a66:	3301      	adds	r3, #1
    8a68:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8a6c:	2101      	movs	r1, #1
    8a6e:	2300      	movs	r3, #0
    8a70:	e7e2      	b.n	8a38 <d_print_comp.part.10+0x488>
    8a72:	bf00      	nop
    8a74:	000150e7 	.word	0x000150e7
    8a78:	000150cf 	.word	0x000150cf
    8a7c:	000150b3 	.word	0x000150b3
    8a80:	0001509b 	.word	0x0001509b
    8a84:	00015087 	.word	0x00015087
    8a88:	00015077 	.word	0x00015077
    8a8c:	0001505b 	.word	0x0001505b
    8a90:	00015047 	.word	0x00015047
    8a94:	00015043 	.word	0x00015043
    8a98:	0001502f 	.word	0x0001502f
    8a9c:	0001501b 	.word	0x0001501b
    8aa0:	4fc9      	ldr	r7, [pc, #804]	; (8dc8 <d_print_comp.part.10+0x818>)
    8aa2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8aa6:	f107 0a0d 	add.w	sl, r7, #13
    8aaa:	f04f 0900 	mov.w	r9, #0
    8aae:	e00a      	b.n	8ac6 <d_print_comp.part.10+0x516>
    8ab0:	460b      	mov	r3, r1
    8ab2:	3101      	adds	r1, #1
    8ab4:	4557      	cmp	r7, sl
    8ab6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8aba:	f804 8003 	strb.w	r8, [r4, r3]
    8abe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8ac2:	f000 87cf 	beq.w	9a64 <d_print_comp.part.10+0x14b4>
    8ac6:	29ff      	cmp	r1, #255	; 0xff
    8ac8:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8acc:	d1f0      	bne.n	8ab0 <d_print_comp.part.10+0x500>
    8ace:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8ad2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8ad6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8ada:	4620      	mov	r0, r4
    8adc:	4798      	blx	r3
    8ade:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8ae2:	3301      	adds	r3, #1
    8ae4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8ae8:	2101      	movs	r1, #1
    8aea:	2300      	movs	r3, #0
    8aec:	e7e2      	b.n	8ab4 <d_print_comp.part.10+0x504>
    8aee:	4fb7      	ldr	r7, [pc, #732]	; (8dcc <d_print_comp.part.10+0x81c>)
    8af0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8af4:	f107 0a18 	add.w	sl, r7, #24
    8af8:	f04f 0900 	mov.w	r9, #0
    8afc:	e00a      	b.n	8b14 <d_print_comp.part.10+0x564>
    8afe:	460b      	mov	r3, r1
    8b00:	3101      	adds	r1, #1
    8b02:	4557      	cmp	r7, sl
    8b04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8b08:	f804 8003 	strb.w	r8, [r4, r3]
    8b0c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8b10:	f000 877d 	beq.w	9a0e <d_print_comp.part.10+0x145e>
    8b14:	29ff      	cmp	r1, #255	; 0xff
    8b16:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8b1a:	d1f0      	bne.n	8afe <d_print_comp.part.10+0x54e>
    8b1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8b20:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8b24:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8b28:	4620      	mov	r0, r4
    8b2a:	4798      	blx	r3
    8b2c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8b30:	3301      	adds	r3, #1
    8b32:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8b36:	2101      	movs	r1, #1
    8b38:	2300      	movs	r3, #0
    8b3a:	e7e2      	b.n	8b02 <d_print_comp.part.10+0x552>
    8b3c:	4fa4      	ldr	r7, [pc, #656]	; (8dd0 <d_print_comp.part.10+0x820>)
    8b3e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8b42:	f107 0a08 	add.w	sl, r7, #8
    8b46:	f04f 0900 	mov.w	r9, #0
    8b4a:	e00a      	b.n	8b62 <d_print_comp.part.10+0x5b2>
    8b4c:	460b      	mov	r3, r1
    8b4e:	3101      	adds	r1, #1
    8b50:	4557      	cmp	r7, sl
    8b52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8b56:	f804 8003 	strb.w	r8, [r4, r3]
    8b5a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8b5e:	f000 874f 	beq.w	9a00 <d_print_comp.part.10+0x1450>
    8b62:	29ff      	cmp	r1, #255	; 0xff
    8b64:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8b68:	d1f0      	bne.n	8b4c <d_print_comp.part.10+0x59c>
    8b6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8b6e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8b72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8b76:	4620      	mov	r0, r4
    8b78:	4798      	blx	r3
    8b7a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8b7e:	3301      	adds	r3, #1
    8b80:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8b84:	2101      	movs	r1, #1
    8b86:	2300      	movs	r3, #0
    8b88:	e7e2      	b.n	8b50 <d_print_comp.part.10+0x5a0>
    8b8a:	4f92      	ldr	r7, [pc, #584]	; (8dd4 <d_print_comp.part.10+0x824>)
    8b8c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8b90:	f107 0a0b 	add.w	sl, r7, #11
    8b94:	f04f 0900 	mov.w	r9, #0
    8b98:	e00a      	b.n	8bb0 <d_print_comp.part.10+0x600>
    8b9a:	460b      	mov	r3, r1
    8b9c:	3101      	adds	r1, #1
    8b9e:	4557      	cmp	r7, sl
    8ba0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8ba4:	f804 8003 	strb.w	r8, [r4, r3]
    8ba8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8bac:	f000 8721 	beq.w	99f2 <d_print_comp.part.10+0x1442>
    8bb0:	29ff      	cmp	r1, #255	; 0xff
    8bb2:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8bb6:	d1f0      	bne.n	8b9a <d_print_comp.part.10+0x5ea>
    8bb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8bbc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8bc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8bc4:	4620      	mov	r0, r4
    8bc6:	4798      	blx	r3
    8bc8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8bcc:	3301      	adds	r3, #1
    8bce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8bd2:	2101      	movs	r1, #1
    8bd4:	2300      	movs	r3, #0
    8bd6:	e7e2      	b.n	8b9e <d_print_comp.part.10+0x5ee>
    8bd8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8bdc:	29ff      	cmp	r1, #255	; 0xff
    8bde:	f001 82c4 	beq.w	a16a <d_print_comp.part.10+0x1bba>
    8be2:	1c4a      	adds	r2, r1, #1
    8be4:	237e      	movs	r3, #126	; 0x7e
    8be6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8bea:	5463      	strb	r3, [r4, r1]
    8bec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8bf0:	4631      	mov	r1, r6
    8bf2:	68aa      	ldr	r2, [r5, #8]
    8bf4:	4620      	mov	r0, r4
    8bf6:	f001 ff71 	bl	aadc <d_print_comp>
    8bfa:	e54d      	b.n	8698 <d_print_comp.part.10+0xe8>
    8bfc:	4631      	mov	r1, r6
    8bfe:	6892      	ldr	r2, [r2, #8]
    8c00:	f001 ff6c 	bl	aadc <d_print_comp>
    8c04:	e548      	b.n	8698 <d_print_comp.part.10+0xe8>
    8c06:	2200      	movs	r2, #0
    8c08:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    8c0c:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    8c10:	686f      	ldr	r7, [r5, #4]
    8c12:	9302      	str	r3, [sp, #8]
    8c14:	2f00      	cmp	r7, #0
    8c16:	f001 8503 	beq.w	a620 <d_print_comp.part.10+0x2070>
    8c1a:	a906      	add	r1, sp, #24
    8c1c:	f8d0 a110 	ldr.w	sl, [r0, #272]	; 0x110
    8c20:	9101      	str	r1, [sp, #4]
    8c22:	4690      	mov	r8, r2
    8c24:	4694      	mov	ip, r2
    8c26:	460b      	mov	r3, r1
    8c28:	7839      	ldrb	r1, [r7, #0]
    8c2a:	601a      	str	r2, [r3, #0]
    8c2c:	f1a1 001c 	sub.w	r0, r1, #28
    8c30:	2804      	cmp	r0, #4
    8c32:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    8c36:	605f      	str	r7, [r3, #4]
    8c38:	f8c3 c008 	str.w	ip, [r3, #8]
    8c3c:	f8c3 a00c 	str.w	sl, [r3, #12]
    8c40:	461a      	mov	r2, r3
    8c42:	f108 0801 	add.w	r8, r8, #1
    8c46:	f103 0310 	add.w	r3, r3, #16
    8c4a:	f240 864c 	bls.w	98e6 <d_print_comp.part.10+0x1336>
    8c4e:	2904      	cmp	r1, #4
    8c50:	f001 8633 	beq.w	a8ba <d_print_comp.part.10+0x230a>
    8c54:	2902      	cmp	r1, #2
    8c56:	d13d      	bne.n	8cd4 <d_print_comp.part.10+0x724>
    8c58:	f8d7 b008 	ldr.w	fp, [r7, #8]
    8c5c:	f89b 3000 	ldrb.w	r3, [fp]
    8c60:	2b45      	cmp	r3, #69	; 0x45
    8c62:	bf08      	it	eq
    8c64:	f8db b004 	ldreq.w	fp, [fp, #4]
    8c68:	f89b 3000 	ldrb.w	r3, [fp]
    8c6c:	3b1c      	subs	r3, #28
    8c6e:	2b04      	cmp	r3, #4
    8c70:	d830      	bhi.n	8cd4 <d_print_comp.part.10+0x724>
    8c72:	f1b8 0f04 	cmp.w	r8, #4
    8c76:	f001 8679 	beq.w	a96c <d_print_comp.part.10+0x23bc>
    8c7a:	9a01      	ldr	r2, [sp, #4]
    8c7c:	4623      	mov	r3, r4
    8c7e:	eb02 1c08 	add.w	ip, r2, r8, lsl #4
    8c82:	4629      	mov	r1, r5
    8c84:	4632      	mov	r2, r6
    8c86:	465d      	mov	r5, fp
    8c88:	4656      	mov	r6, sl
    8c8a:	4664      	mov	r4, ip
    8c8c:	468b      	mov	fp, r1
    8c8e:	4692      	mov	sl, r2
    8c90:	4699      	mov	r9, r3
    8c92:	e003      	b.n	8c9c <d_print_comp.part.10+0x6ec>
    8c94:	f1b8 0f04 	cmp.w	r8, #4
    8c98:	f001 8667 	beq.w	a96a <d_print_comp.part.10+0x23ba>
    8c9c:	e91c 000f 	ldmdb	ip, {r0, r1, r2, r3}
    8ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    8ca4:	f1a4 0310 	sub.w	r3, r4, #16
    8ca8:	6023      	str	r3, [r4, #0]
    8caa:	2300      	movs	r3, #0
    8cac:	e90c 0048 	stmdb	ip, {r3, r6}
    8cb0:	f8c9 4114 	str.w	r4, [r9, #276]	; 0x114
    8cb4:	f84c 5c0c 	str.w	r5, [ip, #-12]
    8cb8:	686d      	ldr	r5, [r5, #4]
    8cba:	782b      	ldrb	r3, [r5, #0]
    8cbc:	3b1c      	subs	r3, #28
    8cbe:	2b04      	cmp	r3, #4
    8cc0:	f108 0801 	add.w	r8, r8, #1
    8cc4:	f10c 0c10 	add.w	ip, ip, #16
    8cc8:	f104 0410 	add.w	r4, r4, #16
    8ccc:	d9e2      	bls.n	8c94 <d_print_comp.part.10+0x6e4>
    8cce:	464c      	mov	r4, r9
    8cd0:	4656      	mov	r6, sl
    8cd2:	465d      	mov	r5, fp
    8cd4:	68aa      	ldr	r2, [r5, #8]
    8cd6:	4620      	mov	r0, r4
    8cd8:	4631      	mov	r1, r6
    8cda:	f001 feff 	bl	aadc <d_print_comp>
    8cde:	783b      	ldrb	r3, [r7, #0]
    8ce0:	2b04      	cmp	r3, #4
    8ce2:	bf04      	itt	eq
    8ce4:	9b04      	ldreq	r3, [sp, #16]
    8ce6:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
    8cea:	f1b8 0f00 	cmp.w	r8, #0
    8cee:	d00f      	beq.n	8d10 <d_print_comp.part.10+0x760>
    8cf0:	9a01      	ldr	r2, [sp, #4]
    8cf2:	4647      	mov	r7, r8
    8cf4:	eb02 1508 	add.w	r5, r2, r8, lsl #4
    8cf8:	f04f 0920 	mov.w	r9, #32
    8cfc:	46b0      	mov	r8, r6
    8cfe:	f855 6c08 	ldr.w	r6, [r5, #-8]
    8d02:	3f01      	subs	r7, #1
    8d04:	2e00      	cmp	r6, #0
    8d06:	f001 8477 	beq.w	a5f8 <d_print_comp.part.10+0x2048>
    8d0a:	3d10      	subs	r5, #16
    8d0c:	2f00      	cmp	r7, #0
    8d0e:	d1f6      	bne.n	8cfe <d_print_comp.part.10+0x74e>
    8d10:	9902      	ldr	r1, [sp, #8]
    8d12:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    8d16:	e4bf      	b.n	8698 <d_print_comp.part.10+0xe8>
    8d18:	4631      	mov	r1, r6
    8d1a:	6852      	ldr	r2, [r2, #4]
    8d1c:	f001 fede 	bl	aadc <d_print_comp>
    8d20:	f016 0904 	ands.w	r9, r6, #4
    8d24:	f040 85ec 	bne.w	9900 <d_print_comp.part.10+0x1350>
    8d28:	4f2b      	ldr	r7, [pc, #172]	; (8dd8 <d_print_comp.part.10+0x828>)
    8d2a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8d2e:	f107 0a02 	add.w	sl, r7, #2
    8d32:	e00a      	b.n	8d4a <d_print_comp.part.10+0x79a>
    8d34:	460b      	mov	r3, r1
    8d36:	3101      	adds	r1, #1
    8d38:	4557      	cmp	r7, sl
    8d3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8d3e:	f804 8003 	strb.w	r8, [r4, r3]
    8d42:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8d46:	f000 85e7 	beq.w	9918 <d_print_comp.part.10+0x1368>
    8d4a:	29ff      	cmp	r1, #255	; 0xff
    8d4c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8d50:	d1f0      	bne.n	8d34 <d_print_comp.part.10+0x784>
    8d52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8d56:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8d5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8d5e:	4620      	mov	r0, r4
    8d60:	4798      	blx	r3
    8d62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8d66:	3301      	adds	r3, #1
    8d68:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8d6c:	2101      	movs	r1, #1
    8d6e:	2300      	movs	r3, #0
    8d70:	e7e2      	b.n	8d38 <d_print_comp.part.10+0x788>
    8d72:	4f1a      	ldr	r7, [pc, #104]	; (8ddc <d_print_comp.part.10+0x82c>)
    8d74:	6852      	ldr	r2, [r2, #4]
    8d76:	4631      	mov	r1, r6
    8d78:	f001 feb0 	bl	aadc <d_print_comp>
    8d7c:	f107 0a05 	add.w	sl, r7, #5
    8d80:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8d84:	f04f 0900 	mov.w	r9, #0
    8d88:	e00a      	b.n	8da0 <d_print_comp.part.10+0x7f0>
    8d8a:	460b      	mov	r3, r1
    8d8c:	3101      	adds	r1, #1
    8d8e:	4557      	cmp	r7, sl
    8d90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8d94:	f804 8003 	strb.w	r8, [r4, r3]
    8d98:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8d9c:	f000 87b2 	beq.w	9d04 <d_print_comp.part.10+0x1754>
    8da0:	29ff      	cmp	r1, #255	; 0xff
    8da2:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8da6:	d1f0      	bne.n	8d8a <d_print_comp.part.10+0x7da>
    8da8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8dac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8db0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8db4:	4620      	mov	r0, r4
    8db6:	4798      	blx	r3
    8db8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8dbc:	3301      	adds	r3, #1
    8dbe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8dc2:	2101      	movs	r1, #1
    8dc4:	2300      	movs	r3, #0
    8dc6:	e7e2      	b.n	8d8e <d_print_comp.part.10+0x7de>
    8dc8:	0001500b 	.word	0x0001500b
    8dcc:	00014fe7 	.word	0x00014fe7
    8dd0:	00014fdb 	.word	0x00014fdb
    8dd4:	00014fcf 	.word	0x00014fcf
    8dd8:	00014fa7 	.word	0x00014fa7
    8ddc:	00014f9f 	.word	0x00014f9f
    8de0:	6851      	ldr	r1, [r2, #4]
    8de2:	f7fd fe29 	bl	6a38 <d_find_pack>
    8de6:	2800      	cmp	r0, #0
    8de8:	f001 856f 	beq.w	a8ca <d_print_comp.part.10+0x231a>
    8dec:	f04f 0800 	mov.w	r8, #0
    8df0:	7803      	ldrb	r3, [r0, #0]
    8df2:	2b2f      	cmp	r3, #47	; 0x2f
    8df4:	f040 87ca 	bne.w	9d8c <d_print_comp.part.10+0x17dc>
    8df8:	6843      	ldr	r3, [r0, #4]
    8dfa:	2b00      	cmp	r3, #0
    8dfc:	f000 87c6 	beq.w	9d8c <d_print_comp.part.10+0x17dc>
    8e00:	6880      	ldr	r0, [r0, #8]
    8e02:	f108 0801 	add.w	r8, r8, #1
    8e06:	2800      	cmp	r0, #0
    8e08:	d1f2      	bne.n	8df0 <d_print_comp.part.10+0x840>
    8e0a:	686d      	ldr	r5, [r5, #4]
    8e0c:	9501      	str	r5, [sp, #4]
    8e0e:	2700      	movs	r7, #0
    8e10:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    8e14:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 91e4 <d_print_comp.part.10+0xc34>
    8e18:	9302      	str	r3, [sp, #8]
    8e1a:	46b9      	mov	r9, r7
    8e1c:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
    8e20:	4620      	mov	r0, r4
    8e22:	4631      	mov	r1, r6
    8e24:	9a01      	ldr	r2, [sp, #4]
    8e26:	f001 fe59 	bl	aadc <d_print_comp>
    8e2a:	9b02      	ldr	r3, [sp, #8]
    8e2c:	42bb      	cmp	r3, r7
    8e2e:	dd28      	ble.n	8e82 <d_print_comp.part.10+0x8d2>
    8e30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8e34:	f8df b3b0 	ldr.w	fp, [pc, #944]	; 91e8 <d_print_comp.part.10+0xc38>
    8e38:	e009      	b.n	8e4e <d_print_comp.part.10+0x89e>
    8e3a:	460b      	mov	r3, r1
    8e3c:	45d3      	cmp	fp, sl
    8e3e:	f101 0101 	add.w	r1, r1, #1
    8e42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8e46:	54e5      	strb	r5, [r4, r3]
    8e48:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8e4c:	d019      	beq.n	8e82 <d_print_comp.part.10+0x8d2>
    8e4e:	29ff      	cmp	r1, #255	; 0xff
    8e50:	f81b 5f01 	ldrb.w	r5, [fp, #1]!
    8e54:	d1f1      	bne.n	8e3a <d_print_comp.part.10+0x88a>
    8e56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8e5a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8e5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8e62:	4620      	mov	r0, r4
    8e64:	4798      	blx	r3
    8e66:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8e6a:	3301      	adds	r3, #1
    8e6c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8e70:	2300      	movs	r3, #0
    8e72:	2101      	movs	r1, #1
    8e74:	45d3      	cmp	fp, sl
    8e76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8e7a:	54e5      	strb	r5, [r4, r3]
    8e7c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8e80:	d1e5      	bne.n	8e4e <d_print_comp.part.10+0x89e>
    8e82:	3701      	adds	r7, #1
    8e84:	4547      	cmp	r7, r8
    8e86:	d1c9      	bne.n	8e1c <d_print_comp.part.10+0x86c>
    8e88:	e406      	b.n	8698 <d_print_comp.part.10+0xe8>
    8e8a:	4fd0      	ldr	r7, [pc, #832]	; (91cc <d_print_comp.part.10+0xc1c>)
    8e8c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8e90:	f107 0a1a 	add.w	sl, r7, #26
    8e94:	f04f 0900 	mov.w	r9, #0
    8e98:	e00a      	b.n	8eb0 <d_print_comp.part.10+0x900>
    8e9a:	460b      	mov	r3, r1
    8e9c:	3101      	adds	r1, #1
    8e9e:	4557      	cmp	r7, sl
    8ea0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8ea4:	f804 8003 	strb.w	r8, [r4, r3]
    8ea8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8eac:	f000 8604 	beq.w	9ab8 <d_print_comp.part.10+0x1508>
    8eb0:	29ff      	cmp	r1, #255	; 0xff
    8eb2:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8eb6:	d1f0      	bne.n	8e9a <d_print_comp.part.10+0x8ea>
    8eb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8ebc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8ec0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8ec4:	4620      	mov	r0, r4
    8ec6:	4798      	blx	r3
    8ec8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8ecc:	3301      	adds	r3, #1
    8ece:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8ed2:	2101      	movs	r1, #1
    8ed4:	2300      	movs	r3, #0
    8ed6:	e7e2      	b.n	8e9e <d_print_comp.part.10+0x8ee>
    8ed8:	f016 0604 	ands.w	r6, r6, #4
    8edc:	f041 81ae 	bne.w	a23c <d_print_comp.part.10+0x1c8c>
    8ee0:	6897      	ldr	r7, [r2, #8]
    8ee2:	f8d2 9004 	ldr.w	r9, [r2, #4]
    8ee6:	2f00      	cmp	r7, #0
    8ee8:	f43f abd6 	beq.w	8698 <d_print_comp.part.10+0xe8>
    8eec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8ef0:	46b0      	mov	r8, r6
    8ef2:	e00a      	b.n	8f0a <d_print_comp.part.10+0x95a>
    8ef4:	460b      	mov	r3, r1
    8ef6:	3101      	adds	r1, #1
    8ef8:	3601      	adds	r6, #1
    8efa:	42b7      	cmp	r7, r6
    8efc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8f00:	54e5      	strb	r5, [r4, r3]
    8f02:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8f06:	f43f abc7 	beq.w	8698 <d_print_comp.part.10+0xe8>
    8f0a:	29ff      	cmp	r1, #255	; 0xff
    8f0c:	f819 5006 	ldrb.w	r5, [r9, r6]
    8f10:	d1f0      	bne.n	8ef4 <d_print_comp.part.10+0x944>
    8f12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8f16:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8f1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8f1e:	4620      	mov	r0, r4
    8f20:	4798      	blx	r3
    8f22:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8f26:	3301      	adds	r3, #1
    8f28:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8f2c:	2101      	movs	r1, #1
    8f2e:	2300      	movs	r3, #0
    8f30:	e7e2      	b.n	8ef8 <d_print_comp.part.10+0x948>
    8f32:	4fa7      	ldr	r7, [pc, #668]	; (91d0 <d_print_comp.part.10+0xc20>)
    8f34:	6852      	ldr	r2, [r2, #4]
    8f36:	4631      	mov	r1, r6
    8f38:	f001 fdd0 	bl	aadc <d_print_comp>
    8f3c:	f107 0a08 	add.w	sl, r7, #8
    8f40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8f44:	f04f 0900 	mov.w	r9, #0
    8f48:	e00a      	b.n	8f60 <d_print_comp.part.10+0x9b0>
    8f4a:	460b      	mov	r3, r1
    8f4c:	3101      	adds	r1, #1
    8f4e:	4557      	cmp	r7, sl
    8f50:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8f54:	f804 8003 	strb.w	r8, [r4, r3]
    8f58:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8f5c:	f000 86e5 	beq.w	9d2a <d_print_comp.part.10+0x177a>
    8f60:	29ff      	cmp	r1, #255	; 0xff
    8f62:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8f66:	d1f0      	bne.n	8f4a <d_print_comp.part.10+0x99a>
    8f68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8f6c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8f70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8f74:	4620      	mov	r0, r4
    8f76:	4798      	blx	r3
    8f78:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8f7c:	3301      	adds	r3, #1
    8f7e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8f82:	2101      	movs	r1, #1
    8f84:	2300      	movs	r3, #0
    8f86:	e7e2      	b.n	8f4e <d_print_comp.part.10+0x99e>
    8f88:	1d11      	adds	r1, r2, #4
    8f8a:	f7fd fd33 	bl	69f4 <d_lookup_template_argument.isra.6>
    8f8e:	2800      	cmp	r0, #0
    8f90:	f001 8013 	beq.w	9fba <d_print_comp.part.10+0x1a0a>
    8f94:	7803      	ldrb	r3, [r0, #0]
    8f96:	2b2f      	cmp	r3, #47	; 0x2f
    8f98:	f001 8002 	beq.w	9fa0 <d_print_comp.part.10+0x19f0>
    8f9c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
    8fa0:	682b      	ldr	r3, [r5, #0]
    8fa2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    8fa6:	4602      	mov	r2, r0
    8fa8:	4631      	mov	r1, r6
    8faa:	4620      	mov	r0, r4
    8fac:	f001 fd96 	bl	aadc <d_print_comp>
    8fb0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    8fb4:	f7ff bb70 	b.w	8698 <d_print_comp.part.10+0xe8>
    8fb8:	2300      	movs	r3, #0
    8fba:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
    8fbe:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    8fc2:	6857      	ldr	r7, [r2, #4]
    8fc4:	0772      	lsls	r2, r6, #29
    8fc6:	d505      	bpl.n	8fd4 <d_print_comp.part.10+0xa24>
    8fc8:	783b      	ldrb	r3, [r7, #0]
    8fca:	b91b      	cbnz	r3, 8fd4 <d_print_comp.part.10+0xa24>
    8fcc:	68ba      	ldr	r2, [r7, #8]
    8fce:	2a06      	cmp	r2, #6
    8fd0:	f001 83bb 	beq.w	a74a <d_print_comp.part.10+0x219a>
    8fd4:	463a      	mov	r2, r7
    8fd6:	4620      	mov	r0, r4
    8fd8:	4631      	mov	r1, r6
    8fda:	f001 fd7f 	bl	aadc <d_print_comp>
    8fde:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    8fe2:	2b3c      	cmp	r3, #60	; 0x3c
    8fe4:	f001 832f 	beq.w	a646 <d_print_comp.part.10+0x2096>
    8fe8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    8fec:	2bff      	cmp	r3, #255	; 0xff
    8fee:	f001 822a 	beq.w	a446 <d_print_comp.part.10+0x1e96>
    8ff2:	1c59      	adds	r1, r3, #1
    8ff4:	223c      	movs	r2, #60	; 0x3c
    8ff6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8ffa:	54e2      	strb	r2, [r4, r3]
    8ffc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    9000:	4631      	mov	r1, r6
    9002:	68aa      	ldr	r2, [r5, #8]
    9004:	4620      	mov	r0, r4
    9006:	f001 fd69 	bl	aadc <d_print_comp>
    900a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    900e:	2b3e      	cmp	r3, #62	; 0x3e
    9010:	f001 830b 	beq.w	a62a <d_print_comp.part.10+0x207a>
    9014:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9018:	2bff      	cmp	r3, #255	; 0xff
    901a:	f001 8201 	beq.w	a420 <d_print_comp.part.10+0x1e70>
    901e:	1c59      	adds	r1, r3, #1
    9020:	223e      	movs	r2, #62	; 0x3e
    9022:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9026:	54e2      	strb	r2, [r4, r3]
    9028:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    902c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
    9030:	f7ff bb32 	b.w	8698 <d_print_comp.part.10+0xe8>
    9034:	2301      	movs	r3, #1
    9036:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    903a:	f7ff bb2d 	b.w	8698 <d_print_comp.part.10+0xe8>
    903e:	f8d2 8008 	ldr.w	r8, [r2, #8]
    9042:	f898 3000 	ldrb.w	r3, [r8]
    9046:	2b37      	cmp	r3, #55	; 0x37
    9048:	f000 875d 	beq.w	9f06 <d_print_comp.part.10+0x1956>
    904c:	2301      	movs	r3, #1
    904e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    9052:	f7ff bb21 	b.w	8698 <d_print_comp.part.10+0xe8>
    9056:	6857      	ldr	r7, [r2, #4]
    9058:	6895      	ldr	r5, [r2, #8]
    905a:	783b      	ldrb	r3, [r7, #0]
    905c:	2b31      	cmp	r3, #49	; 0x31
    905e:	f001 8003 	beq.w	a068 <d_print_comp.part.10+0x1ab8>
    9062:	2b33      	cmp	r3, #51	; 0x33
    9064:	f001 8046 	beq.w	a0f4 <d_print_comp.part.10+0x1b44>
    9068:	463a      	mov	r2, r7
    906a:	4631      	mov	r1, r6
    906c:	f002 fb98 	bl	b7a0 <d_print_expr_op>
    9070:	4620      	mov	r0, r4
    9072:	4631      	mov	r1, r6
    9074:	462a      	mov	r2, r5
    9076:	f002 fbcd 	bl	b814 <d_print_subexpr>
    907a:	f7ff bb0d 	b.w	8698 <d_print_comp.part.10+0xe8>
    907e:	4631      	mov	r1, r6
    9080:	6852      	ldr	r2, [r2, #4]
    9082:	f002 fb8d 	bl	b7a0 <d_print_expr_op>
    9086:	f7ff bb07 	b.w	8698 <d_print_comp.part.10+0xe8>
    908a:	6857      	ldr	r7, [r2, #4]
    908c:	2f00      	cmp	r7, #0
    908e:	f040 86d4 	bne.w	9e3a <d_print_comp.part.10+0x188a>
    9092:	4d50      	ldr	r5, [pc, #320]	; (91d4 <d_print_comp.part.10+0xc24>)
    9094:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9098:	f105 0804 	add.w	r8, r5, #4
    909c:	e009      	b.n	90b2 <d_print_comp.part.10+0xb02>
    909e:	460b      	mov	r3, r1
    90a0:	3101      	adds	r1, #1
    90a2:	4545      	cmp	r5, r8
    90a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    90a8:	54e6      	strb	r6, [r4, r3]
    90aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    90ae:	f43f aaf3 	beq.w	8698 <d_print_comp.part.10+0xe8>
    90b2:	29ff      	cmp	r1, #255	; 0xff
    90b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    90b8:	d1f1      	bne.n	909e <d_print_comp.part.10+0xaee>
    90ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    90be:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    90c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    90c6:	4620      	mov	r0, r4
    90c8:	4798      	blx	r3
    90ca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    90ce:	3301      	adds	r3, #1
    90d0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    90d4:	2101      	movs	r1, #1
    90d6:	2300      	movs	r3, #0
    90d8:	e7e3      	b.n	90a2 <d_print_comp.part.10+0xaf2>
    90da:	4f3f      	ldr	r7, [pc, #252]	; (91d8 <d_print_comp.part.10+0xc28>)
    90dc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    90e0:	f107 0a0a 	add.w	sl, r7, #10
    90e4:	f04f 0900 	mov.w	r9, #0
    90e8:	e00a      	b.n	9100 <d_print_comp.part.10+0xb50>
    90ea:	460b      	mov	r3, r1
    90ec:	3101      	adds	r1, #1
    90ee:	4557      	cmp	r7, sl
    90f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    90f4:	f804 8003 	strb.w	r8, [r4, r3]
    90f8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    90fc:	f000 85e8 	beq.w	9cd0 <d_print_comp.part.10+0x1720>
    9100:	29ff      	cmp	r1, #255	; 0xff
    9102:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    9106:	d1f0      	bne.n	90ea <d_print_comp.part.10+0xb3a>
    9108:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    910c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    9110:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9114:	4620      	mov	r0, r4
    9116:	4798      	blx	r3
    9118:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    911c:	3301      	adds	r3, #1
    911e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9122:	2101      	movs	r1, #1
    9124:	2300      	movs	r3, #0
    9126:	e7e2      	b.n	90ee <d_print_comp.part.10+0xb3e>
    9128:	6852      	ldr	r2, [r2, #4]
    912a:	492c      	ldr	r1, [pc, #176]	; (91dc <d_print_comp.part.10+0xc2c>)
    912c:	a806      	add	r0, sp, #24
    912e:	f006 ff3d 	bl	ffac <sprintf>
    9132:	a806      	add	r0, sp, #24
    9134:	f7fa fafa 	bl	372c <strlen>
    9138:	2800      	cmp	r0, #0
    913a:	f43f aaad 	beq.w	8698 <d_print_comp.part.10+0xe8>
    913e:	f10d 0517 	add.w	r5, sp, #23
    9142:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9146:	182f      	adds	r7, r5, r0
    9148:	f04f 0800 	mov.w	r8, #0
    914c:	e009      	b.n	9162 <d_print_comp.part.10+0xbb2>
    914e:	460b      	mov	r3, r1
    9150:	3101      	adds	r1, #1
    9152:	42bd      	cmp	r5, r7
    9154:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9158:	54e6      	strb	r6, [r4, r3]
    915a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    915e:	f43f aa9b 	beq.w	8698 <d_print_comp.part.10+0xe8>
    9162:	29ff      	cmp	r1, #255	; 0xff
    9164:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9168:	d1f1      	bne.n	914e <d_print_comp.part.10+0xb9e>
    916a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    916e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9172:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9176:	4620      	mov	r0, r4
    9178:	4798      	blx	r3
    917a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    917e:	3301      	adds	r3, #1
    9180:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9184:	2101      	movs	r1, #1
    9186:	2300      	movs	r3, #0
    9188:	e7e3      	b.n	9152 <d_print_comp.part.10+0xba2>
    918a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    918e:	7915      	ldrb	r5, [r2, #4]
    9190:	29ff      	cmp	r1, #255	; 0xff
    9192:	f001 80ae 	beq.w	a2f2 <d_print_comp.part.10+0x1d42>
    9196:	1c4b      	adds	r3, r1, #1
    9198:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    919c:	5465      	strb	r5, [r4, r1]
    919e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    91a2:	f7ff ba79 	b.w	8698 <d_print_comp.part.10+0xe8>
    91a6:	4631      	mov	r1, r6
    91a8:	6852      	ldr	r2, [r2, #4]
    91aa:	f001 fc97 	bl	aadc <d_print_comp>
    91ae:	4620      	mov	r0, r4
    91b0:	4631      	mov	r1, r6
    91b2:	68aa      	ldr	r2, [r5, #8]
    91b4:	f001 fc92 	bl	aadc <d_print_comp>
    91b8:	f7ff ba6e 	b.w	8698 <d_print_comp.part.10+0xe8>
    91bc:	4f08      	ldr	r7, [pc, #32]	; (91e0 <d_print_comp.part.10+0xc30>)
    91be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    91c2:	f107 0a0e 	add.w	sl, r7, #14
    91c6:	f04f 0900 	mov.w	r9, #0
    91ca:	e01a      	b.n	9202 <d_print_comp.part.10+0xc52>
    91cc:	000150fb 	.word	0x000150fb
    91d0:	0001520f 	.word	0x0001520f
    91d4:	0001519f 	.word	0x0001519f
    91d8:	0001518f 	.word	0x0001518f
    91dc:	00014fbc 	.word	0x00014fbc
    91e0:	0001517f 	.word	0x0001517f
    91e4:	00015131 	.word	0x00015131
    91e8:	0001512f 	.word	0x0001512f
    91ec:	460b      	mov	r3, r1
    91ee:	3101      	adds	r1, #1
    91f0:	4557      	cmp	r7, sl
    91f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    91f6:	f804 8003 	strb.w	r8, [r4, r3]
    91fa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    91fe:	f000 8560 	beq.w	9cc2 <d_print_comp.part.10+0x1712>
    9202:	29ff      	cmp	r1, #255	; 0xff
    9204:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    9208:	d1f0      	bne.n	91ec <d_print_comp.part.10+0xc3c>
    920a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    920e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    9212:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9216:	4620      	mov	r0, r4
    9218:	4798      	blx	r3
    921a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    921e:	3301      	adds	r3, #1
    9220:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9224:	2101      	movs	r1, #1
    9226:	2300      	movs	r3, #0
    9228:	e7e2      	b.n	91f0 <d_print_comp.part.10+0xc40>
    922a:	6852      	ldr	r2, [r2, #4]
    922c:	7811      	ldrb	r1, [r2, #0]
    922e:	2927      	cmp	r1, #39	; 0x27
    9230:	f040 85b4 	bne.w	9d9c <d_print_comp.part.10+0x17ec>
    9234:	6852      	ldr	r2, [r2, #4]
    9236:	7c17      	ldrb	r7, [r2, #16]
    9238:	b15f      	cbz	r7, 9252 <d_print_comp.part.10+0xca2>
    923a:	2f06      	cmp	r7, #6
    923c:	f241 8178 	bls.w	a530 <d_print_comp.part.10+0x1f80>
    9240:	2f07      	cmp	r7, #7
    9242:	d106      	bne.n	9252 <d_print_comp.part.10+0xca2>
    9244:	68aa      	ldr	r2, [r5, #8]
    9246:	7811      	ldrb	r1, [r2, #0]
    9248:	b919      	cbnz	r1, 9252 <d_print_comp.part.10+0xca2>
    924a:	6891      	ldr	r1, [r2, #8]
    924c:	2901      	cmp	r1, #1
    924e:	f001 83ad 	beq.w	a9ac <d_print_comp.part.10+0x23fc>
    9252:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9256:	29ff      	cmp	r1, #255	; 0xff
    9258:	f001 8150 	beq.w	a4fc <d_print_comp.part.10+0x1f4c>
    925c:	1c4a      	adds	r2, r1, #1
    925e:	2328      	movs	r3, #40	; 0x28
    9260:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9264:	5463      	strb	r3, [r4, r1]
    9266:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    926a:	686a      	ldr	r2, [r5, #4]
    926c:	4620      	mov	r0, r4
    926e:	4631      	mov	r1, r6
    9270:	f001 fc34 	bl	aadc <d_print_comp>
    9274:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9278:	2bff      	cmp	r3, #255	; 0xff
    927a:	f001 811c 	beq.w	a4b6 <d_print_comp.part.10+0x1f06>
    927e:	1c59      	adds	r1, r3, #1
    9280:	2229      	movs	r2, #41	; 0x29
    9282:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9286:	54e2      	strb	r2, [r4, r3]
    9288:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    928c:	782b      	ldrb	r3, [r5, #0]
    928e:	2b3c      	cmp	r3, #60	; 0x3c
    9290:	f001 8206 	beq.w	a6a0 <d_print_comp.part.10+0x20f0>
    9294:	2f08      	cmp	r7, #8
    9296:	f001 81e4 	beq.w	a662 <d_print_comp.part.10+0x20b2>
    929a:	4620      	mov	r0, r4
    929c:	4631      	mov	r1, r6
    929e:	68aa      	ldr	r2, [r5, #8]
    92a0:	f001 fc1c 	bl	aadc <d_print_comp>
    92a4:	f7ff b9f8 	b.w	8698 <d_print_comp.part.10+0xe8>
    92a8:	2301      	movs	r3, #1
    92aa:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    92ae:	f7ff b9f3 	b.w	8698 <d_print_comp.part.10+0xe8>
    92b2:	6893      	ldr	r3, [r2, #8]
    92b4:	781a      	ldrb	r2, [r3, #0]
    92b6:	2a39      	cmp	r2, #57	; 0x39
    92b8:	f47f aec8 	bne.w	904c <d_print_comp.part.10+0xa9c>
    92bc:	689f      	ldr	r7, [r3, #8]
    92be:	783a      	ldrb	r2, [r7, #0]
    92c0:	2a3a      	cmp	r2, #58	; 0x3a
    92c2:	f47f aec3 	bne.w	904c <d_print_comp.part.10+0xa9c>
    92c6:	f8d5 a004 	ldr.w	sl, [r5, #4]
    92ca:	49ba      	ldr	r1, [pc, #744]	; (95b4 <d_print_comp.part.10+0x1004>)
    92cc:	f8da 2004 	ldr.w	r2, [sl, #4]
    92d0:	f8d3 8004 	ldr.w	r8, [r3, #4]
    92d4:	6810      	ldr	r0, [r2, #0]
    92d6:	f8d7 9004 	ldr.w	r9, [r7, #4]
    92da:	68bd      	ldr	r5, [r7, #8]
    92dc:	f006 fe8c 	bl	fff8 <strcmp>
    92e0:	2800      	cmp	r0, #0
    92e2:	f001 8290 	beq.w	a806 <d_print_comp.part.10+0x2256>
    92e6:	4620      	mov	r0, r4
    92e8:	49b3      	ldr	r1, [pc, #716]	; (95b8 <d_print_comp.part.10+0x1008>)
    92ea:	f7ff f92d 	bl	8548 <d_append_string>
    92ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
    92f2:	b143      	cbz	r3, 9306 <d_print_comp.part.10+0xd56>
    92f4:	4620      	mov	r0, r4
    92f6:	4631      	mov	r1, r6
    92f8:	4642      	mov	r2, r8
    92fa:	f002 fa8b 	bl	b814 <d_print_subexpr>
    92fe:	4620      	mov	r0, r4
    9300:	2120      	movs	r1, #32
    9302:	f7fd fa5b 	bl	67bc <d_append_char>
    9306:	464a      	mov	r2, r9
    9308:	4620      	mov	r0, r4
    930a:	4631      	mov	r1, r6
    930c:	f001 fbe6 	bl	aadc <d_print_comp>
    9310:	2d00      	cmp	r5, #0
    9312:	f43f a9c1 	beq.w	8698 <d_print_comp.part.10+0xe8>
    9316:	4620      	mov	r0, r4
    9318:	4631      	mov	r1, r6
    931a:	462a      	mov	r2, r5
    931c:	f002 fa7a 	bl	b814 <d_print_subexpr>
    9320:	f7ff b9ba 	b.w	8698 <d_print_comp.part.10+0xe8>
    9324:	6852      	ldr	r2, [r2, #4]
    9326:	b112      	cbz	r2, 932e <d_print_comp.part.10+0xd7e>
    9328:	4631      	mov	r1, r6
    932a:	f001 fbd7 	bl	aadc <d_print_comp>
    932e:	68ab      	ldr	r3, [r5, #8]
    9330:	2b00      	cmp	r3, #0
    9332:	f43f a9b1 	beq.w	8698 <d_print_comp.part.10+0xe8>
    9336:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
    933a:	2ffd      	cmp	r7, #253	; 0xfd
    933c:	f200 86f9 	bhi.w	a132 <d_print_comp.part.10+0x1b82>
    9340:	f8df 8288 	ldr.w	r8, [pc, #648]	; 95cc <d_print_comp.part.10+0x101c>
    9344:	f04f 0a00 	mov.w	sl, #0
    9348:	f108 0b02 	add.w	fp, r8, #2
    934c:	4639      	mov	r1, r7
    934e:	e009      	b.n	9364 <d_print_comp.part.10+0xdb4>
    9350:	460b      	mov	r3, r1
    9352:	3101      	adds	r1, #1
    9354:	45d8      	cmp	r8, fp
    9356:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    935a:	54e7      	strb	r7, [r4, r3]
    935c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9360:	f000 84fd 	beq.w	9d5e <d_print_comp.part.10+0x17ae>
    9364:	29ff      	cmp	r1, #255	; 0xff
    9366:	f818 7f01 	ldrb.w	r7, [r8, #1]!
    936a:	d1f1      	bne.n	9350 <d_print_comp.part.10+0xda0>
    936c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9370:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
    9374:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9378:	4620      	mov	r0, r4
    937a:	4798      	blx	r3
    937c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9380:	3301      	adds	r3, #1
    9382:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9386:	2101      	movs	r1, #1
    9388:	2300      	movs	r3, #0
    938a:	e7e3      	b.n	9354 <d_print_comp.part.10+0xda4>
    938c:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
    9390:	2b00      	cmp	r3, #0
    9392:	f040 8629 	bne.w	9fe8 <d_print_comp.part.10+0x1a38>
    9396:	686a      	ldr	r2, [r5, #4]
    9398:	4988      	ldr	r1, [pc, #544]	; (95bc <d_print_comp.part.10+0x100c>)
    939a:	6853      	ldr	r3, [r2, #4]
    939c:	428b      	cmp	r3, r1
    939e:	f000 85fb 	beq.w	9f98 <d_print_comp.part.10+0x19e8>
    93a2:	4631      	mov	r1, r6
    93a4:	4620      	mov	r0, r4
    93a6:	f001 fb99 	bl	aadc <d_print_comp>
    93aa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    93ae:	2bff      	cmp	r3, #255	; 0xff
    93b0:	f001 80f4 	beq.w	a59c <d_print_comp.part.10+0x1fec>
    93b4:	1c59      	adds	r1, r3, #1
    93b6:	2220      	movs	r2, #32
    93b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    93bc:	54e2      	strb	r2, [r4, r3]
    93be:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    93c2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
    93c6:	2b00      	cmp	r3, #0
    93c8:	f000 84eb 	beq.w	9da2 <d_print_comp.part.10+0x17f2>
    93cc:	4d7c      	ldr	r5, [pc, #496]	; (95c0 <d_print_comp.part.10+0x1010>)
    93ce:	f04f 0800 	mov.w	r8, #0
    93d2:	1daf      	adds	r7, r5, #6
    93d4:	e009      	b.n	93ea <d_print_comp.part.10+0xe3a>
    93d6:	460b      	mov	r3, r1
    93d8:	3101      	adds	r1, #1
    93da:	42bd      	cmp	r5, r7
    93dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    93e0:	54e6      	strb	r6, [r4, r3]
    93e2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    93e6:	f43f a957 	beq.w	8698 <d_print_comp.part.10+0xe8>
    93ea:	29ff      	cmp	r1, #255	; 0xff
    93ec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    93f0:	d1f1      	bne.n	93d6 <d_print_comp.part.10+0xe26>
    93f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    93f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    93fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    93fe:	4620      	mov	r0, r4
    9400:	4798      	blx	r3
    9402:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9406:	3301      	adds	r3, #1
    9408:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    940c:	2101      	movs	r1, #1
    940e:	2300      	movs	r3, #0
    9410:	e7e3      	b.n	93da <d_print_comp.part.10+0xe2a>
    9412:	ab16      	add	r3, sp, #88	; 0x58
    9414:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    9418:	f843 2d40 	str.w	r2, [r3, #-64]!
    941c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    9420:	68aa      	ldr	r2, [r5, #8]
    9422:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    9426:	9309      	str	r3, [sp, #36]	; 0x24
    9428:	2700      	movs	r7, #0
    942a:	4631      	mov	r1, r6
    942c:	9507      	str	r5, [sp, #28]
    942e:	9708      	str	r7, [sp, #32]
    9430:	f001 fb54 	bl	aadc <d_print_comp>
    9434:	9b08      	ldr	r3, [sp, #32]
    9436:	b923      	cbnz	r3, 9442 <d_print_comp.part.10+0xe92>
    9438:	4631      	mov	r1, r6
    943a:	462a      	mov	r2, r5
    943c:	4620      	mov	r0, r4
    943e:	f001 fb59 	bl	aaf4 <d_print_mod>
    9442:	9b06      	ldr	r3, [sp, #24]
    9444:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    9448:	f7ff b926 	b.w	8698 <d_print_comp.part.10+0xe8>
    944c:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
    9450:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    9454:	f8cd b008 	str.w	fp, [sp, #8]
    9458:	a916      	add	r1, sp, #88	; 0x58
    945a:	2200      	movs	r2, #0
    945c:	f841 bd40 	str.w	fp, [r1, #-64]!
    9460:	9309      	str	r3, [sp, #36]	; 0x24
    9462:	9b02      	ldr	r3, [sp, #8]
    9464:	9101      	str	r1, [sp, #4]
    9466:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    946a:	9507      	str	r5, [sp, #28]
    946c:	9208      	str	r2, [sp, #32]
    946e:	2b00      	cmp	r3, #0
    9470:	f001 831d 	beq.w	aaae <d_print_comp.part.10+0x24fe>
    9474:	685b      	ldr	r3, [r3, #4]
    9476:	781b      	ldrb	r3, [r3, #0]
    9478:	3b19      	subs	r3, #25
    947a:	2b02      	cmp	r3, #2
    947c:	f201 8317 	bhi.w	aaae <d_print_comp.part.10+0x24fe>
    9480:	46ab      	mov	fp, r5
    9482:	f04f 0801 	mov.w	r8, #1
    9486:	9f02      	ldr	r7, [sp, #8]
    9488:	9603      	str	r6, [sp, #12]
    948a:	468a      	mov	sl, r1
    948c:	460d      	mov	r5, r1
    948e:	e004      	b.n	949a <d_print_comp.part.10+0xeea>
    9490:	687b      	ldr	r3, [r7, #4]
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	3b19      	subs	r3, #25
    9496:	2b02      	cmp	r3, #2
    9498:	d81d      	bhi.n	94d6 <d_print_comp.part.10+0xf26>
    949a:	ea4f 1c08 	mov.w	ip, r8, lsl #4
    949e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    94a2:	68bb      	ldr	r3, [r7, #8]
    94a4:	44e1      	add	r9, ip
    94a6:	f1a9 0640 	sub.w	r6, r9, #64	; 0x40
    94aa:	b98b      	cbnz	r3, 94d0 <d_print_comp.part.10+0xf20>
    94ac:	f1b8 0f03 	cmp.w	r8, #3
    94b0:	f200 87dc 	bhi.w	a46c <d_print_comp.part.10+0x1ebc>
    94b4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    94b8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    94bc:	f849 5c40 	str.w	r5, [r9, #-64]
    94c0:	2101      	movs	r1, #1
    94c2:	eb0a 050c 	add.w	r5, sl, ip
    94c6:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    94ca:	f108 0801 	add.w	r8, r8, #1
    94ce:	60b9      	str	r1, [r7, #8]
    94d0:	683f      	ldr	r7, [r7, #0]
    94d2:	2f00      	cmp	r7, #0
    94d4:	d1dc      	bne.n	9490 <d_print_comp.part.10+0xee0>
    94d6:	9e03      	ldr	r6, [sp, #12]
    94d8:	f8db 2008 	ldr.w	r2, [fp, #8]
    94dc:	4620      	mov	r0, r4
    94de:	4631      	mov	r1, r6
    94e0:	f001 fafc 	bl	aadc <d_print_comp>
    94e4:	9b08      	ldr	r3, [sp, #32]
    94e6:	9a02      	ldr	r2, [sp, #8]
    94e8:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    94ec:	465d      	mov	r5, fp
    94ee:	2b00      	cmp	r3, #0
    94f0:	f47f a8d2 	bne.w	8698 <d_print_comp.part.10+0xe8>
    94f4:	f1b8 0f01 	cmp.w	r8, #1
    94f8:	f001 8139 	beq.w	a76e <d_print_comp.part.10+0x21be>
    94fc:	9b01      	ldr	r3, [sp, #4]
    94fe:	eb03 1708 	add.w	r7, r3, r8, lsl #4
    9502:	f857 2c0c 	ldr.w	r2, [r7, #-12]
    9506:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    950a:	4620      	mov	r0, r4
    950c:	4631      	mov	r1, r6
    950e:	f001 faf1 	bl	aaf4 <d_print_mod>
    9512:	f1b8 0f01 	cmp.w	r8, #1
    9516:	f1a7 0710 	sub.w	r7, r7, #16
    951a:	d1f2      	bne.n	9502 <d_print_comp.part.10+0xf52>
    951c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    9520:	4620      	mov	r0, r4
    9522:	4631      	mov	r1, r6
    9524:	1d2a      	adds	r2, r5, #4
    9526:	f001 febb 	bl	b2a0 <d_print_array_type.isra.9>
    952a:	f7ff b8b5 	b.w	8698 <d_print_comp.part.10+0xe8>
    952e:	06b3      	lsls	r3, r6, #26
    9530:	f100 8548 	bmi.w	9fc4 <d_print_comp.part.10+0x1a14>
    9534:	6853      	ldr	r3, [r2, #4]
    9536:	b11b      	cbz	r3, 9540 <d_print_comp.part.10+0xf90>
    9538:	f016 0340 	ands.w	r3, r6, #64	; 0x40
    953c:	f000 879b 	beq.w	a476 <d_print_comp.part.10+0x1ec6>
    9540:	f026 0660 	bic.w	r6, r6, #96	; 0x60
    9544:	4620      	mov	r0, r4
    9546:	4631      	mov	r1, r6
    9548:	f105 0208 	add.w	r2, r5, #8
    954c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    9550:	f001 ff76 	bl	b440 <d_print_function_type.isra.11>
    9554:	f7ff b8a0 	b.w	8698 <d_print_comp.part.10+0xe8>
    9558:	4e1a      	ldr	r6, [pc, #104]	; (95c4 <d_print_comp.part.10+0x1014>)
    955a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    955e:	f106 090e 	add.w	r9, r6, #14
    9562:	f04f 0800 	mov.w	r8, #0
    9566:	e009      	b.n	957c <d_print_comp.part.10+0xfcc>
    9568:	460b      	mov	r3, r1
    956a:	3101      	adds	r1, #1
    956c:	454e      	cmp	r6, r9
    956e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9572:	54e7      	strb	r7, [r4, r3]
    9574:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9578:	f000 82f7 	beq.w	9b6a <d_print_comp.part.10+0x15ba>
    957c:	29ff      	cmp	r1, #255	; 0xff
    957e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    9582:	d1f1      	bne.n	9568 <d_print_comp.part.10+0xfb8>
    9584:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9588:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    958c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9590:	4620      	mov	r0, r4
    9592:	4798      	blx	r3
    9594:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9598:	3301      	adds	r3, #1
    959a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    959e:	2101      	movs	r1, #1
    95a0:	2300      	movs	r3, #0
    95a2:	e7e3      	b.n	956c <d_print_comp.part.10+0xfbc>
    95a4:	4f08      	ldr	r7, [pc, #32]	; (95c8 <d_print_comp.part.10+0x1018>)
    95a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    95aa:	f107 0a16 	add.w	sl, r7, #22
    95ae:	f04f 0900 	mov.w	r9, #0
    95b2:	e018      	b.n	95e6 <d_print_comp.part.10+0x1036>
    95b4:	00014f9c 	.word	0x00014f9c
    95b8:	0001515c 	.word	0x0001515c
    95bc:	00014978 	.word	0x00014978
    95c0:	0001511f 	.word	0x0001511f
    95c4:	000151ff 	.word	0x000151ff
    95c8:	000150ff 	.word	0x000150ff
    95cc:	0001512f 	.word	0x0001512f
    95d0:	460b      	mov	r3, r1
    95d2:	3101      	adds	r1, #1
    95d4:	4557      	cmp	r7, sl
    95d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    95da:	f804 8003 	strb.w	r8, [r4, r3]
    95de:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    95e2:	f000 82bb 	beq.w	9b5c <d_print_comp.part.10+0x15ac>
    95e6:	29ff      	cmp	r1, #255	; 0xff
    95e8:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    95ec:	d1f0      	bne.n	95d0 <d_print_comp.part.10+0x1020>
    95ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    95f2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    95f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    95fa:	4620      	mov	r0, r4
    95fc:	4798      	blx	r3
    95fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9602:	3301      	adds	r3, #1
    9604:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9608:	2101      	movs	r1, #1
    960a:	2300      	movs	r3, #0
    960c:	e7e2      	b.n	95d4 <d_print_comp.part.10+0x1024>
    960e:	4fd0      	ldr	r7, [pc, #832]	; (9950 <d_print_comp.part.10+0x13a0>)
    9610:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9614:	f107 0a1c 	add.w	sl, r7, #28
    9618:	f04f 0900 	mov.w	r9, #0
    961c:	e00a      	b.n	9634 <d_print_comp.part.10+0x1084>
    961e:	460b      	mov	r3, r1
    9620:	3101      	adds	r1, #1
    9622:	4557      	cmp	r7, sl
    9624:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9628:	f804 8003 	strb.w	r8, [r4, r3]
    962c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    9630:	f000 8361 	beq.w	9cf6 <d_print_comp.part.10+0x1746>
    9634:	29ff      	cmp	r1, #255	; 0xff
    9636:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    963a:	d1f0      	bne.n	961e <d_print_comp.part.10+0x106e>
    963c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9640:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    9644:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9648:	4620      	mov	r0, r4
    964a:	4798      	blx	r3
    964c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9650:	3301      	adds	r3, #1
    9652:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9656:	2101      	movs	r1, #1
    9658:	2300      	movs	r3, #0
    965a:	e7e2      	b.n	9622 <d_print_comp.part.10+0x1072>
    965c:	4fbd      	ldr	r7, [pc, #756]	; (9954 <d_print_comp.part.10+0x13a4>)
    965e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9662:	f107 0a08 	add.w	sl, r7, #8
    9666:	f04f 0900 	mov.w	r9, #0
    966a:	e00a      	b.n	9682 <d_print_comp.part.10+0x10d2>
    966c:	460b      	mov	r3, r1
    966e:	3101      	adds	r1, #1
    9670:	4557      	cmp	r7, sl
    9672:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9676:	f804 8003 	strb.w	r8, [r4, r3]
    967a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    967e:	f000 82b1 	beq.w	9be4 <d_print_comp.part.10+0x1634>
    9682:	29ff      	cmp	r1, #255	; 0xff
    9684:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    9688:	d1f0      	bne.n	966c <d_print_comp.part.10+0x10bc>
    968a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    968e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    9692:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9696:	4620      	mov	r0, r4
    9698:	4798      	blx	r3
    969a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    969e:	3301      	adds	r3, #1
    96a0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    96a4:	2101      	movs	r1, #1
    96a6:	2300      	movs	r3, #0
    96a8:	e7e2      	b.n	9670 <d_print_comp.part.10+0x10c0>
    96aa:	4fab      	ldr	r7, [pc, #684]	; (9958 <d_print_comp.part.10+0x13a8>)
    96ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    96b0:	f107 0a1d 	add.w	sl, r7, #29
    96b4:	f04f 0900 	mov.w	r9, #0
    96b8:	e00a      	b.n	96d0 <d_print_comp.part.10+0x1120>
    96ba:	460b      	mov	r3, r1
    96bc:	3101      	adds	r1, #1
    96be:	4557      	cmp	r7, sl
    96c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    96c4:	f804 8003 	strb.w	r8, [r4, r3]
    96c8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    96cc:	f000 8340 	beq.w	9d50 <d_print_comp.part.10+0x17a0>
    96d0:	29ff      	cmp	r1, #255	; 0xff
    96d2:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    96d6:	d1f0      	bne.n	96ba <d_print_comp.part.10+0x110a>
    96d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    96dc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    96e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    96e4:	4620      	mov	r0, r4
    96e6:	4798      	blx	r3
    96e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    96ec:	3301      	adds	r3, #1
    96ee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    96f2:	2101      	movs	r1, #1
    96f4:	2300      	movs	r3, #0
    96f6:	e7e2      	b.n	96be <d_print_comp.part.10+0x110e>
    96f8:	4f98      	ldr	r7, [pc, #608]	; (995c <d_print_comp.part.10+0x13ac>)
    96fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    96fe:	f107 0a09 	add.w	sl, r7, #9
    9702:	f04f 0900 	mov.w	r9, #0
    9706:	e00a      	b.n	971e <d_print_comp.part.10+0x116e>
    9708:	460b      	mov	r3, r1
    970a:	3101      	adds	r1, #1
    970c:	4557      	cmp	r7, sl
    970e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9712:	f804 8003 	strb.w	r8, [r4, r3]
    9716:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    971a:	f000 81d4 	beq.w	9ac6 <d_print_comp.part.10+0x1516>
    971e:	29ff      	cmp	r1, #255	; 0xff
    9720:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    9724:	d1f0      	bne.n	9708 <d_print_comp.part.10+0x1158>
    9726:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    972a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    972e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9732:	4620      	mov	r0, r4
    9734:	4798      	blx	r3
    9736:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    973a:	3301      	adds	r3, #1
    973c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9740:	2101      	movs	r1, #1
    9742:	2300      	movs	r3, #0
    9744:	e7e2      	b.n	970c <d_print_comp.part.10+0x115c>
    9746:	f016 0604 	ands.w	r6, r6, #4
    974a:	6853      	ldr	r3, [r2, #4]
    974c:	f040 834b 	bne.w	9de6 <d_print_comp.part.10+0x1836>
    9750:	685f      	ldr	r7, [r3, #4]
    9752:	f8d3 9000 	ldr.w	r9, [r3]
    9756:	2f00      	cmp	r7, #0
    9758:	f43e af9e 	beq.w	8698 <d_print_comp.part.10+0xe8>
    975c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9760:	46b0      	mov	r8, r6
    9762:	e00a      	b.n	977a <d_print_comp.part.10+0x11ca>
    9764:	460b      	mov	r3, r1
    9766:	3101      	adds	r1, #1
    9768:	3601      	adds	r6, #1
    976a:	42b7      	cmp	r7, r6
    976c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9770:	54e5      	strb	r5, [r4, r3]
    9772:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    9776:	f43e af8f 	beq.w	8698 <d_print_comp.part.10+0xe8>
    977a:	29ff      	cmp	r1, #255	; 0xff
    977c:	f819 5006 	ldrb.w	r5, [r9, r6]
    9780:	d1f0      	bne.n	9764 <d_print_comp.part.10+0x11b4>
    9782:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9786:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    978a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    978e:	4620      	mov	r0, r4
    9790:	4798      	blx	r3
    9792:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9796:	3301      	adds	r3, #1
    9798:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    979c:	2101      	movs	r1, #1
    979e:	2300      	movs	r3, #0
    97a0:	e7e2      	b.n	9768 <d_print_comp.part.10+0x11b8>
    97a2:	6850      	ldr	r0, [r2, #4]
    97a4:	7803      	ldrb	r3, [r0, #0]
    97a6:	2b05      	cmp	r3, #5
    97a8:	f000 870b 	beq.w	a5c2 <d_print_comp.part.10+0x2012>
    97ac:	2b23      	cmp	r3, #35	; 0x23
    97ae:	f000 83a5 	beq.w	9efc <d_print_comp.part.10+0x194c>
    97b2:	782a      	ldrb	r2, [r5, #0]
    97b4:	429a      	cmp	r2, r3
    97b6:	f000 83a1 	beq.w	9efc <d_print_comp.part.10+0x194c>
    97ba:	2b24      	cmp	r3, #36	; 0x24
    97bc:	f47e af50 	bne.w	8660 <d_print_comp.part.10+0xb0>
    97c0:	ab16      	add	r3, sp, #88	; 0x58
    97c2:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    97c6:	6842      	ldr	r2, [r0, #4]
    97c8:	f843 1d40 	str.w	r1, [r3, #-64]!
    97cc:	2000      	movs	r0, #0
    97ce:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    97d2:	9507      	str	r5, [sp, #28]
    97d4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    97d8:	9008      	str	r0, [sp, #32]
    97da:	9109      	str	r1, [sp, #36]	; 0x24
    97dc:	2a00      	cmp	r2, #0
    97de:	f47e af4d 	bne.w	867c <d_print_comp.part.10+0xcc>
    97e2:	f7fe bf4a 	b.w	867a <d_print_comp.part.10+0xca>
    97e6:	4631      	mov	r1, r6
    97e8:	6852      	ldr	r2, [r2, #4]
    97ea:	f001 f977 	bl	aadc <d_print_comp>
    97ee:	f7fe bf53 	b.w	8698 <d_print_comp.part.10+0xe8>
    97f2:	6857      	ldr	r7, [r2, #4]
    97f4:	4d5a      	ldr	r5, [pc, #360]	; (9960 <d_print_comp.part.10+0x13b0>)
    97f6:	f8d7 9008 	ldr.w	r9, [r7, #8]
    97fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    97fe:	f105 0a08 	add.w	sl, r5, #8
    9802:	f04f 0800 	mov.w	r8, #0
    9806:	e009      	b.n	981c <d_print_comp.part.10+0x126c>
    9808:	460b      	mov	r3, r1
    980a:	3101      	adds	r1, #1
    980c:	4555      	cmp	r5, sl
    980e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9812:	54e6      	strb	r6, [r4, r3]
    9814:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9818:	f000 8163 	beq.w	9ae2 <d_print_comp.part.10+0x1532>
    981c:	29ff      	cmp	r1, #255	; 0xff
    981e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9822:	d1f1      	bne.n	9808 <d_print_comp.part.10+0x1258>
    9824:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9828:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    982c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9830:	4620      	mov	r0, r4
    9832:	4798      	blx	r3
    9834:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9838:	3301      	adds	r3, #1
    983a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    983e:	2101      	movs	r1, #1
    9840:	2300      	movs	r3, #0
    9842:	e7e3      	b.n	980c <d_print_comp.part.10+0x125c>
    9844:	4f45      	ldr	r7, [pc, #276]	; (995c <d_print_comp.part.10+0x13ac>)
    9846:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    984a:	f107 0a09 	add.w	sl, r7, #9
    984e:	f04f 0900 	mov.w	r9, #0
    9852:	e00a      	b.n	986a <d_print_comp.part.10+0x12ba>
    9854:	460b      	mov	r3, r1
    9856:	3101      	adds	r1, #1
    9858:	4557      	cmp	r7, sl
    985a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    985e:	f804 8003 	strb.w	r8, [r4, r3]
    9862:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    9866:	f000 8135 	beq.w	9ad4 <d_print_comp.part.10+0x1524>
    986a:	29ff      	cmp	r1, #255	; 0xff
    986c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    9870:	d1f0      	bne.n	9854 <d_print_comp.part.10+0x12a4>
    9872:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9876:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    987a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    987e:	4620      	mov	r0, r4
    9880:	4798      	blx	r3
    9882:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9886:	3301      	adds	r3, #1
    9888:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    988c:	2101      	movs	r1, #1
    988e:	2300      	movs	r3, #0
    9890:	e7e2      	b.n	9858 <d_print_comp.part.10+0x12a8>
    9892:	6852      	ldr	r2, [r2, #4]
    9894:	68af      	ldr	r7, [r5, #8]
    9896:	b112      	cbz	r2, 989e <d_print_comp.part.10+0x12ee>
    9898:	4631      	mov	r1, r6
    989a:	f001 f91f 	bl	aadc <d_print_comp>
    989e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    98a2:	2bff      	cmp	r3, #255	; 0xff
    98a4:	f000 8484 	beq.w	a1b0 <d_print_comp.part.10+0x1c00>
    98a8:	1c5a      	adds	r2, r3, #1
    98aa:	257b      	movs	r5, #123	; 0x7b
    98ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    98b0:	4631      	mov	r1, r6
    98b2:	54e5      	strb	r5, [r4, r3]
    98b4:	463a      	mov	r2, r7
    98b6:	4620      	mov	r0, r4
    98b8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    98bc:	f001 f90e 	bl	aadc <d_print_comp>
    98c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    98c4:	29ff      	cmp	r1, #255	; 0xff
    98c6:	f000 8461 	beq.w	a18c <d_print_comp.part.10+0x1bdc>
    98ca:	1c4a      	adds	r2, r1, #1
    98cc:	237d      	movs	r3, #125	; 0x7d
    98ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    98d2:	5463      	strb	r3, [r4, r1]
    98d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    98d8:	f7fe bede 	b.w	8698 <d_print_comp.part.10+0xe8>
    98dc:	2301      	movs	r3, #1
    98de:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    98e2:	f7fe bed9 	b.w	8698 <d_print_comp.part.10+0xe8>
    98e6:	687f      	ldr	r7, [r7, #4]
    98e8:	2f00      	cmp	r7, #0
    98ea:	f000 8699 	beq.w	a620 <d_print_comp.part.10+0x2070>
    98ee:	f1b8 0f04 	cmp.w	r8, #4
    98f2:	f47f a999 	bne.w	8c28 <d_print_comp.part.10+0x678>
    98f6:	2301      	movs	r3, #1
    98f8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    98fc:	f7fe becc 	b.w	8698 <d_print_comp.part.10+0xe8>
    9900:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9904:	29ff      	cmp	r1, #255	; 0xff
    9906:	f000 870e 	beq.w	a726 <d_print_comp.part.10+0x2176>
    990a:	1c4a      	adds	r2, r1, #1
    990c:	232e      	movs	r3, #46	; 0x2e
    990e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9912:	5463      	strb	r3, [r4, r1]
    9914:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9918:	f8d5 8008 	ldr.w	r8, [r5, #8]
    991c:	f898 3000 	ldrb.w	r3, [r8]
    9920:	2b45      	cmp	r3, #69	; 0x45
    9922:	f000 84c1 	beq.w	a2a8 <d_print_comp.part.10+0x1cf8>
    9926:	4620      	mov	r0, r4
    9928:	4631      	mov	r1, r6
    992a:	4642      	mov	r2, r8
    992c:	f001 f8d6 	bl	aadc <d_print_comp>
    9930:	f7fe beb2 	b.w	8698 <d_print_comp.part.10+0xe8>
    9934:	4620      	mov	r0, r4
    9936:	4631      	mov	r1, r6
    9938:	686a      	ldr	r2, [r5, #4]
    993a:	f001 f8cf 	bl	aadc <d_print_comp>
    993e:	f7fe beab 	b.w	8698 <d_print_comp.part.10+0xe8>
    9942:	4620      	mov	r0, r4
    9944:	4631      	mov	r1, r6
    9946:	686a      	ldr	r2, [r5, #4]
    9948:	f001 f8c8 	bl	aadc <d_print_comp>
    994c:	f7fe bea4 	b.w	8698 <d_print_comp.part.10+0xe8>
    9950:	000151cf 	.word	0x000151cf
    9954:	000151ef 	.word	0x000151ef
    9958:	000151af 	.word	0x000151af
    995c:	0001513f 	.word	0x0001513f
    9960:	00015133 	.word	0x00015133
    9964:	4fbd      	ldr	r7, [pc, #756]	; (9c5c <d_print_comp.part.10+0x16ac>)
    9966:	68aa      	ldr	r2, [r5, #8]
    9968:	4631      	mov	r1, r6
    996a:	4620      	mov	r0, r4
    996c:	f001 f8b6 	bl	aadc <d_print_comp>
    9970:	f107 0a05 	add.w	sl, r7, #5
    9974:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9978:	f04f 0900 	mov.w	r9, #0
    997c:	e009      	b.n	9992 <d_print_comp.part.10+0x13e2>
    997e:	460b      	mov	r3, r1
    9980:	3101      	adds	r1, #1
    9982:	4557      	cmp	r7, sl
    9984:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9988:	f804 8003 	strb.w	r8, [r4, r3]
    998c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    9990:	d013      	beq.n	99ba <d_print_comp.part.10+0x140a>
    9992:	29ff      	cmp	r1, #255	; 0xff
    9994:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    9998:	d1f1      	bne.n	997e <d_print_comp.part.10+0x13ce>
    999a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    999e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    99a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    99a6:	4620      	mov	r0, r4
    99a8:	4798      	blx	r3
    99aa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    99ae:	3301      	adds	r3, #1
    99b0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    99b4:	2101      	movs	r1, #1
    99b6:	2300      	movs	r3, #0
    99b8:	e7e3      	b.n	9982 <d_print_comp.part.10+0x13d2>
    99ba:	4620      	mov	r0, r4
    99bc:	4631      	mov	r1, r6
    99be:	686a      	ldr	r2, [r5, #4]
    99c0:	f001 f88c 	bl	aadc <d_print_comp>
    99c4:	f7fe be68 	b.w	8698 <d_print_comp.part.10+0xe8>
    99c8:	4620      	mov	r0, r4
    99ca:	4631      	mov	r1, r6
    99cc:	686a      	ldr	r2, [r5, #4]
    99ce:	f001 f885 	bl	aadc <d_print_comp>
    99d2:	f7fe be61 	b.w	8698 <d_print_comp.part.10+0xe8>
    99d6:	4620      	mov	r0, r4
    99d8:	4631      	mov	r1, r6
    99da:	686a      	ldr	r2, [r5, #4]
    99dc:	f001 f87e 	bl	aadc <d_print_comp>
    99e0:	f7fe be5a 	b.w	8698 <d_print_comp.part.10+0xe8>
    99e4:	4620      	mov	r0, r4
    99e6:	4631      	mov	r1, r6
    99e8:	686a      	ldr	r2, [r5, #4]
    99ea:	f001 f877 	bl	aadc <d_print_comp>
    99ee:	f7fe be53 	b.w	8698 <d_print_comp.part.10+0xe8>
    99f2:	4620      	mov	r0, r4
    99f4:	4631      	mov	r1, r6
    99f6:	686a      	ldr	r2, [r5, #4]
    99f8:	f001 f870 	bl	aadc <d_print_comp>
    99fc:	f7fe be4c 	b.w	8698 <d_print_comp.part.10+0xe8>
    9a00:	4620      	mov	r0, r4
    9a02:	4631      	mov	r1, r6
    9a04:	686a      	ldr	r2, [r5, #4]
    9a06:	f001 f869 	bl	aadc <d_print_comp>
    9a0a:	f7fe be45 	b.w	8698 <d_print_comp.part.10+0xe8>
    9a0e:	4f94      	ldr	r7, [pc, #592]	; (9c60 <d_print_comp.part.10+0x16b0>)
    9a10:	686a      	ldr	r2, [r5, #4]
    9a12:	4631      	mov	r1, r6
    9a14:	4620      	mov	r0, r4
    9a16:	f001 f861 	bl	aadc <d_print_comp>
    9a1a:	f107 0a04 	add.w	sl, r7, #4
    9a1e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9a22:	f04f 0900 	mov.w	r9, #0
    9a26:	e009      	b.n	9a3c <d_print_comp.part.10+0x148c>
    9a28:	460b      	mov	r3, r1
    9a2a:	3101      	adds	r1, #1
    9a2c:	4557      	cmp	r7, sl
    9a2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9a32:	f804 8003 	strb.w	r8, [r4, r3]
    9a36:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    9a3a:	d01a      	beq.n	9a72 <d_print_comp.part.10+0x14c2>
    9a3c:	29ff      	cmp	r1, #255	; 0xff
    9a3e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    9a42:	d1f1      	bne.n	9a28 <d_print_comp.part.10+0x1478>
    9a44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9a48:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    9a4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9a50:	4620      	mov	r0, r4
    9a52:	4798      	blx	r3
    9a54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9a58:	3301      	adds	r3, #1
    9a5a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9a5e:	2101      	movs	r1, #1
    9a60:	2300      	movs	r3, #0
    9a62:	e7e3      	b.n	9a2c <d_print_comp.part.10+0x147c>
    9a64:	4620      	mov	r0, r4
    9a66:	4631      	mov	r1, r6
    9a68:	686a      	ldr	r2, [r5, #4]
    9a6a:	f001 f837 	bl	aadc <d_print_comp>
    9a6e:	f7fe be13 	b.w	8698 <d_print_comp.part.10+0xe8>
    9a72:	4620      	mov	r0, r4
    9a74:	4631      	mov	r1, r6
    9a76:	68aa      	ldr	r2, [r5, #8]
    9a78:	f001 f830 	bl	aadc <d_print_comp>
    9a7c:	f7fe be0c 	b.w	8698 <d_print_comp.part.10+0xe8>
    9a80:	4620      	mov	r0, r4
    9a82:	4631      	mov	r1, r6
    9a84:	686a      	ldr	r2, [r5, #4]
    9a86:	f001 f829 	bl	aadc <d_print_comp>
    9a8a:	f7fe be05 	b.w	8698 <d_print_comp.part.10+0xe8>
    9a8e:	4620      	mov	r0, r4
    9a90:	4631      	mov	r1, r6
    9a92:	686a      	ldr	r2, [r5, #4]
    9a94:	f001 f822 	bl	aadc <d_print_comp>
    9a98:	f7fe bdfe 	b.w	8698 <d_print_comp.part.10+0xe8>
    9a9c:	4620      	mov	r0, r4
    9a9e:	4631      	mov	r1, r6
    9aa0:	686a      	ldr	r2, [r5, #4]
    9aa2:	f001 f81b 	bl	aadc <d_print_comp>
    9aa6:	f7fe bdf7 	b.w	8698 <d_print_comp.part.10+0xe8>
    9aaa:	4620      	mov	r0, r4
    9aac:	4631      	mov	r1, r6
    9aae:	686a      	ldr	r2, [r5, #4]
    9ab0:	f001 f814 	bl	aadc <d_print_comp>
    9ab4:	f7fe bdf0 	b.w	8698 <d_print_comp.part.10+0xe8>
    9ab8:	4620      	mov	r0, r4
    9aba:	4631      	mov	r1, r6
    9abc:	686a      	ldr	r2, [r5, #4]
    9abe:	f001 f80d 	bl	aadc <d_print_comp>
    9ac2:	f7fe bde9 	b.w	8698 <d_print_comp.part.10+0xe8>
    9ac6:	4620      	mov	r0, r4
    9ac8:	4631      	mov	r1, r6
    9aca:	1d2a      	adds	r2, r5, #4
    9acc:	f001 fda4 	bl	b618 <d_print_cast.isra.12>
    9ad0:	f7fe bde2 	b.w	8698 <d_print_comp.part.10+0xe8>
    9ad4:	4620      	mov	r0, r4
    9ad6:	4631      	mov	r1, r6
    9ad8:	68aa      	ldr	r2, [r5, #8]
    9ada:	f000 ffff 	bl	aadc <d_print_comp>
    9ade:	f7fe bddb 	b.w	8698 <d_print_comp.part.10+0xe8>
    9ae2:	687d      	ldr	r5, [r7, #4]
    9ae4:	782b      	ldrb	r3, [r5, #0]
    9ae6:	3b61      	subs	r3, #97	; 0x61
    9ae8:	2b19      	cmp	r3, #25
    9aea:	f240 82a4 	bls.w	a036 <d_print_comp.part.10+0x1a86>
    9aee:	eb05 0309 	add.w	r3, r5, r9
    9af2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    9af6:	2b20      	cmp	r3, #32
    9af8:	bf0c      	ite	eq
    9afa:	f109 37ff 	addeq.w	r7, r9, #4294967295	; 0xffffffff
    9afe:	464f      	movne	r7, r9
    9b00:	2f00      	cmp	r7, #0
    9b02:	f43e adc9 	beq.w	8698 <d_print_comp.part.10+0xe8>
    9b06:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9b0a:	442f      	add	r7, r5
    9b0c:	f04f 0800 	mov.w	r8, #0
    9b10:	e009      	b.n	9b26 <d_print_comp.part.10+0x1576>
    9b12:	460b      	mov	r3, r1
    9b14:	3101      	adds	r1, #1
    9b16:	42bd      	cmp	r5, r7
    9b18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9b1c:	54e6      	strb	r6, [r4, r3]
    9b1e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9b22:	f43e adb9 	beq.w	8698 <d_print_comp.part.10+0xe8>
    9b26:	29ff      	cmp	r1, #255	; 0xff
    9b28:	f815 6b01 	ldrb.w	r6, [r5], #1
    9b2c:	d1f1      	bne.n	9b12 <d_print_comp.part.10+0x1562>
    9b2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9b32:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9b36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9b3a:	4620      	mov	r0, r4
    9b3c:	4798      	blx	r3
    9b3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9b42:	3301      	adds	r3, #1
    9b44:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9b48:	2101      	movs	r1, #1
    9b4a:	2300      	movs	r3, #0
    9b4c:	e7e3      	b.n	9b16 <d_print_comp.part.10+0x1566>
    9b4e:	4620      	mov	r0, r4
    9b50:	4631      	mov	r1, r6
    9b52:	686a      	ldr	r2, [r5, #4]
    9b54:	f000 ffc2 	bl	aadc <d_print_comp>
    9b58:	f7fe bd9e 	b.w	8698 <d_print_comp.part.10+0xe8>
    9b5c:	4620      	mov	r0, r4
    9b5e:	4631      	mov	r1, r6
    9b60:	686a      	ldr	r2, [r5, #4]
    9b62:	f000 ffbb 	bl	aadc <d_print_comp>
    9b66:	f7fe bd97 	b.w	8698 <d_print_comp.part.10+0xe8>
    9b6a:	686a      	ldr	r2, [r5, #4]
    9b6c:	493d      	ldr	r1, [pc, #244]	; (9c64 <d_print_comp.part.10+0x16b4>)
    9b6e:	3201      	adds	r2, #1
    9b70:	a806      	add	r0, sp, #24
    9b72:	f006 fa1b 	bl	ffac <sprintf>
    9b76:	a806      	add	r0, sp, #24
    9b78:	f7f9 fdd8 	bl	372c <strlen>
    9b7c:	b320      	cbz	r0, 9bc8 <d_print_comp.part.10+0x1618>
    9b7e:	f10d 0517 	add.w	r5, sp, #23
    9b82:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9b86:	182f      	adds	r7, r5, r0
    9b88:	f04f 0800 	mov.w	r8, #0
    9b8c:	e008      	b.n	9ba0 <d_print_comp.part.10+0x15f0>
    9b8e:	460b      	mov	r3, r1
    9b90:	3101      	adds	r1, #1
    9b92:	42bd      	cmp	r5, r7
    9b94:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9b98:	54e6      	strb	r6, [r4, r3]
    9b9a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9b9e:	d015      	beq.n	9bcc <d_print_comp.part.10+0x161c>
    9ba0:	29ff      	cmp	r1, #255	; 0xff
    9ba2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9ba6:	d1f2      	bne.n	9b8e <d_print_comp.part.10+0x15de>
    9ba8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9bac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9bb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9bb4:	4620      	mov	r0, r4
    9bb6:	4798      	blx	r3
    9bb8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9bbc:	3301      	adds	r3, #1
    9bbe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9bc2:	2101      	movs	r1, #1
    9bc4:	2300      	movs	r3, #0
    9bc6:	e7e4      	b.n	9b92 <d_print_comp.part.10+0x15e2>
    9bc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9bcc:	29ff      	cmp	r1, #255	; 0xff
    9bce:	f000 8302 	beq.w	a1d6 <d_print_comp.part.10+0x1c26>
    9bd2:	1c4a      	adds	r2, r1, #1
    9bd4:	237d      	movs	r3, #125	; 0x7d
    9bd6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9bda:	5463      	strb	r3, [r4, r1]
    9bdc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9be0:	f7fe bd5a 	b.w	8698 <d_print_comp.part.10+0xe8>
    9be4:	4631      	mov	r1, r6
    9be6:	4e20      	ldr	r6, [pc, #128]	; (9c68 <d_print_comp.part.10+0x16b8>)
    9be8:	686a      	ldr	r2, [r5, #4]
    9bea:	4620      	mov	r0, r4
    9bec:	f000 ff76 	bl	aadc <d_print_comp>
    9bf0:	f106 0902 	add.w	r9, r6, #2
    9bf4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9bf8:	f04f 0800 	mov.w	r8, #0
    9bfc:	e008      	b.n	9c10 <d_print_comp.part.10+0x1660>
    9bfe:	460b      	mov	r3, r1
    9c00:	3101      	adds	r1, #1
    9c02:	454e      	cmp	r6, r9
    9c04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9c08:	54e7      	strb	r7, [r4, r3]
    9c0a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9c0e:	d013      	beq.n	9c38 <d_print_comp.part.10+0x1688>
    9c10:	29ff      	cmp	r1, #255	; 0xff
    9c12:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    9c16:	d1f2      	bne.n	9bfe <d_print_comp.part.10+0x164e>
    9c18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9c1c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9c20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9c24:	4620      	mov	r0, r4
    9c26:	4798      	blx	r3
    9c28:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9c2c:	3301      	adds	r3, #1
    9c2e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9c32:	2101      	movs	r1, #1
    9c34:	2300      	movs	r3, #0
    9c36:	e7e4      	b.n	9c02 <d_print_comp.part.10+0x1652>
    9c38:	68aa      	ldr	r2, [r5, #8]
    9c3a:	490a      	ldr	r1, [pc, #40]	; (9c64 <d_print_comp.part.10+0x16b4>)
    9c3c:	3201      	adds	r2, #1
    9c3e:	a806      	add	r0, sp, #24
    9c40:	f006 f9b4 	bl	ffac <sprintf>
    9c44:	a806      	add	r0, sp, #24
    9c46:	f7f9 fd71 	bl	372c <strlen>
    9c4a:	b360      	cbz	r0, 9ca6 <d_print_comp.part.10+0x16f6>
    9c4c:	f10d 0517 	add.w	r5, sp, #23
    9c50:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9c54:	182f      	adds	r7, r5, r0
    9c56:	f04f 0800 	mov.w	r8, #0
    9c5a:	e010      	b.n	9c7e <d_print_comp.part.10+0x16ce>
    9c5c:	000150c7 	.word	0x000150c7
    9c60:	00015003 	.word	0x00015003
    9c64:	00014fbc 	.word	0x00014fbc
    9c68:	000151fb 	.word	0x000151fb
    9c6c:	460b      	mov	r3, r1
    9c6e:	3101      	adds	r1, #1
    9c70:	42bd      	cmp	r5, r7
    9c72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9c76:	54e6      	strb	r6, [r4, r3]
    9c78:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9c7c:	d015      	beq.n	9caa <d_print_comp.part.10+0x16fa>
    9c7e:	29ff      	cmp	r1, #255	; 0xff
    9c80:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9c84:	d1f2      	bne.n	9c6c <d_print_comp.part.10+0x16bc>
    9c86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9c8a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9c8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9c92:	4620      	mov	r0, r4
    9c94:	4798      	blx	r3
    9c96:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9c9a:	3301      	adds	r3, #1
    9c9c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9ca0:	2101      	movs	r1, #1
    9ca2:	2300      	movs	r3, #0
    9ca4:	e7e4      	b.n	9c70 <d_print_comp.part.10+0x16c0>
    9ca6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9caa:	29ff      	cmp	r1, #255	; 0xff
    9cac:	f000 8332 	beq.w	a314 <d_print_comp.part.10+0x1d64>
    9cb0:	1c4a      	adds	r2, r1, #1
    9cb2:	237d      	movs	r3, #125	; 0x7d
    9cb4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9cb8:	5463      	strb	r3, [r4, r1]
    9cba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9cbe:	f7fe bceb 	b.w	8698 <d_print_comp.part.10+0xe8>
    9cc2:	4620      	mov	r0, r4
    9cc4:	4631      	mov	r1, r6
    9cc6:	686a      	ldr	r2, [r5, #4]
    9cc8:	f000 ff08 	bl	aadc <d_print_comp>
    9ccc:	f7fe bce4 	b.w	8698 <d_print_comp.part.10+0xe8>
    9cd0:	4631      	mov	r1, r6
    9cd2:	686a      	ldr	r2, [r5, #4]
    9cd4:	4620      	mov	r0, r4
    9cd6:	f000 ff01 	bl	aadc <d_print_comp>
    9cda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9cde:	29ff      	cmp	r1, #255	; 0xff
    9ce0:	f000 828a 	beq.w	a1f8 <d_print_comp.part.10+0x1c48>
    9ce4:	1c4a      	adds	r2, r1, #1
    9ce6:	2329      	movs	r3, #41	; 0x29
    9ce8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9cec:	5463      	strb	r3, [r4, r1]
    9cee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9cf2:	f7fe bcd1 	b.w	8698 <d_print_comp.part.10+0xe8>
    9cf6:	4620      	mov	r0, r4
    9cf8:	4631      	mov	r1, r6
    9cfa:	686a      	ldr	r2, [r5, #4]
    9cfc:	f000 feee 	bl	aadc <d_print_comp>
    9d00:	f7fe bcca 	b.w	8698 <d_print_comp.part.10+0xe8>
    9d04:	4631      	mov	r1, r6
    9d06:	68aa      	ldr	r2, [r5, #8]
    9d08:	4620      	mov	r0, r4
    9d0a:	f000 fee7 	bl	aadc <d_print_comp>
    9d0e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9d12:	29ff      	cmp	r1, #255	; 0xff
    9d14:	f000 830f 	beq.w	a336 <d_print_comp.part.10+0x1d86>
    9d18:	1c4a      	adds	r2, r1, #1
    9d1a:	235d      	movs	r3, #93	; 0x5d
    9d1c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9d20:	5463      	strb	r3, [r4, r1]
    9d22:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9d26:	f7fe bcb7 	b.w	8698 <d_print_comp.part.10+0xe8>
    9d2a:	4631      	mov	r1, r6
    9d2c:	68aa      	ldr	r2, [r5, #8]
    9d2e:	4620      	mov	r0, r4
    9d30:	f000 fed4 	bl	aadc <d_print_comp>
    9d34:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9d38:	29ff      	cmp	r1, #255	; 0xff
    9d3a:	f000 826e 	beq.w	a21a <d_print_comp.part.10+0x1c6a>
    9d3e:	1c4a      	adds	r2, r1, #1
    9d40:	235d      	movs	r3, #93	; 0x5d
    9d42:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9d46:	5463      	strb	r3, [r4, r1]
    9d48:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9d4c:	f7fe bca4 	b.w	8698 <d_print_comp.part.10+0xe8>
    9d50:	4620      	mov	r0, r4
    9d52:	4631      	mov	r1, r6
    9d54:	686a      	ldr	r2, [r5, #4]
    9d56:	f000 fec1 	bl	aadc <d_print_comp>
    9d5a:	f7fe bc9d 	b.w	8698 <d_print_comp.part.10+0xe8>
    9d5e:	68aa      	ldr	r2, [r5, #8]
    9d60:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
    9d64:	460f      	mov	r7, r1
    9d66:	4620      	mov	r0, r4
    9d68:	4631      	mov	r1, r6
    9d6a:	f000 feb7 	bl	aadc <d_print_comp>
    9d6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9d72:	429d      	cmp	r5, r3
    9d74:	f47e ac90 	bne.w	8698 <d_print_comp.part.10+0xe8>
    9d78:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9d7c:	42bb      	cmp	r3, r7
    9d7e:	f47e ac8b 	bne.w	8698 <d_print_comp.part.10+0xe8>
    9d82:	3f02      	subs	r7, #2
    9d84:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    9d88:	f7fe bc86 	b.w	8698 <d_print_comp.part.10+0xe8>
    9d8c:	686d      	ldr	r5, [r5, #4]
    9d8e:	9501      	str	r5, [sp, #4]
    9d90:	f1b8 0f00 	cmp.w	r8, #0
    9d94:	f47f a83b 	bne.w	8e0e <d_print_comp.part.10+0x85e>
    9d98:	f7fe bc7e 	b.w	8698 <d_print_comp.part.10+0xe8>
    9d9c:	2700      	movs	r7, #0
    9d9e:	f7ff ba58 	b.w	9252 <d_print_comp.part.10+0xca2>
    9da2:	4dab      	ldr	r5, [pc, #684]	; (a050 <d_print_comp.part.10+0x1aa0>)
    9da4:	4698      	mov	r8, r3
    9da6:	1daf      	adds	r7, r5, #6
    9da8:	e009      	b.n	9dbe <d_print_comp.part.10+0x180e>
    9daa:	460b      	mov	r3, r1
    9dac:	3101      	adds	r1, #1
    9dae:	42bd      	cmp	r5, r7
    9db0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9db4:	54e6      	strb	r6, [r4, r3]
    9db6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9dba:	f43e ac6d 	beq.w	8698 <d_print_comp.part.10+0xe8>
    9dbe:	29ff      	cmp	r1, #255	; 0xff
    9dc0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9dc4:	d1f1      	bne.n	9daa <d_print_comp.part.10+0x17fa>
    9dc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9dca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9dce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9dd2:	4620      	mov	r0, r4
    9dd4:	4798      	blx	r3
    9dd6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9dda:	3301      	adds	r3, #1
    9ddc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9de0:	2101      	movs	r1, #1
    9de2:	2300      	movs	r3, #0
    9de4:	e7e3      	b.n	9dae <d_print_comp.part.10+0x17fe>
    9de6:	68df      	ldr	r7, [r3, #12]
    9de8:	f8d3 9008 	ldr.w	r9, [r3, #8]
    9dec:	2f00      	cmp	r7, #0
    9dee:	f43e ac53 	beq.w	8698 <d_print_comp.part.10+0xe8>
    9df2:	2500      	movs	r5, #0
    9df4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9df8:	46a8      	mov	r8, r5
    9dfa:	e00a      	b.n	9e12 <d_print_comp.part.10+0x1862>
    9dfc:	460b      	mov	r3, r1
    9dfe:	3101      	adds	r1, #1
    9e00:	3501      	adds	r5, #1
    9e02:	42af      	cmp	r7, r5
    9e04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9e08:	54e6      	strb	r6, [r4, r3]
    9e0a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9e0e:	f43e ac43 	beq.w	8698 <d_print_comp.part.10+0xe8>
    9e12:	29ff      	cmp	r1, #255	; 0xff
    9e14:	f819 6005 	ldrb.w	r6, [r9, r5]
    9e18:	d1f0      	bne.n	9dfc <d_print_comp.part.10+0x184c>
    9e1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9e1e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9e22:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9e26:	4620      	mov	r0, r4
    9e28:	4798      	blx	r3
    9e2a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9e2e:	3301      	adds	r3, #1
    9e30:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9e34:	2101      	movs	r1, #1
    9e36:	2300      	movs	r3, #0
    9e38:	e7e2      	b.n	9e00 <d_print_comp.part.10+0x1850>
    9e3a:	4d86      	ldr	r5, [pc, #536]	; (a054 <d_print_comp.part.10+0x1aa4>)
    9e3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9e40:	f105 0906 	add.w	r9, r5, #6
    9e44:	f04f 0800 	mov.w	r8, #0
    9e48:	e008      	b.n	9e5c <d_print_comp.part.10+0x18ac>
    9e4a:	460b      	mov	r3, r1
    9e4c:	3101      	adds	r1, #1
    9e4e:	454d      	cmp	r5, r9
    9e50:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9e54:	54e6      	strb	r6, [r4, r3]
    9e56:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9e5a:	d013      	beq.n	9e84 <d_print_comp.part.10+0x18d4>
    9e5c:	29ff      	cmp	r1, #255	; 0xff
    9e5e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9e62:	d1f2      	bne.n	9e4a <d_print_comp.part.10+0x189a>
    9e64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9e68:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9e6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9e70:	4620      	mov	r0, r4
    9e72:	4798      	blx	r3
    9e74:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9e78:	3301      	adds	r3, #1
    9e7a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9e7e:	2101      	movs	r1, #1
    9e80:	2300      	movs	r3, #0
    9e82:	e7e4      	b.n	9e4e <d_print_comp.part.10+0x189e>
    9e84:	463a      	mov	r2, r7
    9e86:	a806      	add	r0, sp, #24
    9e88:	4973      	ldr	r1, [pc, #460]	; (a058 <d_print_comp.part.10+0x1aa8>)
    9e8a:	f006 f88f 	bl	ffac <sprintf>
    9e8e:	a806      	add	r0, sp, #24
    9e90:	f7f9 fc4c 	bl	372c <strlen>
    9e94:	b320      	cbz	r0, 9ee0 <d_print_comp.part.10+0x1930>
    9e96:	f10d 0517 	add.w	r5, sp, #23
    9e9a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9e9e:	182f      	adds	r7, r5, r0
    9ea0:	f04f 0800 	mov.w	r8, #0
    9ea4:	e008      	b.n	9eb8 <d_print_comp.part.10+0x1908>
    9ea6:	460b      	mov	r3, r1
    9ea8:	3101      	adds	r1, #1
    9eaa:	42bd      	cmp	r5, r7
    9eac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9eb0:	54e6      	strb	r6, [r4, r3]
    9eb2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9eb6:	d015      	beq.n	9ee4 <d_print_comp.part.10+0x1934>
    9eb8:	29ff      	cmp	r1, #255	; 0xff
    9eba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9ebe:	d1f2      	bne.n	9ea6 <d_print_comp.part.10+0x18f6>
    9ec0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9ec4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9ec8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9ecc:	4620      	mov	r0, r4
    9ece:	4798      	blx	r3
    9ed0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9ed4:	3301      	adds	r3, #1
    9ed6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9eda:	2101      	movs	r1, #1
    9edc:	2300      	movs	r3, #0
    9ede:	e7e4      	b.n	9eaa <d_print_comp.part.10+0x18fa>
    9ee0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9ee4:	29ff      	cmp	r1, #255	; 0xff
    9ee6:	f000 8445 	beq.w	a774 <d_print_comp.part.10+0x21c4>
    9eea:	1c4a      	adds	r2, r1, #1
    9eec:	237d      	movs	r3, #125	; 0x7d
    9eee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9ef2:	5463      	strb	r3, [r4, r1]
    9ef4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9ef8:	f7fe bbce 	b.w	8698 <d_print_comp.part.10+0xe8>
    9efc:	4605      	mov	r5, r0
    9efe:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    9f02:	f7fe bbaf 	b.w	8664 <d_print_comp.part.10+0xb4>
    9f06:	6852      	ldr	r2, [r2, #4]
    9f08:	6853      	ldr	r3, [r2, #4]
    9f0a:	6819      	ldr	r1, [r3, #0]
    9f0c:	7848      	ldrb	r0, [r1, #1]
    9f0e:	2863      	cmp	r0, #99	; 0x63
    9f10:	f000 83e2 	beq.w	a6d8 <d_print_comp.part.10+0x2128>
    9f14:	7811      	ldrb	r1, [r2, #0]
    9f16:	2931      	cmp	r1, #49	; 0x31
    9f18:	f000 844e 	beq.w	a7b8 <d_print_comp.part.10+0x2208>
    9f1c:	6853      	ldr	r3, [r2, #4]
    9f1e:	494f      	ldr	r1, [pc, #316]	; (a05c <d_print_comp.part.10+0x1aac>)
    9f20:	6818      	ldr	r0, [r3, #0]
    9f22:	f006 f869 	bl	fff8 <strcmp>
    9f26:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9f2a:	b918      	cbnz	r0, 9f34 <d_print_comp.part.10+0x1984>
    9f2c:	7813      	ldrb	r3, [r2, #0]
    9f2e:	2b03      	cmp	r3, #3
    9f30:	f000 845b 	beq.w	a7ea <d_print_comp.part.10+0x223a>
    9f34:	4620      	mov	r0, r4
    9f36:	4631      	mov	r1, r6
    9f38:	f001 fc6c 	bl	b814 <d_print_subexpr>
    9f3c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    9f40:	4947      	ldr	r1, [pc, #284]	; (a060 <d_print_comp.part.10+0x1ab0>)
    9f42:	f8d8 3004 	ldr.w	r3, [r8, #4]
    9f46:	681f      	ldr	r7, [r3, #0]
    9f48:	4638      	mov	r0, r7
    9f4a:	f006 f855 	bl	fff8 <strcmp>
    9f4e:	2800      	cmp	r0, #0
    9f50:	f000 8422 	beq.w	a798 <d_print_comp.part.10+0x21e8>
    9f54:	4638      	mov	r0, r7
    9f56:	4941      	ldr	r1, [pc, #260]	; (a05c <d_print_comp.part.10+0x1aac>)
    9f58:	f006 f84e 	bl	fff8 <strcmp>
    9f5c:	2800      	cmp	r0, #0
    9f5e:	f040 843d 	bne.w	a7dc <d_print_comp.part.10+0x222c>
    9f62:	68ab      	ldr	r3, [r5, #8]
    9f64:	4631      	mov	r1, r6
    9f66:	689a      	ldr	r2, [r3, #8]
    9f68:	4620      	mov	r0, r4
    9f6a:	f001 fc53 	bl	b814 <d_print_subexpr>
    9f6e:	686b      	ldr	r3, [r5, #4]
    9f70:	781a      	ldrb	r2, [r3, #0]
    9f72:	2a31      	cmp	r2, #49	; 0x31
    9f74:	f47e ab90 	bne.w	8698 <d_print_comp.part.10+0xe8>
    9f78:	685b      	ldr	r3, [r3, #4]
    9f7a:	689a      	ldr	r2, [r3, #8]
    9f7c:	2a01      	cmp	r2, #1
    9f7e:	f47e ab8b 	bne.w	8698 <d_print_comp.part.10+0xe8>
    9f82:	685b      	ldr	r3, [r3, #4]
    9f84:	781b      	ldrb	r3, [r3, #0]
    9f86:	2b3e      	cmp	r3, #62	; 0x3e
    9f88:	f47e ab86 	bne.w	8698 <d_print_comp.part.10+0xe8>
    9f8c:	4620      	mov	r0, r4
    9f8e:	2129      	movs	r1, #41	; 0x29
    9f90:	f7fc fc14 	bl	67bc <d_append_char>
    9f94:	f7fe bb80 	b.w	8698 <d_print_comp.part.10+0xe8>
    9f98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9f9c:	f7ff ba11 	b.w	93c2 <d_print_comp.part.10+0xe12>
    9fa0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    9fa4:	e002      	b.n	9fac <d_print_comp.part.10+0x19fc>
    9fa6:	7802      	ldrb	r2, [r0, #0]
    9fa8:	2a2f      	cmp	r2, #47	; 0x2f
    9faa:	d106      	bne.n	9fba <d_print_comp.part.10+0x1a0a>
    9fac:	2b00      	cmp	r3, #0
    9fae:	f340 8576 	ble.w	aa9e <d_print_comp.part.10+0x24ee>
    9fb2:	6880      	ldr	r0, [r0, #8]
    9fb4:	3b01      	subs	r3, #1
    9fb6:	2800      	cmp	r0, #0
    9fb8:	d1f5      	bne.n	9fa6 <d_print_comp.part.10+0x19f6>
    9fba:	2301      	movs	r3, #1
    9fbc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    9fc0:	f7fe bb6a 	b.w	8698 <d_print_comp.part.10+0xe8>
    9fc4:	f026 0660 	bic.w	r6, r6, #96	; 0x60
    9fc8:	3208      	adds	r2, #8
    9fca:	4631      	mov	r1, r6
    9fcc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    9fd0:	f001 fa36 	bl	b440 <d_print_function_type.isra.11>
    9fd4:	686a      	ldr	r2, [r5, #4]
    9fd6:	2a00      	cmp	r2, #0
    9fd8:	f43e ab5e 	beq.w	8698 <d_print_comp.part.10+0xe8>
    9fdc:	4620      	mov	r0, r4
    9fde:	4631      	mov	r1, r6
    9fe0:	f000 fd7c 	bl	aadc <d_print_comp>
    9fe4:	f7fe bb58 	b.w	8698 <d_print_comp.part.10+0xe8>
    9fe8:	4f1e      	ldr	r7, [pc, #120]	; (a064 <d_print_comp.part.10+0x1ab4>)
    9fea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9fee:	f107 0a05 	add.w	sl, r7, #5
    9ff2:	f04f 0900 	mov.w	r9, #0
    9ff6:	e00a      	b.n	a00e <d_print_comp.part.10+0x1a5e>
    9ff8:	460b      	mov	r3, r1
    9ffa:	3101      	adds	r1, #1
    9ffc:	4557      	cmp	r7, sl
    9ffe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a002:	f804 8003 	strb.w	r8, [r4, r3]
    a006:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    a00a:	f43f a9c4 	beq.w	9396 <d_print_comp.part.10+0xde6>
    a00e:	29ff      	cmp	r1, #255	; 0xff
    a010:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    a014:	d1f0      	bne.n	9ff8 <d_print_comp.part.10+0x1a48>
    a016:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a01a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    a01e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a022:	4620      	mov	r0, r4
    a024:	4798      	blx	r3
    a026:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a02a:	3301      	adds	r3, #1
    a02c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a030:	2101      	movs	r1, #1
    a032:	2300      	movs	r3, #0
    a034:	e7e2      	b.n	9ffc <d_print_comp.part.10+0x1a4c>
    a036:	29ff      	cmp	r1, #255	; 0xff
    a038:	f000 8421 	beq.w	a87e <d_print_comp.part.10+0x22ce>
    a03c:	1c4a      	adds	r2, r1, #1
    a03e:	2320      	movs	r3, #32
    a040:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a044:	5463      	strb	r3, [r4, r1]
    a046:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a04a:	687d      	ldr	r5, [r7, #4]
    a04c:	e54f      	b.n	9aee <d_print_comp.part.10+0x153e>
    a04e:	bf00      	nop
    a050:	00015127 	.word	0x00015127
    a054:	000151a7 	.word	0x000151a7
    a058:	00014fbc 	.word	0x00014fbc
    a05c:	00014f90 	.word	0x00014f90
    a060:	00015154 	.word	0x00015154
    a064:	00015117 	.word	0x00015117
    a068:	687b      	ldr	r3, [r7, #4]
    a06a:	49c5      	ldr	r1, [pc, #788]	; (a380 <d_print_comp.part.10+0x1dd0>)
    a06c:	f8d3 8000 	ldr.w	r8, [r3]
    a070:	4640      	mov	r0, r8
    a072:	f005 ffc1 	bl	fff8 <strcmp>
    a076:	782b      	ldrb	r3, [r5, #0]
    a078:	b910      	cbnz	r0, a080 <d_print_comp.part.10+0x1ad0>
    a07a:	2b03      	cmp	r3, #3
    a07c:	f000 8411 	beq.w	a8a2 <d_print_comp.part.10+0x22f2>
    a080:	2b37      	cmp	r3, #55	; 0x37
    a082:	f000 8487 	beq.w	a994 <d_print_comp.part.10+0x23e4>
    a086:	463a      	mov	r2, r7
    a088:	4620      	mov	r0, r4
    a08a:	4631      	mov	r1, r6
    a08c:	f001 fb88 	bl	b7a0 <d_print_expr_op>
    a090:	f1b8 0f00 	cmp.w	r8, #0
    a094:	f43e afec 	beq.w	9070 <d_print_comp.part.10+0xac0>
    a098:	4640      	mov	r0, r8
    a09a:	49ba      	ldr	r1, [pc, #744]	; (a384 <d_print_comp.part.10+0x1dd4>)
    a09c:	f005 ffac 	bl	fff8 <strcmp>
    a0a0:	2800      	cmp	r0, #0
    a0a2:	f000 823e 	beq.w	a522 <d_print_comp.part.10+0x1f72>
    a0a6:	4640      	mov	r0, r8
    a0a8:	49b7      	ldr	r1, [pc, #732]	; (a388 <d_print_comp.part.10+0x1dd8>)
    a0aa:	f005 ffa5 	bl	fff8 <strcmp>
    a0ae:	4607      	mov	r7, r0
    a0b0:	2800      	cmp	r0, #0
    a0b2:	f47e afdd 	bne.w	9070 <d_print_comp.part.10+0xac0>
    a0b6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    a0ba:	2bff      	cmp	r3, #255	; 0xff
    a0bc:	f000 8421 	beq.w	a902 <d_print_comp.part.10+0x2352>
    a0c0:	1c58      	adds	r0, r3, #1
    a0c2:	2728      	movs	r7, #40	; 0x28
    a0c4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    a0c8:	4631      	mov	r1, r6
    a0ca:	54e7      	strb	r7, [r4, r3]
    a0cc:	462a      	mov	r2, r5
    a0ce:	4620      	mov	r0, r4
    a0d0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    a0d4:	f000 fd02 	bl	aadc <d_print_comp>
    a0d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a0dc:	29ff      	cmp	r1, #255	; 0xff
    a0de:	f000 83ff 	beq.w	a8e0 <d_print_comp.part.10+0x2330>
    a0e2:	2329      	movs	r3, #41	; 0x29
    a0e4:	1c4a      	adds	r2, r1, #1
    a0e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a0ea:	5463      	strb	r3, [r4, r1]
    a0ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a0f0:	f7fe bad2 	b.w	8698 <d_print_comp.part.10+0xe8>
    a0f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a0f8:	29ff      	cmp	r1, #255	; 0xff
    a0fa:	f000 83af 	beq.w	a85c <d_print_comp.part.10+0x22ac>
    a0fe:	1c4a      	adds	r2, r1, #1
    a100:	2328      	movs	r3, #40	; 0x28
    a102:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a106:	4620      	mov	r0, r4
    a108:	5463      	strb	r3, [r4, r1]
    a10a:	1d3a      	adds	r2, r7, #4
    a10c:	4631      	mov	r1, r6
    a10e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a112:	f001 fa81 	bl	b618 <d_print_cast.isra.12>
    a116:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a11a:	29ff      	cmp	r1, #255	; 0xff
    a11c:	f000 838d 	beq.w	a83a <d_print_comp.part.10+0x228a>
    a120:	1c4a      	adds	r2, r1, #1
    a122:	2329      	movs	r3, #41	; 0x29
    a124:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a128:	5463      	strb	r3, [r4, r1]
    a12a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a12e:	f7fe bf9f 	b.w	9070 <d_print_comp.part.10+0xac0>
    a132:	f04f 0800 	mov.w	r8, #0
    a136:	f804 8007 	strb.w	r8, [r4, r7]
    a13a:	4639      	mov	r1, r7
    a13c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a140:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a144:	4620      	mov	r0, r4
    a146:	4798      	blx	r3
    a148:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a14c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    a150:	3301      	adds	r3, #1
    a152:	4647      	mov	r7, r8
    a154:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a158:	f7ff b8f2 	b.w	9340 <d_print_comp.part.10+0xd90>
    a15c:	4620      	mov	r0, r4
    a15e:	4631      	mov	r1, r6
    a160:	686a      	ldr	r2, [r5, #4]
    a162:	f000 fcbb 	bl	aadc <d_print_comp>
    a166:	f7fe ba97 	b.w	8698 <d_print_comp.part.10+0xe8>
    a16a:	2700      	movs	r7, #0
    a16c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a170:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    a174:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
    a178:	4798      	blx	r3
    a17a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a17e:	3301      	adds	r3, #1
    a180:	4639      	mov	r1, r7
    a182:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a186:	2201      	movs	r2, #1
    a188:	f7fe bd2c 	b.w	8be4 <d_print_comp.part.10+0x634>
    a18c:	2500      	movs	r5, #0
    a18e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a192:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a196:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a19a:	4620      	mov	r0, r4
    a19c:	4798      	blx	r3
    a19e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a1a2:	3301      	adds	r3, #1
    a1a4:	4629      	mov	r1, r5
    a1a6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a1aa:	2201      	movs	r2, #1
    a1ac:	f7ff bb8e 	b.w	98cc <d_print_comp.part.10+0x131c>
    a1b0:	2500      	movs	r5, #0
    a1b2:	4619      	mov	r1, r3
    a1b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a1b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a1bc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a1c0:	4620      	mov	r0, r4
    a1c2:	4798      	blx	r3
    a1c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a1c8:	1c5a      	adds	r2, r3, #1
    a1ca:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a1ce:	462b      	mov	r3, r5
    a1d0:	2201      	movs	r2, #1
    a1d2:	f7ff bb6a 	b.w	98aa <d_print_comp.part.10+0x12fa>
    a1d6:	2500      	movs	r5, #0
    a1d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a1dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a1e0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a1e4:	4620      	mov	r0, r4
    a1e6:	4798      	blx	r3
    a1e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a1ec:	3301      	adds	r3, #1
    a1ee:	4629      	mov	r1, r5
    a1f0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a1f4:	2201      	movs	r2, #1
    a1f6:	e4ed      	b.n	9bd4 <d_print_comp.part.10+0x1624>
    a1f8:	2500      	movs	r5, #0
    a1fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a1fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a202:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a206:	4620      	mov	r0, r4
    a208:	4798      	blx	r3
    a20a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a20e:	3301      	adds	r3, #1
    a210:	4629      	mov	r1, r5
    a212:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a216:	2201      	movs	r2, #1
    a218:	e565      	b.n	9ce6 <d_print_comp.part.10+0x1736>
    a21a:	2500      	movs	r5, #0
    a21c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a220:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a224:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a228:	4620      	mov	r0, r4
    a22a:	4798      	blx	r3
    a22c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a230:	3301      	adds	r3, #1
    a232:	4629      	mov	r1, r5
    a234:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a238:	2201      	movs	r2, #1
    a23a:	e581      	b.n	9d40 <d_print_comp.part.10+0x1790>
    a23c:	6856      	ldr	r6, [r2, #4]
    a23e:	6897      	ldr	r7, [r2, #8]
    a240:	4437      	add	r7, r6
    a242:	42be      	cmp	r6, r7
    a244:	f4be aa28 	bcs.w	8698 <d_print_comp.part.10+0xe8>
    a248:	f04f 0800 	mov.w	r8, #0
    a24c:	e00d      	b.n	a26a <d_print_comp.part.10+0x1cba>
    a24e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a252:	29ff      	cmp	r1, #255	; 0xff
    a254:	d018      	beq.n	a288 <d_print_comp.part.10+0x1cd8>
    a256:	1c4b      	adds	r3, r1, #1
    a258:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    a25c:	5465      	strb	r5, [r4, r1]
    a25e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    a262:	3601      	adds	r6, #1
    a264:	42b7      	cmp	r7, r6
    a266:	f67e aa17 	bls.w	8698 <d_print_comp.part.10+0xe8>
    a26a:	1bbb      	subs	r3, r7, r6
    a26c:	2b03      	cmp	r3, #3
    a26e:	7835      	ldrb	r5, [r6, #0]
    a270:	dded      	ble.n	a24e <d_print_comp.part.10+0x1c9e>
    a272:	2d5f      	cmp	r5, #95	; 0x5f
    a274:	d1eb      	bne.n	a24e <d_print_comp.part.10+0x1c9e>
    a276:	7872      	ldrb	r2, [r6, #1]
    a278:	2a5f      	cmp	r2, #95	; 0x5f
    a27a:	d1e8      	bne.n	a24e <d_print_comp.part.10+0x1c9e>
    a27c:	78b3      	ldrb	r3, [r6, #2]
    a27e:	2b55      	cmp	r3, #85	; 0x55
    a280:	f000 8350 	beq.w	a924 <d_print_comp.part.10+0x2374>
    a284:	4615      	mov	r5, r2
    a286:	e7e2      	b.n	a24e <d_print_comp.part.10+0x1c9e>
    a288:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a28c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a290:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a294:	4620      	mov	r0, r4
    a296:	4798      	blx	r3
    a298:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a29c:	3301      	adds	r3, #1
    a29e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a2a2:	2100      	movs	r1, #0
    a2a4:	2301      	movs	r3, #1
    a2a6:	e7d7      	b.n	a258 <d_print_comp.part.10+0x1ca8>
    a2a8:	4d38      	ldr	r5, [pc, #224]	; (a38c <d_print_comp.part.10+0x1ddc>)
    a2aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a2ae:	f105 0a0d 	add.w	sl, r5, #13
    a2b2:	f04f 0900 	mov.w	r9, #0
    a2b6:	e008      	b.n	a2ca <d_print_comp.part.10+0x1d1a>
    a2b8:	460b      	mov	r3, r1
    a2ba:	3101      	adds	r1, #1
    a2bc:	4555      	cmp	r5, sl
    a2be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a2c2:	54e7      	strb	r7, [r4, r3]
    a2c4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    a2c8:	d046      	beq.n	a358 <d_print_comp.part.10+0x1da8>
    a2ca:	29ff      	cmp	r1, #255	; 0xff
    a2cc:	f815 7f01 	ldrb.w	r7, [r5, #1]!
    a2d0:	d1f2      	bne.n	a2b8 <d_print_comp.part.10+0x1d08>
    a2d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a2d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    a2da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a2de:	4620      	mov	r0, r4
    a2e0:	4798      	blx	r3
    a2e2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a2e6:	3301      	adds	r3, #1
    a2e8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a2ec:	2101      	movs	r1, #1
    a2ee:	2300      	movs	r3, #0
    a2f0:	e7e4      	b.n	a2bc <d_print_comp.part.10+0x1d0c>
    a2f2:	2600      	movs	r6, #0
    a2f4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a2f8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    a2fc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    a300:	4798      	blx	r3
    a302:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a306:	3301      	adds	r3, #1
    a308:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a30c:	4631      	mov	r1, r6
    a30e:	2301      	movs	r3, #1
    a310:	f7fe bf42 	b.w	9198 <d_print_comp.part.10+0xbe8>
    a314:	2500      	movs	r5, #0
    a316:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a31a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a31e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a322:	4620      	mov	r0, r4
    a324:	4798      	blx	r3
    a326:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a32a:	3301      	adds	r3, #1
    a32c:	4629      	mov	r1, r5
    a32e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a332:	2201      	movs	r2, #1
    a334:	e4bd      	b.n	9cb2 <d_print_comp.part.10+0x1702>
    a336:	2500      	movs	r5, #0
    a338:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a33c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a340:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a344:	4620      	mov	r0, r4
    a346:	4798      	blx	r3
    a348:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a34c:	3301      	adds	r3, #1
    a34e:	4629      	mov	r1, r5
    a350:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a354:	2201      	movs	r2, #1
    a356:	e4e0      	b.n	9d1a <d_print_comp.part.10+0x176a>
    a358:	f8d8 2008 	ldr.w	r2, [r8, #8]
    a35c:	490c      	ldr	r1, [pc, #48]	; (a390 <d_print_comp.part.10+0x1de0>)
    a35e:	3201      	adds	r2, #1
    a360:	a806      	add	r0, sp, #24
    a362:	f005 fe23 	bl	ffac <sprintf>
    a366:	a806      	add	r0, sp, #24
    a368:	f7f9 f9e0 	bl	372c <strlen>
    a36c:	b378      	cbz	r0, a3ce <d_print_comp.part.10+0x1e1e>
    a36e:	f10d 0517 	add.w	r5, sp, #23
    a372:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a376:	eb05 0a00 	add.w	sl, r5, r0
    a37a:	f04f 0900 	mov.w	r9, #0
    a37e:	e012      	b.n	a3a6 <d_print_comp.part.10+0x1df6>
    a380:	0001514c 	.word	0x0001514c
    a384:	00015150 	.word	0x00015150
    a388:	00015438 	.word	0x00015438
    a38c:	00014fab 	.word	0x00014fab
    a390:	00014fbc 	.word	0x00014fbc
    a394:	460b      	mov	r3, r1
    a396:	3101      	adds	r1, #1
    a398:	4555      	cmp	r5, sl
    a39a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a39e:	54e7      	strb	r7, [r4, r3]
    a3a0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    a3a4:	d015      	beq.n	a3d2 <d_print_comp.part.10+0x1e22>
    a3a6:	29ff      	cmp	r1, #255	; 0xff
    a3a8:	f815 7f01 	ldrb.w	r7, [r5, #1]!
    a3ac:	d1f2      	bne.n	a394 <d_print_comp.part.10+0x1de4>
    a3ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a3b2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    a3b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a3ba:	4620      	mov	r0, r4
    a3bc:	4798      	blx	r3
    a3be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a3c2:	3301      	adds	r3, #1
    a3c4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a3c8:	2101      	movs	r1, #1
    a3ca:	2300      	movs	r3, #0
    a3cc:	e7e4      	b.n	a398 <d_print_comp.part.10+0x1de8>
    a3ce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a3d2:	4dbd      	ldr	r5, [pc, #756]	; (a6c8 <d_print_comp.part.10+0x2118>)
    a3d4:	f04f 0900 	mov.w	r9, #0
    a3d8:	f105 0a03 	add.w	sl, r5, #3
    a3dc:	e008      	b.n	a3f0 <d_print_comp.part.10+0x1e40>
    a3de:	460b      	mov	r3, r1
    a3e0:	3101      	adds	r1, #1
    a3e2:	4555      	cmp	r5, sl
    a3e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a3e8:	54e7      	strb	r7, [r4, r3]
    a3ea:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    a3ee:	d013      	beq.n	a418 <d_print_comp.part.10+0x1e68>
    a3f0:	29ff      	cmp	r1, #255	; 0xff
    a3f2:	f815 7f01 	ldrb.w	r7, [r5, #1]!
    a3f6:	d1f2      	bne.n	a3de <d_print_comp.part.10+0x1e2e>
    a3f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a3fc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    a400:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a404:	4620      	mov	r0, r4
    a406:	4798      	blx	r3
    a408:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a40c:	3301      	adds	r3, #1
    a40e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a412:	2101      	movs	r1, #1
    a414:	2300      	movs	r3, #0
    a416:	e7e4      	b.n	a3e2 <d_print_comp.part.10+0x1e32>
    a418:	f8d8 8004 	ldr.w	r8, [r8, #4]
    a41c:	f7ff ba83 	b.w	9926 <d_print_comp.part.10+0x1376>
    a420:	2500      	movs	r5, #0
    a422:	4619      	mov	r1, r3
    a424:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a428:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a42c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a430:	4620      	mov	r0, r4
    a432:	4798      	blx	r3
    a434:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a438:	1c5a      	adds	r2, r3, #1
    a43a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a43e:	462b      	mov	r3, r5
    a440:	2101      	movs	r1, #1
    a442:	f7fe bded 	b.w	9020 <d_print_comp.part.10+0xa70>
    a446:	2700      	movs	r7, #0
    a448:	4619      	mov	r1, r3
    a44a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a44e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a452:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    a456:	4620      	mov	r0, r4
    a458:	4798      	blx	r3
    a45a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a45e:	1c5a      	adds	r2, r3, #1
    a460:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a464:	463b      	mov	r3, r7
    a466:	2101      	movs	r1, #1
    a468:	f7fe bdc4 	b.w	8ff4 <d_print_comp.part.10+0xa44>
    a46c:	2301      	movs	r3, #1
    a46e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    a472:	f7fe b911 	b.w	8698 <d_print_comp.part.10+0xe8>
    a476:	aa16      	add	r2, sp, #88	; 0x58
    a478:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    a47c:	f842 1d40 	str.w	r1, [r2, #-64]!
    a480:	f026 0660 	bic.w	r6, r6, #96	; 0x60
    a484:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    a488:	686a      	ldr	r2, [r5, #4]
    a48a:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
    a48e:	9308      	str	r3, [sp, #32]
    a490:	4631      	mov	r1, r6
    a492:	4620      	mov	r0, r4
    a494:	9507      	str	r5, [sp, #28]
    a496:	9709      	str	r7, [sp, #36]	; 0x24
    a498:	f000 fb20 	bl	aadc <d_print_comp>
    a49c:	9b08      	ldr	r3, [sp, #32]
    a49e:	9a06      	ldr	r2, [sp, #24]
    a4a0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	f47e a8f7 	bne.w	8698 <d_print_comp.part.10+0xe8>
    a4aa:	4620      	mov	r0, r4
    a4ac:	2120      	movs	r1, #32
    a4ae:	f7fc f985 	bl	67bc <d_append_char>
    a4b2:	f7ff b847 	b.w	9544 <d_print_comp.part.10+0xf94>
    a4b6:	2200      	movs	r2, #0
    a4b8:	4619      	mov	r1, r3
    a4ba:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
    a4be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a4c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a4c6:	4620      	mov	r0, r4
    a4c8:	4798      	blx	r3
    a4ca:	2329      	movs	r3, #41	; 0x29
    a4cc:	7023      	strb	r3, [r4, #0]
    a4ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a4d2:	782a      	ldrb	r2, [r5, #0]
    a4d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a4d8:	2101      	movs	r1, #1
    a4da:	3301      	adds	r3, #1
    a4dc:	2a3c      	cmp	r2, #60	; 0x3c
    a4de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a4e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a4e6:	f47e aed5 	bne.w	9294 <d_print_comp.part.10+0xce4>
    a4ea:	232d      	movs	r3, #45	; 0x2d
    a4ec:	1c4a      	adds	r2, r1, #1
    a4ee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a4f2:	5463      	strb	r3, [r4, r1]
    a4f4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a4f8:	f7fe becc 	b.w	9294 <d_print_comp.part.10+0xce4>
    a4fc:	f04f 0800 	mov.w	r8, #0
    a500:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a504:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a508:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a50c:	4620      	mov	r0, r4
    a50e:	4798      	blx	r3
    a510:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a514:	3301      	adds	r3, #1
    a516:	4641      	mov	r1, r8
    a518:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a51c:	2201      	movs	r2, #1
    a51e:	f7fe be9e 	b.w	925e <d_print_comp.part.10+0xcae>
    a522:	4620      	mov	r0, r4
    a524:	4631      	mov	r1, r6
    a526:	462a      	mov	r2, r5
    a528:	f000 fad8 	bl	aadc <d_print_comp>
    a52c:	f7fe b8b4 	b.w	8698 <d_print_comp.part.10+0xe8>
    a530:	f8d5 8008 	ldr.w	r8, [r5, #8]
    a534:	f898 2000 	ldrb.w	r2, [r8]
    a538:	2a00      	cmp	r2, #0
    a53a:	f47e ae8a 	bne.w	9252 <d_print_comp.part.10+0xca2>
    a53e:	2b3c      	cmp	r3, #60	; 0x3c
    a540:	f000 8290 	beq.w	aa64 <d_print_comp.part.10+0x24b4>
    a544:	4631      	mov	r1, r6
    a546:	4642      	mov	r2, r8
    a548:	4620      	mov	r0, r4
    a54a:	3f02      	subs	r7, #2
    a54c:	f000 fac6 	bl	aadc <d_print_comp>
    a550:	2f04      	cmp	r7, #4
    a552:	f63e a8a1 	bhi.w	8698 <d_print_comp.part.10+0xe8>
    a556:	e8df f007 	tbb	[pc, r7]
    a55a:	151b      	.short	0x151b
    a55c:	090f      	.short	0x090f
    a55e:	03          	.byte	0x03
    a55f:	00          	.byte	0x00
    a560:	4620      	mov	r0, r4
    a562:	495a      	ldr	r1, [pc, #360]	; (a6cc <d_print_comp.part.10+0x211c>)
    a564:	f7fd fff0 	bl	8548 <d_append_string>
    a568:	f7fe b896 	b.w	8698 <d_print_comp.part.10+0xe8>
    a56c:	4620      	mov	r0, r4
    a56e:	4958      	ldr	r1, [pc, #352]	; (a6d0 <d_print_comp.part.10+0x2120>)
    a570:	f7fd ffea 	bl	8548 <d_append_string>
    a574:	f7fe b890 	b.w	8698 <d_print_comp.part.10+0xe8>
    a578:	4620      	mov	r0, r4
    a57a:	4956      	ldr	r1, [pc, #344]	; (a6d4 <d_print_comp.part.10+0x2124>)
    a57c:	f7fd ffe4 	bl	8548 <d_append_string>
    a580:	f7fe b88a 	b.w	8698 <d_print_comp.part.10+0xe8>
    a584:	4620      	mov	r0, r4
    a586:	216c      	movs	r1, #108	; 0x6c
    a588:	f7fc f918 	bl	67bc <d_append_char>
    a58c:	f7fe b884 	b.w	8698 <d_print_comp.part.10+0xe8>
    a590:	4620      	mov	r0, r4
    a592:	2175      	movs	r1, #117	; 0x75
    a594:	f7fc f912 	bl	67bc <d_append_char>
    a598:	f7fe b87e 	b.w	8698 <d_print_comp.part.10+0xe8>
    a59c:	2600      	movs	r6, #0
    a59e:	4619      	mov	r1, r3
    a5a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a5a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a5a8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    a5ac:	4620      	mov	r0, r4
    a5ae:	4798      	blx	r3
    a5b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a5b4:	1c5a      	adds	r2, r3, #1
    a5b6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a5ba:	4633      	mov	r3, r6
    a5bc:	2101      	movs	r1, #1
    a5be:	f7fe befa 	b.w	93b6 <d_print_comp.part.10+0xe06>
    a5c2:	1d01      	adds	r1, r0, #4
    a5c4:	4620      	mov	r0, r4
    a5c6:	f7fc fa15 	bl	69f4 <d_lookup_template_argument.isra.6>
    a5ca:	b180      	cbz	r0, a5ee <d_print_comp.part.10+0x203e>
    a5cc:	7803      	ldrb	r3, [r0, #0]
    a5ce:	2b2f      	cmp	r3, #47	; 0x2f
    a5d0:	f47f a8ec 	bne.w	97ac <d_print_comp.part.10+0x11fc>
    a5d4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    a5d8:	e005      	b.n	a5e6 <d_print_comp.part.10+0x2036>
    a5da:	6880      	ldr	r0, [r0, #8]
    a5dc:	3b01      	subs	r3, #1
    a5de:	b130      	cbz	r0, a5ee <d_print_comp.part.10+0x203e>
    a5e0:	7802      	ldrb	r2, [r0, #0]
    a5e2:	2a2f      	cmp	r2, #47	; 0x2f
    a5e4:	d103      	bne.n	a5ee <d_print_comp.part.10+0x203e>
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	dcf7      	bgt.n	a5da <d_print_comp.part.10+0x202a>
    a5ea:	f000 8251 	beq.w	aa90 <d_print_comp.part.10+0x24e0>
    a5ee:	2301      	movs	r3, #1
    a5f0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    a5f4:	f7fe b850 	b.w	8698 <d_print_comp.part.10+0xe8>
    a5f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a5fc:	29ff      	cmp	r1, #255	; 0xff
    a5fe:	f000 81ba 	beq.w	a976 <d_print_comp.part.10+0x23c6>
    a602:	1c4b      	adds	r3, r1, #1
    a604:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    a608:	4620      	mov	r0, r4
    a60a:	f804 9001 	strb.w	r9, [r4, r1]
    a60e:	f855 2c0c 	ldr.w	r2, [r5, #-12]
    a612:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
    a616:	4641      	mov	r1, r8
    a618:	f000 fa6c 	bl	aaf4 <d_print_mod>
    a61c:	f7fe bb75 	b.w	8d0a <d_print_comp.part.10+0x75a>
    a620:	2301      	movs	r3, #1
    a622:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    a626:	f7fe b837 	b.w	8698 <d_print_comp.part.10+0xe8>
    a62a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a62e:	29ff      	cmp	r1, #255	; 0xff
    a630:	f000 81dc 	beq.w	a9ec <d_print_comp.part.10+0x243c>
    a634:	2220      	movs	r2, #32
    a636:	1c4b      	adds	r3, r1, #1
    a638:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    a63c:	5462      	strb	r2, [r4, r1]
    a63e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    a642:	f7fe bce9 	b.w	9018 <d_print_comp.part.10+0xa68>
    a646:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a64a:	29ff      	cmp	r1, #255	; 0xff
    a64c:	f000 81ea 	beq.w	aa24 <d_print_comp.part.10+0x2474>
    a650:	2220      	movs	r2, #32
    a652:	1c4b      	adds	r3, r1, #1
    a654:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    a658:	5462      	strb	r2, [r4, r1]
    a65a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    a65e:	f7fe bcc5 	b.w	8fec <d_print_comp.part.10+0xa3c>
    a662:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a666:	29ff      	cmp	r1, #255	; 0xff
    a668:	f000 81ec 	beq.w	aa44 <d_print_comp.part.10+0x2494>
    a66c:	1c4a      	adds	r2, r1, #1
    a66e:	235b      	movs	r3, #91	; 0x5b
    a670:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a674:	5463      	strb	r3, [r4, r1]
    a676:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a67a:	4631      	mov	r1, r6
    a67c:	68aa      	ldr	r2, [r5, #8]
    a67e:	4620      	mov	r0, r4
    a680:	f000 fa2c 	bl	aadc <d_print_comp>
    a684:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a688:	29ff      	cmp	r1, #255	; 0xff
    a68a:	f000 819f 	beq.w	a9cc <d_print_comp.part.10+0x241c>
    a68e:	235d      	movs	r3, #93	; 0x5d
    a690:	1c4a      	adds	r2, r1, #1
    a692:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a696:	5463      	strb	r3, [r4, r1]
    a698:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a69c:	f7fd bffc 	b.w	8698 <d_print_comp.part.10+0xe8>
    a6a0:	29ff      	cmp	r1, #255	; 0xff
    a6a2:	f47f af22 	bne.w	a4ea <d_print_comp.part.10+0x1f3a>
    a6a6:	f04f 0800 	mov.w	r8, #0
    a6aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a6ae:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a6b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a6b6:	4620      	mov	r0, r4
    a6b8:	4798      	blx	r3
    a6ba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a6be:	3301      	adds	r3, #1
    a6c0:	4641      	mov	r1, r8
    a6c2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a6c6:	e710      	b.n	a4ea <d_print_comp.part.10+0x1f3a>
    a6c8:	00014fbf 	.word	0x00014fbf
    a6cc:	0001516c 	.word	0x0001516c
    a6d0:	00015168 	.word	0x00015168
    a6d4:	00015164 	.word	0x00015164
    a6d8:	7809      	ldrb	r1, [r1, #0]
    a6da:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
    a6de:	2801      	cmp	r0, #1
    a6e0:	d903      	bls.n	a6ea <d_print_comp.part.10+0x213a>
    a6e2:	3972      	subs	r1, #114	; 0x72
    a6e4:	2901      	cmp	r1, #1
    a6e6:	f63f ac15 	bhi.w	9f14 <d_print_comp.part.10+0x1964>
    a6ea:	4620      	mov	r0, r4
    a6ec:	4631      	mov	r1, r6
    a6ee:	f001 f857 	bl	b7a0 <d_print_expr_op>
    a6f2:	4620      	mov	r0, r4
    a6f4:	213c      	movs	r1, #60	; 0x3c
    a6f6:	f7fc f861 	bl	67bc <d_append_char>
    a6fa:	68ab      	ldr	r3, [r5, #8]
    a6fc:	4620      	mov	r0, r4
    a6fe:	685a      	ldr	r2, [r3, #4]
    a700:	4631      	mov	r1, r6
    a702:	f000 f9eb 	bl	aadc <d_print_comp>
    a706:	4620      	mov	r0, r4
    a708:	49c0      	ldr	r1, [pc, #768]	; (aa0c <d_print_comp.part.10+0x245c>)
    a70a:	f7fd ff1d 	bl	8548 <d_append_string>
    a70e:	68ab      	ldr	r3, [r5, #8]
    a710:	4631      	mov	r1, r6
    a712:	4620      	mov	r0, r4
    a714:	689a      	ldr	r2, [r3, #8]
    a716:	f000 f9e1 	bl	aadc <d_print_comp>
    a71a:	4620      	mov	r0, r4
    a71c:	2129      	movs	r1, #41	; 0x29
    a71e:	f7fc f84d 	bl	67bc <d_append_char>
    a722:	f7fd bfb9 	b.w	8698 <d_print_comp.part.10+0xe8>
    a726:	2700      	movs	r7, #0
    a728:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a72c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a730:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    a734:	4620      	mov	r0, r4
    a736:	4798      	blx	r3
    a738:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a73c:	3301      	adds	r3, #1
    a73e:	4639      	mov	r1, r7
    a740:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a744:	2201      	movs	r2, #1
    a746:	f7ff b8e1 	b.w	990c <d_print_comp.part.10+0x135c>
    a74a:	6878      	ldr	r0, [r7, #4]
    a74c:	49b0      	ldr	r1, [pc, #704]	; (aa10 <d_print_comp.part.10+0x2460>)
    a74e:	f005 fd61 	bl	10214 <strncmp>
    a752:	2800      	cmp	r0, #0
    a754:	f47e ac3e 	bne.w	8fd4 <d_print_comp.part.10+0xa24>
    a758:	4631      	mov	r1, r6
    a75a:	4620      	mov	r0, r4
    a75c:	68aa      	ldr	r2, [r5, #8]
    a75e:	f000 f9bd 	bl	aadc <d_print_comp>
    a762:	4620      	mov	r0, r4
    a764:	49ab      	ldr	r1, [pc, #684]	; (aa14 <d_print_comp.part.10+0x2464>)
    a766:	f7fd feef 	bl	8548 <d_append_string>
    a76a:	f7fe bc5f 	b.w	902c <d_print_comp.part.10+0xa7c>
    a76e:	9b02      	ldr	r3, [sp, #8]
    a770:	f7fe bed6 	b.w	9520 <d_print_comp.part.10+0xf70>
    a774:	2500      	movs	r5, #0
    a776:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a77a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a77e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a782:	4620      	mov	r0, r4
    a784:	4798      	blx	r3
    a786:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a78a:	3301      	adds	r3, #1
    a78c:	4629      	mov	r1, r5
    a78e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a792:	2201      	movs	r2, #1
    a794:	f7ff bbaa 	b.w	9eec <d_print_comp.part.10+0x193c>
    a798:	4620      	mov	r0, r4
    a79a:	215b      	movs	r1, #91	; 0x5b
    a79c:	f7fc f80e 	bl	67bc <d_append_char>
    a7a0:	68ab      	ldr	r3, [r5, #8]
    a7a2:	4631      	mov	r1, r6
    a7a4:	4620      	mov	r0, r4
    a7a6:	689a      	ldr	r2, [r3, #8]
    a7a8:	f000 f998 	bl	aadc <d_print_comp>
    a7ac:	4620      	mov	r0, r4
    a7ae:	215d      	movs	r1, #93	; 0x5d
    a7b0:	f7fc f804 	bl	67bc <d_append_char>
    a7b4:	f7ff bbdb 	b.w	9f6e <d_print_comp.part.10+0x19be>
    a7b8:	6899      	ldr	r1, [r3, #8]
    a7ba:	2901      	cmp	r1, #1
    a7bc:	f47f abae 	bne.w	9f1c <d_print_comp.part.10+0x196c>
    a7c0:	685b      	ldr	r3, [r3, #4]
    a7c2:	781b      	ldrb	r3, [r3, #0]
    a7c4:	2b3e      	cmp	r3, #62	; 0x3e
    a7c6:	f47f aba9 	bne.w	9f1c <d_print_comp.part.10+0x196c>
    a7ca:	4620      	mov	r0, r4
    a7cc:	2128      	movs	r1, #40	; 0x28
    a7ce:	f7fb fff5 	bl	67bc <d_append_char>
    a7d2:	686a      	ldr	r2, [r5, #4]
    a7d4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    a7d8:	f7ff bba0 	b.w	9f1c <d_print_comp.part.10+0x196c>
    a7dc:	4642      	mov	r2, r8
    a7de:	4620      	mov	r0, r4
    a7e0:	4631      	mov	r1, r6
    a7e2:	f000 ffdd 	bl	b7a0 <d_print_expr_op>
    a7e6:	f7ff bbbc 	b.w	9f62 <d_print_comp.part.10+0x19b2>
    a7ea:	6893      	ldr	r3, [r2, #8]
    a7ec:	781b      	ldrb	r3, [r3, #0]
    a7ee:	2b29      	cmp	r3, #41	; 0x29
    a7f0:	bf1c      	itt	ne
    a7f2:	2301      	movne	r3, #1
    a7f4:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
    a7f8:	6852      	ldr	r2, [r2, #4]
    a7fa:	4620      	mov	r0, r4
    a7fc:	4631      	mov	r1, r6
    a7fe:	f001 f809 	bl	b814 <d_print_subexpr>
    a802:	f7ff bb9b 	b.w	9f3c <d_print_comp.part.10+0x198c>
    a806:	4642      	mov	r2, r8
    a808:	4620      	mov	r0, r4
    a80a:	4631      	mov	r1, r6
    a80c:	f001 f802 	bl	b814 <d_print_subexpr>
    a810:	4620      	mov	r0, r4
    a812:	4631      	mov	r1, r6
    a814:	4652      	mov	r2, sl
    a816:	f000 ffc3 	bl	b7a0 <d_print_expr_op>
    a81a:	464a      	mov	r2, r9
    a81c:	4620      	mov	r0, r4
    a81e:	4631      	mov	r1, r6
    a820:	f000 fff8 	bl	b814 <d_print_subexpr>
    a824:	4620      	mov	r0, r4
    a826:	497c      	ldr	r1, [pc, #496]	; (aa18 <d_print_comp.part.10+0x2468>)
    a828:	f7fd fe8e 	bl	8548 <d_append_string>
    a82c:	4620      	mov	r0, r4
    a82e:	4631      	mov	r1, r6
    a830:	462a      	mov	r2, r5
    a832:	f000 ffef 	bl	b814 <d_print_subexpr>
    a836:	f7fd bf2f 	b.w	8698 <d_print_comp.part.10+0xe8>
    a83a:	2700      	movs	r7, #0
    a83c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a840:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a844:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    a848:	4620      	mov	r0, r4
    a84a:	4798      	blx	r3
    a84c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a850:	3301      	adds	r3, #1
    a852:	4639      	mov	r1, r7
    a854:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a858:	2201      	movs	r2, #1
    a85a:	e462      	b.n	a122 <d_print_comp.part.10+0x1b72>
    a85c:	f04f 0800 	mov.w	r8, #0
    a860:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a864:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    a868:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
    a86c:	4798      	blx	r3
    a86e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a872:	3301      	adds	r3, #1
    a874:	4641      	mov	r1, r8
    a876:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a87a:	2201      	movs	r2, #1
    a87c:	e440      	b.n	a100 <d_print_comp.part.10+0x1b50>
    a87e:	2500      	movs	r5, #0
    a880:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a884:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a888:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a88c:	4620      	mov	r0, r4
    a88e:	4798      	blx	r3
    a890:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a894:	3301      	adds	r3, #1
    a896:	4629      	mov	r1, r5
    a898:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a89c:	2201      	movs	r2, #1
    a89e:	f7ff bbce 	b.w	a03e <d_print_comp.part.10+0x1a8e>
    a8a2:	686b      	ldr	r3, [r5, #4]
    a8a4:	781a      	ldrb	r2, [r3, #0]
    a8a6:	2a01      	cmp	r2, #1
    a8a8:	f47f abed 	bne.w	a086 <d_print_comp.part.10+0x1ad6>
    a8ac:	68aa      	ldr	r2, [r5, #8]
    a8ae:	7812      	ldrb	r2, [r2, #0]
    a8b0:	2a29      	cmp	r2, #41	; 0x29
    a8b2:	bf08      	it	eq
    a8b4:	461d      	moveq	r5, r3
    a8b6:	f7ff bbe6 	b.w	a086 <d_print_comp.part.10+0x1ad6>
    a8ba:	ab16      	add	r3, sp, #88	; 0x58
    a8bc:	9705      	str	r7, [sp, #20]
    a8be:	f843 ad48 	str.w	sl, [r3, #-72]!
    a8c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    a8c6:	f7fe ba05 	b.w	8cd4 <d_print_comp.part.10+0x724>
    a8ca:	4631      	mov	r1, r6
    a8cc:	4620      	mov	r0, r4
    a8ce:	686a      	ldr	r2, [r5, #4]
    a8d0:	f000 ffa0 	bl	b814 <d_print_subexpr>
    a8d4:	4620      	mov	r0, r4
    a8d6:	4951      	ldr	r1, [pc, #324]	; (aa1c <d_print_comp.part.10+0x246c>)
    a8d8:	f7fd fe36 	bl	8548 <d_append_string>
    a8dc:	f7fd bedc 	b.w	8698 <d_print_comp.part.10+0xe8>
    a8e0:	2500      	movs	r5, #0
    a8e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a8e6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a8ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a8ee:	4620      	mov	r0, r4
    a8f0:	4798      	blx	r3
    a8f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a8f6:	3301      	adds	r3, #1
    a8f8:	4629      	mov	r1, r5
    a8fa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a8fe:	f7ff bbf0 	b.w	a0e2 <d_print_comp.part.10+0x1b32>
    a902:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
    a906:	4619      	mov	r1, r3
    a908:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a90c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a910:	4620      	mov	r0, r4
    a912:	4798      	blx	r3
    a914:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a918:	1c5a      	adds	r2, r3, #1
    a91a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a91e:	463b      	mov	r3, r7
    a920:	f7ff bbce 	b.w	a0c0 <d_print_comp.part.10+0x1b10>
    a924:	1cf3      	adds	r3, r6, #3
    a926:	429f      	cmp	r7, r3
    a928:	f67f acac 	bls.w	a284 <d_print_comp.part.10+0x1cd4>
    a92c:	2100      	movs	r1, #0
    a92e:	e004      	b.n	a93a <d_print_comp.part.10+0x238a>
    a930:	4615      	mov	r5, r2
    a932:	42bb      	cmp	r3, r7
    a934:	eb05 1101 	add.w	r1, r5, r1, lsl #4
    a938:	d015      	beq.n	a966 <d_print_comp.part.10+0x23b6>
    a93a:	469c      	mov	ip, r3
    a93c:	f813 5b01 	ldrb.w	r5, [r3], #1
    a940:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
    a944:	b2d0      	uxtb	r0, r2
    a946:	2809      	cmp	r0, #9
    a948:	f1a5 0941 	sub.w	r9, r5, #65	; 0x41
    a94c:	d9f0      	bls.n	a930 <d_print_comp.part.10+0x2380>
    a94e:	f1b9 0f05 	cmp.w	r9, #5
    a952:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
    a956:	d801      	bhi.n	a95c <d_print_comp.part.10+0x23ac>
    a958:	3d37      	subs	r5, #55	; 0x37
    a95a:	e7ea      	b.n	a932 <d_print_comp.part.10+0x2382>
    a95c:	2a05      	cmp	r2, #5
    a95e:	f200 8087 	bhi.w	aa70 <d_print_comp.part.10+0x24c0>
    a962:	3d57      	subs	r5, #87	; 0x57
    a964:	e7e5      	b.n	a932 <d_print_comp.part.10+0x2382>
    a966:	255f      	movs	r5, #95	; 0x5f
    a968:	e471      	b.n	a24e <d_print_comp.part.10+0x1c9e>
    a96a:	464c      	mov	r4, r9
    a96c:	2301      	movs	r3, #1
    a96e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    a972:	f7fd be91 	b.w	8698 <d_print_comp.part.10+0xe8>
    a976:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a97a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    a97e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a982:	4620      	mov	r0, r4
    a984:	4798      	blx	r3
    a986:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a98a:	3301      	adds	r3, #1
    a98c:	4631      	mov	r1, r6
    a98e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a992:	e636      	b.n	a602 <d_print_comp.part.10+0x2052>
    a994:	686a      	ldr	r2, [r5, #4]
    a996:	4620      	mov	r0, r4
    a998:	4631      	mov	r1, r6
    a99a:	f000 ff3b 	bl	b814 <d_print_subexpr>
    a99e:	4620      	mov	r0, r4
    a9a0:	4631      	mov	r1, r6
    a9a2:	463a      	mov	r2, r7
    a9a4:	f000 fefc 	bl	b7a0 <d_print_expr_op>
    a9a8:	f7fd be76 	b.w	8698 <d_print_comp.part.10+0xe8>
    a9ac:	2b3b      	cmp	r3, #59	; 0x3b
    a9ae:	f47e ac50 	bne.w	9252 <d_print_comp.part.10+0xca2>
    a9b2:	6853      	ldr	r3, [r2, #4]
    a9b4:	781b      	ldrb	r3, [r3, #0]
    a9b6:	2b30      	cmp	r3, #48	; 0x30
    a9b8:	f000 8088 	beq.w	aacc <d_print_comp.part.10+0x251c>
    a9bc:	2b31      	cmp	r3, #49	; 0x31
    a9be:	f47e ac48 	bne.w	9252 <d_print_comp.part.10+0xca2>
    a9c2:	4917      	ldr	r1, [pc, #92]	; (aa20 <d_print_comp.part.10+0x2470>)
    a9c4:	f7fd fdc0 	bl	8548 <d_append_string>
    a9c8:	f7fd be66 	b.w	8698 <d_print_comp.part.10+0xe8>
    a9cc:	2500      	movs	r5, #0
    a9ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a9d2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a9d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a9da:	4620      	mov	r0, r4
    a9dc:	4798      	blx	r3
    a9de:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a9e2:	3301      	adds	r3, #1
    a9e4:	4629      	mov	r1, r5
    a9e6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a9ea:	e650      	b.n	a68e <d_print_comp.part.10+0x20de>
    a9ec:	2500      	movs	r5, #0
    a9ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a9f2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a9f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a9fa:	4620      	mov	r0, r4
    a9fc:	4798      	blx	r3
    a9fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    aa02:	3301      	adds	r3, #1
    aa04:	4629      	mov	r1, r5
    aa06:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    aa0a:	e613      	b.n	a634 <d_print_comp.part.10+0x2084>
    aa0c:	0001521c 	.word	0x0001521c
    aa10:	00014fc4 	.word	0x00014fc4
    aa14:	00014fcc 	.word	0x00014fcc
    aa18:	00015158 	.word	0x00015158
    aa1c:	0001519c 	.word	0x0001519c
    aa20:	00015178 	.word	0x00015178
    aa24:	2700      	movs	r7, #0
    aa26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    aa2a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    aa2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    aa32:	4620      	mov	r0, r4
    aa34:	4798      	blx	r3
    aa36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    aa3a:	3301      	adds	r3, #1
    aa3c:	4639      	mov	r1, r7
    aa3e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    aa42:	e605      	b.n	a650 <d_print_comp.part.10+0x20a0>
    aa44:	2700      	movs	r7, #0
    aa46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    aa4a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    aa4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    aa52:	4620      	mov	r0, r4
    aa54:	4798      	blx	r3
    aa56:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    aa5a:	3301      	adds	r3, #1
    aa5c:	4639      	mov	r1, r7
    aa5e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    aa62:	e603      	b.n	a66c <d_print_comp.part.10+0x20bc>
    aa64:	212d      	movs	r1, #45	; 0x2d
    aa66:	f7fb fea9 	bl	67bc <d_append_char>
    aa6a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    aa6e:	e569      	b.n	a544 <d_print_comp.part.10+0x1f94>
    aa70:	4567      	cmp	r7, ip
    aa72:	f67f af78 	bls.w	a966 <d_print_comp.part.10+0x23b6>
    aa76:	2d5f      	cmp	r5, #95	; 0x5f
    aa78:	f47f af75 	bne.w	a966 <d_print_comp.part.10+0x23b6>
    aa7c:	29ff      	cmp	r1, #255	; 0xff
    aa7e:	f63f abe6 	bhi.w	a24e <d_print_comp.part.10+0x1c9e>
    aa82:	b2c9      	uxtb	r1, r1
    aa84:	4620      	mov	r0, r4
    aa86:	4666      	mov	r6, ip
    aa88:	f7fb fe98 	bl	67bc <d_append_char>
    aa8c:	f7ff bbe9 	b.w	a262 <d_print_comp.part.10+0x1cb2>
    aa90:	6840      	ldr	r0, [r0, #4]
    aa92:	2800      	cmp	r0, #0
    aa94:	f43f adab 	beq.w	a5ee <d_print_comp.part.10+0x203e>
    aa98:	7803      	ldrb	r3, [r0, #0]
    aa9a:	f7fe be87 	b.w	97ac <d_print_comp.part.10+0x11fc>
    aa9e:	f47f aa8c 	bne.w	9fba <d_print_comp.part.10+0x1a0a>
    aaa2:	6840      	ldr	r0, [r0, #4]
    aaa4:	2800      	cmp	r0, #0
    aaa6:	f47e aa79 	bne.w	8f9c <d_print_comp.part.10+0x9ec>
    aaaa:	f7ff ba86 	b.w	9fba <d_print_comp.part.10+0x1a0a>
    aaae:	4631      	mov	r1, r6
    aab0:	4620      	mov	r0, r4
    aab2:	68aa      	ldr	r2, [r5, #8]
    aab4:	f000 f812 	bl	aadc <d_print_comp>
    aab8:	9b08      	ldr	r3, [sp, #32]
    aaba:	9902      	ldr	r1, [sp, #8]
    aabc:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    aac0:	2b00      	cmp	r3, #0
    aac2:	f47d ade9 	bne.w	8698 <d_print_comp.part.10+0xe8>
    aac6:	460b      	mov	r3, r1
    aac8:	f7fe bd2a 	b.w	9520 <d_print_comp.part.10+0xf70>
    aacc:	4902      	ldr	r1, [pc, #8]	; (aad8 <d_print_comp.part.10+0x2528>)
    aace:	f7fd fd3b 	bl	8548 <d_append_string>
    aad2:	f7fd bde1 	b.w	8698 <d_print_comp.part.10+0xe8>
    aad6:	bf00      	nop
    aad8:	00015170 	.word	0x00015170

0000aadc <d_print_comp>:
    aadc:	b12a      	cbz	r2, aaea <d_print_comp+0xe>
    aade:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    aae2:	b90b      	cbnz	r3, aae8 <d_print_comp+0xc>
    aae4:	f7fd bd64 	b.w	85b0 <d_print_comp.part.10>
    aae8:	4770      	bx	lr
    aaea:	2201      	movs	r2, #1
    aaec:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    aaf0:	4770      	bx	lr
    aaf2:	bf00      	nop

0000aaf4 <d_print_mod>:
    aaf4:	7813      	ldrb	r3, [r2, #0]
    aaf6:	3b03      	subs	r3, #3
    aaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aafc:	4615      	mov	r5, r2
    aafe:	4604      	mov	r4, r0
    ab00:	4689      	mov	r9, r1
    ab02:	2b2a      	cmp	r3, #42	; 0x2a
    ab04:	f200 81d3 	bhi.w	aeae <d_print_mod+0x3ba>
    ab08:	e8df f013 	tbh	[pc, r3, lsl #1]
    ab0c:	01d10052 	.word	0x01d10052
    ab10:	01d101d1 	.word	0x01d101d1
    ab14:	01d101d1 	.word	0x01d101d1
    ab18:	01d101d1 	.word	0x01d101d1
    ab1c:	01d101d1 	.word	0x01d101d1
    ab20:	01d101d1 	.word	0x01d101d1
    ab24:	01d101d1 	.word	0x01d101d1
    ab28:	01d101d1 	.word	0x01d101d1
    ab2c:	01d101d1 	.word	0x01d101d1
    ab30:	01d101d1 	.word	0x01d101d1
    ab34:	01d101d1 	.word	0x01d101d1
    ab38:	0083005d 	.word	0x0083005d
    ab3c:	005d00a9 	.word	0x005d00a9
    ab40:	00a90083 	.word	0x00a90083
    ab44:	00e600ce 	.word	0x00e600ce
    ab48:	0132011d 	.word	0x0132011d
    ab4c:	01470144 	.word	0x01470144
    ab50:	0170014a 	.word	0x0170014a
    ab54:	01d101d1 	.word	0x01d101d1
    ab58:	01d101d1 	.word	0x01d101d1
    ab5c:	01d10195 	.word	0x01d10195
    ab60:	002b      	.short	0x002b
    ab62:	4ed9      	ldr	r6, [pc, #868]	; (aec8 <d_print_mod+0x3d4>)
    ab64:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    ab68:	f106 0a0a 	add.w	sl, r6, #10
    ab6c:	f04f 0800 	mov.w	r8, #0
    ab70:	e009      	b.n	ab86 <d_print_mod+0x92>
    ab72:	461a      	mov	r2, r3
    ab74:	3301      	adds	r3, #1
    ab76:	4556      	cmp	r6, sl
    ab78:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    ab7c:	54a7      	strb	r7, [r4, r2]
    ab7e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    ab82:	f000 81b9 	beq.w	aef8 <d_print_mod+0x404>
    ab86:	2bff      	cmp	r3, #255	; 0xff
    ab88:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    ab8c:	d1f1      	bne.n	ab72 <d_print_mod+0x7e>
    ab8e:	4619      	mov	r1, r3
    ab90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ab94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ab98:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ab9c:	4620      	mov	r0, r4
    ab9e:	4798      	blx	r3
    aba0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    aba4:	3301      	adds	r3, #1
    aba6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    abaa:	2200      	movs	r2, #0
    abac:	2301      	movs	r3, #1
    abae:	e7e2      	b.n	ab76 <d_print_mod+0x82>
    abb0:	686a      	ldr	r2, [r5, #4]
    abb2:	2a00      	cmp	r2, #0
    abb4:	f000 80d7 	beq.w	ad66 <d_print_mod+0x272>
    abb8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    abbc:	2b00      	cmp	r3, #0
    abbe:	f000 81ba 	beq.w	af36 <d_print_mod+0x442>
    abc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abc6:	4dc1      	ldr	r5, [pc, #772]	; (aecc <d_print_mod+0x3d8>)
    abc8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    abcc:	f105 0709 	add.w	r7, r5, #9
    abd0:	f04f 0800 	mov.w	r8, #0
    abd4:	e009      	b.n	abea <d_print_mod+0xf6>
    abd6:	460b      	mov	r3, r1
    abd8:	3101      	adds	r1, #1
    abda:	42bd      	cmp	r5, r7
    abdc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    abe0:	54e6      	strb	r6, [r4, r3]
    abe2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    abe6:	f000 8183 	beq.w	aef0 <d_print_mod+0x3fc>
    abea:	29ff      	cmp	r1, #255	; 0xff
    abec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    abf0:	d1f1      	bne.n	abd6 <d_print_mod+0xe2>
    abf2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    abf6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    abfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    abfe:	4620      	mov	r0, r4
    ac00:	4798      	blx	r3
    ac02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    ac06:	3301      	adds	r3, #1
    ac08:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ac0c:	2101      	movs	r1, #1
    ac0e:	2300      	movs	r3, #0
    ac10:	e7e3      	b.n	abda <d_print_mod+0xe6>
    ac12:	4daf      	ldr	r5, [pc, #700]	; (aed0 <d_print_mod+0x3dc>)
    ac14:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ac18:	f105 0709 	add.w	r7, r5, #9
    ac1c:	f04f 0800 	mov.w	r8, #0
    ac20:	e009      	b.n	ac36 <d_print_mod+0x142>
    ac22:	460b      	mov	r3, r1
    ac24:	3101      	adds	r1, #1
    ac26:	42bd      	cmp	r5, r7
    ac28:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ac2c:	54e6      	strb	r6, [r4, r3]
    ac2e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ac32:	f000 815f 	beq.w	aef4 <d_print_mod+0x400>
    ac36:	29ff      	cmp	r1, #255	; 0xff
    ac38:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    ac3c:	d1f1      	bne.n	ac22 <d_print_mod+0x12e>
    ac3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ac42:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ac46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ac4a:	4620      	mov	r0, r4
    ac4c:	4798      	blx	r3
    ac4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    ac52:	3301      	adds	r3, #1
    ac54:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ac58:	2101      	movs	r1, #1
    ac5a:	2300      	movs	r3, #0
    ac5c:	e7e3      	b.n	ac26 <d_print_mod+0x132>
    ac5e:	4d9d      	ldr	r5, [pc, #628]	; (aed4 <d_print_mod+0x3e0>)
    ac60:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ac64:	1daf      	adds	r7, r5, #6
    ac66:	f04f 0800 	mov.w	r8, #0
    ac6a:	e009      	b.n	ac80 <d_print_mod+0x18c>
    ac6c:	460b      	mov	r3, r1
    ac6e:	3101      	adds	r1, #1
    ac70:	42bd      	cmp	r5, r7
    ac72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ac76:	54e6      	strb	r6, [r4, r3]
    ac78:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ac7c:	f000 8121 	beq.w	aec2 <d_print_mod+0x3ce>
    ac80:	29ff      	cmp	r1, #255	; 0xff
    ac82:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    ac86:	d1f1      	bne.n	ac6c <d_print_mod+0x178>
    ac88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ac8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ac90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ac94:	4620      	mov	r0, r4
    ac96:	4798      	blx	r3
    ac98:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    ac9c:	3301      	adds	r3, #1
    ac9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    aca2:	2101      	movs	r1, #1
    aca4:	2300      	movs	r3, #0
    aca6:	e7e3      	b.n	ac70 <d_print_mod+0x17c>
    aca8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    acac:	2bff      	cmp	r3, #255	; 0xff
    acae:	f000 8159 	beq.w	af64 <d_print_mod+0x470>
    acb2:	1c59      	adds	r1, r3, #1
    acb4:	2220      	movs	r2, #32
    acb6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    acba:	54e2      	strb	r2, [r4, r3]
    acbc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    acc0:	29ff      	cmp	r1, #255	; 0xff
    acc2:	f000 813e 	beq.w	af42 <d_print_mod+0x44e>
    acc6:	1c4a      	adds	r2, r1, #1
    acc8:	2326      	movs	r3, #38	; 0x26
    acca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    acce:	5463      	strb	r3, [r4, r1]
    acd0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    acd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    acd8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    acdc:	2bff      	cmp	r3, #255	; 0xff
    acde:	f000 8162 	beq.w	afa6 <d_print_mod+0x4b2>
    ace2:	1c59      	adds	r1, r3, #1
    ace4:	2220      	movs	r2, #32
    ace6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    acea:	54e2      	strb	r2, [r4, r3]
    acec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    acf0:	4d79      	ldr	r5, [pc, #484]	; (aed8 <d_print_mod+0x3e4>)
    acf2:	f04f 0800 	mov.w	r8, #0
    acf6:	1caf      	adds	r7, r5, #2
    acf8:	e009      	b.n	ad0e <d_print_mod+0x21a>
    acfa:	460b      	mov	r3, r1
    acfc:	42bd      	cmp	r5, r7
    acfe:	f101 0101 	add.w	r1, r1, #1
    ad02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ad06:	54e6      	strb	r6, [r4, r3]
    ad08:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ad0c:	d019      	beq.n	ad42 <d_print_mod+0x24e>
    ad0e:	29ff      	cmp	r1, #255	; 0xff
    ad10:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    ad14:	d1f1      	bne.n	acfa <d_print_mod+0x206>
    ad16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ad1a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ad1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ad22:	4620      	mov	r0, r4
    ad24:	4798      	blx	r3
    ad26:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    ad2a:	3301      	adds	r3, #1
    ad2c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ad30:	2300      	movs	r3, #0
    ad32:	2101      	movs	r1, #1
    ad34:	42bd      	cmp	r5, r7
    ad36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ad3a:	54e6      	strb	r6, [r4, r3]
    ad3c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ad40:	d1e5      	bne.n	ad0e <d_print_mod+0x21a>
    ad42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ad4a:	29ff      	cmp	r1, #255	; 0xff
    ad4c:	f000 811b 	beq.w	af86 <d_print_mod+0x492>
    ad50:	1c4a      	adds	r2, r1, #1
    ad52:	2320      	movs	r3, #32
    ad54:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ad58:	5463      	strb	r3, [r4, r1]
    ad5a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ad5e:	68aa      	ldr	r2, [r5, #8]
    ad60:	2a00      	cmp	r2, #0
    ad62:	f47f af29 	bne.w	abb8 <d_print_mod+0xc4>
    ad66:	2301      	movs	r3, #1
    ad68:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    ad6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad70:	f011 0904 	ands.w	r9, r1, #4
    ad74:	f47f af25 	bne.w	abc2 <d_print_mod+0xce>
    ad78:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ad7c:	29ff      	cmp	r1, #255	; 0xff
    ad7e:	f000 814d 	beq.w	b01c <d_print_mod+0x528>
    ad82:	1c4a      	adds	r2, r1, #1
    ad84:	232a      	movs	r3, #42	; 0x2a
    ad86:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ad8a:	5463      	strb	r3, [r4, r1]
    ad8c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ad90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad94:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ad98:	e792      	b.n	acc0 <d_print_mod+0x1cc>
    ad9a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ad9e:	e7a7      	b.n	acf0 <d_print_mod+0x1fc>
    ada0:	4d4e      	ldr	r5, [pc, #312]	; (aedc <d_print_mod+0x3e8>)
    ada2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ada6:	f105 0708 	add.w	r7, r5, #8
    adaa:	f04f 0800 	mov.w	r8, #0
    adae:	e009      	b.n	adc4 <d_print_mod+0x2d0>
    adb0:	460b      	mov	r3, r1
    adb2:	3101      	adds	r1, #1
    adb4:	42bd      	cmp	r5, r7
    adb6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    adba:	54e6      	strb	r6, [r4, r3]
    adbc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    adc0:	f000 8094 	beq.w	aeec <d_print_mod+0x3f8>
    adc4:	29ff      	cmp	r1, #255	; 0xff
    adc6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    adca:	d1f1      	bne.n	adb0 <d_print_mod+0x2bc>
    adcc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    add0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    add4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    add8:	4620      	mov	r0, r4
    adda:	4798      	blx	r3
    addc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    ade0:	3301      	adds	r3, #1
    ade2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ade6:	2101      	movs	r1, #1
    ade8:	2300      	movs	r3, #0
    adea:	e7e3      	b.n	adb4 <d_print_mod+0x2c0>
    adec:	4d3c      	ldr	r5, [pc, #240]	; (aee0 <d_print_mod+0x3ec>)
    adee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    adf2:	f105 070a 	add.w	r7, r5, #10
    adf6:	f04f 0800 	mov.w	r8, #0
    adfa:	e008      	b.n	ae0e <d_print_mod+0x31a>
    adfc:	460b      	mov	r3, r1
    adfe:	3101      	adds	r1, #1
    ae00:	42bd      	cmp	r5, r7
    ae02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ae06:	54e6      	strb	r6, [r4, r3]
    ae08:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ae0c:	d06c      	beq.n	aee8 <d_print_mod+0x3f4>
    ae0e:	29ff      	cmp	r1, #255	; 0xff
    ae10:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    ae14:	d1f2      	bne.n	adfc <d_print_mod+0x308>
    ae16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ae1a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ae1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ae22:	4620      	mov	r0, r4
    ae24:	4798      	blx	r3
    ae26:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    ae2a:	3301      	adds	r3, #1
    ae2c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ae30:	2101      	movs	r1, #1
    ae32:	2300      	movs	r3, #0
    ae34:	e7e4      	b.n	ae00 <d_print_mod+0x30c>
    ae36:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
    ae3a:	2b28      	cmp	r3, #40	; 0x28
    ae3c:	d00b      	beq.n	ae56 <d_print_mod+0x362>
    ae3e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ae42:	29ff      	cmp	r1, #255	; 0xff
    ae44:	f000 80da 	beq.w	affc <d_print_mod+0x508>
    ae48:	1c4a      	adds	r2, r1, #1
    ae4a:	2320      	movs	r3, #32
    ae4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ae50:	5463      	strb	r3, [r4, r1]
    ae52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ae56:	686a      	ldr	r2, [r5, #4]
    ae58:	2a00      	cmp	r2, #0
    ae5a:	f000 80c7 	beq.w	afec <d_print_mod+0x4f8>
    ae5e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    ae62:	2b00      	cmp	r3, #0
    ae64:	d062      	beq.n	af2c <d_print_mod+0x438>
    ae66:	4d1f      	ldr	r5, [pc, #124]	; (aee4 <d_print_mod+0x3f0>)
    ae68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ae6c:	1cef      	adds	r7, r5, #3
    ae6e:	f04f 0800 	mov.w	r8, #0
    ae72:	e008      	b.n	ae86 <d_print_mod+0x392>
    ae74:	460b      	mov	r3, r1
    ae76:	3101      	adds	r1, #1
    ae78:	42bd      	cmp	r5, r7
    ae7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ae7e:	54e6      	strb	r6, [r4, r3]
    ae80:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ae84:	d049      	beq.n	af1a <d_print_mod+0x426>
    ae86:	29ff      	cmp	r1, #255	; 0xff
    ae88:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    ae8c:	d1f2      	bne.n	ae74 <d_print_mod+0x380>
    ae8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ae92:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ae96:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ae9a:	4620      	mov	r0, r4
    ae9c:	4798      	blx	r3
    ae9e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    aea2:	3301      	adds	r3, #1
    aea4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    aea8:	2101      	movs	r1, #1
    aeaa:	2300      	movs	r3, #0
    aeac:	e7e4      	b.n	ae78 <d_print_mod+0x384>
    aeae:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	f47f ae85 	bne.w	abc2 <d_print_mod+0xce>
    aeb8:	462a      	mov	r2, r5
    aeba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aebe:	f7fd bb77 	b.w	85b0 <d_print_comp.part.10>
    aec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aec6:	bf00      	nop
    aec8:	0001525f 	.word	0x0001525f
    aecc:	0001521f 	.word	0x0001521f
    aed0:	0001522b 	.word	0x0001522b
    aed4:	00015237 	.word	0x00015237
    aed8:	0001523f 	.word	0x0001523f
    aedc:	00015243 	.word	0x00015243
    aee0:	0001524f 	.word	0x0001524f
    aee4:	0001525b 	.word	0x0001525b
    aee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aeec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aef8:	686a      	ldr	r2, [r5, #4]
    aefa:	2a00      	cmp	r2, #0
    aefc:	d07a      	beq.n	aff4 <d_print_mod+0x500>
    aefe:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    af02:	b161      	cbz	r1, af1e <d_print_mod+0x42a>
    af04:	2bff      	cmp	r3, #255	; 0xff
    af06:	d05f      	beq.n	afc8 <d_print_mod+0x4d4>
    af08:	1c59      	adds	r1, r3, #1
    af0a:	2229      	movs	r2, #41	; 0x29
    af0c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    af10:	54e2      	strb	r2, [r4, r3]
    af12:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    af16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    af1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    af1e:	4649      	mov	r1, r9
    af20:	4620      	mov	r0, r4
    af22:	f7fd fb45 	bl	85b0 <d_print_comp.part.10>
    af26:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    af2a:	e7eb      	b.n	af04 <d_print_mod+0x410>
    af2c:	4649      	mov	r1, r9
    af2e:	4620      	mov	r0, r4
    af30:	f7fd fb3e 	bl	85b0 <d_print_comp.part.10>
    af34:	e797      	b.n	ae66 <d_print_mod+0x372>
    af36:	4620      	mov	r0, r4
    af38:	4649      	mov	r1, r9
    af3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af3e:	f7fd bb37 	b.w	85b0 <d_print_comp.part.10>
    af42:	2500      	movs	r5, #0
    af44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    af48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    af4c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    af50:	4620      	mov	r0, r4
    af52:	4798      	blx	r3
    af54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    af58:	3301      	adds	r3, #1
    af5a:	4629      	mov	r1, r5
    af5c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    af60:	2201      	movs	r2, #1
    af62:	e6b1      	b.n	acc8 <d_print_mod+0x1d4>
    af64:	2500      	movs	r5, #0
    af66:	4619      	mov	r1, r3
    af68:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    af6c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    af70:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    af74:	4798      	blx	r3
    af76:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    af7a:	1c5a      	adds	r2, r3, #1
    af7c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    af80:	462b      	mov	r3, r5
    af82:	2101      	movs	r1, #1
    af84:	e696      	b.n	acb4 <d_print_mod+0x1c0>
    af86:	2600      	movs	r6, #0
    af88:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    af8c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    af90:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    af94:	4798      	blx	r3
    af96:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    af9a:	3301      	adds	r3, #1
    af9c:	4631      	mov	r1, r6
    af9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    afa2:	2201      	movs	r2, #1
    afa4:	e6d5      	b.n	ad52 <d_print_mod+0x25e>
    afa6:	2500      	movs	r5, #0
    afa8:	4619      	mov	r1, r3
    afaa:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    afae:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    afb2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    afb6:	4798      	blx	r3
    afb8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    afbc:	1c5a      	adds	r2, r3, #1
    afbe:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    afc2:	462b      	mov	r3, r5
    afc4:	2101      	movs	r1, #1
    afc6:	e68d      	b.n	ace4 <d_print_mod+0x1f0>
    afc8:	2500      	movs	r5, #0
    afca:	4619      	mov	r1, r3
    afcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    afd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    afd4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    afd8:	4620      	mov	r0, r4
    afda:	4798      	blx	r3
    afdc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    afe0:	1c5a      	adds	r2, r3, #1
    afe2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    afe6:	462b      	mov	r3, r5
    afe8:	2101      	movs	r1, #1
    afea:	e78e      	b.n	af0a <d_print_mod+0x416>
    afec:	2301      	movs	r3, #1
    afee:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    aff2:	e738      	b.n	ae66 <d_print_mod+0x372>
    aff4:	2201      	movs	r2, #1
    aff6:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    affa:	e783      	b.n	af04 <d_print_mod+0x410>
    affc:	2600      	movs	r6, #0
    affe:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    b002:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    b006:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    b00a:	4798      	blx	r3
    b00c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b010:	3301      	adds	r3, #1
    b012:	4631      	mov	r1, r6
    b014:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b018:	2201      	movs	r2, #1
    b01a:	e716      	b.n	ae4a <d_print_mod+0x356>
    b01c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    b020:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    b024:	f880 90ff 	strb.w	r9, [r0, #255]	; 0xff
    b028:	4798      	blx	r3
    b02a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b02e:	3301      	adds	r3, #1
    b030:	4649      	mov	r1, r9
    b032:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b036:	2201      	movs	r2, #1
    b038:	e6a4      	b.n	ad84 <d_print_mod+0x290>
    b03a:	bf00      	nop

0000b03c <d_print_mod_list>:
    b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b040:	4614      	mov	r4, r2
    b042:	b089      	sub	sp, #36	; 0x24
    b044:	4605      	mov	r5, r0
    b046:	460f      	mov	r7, r1
    b048:	461e      	mov	r6, r3
    b04a:	b33a      	cbz	r2, b09c <d_print_mod_list+0x60>
    b04c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    b050:	bb23      	cbnz	r3, b09c <d_print_mod_list+0x60>
    b052:	f04f 0801 	mov.w	r8, #1
    b056:	e002      	b.n	b05e <d_print_mod_list+0x22>
    b058:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    b05c:	b9f2      	cbnz	r2, b09c <d_print_mod_list+0x60>
    b05e:	68a2      	ldr	r2, [r4, #8]
    b060:	b9ca      	cbnz	r2, b096 <d_print_mod_list+0x5a>
    b062:	6862      	ldr	r2, [r4, #4]
    b064:	7810      	ldrb	r0, [r2, #0]
    b066:	b91e      	cbnz	r6, b070 <d_print_mod_list+0x34>
    b068:	f1a0 031c 	sub.w	r3, r0, #28
    b06c:	2b04      	cmp	r3, #4
    b06e:	d912      	bls.n	b096 <d_print_mod_list+0x5a>
    b070:	68e3      	ldr	r3, [r4, #12]
    b072:	f8c4 8008 	str.w	r8, [r4, #8]
    b076:	2829      	cmp	r0, #41	; 0x29
    b078:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
    b07c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    b080:	d00f      	beq.n	b0a2 <d_print_mod_list+0x66>
    b082:	282a      	cmp	r0, #42	; 0x2a
    b084:	d018      	beq.n	b0b8 <d_print_mod_list+0x7c>
    b086:	2802      	cmp	r0, #2
    b088:	d021      	beq.n	b0ce <d_print_mod_list+0x92>
    b08a:	4628      	mov	r0, r5
    b08c:	4639      	mov	r1, r7
    b08e:	f7ff fd31 	bl	aaf4 <d_print_mod>
    b092:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    b096:	6824      	ldr	r4, [r4, #0]
    b098:	2c00      	cmp	r4, #0
    b09a:	d1dd      	bne.n	b058 <d_print_mod_list+0x1c>
    b09c:	b009      	add	sp, #36	; 0x24
    b09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0a2:	4639      	mov	r1, r7
    b0a4:	3208      	adds	r2, #8
    b0a6:	6823      	ldr	r3, [r4, #0]
    b0a8:	4628      	mov	r0, r5
    b0aa:	f000 f9c9 	bl	b440 <d_print_function_type.isra.11>
    b0ae:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    b0b2:	b009      	add	sp, #36	; 0x24
    b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0b8:	4639      	mov	r1, r7
    b0ba:	3204      	adds	r2, #4
    b0bc:	6823      	ldr	r3, [r4, #0]
    b0be:	4628      	mov	r0, r5
    b0c0:	f000 f8ee 	bl	b2a0 <d_print_array_type.isra.9>
    b0c4:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    b0c8:	b009      	add	sp, #36	; 0x24
    b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0ce:	2600      	movs	r6, #0
    b0d0:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
    b0d4:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
    b0d8:	6852      	ldr	r2, [r2, #4]
    b0da:	4628      	mov	r0, r5
    b0dc:	4639      	mov	r1, r7
    b0de:	f7ff fcfd 	bl	aadc <d_print_comp>
    b0e2:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
    b0e6:	f017 0804 	ands.w	r8, r7, #4
    b0ea:	d123      	bne.n	b134 <d_print_mod_list+0xf8>
    b0ec:	4e68      	ldr	r6, [pc, #416]	; (b290 <d_print_mod_list+0x254>)
    b0ee:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b0f2:	f106 0b02 	add.w	fp, r6, #2
    b0f6:	e009      	b.n	b10c <d_print_mod_list+0xd0>
    b0f8:	460b      	mov	r3, r1
    b0fa:	3101      	adds	r1, #1
    b0fc:	455e      	cmp	r6, fp
    b0fe:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b102:	f805 a003 	strb.w	sl, [r5, r3]
    b106:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
    b10a:	d01e      	beq.n	b14a <d_print_mod_list+0x10e>
    b10c:	29ff      	cmp	r1, #255	; 0xff
    b10e:	f816 af01 	ldrb.w	sl, [r6, #1]!
    b112:	d1f1      	bne.n	b0f8 <d_print_mod_list+0xbc>
    b114:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b118:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
    b11c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b120:	4628      	mov	r0, r5
    b122:	4798      	blx	r3
    b124:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b128:	3301      	adds	r3, #1
    b12a:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    b12e:	2101      	movs	r1, #1
    b130:	2300      	movs	r3, #0
    b132:	e7e3      	b.n	b0fc <d_print_mod_list+0xc0>
    b134:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b138:	29ff      	cmp	r1, #255	; 0xff
    b13a:	d01b      	beq.n	b174 <d_print_mod_list+0x138>
    b13c:	1c4a      	adds	r2, r1, #1
    b13e:	232e      	movs	r3, #46	; 0x2e
    b140:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
    b144:	546b      	strb	r3, [r5, r1]
    b146:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    b14a:	6863      	ldr	r3, [r4, #4]
    b14c:	689c      	ldr	r4, [r3, #8]
    b14e:	7823      	ldrb	r3, [r4, #0]
    b150:	2b45      	cmp	r3, #69	; 0x45
    b152:	d102      	bne.n	b15a <d_print_mod_list+0x11e>
    b154:	e01e      	b.n	b194 <d_print_mod_list+0x158>
    b156:	6864      	ldr	r4, [r4, #4]
    b158:	7823      	ldrb	r3, [r4, #0]
    b15a:	3b1c      	subs	r3, #28
    b15c:	2b04      	cmp	r3, #4
    b15e:	d9fa      	bls.n	b156 <d_print_mod_list+0x11a>
    b160:	4639      	mov	r1, r7
    b162:	4622      	mov	r2, r4
    b164:	4628      	mov	r0, r5
    b166:	f7ff fcb9 	bl	aadc <d_print_comp>
    b16a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    b16e:	b009      	add	sp, #36	; 0x24
    b170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b174:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b178:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b17c:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
    b180:	4628      	mov	r0, r5
    b182:	4798      	blx	r3
    b184:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b188:	3301      	adds	r3, #1
    b18a:	4631      	mov	r1, r6
    b18c:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    b190:	2201      	movs	r2, #1
    b192:	e7d4      	b.n	b13e <d_print_mod_list+0x102>
    b194:	4e3f      	ldr	r6, [pc, #252]	; (b294 <d_print_mod_list+0x258>)
    b196:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b19a:	f106 0a0d 	add.w	sl, r6, #13
    b19e:	f04f 0b00 	mov.w	fp, #0
    b1a2:	e009      	b.n	b1b8 <d_print_mod_list+0x17c>
    b1a4:	460b      	mov	r3, r1
    b1a6:	3101      	adds	r1, #1
    b1a8:	4556      	cmp	r6, sl
    b1aa:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b1ae:	f805 8003 	strb.w	r8, [r5, r3]
    b1b2:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
    b1b6:	d013      	beq.n	b1e0 <d_print_mod_list+0x1a4>
    b1b8:	29ff      	cmp	r1, #255	; 0xff
    b1ba:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    b1be:	d1f1      	bne.n	b1a4 <d_print_mod_list+0x168>
    b1c0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b1c4:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
    b1c8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b1cc:	4628      	mov	r0, r5
    b1ce:	4798      	blx	r3
    b1d0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b1d4:	3301      	adds	r3, #1
    b1d6:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    b1da:	2101      	movs	r1, #1
    b1dc:	2300      	movs	r3, #0
    b1de:	e7e3      	b.n	b1a8 <d_print_mod_list+0x16c>
    b1e0:	68a2      	ldr	r2, [r4, #8]
    b1e2:	492d      	ldr	r1, [pc, #180]	; (b298 <d_print_mod_list+0x25c>)
    b1e4:	3201      	adds	r2, #1
    b1e6:	a801      	add	r0, sp, #4
    b1e8:	f004 fee0 	bl	ffac <sprintf>
    b1ec:	a801      	add	r0, sp, #4
    b1ee:	f7f8 fa9d 	bl	372c <strlen>
    b1f2:	b330      	cbz	r0, b242 <d_print_mod_list+0x206>
    b1f4:	f10d 0603 	add.w	r6, sp, #3
    b1f8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b1fc:	eb06 0a00 	add.w	sl, r6, r0
    b200:	f04f 0b00 	mov.w	fp, #0
    b204:	e009      	b.n	b21a <d_print_mod_list+0x1de>
    b206:	460b      	mov	r3, r1
    b208:	3101      	adds	r1, #1
    b20a:	4556      	cmp	r6, sl
    b20c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b210:	f805 8003 	strb.w	r8, [r5, r3]
    b214:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
    b218:	d015      	beq.n	b246 <d_print_mod_list+0x20a>
    b21a:	29ff      	cmp	r1, #255	; 0xff
    b21c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    b220:	d1f1      	bne.n	b206 <d_print_mod_list+0x1ca>
    b222:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b226:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
    b22a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b22e:	4628      	mov	r0, r5
    b230:	4798      	blx	r3
    b232:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b236:	3301      	adds	r3, #1
    b238:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    b23c:	2101      	movs	r1, #1
    b23e:	2300      	movs	r3, #0
    b240:	e7e3      	b.n	b20a <d_print_mod_list+0x1ce>
    b242:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b246:	4e15      	ldr	r6, [pc, #84]	; (b29c <d_print_mod_list+0x260>)
    b248:	f04f 0b00 	mov.w	fp, #0
    b24c:	f106 0a03 	add.w	sl, r6, #3
    b250:	e00a      	b.n	b268 <d_print_mod_list+0x22c>
    b252:	460b      	mov	r3, r1
    b254:	3101      	adds	r1, #1
    b256:	4556      	cmp	r6, sl
    b258:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b25c:	f805 8003 	strb.w	r8, [r5, r3]
    b260:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
    b264:	f43f af77 	beq.w	b156 <d_print_mod_list+0x11a>
    b268:	29ff      	cmp	r1, #255	; 0xff
    b26a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    b26e:	d1f0      	bne.n	b252 <d_print_mod_list+0x216>
    b270:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b274:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
    b278:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b27c:	4628      	mov	r0, r5
    b27e:	4798      	blx	r3
    b280:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b284:	3301      	adds	r3, #1
    b286:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    b28a:	2101      	movs	r1, #1
    b28c:	2300      	movs	r3, #0
    b28e:	e7e2      	b.n	b256 <d_print_mod_list+0x21a>
    b290:	00014fa7 	.word	0x00014fa7
    b294:	00014fab 	.word	0x00014fab
    b298:	00014fbc 	.word	0x00014fbc
    b29c:	00014fbf 	.word	0x00014fbf

0000b2a0 <d_print_array_type.isra.9>:
    b2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2a4:	4699      	mov	r9, r3
    b2a6:	4605      	mov	r5, r0
    b2a8:	460f      	mov	r7, r1
    b2aa:	4690      	mov	r8, r2
    b2ac:	b14b      	cbz	r3, b2c2 <d_print_array_type.isra.9+0x22>
    b2ae:	6898      	ldr	r0, [r3, #8]
    b2b0:	b380      	cbz	r0, b314 <d_print_array_type.isra.9+0x74>
    b2b2:	681b      	ldr	r3, [r3, #0]
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	d1fa      	bne.n	b2ae <d_print_array_type.isra.9+0xe>
    b2b8:	464a      	mov	r2, r9
    b2ba:	4628      	mov	r0, r5
    b2bc:	4639      	mov	r1, r7
    b2be:	f7ff febd 	bl	b03c <d_print_mod_list>
    b2c2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    b2c6:	2bff      	cmp	r3, #255	; 0xff
    b2c8:	d069      	beq.n	b39e <d_print_array_type.isra.9+0xfe>
    b2ca:	1c59      	adds	r1, r3, #1
    b2cc:	2220      	movs	r2, #32
    b2ce:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b2d2:	54ea      	strb	r2, [r5, r3]
    b2d4:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    b2d8:	29ff      	cmp	r1, #255	; 0xff
    b2da:	f000 8095 	beq.w	b408 <d_print_array_type.isra.9+0x168>
    b2de:	1c4b      	adds	r3, r1, #1
    b2e0:	225b      	movs	r2, #91	; 0x5b
    b2e2:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    b2e6:	546a      	strb	r2, [r5, r1]
    b2e8:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    b2ec:	f8d8 2000 	ldr.w	r2, [r8]
    b2f0:	b12a      	cbz	r2, b2fe <d_print_array_type.isra.9+0x5e>
    b2f2:	4639      	mov	r1, r7
    b2f4:	4628      	mov	r0, r5
    b2f6:	f7ff fbf1 	bl	aadc <d_print_comp>
    b2fa:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    b2fe:	2bff      	cmp	r3, #255	; 0xff
    b300:	d070      	beq.n	b3e4 <d_print_array_type.isra.9+0x144>
    b302:	1c59      	adds	r1, r3, #1
    b304:	225d      	movs	r2, #93	; 0x5d
    b306:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b30a:	54ea      	strb	r2, [r5, r3]
    b30c:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    b310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b314:	685b      	ldr	r3, [r3, #4]
    b316:	781b      	ldrb	r3, [r3, #0]
    b318:	2b2a      	cmp	r3, #42	; 0x2a
    b31a:	f000 8086 	beq.w	b42a <d_print_array_type.isra.9+0x18a>
    b31e:	4e47      	ldr	r6, [pc, #284]	; (b43c <d_print_array_type.isra.9+0x19c>)
    b320:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b324:	f106 0a02 	add.w	sl, r6, #2
    b328:	e00a      	b.n	b340 <d_print_array_type.isra.9+0xa0>
    b32a:	460a      	mov	r2, r1
    b32c:	4556      	cmp	r6, sl
    b32e:	f101 0101 	add.w	r1, r1, #1
    b332:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b336:	f805 b002 	strb.w	fp, [r5, r2]
    b33a:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
    b33e:	d01c      	beq.n	b37a <d_print_array_type.isra.9+0xda>
    b340:	29ff      	cmp	r1, #255	; 0xff
    b342:	f816 bf01 	ldrb.w	fp, [r6, #1]!
    b346:	d1f0      	bne.n	b32a <d_print_array_type.isra.9+0x8a>
    b348:	f04f 0300 	mov.w	r3, #0
    b34c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b350:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
    b354:	f8d5 4108 	ldr.w	r4, [r5, #264]	; 0x108
    b358:	4628      	mov	r0, r5
    b35a:	47a0      	blx	r4
    b35c:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
    b360:	3201      	adds	r2, #1
    b362:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    b366:	2200      	movs	r2, #0
    b368:	2101      	movs	r1, #1
    b36a:	4556      	cmp	r6, sl
    b36c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    b370:	f805 b002 	strb.w	fp, [r5, r2]
    b374:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
    b378:	d1e2      	bne.n	b340 <d_print_array_type.isra.9+0xa0>
    b37a:	4639      	mov	r1, r7
    b37c:	464a      	mov	r2, r9
    b37e:	4628      	mov	r0, r5
    b380:	2300      	movs	r3, #0
    b382:	f7ff fe5b 	bl	b03c <d_print_mod_list>
    b386:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b38a:	29ff      	cmp	r1, #255	; 0xff
    b38c:	d019      	beq.n	b3c2 <d_print_array_type.isra.9+0x122>
    b38e:	1c4b      	adds	r3, r1, #1
    b390:	2229      	movs	r2, #41	; 0x29
    b392:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    b396:	546a      	strb	r2, [r5, r1]
    b398:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    b39c:	e793      	b.n	b2c6 <d_print_array_type.isra.9+0x26>
    b39e:	2400      	movs	r4, #0
    b3a0:	4619      	mov	r1, r3
    b3a2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b3a6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b3aa:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    b3ae:	4628      	mov	r0, r5
    b3b0:	4798      	blx	r3
    b3b2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b3b6:	1c5a      	adds	r2, r3, #1
    b3b8:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    b3bc:	4623      	mov	r3, r4
    b3be:	2101      	movs	r1, #1
    b3c0:	e784      	b.n	b2cc <d_print_array_type.isra.9+0x2c>
    b3c2:	2400      	movs	r4, #0
    b3c4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b3c8:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    b3cc:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b3d0:	4628      	mov	r0, r5
    b3d2:	4798      	blx	r3
    b3d4:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b3d8:	3301      	adds	r3, #1
    b3da:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    b3de:	4621      	mov	r1, r4
    b3e0:	2301      	movs	r3, #1
    b3e2:	e7d5      	b.n	b390 <d_print_array_type.isra.9+0xf0>
    b3e4:	2400      	movs	r4, #0
    b3e6:	4619      	mov	r1, r3
    b3e8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b3ec:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b3f0:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    b3f4:	4628      	mov	r0, r5
    b3f6:	4798      	blx	r3
    b3f8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b3fc:	1c5a      	adds	r2, r3, #1
    b3fe:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    b402:	4623      	mov	r3, r4
    b404:	2101      	movs	r1, #1
    b406:	e77d      	b.n	b304 <d_print_array_type.isra.9+0x64>
    b408:	2400      	movs	r4, #0
    b40a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b40e:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    b412:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    b416:	4628      	mov	r0, r5
    b418:	4798      	blx	r3
    b41a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b41e:	3301      	adds	r3, #1
    b420:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    b424:	4621      	mov	r1, r4
    b426:	2301      	movs	r3, #1
    b428:	e75a      	b.n	b2e0 <d_print_array_type.isra.9+0x40>
    b42a:	4603      	mov	r3, r0
    b42c:	4639      	mov	r1, r7
    b42e:	464a      	mov	r2, r9
    b430:	4628      	mov	r0, r5
    b432:	f7ff fe03 	bl	b03c <d_print_mod_list>
    b436:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    b43a:	e74d      	b.n	b2d8 <d_print_array_type.isra.9+0x38>
    b43c:	00015197 	.word	0x00015197

0000b440 <d_print_function_type.isra.11>:
    b440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b444:	469a      	mov	sl, r3
    b446:	4607      	mov	r7, r0
    b448:	4688      	mov	r8, r1
    b44a:	4691      	mov	r9, r2
    b44c:	2b00      	cmp	r3, #0
    b44e:	d03b      	beq.n	b4c8 <d_print_function_type.isra.11+0x88>
    b450:	689b      	ldr	r3, [r3, #8]
    b452:	2b00      	cmp	r3, #0
    b454:	d138      	bne.n	b4c8 <d_print_function_type.isra.11+0x88>
    b456:	4654      	mov	r4, sl
    b458:	2201      	movs	r2, #1
    b45a:	e006      	b.n	b46a <d_print_function_type.isra.11+0x2a>
    b45c:	f416 6f60 	tst.w	r6, #3584	; 0xe00
    b460:	d17a      	bne.n	b558 <d_print_function_type.isra.11+0x118>
    b462:	6824      	ldr	r4, [r4, #0]
    b464:	b384      	cbz	r4, b4c8 <d_print_function_type.isra.11+0x88>
    b466:	68a3      	ldr	r3, [r4, #8]
    b468:	bb73      	cbnz	r3, b4c8 <d_print_function_type.isra.11+0x88>
    b46a:	6860      	ldr	r0, [r4, #4]
    b46c:	4d69      	ldr	r5, [pc, #420]	; (b614 <d_print_function_type.isra.11+0x1d4>)
    b46e:	7806      	ldrb	r6, [r0, #0]
    b470:	3e19      	subs	r6, #25
    b472:	b2f6      	uxtb	r6, r6
    b474:	2e12      	cmp	r6, #18
    b476:	d8f4      	bhi.n	b462 <d_print_function_type.isra.11+0x22>
    b478:	fa02 f606 	lsl.w	r6, r2, r6
    b47c:	4035      	ands	r5, r6
    b47e:	2d00      	cmp	r5, #0
    b480:	d0ec      	beq.n	b45c <d_print_function_type.isra.11+0x1c>
    b482:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
    b486:	2b20      	cmp	r3, #32
    b488:	d06c      	beq.n	b564 <d_print_function_type.isra.11+0x124>
    b48a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    b48e:	2bff      	cmp	r3, #255	; 0xff
    b490:	f000 80ad 	beq.w	b5ee <d_print_function_type.isra.11+0x1ae>
    b494:	1c59      	adds	r1, r3, #1
    b496:	2220      	movs	r2, #32
    b498:	29ff      	cmp	r1, #255	; 0xff
    b49a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
    b49e:	54fa      	strb	r2, [r7, r3]
    b4a0:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
    b4a4:	d162      	bne.n	b56c <d_print_function_type.isra.11+0x12c>
    b4a6:	2400      	movs	r4, #0
    b4a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    b4ac:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    b4b0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    b4b4:	4638      	mov	r0, r7
    b4b6:	4798      	blx	r3
    b4b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    b4bc:	3301      	adds	r3, #1
    b4be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    b4c2:	4621      	mov	r1, r4
    b4c4:	2301      	movs	r3, #1
    b4c6:	e052      	b.n	b56e <d_print_function_type.isra.11+0x12e>
    b4c8:	2300      	movs	r3, #0
    b4ca:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
    b4ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    b4d2:	4641      	mov	r1, r8
    b4d4:	4638      	mov	r0, r7
    b4d6:	4652      	mov	r2, sl
    b4d8:	f7ff fdb0 	bl	b03c <d_print_mod_list>
    b4dc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
    b4e0:	29ff      	cmp	r1, #255	; 0xff
    b4e2:	d062      	beq.n	b5aa <d_print_function_type.isra.11+0x16a>
    b4e4:	1c4b      	adds	r3, r1, #1
    b4e6:	2228      	movs	r2, #40	; 0x28
    b4e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    b4ec:	547a      	strb	r2, [r7, r1]
    b4ee:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
    b4f2:	f8d9 2000 	ldr.w	r2, [r9]
    b4f6:	b112      	cbz	r2, b4fe <d_print_function_type.isra.11+0xbe>
    b4f8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
    b4fc:	b191      	cbz	r1, b524 <d_print_function_type.isra.11+0xe4>
    b4fe:	2bff      	cmp	r3, #255	; 0xff
    b500:	d018      	beq.n	b534 <d_print_function_type.isra.11+0xf4>
    b502:	1c5a      	adds	r2, r3, #1
    b504:	2429      	movs	r4, #41	; 0x29
    b506:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
    b50a:	4641      	mov	r1, r8
    b50c:	54fc      	strb	r4, [r7, r3]
    b50e:	4652      	mov	r2, sl
    b510:	4638      	mov	r0, r7
    b512:	f887 4104 	strb.w	r4, [r7, #260]	; 0x104
    b516:	2301      	movs	r3, #1
    b518:	f7ff fd90 	bl	b03c <d_print_mod_list>
    b51c:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
    b520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b524:	4638      	mov	r0, r7
    b526:	4641      	mov	r1, r8
    b528:	f7fd f842 	bl	85b0 <d_print_comp.part.10>
    b52c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    b530:	2bff      	cmp	r3, #255	; 0xff
    b532:	d1e6      	bne.n	b502 <d_print_function_type.isra.11+0xc2>
    b534:	2400      	movs	r4, #0
    b536:	4619      	mov	r1, r3
    b538:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    b53c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    b540:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    b544:	4638      	mov	r0, r7
    b546:	4798      	blx	r3
    b548:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    b54c:	1c5a      	adds	r2, r3, #1
    b54e:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    b552:	4623      	mov	r3, r4
    b554:	2201      	movs	r2, #1
    b556:	e7d5      	b.n	b504 <d_print_function_type.isra.11+0xc4>
    b558:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
    b55c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    b560:	2a28      	cmp	r2, #40	; 0x28
    b562:	d190      	bne.n	b486 <d_print_function_type.isra.11+0x46>
    b564:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
    b568:	29ff      	cmp	r1, #255	; 0xff
    b56a:	d09c      	beq.n	b4a6 <d_print_function_type.isra.11+0x66>
    b56c:	1c4b      	adds	r3, r1, #1
    b56e:	2228      	movs	r2, #40	; 0x28
    b570:	2400      	movs	r4, #0
    b572:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    b576:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
    b57a:	547a      	strb	r2, [r7, r1]
    b57c:	4623      	mov	r3, r4
    b57e:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
    b582:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
    b586:	4652      	mov	r2, sl
    b588:	4638      	mov	r0, r7
    b58a:	4641      	mov	r1, r8
    b58c:	f7ff fd56 	bl	b03c <d_print_mod_list>
    b590:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
    b594:	2aff      	cmp	r2, #255	; 0xff
    b596:	d019      	beq.n	b5cc <d_print_function_type.isra.11+0x18c>
    b598:	1c51      	adds	r1, r2, #1
    b59a:	2329      	movs	r3, #41	; 0x29
    b59c:	29ff      	cmp	r1, #255	; 0xff
    b59e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
    b5a2:	54bb      	strb	r3, [r7, r2]
    b5a4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    b5a8:	d19c      	bne.n	b4e4 <d_print_function_type.isra.11+0xa4>
    b5aa:	2400      	movs	r4, #0
    b5ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    b5b0:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    b5b4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    b5b8:	4638      	mov	r0, r7
    b5ba:	4798      	blx	r3
    b5bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    b5c0:	3301      	adds	r3, #1
    b5c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    b5c6:	4621      	mov	r1, r4
    b5c8:	2301      	movs	r3, #1
    b5ca:	e78c      	b.n	b4e6 <d_print_function_type.isra.11+0xa6>
    b5cc:	4611      	mov	r1, r2
    b5ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    b5d2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    b5d6:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    b5da:	4638      	mov	r0, r7
    b5dc:	4798      	blx	r3
    b5de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    b5e2:	3301      	adds	r3, #1
    b5e4:	4622      	mov	r2, r4
    b5e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    b5ea:	2101      	movs	r1, #1
    b5ec:	e7d5      	b.n	b59a <d_print_function_type.isra.11+0x15a>
    b5ee:	2400      	movs	r4, #0
    b5f0:	4619      	mov	r1, r3
    b5f2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    b5f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    b5fa:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    b5fe:	4638      	mov	r0, r7
    b600:	4798      	blx	r3
    b602:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    b606:	1c5a      	adds	r2, r3, #1
    b608:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    b60c:	4623      	mov	r3, r4
    b60e:	2101      	movs	r1, #1
    b610:	e741      	b.n	b496 <d_print_function_type.isra.11+0x56>
    b612:	bf00      	nop
    b614:	00043107 	.word	0x00043107

0000b618 <d_print_cast.isra.12>:
    b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b61c:	4615      	mov	r5, r2
    b61e:	6812      	ldr	r2, [r2, #0]
    b620:	7813      	ldrb	r3, [r2, #0]
    b622:	2b04      	cmp	r3, #4
    b624:	b082      	sub	sp, #8
    b626:	4604      	mov	r4, r0
    b628:	460e      	mov	r6, r1
    b62a:	d006      	beq.n	b63a <d_print_cast.isra.12+0x22>
    b62c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    b630:	2b00      	cmp	r3, #0
    b632:	d03d      	beq.n	b6b0 <d_print_cast.isra.12+0x98>
    b634:	b002      	add	sp, #8
    b636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b63a:	ab02      	add	r3, sp, #8
    b63c:	f8d0 7110 	ldr.w	r7, [r0, #272]	; 0x110
    b640:	f843 7d08 	str.w	r7, [r3, #-8]!
    b644:	2200      	movs	r2, #0
    b646:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    b64a:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
    b64e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    b652:	682b      	ldr	r3, [r5, #0]
    b654:	9301      	str	r3, [sp, #4]
    b656:	685a      	ldr	r2, [r3, #4]
    b658:	2a00      	cmp	r2, #0
    b65a:	d06f      	beq.n	b73c <d_print_cast.isra.12+0x124>
    b65c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    b660:	2b00      	cmp	r3, #0
    b662:	d03f      	beq.n	b6e4 <d_print_cast.isra.12+0xcc>
    b664:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    b668:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    b66c:	2b3c      	cmp	r3, #60	; 0x3c
    b66e:	d069      	beq.n	b744 <d_print_cast.isra.12+0x12c>
    b670:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    b674:	2aff      	cmp	r2, #255	; 0xff
    b676:	d04b      	beq.n	b710 <d_print_cast.isra.12+0xf8>
    b678:	1c53      	adds	r3, r2, #1
    b67a:	213c      	movs	r1, #60	; 0x3c
    b67c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    b680:	54a1      	strb	r1, [r4, r2]
    b682:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
    b686:	682a      	ldr	r2, [r5, #0]
    b688:	6892      	ldr	r2, [r2, #8]
    b68a:	2a00      	cmp	r2, #0
    b68c:	d052      	beq.n	b734 <d_print_cast.isra.12+0x11c>
    b68e:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    b692:	b195      	cbz	r5, b6ba <d_print_cast.isra.12+0xa2>
    b694:	2bff      	cmp	r3, #255	; 0xff
    b696:	d029      	beq.n	b6ec <d_print_cast.isra.12+0xd4>
    b698:	1c59      	adds	r1, r3, #1
    b69a:	223e      	movs	r2, #62	; 0x3e
    b69c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b6a0:	54e2      	strb	r2, [r4, r3]
    b6a2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    b6a6:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
    b6aa:	b002      	add	sp, #8
    b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6b0:	f7fc ff7e 	bl	85b0 <d_print_comp.part.10>
    b6b4:	b002      	add	sp, #8
    b6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6ba:	4631      	mov	r1, r6
    b6bc:	4620      	mov	r0, r4
    b6be:	f7fc ff77 	bl	85b0 <d_print_comp.part.10>
    b6c2:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    b6c6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    b6ca:	2a3e      	cmp	r2, #62	; 0x3e
    b6cc:	d1e2      	bne.n	b694 <d_print_cast.isra.12+0x7c>
    b6ce:	2bff      	cmp	r3, #255	; 0xff
    b6d0:	d044      	beq.n	b75c <d_print_cast.isra.12+0x144>
    b6d2:	461d      	mov	r5, r3
    b6d4:	3301      	adds	r3, #1
    b6d6:	2220      	movs	r2, #32
    b6d8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    b6dc:	5562      	strb	r2, [r4, r5]
    b6de:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    b6e2:	e7d7      	b.n	b694 <d_print_cast.isra.12+0x7c>
    b6e4:	f7fc ff64 	bl	85b0 <d_print_comp.part.10>
    b6e8:	9f00      	ldr	r7, [sp, #0]
    b6ea:	e7bb      	b.n	b664 <d_print_cast.isra.12+0x4c>
    b6ec:	2500      	movs	r5, #0
    b6ee:	4619      	mov	r1, r3
    b6f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b6f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b6f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    b6fc:	4620      	mov	r0, r4
    b6fe:	4798      	blx	r3
    b700:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b704:	1c5a      	adds	r2, r3, #1
    b706:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    b70a:	462b      	mov	r3, r5
    b70c:	2101      	movs	r1, #1
    b70e:	e7c4      	b.n	b69a <d_print_cast.isra.12+0x82>
    b710:	2700      	movs	r7, #0
    b712:	4611      	mov	r1, r2
    b714:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b718:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b71c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    b720:	4620      	mov	r0, r4
    b722:	4798      	blx	r3
    b724:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b728:	3301      	adds	r3, #1
    b72a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b72e:	463a      	mov	r2, r7
    b730:	2301      	movs	r3, #1
    b732:	e7a2      	b.n	b67a <d_print_cast.isra.12+0x62>
    b734:	2201      	movs	r2, #1
    b736:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    b73a:	e7ab      	b.n	b694 <d_print_cast.isra.12+0x7c>
    b73c:	2301      	movs	r3, #1
    b73e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    b742:	e78f      	b.n	b664 <d_print_cast.isra.12+0x4c>
    b744:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b748:	29ff      	cmp	r1, #255	; 0xff
    b74a:	d017      	beq.n	b77c <d_print_cast.isra.12+0x164>
    b74c:	1c4a      	adds	r2, r1, #1
    b74e:	2320      	movs	r3, #32
    b750:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    b754:	5463      	strb	r3, [r4, r1]
    b756:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    b75a:	e78b      	b.n	b674 <d_print_cast.isra.12+0x5c>
    b75c:	4619      	mov	r1, r3
    b75e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    b762:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b766:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b76a:	4620      	mov	r0, r4
    b76c:	4798      	blx	r3
    b76e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b772:	3301      	adds	r3, #1
    b774:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b778:	2301      	movs	r3, #1
    b77a:	e7ac      	b.n	b6d6 <d_print_cast.isra.12+0xbe>
    b77c:	2700      	movs	r7, #0
    b77e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b782:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b786:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    b78a:	4620      	mov	r0, r4
    b78c:	4798      	blx	r3
    b78e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b792:	3301      	adds	r3, #1
    b794:	4639      	mov	r1, r7
    b796:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b79a:	2201      	movs	r2, #1
    b79c:	e7d7      	b.n	b74e <d_print_cast.isra.12+0x136>
    b79e:	bf00      	nop

0000b7a0 <d_print_expr_op>:
    b7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b7a4:	7815      	ldrb	r5, [r2, #0]
    b7a6:	2d31      	cmp	r5, #49	; 0x31
    b7a8:	4604      	mov	r4, r0
    b7aa:	d008      	beq.n	b7be <d_print_expr_op+0x1e>
    b7ac:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    b7b0:	b10b      	cbz	r3, b7b6 <d_print_expr_op+0x16>
    b7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b7b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b7ba:	f7fc bef9 	b.w	85b0 <d_print_comp.part.10>
    b7be:	6853      	ldr	r3, [r2, #4]
    b7c0:	689f      	ldr	r7, [r3, #8]
    b7c2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    b7c6:	2f00      	cmp	r7, #0
    b7c8:	d0f3      	beq.n	b7b2 <d_print_expr_op+0x12>
    b7ca:	2500      	movs	r5, #0
    b7cc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    b7d0:	46a8      	mov	r8, r5
    b7d2:	e009      	b.n	b7e8 <d_print_expr_op+0x48>
    b7d4:	460b      	mov	r3, r1
    b7d6:	3101      	adds	r1, #1
    b7d8:	3501      	adds	r5, #1
    b7da:	42af      	cmp	r7, r5
    b7dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b7e0:	54e6      	strb	r6, [r4, r3]
    b7e2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    b7e6:	d013      	beq.n	b810 <d_print_expr_op+0x70>
    b7e8:	29ff      	cmp	r1, #255	; 0xff
    b7ea:	f819 6005 	ldrb.w	r6, [r9, r5]
    b7ee:	d1f1      	bne.n	b7d4 <d_print_expr_op+0x34>
    b7f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b7f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    b7f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b7fc:	4620      	mov	r0, r4
    b7fe:	4798      	blx	r3
    b800:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b804:	3301      	adds	r3, #1
    b806:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b80a:	2101      	movs	r1, #1
    b80c:	2300      	movs	r3, #0
    b80e:	e7e3      	b.n	b7d8 <d_print_expr_op+0x38>
    b810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b814 <d_print_subexpr>:
    b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b816:	7813      	ldrb	r3, [r2, #0]
    b818:	2b01      	cmp	r3, #1
    b81a:	4615      	mov	r5, r2
    b81c:	460f      	mov	r7, r1
    b81e:	4604      	mov	r4, r0
    b820:	d914      	bls.n	b84c <d_print_subexpr+0x38>
    b822:	2b30      	cmp	r3, #48	; 0x30
    b824:	d012      	beq.n	b84c <d_print_subexpr+0x38>
    b826:	2b06      	cmp	r3, #6
    b828:	d010      	beq.n	b84c <d_print_subexpr+0x38>
    b82a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    b82e:	2bff      	cmp	r3, #255	; 0xff
    b830:	d034      	beq.n	b89c <d_print_subexpr+0x88>
    b832:	1c59      	adds	r1, r3, #1
    b834:	2228      	movs	r2, #40	; 0x28
    b836:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b83a:	54e2      	strb	r2, [r4, r3]
    b83c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    b840:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    b844:	2600      	movs	r6, #0
    b846:	b133      	cbz	r3, b856 <d_print_subexpr+0x42>
    b848:	b166      	cbz	r6, b864 <d_print_subexpr+0x50>
    b84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b84c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    b850:	2601      	movs	r6, #1
    b852:	2b00      	cmp	r3, #0
    b854:	d1f8      	bne.n	b848 <d_print_subexpr+0x34>
    b856:	4639      	mov	r1, r7
    b858:	462a      	mov	r2, r5
    b85a:	4620      	mov	r0, r4
    b85c:	f7fc fea8 	bl	85b0 <d_print_comp.part.10>
    b860:	2e00      	cmp	r6, #0
    b862:	d1f2      	bne.n	b84a <d_print_subexpr+0x36>
    b864:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b868:	29ff      	cmp	r1, #255	; 0xff
    b86a:	d007      	beq.n	b87c <d_print_subexpr+0x68>
    b86c:	1c4a      	adds	r2, r1, #1
    b86e:	2329      	movs	r3, #41	; 0x29
    b870:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    b874:	5463      	strb	r3, [r4, r1]
    b876:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    b87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b87c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b880:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b884:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    b888:	4620      	mov	r0, r4
    b88a:	4798      	blx	r3
    b88c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b890:	3301      	adds	r3, #1
    b892:	4631      	mov	r1, r6
    b894:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b898:	2201      	movs	r2, #1
    b89a:	e7e8      	b.n	b86e <d_print_subexpr+0x5a>
    b89c:	2600      	movs	r6, #0
    b89e:	4619      	mov	r1, r3
    b8a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b8a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b8a8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    b8ac:	4798      	blx	r3
    b8ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b8b2:	1c5a      	adds	r2, r3, #1
    b8b4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    b8b8:	4633      	mov	r3, r6
    b8ba:	2101      	movs	r1, #1
    b8bc:	e7ba      	b.n	b834 <d_print_subexpr+0x20>
    b8be:	bf00      	nop

0000b8c0 <d_demangle_callback.constprop.16>:
    b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8c4:	b0d7      	sub	sp, #348	; 0x15c
    b8c6:	4604      	mov	r4, r0
    b8c8:	7805      	ldrb	r5, [r0, #0]
    b8ca:	2d5f      	cmp	r5, #95	; 0x5f
    b8cc:	af00      	add	r7, sp, #0
    b8ce:	460e      	mov	r6, r1
    b8d0:	4690      	mov	r8, r2
    b8d2:	d072      	beq.n	b9ba <d_demangle_callback.constprop.16+0xfa>
    b8d4:	4620      	mov	r0, r4
    b8d6:	497c      	ldr	r1, [pc, #496]	; (bac8 <d_demangle_callback.constprop.16+0x208>)
    b8d8:	2208      	movs	r2, #8
    b8da:	f004 fc9b 	bl	10214 <strncmp>
    b8de:	b978      	cbnz	r0, b900 <d_demangle_callback.constprop.16+0x40>
    b8e0:	7a23      	ldrb	r3, [r4, #8]
    b8e2:	2b2e      	cmp	r3, #46	; 0x2e
    b8e4:	d005      	beq.n	b8f2 <d_demangle_callback.constprop.16+0x32>
    b8e6:	2b5f      	cmp	r3, #95	; 0x5f
    b8e8:	d003      	beq.n	b8f2 <d_demangle_callback.constprop.16+0x32>
    b8ea:	2b24      	cmp	r3, #36	; 0x24
    b8ec:	d001      	beq.n	b8f2 <d_demangle_callback.constprop.16+0x32>
    b8ee:	4681      	mov	r9, r0
    b8f0:	e008      	b.n	b904 <d_demangle_callback.constprop.16+0x44>
    b8f2:	7a63      	ldrb	r3, [r4, #9]
    b8f4:	2b44      	cmp	r3, #68	; 0x44
    b8f6:	f000 80df 	beq.w	bab8 <d_demangle_callback.constprop.16+0x1f8>
    b8fa:	2b49      	cmp	r3, #73	; 0x49
    b8fc:	f000 8098 	beq.w	ba30 <d_demangle_callback.constprop.16+0x170>
    b900:	f04f 0900 	mov.w	r9, #0
    b904:	4620      	mov	r0, r4
    b906:	f7f7 ff11 	bl	372c <strlen>
    b90a:	0042      	lsls	r2, r0, #1
    b90c:	0083      	lsls	r3, r0, #2
    b90e:	1899      	adds	r1, r3, r2
    b910:	0089      	lsls	r1, r1, #2
    b912:	3108      	adds	r1, #8
    b914:	330a      	adds	r3, #10
    b916:	ebad 0d01 	sub.w	sp, sp, r1
    b91a:	f023 0307 	bic.w	r3, r3, #7
    b91e:	46ea      	mov	sl, sp
    b920:	eb04 0c00 	add.w	ip, r4, r0
    b924:	ebad 0d03 	sub.w	sp, sp, r3
    b928:	f04f 0b11 	mov.w	fp, #17
    b92c:	2300      	movs	r3, #0
    b92e:	f1b9 0f01 	cmp.w	r9, #1
    b932:	f8c7 a010 	str.w	sl, [r7, #16]
    b936:	f8c7 d01c 	str.w	sp, [r7, #28]
    b93a:	61ba      	str	r2, [r7, #24]
    b93c:	603c      	str	r4, [r7, #0]
    b93e:	60fc      	str	r4, [r7, #12]
    b940:	6278      	str	r0, [r7, #36]	; 0x24
    b942:	f8c7 c004 	str.w	ip, [r7, #4]
    b946:	f8c7 b008 	str.w	fp, [r7, #8]
    b94a:	617b      	str	r3, [r7, #20]
    b94c:	623b      	str	r3, [r7, #32]
    b94e:	62bb      	str	r3, [r7, #40]	; 0x28
    b950:	62fb      	str	r3, [r7, #44]	; 0x2c
    b952:	633b      	str	r3, [r7, #48]	; 0x30
    b954:	d037      	beq.n	b9c6 <d_demangle_callback.constprop.16+0x106>
    b956:	d373      	bcc.n	ba40 <d_demangle_callback.constprop.16+0x180>
    b958:	f1b9 0f03 	cmp.w	r9, #3
    b95c:	d870      	bhi.n	ba40 <d_demangle_callback.constprop.16+0x180>
    b95e:	7ae2      	ldrb	r2, [r4, #11]
    b960:	f1b9 0f02 	cmp.w	r9, #2
    b964:	f104 050b 	add.w	r5, r4, #11
    b968:	bf14      	ite	ne
    b96a:	f04f 0943 	movne.w	r9, #67	; 0x43
    b96e:	f04f 0942 	moveq.w	r9, #66	; 0x42
    b972:	2a5f      	cmp	r2, #95	; 0x5f
    b974:	60fd      	str	r5, [r7, #12]
    b976:	d103      	bne.n	b980 <d_demangle_callback.constprop.16+0xc0>
    b978:	7b22      	ldrb	r2, [r4, #12]
    b97a:	2a5a      	cmp	r2, #90	; 0x5a
    b97c:	f000 8091 	beq.w	baa2 <d_demangle_callback.constprop.16+0x1e2>
    b980:	4628      	mov	r0, r5
    b982:	f7f7 fed3 	bl	372c <strlen>
    b986:	4629      	mov	r1, r5
    b988:	4602      	mov	r2, r0
    b98a:	4638      	mov	r0, r7
    b98c:	f7fa fd98 	bl	64c0 <d_make_name>
    b990:	4602      	mov	r2, r0
    b992:	4649      	mov	r1, r9
    b994:	2300      	movs	r3, #0
    b996:	4638      	mov	r0, r7
    b998:	f7fa fd46 	bl	6428 <d_make_comp>
    b99c:	68fc      	ldr	r4, [r7, #12]
    b99e:	4681      	mov	r9, r0
    b9a0:	4620      	mov	r0, r4
    b9a2:	f7f7 fec3 	bl	372c <strlen>
    b9a6:	1823      	adds	r3, r4, r0
    b9a8:	60fb      	str	r3, [r7, #12]
    b9aa:	5c25      	ldrb	r5, [r4, r0]
    b9ac:	b185      	cbz	r5, b9d0 <d_demangle_callback.constprop.16+0x110>
    b9ae:	2000      	movs	r0, #0
    b9b0:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
    b9b4:	46bd      	mov	sp, r7
    b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9ba:	7843      	ldrb	r3, [r0, #1]
    b9bc:	2b5a      	cmp	r3, #90	; 0x5a
    b9be:	d189      	bne.n	b8d4 <d_demangle_callback.constprop.16+0x14>
    b9c0:	f04f 0901 	mov.w	r9, #1
    b9c4:	e79e      	b.n	b904 <d_demangle_callback.constprop.16+0x44>
    b9c6:	2d5f      	cmp	r5, #95	; 0x5f
    b9c8:	d041      	beq.n	ba4e <d_demangle_callback.constprop.16+0x18e>
    b9ca:	4699      	mov	r9, r3
    b9cc:	2d00      	cmp	r5, #0
    b9ce:	d1ee      	bne.n	b9ae <d_demangle_callback.constprop.16+0xee>
    b9d0:	f1b9 0f00 	cmp.w	r9, #0
    b9d4:	d063      	beq.n	ba9e <d_demangle_callback.constprop.16+0x1de>
    b9d6:	f107 0434 	add.w	r4, r7, #52	; 0x34
    b9da:	464a      	mov	r2, r9
    b9dc:	4620      	mov	r0, r4
    b9de:	2111      	movs	r1, #17
    b9e0:	f8c7 5134 	str.w	r5, [r7, #308]	; 0x134
    b9e4:	f887 5138 	strb.w	r5, [r7, #312]	; 0x138
    b9e8:	f8c7 5144 	str.w	r5, [r7, #324]	; 0x144
    b9ec:	f8c7 5148 	str.w	r5, [r7, #328]	; 0x148
    b9f0:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
    b9f4:	f8c7 5154 	str.w	r5, [r7, #340]	; 0x154
    b9f8:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
    b9fc:	f8c7 8140 	str.w	r8, [r7, #320]	; 0x140
    ba00:	f8c7 514c 	str.w	r5, [r7, #332]	; 0x14c
    ba04:	f7fc fdd4 	bl	85b0 <d_print_comp.part.10>
    ba08:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
    ba0c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
    ba10:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
    ba14:	5465      	strb	r5, [r4, r1]
    ba16:	4620      	mov	r0, r4
    ba18:	4798      	blx	r3
    ba1a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
    ba1e:	f1d0 0001 	rsbs	r0, r0, #1
    ba22:	bf38      	it	cc
    ba24:	2000      	movcc	r0, #0
    ba26:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
    ba2a:	46bd      	mov	sp, r7
    ba2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba30:	7aa3      	ldrb	r3, [r4, #10]
    ba32:	2b5f      	cmp	r3, #95	; 0x5f
    ba34:	bf14      	ite	ne
    ba36:	f04f 0900 	movne.w	r9, #0
    ba3a:	f04f 0902 	moveq.w	r9, #2
    ba3e:	e761      	b.n	b904 <d_demangle_callback.constprop.16+0x44>
    ba40:	4638      	mov	r0, r7
    ba42:	f7fb fa9f 	bl	6f84 <d_type>
    ba46:	68fb      	ldr	r3, [r7, #12]
    ba48:	4681      	mov	r9, r0
    ba4a:	781d      	ldrb	r5, [r3, #0]
    ba4c:	e7ae      	b.n	b9ac <d_demangle_callback.constprop.16+0xec>
    ba4e:	7865      	ldrb	r5, [r4, #1]
    ba50:	1c62      	adds	r2, r4, #1
    ba52:	2d5a      	cmp	r5, #90	; 0x5a
    ba54:	60fa      	str	r2, [r7, #12]
    ba56:	d1b8      	bne.n	b9ca <d_demangle_callback.constprop.16+0x10a>
    ba58:	4649      	mov	r1, r9
    ba5a:	3402      	adds	r4, #2
    ba5c:	4638      	mov	r0, r7
    ba5e:	60fc      	str	r4, [r7, #12]
    ba60:	f7fb fe76 	bl	7750 <d_encoding>
    ba64:	68bb      	ldr	r3, [r7, #8]
    ba66:	f013 0f01 	tst.w	r3, #1
    ba6a:	68fb      	ldr	r3, [r7, #12]
    ba6c:	4681      	mov	r9, r0
    ba6e:	781d      	ldrb	r5, [r3, #0]
    ba70:	d112      	bne.n	ba98 <d_demangle_callback.constprop.16+0x1d8>
    ba72:	e79b      	b.n	b9ac <d_demangle_callback.constprop.16+0xec>
    ba74:	785b      	ldrb	r3, [r3, #1]
    ba76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    ba7a:	2a19      	cmp	r2, #25
    ba7c:	4638      	mov	r0, r7
    ba7e:	4649      	mov	r1, r9
    ba80:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    ba84:	d903      	bls.n	ba8e <d_demangle_callback.constprop.16+0x1ce>
    ba86:	2b5f      	cmp	r3, #95	; 0x5f
    ba88:	d001      	beq.n	ba8e <d_demangle_callback.constprop.16+0x1ce>
    ba8a:	2c09      	cmp	r4, #9
    ba8c:	d811      	bhi.n	bab2 <d_demangle_callback.constprop.16+0x1f2>
    ba8e:	f7fa fda7 	bl	65e0 <d_clone_suffix>
    ba92:	68fb      	ldr	r3, [r7, #12]
    ba94:	781d      	ldrb	r5, [r3, #0]
    ba96:	4681      	mov	r9, r0
    ba98:	2d2e      	cmp	r5, #46	; 0x2e
    ba9a:	d0eb      	beq.n	ba74 <d_demangle_callback.constprop.16+0x1b4>
    ba9c:	e786      	b.n	b9ac <d_demangle_callback.constprop.16+0xec>
    ba9e:	4648      	mov	r0, r9
    baa0:	e786      	b.n	b9b0 <d_demangle_callback.constprop.16+0xf0>
    baa2:	340d      	adds	r4, #13
    baa4:	4619      	mov	r1, r3
    baa6:	4638      	mov	r0, r7
    baa8:	60fc      	str	r4, [r7, #12]
    baaa:	f7fb fe51 	bl	7750 <d_encoding>
    baae:	4602      	mov	r2, r0
    bab0:	e76f      	b.n	b992 <d_demangle_callback.constprop.16+0xd2>
    bab2:	68fb      	ldr	r3, [r7, #12]
    bab4:	781d      	ldrb	r5, [r3, #0]
    bab6:	e779      	b.n	b9ac <d_demangle_callback.constprop.16+0xec>
    bab8:	7aa3      	ldrb	r3, [r4, #10]
    baba:	2b5f      	cmp	r3, #95	; 0x5f
    babc:	bf0c      	ite	eq
    babe:	f04f 0903 	moveq.w	r9, #3
    bac2:	f04f 0900 	movne.w	r9, #0
    bac6:	e71d      	b.n	b904 <d_demangle_callback.constprop.16+0x44>
    bac8:	00014f4c 	.word	0x00014f4c

0000bacc <__cxa_demangle>:
    bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bad0:	460d      	mov	r5, r1
    bad2:	b084      	sub	sp, #16
    bad4:	4617      	mov	r7, r2
    bad6:	461e      	mov	r6, r3
    bad8:	2800      	cmp	r0, #0
    bada:	d02e      	beq.n	bb3a <__cxa_demangle+0x6e>
    badc:	b109      	cbz	r1, bae2 <__cxa_demangle+0x16>
    bade:	2a00      	cmp	r2, #0
    bae0:	d02b      	beq.n	bb3a <__cxa_demangle+0x6e>
    bae2:	2400      	movs	r4, #0
    bae4:	4929      	ldr	r1, [pc, #164]	; (bb8c <__cxa_demangle+0xc0>)
    bae6:	9400      	str	r4, [sp, #0]
    bae8:	466a      	mov	r2, sp
    baea:	9401      	str	r4, [sp, #4]
    baec:	9402      	str	r4, [sp, #8]
    baee:	9403      	str	r4, [sp, #12]
    baf0:	f7ff fee6 	bl	b8c0 <d_demangle_callback.constprop.16>
    baf4:	2800      	cmp	r0, #0
    baf6:	d03e      	beq.n	bb76 <__cxa_demangle+0xaa>
    baf8:	9b03      	ldr	r3, [sp, #12]
    bafa:	b1db      	cbz	r3, bb34 <__cxa_demangle+0x68>
    bafc:	f04f 0801 	mov.w	r8, #1
    bb00:	9c00      	ldr	r4, [sp, #0]
    bb02:	b344      	cbz	r4, bb56 <__cxa_demangle+0x8a>
    bb04:	2d00      	cmp	r5, #0
    bb06:	d033      	beq.n	bb70 <__cxa_demangle+0xa4>
    bb08:	4620      	mov	r0, r4
    bb0a:	f7f7 fe0f 	bl	372c <strlen>
    bb0e:	683b      	ldr	r3, [r7, #0]
    bb10:	4298      	cmp	r0, r3
    bb12:	d21a      	bcs.n	bb4a <__cxa_demangle+0x7e>
    bb14:	1c42      	adds	r2, r0, #1
    bb16:	4621      	mov	r1, r4
    bb18:	4628      	mov	r0, r5
    bb1a:	f003 fe89 	bl	f830 <memcpy>
    bb1e:	4620      	mov	r0, r4
    bb20:	f003 fb66 	bl	f1f0 <free>
    bb24:	462c      	mov	r4, r5
    bb26:	b30e      	cbz	r6, bb6c <__cxa_demangle+0xa0>
    bb28:	2300      	movs	r3, #0
    bb2a:	4620      	mov	r0, r4
    bb2c:	6033      	str	r3, [r6, #0]
    bb2e:	b004      	add	sp, #16
    bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb34:	f8dd 8008 	ldr.w	r8, [sp, #8]
    bb38:	e7e2      	b.n	bb00 <__cxa_demangle+0x34>
    bb3a:	b19e      	cbz	r6, bb64 <__cxa_demangle+0x98>
    bb3c:	f06f 0302 	mvn.w	r3, #2
    bb40:	2000      	movs	r0, #0
    bb42:	6033      	str	r3, [r6, #0]
    bb44:	b004      	add	sp, #16
    bb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb4a:	4628      	mov	r0, r5
    bb4c:	f003 fb50 	bl	f1f0 <free>
    bb50:	f8c7 8000 	str.w	r8, [r7]
    bb54:	e7e7      	b.n	bb26 <__cxa_demangle+0x5a>
    bb56:	b12e      	cbz	r6, bb64 <__cxa_demangle+0x98>
    bb58:	f1b8 0f01 	cmp.w	r8, #1
    bb5c:	d011      	beq.n	bb82 <__cxa_demangle+0xb6>
    bb5e:	f06f 0301 	mvn.w	r3, #1
    bb62:	6033      	str	r3, [r6, #0]
    bb64:	2000      	movs	r0, #0
    bb66:	b004      	add	sp, #16
    bb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb6c:	4620      	mov	r0, r4
    bb6e:	e7de      	b.n	bb2e <__cxa_demangle+0x62>
    bb70:	2f00      	cmp	r7, #0
    bb72:	d1ed      	bne.n	bb50 <__cxa_demangle+0x84>
    bb74:	e7d7      	b.n	bb26 <__cxa_demangle+0x5a>
    bb76:	9800      	ldr	r0, [sp, #0]
    bb78:	f003 fb3a 	bl	f1f0 <free>
    bb7c:	2e00      	cmp	r6, #0
    bb7e:	d1ee      	bne.n	bb5e <__cxa_demangle+0x92>
    bb80:	e7f0      	b.n	bb64 <__cxa_demangle+0x98>
    bb82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bb86:	4620      	mov	r0, r4
    bb88:	6033      	str	r3, [r6, #0]
    bb8a:	e7d0      	b.n	bb2e <__cxa_demangle+0x62>
    bb8c:	00006ac1 	.word	0x00006ac1

0000bb90 <__gcclibcxx_demangle_callback>:
    bb90:	b508      	push	{r3, lr}
    bb92:	b140      	cbz	r0, bba6 <__gcclibcxx_demangle_callback+0x16>
    bb94:	b139      	cbz	r1, bba6 <__gcclibcxx_demangle_callback+0x16>
    bb96:	f7ff fe93 	bl	b8c0 <d_demangle_callback.constprop.16>
    bb9a:	2800      	cmp	r0, #0
    bb9c:	bf14      	ite	ne
    bb9e:	2000      	movne	r0, #0
    bba0:	f06f 0001 	mvneq.w	r0, #1
    bba4:	bd08      	pop	{r3, pc}
    bba6:	f06f 0002 	mvn.w	r0, #2
    bbaa:	bd08      	pop	{r3, pc}

0000bbac <__cxa_current_exception_type>:
    bbac:	b508      	push	{r3, lr}
    bbae:	f7f9 fec5 	bl	593c <__cxa_get_globals>
    bbb2:	6800      	ldr	r0, [r0, #0]
    bbb4:	b130      	cbz	r0, bbc4 <__cxa_current_exception_type+0x18>
    bbb6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    bbba:	2b01      	cmp	r3, #1
    bbbc:	bf04      	itt	eq
    bbbe:	6800      	ldreq	r0, [r0, #0]
    bbc0:	3878      	subeq	r0, #120	; 0x78
    bbc2:	6800      	ldr	r0, [r0, #0]
    bbc4:	bd08      	pop	{r3, pc}
    bbc6:	bf00      	nop

0000bbc8 <cos>:
    bbc8:	b570      	push	{r4, r5, r6, lr}
    bbca:	4e1a      	ldr	r6, [pc, #104]	; (bc34 <cos+0x6c>)
    bbcc:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    bbd0:	42b4      	cmp	r4, r6
    bbd2:	b086      	sub	sp, #24
    bbd4:	4602      	mov	r2, r0
    bbd6:	460b      	mov	r3, r1
    bbd8:	dd19      	ble.n	bc0e <cos+0x46>
    bbda:	4d17      	ldr	r5, [pc, #92]	; (bc38 <cos+0x70>)
    bbdc:	42ac      	cmp	r4, r5
    bbde:	dd03      	ble.n	bbe8 <cos+0x20>
    bbe0:	f001 f9a8 	bl	cf34 <__aeabi_dsub>
    bbe4:	b006      	add	sp, #24
    bbe6:	bd70      	pop	{r4, r5, r6, pc}
    bbe8:	aa02      	add	r2, sp, #8
    bbea:	f000 f905 	bl	bdf8 <__ieee754_rem_pio2>
    bbee:	f000 0403 	and.w	r4, r0, #3
    bbf2:	2c01      	cmp	r4, #1
    bbf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bbf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bbfc:	d013      	beq.n	bc26 <cos+0x5e>
    bbfe:	2c02      	cmp	r4, #2
    bc00:	d00b      	beq.n	bc1a <cos+0x52>
    bc02:	b1a4      	cbz	r4, bc2e <cos+0x66>
    bc04:	2401      	movs	r4, #1
    bc06:	9400      	str	r4, [sp, #0]
    bc08:	f001 f816 	bl	cc38 <__kernel_sin>
    bc0c:	e7ea      	b.n	bbe4 <cos+0x1c>
    bc0e:	2200      	movs	r2, #0
    bc10:	2300      	movs	r3, #0
    bc12:	f000 fb11 	bl	c238 <__kernel_cos>
    bc16:	b006      	add	sp, #24
    bc18:	bd70      	pop	{r4, r5, r6, pc}
    bc1a:	f000 fb0d 	bl	c238 <__kernel_cos>
    bc1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    bc22:	b006      	add	sp, #24
    bc24:	bd70      	pop	{r4, r5, r6, pc}
    bc26:	9400      	str	r4, [sp, #0]
    bc28:	f001 f806 	bl	cc38 <__kernel_sin>
    bc2c:	e7f7      	b.n	bc1e <cos+0x56>
    bc2e:	f000 fb03 	bl	c238 <__kernel_cos>
    bc32:	e7d7      	b.n	bbe4 <cos+0x1c>
    bc34:	3fe921fb 	.word	0x3fe921fb
    bc38:	7fefffff 	.word	0x7fefffff
    bc3c:	ffffffff 	.word	0xffffffff

0000bc40 <floor>:
    bc40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc44:	f3c1 570a 	ubfx	r7, r1, #20, #11
    bc48:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    bc4c:	2e13      	cmp	r6, #19
    bc4e:	4602      	mov	r2, r0
    bc50:	460b      	mov	r3, r1
    bc52:	4604      	mov	r4, r0
    bc54:	460d      	mov	r5, r1
    bc56:	4689      	mov	r9, r1
    bc58:	468a      	mov	sl, r1
    bc5a:	4680      	mov	r8, r0
    bc5c:	dc1c      	bgt.n	bc98 <floor+0x58>
    bc5e:	2e00      	cmp	r6, #0
    bc60:	db40      	blt.n	bce4 <floor+0xa4>
    bc62:	4f3d      	ldr	r7, [pc, #244]	; (bd58 <floor+0x118>)
    bc64:	4137      	asrs	r7, r6
    bc66:	ea07 0c01 	and.w	ip, r7, r1
    bc6a:	ea5c 0c00 	orrs.w	ip, ip, r0
    bc6e:	d018      	beq.n	bca2 <floor+0x62>
    bc70:	a337      	add	r3, pc, #220	; (adr r3, bd50 <floor+0x110>)
    bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc76:	f001 f95f 	bl	cf38 <__adddf3>
    bc7a:	2200      	movs	r2, #0
    bc7c:	2300      	movs	r3, #0
    bc7e:	f001 fd9d 	bl	d7bc <__aeabi_dcmpgt>
    bc82:	b128      	cbz	r0, bc90 <floor+0x50>
    bc84:	2d00      	cmp	r5, #0
    bc86:	db42      	blt.n	bd0e <floor+0xce>
    bc88:	ea2a 0907 	bic.w	r9, sl, r7
    bc8c:	f04f 0800 	mov.w	r8, #0
    bc90:	4640      	mov	r0, r8
    bc92:	4649      	mov	r1, r9
    bc94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc98:	2e33      	cmp	r6, #51	; 0x33
    bc9a:	dd06      	ble.n	bcaa <floor+0x6a>
    bc9c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    bca0:	d031      	beq.n	bd06 <floor+0xc6>
    bca2:	4610      	mov	r0, r2
    bca4:	4619      	mov	r1, r3
    bca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcaa:	f2a7 4c13 	subw	ip, r7, #1043	; 0x413
    bcae:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    bcb2:	fa2b fb0c 	lsr.w	fp, fp, ip
    bcb6:	ea1b 0f00 	tst.w	fp, r0
    bcba:	d0f2      	beq.n	bca2 <floor+0x62>
    bcbc:	a324      	add	r3, pc, #144	; (adr r3, bd50 <floor+0x110>)
    bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    bcc2:	f001 f939 	bl	cf38 <__adddf3>
    bcc6:	2200      	movs	r2, #0
    bcc8:	2300      	movs	r3, #0
    bcca:	f001 fd77 	bl	d7bc <__aeabi_dcmpgt>
    bcce:	2800      	cmp	r0, #0
    bcd0:	d0de      	beq.n	bc90 <floor+0x50>
    bcd2:	2d00      	cmp	r5, #0
    bcd4:	db22      	blt.n	bd1c <floor+0xdc>
    bcd6:	ea28 080b 	bic.w	r8, r8, fp
    bcda:	46d1      	mov	r9, sl
    bcdc:	4640      	mov	r0, r8
    bcde:	4649      	mov	r1, r9
    bce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bce4:	a31a      	add	r3, pc, #104	; (adr r3, bd50 <floor+0x110>)
    bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
    bcea:	f001 f925 	bl	cf38 <__adddf3>
    bcee:	2200      	movs	r2, #0
    bcf0:	2300      	movs	r3, #0
    bcf2:	f001 fd63 	bl	d7bc <__aeabi_dcmpgt>
    bcf6:	2800      	cmp	r0, #0
    bcf8:	d0ca      	beq.n	bc90 <floor+0x50>
    bcfa:	2d00      	cmp	r5, #0
    bcfc:	db1c      	blt.n	bd38 <floor+0xf8>
    bcfe:	f04f 0800 	mov.w	r8, #0
    bd02:	46c1      	mov	r9, r8
    bd04:	e7c4      	b.n	bc90 <floor+0x50>
    bd06:	f001 f917 	bl	cf38 <__adddf3>
    bd0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd0e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    bd12:	fa4a f606 	asr.w	r6, sl, r6
    bd16:	eb06 0a05 	add.w	sl, r6, r5
    bd1a:	e7b5      	b.n	bc88 <floor+0x48>
    bd1c:	2e14      	cmp	r6, #20
    bd1e:	d014      	beq.n	bd4a <floor+0x10a>
    bd20:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
    bd24:	2301      	movs	r3, #1
    bd26:	3703      	adds	r7, #3
    bd28:	fa03 f707 	lsl.w	r7, r3, r7
    bd2c:	eb17 0804 	adds.w	r8, r7, r4
    bd30:	bf28      	it	cs
    bd32:	eb05 0a03 	addcs.w	sl, r5, r3
    bd36:	e7ce      	b.n	bcd6 <floor+0x96>
    bd38:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
    bd3c:	4b07      	ldr	r3, [pc, #28]	; (bd5c <floor+0x11c>)
    bd3e:	4322      	orrs	r2, r4
    bd40:	bf18      	it	ne
    bd42:	4699      	movne	r9, r3
    bd44:	f04f 0800 	mov.w	r8, #0
    bd48:	e7a2      	b.n	bc90 <floor+0x50>
    bd4a:	f105 0a01 	add.w	sl, r5, #1
    bd4e:	e7c2      	b.n	bcd6 <floor+0x96>
    bd50:	8800759c 	.word	0x8800759c
    bd54:	7e37e43c 	.word	0x7e37e43c
    bd58:	000fffff 	.word	0x000fffff
    bd5c:	bff00000 	.word	0xbff00000

0000bd60 <sin>:
    bd60:	b570      	push	{r4, r5, r6, lr}
    bd62:	4e22      	ldr	r6, [pc, #136]	; (bdec <sin+0x8c>)
    bd64:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    bd68:	42b4      	cmp	r4, r6
    bd6a:	b086      	sub	sp, #24
    bd6c:	4602      	mov	r2, r0
    bd6e:	460b      	mov	r3, r1
    bd70:	dd1a      	ble.n	bda8 <sin+0x48>
    bd72:	4d1f      	ldr	r5, [pc, #124]	; (bdf0 <sin+0x90>)
    bd74:	42ac      	cmp	r4, r5
    bd76:	dd03      	ble.n	bd80 <sin+0x20>
    bd78:	f001 f8dc 	bl	cf34 <__aeabi_dsub>
    bd7c:	b006      	add	sp, #24
    bd7e:	bd70      	pop	{r4, r5, r6, pc}
    bd80:	aa02      	add	r2, sp, #8
    bd82:	f000 f839 	bl	bdf8 <__ieee754_rem_pio2>
    bd86:	f000 0003 	and.w	r0, r0, #3
    bd8a:	2801      	cmp	r0, #1
    bd8c:	d01d      	beq.n	bdca <sin+0x6a>
    bd8e:	2802      	cmp	r0, #2
    bd90:	d012      	beq.n	bdb8 <sin+0x58>
    bd92:	b308      	cbz	r0, bdd8 <sin+0x78>
    bd94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bd98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bd9c:	f000 fa4c 	bl	c238 <__kernel_cos>
    bda0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    bda4:	b006      	add	sp, #24
    bda6:	bd70      	pop	{r4, r5, r6, pc}
    bda8:	2300      	movs	r3, #0
    bdaa:	9300      	str	r3, [sp, #0]
    bdac:	2200      	movs	r2, #0
    bdae:	2300      	movs	r3, #0
    bdb0:	f000 ff42 	bl	cc38 <__kernel_sin>
    bdb4:	b006      	add	sp, #24
    bdb6:	bd70      	pop	{r4, r5, r6, pc}
    bdb8:	2401      	movs	r4, #1
    bdba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bdbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bdc2:	9400      	str	r4, [sp, #0]
    bdc4:	f000 ff38 	bl	cc38 <__kernel_sin>
    bdc8:	e7ea      	b.n	bda0 <sin+0x40>
    bdca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bdce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bdd2:	f000 fa31 	bl	c238 <__kernel_cos>
    bdd6:	e7d1      	b.n	bd7c <sin+0x1c>
    bdd8:	2401      	movs	r4, #1
    bdda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bdde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bde2:	9400      	str	r4, [sp, #0]
    bde4:	f000 ff28 	bl	cc38 <__kernel_sin>
    bde8:	e7c8      	b.n	bd7c <sin+0x1c>
    bdea:	bf00      	nop
    bdec:	3fe921fb 	.word	0x3fe921fb
    bdf0:	7fefffff 	.word	0x7fefffff
    bdf4:	ffffffff 	.word	0xffffffff

0000bdf8 <__ieee754_rem_pio2>:
    bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bdfc:	4b96      	ldr	r3, [pc, #600]	; (c058 <__ieee754_rem_pio2+0x260>)
    bdfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    be02:	429e      	cmp	r6, r3
    be04:	b091      	sub	sp, #68	; 0x44
    be06:	4604      	mov	r4, r0
    be08:	460d      	mov	r5, r1
    be0a:	468b      	mov	fp, r1
    be0c:	4690      	mov	r8, r2
    be0e:	f340 8081 	ble.w	bf14 <__ieee754_rem_pio2+0x11c>
    be12:	4b92      	ldr	r3, [pc, #584]	; (c05c <__ieee754_rem_pio2+0x264>)
    be14:	429e      	cmp	r6, r3
    be16:	dc26      	bgt.n	be66 <__ieee754_rem_pio2+0x6e>
    be18:	2900      	cmp	r1, #0
    be1a:	a385      	add	r3, pc, #532	; (adr r3, c030 <__ieee754_rem_pio2+0x238>)
    be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    be20:	f340 81a0 	ble.w	c164 <__ieee754_rem_pio2+0x36c>
    be24:	f001 f886 	bl	cf34 <__aeabi_dsub>
    be28:	4b8d      	ldr	r3, [pc, #564]	; (c060 <__ieee754_rem_pio2+0x268>)
    be2a:	429e      	cmp	r6, r3
    be2c:	4604      	mov	r4, r0
    be2e:	460d      	mov	r5, r1
    be30:	f000 8085 	beq.w	bf3e <__ieee754_rem_pio2+0x146>
    be34:	a380      	add	r3, pc, #512	; (adr r3, c038 <__ieee754_rem_pio2+0x240>)
    be36:	e9d3 2300 	ldrd	r2, r3, [r3]
    be3a:	f001 f87b 	bl	cf34 <__aeabi_dsub>
    be3e:	4602      	mov	r2, r0
    be40:	460b      	mov	r3, r1
    be42:	e9c8 2300 	strd	r2, r3, [r8]
    be46:	4620      	mov	r0, r4
    be48:	4629      	mov	r1, r5
    be4a:	f001 f873 	bl	cf34 <__aeabi_dsub>
    be4e:	a37a      	add	r3, pc, #488	; (adr r3, c038 <__ieee754_rem_pio2+0x240>)
    be50:	e9d3 2300 	ldrd	r2, r3, [r3]
    be54:	f001 f86e 	bl	cf34 <__aeabi_dsub>
    be58:	2701      	movs	r7, #1
    be5a:	e9c8 0102 	strd	r0, r1, [r8, #8]
    be5e:	4638      	mov	r0, r7
    be60:	b011      	add	sp, #68	; 0x44
    be62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be66:	4b7f      	ldr	r3, [pc, #508]	; (c064 <__ieee754_rem_pio2+0x26c>)
    be68:	429e      	cmp	r6, r3
    be6a:	f340 8085 	ble.w	bf78 <__ieee754_rem_pio2+0x180>
    be6e:	4b7e      	ldr	r3, [pc, #504]	; (c068 <__ieee754_rem_pio2+0x270>)
    be70:	429e      	cmp	r6, r3
    be72:	dc5a      	bgt.n	bf2a <__ieee754_rem_pio2+0x132>
    be74:	ea4f 5926 	mov.w	r9, r6, asr #20
    be78:	f2a9 4916 	subw	r9, r9, #1046	; 0x416
    be7c:	eba6 5509 	sub.w	r5, r6, r9, lsl #20
    be80:	4629      	mov	r1, r5
    be82:	4604      	mov	r4, r0
    be84:	f001 fca4 	bl	d7d0 <__aeabi_d2iz>
    be88:	f001 f9a2 	bl	d1d0 <__aeabi_i2d>
    be8c:	4606      	mov	r6, r0
    be8e:	460f      	mov	r7, r1
    be90:	4602      	mov	r2, r0
    be92:	460b      	mov	r3, r1
    be94:	4620      	mov	r0, r4
    be96:	4629      	mov	r1, r5
    be98:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    be9c:	f001 f84a 	bl	cf34 <__aeabi_dsub>
    bea0:	2200      	movs	r2, #0
    bea2:	4b72      	ldr	r3, [pc, #456]	; (c06c <__ieee754_rem_pio2+0x274>)
    bea4:	f001 f9fa 	bl	d29c <__aeabi_dmul>
    bea8:	460f      	mov	r7, r1
    beaa:	4606      	mov	r6, r0
    beac:	f001 fc90 	bl	d7d0 <__aeabi_d2iz>
    beb0:	f001 f98e 	bl	d1d0 <__aeabi_i2d>
    beb4:	4602      	mov	r2, r0
    beb6:	460b      	mov	r3, r1
    beb8:	4604      	mov	r4, r0
    beba:	460d      	mov	r5, r1
    bebc:	4630      	mov	r0, r6
    bebe:	4639      	mov	r1, r7
    bec0:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    bec4:	f001 f836 	bl	cf34 <__aeabi_dsub>
    bec8:	2200      	movs	r2, #0
    beca:	4b68      	ldr	r3, [pc, #416]	; (c06c <__ieee754_rem_pio2+0x274>)
    becc:	f001 f9e6 	bl	d29c <__aeabi_dmul>
    bed0:	2200      	movs	r2, #0
    bed2:	2300      	movs	r3, #0
    bed4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    bed8:	f001 fc48 	bl	d76c <__aeabi_dcmpeq>
    bedc:	2800      	cmp	r0, #0
    bede:	f000 816d 	beq.w	c1bc <__ieee754_rem_pio2+0x3c4>
    bee2:	2300      	movs	r3, #0
    bee4:	4620      	mov	r0, r4
    bee6:	4629      	mov	r1, r5
    bee8:	2200      	movs	r2, #0
    beea:	f001 fc3f 	bl	d76c <__aeabi_dcmpeq>
    beee:	2800      	cmp	r0, #0
    bef0:	bf14      	ite	ne
    bef2:	2301      	movne	r3, #1
    bef4:	2302      	moveq	r3, #2
    bef6:	2202      	movs	r2, #2
    bef8:	495d      	ldr	r1, [pc, #372]	; (c070 <__ieee754_rem_pio2+0x278>)
    befa:	9200      	str	r2, [sp, #0]
    befc:	9101      	str	r1, [sp, #4]
    befe:	464a      	mov	r2, r9
    bf00:	a80a      	add	r0, sp, #40	; 0x28
    bf02:	4641      	mov	r1, r8
    bf04:	f000 fac0 	bl	c488 <__kernel_rem_pio2>
    bf08:	f1bb 0f00 	cmp.w	fp, #0
    bf0c:	f2c0 8148 	blt.w	c1a0 <__ieee754_rem_pio2+0x3a8>
    bf10:	4607      	mov	r7, r0
    bf12:	e006      	b.n	bf22 <__ieee754_rem_pio2+0x12a>
    bf14:	2200      	movs	r2, #0
    bf16:	2300      	movs	r3, #0
    bf18:	e9c8 4500 	strd	r4, r5, [r8]
    bf1c:	e9c8 2302 	strd	r2, r3, [r8, #8]
    bf20:	2700      	movs	r7, #0
    bf22:	4638      	mov	r0, r7
    bf24:	b011      	add	sp, #68	; 0x44
    bf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf2a:	4602      	mov	r2, r0
    bf2c:	460b      	mov	r3, r1
    bf2e:	f001 f801 	bl	cf34 <__aeabi_dsub>
    bf32:	2700      	movs	r7, #0
    bf34:	e9c8 0102 	strd	r0, r1, [r8, #8]
    bf38:	e9c8 0100 	strd	r0, r1, [r8]
    bf3c:	e7f1      	b.n	bf22 <__ieee754_rem_pio2+0x12a>
    bf3e:	a340      	add	r3, pc, #256	; (adr r3, c040 <__ieee754_rem_pio2+0x248>)
    bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf44:	f000 fff6 	bl	cf34 <__aeabi_dsub>
    bf48:	a33f      	add	r3, pc, #252	; (adr r3, c048 <__ieee754_rem_pio2+0x250>)
    bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf4e:	4604      	mov	r4, r0
    bf50:	460d      	mov	r5, r1
    bf52:	f000 ffef 	bl	cf34 <__aeabi_dsub>
    bf56:	4602      	mov	r2, r0
    bf58:	460b      	mov	r3, r1
    bf5a:	e9c8 2300 	strd	r2, r3, [r8]
    bf5e:	4620      	mov	r0, r4
    bf60:	4629      	mov	r1, r5
    bf62:	f000 ffe7 	bl	cf34 <__aeabi_dsub>
    bf66:	a338      	add	r3, pc, #224	; (adr r3, c048 <__ieee754_rem_pio2+0x250>)
    bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf6c:	f000 ffe2 	bl	cf34 <__aeabi_dsub>
    bf70:	2701      	movs	r7, #1
    bf72:	e9c8 0102 	strd	r0, r1, [r8, #8]
    bf76:	e7d4      	b.n	bf22 <__ieee754_rem_pio2+0x12a>
    bf78:	f000 ff16 	bl	cda8 <fabs>
    bf7c:	a334      	add	r3, pc, #208	; (adr r3, c050 <__ieee754_rem_pio2+0x258>)
    bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf82:	4604      	mov	r4, r0
    bf84:	460d      	mov	r5, r1
    bf86:	f001 f989 	bl	d29c <__aeabi_dmul>
    bf8a:	2200      	movs	r2, #0
    bf8c:	4b39      	ldr	r3, [pc, #228]	; (c074 <__ieee754_rem_pio2+0x27c>)
    bf8e:	f000 ffd3 	bl	cf38 <__adddf3>
    bf92:	f001 fc1d 	bl	d7d0 <__aeabi_d2iz>
    bf96:	4607      	mov	r7, r0
    bf98:	f001 f91a 	bl	d1d0 <__aeabi_i2d>
    bf9c:	a324      	add	r3, pc, #144	; (adr r3, c030 <__ieee754_rem_pio2+0x238>)
    bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    bfa2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    bfa6:	f001 f979 	bl	d29c <__aeabi_dmul>
    bfaa:	4602      	mov	r2, r0
    bfac:	460b      	mov	r3, r1
    bfae:	4620      	mov	r0, r4
    bfb0:	4629      	mov	r1, r5
    bfb2:	f000 ffbf 	bl	cf34 <__aeabi_dsub>
    bfb6:	a320      	add	r3, pc, #128	; (adr r3, c038 <__ieee754_rem_pio2+0x240>)
    bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    bfbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    bfc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    bfc4:	f001 f96a 	bl	d29c <__aeabi_dmul>
    bfc8:	2f1f      	cmp	r7, #31
    bfca:	e9cd 0104 	strd	r0, r1, [sp, #16]
    bfce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bfd2:	dc53      	bgt.n	c07c <__ieee754_rem_pio2+0x284>
    bfd4:	4b28      	ldr	r3, [pc, #160]	; (c078 <__ieee754_rem_pio2+0x280>)
    bfd6:	1e7a      	subs	r2, r7, #1
    bfd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bfdc:	42b3      	cmp	r3, r6
    bfde:	d04d      	beq.n	c07c <__ieee754_rem_pio2+0x284>
    bfe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bfe4:	f000 ffa6 	bl	cf34 <__aeabi_dsub>
    bfe8:	4604      	mov	r4, r0
    bfea:	460d      	mov	r5, r1
    bfec:	e9c8 4500 	strd	r4, r5, [r8]
    bff0:	4622      	mov	r2, r4
    bff2:	462b      	mov	r3, r5
    bff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bff8:	f000 ff9c 	bl	cf34 <__aeabi_dsub>
    bffc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    c000:	f000 ff98 	bl	cf34 <__aeabi_dsub>
    c004:	f1bb 0f00 	cmp.w	fp, #0
    c008:	e9c8 0102 	strd	r0, r1, [r8, #8]
    c00c:	da89      	bge.n	bf22 <__ieee754_rem_pio2+0x12a>
    c00e:	4626      	mov	r6, r4
    c010:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    c014:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
    c018:	427f      	negs	r7, r7
    c01a:	f8c8 6000 	str.w	r6, [r8]
    c01e:	f8c8 4004 	str.w	r4, [r8, #4]
    c022:	f8c8 0008 	str.w	r0, [r8, #8]
    c026:	f8c8 300c 	str.w	r3, [r8, #12]
    c02a:	e77a      	b.n	bf22 <__ieee754_rem_pio2+0x12a>
    c02c:	f3af 8000 	nop.w
    c030:	54400000 	.word	0x54400000
    c034:	3ff921fb 	.word	0x3ff921fb
    c038:	1a626331 	.word	0x1a626331
    c03c:	3dd0b461 	.word	0x3dd0b461
    c040:	1a600000 	.word	0x1a600000
    c044:	3dd0b461 	.word	0x3dd0b461
    c048:	2e037073 	.word	0x2e037073
    c04c:	3ba3198a 	.word	0x3ba3198a
    c050:	6dc9c883 	.word	0x6dc9c883
    c054:	3fe45f30 	.word	0x3fe45f30
    c058:	3fe921fb 	.word	0x3fe921fb
    c05c:	4002d97b 	.word	0x4002d97b
    c060:	3ff921fb 	.word	0x3ff921fb
    c064:	413921fb 	.word	0x413921fb
    c068:	7fefffff 	.word	0x7fefffff
    c06c:	41700000 	.word	0x41700000
    c070:	000157c0 	.word	0x000157c0
    c074:	3fe00000 	.word	0x3fe00000
    c078:	00015740 	.word	0x00015740
    c07c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    c080:	f000 ff58 	bl	cf34 <__aeabi_dsub>
    c084:	1536      	asrs	r6, r6, #20
    c086:	f3c1 530a 	ubfx	r3, r1, #20, #11
    c08a:	1af3      	subs	r3, r6, r3
    c08c:	4604      	mov	r4, r0
    c08e:	460d      	mov	r5, r1
    c090:	2b10      	cmp	r3, #16
    c092:	e9c8 4500 	strd	r4, r5, [r8]
    c096:	ddab      	ble.n	bff0 <__ieee754_rem_pio2+0x1f8>
    c098:	a35b      	add	r3, pc, #364	; (adr r3, c208 <__ieee754_rem_pio2+0x410>)
    c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c09e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c0a2:	f001 f8fb 	bl	d29c <__aeabi_dmul>
    c0a6:	4604      	mov	r4, r0
    c0a8:	460d      	mov	r5, r1
    c0aa:	4622      	mov	r2, r4
    c0ac:	462b      	mov	r3, r5
    c0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c0b2:	f000 ff3f 	bl	cf34 <__aeabi_dsub>
    c0b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    c0ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    c0be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c0c2:	f000 ff37 	bl	cf34 <__aeabi_dsub>
    c0c6:	4622      	mov	r2, r4
    c0c8:	462b      	mov	r3, r5
    c0ca:	f000 ff33 	bl	cf34 <__aeabi_dsub>
    c0ce:	a350      	add	r3, pc, #320	; (adr r3, c210 <__ieee754_rem_pio2+0x418>)
    c0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c0d4:	4604      	mov	r4, r0
    c0d6:	460d      	mov	r5, r1
    c0d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c0dc:	f001 f8de 	bl	d29c <__aeabi_dmul>
    c0e0:	4622      	mov	r2, r4
    c0e2:	462b      	mov	r3, r5
    c0e4:	f000 ff26 	bl	cf34 <__aeabi_dsub>
    c0e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c0ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    c0f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    c0f4:	f000 ff1e 	bl	cf34 <__aeabi_dsub>
    c0f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
    c0fc:	1af6      	subs	r6, r6, r3
    c0fe:	4604      	mov	r4, r0
    c100:	460d      	mov	r5, r1
    c102:	2e31      	cmp	r6, #49	; 0x31
    c104:	e9c8 4500 	strd	r4, r5, [r8]
    c108:	dd78      	ble.n	c1fc <__ieee754_rem_pio2+0x404>
    c10a:	a343      	add	r3, pc, #268	; (adr r3, c218 <__ieee754_rem_pio2+0x420>)
    c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c110:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c114:	f001 f8c2 	bl	d29c <__aeabi_dmul>
    c118:	4604      	mov	r4, r0
    c11a:	460d      	mov	r5, r1
    c11c:	4622      	mov	r2, r4
    c11e:	462b      	mov	r3, r5
    c120:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    c124:	f000 ff06 	bl	cf34 <__aeabi_dsub>
    c128:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c12c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c130:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    c134:	f000 fefe 	bl	cf34 <__aeabi_dsub>
    c138:	4622      	mov	r2, r4
    c13a:	462b      	mov	r3, r5
    c13c:	f000 fefa 	bl	cf34 <__aeabi_dsub>
    c140:	a337      	add	r3, pc, #220	; (adr r3, c220 <__ieee754_rem_pio2+0x428>)
    c142:	e9d3 2300 	ldrd	r2, r3, [r3]
    c146:	4604      	mov	r4, r0
    c148:	460d      	mov	r5, r1
    c14a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c14e:	f001 f8a5 	bl	d29c <__aeabi_dmul>
    c152:	4622      	mov	r2, r4
    c154:	462b      	mov	r3, r5
    c156:	f000 feed 	bl	cf34 <__aeabi_dsub>
    c15a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c162:	e73d      	b.n	bfe0 <__ieee754_rem_pio2+0x1e8>
    c164:	f000 fee8 	bl	cf38 <__adddf3>
    c168:	4b31      	ldr	r3, [pc, #196]	; (c230 <__ieee754_rem_pio2+0x438>)
    c16a:	429e      	cmp	r6, r3
    c16c:	4604      	mov	r4, r0
    c16e:	460d      	mov	r5, r1
    c170:	d026      	beq.n	c1c0 <__ieee754_rem_pio2+0x3c8>
    c172:	a32d      	add	r3, pc, #180	; (adr r3, c228 <__ieee754_rem_pio2+0x430>)
    c174:	e9d3 2300 	ldrd	r2, r3, [r3]
    c178:	f000 fede 	bl	cf38 <__adddf3>
    c17c:	4602      	mov	r2, r0
    c17e:	460b      	mov	r3, r1
    c180:	e9c8 2300 	strd	r2, r3, [r8]
    c184:	4620      	mov	r0, r4
    c186:	4629      	mov	r1, r5
    c188:	f000 fed4 	bl	cf34 <__aeabi_dsub>
    c18c:	a326      	add	r3, pc, #152	; (adr r3, c228 <__ieee754_rem_pio2+0x430>)
    c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c192:	f000 fed1 	bl	cf38 <__adddf3>
    c196:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    c19a:	e9c8 0102 	strd	r0, r1, [r8, #8]
    c19e:	e6c0      	b.n	bf22 <__ieee754_rem_pio2+0x12a>
    c1a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c1a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    c1a8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    c1ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    c1b0:	4247      	negs	r7, r0
    c1b2:	f8c8 2004 	str.w	r2, [r8, #4]
    c1b6:	f8c8 300c 	str.w	r3, [r8, #12]
    c1ba:	e6b2      	b.n	bf22 <__ieee754_rem_pio2+0x12a>
    c1bc:	2303      	movs	r3, #3
    c1be:	e69a      	b.n	bef6 <__ieee754_rem_pio2+0xfe>
    c1c0:	a311      	add	r3, pc, #68	; (adr r3, c208 <__ieee754_rem_pio2+0x410>)
    c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c1c6:	f000 feb7 	bl	cf38 <__adddf3>
    c1ca:	a311      	add	r3, pc, #68	; (adr r3, c210 <__ieee754_rem_pio2+0x418>)
    c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    c1d0:	4604      	mov	r4, r0
    c1d2:	460d      	mov	r5, r1
    c1d4:	f000 feb0 	bl	cf38 <__adddf3>
    c1d8:	4602      	mov	r2, r0
    c1da:	460b      	mov	r3, r1
    c1dc:	e9c8 2300 	strd	r2, r3, [r8]
    c1e0:	4620      	mov	r0, r4
    c1e2:	4629      	mov	r1, r5
    c1e4:	f000 fea6 	bl	cf34 <__aeabi_dsub>
    c1e8:	a309      	add	r3, pc, #36	; (adr r3, c210 <__ieee754_rem_pio2+0x418>)
    c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    c1ee:	f000 fea3 	bl	cf38 <__adddf3>
    c1f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    c1f6:	e9c8 0102 	strd	r0, r1, [r8, #8]
    c1fa:	e692      	b.n	bf22 <__ieee754_rem_pio2+0x12a>
    c1fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    c200:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c204:	e6f4      	b.n	bff0 <__ieee754_rem_pio2+0x1f8>
    c206:	bf00      	nop
    c208:	1a600000 	.word	0x1a600000
    c20c:	3dd0b461 	.word	0x3dd0b461
    c210:	2e037073 	.word	0x2e037073
    c214:	3ba3198a 	.word	0x3ba3198a
    c218:	2e000000 	.word	0x2e000000
    c21c:	3ba3198a 	.word	0x3ba3198a
    c220:	252049c1 	.word	0x252049c1
    c224:	397b839a 	.word	0x397b839a
    c228:	1a626331 	.word	0x1a626331
    c22c:	3dd0b461 	.word	0x3dd0b461
    c230:	3ff921fb 	.word	0x3ff921fb
    c234:	f3af 8000 	nop.w

0000c238 <__kernel_cos>:
    c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c23c:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
    c240:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
    c244:	b085      	sub	sp, #20
    c246:	4606      	mov	r6, r0
    c248:	460f      	mov	r7, r1
    c24a:	4692      	mov	sl, r2
    c24c:	469b      	mov	fp, r3
    c24e:	da6b      	bge.n	c328 <__kernel_cos+0xf0>
    c250:	f001 fabe 	bl	d7d0 <__aeabi_d2iz>
    c254:	2800      	cmp	r0, #0
    c256:	f000 80eb 	beq.w	c430 <__kernel_cos+0x1f8>
    c25a:	4632      	mov	r2, r6
    c25c:	463b      	mov	r3, r7
    c25e:	4630      	mov	r0, r6
    c260:	4639      	mov	r1, r7
    c262:	f001 f81b 	bl	d29c <__aeabi_dmul>
    c266:	a376      	add	r3, pc, #472	; (adr r3, c440 <__kernel_cos+0x208>)
    c268:	e9d3 2300 	ldrd	r2, r3, [r3]
    c26c:	4604      	mov	r4, r0
    c26e:	460d      	mov	r5, r1
    c270:	f001 f814 	bl	d29c <__aeabi_dmul>
    c274:	a374      	add	r3, pc, #464	; (adr r3, c448 <__kernel_cos+0x210>)
    c276:	e9d3 2300 	ldrd	r2, r3, [r3]
    c27a:	f000 fe5d 	bl	cf38 <__adddf3>
    c27e:	4622      	mov	r2, r4
    c280:	462b      	mov	r3, r5
    c282:	f001 f80b 	bl	d29c <__aeabi_dmul>
    c286:	a372      	add	r3, pc, #456	; (adr r3, c450 <__kernel_cos+0x218>)
    c288:	e9d3 2300 	ldrd	r2, r3, [r3]
    c28c:	f000 fe52 	bl	cf34 <__aeabi_dsub>
    c290:	4622      	mov	r2, r4
    c292:	462b      	mov	r3, r5
    c294:	f001 f802 	bl	d29c <__aeabi_dmul>
    c298:	a36f      	add	r3, pc, #444	; (adr r3, c458 <__kernel_cos+0x220>)
    c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c29e:	f000 fe4b 	bl	cf38 <__adddf3>
    c2a2:	4622      	mov	r2, r4
    c2a4:	462b      	mov	r3, r5
    c2a6:	f000 fff9 	bl	d29c <__aeabi_dmul>
    c2aa:	a36d      	add	r3, pc, #436	; (adr r3, c460 <__kernel_cos+0x228>)
    c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    c2b0:	f000 fe40 	bl	cf34 <__aeabi_dsub>
    c2b4:	4622      	mov	r2, r4
    c2b6:	462b      	mov	r3, r5
    c2b8:	f000 fff0 	bl	d29c <__aeabi_dmul>
    c2bc:	a36a      	add	r3, pc, #424	; (adr r3, c468 <__kernel_cos+0x230>)
    c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
    c2c2:	f000 fe39 	bl	cf38 <__adddf3>
    c2c6:	4622      	mov	r2, r4
    c2c8:	462b      	mov	r3, r5
    c2ca:	f000 ffe7 	bl	d29c <__aeabi_dmul>
    c2ce:	e9cd 0100 	strd	r0, r1, [sp]
    c2d2:	4620      	mov	r0, r4
    c2d4:	4629      	mov	r1, r5
    c2d6:	2200      	movs	r2, #0
    c2d8:	4b65      	ldr	r3, [pc, #404]	; (c470 <__kernel_cos+0x238>)
    c2da:	f000 ffdf 	bl	d29c <__aeabi_dmul>
    c2de:	e9dd 2300 	ldrd	r2, r3, [sp]
    c2e2:	4680      	mov	r8, r0
    c2e4:	4689      	mov	r9, r1
    c2e6:	4620      	mov	r0, r4
    c2e8:	4629      	mov	r1, r5
    c2ea:	f000 ffd7 	bl	d29c <__aeabi_dmul>
    c2ee:	4652      	mov	r2, sl
    c2f0:	4604      	mov	r4, r0
    c2f2:	460d      	mov	r5, r1
    c2f4:	465b      	mov	r3, fp
    c2f6:	4630      	mov	r0, r6
    c2f8:	4639      	mov	r1, r7
    c2fa:	f000 ffcf 	bl	d29c <__aeabi_dmul>
    c2fe:	4602      	mov	r2, r0
    c300:	460b      	mov	r3, r1
    c302:	4620      	mov	r0, r4
    c304:	4629      	mov	r1, r5
    c306:	f000 fe15 	bl	cf34 <__aeabi_dsub>
    c30a:	4602      	mov	r2, r0
    c30c:	460b      	mov	r3, r1
    c30e:	4640      	mov	r0, r8
    c310:	4649      	mov	r1, r9
    c312:	f000 fe0f 	bl	cf34 <__aeabi_dsub>
    c316:	4602      	mov	r2, r0
    c318:	460b      	mov	r3, r1
    c31a:	2000      	movs	r0, #0
    c31c:	4955      	ldr	r1, [pc, #340]	; (c474 <__kernel_cos+0x23c>)
    c31e:	f000 fe09 	bl	cf34 <__aeabi_dsub>
    c322:	b005      	add	sp, #20
    c324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c328:	4602      	mov	r2, r0
    c32a:	460b      	mov	r3, r1
    c32c:	f000 ffb6 	bl	d29c <__aeabi_dmul>
    c330:	a343      	add	r3, pc, #268	; (adr r3, c440 <__kernel_cos+0x208>)
    c332:	e9d3 2300 	ldrd	r2, r3, [r3]
    c336:	4604      	mov	r4, r0
    c338:	460d      	mov	r5, r1
    c33a:	f000 ffaf 	bl	d29c <__aeabi_dmul>
    c33e:	a342      	add	r3, pc, #264	; (adr r3, c448 <__kernel_cos+0x210>)
    c340:	e9d3 2300 	ldrd	r2, r3, [r3]
    c344:	f000 fdf8 	bl	cf38 <__adddf3>
    c348:	4622      	mov	r2, r4
    c34a:	462b      	mov	r3, r5
    c34c:	f000 ffa6 	bl	d29c <__aeabi_dmul>
    c350:	a33f      	add	r3, pc, #252	; (adr r3, c450 <__kernel_cos+0x218>)
    c352:	e9d3 2300 	ldrd	r2, r3, [r3]
    c356:	f000 fded 	bl	cf34 <__aeabi_dsub>
    c35a:	4622      	mov	r2, r4
    c35c:	462b      	mov	r3, r5
    c35e:	f000 ff9d 	bl	d29c <__aeabi_dmul>
    c362:	a33d      	add	r3, pc, #244	; (adr r3, c458 <__kernel_cos+0x220>)
    c364:	e9d3 2300 	ldrd	r2, r3, [r3]
    c368:	f000 fde6 	bl	cf38 <__adddf3>
    c36c:	4622      	mov	r2, r4
    c36e:	462b      	mov	r3, r5
    c370:	f000 ff94 	bl	d29c <__aeabi_dmul>
    c374:	a33a      	add	r3, pc, #232	; (adr r3, c460 <__kernel_cos+0x228>)
    c376:	e9d3 2300 	ldrd	r2, r3, [r3]
    c37a:	f000 fddb 	bl	cf34 <__aeabi_dsub>
    c37e:	4622      	mov	r2, r4
    c380:	462b      	mov	r3, r5
    c382:	f000 ff8b 	bl	d29c <__aeabi_dmul>
    c386:	a338      	add	r3, pc, #224	; (adr r3, c468 <__kernel_cos+0x230>)
    c388:	e9d3 2300 	ldrd	r2, r3, [r3]
    c38c:	f000 fdd4 	bl	cf38 <__adddf3>
    c390:	462b      	mov	r3, r5
    c392:	4622      	mov	r2, r4
    c394:	f000 ff82 	bl	d29c <__aeabi_dmul>
    c398:	4b37      	ldr	r3, [pc, #220]	; (c478 <__kernel_cos+0x240>)
    c39a:	4599      	cmp	r9, r3
    c39c:	e9cd 0100 	strd	r0, r1, [sp]
    c3a0:	dd97      	ble.n	c2d2 <__kernel_cos+0x9a>
    c3a2:	4b36      	ldr	r3, [pc, #216]	; (c47c <__kernel_cos+0x244>)
    c3a4:	4599      	cmp	r9, r3
    c3a6:	f04f 0200 	mov.w	r2, #0
    c3aa:	dc39      	bgt.n	c420 <__kernel_cos+0x1e8>
    c3ac:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
    c3b0:	2200      	movs	r2, #0
    c3b2:	2000      	movs	r0, #0
    c3b4:	492f      	ldr	r1, [pc, #188]	; (c474 <__kernel_cos+0x23c>)
    c3b6:	4690      	mov	r8, r2
    c3b8:	4699      	mov	r9, r3
    c3ba:	f000 fdbb 	bl	cf34 <__aeabi_dsub>
    c3be:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c3c2:	4620      	mov	r0, r4
    c3c4:	4629      	mov	r1, r5
    c3c6:	2200      	movs	r2, #0
    c3c8:	4b29      	ldr	r3, [pc, #164]	; (c470 <__kernel_cos+0x238>)
    c3ca:	f000 ff67 	bl	d29c <__aeabi_dmul>
    c3ce:	4642      	mov	r2, r8
    c3d0:	464b      	mov	r3, r9
    c3d2:	f000 fdaf 	bl	cf34 <__aeabi_dsub>
    c3d6:	e9dd 2300 	ldrd	r2, r3, [sp]
    c3da:	4680      	mov	r8, r0
    c3dc:	4689      	mov	r9, r1
    c3de:	4620      	mov	r0, r4
    c3e0:	4629      	mov	r1, r5
    c3e2:	f000 ff5b 	bl	d29c <__aeabi_dmul>
    c3e6:	4652      	mov	r2, sl
    c3e8:	4604      	mov	r4, r0
    c3ea:	460d      	mov	r5, r1
    c3ec:	465b      	mov	r3, fp
    c3ee:	4630      	mov	r0, r6
    c3f0:	4639      	mov	r1, r7
    c3f2:	f000 ff53 	bl	d29c <__aeabi_dmul>
    c3f6:	4602      	mov	r2, r0
    c3f8:	460b      	mov	r3, r1
    c3fa:	4620      	mov	r0, r4
    c3fc:	4629      	mov	r1, r5
    c3fe:	f000 fd99 	bl	cf34 <__aeabi_dsub>
    c402:	4602      	mov	r2, r0
    c404:	460b      	mov	r3, r1
    c406:	4640      	mov	r0, r8
    c408:	4649      	mov	r1, r9
    c40a:	f000 fd93 	bl	cf34 <__aeabi_dsub>
    c40e:	4602      	mov	r2, r0
    c410:	460b      	mov	r3, r1
    c412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c416:	f000 fd8d 	bl	cf34 <__aeabi_dsub>
    c41a:	b005      	add	sp, #20
    c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c420:	4b17      	ldr	r3, [pc, #92]	; (c480 <__kernel_cos+0x248>)
    c422:	f8df 9060 	ldr.w	r9, [pc, #96]	; c484 <__kernel_cos+0x24c>
    c426:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c42a:	f04f 0800 	mov.w	r8, #0
    c42e:	e7c8      	b.n	c3c2 <__kernel_cos+0x18a>
    c430:	4910      	ldr	r1, [pc, #64]	; (c474 <__kernel_cos+0x23c>)
    c432:	2000      	movs	r0, #0
    c434:	b005      	add	sp, #20
    c436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c43a:	bf00      	nop
    c43c:	f3af 8000 	nop.w
    c440:	be8838d4 	.word	0xbe8838d4
    c444:	bda8fae9 	.word	0xbda8fae9
    c448:	bdb4b1c4 	.word	0xbdb4b1c4
    c44c:	3e21ee9e 	.word	0x3e21ee9e
    c450:	809c52ad 	.word	0x809c52ad
    c454:	3e927e4f 	.word	0x3e927e4f
    c458:	19cb1590 	.word	0x19cb1590
    c45c:	3efa01a0 	.word	0x3efa01a0
    c460:	16c15177 	.word	0x16c15177
    c464:	3f56c16c 	.word	0x3f56c16c
    c468:	5555554c 	.word	0x5555554c
    c46c:	3fa55555 	.word	0x3fa55555
    c470:	3fe00000 	.word	0x3fe00000
    c474:	3ff00000 	.word	0x3ff00000
    c478:	3fd33332 	.word	0x3fd33332
    c47c:	3fe90000 	.word	0x3fe90000
    c480:	3fe70000 	.word	0x3fe70000
    c484:	3fd20000 	.word	0x3fd20000

0000c488 <__kernel_rem_pio2>:
    c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c48c:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
    c490:	4c1b      	ldr	r4, [pc, #108]	; (c500 <__kernel_rem_pio2+0x78>)
    c492:	9ea6      	ldr	r6, [sp, #664]	; 0x298
    c494:	4d1b      	ldr	r5, [pc, #108]	; (c504 <__kernel_rem_pio2+0x7c>)
    c496:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    c49a:	940c      	str	r4, [sp, #48]	; 0x30
    c49c:	1ed4      	subs	r4, r2, #3
    c49e:	fb85 6504 	smull	r6, r5, r5, r4
    c4a2:	17e4      	asrs	r4, r4, #31
    c4a4:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
    c4a8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    c4ac:	940e      	str	r4, [sp, #56]	; 0x38
    c4ae:	4699      	mov	r9, r3
    c4b0:	9007      	str	r0, [sp, #28]
    c4b2:	43e3      	mvns	r3, r4
    c4b4:	910b      	str	r1, [sp, #44]	; 0x2c
    c4b6:	980e      	ldr	r0, [sp, #56]	; 0x38
    c4b8:	990c      	ldr	r1, [sp, #48]	; 0x30
    c4ba:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
    c4be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c4c2:	9404      	str	r4, [sp, #16]
    c4c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c4c8:	1b06      	subs	r6, r0, r4
    c4ca:	1864      	adds	r4, r4, r1
    c4cc:	930a      	str	r3, [sp, #40]	; 0x28
    c4ce:	d41b      	bmi.n	c508 <__kernel_rem_pio2+0x80>
    c4d0:	98a7      	ldr	r0, [sp, #668]	; 0x29c
    c4d2:	4434      	add	r4, r6
    c4d4:	3401      	adds	r4, #1
    c4d6:	f10d 0888 	add.w	r8, sp, #136	; 0x88
    c4da:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    c4de:	2700      	movs	r7, #0
    c4e0:	e009      	b.n	c4f6 <__kernel_rem_pio2+0x6e>
    c4e2:	59e8      	ldr	r0, [r5, r7]
    c4e4:	f000 fe74 	bl	d1d0 <__aeabi_i2d>
    c4e8:	3601      	adds	r6, #1
    c4ea:	42a6      	cmp	r6, r4
    c4ec:	e9e8 0102 	strd	r0, r1, [r8, #8]!
    c4f0:	f107 0704 	add.w	r7, r7, #4
    c4f4:	d008      	beq.n	c508 <__kernel_rem_pio2+0x80>
    c4f6:	2e00      	cmp	r6, #0
    c4f8:	daf3      	bge.n	c4e2 <__kernel_rem_pio2+0x5a>
    c4fa:	2000      	movs	r0, #0
    c4fc:	2100      	movs	r1, #0
    c4fe:	e7f3      	b.n	c4e8 <__kernel_rem_pio2+0x60>
    c500:	000158c8 	.word	0x000158c8
    c504:	2aaaaaab 	.word	0x2aaaaaab
    c508:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c50a:	2c00      	cmp	r4, #0
    c50c:	db2d      	blt.n	c56a <__kernel_rem_pio2+0xe2>
    c50e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c510:	ae74      	add	r6, sp, #464	; 0x1d0
    c512:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
    c516:	a824      	add	r0, sp, #144	; 0x90
    c518:	eb00 0ac9 	add.w	sl, r0, r9, lsl #3
    c51c:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
    c520:	f8cd b00c 	str.w	fp, [sp, #12]
    c524:	9c04      	ldr	r4, [sp, #16]
    c526:	2c00      	cmp	r4, #0
    c528:	f2c0 8185 	blt.w	c836 <__kernel_rem_pio2+0x3ae>
    c52c:	9e07      	ldr	r6, [sp, #28]
    c52e:	4657      	mov	r7, sl
    c530:	f1a6 0b08 	sub.w	fp, r6, #8
    c534:	2400      	movs	r4, #0
    c536:	2500      	movs	r5, #0
    c538:	2600      	movs	r6, #0
    c53a:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
    c53e:	e9fb 0102 	ldrd	r0, r1, [fp, #8]!
    c542:	f000 feab 	bl	d29c <__aeabi_dmul>
    c546:	4602      	mov	r2, r0
    c548:	460b      	mov	r3, r1
    c54a:	4620      	mov	r0, r4
    c54c:	4629      	mov	r1, r5
    c54e:	f000 fcf3 	bl	cf38 <__adddf3>
    c552:	3601      	adds	r6, #1
    c554:	454e      	cmp	r6, r9
    c556:	4604      	mov	r4, r0
    c558:	460d      	mov	r5, r1
    c55a:	d1ee      	bne.n	c53a <__kernel_rem_pio2+0xb2>
    c55c:	e9e8 4502 	strd	r4, r5, [r8, #8]!
    c560:	9e03      	ldr	r6, [sp, #12]
    c562:	45b0      	cmp	r8, r6
    c564:	f10a 0a08 	add.w	sl, sl, #8
    c568:	d1dc      	bne.n	c524 <__kernel_rem_pio2+0x9c>
    c56a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    c56c:	9603      	str	r6, [sp, #12]
    c56e:	ac10      	add	r4, sp, #64	; 0x40
    c570:	9402      	str	r4, [sp, #8]
    c572:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    c576:	940f      	str	r4, [sp, #60]	; 0x3c
    c578:	9c03      	ldr	r4, [sp, #12]
    c57a:	9e03      	ldr	r6, [sp, #12]
    c57c:	00e4      	lsls	r4, r4, #3
    c57e:	ab9c      	add	r3, sp, #624	; 0x270
    c580:	4423      	add	r3, r4
    c582:	2e00      	cmp	r6, #0
    c584:	9406      	str	r4, [sp, #24]
    c586:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
    c58a:	dd2e      	ble.n	c5ea <__kernel_rem_pio2+0x162>
    c58c:	9e06      	ldr	r6, [sp, #24]
    c58e:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
    c592:	44b2      	add	sl, r6
    c594:	9e03      	ldr	r6, [sp, #12]
    c596:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
    c59a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
    c59e:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
    c5a2:	2200      	movs	r2, #0
    c5a4:	4baa      	ldr	r3, [pc, #680]	; (c850 <__kernel_rem_pio2+0x3c8>)
    c5a6:	4620      	mov	r0, r4
    c5a8:	4629      	mov	r1, r5
    c5aa:	f000 fe77 	bl	d29c <__aeabi_dmul>
    c5ae:	f001 f90f 	bl	d7d0 <__aeabi_d2iz>
    c5b2:	f000 fe0d 	bl	d1d0 <__aeabi_i2d>
    c5b6:	2200      	movs	r2, #0
    c5b8:	4ba6      	ldr	r3, [pc, #664]	; (c854 <__kernel_rem_pio2+0x3cc>)
    c5ba:	4606      	mov	r6, r0
    c5bc:	460f      	mov	r7, r1
    c5be:	f000 fe6d 	bl	d29c <__aeabi_dmul>
    c5c2:	4602      	mov	r2, r0
    c5c4:	460b      	mov	r3, r1
    c5c6:	4620      	mov	r0, r4
    c5c8:	4629      	mov	r1, r5
    c5ca:	f000 fcb3 	bl	cf34 <__aeabi_dsub>
    c5ce:	f001 f8ff 	bl	d7d0 <__aeabi_d2iz>
    c5d2:	4632      	mov	r2, r6
    c5d4:	f848 0f04 	str.w	r0, [r8, #4]!
    c5d8:	463b      	mov	r3, r7
    c5da:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
    c5de:	f000 fcab 	bl	cf38 <__adddf3>
    c5e2:	45d8      	cmp	r8, fp
    c5e4:	4604      	mov	r4, r0
    c5e6:	460d      	mov	r5, r1
    c5e8:	d1db      	bne.n	c5a2 <__kernel_rem_pio2+0x11a>
    c5ea:	4620      	mov	r0, r4
    c5ec:	4629      	mov	r1, r5
    c5ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c5f0:	f000 fc06 	bl	ce00 <scalbn>
    c5f4:	2200      	movs	r2, #0
    c5f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    c5fa:	4604      	mov	r4, r0
    c5fc:	460d      	mov	r5, r1
    c5fe:	f000 fe4d 	bl	d29c <__aeabi_dmul>
    c602:	f7ff fb1d 	bl	bc40 <floor>
    c606:	2200      	movs	r2, #0
    c608:	4b93      	ldr	r3, [pc, #588]	; (c858 <__kernel_rem_pio2+0x3d0>)
    c60a:	f000 fe47 	bl	d29c <__aeabi_dmul>
    c60e:	4602      	mov	r2, r0
    c610:	460b      	mov	r3, r1
    c612:	4620      	mov	r0, r4
    c614:	4629      	mov	r1, r5
    c616:	f000 fc8d 	bl	cf34 <__aeabi_dsub>
    c61a:	4604      	mov	r4, r0
    c61c:	460d      	mov	r5, r1
    c61e:	f001 f8d7 	bl	d7d0 <__aeabi_d2iz>
    c622:	4682      	mov	sl, r0
    c624:	f000 fdd4 	bl	d1d0 <__aeabi_i2d>
    c628:	4602      	mov	r2, r0
    c62a:	460b      	mov	r3, r1
    c62c:	4620      	mov	r0, r4
    c62e:	4629      	mov	r1, r5
    c630:	f000 fc80 	bl	cf34 <__aeabi_dsub>
    c634:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c636:	2c00      	cmp	r4, #0
    c638:	4606      	mov	r6, r0
    c63a:	460f      	mov	r7, r1
    c63c:	f340 80c9 	ble.w	c7d2 <__kernel_rem_pio2+0x34a>
    c640:	9c03      	ldr	r4, [sp, #12]
    c642:	aa10      	add	r2, sp, #64	; 0x40
    c644:	1e61      	subs	r1, r4, #1
    c646:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    c64c:	f1c4 0018 	rsb	r0, r4, #24
    c650:	fa43 f200 	asr.w	r2, r3, r0
    c654:	f1c4 0517 	rsb	r5, r4, #23
    c658:	fa02 f000 	lsl.w	r0, r2, r0
    c65c:	ac10      	add	r4, sp, #64	; 0x40
    c65e:	1a1b      	subs	r3, r3, r0
    c660:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
    c664:	4492      	add	sl, r2
    c666:	fa43 f505 	asr.w	r5, r3, r5
    c66a:	2d00      	cmp	r5, #0
    c66c:	dd2c      	ble.n	c6c8 <__kernel_rem_pio2+0x240>
    c66e:	9c03      	ldr	r4, [sp, #12]
    c670:	2c00      	cmp	r4, #0
    c672:	f10a 0a01 	add.w	sl, sl, #1
    c676:	f340 80e9 	ble.w	c84c <__kernel_rem_pio2+0x3c4>
    c67a:	ab10      	add	r3, sp, #64	; 0x40
    c67c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    c680:	2400      	movs	r4, #0
    c682:	f853 1b04 	ldr.w	r1, [r3], #4
    c686:	f1c1 12ff 	rsb	r2, r1, #16711935	; 0xff00ff
    c68a:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
    c68e:	b914      	cbnz	r4, c696 <__kernel_rem_pio2+0x20e>
    c690:	f1c1 7280 	rsb	r2, r1, #16777216	; 0x1000000
    c694:	b111      	cbz	r1, c69c <__kernel_rem_pio2+0x214>
    c696:	f843 2c04 	str.w	r2, [r3, #-4]
    c69a:	2401      	movs	r4, #1
    c69c:	4283      	cmp	r3, r0
    c69e:	d1f0      	bne.n	c682 <__kernel_rem_pio2+0x1fa>
    c6a0:	980a      	ldr	r0, [sp, #40]	; 0x28
    c6a2:	2800      	cmp	r0, #0
    c6a4:	dd0d      	ble.n	c6c2 <__kernel_rem_pio2+0x23a>
    c6a6:	2801      	cmp	r0, #1
    c6a8:	f000 80b4 	beq.w	c814 <__kernel_rem_pio2+0x38c>
    c6ac:	2802      	cmp	r0, #2
    c6ae:	d108      	bne.n	c6c2 <__kernel_rem_pio2+0x23a>
    c6b0:	9903      	ldr	r1, [sp, #12]
    c6b2:	a810      	add	r0, sp, #64	; 0x40
    c6b4:	1e4b      	subs	r3, r1, #1
    c6b6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    c6ba:	f3c2 0215 	ubfx	r2, r2, #0, #22
    c6be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    c6c2:	2d02      	cmp	r5, #2
    c6c4:	f000 808d 	beq.w	c7e2 <__kernel_rem_pio2+0x35a>
    c6c8:	4630      	mov	r0, r6
    c6ca:	4639      	mov	r1, r7
    c6cc:	2200      	movs	r2, #0
    c6ce:	2300      	movs	r3, #0
    c6d0:	f001 f84c 	bl	d76c <__aeabi_dcmpeq>
    c6d4:	2800      	cmp	r0, #0
    c6d6:	f000 80c5 	beq.w	c864 <__kernel_rem_pio2+0x3dc>
    c6da:	9c03      	ldr	r4, [sp, #12]
    c6dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    c6de:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    c6e2:	4546      	cmp	r6, r8
    c6e4:	dc0d      	bgt.n	c702 <__kernel_rem_pio2+0x27a>
    c6e6:	a810      	add	r0, sp, #64	; 0x40
    c6e8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    c6ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c6ee:	2200      	movs	r2, #0
    c6f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    c6f4:	4283      	cmp	r3, r0
    c6f6:	ea42 0201 	orr.w	r2, r2, r1
    c6fa:	d1f9      	bne.n	c6f0 <__kernel_rem_pio2+0x268>
    c6fc:	2a00      	cmp	r2, #0
    c6fe:	f040 824d 	bne.w	cb9c <__kernel_rem_pio2+0x714>
    c702:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c704:	ae10      	add	r6, sp, #64	; 0x40
    c706:	1e62      	subs	r2, r4, #1
    c708:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
    c70c:	2b00      	cmp	r3, #0
    c70e:	f040 8243 	bne.w	cb98 <__kernel_rem_pio2+0x710>
    c712:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    c716:	2301      	movs	r3, #1
    c718:	f852 1d04 	ldr.w	r1, [r2, #-4]!
    c71c:	3301      	adds	r3, #1
    c71e:	2900      	cmp	r1, #0
    c720:	d0fa      	beq.n	c718 <__kernel_rem_pio2+0x290>
    c722:	9c03      	ldr	r4, [sp, #12]
    c724:	9e03      	ldr	r6, [sp, #12]
    c726:	441c      	add	r4, r3
    c728:	1c73      	adds	r3, r6, #1
    c72a:	42a3      	cmp	r3, r4
    c72c:	940d      	str	r4, [sp, #52]	; 0x34
    c72e:	dc4a      	bgt.n	c7c6 <__kernel_rem_pio2+0x33e>
    c730:	9c04      	ldr	r4, [sp, #16]
    c732:	4631      	mov	r1, r6
    c734:	4632      	mov	r2, r6
    c736:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    c738:	4423      	add	r3, r4
    c73a:	4432      	add	r2, r6
    c73c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    c73e:	9e03      	ldr	r6, [sp, #12]
    c740:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    c744:	1ba3      	subs	r3, r4, r6
    c746:	9ea7      	ldr	r6, [sp, #668]	; 0x29c
    c748:	a824      	add	r0, sp, #144	; 0x90
    c74a:	4449      	add	r1, r9
    c74c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    c750:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    c754:	9e06      	ldr	r6, [sp, #24]
    c756:	9409      	str	r4, [sp, #36]	; 0x24
    c758:	ac74      	add	r4, sp, #464	; 0x1d0
    c75a:	00db      	lsls	r3, r3, #3
    c75c:	4434      	add	r4, r6
    c75e:	eb00 0bcb 	add.w	fp, r0, fp, lsl #3
    c762:	9203      	str	r2, [sp, #12]
    c764:	9308      	str	r3, [sp, #32]
    c766:	9406      	str	r4, [sp, #24]
    c768:	f04f 0800 	mov.w	r8, #0
    c76c:	9c03      	ldr	r4, [sp, #12]
    c76e:	f854 0f04 	ldr.w	r0, [r4, #4]!
    c772:	9403      	str	r4, [sp, #12]
    c774:	f000 fd2c 	bl	d1d0 <__aeabi_i2d>
    c778:	9e04      	ldr	r6, [sp, #16]
    c77a:	2e00      	cmp	r6, #0
    c77c:	f108 0808 	add.w	r8, r8, #8
    c780:	e9eb 0102 	strd	r0, r1, [fp, #8]!
    c784:	db22      	blt.n	c7cc <__kernel_rem_pio2+0x344>
    c786:	9c07      	ldr	r4, [sp, #28]
    c788:	9f09      	ldr	r7, [sp, #36]	; 0x24
    c78a:	f1a4 0a08 	sub.w	sl, r4, #8
    c78e:	4447      	add	r7, r8
    c790:	2400      	movs	r4, #0
    c792:	2500      	movs	r5, #0
    c794:	2600      	movs	r6, #0
    c796:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
    c79a:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
    c79e:	f000 fd7d 	bl	d29c <__aeabi_dmul>
    c7a2:	4602      	mov	r2, r0
    c7a4:	460b      	mov	r3, r1
    c7a6:	4620      	mov	r0, r4
    c7a8:	4629      	mov	r1, r5
    c7aa:	f000 fbc5 	bl	cf38 <__adddf3>
    c7ae:	3601      	adds	r6, #1
    c7b0:	454e      	cmp	r6, r9
    c7b2:	4604      	mov	r4, r0
    c7b4:	460d      	mov	r5, r1
    c7b6:	d1ee      	bne.n	c796 <__kernel_rem_pio2+0x30e>
    c7b8:	9e06      	ldr	r6, [sp, #24]
    c7ba:	e9e6 4502 	strd	r4, r5, [r6, #8]!
    c7be:	9c08      	ldr	r4, [sp, #32]
    c7c0:	9606      	str	r6, [sp, #24]
    c7c2:	45a0      	cmp	r8, r4
    c7c4:	d1d2      	bne.n	c76c <__kernel_rem_pio2+0x2e4>
    c7c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    c7c8:	9603      	str	r6, [sp, #12]
    c7ca:	e6d5      	b.n	c578 <__kernel_rem_pio2+0xf0>
    c7cc:	2400      	movs	r4, #0
    c7ce:	2500      	movs	r5, #0
    c7d0:	e7f2      	b.n	c7b8 <__kernel_rem_pio2+0x330>
    c7d2:	d129      	bne.n	c828 <__kernel_rem_pio2+0x3a0>
    c7d4:	9c03      	ldr	r4, [sp, #12]
    c7d6:	a810      	add	r0, sp, #64	; 0x40
    c7d8:	1e63      	subs	r3, r4, #1
    c7da:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    c7de:	15ed      	asrs	r5, r5, #23
    c7e0:	e743      	b.n	c66a <__kernel_rem_pio2+0x1e2>
    c7e2:	4632      	mov	r2, r6
    c7e4:	463b      	mov	r3, r7
    c7e6:	2000      	movs	r0, #0
    c7e8:	491c      	ldr	r1, [pc, #112]	; (c85c <__kernel_rem_pio2+0x3d4>)
    c7ea:	f000 fba3 	bl	cf34 <__aeabi_dsub>
    c7ee:	4606      	mov	r6, r0
    c7f0:	460f      	mov	r7, r1
    c7f2:	2c00      	cmp	r4, #0
    c7f4:	f43f af68 	beq.w	c6c8 <__kernel_rem_pio2+0x240>
    c7f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c7fa:	4918      	ldr	r1, [pc, #96]	; (c85c <__kernel_rem_pio2+0x3d4>)
    c7fc:	2000      	movs	r0, #0
    c7fe:	f000 faff 	bl	ce00 <scalbn>
    c802:	4602      	mov	r2, r0
    c804:	460b      	mov	r3, r1
    c806:	4630      	mov	r0, r6
    c808:	4639      	mov	r1, r7
    c80a:	f000 fb93 	bl	cf34 <__aeabi_dsub>
    c80e:	4606      	mov	r6, r0
    c810:	460f      	mov	r7, r1
    c812:	e759      	b.n	c6c8 <__kernel_rem_pio2+0x240>
    c814:	9903      	ldr	r1, [sp, #12]
    c816:	a810      	add	r0, sp, #64	; 0x40
    c818:	1e4b      	subs	r3, r1, #1
    c81a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    c81e:	f3c2 0216 	ubfx	r2, r2, #0, #23
    c822:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    c826:	e74c      	b.n	c6c2 <__kernel_rem_pio2+0x23a>
    c828:	2200      	movs	r2, #0
    c82a:	4b0d      	ldr	r3, [pc, #52]	; (c860 <__kernel_rem_pio2+0x3d8>)
    c82c:	f000 ffbc 	bl	d7a8 <__aeabi_dcmpge>
    c830:	b920      	cbnz	r0, c83c <__kernel_rem_pio2+0x3b4>
    c832:	4605      	mov	r5, r0
    c834:	e748      	b.n	c6c8 <__kernel_rem_pio2+0x240>
    c836:	2400      	movs	r4, #0
    c838:	2500      	movs	r5, #0
    c83a:	e68f      	b.n	c55c <__kernel_rem_pio2+0xd4>
    c83c:	9c03      	ldr	r4, [sp, #12]
    c83e:	2c00      	cmp	r4, #0
    c840:	f04f 0502 	mov.w	r5, #2
    c844:	f10a 0a01 	add.w	sl, sl, #1
    c848:	f73f af17 	bgt.w	c67a <__kernel_rem_pio2+0x1f2>
    c84c:	2400      	movs	r4, #0
    c84e:	e727      	b.n	c6a0 <__kernel_rem_pio2+0x218>
    c850:	3e700000 	.word	0x3e700000
    c854:	41700000 	.word	0x41700000
    c858:	40200000 	.word	0x40200000
    c85c:	3ff00000 	.word	0x3ff00000
    c860:	3fe00000 	.word	0x3fe00000
    c864:	4630      	mov	r0, r6
    c866:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c868:	9506      	str	r5, [sp, #24]
    c86a:	4272      	negs	r2, r6
    c86c:	4639      	mov	r1, r7
    c86e:	f8cd a01c 	str.w	sl, [sp, #28]
    c872:	f000 fac5 	bl	ce00 <scalbn>
    c876:	2200      	movs	r2, #0
    c878:	4b92      	ldr	r3, [pc, #584]	; (cac4 <__kernel_rem_pio2+0x63c>)
    c87a:	4604      	mov	r4, r0
    c87c:	460d      	mov	r5, r1
    c87e:	f000 ff93 	bl	d7a8 <__aeabi_dcmpge>
    c882:	2800      	cmp	r0, #0
    c884:	f000 81b6 	beq.w	cbf4 <__kernel_rem_pio2+0x76c>
    c888:	2200      	movs	r2, #0
    c88a:	4b8f      	ldr	r3, [pc, #572]	; (cac8 <__kernel_rem_pio2+0x640>)
    c88c:	4620      	mov	r0, r4
    c88e:	4629      	mov	r1, r5
    c890:	f000 fd04 	bl	d29c <__aeabi_dmul>
    c894:	f000 ff9c 	bl	d7d0 <__aeabi_d2iz>
    c898:	4606      	mov	r6, r0
    c89a:	f000 fc99 	bl	d1d0 <__aeabi_i2d>
    c89e:	2200      	movs	r2, #0
    c8a0:	4b88      	ldr	r3, [pc, #544]	; (cac4 <__kernel_rem_pio2+0x63c>)
    c8a2:	f000 fcfb 	bl	d29c <__aeabi_dmul>
    c8a6:	4602      	mov	r2, r0
    c8a8:	460b      	mov	r3, r1
    c8aa:	4620      	mov	r0, r4
    c8ac:	4629      	mov	r1, r5
    c8ae:	f000 fb41 	bl	cf34 <__aeabi_dsub>
    c8b2:	f000 ff8d 	bl	d7d0 <__aeabi_d2iz>
    c8b6:	9c03      	ldr	r4, [sp, #12]
    c8b8:	f104 0801 	add.w	r8, r4, #1
    c8bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c8be:	3418      	adds	r4, #24
    c8c0:	a910      	add	r1, sp, #64	; 0x40
    c8c2:	940a      	str	r4, [sp, #40]	; 0x28
    c8c4:	9c03      	ldr	r4, [sp, #12]
    c8c6:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    c8ca:	f841 6028 	str.w	r6, [r1, r8, lsl #2]
    c8ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c8d0:	497e      	ldr	r1, [pc, #504]	; (cacc <__kernel_rem_pio2+0x644>)
    c8d2:	2000      	movs	r0, #0
    c8d4:	f000 fa94 	bl	ce00 <scalbn>
    c8d8:	f1b8 0f00 	cmp.w	r8, #0
    c8dc:	4604      	mov	r4, r0
    c8de:	460d      	mov	r5, r1
    c8e0:	db5a      	blt.n	c998 <__kernel_rem_pio2+0x510>
    c8e2:	f108 0601 	add.w	r6, r8, #1
    c8e6:	a810      	add	r0, sp, #64	; 0x40
    c8e8:	a974      	add	r1, sp, #464	; 0x1d0
    c8ea:	9603      	str	r6, [sp, #12]
    c8ec:	eb00 0786 	add.w	r7, r0, r6, lsl #2
    c8f0:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
    c8f4:	f857 0d04 	ldr.w	r0, [r7, #-4]!
    c8f8:	f000 fc6a 	bl	d1d0 <__aeabi_i2d>
    c8fc:	4622      	mov	r2, r4
    c8fe:	462b      	mov	r3, r5
    c900:	f000 fccc 	bl	d29c <__aeabi_dmul>
    c904:	2200      	movs	r2, #0
    c906:	e966 0102 	strd	r0, r1, [r6, #-8]!
    c90a:	4b6f      	ldr	r3, [pc, #444]	; (cac8 <__kernel_rem_pio2+0x640>)
    c90c:	4620      	mov	r0, r4
    c90e:	4629      	mov	r1, r5
    c910:	f000 fcc4 	bl	d29c <__aeabi_dmul>
    c914:	9a02      	ldr	r2, [sp, #8]
    c916:	4297      	cmp	r7, r2
    c918:	4604      	mov	r4, r0
    c91a:	460d      	mov	r5, r1
    c91c:	d1ea      	bne.n	c8f4 <__kernel_rem_pio2+0x46c>
    c91e:	f108 5b00 	add.w	fp, r8, #536870912	; 0x20000000
    c922:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    c926:	ab74      	add	r3, sp, #464	; 0x1d0
    c928:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    c92c:	f8cd 8020 	str.w	r8, [sp, #32]
    c930:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    c934:	f8cd a010 	str.w	sl, [sp, #16]
    c938:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
    c93c:	f04f 0900 	mov.w	r9, #0
    c940:	f1b8 0f00 	cmp.w	r8, #0
    c944:	f2c0 8122 	blt.w	cb8c <__kernel_rem_pio2+0x704>
    c948:	f8df a184 	ldr.w	sl, [pc, #388]	; cad0 <__kernel_rem_pio2+0x648>
    c94c:	465f      	mov	r7, fp
    c94e:	2400      	movs	r4, #0
    c950:	2500      	movs	r5, #0
    c952:	2600      	movs	r6, #0
    c954:	e001      	b.n	c95a <__kernel_rem_pio2+0x4d2>
    c956:	454e      	cmp	r6, r9
    c958:	dc10      	bgt.n	c97c <__kernel_rem_pio2+0x4f4>
    c95a:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
    c95e:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
    c962:	f000 fc9b 	bl	d29c <__aeabi_dmul>
    c966:	4602      	mov	r2, r0
    c968:	460b      	mov	r3, r1
    c96a:	4620      	mov	r0, r4
    c96c:	4629      	mov	r1, r5
    c96e:	f000 fae3 	bl	cf38 <__adddf3>
    c972:	3601      	adds	r6, #1
    c974:	45b0      	cmp	r8, r6
    c976:	4604      	mov	r4, r0
    c978:	460d      	mov	r5, r1
    c97a:	daec      	bge.n	c956 <__kernel_rem_pio2+0x4ce>
    c97c:	9e04      	ldr	r6, [sp, #16]
    c97e:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
    c982:	e9c3 4500 	strd	r4, r5, [r3]
    c986:	9c03      	ldr	r4, [sp, #12]
    c988:	f109 0901 	add.w	r9, r9, #1
    c98c:	45a1      	cmp	r9, r4
    c98e:	f1ab 0b08 	sub.w	fp, fp, #8
    c992:	d1d5      	bne.n	c940 <__kernel_rem_pio2+0x4b8>
    c994:	f8dd 8020 	ldr.w	r8, [sp, #32]
    c998:	9ea6      	ldr	r6, [sp, #664]	; 0x298
    c99a:	2e03      	cmp	r6, #3
    c99c:	f200 808a 	bhi.w	cab4 <__kernel_rem_pio2+0x62c>
    c9a0:	e8df f016 	tbh	[pc, r6, lsl #1]
    c9a4:	009800d4 	.word	0x009800d4
    c9a8:	00040098 	.word	0x00040098
    c9ac:	f1b8 0f00 	cmp.w	r8, #0
    c9b0:	f340 810c 	ble.w	cbcc <__kernel_rem_pio2+0x744>
    c9b4:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    c9b8:	ea4f 0bc8 	mov.w	fp, r8, lsl #3
    c9bc:	eb0a 030b 	add.w	r3, sl, fp
    c9c0:	e9d3 6700 	ldrd	r6, r7, [r3]
    c9c4:	f108 0301 	add.w	r3, r8, #1
    c9c8:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
    c9cc:	9303      	str	r3, [sp, #12]
    c9ce:	4699      	mov	r9, r3
    c9d0:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
    c9d4:	e001      	b.n	c9da <__kernel_rem_pio2+0x552>
    c9d6:	4626      	mov	r6, r4
    c9d8:	462f      	mov	r7, r5
    c9da:	e959 0104 	ldrd	r0, r1, [r9, #-16]
    c9de:	4632      	mov	r2, r6
    c9e0:	463b      	mov	r3, r7
    c9e2:	f8cd c004 	str.w	ip, [sp, #4]
    c9e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c9ea:	f000 faa5 	bl	cf38 <__adddf3>
    c9ee:	4604      	mov	r4, r0
    c9f0:	460d      	mov	r5, r1
    c9f2:	4622      	mov	r2, r4
    c9f4:	462b      	mov	r3, r5
    c9f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c9fa:	f000 fa9b 	bl	cf34 <__aeabi_dsub>
    c9fe:	4632      	mov	r2, r6
    ca00:	463b      	mov	r3, r7
    ca02:	f000 fa99 	bl	cf38 <__adddf3>
    ca06:	e969 0102 	strd	r0, r1, [r9, #-8]!
    ca0a:	f8dd c004 	ldr.w	ip, [sp, #4]
    ca0e:	45e1      	cmp	r9, ip
    ca10:	e949 4502 	strd	r4, r5, [r9, #-8]
    ca14:	d1df      	bne.n	c9d6 <__kernel_rem_pio2+0x54e>
    ca16:	f1b8 0f01 	cmp.w	r8, #1
    ca1a:	f340 8109 	ble.w	cc30 <__kernel_rem_pio2+0x7a8>
    ca1e:	f8dd c00c 	ldr.w	ip, [sp, #12]
    ca22:	f8cd a010 	str.w	sl, [sp, #16]
    ca26:	44d3      	add	fp, sl
    ca28:	e9db 4500 	ldrd	r4, r5, [fp]
    ca2c:	f10a 0b10 	add.w	fp, sl, #16
    ca30:	46e2      	mov	sl, ip
    ca32:	e001      	b.n	ca38 <__kernel_rem_pio2+0x5b0>
    ca34:	4634      	mov	r4, r6
    ca36:	463d      	mov	r5, r7
    ca38:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
    ca3c:	4622      	mov	r2, r4
    ca3e:	462b      	mov	r3, r5
    ca40:	4640      	mov	r0, r8
    ca42:	4649      	mov	r1, r9
    ca44:	f000 fa78 	bl	cf38 <__adddf3>
    ca48:	4606      	mov	r6, r0
    ca4a:	460f      	mov	r7, r1
    ca4c:	4632      	mov	r2, r6
    ca4e:	463b      	mov	r3, r7
    ca50:	4640      	mov	r0, r8
    ca52:	4649      	mov	r1, r9
    ca54:	f000 fa6e 	bl	cf34 <__aeabi_dsub>
    ca58:	4622      	mov	r2, r4
    ca5a:	462b      	mov	r3, r5
    ca5c:	f000 fa6c 	bl	cf38 <__adddf3>
    ca60:	e96a 0102 	strd	r0, r1, [sl, #-8]!
    ca64:	45da      	cmp	sl, fp
    ca66:	e94a 6702 	strd	r6, r7, [sl, #-8]
    ca6a:	d1e3      	bne.n	ca34 <__kernel_rem_pio2+0x5ac>
    ca6c:	f8dd a010 	ldr.w	sl, [sp, #16]
    ca70:	9c03      	ldr	r4, [sp, #12]
    ca72:	2000      	movs	r0, #0
    ca74:	2100      	movs	r1, #0
    ca76:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    ca7a:	f000 fa5d 	bl	cf38 <__adddf3>
    ca7e:	45a3      	cmp	fp, r4
    ca80:	d1f9      	bne.n	ca76 <__kernel_rem_pio2+0x5ee>
    ca82:	9c06      	ldr	r4, [sp, #24]
    ca84:	2c00      	cmp	r4, #0
    ca86:	f000 80a9 	beq.w	cbdc <__kernel_rem_pio2+0x754>
    ca8a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ca8c:	f8da 5004 	ldr.w	r5, [sl, #4]
    ca90:	f8da 400c 	ldr.w	r4, [sl, #12]
    ca94:	f8da 2000 	ldr.w	r2, [sl]
    ca98:	f8da 3008 	ldr.w	r3, [sl, #8]
    ca9c:	6032      	str	r2, [r6, #0]
    ca9e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    caa2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    caa6:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
    caaa:	6075      	str	r5, [r6, #4]
    caac:	60f4      	str	r4, [r6, #12]
    caae:	60b3      	str	r3, [r6, #8]
    cab0:	6130      	str	r0, [r6, #16]
    cab2:	6172      	str	r2, [r6, #20]
    cab4:	9c07      	ldr	r4, [sp, #28]
    cab6:	f004 0007 	and.w	r0, r4, #7
    caba:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    cabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cac2:	bf00      	nop
    cac4:	41700000 	.word	0x41700000
    cac8:	3e700000 	.word	0x3e700000
    cacc:	3ff00000 	.word	0x3ff00000
    cad0:	000158d0 	.word	0x000158d0
    cad4:	f1b8 0f00 	cmp.w	r8, #0
    cad8:	f2c0 80a5 	blt.w	cc26 <__kernel_rem_pio2+0x79e>
    cadc:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    cae0:	f108 0401 	add.w	r4, r8, #1
    cae4:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
    cae8:	2000      	movs	r0, #0
    caea:	2100      	movs	r1, #0
    caec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    caf0:	f000 fa22 	bl	cf38 <__adddf3>
    caf4:	4554      	cmp	r4, sl
    caf6:	d1f9      	bne.n	caec <__kernel_rem_pio2+0x664>
    caf8:	9c06      	ldr	r4, [sp, #24]
    cafa:	2c00      	cmp	r4, #0
    cafc:	d049      	beq.n	cb92 <__kernel_rem_pio2+0x70a>
    cafe:	4602      	mov	r2, r0
    cb00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    cb04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cb06:	e9c6 2300 	strd	r2, r3, [r6]
    cb0a:	4602      	mov	r2, r0
    cb0c:	460b      	mov	r3, r1
    cb0e:	e9da 0100 	ldrd	r0, r1, [sl]
    cb12:	f000 fa0f 	bl	cf34 <__aeabi_dsub>
    cb16:	f1b8 0f00 	cmp.w	r8, #0
    cb1a:	dd07      	ble.n	cb2c <__kernel_rem_pio2+0x6a4>
    cb1c:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
    cb20:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
    cb24:	f000 fa08 	bl	cf38 <__adddf3>
    cb28:	45c2      	cmp	sl, r8
    cb2a:	d1f9      	bne.n	cb20 <__kernel_rem_pio2+0x698>
    cb2c:	9c06      	ldr	r4, [sp, #24]
    cb2e:	2c00      	cmp	r4, #0
    cb30:	d06a      	beq.n	cc08 <__kernel_rem_pio2+0x780>
    cb32:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cb34:	4602      	mov	r2, r0
    cb36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    cb3a:	e9c6 2302 	strd	r2, r3, [r6, #8]
    cb3e:	9c07      	ldr	r4, [sp, #28]
    cb40:	f004 0007 	and.w	r0, r4, #7
    cb44:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb4c:	f1b8 0f00 	cmp.w	r8, #0
    cb50:	db66      	blt.n	cc20 <__kernel_rem_pio2+0x798>
    cb52:	f108 0401 	add.w	r4, r8, #1
    cb56:	ad4c      	add	r5, sp, #304	; 0x130
    cb58:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    cb5c:	2000      	movs	r0, #0
    cb5e:	2100      	movs	r1, #0
    cb60:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    cb64:	f000 f9e8 	bl	cf38 <__adddf3>
    cb68:	42ac      	cmp	r4, r5
    cb6a:	d1f9      	bne.n	cb60 <__kernel_rem_pio2+0x6d8>
    cb6c:	9c06      	ldr	r4, [sp, #24]
    cb6e:	2c00      	cmp	r4, #0
    cb70:	d050      	beq.n	cc14 <__kernel_rem_pio2+0x78c>
    cb72:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cb74:	4602      	mov	r2, r0
    cb76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    cb7a:	e9c6 2300 	strd	r2, r3, [r6]
    cb7e:	9c07      	ldr	r4, [sp, #28]
    cb80:	f004 0007 	and.w	r0, r4, #7
    cb84:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    cb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb8c:	2400      	movs	r4, #0
    cb8e:	2500      	movs	r5, #0
    cb90:	e6f4      	b.n	c97c <__kernel_rem_pio2+0x4f4>
    cb92:	4602      	mov	r2, r0
    cb94:	460b      	mov	r3, r1
    cb96:	e7b5      	b.n	cb04 <__kernel_rem_pio2+0x67c>
    cb98:	2301      	movs	r3, #1
    cb9a:	e5c2      	b.n	c722 <__kernel_rem_pio2+0x29a>
    cb9c:	ae10      	add	r6, sp, #64	; 0x40
    cb9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cba0:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
    cba4:	f8cd a01c 	str.w	sl, [sp, #28]
    cba8:	3c18      	subs	r4, #24
    cbaa:	9506      	str	r5, [sp, #24]
    cbac:	940a      	str	r4, [sp, #40]	; 0x28
    cbae:	2b00      	cmp	r3, #0
    cbb0:	f47f ae8d 	bne.w	c8ce <__kernel_rem_pio2+0x446>
    cbb4:	eb06 0388 	add.w	r3, r6, r8, lsl #2
    cbb8:	4622      	mov	r2, r4
    cbba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cbbe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    cbc2:	3a18      	subs	r2, #24
    cbc4:	2900      	cmp	r1, #0
    cbc6:	d0f8      	beq.n	cbba <__kernel_rem_pio2+0x732>
    cbc8:	920a      	str	r2, [sp, #40]	; 0x28
    cbca:	e680      	b.n	c8ce <__kernel_rem_pio2+0x446>
    cbcc:	9c06      	ldr	r4, [sp, #24]
    cbce:	2000      	movs	r0, #0
    cbd0:	2100      	movs	r1, #0
    cbd2:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    cbd6:	2c00      	cmp	r4, #0
    cbd8:	f47f af57 	bne.w	ca8a <__kernel_rem_pio2+0x602>
    cbdc:	e9da 2300 	ldrd	r2, r3, [sl]
    cbe0:	e9da 4502 	ldrd	r4, r5, [sl, #8]
    cbe4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cbe6:	e9c6 0104 	strd	r0, r1, [r6, #16]
    cbea:	e9c6 2300 	strd	r2, r3, [r6]
    cbee:	e9c6 4502 	strd	r4, r5, [r6, #8]
    cbf2:	e75f      	b.n	cab4 <__kernel_rem_pio2+0x62c>
    cbf4:	4620      	mov	r0, r4
    cbf6:	4629      	mov	r1, r5
    cbf8:	f000 fdea 	bl	d7d0 <__aeabi_d2iz>
    cbfc:	ae10      	add	r6, sp, #64	; 0x40
    cbfe:	9c03      	ldr	r4, [sp, #12]
    cc00:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    cc04:	46a0      	mov	r8, r4
    cc06:	e662      	b.n	c8ce <__kernel_rem_pio2+0x446>
    cc08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cc0a:	4602      	mov	r2, r0
    cc0c:	460b      	mov	r3, r1
    cc0e:	e9c6 2302 	strd	r2, r3, [r6, #8]
    cc12:	e794      	b.n	cb3e <__kernel_rem_pio2+0x6b6>
    cc14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cc16:	4602      	mov	r2, r0
    cc18:	460b      	mov	r3, r1
    cc1a:	e9c6 2300 	strd	r2, r3, [r6]
    cc1e:	e7ae      	b.n	cb7e <__kernel_rem_pio2+0x6f6>
    cc20:	2000      	movs	r0, #0
    cc22:	2100      	movs	r1, #0
    cc24:	e7a2      	b.n	cb6c <__kernel_rem_pio2+0x6e4>
    cc26:	2000      	movs	r0, #0
    cc28:	2100      	movs	r1, #0
    cc2a:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    cc2e:	e763      	b.n	caf8 <__kernel_rem_pio2+0x670>
    cc30:	2000      	movs	r0, #0
    cc32:	2100      	movs	r1, #0
    cc34:	e725      	b.n	ca82 <__kernel_rem_pio2+0x5fa>
    cc36:	bf00      	nop

0000cc38 <__kernel_sin>:
    cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    cc40:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
    cc44:	b085      	sub	sp, #20
    cc46:	4604      	mov	r4, r0
    cc48:	460d      	mov	r5, r1
    cc4a:	4690      	mov	r8, r2
    cc4c:	4699      	mov	r9, r3
    cc4e:	da04      	bge.n	cc5a <__kernel_sin+0x22>
    cc50:	f000 fdbe 	bl	d7d0 <__aeabi_d2iz>
    cc54:	2800      	cmp	r0, #0
    cc56:	f000 8084 	beq.w	cd62 <__kernel_sin+0x12a>
    cc5a:	4622      	mov	r2, r4
    cc5c:	462b      	mov	r3, r5
    cc5e:	4620      	mov	r0, r4
    cc60:	4629      	mov	r1, r5
    cc62:	f000 fb1b 	bl	d29c <__aeabi_dmul>
    cc66:	4622      	mov	r2, r4
    cc68:	462b      	mov	r3, r5
    cc6a:	4606      	mov	r6, r0
    cc6c:	460f      	mov	r7, r1
    cc6e:	f000 fb15 	bl	d29c <__aeabi_dmul>
    cc72:	a33f      	add	r3, pc, #252	; (adr r3, cd70 <__kernel_sin+0x138>)
    cc74:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc78:	4682      	mov	sl, r0
    cc7a:	468b      	mov	fp, r1
    cc7c:	4630      	mov	r0, r6
    cc7e:	4639      	mov	r1, r7
    cc80:	f000 fb0c 	bl	d29c <__aeabi_dmul>
    cc84:	a33c      	add	r3, pc, #240	; (adr r3, cd78 <__kernel_sin+0x140>)
    cc86:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc8a:	f000 f953 	bl	cf34 <__aeabi_dsub>
    cc8e:	4632      	mov	r2, r6
    cc90:	463b      	mov	r3, r7
    cc92:	f000 fb03 	bl	d29c <__aeabi_dmul>
    cc96:	a33a      	add	r3, pc, #232	; (adr r3, cd80 <__kernel_sin+0x148>)
    cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc9c:	f000 f94c 	bl	cf38 <__adddf3>
    cca0:	4632      	mov	r2, r6
    cca2:	463b      	mov	r3, r7
    cca4:	f000 fafa 	bl	d29c <__aeabi_dmul>
    cca8:	a337      	add	r3, pc, #220	; (adr r3, cd88 <__kernel_sin+0x150>)
    ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccae:	f000 f941 	bl	cf34 <__aeabi_dsub>
    ccb2:	4632      	mov	r2, r6
    ccb4:	463b      	mov	r3, r7
    ccb6:	f000 faf1 	bl	d29c <__aeabi_dmul>
    ccba:	a335      	add	r3, pc, #212	; (adr r3, cd90 <__kernel_sin+0x158>)
    ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccc0:	f000 f93a 	bl	cf38 <__adddf3>
    ccc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ccc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ccca:	2b00      	cmp	r3, #0
    cccc:	d033      	beq.n	cd36 <__kernel_sin+0xfe>
    ccce:	4640      	mov	r0, r8
    ccd0:	4649      	mov	r1, r9
    ccd2:	2200      	movs	r2, #0
    ccd4:	4b32      	ldr	r3, [pc, #200]	; (cda0 <__kernel_sin+0x168>)
    ccd6:	f000 fae1 	bl	d29c <__aeabi_dmul>
    ccda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ccde:	e9cd 0100 	strd	r0, r1, [sp]
    cce2:	4650      	mov	r0, sl
    cce4:	4659      	mov	r1, fp
    cce6:	f000 fad9 	bl	d29c <__aeabi_dmul>
    ccea:	4602      	mov	r2, r0
    ccec:	460b      	mov	r3, r1
    ccee:	e9dd 0100 	ldrd	r0, r1, [sp]
    ccf2:	f000 f91f 	bl	cf34 <__aeabi_dsub>
    ccf6:	4632      	mov	r2, r6
    ccf8:	463b      	mov	r3, r7
    ccfa:	f000 facf 	bl	d29c <__aeabi_dmul>
    ccfe:	4642      	mov	r2, r8
    cd00:	464b      	mov	r3, r9
    cd02:	f000 f917 	bl	cf34 <__aeabi_dsub>
    cd06:	a324      	add	r3, pc, #144	; (adr r3, cd98 <__kernel_sin+0x160>)
    cd08:	e9d3 2300 	ldrd	r2, r3, [r3]
    cd0c:	4606      	mov	r6, r0
    cd0e:	460f      	mov	r7, r1
    cd10:	4650      	mov	r0, sl
    cd12:	4659      	mov	r1, fp
    cd14:	f000 fac2 	bl	d29c <__aeabi_dmul>
    cd18:	4602      	mov	r2, r0
    cd1a:	460b      	mov	r3, r1
    cd1c:	4630      	mov	r0, r6
    cd1e:	4639      	mov	r1, r7
    cd20:	f000 f90a 	bl	cf38 <__adddf3>
    cd24:	4602      	mov	r2, r0
    cd26:	460b      	mov	r3, r1
    cd28:	4620      	mov	r0, r4
    cd2a:	4629      	mov	r1, r5
    cd2c:	f000 f902 	bl	cf34 <__aeabi_dsub>
    cd30:	b005      	add	sp, #20
    cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cd3a:	4630      	mov	r0, r6
    cd3c:	4639      	mov	r1, r7
    cd3e:	f000 faad 	bl	d29c <__aeabi_dmul>
    cd42:	a315      	add	r3, pc, #84	; (adr r3, cd98 <__kernel_sin+0x160>)
    cd44:	e9d3 2300 	ldrd	r2, r3, [r3]
    cd48:	f000 f8f4 	bl	cf34 <__aeabi_dsub>
    cd4c:	4652      	mov	r2, sl
    cd4e:	465b      	mov	r3, fp
    cd50:	f000 faa4 	bl	d29c <__aeabi_dmul>
    cd54:	4622      	mov	r2, r4
    cd56:	462b      	mov	r3, r5
    cd58:	f000 f8ee 	bl	cf38 <__adddf3>
    cd5c:	b005      	add	sp, #20
    cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd62:	4620      	mov	r0, r4
    cd64:	4629      	mov	r1, r5
    cd66:	b005      	add	sp, #20
    cd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd6c:	f3af 8000 	nop.w
    cd70:	5acfd57c 	.word	0x5acfd57c
    cd74:	3de5d93a 	.word	0x3de5d93a
    cd78:	8a2b9ceb 	.word	0x8a2b9ceb
    cd7c:	3e5ae5e6 	.word	0x3e5ae5e6
    cd80:	57b1fe7d 	.word	0x57b1fe7d
    cd84:	3ec71de3 	.word	0x3ec71de3
    cd88:	19c161d5 	.word	0x19c161d5
    cd8c:	3f2a01a0 	.word	0x3f2a01a0
    cd90:	1110f8a6 	.word	0x1110f8a6
    cd94:	3f811111 	.word	0x3f811111
    cd98:	55555549 	.word	0x55555549
    cd9c:	3fc55555 	.word	0x3fc55555
    cda0:	3fe00000 	.word	0x3fe00000
    cda4:	f3af 8000 	nop.w

0000cda8 <fabs>:
    cda8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cdac:	4770      	bx	lr
    cdae:	bf00      	nop

0000cdb0 <__fpclassifyd>:
    cdb0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    cdb4:	b410      	push	{r4}
    cdb6:	d008      	beq.n	cdca <__fpclassifyd+0x1a>
    cdb8:	4a0f      	ldr	r2, [pc, #60]	; (cdf8 <__fpclassifyd+0x48>)
    cdba:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
    cdbe:	4294      	cmp	r4, r2
    cdc0:	d80a      	bhi.n	cdd8 <__fpclassifyd+0x28>
    cdc2:	2004      	movs	r0, #4
    cdc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    cdc8:	4770      	bx	lr
    cdca:	2800      	cmp	r0, #0
    cdcc:	bf0c      	ite	eq
    cdce:	2002      	moveq	r0, #2
    cdd0:	2003      	movne	r0, #3
    cdd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    cdd6:	4770      	bx	lr
    cdd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    cddc:	d201      	bcs.n	cde2 <__fpclassifyd+0x32>
    cdde:	2003      	movs	r0, #3
    cde0:	e7f7      	b.n	cdd2 <__fpclassifyd+0x22>
    cde2:	4a06      	ldr	r2, [pc, #24]	; (cdfc <__fpclassifyd+0x4c>)
    cde4:	4293      	cmp	r3, r2
    cde6:	d001      	beq.n	cdec <__fpclassifyd+0x3c>
    cde8:	2000      	movs	r0, #0
    cdea:	e7f2      	b.n	cdd2 <__fpclassifyd+0x22>
    cdec:	f1d0 0001 	rsbs	r0, r0, #1
    cdf0:	bf38      	it	cc
    cdf2:	2000      	movcc	r0, #0
    cdf4:	e7ed      	b.n	cdd2 <__fpclassifyd+0x22>
    cdf6:	bf00      	nop
    cdf8:	7fdfffff 	.word	0x7fdfffff
    cdfc:	7ff00000 	.word	0x7ff00000

0000ce00 <scalbn>:
    ce00:	f3c1 530a 	ubfx	r3, r1, #20, #11
    ce04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce08:	4690      	mov	r8, r2
    ce0a:	4606      	mov	r6, r0
    ce0c:	460f      	mov	r7, r1
    ce0e:	460a      	mov	r2, r1
    ce10:	bb1b      	cbnz	r3, ce5a <scalbn+0x5a>
    ce12:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    ce16:	4303      	orrs	r3, r0
    ce18:	d034      	beq.n	ce84 <scalbn+0x84>
    ce1a:	4b3b      	ldr	r3, [pc, #236]	; (cf08 <scalbn+0x108>)
    ce1c:	2200      	movs	r2, #0
    ce1e:	f000 fa3d 	bl	d29c <__aeabi_dmul>
    ce22:	4b3a      	ldr	r3, [pc, #232]	; (cf0c <scalbn+0x10c>)
    ce24:	4598      	cmp	r8, r3
    ce26:	4606      	mov	r6, r0
    ce28:	460f      	mov	r7, r1
    ce2a:	db3b      	blt.n	cea4 <scalbn+0xa4>
    ce2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
    ce30:	3b36      	subs	r3, #54	; 0x36
    ce32:	460a      	mov	r2, r1
    ce34:	4443      	add	r3, r8
    ce36:	f240 71fe 	movw	r1, #2046	; 0x7fe
    ce3a:	428b      	cmp	r3, r1
    ce3c:	dd16      	ble.n	ce6c <scalbn+0x6c>
    ce3e:	4632      	mov	r2, r6
    ce40:	463b      	mov	r3, r7
    ce42:	a12d      	add	r1, pc, #180	; (adr r1, cef8 <scalbn+0xf8>)
    ce44:	e9d1 0100 	ldrd	r0, r1, [r1]
    ce48:	f000 f866 	bl	cf18 <copysign>
    ce4c:	a32a      	add	r3, pc, #168	; (adr r3, cef8 <scalbn+0xf8>)
    ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce52:	f000 fa23 	bl	d29c <__aeabi_dmul>
    ce56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce5a:	f240 74ff 	movw	r4, #2047	; 0x7ff
    ce5e:	42a3      	cmp	r3, r4
    ce60:	d027      	beq.n	ceb2 <scalbn+0xb2>
    ce62:	4443      	add	r3, r8
    ce64:	f240 71fe 	movw	r1, #2046	; 0x7fe
    ce68:	428b      	cmp	r3, r1
    ce6a:	dce8      	bgt.n	ce3e <scalbn+0x3e>
    ce6c:	2b00      	cmp	r3, #0
    ce6e:	dd0b      	ble.n	ce88 <scalbn+0x88>
    ce70:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    ce74:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    ce78:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
    ce7c:	4630      	mov	r0, r6
    ce7e:	4639      	mov	r1, r7
    ce80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce88:	f113 0f35 	cmn.w	r3, #53	; 0x35
    ce8c:	da17      	bge.n	cebe <scalbn+0xbe>
    ce8e:	f24c 3350 	movw	r3, #50000	; 0xc350
    ce92:	4598      	cmp	r8, r3
    ce94:	4632      	mov	r2, r6
    ce96:	463b      	mov	r3, r7
    ce98:	dc20      	bgt.n	cedc <scalbn+0xdc>
    ce9a:	a119      	add	r1, pc, #100	; (adr r1, cf00 <scalbn+0x100>)
    ce9c:	e9d1 0100 	ldrd	r0, r1, [r1]
    cea0:	f000 f83a 	bl	cf18 <copysign>
    cea4:	a316      	add	r3, pc, #88	; (adr r3, cf00 <scalbn+0x100>)
    cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
    ceaa:	f000 f9f7 	bl	d29c <__aeabi_dmul>
    ceae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ceb2:	4602      	mov	r2, r0
    ceb4:	460b      	mov	r3, r1
    ceb6:	f000 f83f 	bl	cf38 <__adddf3>
    ceba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cebe:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    cec2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    cec6:	3336      	adds	r3, #54	; 0x36
    cec8:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
    cecc:	4630      	mov	r0, r6
    cece:	4639      	mov	r1, r7
    ced0:	2200      	movs	r2, #0
    ced2:	4b0f      	ldr	r3, [pc, #60]	; (cf10 <scalbn+0x110>)
    ced4:	f000 f9e2 	bl	d29c <__aeabi_dmul>
    ced8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cedc:	a106      	add	r1, pc, #24	; (adr r1, cef8 <scalbn+0xf8>)
    cede:	e9d1 0100 	ldrd	r0, r1, [r1]
    cee2:	f000 f819 	bl	cf18 <copysign>
    cee6:	a304      	add	r3, pc, #16	; (adr r3, cef8 <scalbn+0xf8>)
    cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
    ceec:	f000 f9d6 	bl	d29c <__aeabi_dmul>
    cef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cef4:	f3af 8000 	nop.w
    cef8:	8800759c 	.word	0x8800759c
    cefc:	7e37e43c 	.word	0x7e37e43c
    cf00:	c2f8f359 	.word	0xc2f8f359
    cf04:	01a56e1f 	.word	0x01a56e1f
    cf08:	43500000 	.word	0x43500000
    cf0c:	ffff3cb0 	.word	0xffff3cb0
    cf10:	3c900000 	.word	0x3c900000
    cf14:	f3af 8000 	nop.w

0000cf18 <copysign>:
    cf18:	b430      	push	{r4, r5}
    cf1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    cf1e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    cf22:	ea43 0102 	orr.w	r1, r3, r2
    cf26:	bc30      	pop	{r4, r5}
    cf28:	4770      	bx	lr
    cf2a:	bf00      	nop

0000cf2c <__aeabi_drsub>:
    cf2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    cf30:	e002      	b.n	cf38 <__adddf3>
    cf32:	bf00      	nop

0000cf34 <__aeabi_dsub>:
    cf34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000cf38 <__adddf3>:
    cf38:	b530      	push	{r4, r5, lr}
    cf3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    cf3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    cf42:	ea94 0f05 	teq	r4, r5
    cf46:	bf08      	it	eq
    cf48:	ea90 0f02 	teqeq	r0, r2
    cf4c:	bf1f      	itttt	ne
    cf4e:	ea54 0c00 	orrsne.w	ip, r4, r0
    cf52:	ea55 0c02 	orrsne.w	ip, r5, r2
    cf56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    cf5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cf5e:	f000 80e2 	beq.w	d126 <__adddf3+0x1ee>
    cf62:	ea4f 5454 	mov.w	r4, r4, lsr #21
    cf66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    cf6a:	bfb8      	it	lt
    cf6c:	426d      	neglt	r5, r5
    cf6e:	dd0c      	ble.n	cf8a <__adddf3+0x52>
    cf70:	442c      	add	r4, r5
    cf72:	ea80 0202 	eor.w	r2, r0, r2
    cf76:	ea81 0303 	eor.w	r3, r1, r3
    cf7a:	ea82 0000 	eor.w	r0, r2, r0
    cf7e:	ea83 0101 	eor.w	r1, r3, r1
    cf82:	ea80 0202 	eor.w	r2, r0, r2
    cf86:	ea81 0303 	eor.w	r3, r1, r3
    cf8a:	2d36      	cmp	r5, #54	; 0x36
    cf8c:	bf88      	it	hi
    cf8e:	bd30      	pophi	{r4, r5, pc}
    cf90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cf94:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cf98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    cf9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    cfa0:	d002      	beq.n	cfa8 <__adddf3+0x70>
    cfa2:	4240      	negs	r0, r0
    cfa4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cfa8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    cfac:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cfb0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    cfb4:	d002      	beq.n	cfbc <__adddf3+0x84>
    cfb6:	4252      	negs	r2, r2
    cfb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cfbc:	ea94 0f05 	teq	r4, r5
    cfc0:	f000 80a7 	beq.w	d112 <__adddf3+0x1da>
    cfc4:	f1a4 0401 	sub.w	r4, r4, #1
    cfc8:	f1d5 0e20 	rsbs	lr, r5, #32
    cfcc:	db0d      	blt.n	cfea <__adddf3+0xb2>
    cfce:	fa02 fc0e 	lsl.w	ip, r2, lr
    cfd2:	fa22 f205 	lsr.w	r2, r2, r5
    cfd6:	1880      	adds	r0, r0, r2
    cfd8:	f141 0100 	adc.w	r1, r1, #0
    cfdc:	fa03 f20e 	lsl.w	r2, r3, lr
    cfe0:	1880      	adds	r0, r0, r2
    cfe2:	fa43 f305 	asr.w	r3, r3, r5
    cfe6:	4159      	adcs	r1, r3
    cfe8:	e00e      	b.n	d008 <__adddf3+0xd0>
    cfea:	f1a5 0520 	sub.w	r5, r5, #32
    cfee:	f10e 0e20 	add.w	lr, lr, #32
    cff2:	2a01      	cmp	r2, #1
    cff4:	fa03 fc0e 	lsl.w	ip, r3, lr
    cff8:	bf28      	it	cs
    cffa:	f04c 0c02 	orrcs.w	ip, ip, #2
    cffe:	fa43 f305 	asr.w	r3, r3, r5
    d002:	18c0      	adds	r0, r0, r3
    d004:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    d008:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d00c:	d507      	bpl.n	d01e <__adddf3+0xe6>
    d00e:	f04f 0e00 	mov.w	lr, #0
    d012:	f1dc 0c00 	rsbs	ip, ip, #0
    d016:	eb7e 0000 	sbcs.w	r0, lr, r0
    d01a:	eb6e 0101 	sbc.w	r1, lr, r1
    d01e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    d022:	d31b      	bcc.n	d05c <__adddf3+0x124>
    d024:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    d028:	d30c      	bcc.n	d044 <__adddf3+0x10c>
    d02a:	0849      	lsrs	r1, r1, #1
    d02c:	ea5f 0030 	movs.w	r0, r0, rrx
    d030:	ea4f 0c3c 	mov.w	ip, ip, rrx
    d034:	f104 0401 	add.w	r4, r4, #1
    d038:	ea4f 5244 	mov.w	r2, r4, lsl #21
    d03c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    d040:	f080 809a 	bcs.w	d178 <__adddf3+0x240>
    d044:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    d048:	bf08      	it	eq
    d04a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d04e:	f150 0000 	adcs.w	r0, r0, #0
    d052:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d056:	ea41 0105 	orr.w	r1, r1, r5
    d05a:	bd30      	pop	{r4, r5, pc}
    d05c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    d060:	4140      	adcs	r0, r0
    d062:	eb41 0101 	adc.w	r1, r1, r1
    d066:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d06a:	f1a4 0401 	sub.w	r4, r4, #1
    d06e:	d1e9      	bne.n	d044 <__adddf3+0x10c>
    d070:	f091 0f00 	teq	r1, #0
    d074:	bf04      	itt	eq
    d076:	4601      	moveq	r1, r0
    d078:	2000      	moveq	r0, #0
    d07a:	fab1 f381 	clz	r3, r1
    d07e:	bf08      	it	eq
    d080:	3320      	addeq	r3, #32
    d082:	f1a3 030b 	sub.w	r3, r3, #11
    d086:	f1b3 0220 	subs.w	r2, r3, #32
    d08a:	da0c      	bge.n	d0a6 <__adddf3+0x16e>
    d08c:	320c      	adds	r2, #12
    d08e:	dd08      	ble.n	d0a2 <__adddf3+0x16a>
    d090:	f102 0c14 	add.w	ip, r2, #20
    d094:	f1c2 020c 	rsb	r2, r2, #12
    d098:	fa01 f00c 	lsl.w	r0, r1, ip
    d09c:	fa21 f102 	lsr.w	r1, r1, r2
    d0a0:	e00c      	b.n	d0bc <__adddf3+0x184>
    d0a2:	f102 0214 	add.w	r2, r2, #20
    d0a6:	bfd8      	it	le
    d0a8:	f1c2 0c20 	rsble	ip, r2, #32
    d0ac:	fa01 f102 	lsl.w	r1, r1, r2
    d0b0:	fa20 fc0c 	lsr.w	ip, r0, ip
    d0b4:	bfdc      	itt	le
    d0b6:	ea41 010c 	orrle.w	r1, r1, ip
    d0ba:	4090      	lslle	r0, r2
    d0bc:	1ae4      	subs	r4, r4, r3
    d0be:	bfa2      	ittt	ge
    d0c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    d0c4:	4329      	orrge	r1, r5
    d0c6:	bd30      	popge	{r4, r5, pc}
    d0c8:	ea6f 0404 	mvn.w	r4, r4
    d0cc:	3c1f      	subs	r4, #31
    d0ce:	da1c      	bge.n	d10a <__adddf3+0x1d2>
    d0d0:	340c      	adds	r4, #12
    d0d2:	dc0e      	bgt.n	d0f2 <__adddf3+0x1ba>
    d0d4:	f104 0414 	add.w	r4, r4, #20
    d0d8:	f1c4 0220 	rsb	r2, r4, #32
    d0dc:	fa20 f004 	lsr.w	r0, r0, r4
    d0e0:	fa01 f302 	lsl.w	r3, r1, r2
    d0e4:	ea40 0003 	orr.w	r0, r0, r3
    d0e8:	fa21 f304 	lsr.w	r3, r1, r4
    d0ec:	ea45 0103 	orr.w	r1, r5, r3
    d0f0:	bd30      	pop	{r4, r5, pc}
    d0f2:	f1c4 040c 	rsb	r4, r4, #12
    d0f6:	f1c4 0220 	rsb	r2, r4, #32
    d0fa:	fa20 f002 	lsr.w	r0, r0, r2
    d0fe:	fa01 f304 	lsl.w	r3, r1, r4
    d102:	ea40 0003 	orr.w	r0, r0, r3
    d106:	4629      	mov	r1, r5
    d108:	bd30      	pop	{r4, r5, pc}
    d10a:	fa21 f004 	lsr.w	r0, r1, r4
    d10e:	4629      	mov	r1, r5
    d110:	bd30      	pop	{r4, r5, pc}
    d112:	f094 0f00 	teq	r4, #0
    d116:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    d11a:	bf06      	itte	eq
    d11c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    d120:	3401      	addeq	r4, #1
    d122:	3d01      	subne	r5, #1
    d124:	e74e      	b.n	cfc4 <__adddf3+0x8c>
    d126:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    d12a:	bf18      	it	ne
    d12c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    d130:	d029      	beq.n	d186 <__adddf3+0x24e>
    d132:	ea94 0f05 	teq	r4, r5
    d136:	bf08      	it	eq
    d138:	ea90 0f02 	teqeq	r0, r2
    d13c:	d005      	beq.n	d14a <__adddf3+0x212>
    d13e:	ea54 0c00 	orrs.w	ip, r4, r0
    d142:	bf04      	itt	eq
    d144:	4619      	moveq	r1, r3
    d146:	4610      	moveq	r0, r2
    d148:	bd30      	pop	{r4, r5, pc}
    d14a:	ea91 0f03 	teq	r1, r3
    d14e:	bf1e      	ittt	ne
    d150:	2100      	movne	r1, #0
    d152:	2000      	movne	r0, #0
    d154:	bd30      	popne	{r4, r5, pc}
    d156:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    d15a:	d105      	bne.n	d168 <__adddf3+0x230>
    d15c:	0040      	lsls	r0, r0, #1
    d15e:	4149      	adcs	r1, r1
    d160:	bf28      	it	cs
    d162:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    d166:	bd30      	pop	{r4, r5, pc}
    d168:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    d16c:	bf3c      	itt	cc
    d16e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    d172:	bd30      	popcc	{r4, r5, pc}
    d174:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d178:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    d17c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d180:	f04f 0000 	mov.w	r0, #0
    d184:	bd30      	pop	{r4, r5, pc}
    d186:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    d18a:	bf1a      	itte	ne
    d18c:	4619      	movne	r1, r3
    d18e:	4610      	movne	r0, r2
    d190:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    d194:	bf1c      	itt	ne
    d196:	460b      	movne	r3, r1
    d198:	4602      	movne	r2, r0
    d19a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d19e:	bf06      	itte	eq
    d1a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    d1a4:	ea91 0f03 	teqeq	r1, r3
    d1a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    d1ac:	bd30      	pop	{r4, r5, pc}
    d1ae:	bf00      	nop

0000d1b0 <__aeabi_ui2d>:
    d1b0:	f090 0f00 	teq	r0, #0
    d1b4:	bf04      	itt	eq
    d1b6:	2100      	moveq	r1, #0
    d1b8:	4770      	bxeq	lr
    d1ba:	b530      	push	{r4, r5, lr}
    d1bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d1c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d1c4:	f04f 0500 	mov.w	r5, #0
    d1c8:	f04f 0100 	mov.w	r1, #0
    d1cc:	e750      	b.n	d070 <__adddf3+0x138>
    d1ce:	bf00      	nop

0000d1d0 <__aeabi_i2d>:
    d1d0:	f090 0f00 	teq	r0, #0
    d1d4:	bf04      	itt	eq
    d1d6:	2100      	moveq	r1, #0
    d1d8:	4770      	bxeq	lr
    d1da:	b530      	push	{r4, r5, lr}
    d1dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d1e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d1e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    d1e8:	bf48      	it	mi
    d1ea:	4240      	negmi	r0, r0
    d1ec:	f04f 0100 	mov.w	r1, #0
    d1f0:	e73e      	b.n	d070 <__adddf3+0x138>
    d1f2:	bf00      	nop

0000d1f4 <__aeabi_f2d>:
    d1f4:	0042      	lsls	r2, r0, #1
    d1f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    d1fa:	ea4f 0131 	mov.w	r1, r1, rrx
    d1fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
    d202:	bf1f      	itttt	ne
    d204:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    d208:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d20c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    d210:	4770      	bxne	lr
    d212:	f092 0f00 	teq	r2, #0
    d216:	bf14      	ite	ne
    d218:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d21c:	4770      	bxeq	lr
    d21e:	b530      	push	{r4, r5, lr}
    d220:	f44f 7460 	mov.w	r4, #896	; 0x380
    d224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d228:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d22c:	e720      	b.n	d070 <__adddf3+0x138>
    d22e:	bf00      	nop

0000d230 <__aeabi_ul2d>:
    d230:	ea50 0201 	orrs.w	r2, r0, r1
    d234:	bf08      	it	eq
    d236:	4770      	bxeq	lr
    d238:	b530      	push	{r4, r5, lr}
    d23a:	f04f 0500 	mov.w	r5, #0
    d23e:	e00a      	b.n	d256 <__aeabi_l2d+0x16>

0000d240 <__aeabi_l2d>:
    d240:	ea50 0201 	orrs.w	r2, r0, r1
    d244:	bf08      	it	eq
    d246:	4770      	bxeq	lr
    d248:	b530      	push	{r4, r5, lr}
    d24a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    d24e:	d502      	bpl.n	d256 <__aeabi_l2d+0x16>
    d250:	4240      	negs	r0, r0
    d252:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d256:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d25a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d25e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    d262:	f43f aedc 	beq.w	d01e <__adddf3+0xe6>
    d266:	f04f 0203 	mov.w	r2, #3
    d26a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d26e:	bf18      	it	ne
    d270:	3203      	addne	r2, #3
    d272:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d276:	bf18      	it	ne
    d278:	3203      	addne	r2, #3
    d27a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    d27e:	f1c2 0320 	rsb	r3, r2, #32
    d282:	fa00 fc03 	lsl.w	ip, r0, r3
    d286:	fa20 f002 	lsr.w	r0, r0, r2
    d28a:	fa01 fe03 	lsl.w	lr, r1, r3
    d28e:	ea40 000e 	orr.w	r0, r0, lr
    d292:	fa21 f102 	lsr.w	r1, r1, r2
    d296:	4414      	add	r4, r2
    d298:	e6c1      	b.n	d01e <__adddf3+0xe6>
    d29a:	bf00      	nop

0000d29c <__aeabi_dmul>:
    d29c:	b570      	push	{r4, r5, r6, lr}
    d29e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d2a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d2a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d2aa:	bf1d      	ittte	ne
    d2ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d2b0:	ea94 0f0c 	teqne	r4, ip
    d2b4:	ea95 0f0c 	teqne	r5, ip
    d2b8:	f000 f8de 	bleq	d478 <__aeabi_dmul+0x1dc>
    d2bc:	442c      	add	r4, r5
    d2be:	ea81 0603 	eor.w	r6, r1, r3
    d2c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    d2c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    d2ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    d2ce:	bf18      	it	ne
    d2d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    d2d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d2d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d2dc:	d038      	beq.n	d350 <__aeabi_dmul+0xb4>
    d2de:	fba0 ce02 	umull	ip, lr, r0, r2
    d2e2:	f04f 0500 	mov.w	r5, #0
    d2e6:	fbe1 e502 	umlal	lr, r5, r1, r2
    d2ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    d2ee:	fbe0 e503 	umlal	lr, r5, r0, r3
    d2f2:	f04f 0600 	mov.w	r6, #0
    d2f6:	fbe1 5603 	umlal	r5, r6, r1, r3
    d2fa:	f09c 0f00 	teq	ip, #0
    d2fe:	bf18      	it	ne
    d300:	f04e 0e01 	orrne.w	lr, lr, #1
    d304:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    d308:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    d30c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    d310:	d204      	bcs.n	d31c <__aeabi_dmul+0x80>
    d312:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    d316:	416d      	adcs	r5, r5
    d318:	eb46 0606 	adc.w	r6, r6, r6
    d31c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    d320:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    d324:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    d328:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    d32c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    d330:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d334:	bf88      	it	hi
    d336:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d33a:	d81e      	bhi.n	d37a <__aeabi_dmul+0xde>
    d33c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    d340:	bf08      	it	eq
    d342:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    d346:	f150 0000 	adcs.w	r0, r0, #0
    d34a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d34e:	bd70      	pop	{r4, r5, r6, pc}
    d350:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    d354:	ea46 0101 	orr.w	r1, r6, r1
    d358:	ea40 0002 	orr.w	r0, r0, r2
    d35c:	ea81 0103 	eor.w	r1, r1, r3
    d360:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    d364:	bfc2      	ittt	gt
    d366:	ebd4 050c 	rsbsgt	r5, r4, ip
    d36a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d36e:	bd70      	popgt	{r4, r5, r6, pc}
    d370:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d374:	f04f 0e00 	mov.w	lr, #0
    d378:	3c01      	subs	r4, #1
    d37a:	f300 80ab 	bgt.w	d4d4 <__aeabi_dmul+0x238>
    d37e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    d382:	bfde      	ittt	le
    d384:	2000      	movle	r0, #0
    d386:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    d38a:	bd70      	pople	{r4, r5, r6, pc}
    d38c:	f1c4 0400 	rsb	r4, r4, #0
    d390:	3c20      	subs	r4, #32
    d392:	da35      	bge.n	d400 <__aeabi_dmul+0x164>
    d394:	340c      	adds	r4, #12
    d396:	dc1b      	bgt.n	d3d0 <__aeabi_dmul+0x134>
    d398:	f104 0414 	add.w	r4, r4, #20
    d39c:	f1c4 0520 	rsb	r5, r4, #32
    d3a0:	fa00 f305 	lsl.w	r3, r0, r5
    d3a4:	fa20 f004 	lsr.w	r0, r0, r4
    d3a8:	fa01 f205 	lsl.w	r2, r1, r5
    d3ac:	ea40 0002 	orr.w	r0, r0, r2
    d3b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    d3b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d3b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d3bc:	fa21 f604 	lsr.w	r6, r1, r4
    d3c0:	eb42 0106 	adc.w	r1, r2, r6
    d3c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d3c8:	bf08      	it	eq
    d3ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d3ce:	bd70      	pop	{r4, r5, r6, pc}
    d3d0:	f1c4 040c 	rsb	r4, r4, #12
    d3d4:	f1c4 0520 	rsb	r5, r4, #32
    d3d8:	fa00 f304 	lsl.w	r3, r0, r4
    d3dc:	fa20 f005 	lsr.w	r0, r0, r5
    d3e0:	fa01 f204 	lsl.w	r2, r1, r4
    d3e4:	ea40 0002 	orr.w	r0, r0, r2
    d3e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d3ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d3f0:	f141 0100 	adc.w	r1, r1, #0
    d3f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d3f8:	bf08      	it	eq
    d3fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d3fe:	bd70      	pop	{r4, r5, r6, pc}
    d400:	f1c4 0520 	rsb	r5, r4, #32
    d404:	fa00 f205 	lsl.w	r2, r0, r5
    d408:	ea4e 0e02 	orr.w	lr, lr, r2
    d40c:	fa20 f304 	lsr.w	r3, r0, r4
    d410:	fa01 f205 	lsl.w	r2, r1, r5
    d414:	ea43 0302 	orr.w	r3, r3, r2
    d418:	fa21 f004 	lsr.w	r0, r1, r4
    d41c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d420:	fa21 f204 	lsr.w	r2, r1, r4
    d424:	ea20 0002 	bic.w	r0, r0, r2
    d428:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    d42c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d430:	bf08      	it	eq
    d432:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d436:	bd70      	pop	{r4, r5, r6, pc}
    d438:	f094 0f00 	teq	r4, #0
    d43c:	d10f      	bne.n	d45e <__aeabi_dmul+0x1c2>
    d43e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    d442:	0040      	lsls	r0, r0, #1
    d444:	eb41 0101 	adc.w	r1, r1, r1
    d448:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d44c:	bf08      	it	eq
    d44e:	3c01      	subeq	r4, #1
    d450:	d0f7      	beq.n	d442 <__aeabi_dmul+0x1a6>
    d452:	ea41 0106 	orr.w	r1, r1, r6
    d456:	f095 0f00 	teq	r5, #0
    d45a:	bf18      	it	ne
    d45c:	4770      	bxne	lr
    d45e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    d462:	0052      	lsls	r2, r2, #1
    d464:	eb43 0303 	adc.w	r3, r3, r3
    d468:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d46c:	bf08      	it	eq
    d46e:	3d01      	subeq	r5, #1
    d470:	d0f7      	beq.n	d462 <__aeabi_dmul+0x1c6>
    d472:	ea43 0306 	orr.w	r3, r3, r6
    d476:	4770      	bx	lr
    d478:	ea94 0f0c 	teq	r4, ip
    d47c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d480:	bf18      	it	ne
    d482:	ea95 0f0c 	teqne	r5, ip
    d486:	d00c      	beq.n	d4a2 <__aeabi_dmul+0x206>
    d488:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d48c:	bf18      	it	ne
    d48e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d492:	d1d1      	bne.n	d438 <__aeabi_dmul+0x19c>
    d494:	ea81 0103 	eor.w	r1, r1, r3
    d498:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d49c:	f04f 0000 	mov.w	r0, #0
    d4a0:	bd70      	pop	{r4, r5, r6, pc}
    d4a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d4a6:	bf06      	itte	eq
    d4a8:	4610      	moveq	r0, r2
    d4aa:	4619      	moveq	r1, r3
    d4ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d4b0:	d019      	beq.n	d4e6 <__aeabi_dmul+0x24a>
    d4b2:	ea94 0f0c 	teq	r4, ip
    d4b6:	d102      	bne.n	d4be <__aeabi_dmul+0x222>
    d4b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d4bc:	d113      	bne.n	d4e6 <__aeabi_dmul+0x24a>
    d4be:	ea95 0f0c 	teq	r5, ip
    d4c2:	d105      	bne.n	d4d0 <__aeabi_dmul+0x234>
    d4c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d4c8:	bf1c      	itt	ne
    d4ca:	4610      	movne	r0, r2
    d4cc:	4619      	movne	r1, r3
    d4ce:	d10a      	bne.n	d4e6 <__aeabi_dmul+0x24a>
    d4d0:	ea81 0103 	eor.w	r1, r1, r3
    d4d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d4d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d4dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d4e0:	f04f 0000 	mov.w	r0, #0
    d4e4:	bd70      	pop	{r4, r5, r6, pc}
    d4e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d4ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d4ee:	bd70      	pop	{r4, r5, r6, pc}

0000d4f0 <__aeabi_ddiv>:
    d4f0:	b570      	push	{r4, r5, r6, lr}
    d4f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d4f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d4fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d4fe:	bf1d      	ittte	ne
    d500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d504:	ea94 0f0c 	teqne	r4, ip
    d508:	ea95 0f0c 	teqne	r5, ip
    d50c:	f000 f8a7 	bleq	d65e <__aeabi_ddiv+0x16e>
    d510:	eba4 0405 	sub.w	r4, r4, r5
    d514:	ea81 0e03 	eor.w	lr, r1, r3
    d518:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d51c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d520:	f000 8088 	beq.w	d634 <__aeabi_ddiv+0x144>
    d524:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d528:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d52c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d530:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d534:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d538:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d53c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d540:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d544:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d548:	429d      	cmp	r5, r3
    d54a:	bf08      	it	eq
    d54c:	4296      	cmpeq	r6, r2
    d54e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d552:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d556:	d202      	bcs.n	d55e <__aeabi_ddiv+0x6e>
    d558:	085b      	lsrs	r3, r3, #1
    d55a:	ea4f 0232 	mov.w	r2, r2, rrx
    d55e:	1ab6      	subs	r6, r6, r2
    d560:	eb65 0503 	sbc.w	r5, r5, r3
    d564:	085b      	lsrs	r3, r3, #1
    d566:	ea4f 0232 	mov.w	r2, r2, rrx
    d56a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d56e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d572:	ebb6 0e02 	subs.w	lr, r6, r2
    d576:	eb75 0e03 	sbcs.w	lr, r5, r3
    d57a:	bf22      	ittt	cs
    d57c:	1ab6      	subcs	r6, r6, r2
    d57e:	4675      	movcs	r5, lr
    d580:	ea40 000c 	orrcs.w	r0, r0, ip
    d584:	085b      	lsrs	r3, r3, #1
    d586:	ea4f 0232 	mov.w	r2, r2, rrx
    d58a:	ebb6 0e02 	subs.w	lr, r6, r2
    d58e:	eb75 0e03 	sbcs.w	lr, r5, r3
    d592:	bf22      	ittt	cs
    d594:	1ab6      	subcs	r6, r6, r2
    d596:	4675      	movcs	r5, lr
    d598:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d59c:	085b      	lsrs	r3, r3, #1
    d59e:	ea4f 0232 	mov.w	r2, r2, rrx
    d5a2:	ebb6 0e02 	subs.w	lr, r6, r2
    d5a6:	eb75 0e03 	sbcs.w	lr, r5, r3
    d5aa:	bf22      	ittt	cs
    d5ac:	1ab6      	subcs	r6, r6, r2
    d5ae:	4675      	movcs	r5, lr
    d5b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d5b4:	085b      	lsrs	r3, r3, #1
    d5b6:	ea4f 0232 	mov.w	r2, r2, rrx
    d5ba:	ebb6 0e02 	subs.w	lr, r6, r2
    d5be:	eb75 0e03 	sbcs.w	lr, r5, r3
    d5c2:	bf22      	ittt	cs
    d5c4:	1ab6      	subcs	r6, r6, r2
    d5c6:	4675      	movcs	r5, lr
    d5c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d5cc:	ea55 0e06 	orrs.w	lr, r5, r6
    d5d0:	d018      	beq.n	d604 <__aeabi_ddiv+0x114>
    d5d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d5d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d5da:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d5de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d5e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d5e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d5ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d5ee:	d1c0      	bne.n	d572 <__aeabi_ddiv+0x82>
    d5f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d5f4:	d10b      	bne.n	d60e <__aeabi_ddiv+0x11e>
    d5f6:	ea41 0100 	orr.w	r1, r1, r0
    d5fa:	f04f 0000 	mov.w	r0, #0
    d5fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d602:	e7b6      	b.n	d572 <__aeabi_ddiv+0x82>
    d604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d608:	bf04      	itt	eq
    d60a:	4301      	orreq	r1, r0
    d60c:	2000      	moveq	r0, #0
    d60e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d612:	bf88      	it	hi
    d614:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d618:	f63f aeaf 	bhi.w	d37a <__aeabi_dmul+0xde>
    d61c:	ebb5 0c03 	subs.w	ip, r5, r3
    d620:	bf04      	itt	eq
    d622:	ebb6 0c02 	subseq.w	ip, r6, r2
    d626:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d62a:	f150 0000 	adcs.w	r0, r0, #0
    d62e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d632:	bd70      	pop	{r4, r5, r6, pc}
    d634:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d638:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d63c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d640:	bfc2      	ittt	gt
    d642:	ebd4 050c 	rsbsgt	r5, r4, ip
    d646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d64a:	bd70      	popgt	{r4, r5, r6, pc}
    d64c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d650:	f04f 0e00 	mov.w	lr, #0
    d654:	3c01      	subs	r4, #1
    d656:	e690      	b.n	d37a <__aeabi_dmul+0xde>
    d658:	ea45 0e06 	orr.w	lr, r5, r6
    d65c:	e68d      	b.n	d37a <__aeabi_dmul+0xde>
    d65e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d662:	ea94 0f0c 	teq	r4, ip
    d666:	bf08      	it	eq
    d668:	ea95 0f0c 	teqeq	r5, ip
    d66c:	f43f af3b 	beq.w	d4e6 <__aeabi_dmul+0x24a>
    d670:	ea94 0f0c 	teq	r4, ip
    d674:	d10a      	bne.n	d68c <__aeabi_ddiv+0x19c>
    d676:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d67a:	f47f af34 	bne.w	d4e6 <__aeabi_dmul+0x24a>
    d67e:	ea95 0f0c 	teq	r5, ip
    d682:	f47f af25 	bne.w	d4d0 <__aeabi_dmul+0x234>
    d686:	4610      	mov	r0, r2
    d688:	4619      	mov	r1, r3
    d68a:	e72c      	b.n	d4e6 <__aeabi_dmul+0x24a>
    d68c:	ea95 0f0c 	teq	r5, ip
    d690:	d106      	bne.n	d6a0 <__aeabi_ddiv+0x1b0>
    d692:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d696:	f43f aefd 	beq.w	d494 <__aeabi_dmul+0x1f8>
    d69a:	4610      	mov	r0, r2
    d69c:	4619      	mov	r1, r3
    d69e:	e722      	b.n	d4e6 <__aeabi_dmul+0x24a>
    d6a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d6a4:	bf18      	it	ne
    d6a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d6aa:	f47f aec5 	bne.w	d438 <__aeabi_dmul+0x19c>
    d6ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d6b2:	f47f af0d 	bne.w	d4d0 <__aeabi_dmul+0x234>
    d6b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d6ba:	f47f aeeb 	bne.w	d494 <__aeabi_dmul+0x1f8>
    d6be:	e712      	b.n	d4e6 <__aeabi_dmul+0x24a>

0000d6c0 <__gedf2>:
    d6c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    d6c4:	e006      	b.n	d6d4 <__cmpdf2+0x4>
    d6c6:	bf00      	nop

0000d6c8 <__ledf2>:
    d6c8:	f04f 0c01 	mov.w	ip, #1
    d6cc:	e002      	b.n	d6d4 <__cmpdf2+0x4>
    d6ce:	bf00      	nop

0000d6d0 <__cmpdf2>:
    d6d0:	f04f 0c01 	mov.w	ip, #1
    d6d4:	f84d cd04 	str.w	ip, [sp, #-4]!
    d6d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d6dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d6e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d6e4:	bf18      	it	ne
    d6e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    d6ea:	d01b      	beq.n	d724 <__cmpdf2+0x54>
    d6ec:	b001      	add	sp, #4
    d6ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    d6f2:	bf0c      	ite	eq
    d6f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    d6f8:	ea91 0f03 	teqne	r1, r3
    d6fc:	bf02      	ittt	eq
    d6fe:	ea90 0f02 	teqeq	r0, r2
    d702:	2000      	moveq	r0, #0
    d704:	4770      	bxeq	lr
    d706:	f110 0f00 	cmn.w	r0, #0
    d70a:	ea91 0f03 	teq	r1, r3
    d70e:	bf58      	it	pl
    d710:	4299      	cmppl	r1, r3
    d712:	bf08      	it	eq
    d714:	4290      	cmpeq	r0, r2
    d716:	bf2c      	ite	cs
    d718:	17d8      	asrcs	r0, r3, #31
    d71a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    d71e:	f040 0001 	orr.w	r0, r0, #1
    d722:	4770      	bx	lr
    d724:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d728:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d72c:	d102      	bne.n	d734 <__cmpdf2+0x64>
    d72e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d732:	d107      	bne.n	d744 <__cmpdf2+0x74>
    d734:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d73c:	d1d6      	bne.n	d6ec <__cmpdf2+0x1c>
    d73e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d742:	d0d3      	beq.n	d6ec <__cmpdf2+0x1c>
    d744:	f85d 0b04 	ldr.w	r0, [sp], #4
    d748:	4770      	bx	lr
    d74a:	bf00      	nop

0000d74c <__aeabi_cdrcmple>:
    d74c:	4684      	mov	ip, r0
    d74e:	4610      	mov	r0, r2
    d750:	4662      	mov	r2, ip
    d752:	468c      	mov	ip, r1
    d754:	4619      	mov	r1, r3
    d756:	4663      	mov	r3, ip
    d758:	e000      	b.n	d75c <__aeabi_cdcmpeq>
    d75a:	bf00      	nop

0000d75c <__aeabi_cdcmpeq>:
    d75c:	b501      	push	{r0, lr}
    d75e:	f7ff ffb7 	bl	d6d0 <__cmpdf2>
    d762:	2800      	cmp	r0, #0
    d764:	bf48      	it	mi
    d766:	f110 0f00 	cmnmi.w	r0, #0
    d76a:	bd01      	pop	{r0, pc}

0000d76c <__aeabi_dcmpeq>:
    d76c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d770:	f7ff fff4 	bl	d75c <__aeabi_cdcmpeq>
    d774:	bf0c      	ite	eq
    d776:	2001      	moveq	r0, #1
    d778:	2000      	movne	r0, #0
    d77a:	f85d fb08 	ldr.w	pc, [sp], #8
    d77e:	bf00      	nop

0000d780 <__aeabi_dcmplt>:
    d780:	f84d ed08 	str.w	lr, [sp, #-8]!
    d784:	f7ff ffea 	bl	d75c <__aeabi_cdcmpeq>
    d788:	bf34      	ite	cc
    d78a:	2001      	movcc	r0, #1
    d78c:	2000      	movcs	r0, #0
    d78e:	f85d fb08 	ldr.w	pc, [sp], #8
    d792:	bf00      	nop

0000d794 <__aeabi_dcmple>:
    d794:	f84d ed08 	str.w	lr, [sp, #-8]!
    d798:	f7ff ffe0 	bl	d75c <__aeabi_cdcmpeq>
    d79c:	bf94      	ite	ls
    d79e:	2001      	movls	r0, #1
    d7a0:	2000      	movhi	r0, #0
    d7a2:	f85d fb08 	ldr.w	pc, [sp], #8
    d7a6:	bf00      	nop

0000d7a8 <__aeabi_dcmpge>:
    d7a8:	f84d ed08 	str.w	lr, [sp, #-8]!
    d7ac:	f7ff ffce 	bl	d74c <__aeabi_cdrcmple>
    d7b0:	bf94      	ite	ls
    d7b2:	2001      	movls	r0, #1
    d7b4:	2000      	movhi	r0, #0
    d7b6:	f85d fb08 	ldr.w	pc, [sp], #8
    d7ba:	bf00      	nop

0000d7bc <__aeabi_dcmpgt>:
    d7bc:	f84d ed08 	str.w	lr, [sp, #-8]!
    d7c0:	f7ff ffc4 	bl	d74c <__aeabi_cdrcmple>
    d7c4:	bf34      	ite	cc
    d7c6:	2001      	movcc	r0, #1
    d7c8:	2000      	movcs	r0, #0
    d7ca:	f85d fb08 	ldr.w	pc, [sp], #8
    d7ce:	bf00      	nop

0000d7d0 <__aeabi_d2iz>:
    d7d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d7d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d7d8:	d215      	bcs.n	d806 <__aeabi_d2iz+0x36>
    d7da:	d511      	bpl.n	d800 <__aeabi_d2iz+0x30>
    d7dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d7e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d7e4:	d912      	bls.n	d80c <__aeabi_d2iz+0x3c>
    d7e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d7ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d7ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d7f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d7f6:	fa23 f002 	lsr.w	r0, r3, r2
    d7fa:	bf18      	it	ne
    d7fc:	4240      	negne	r0, r0
    d7fe:	4770      	bx	lr
    d800:	f04f 0000 	mov.w	r0, #0
    d804:	4770      	bx	lr
    d806:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d80a:	d105      	bne.n	d818 <__aeabi_d2iz+0x48>
    d80c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    d810:	bf08      	it	eq
    d812:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d816:	4770      	bx	lr
    d818:	f04f 0000 	mov.w	r0, #0
    d81c:	4770      	bx	lr
    d81e:	bf00      	nop

0000d820 <__aeabi_d2uiz>:
    d820:	004a      	lsls	r2, r1, #1
    d822:	d211      	bcs.n	d848 <__aeabi_d2uiz+0x28>
    d824:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d828:	d211      	bcs.n	d84e <__aeabi_d2uiz+0x2e>
    d82a:	d50d      	bpl.n	d848 <__aeabi_d2uiz+0x28>
    d82c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d830:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d834:	d40e      	bmi.n	d854 <__aeabi_d2uiz+0x34>
    d836:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d83a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d83e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d842:	fa23 f002 	lsr.w	r0, r3, r2
    d846:	4770      	bx	lr
    d848:	f04f 0000 	mov.w	r0, #0
    d84c:	4770      	bx	lr
    d84e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d852:	d102      	bne.n	d85a <__aeabi_d2uiz+0x3a>
    d854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d858:	4770      	bx	lr
    d85a:	f04f 0000 	mov.w	r0, #0
    d85e:	4770      	bx	lr

0000d860 <__aeabi_frsub>:
    d860:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    d864:	e002      	b.n	d86c <__addsf3>
    d866:	bf00      	nop

0000d868 <__aeabi_fsub>:
    d868:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000d86c <__addsf3>:
    d86c:	0042      	lsls	r2, r0, #1
    d86e:	bf1f      	itttt	ne
    d870:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    d874:	ea92 0f03 	teqne	r2, r3
    d878:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    d87c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d880:	d06a      	beq.n	d958 <__addsf3+0xec>
    d882:	ea4f 6212 	mov.w	r2, r2, lsr #24
    d886:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    d88a:	bfc1      	itttt	gt
    d88c:	18d2      	addgt	r2, r2, r3
    d88e:	4041      	eorgt	r1, r0
    d890:	4048      	eorgt	r0, r1
    d892:	4041      	eorgt	r1, r0
    d894:	bfb8      	it	lt
    d896:	425b      	neglt	r3, r3
    d898:	2b19      	cmp	r3, #25
    d89a:	bf88      	it	hi
    d89c:	4770      	bxhi	lr
    d89e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d8a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d8a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d8aa:	bf18      	it	ne
    d8ac:	4240      	negne	r0, r0
    d8ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d8b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    d8b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    d8ba:	bf18      	it	ne
    d8bc:	4249      	negne	r1, r1
    d8be:	ea92 0f03 	teq	r2, r3
    d8c2:	d03f      	beq.n	d944 <__addsf3+0xd8>
    d8c4:	f1a2 0201 	sub.w	r2, r2, #1
    d8c8:	fa41 fc03 	asr.w	ip, r1, r3
    d8cc:	eb10 000c 	adds.w	r0, r0, ip
    d8d0:	f1c3 0320 	rsb	r3, r3, #32
    d8d4:	fa01 f103 	lsl.w	r1, r1, r3
    d8d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    d8dc:	d502      	bpl.n	d8e4 <__addsf3+0x78>
    d8de:	4249      	negs	r1, r1
    d8e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    d8e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d8e8:	d313      	bcc.n	d912 <__addsf3+0xa6>
    d8ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    d8ee:	d306      	bcc.n	d8fe <__addsf3+0x92>
    d8f0:	0840      	lsrs	r0, r0, #1
    d8f2:	ea4f 0131 	mov.w	r1, r1, rrx
    d8f6:	f102 0201 	add.w	r2, r2, #1
    d8fa:	2afe      	cmp	r2, #254	; 0xfe
    d8fc:	d251      	bcs.n	d9a2 <__addsf3+0x136>
    d8fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    d902:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d906:	bf08      	it	eq
    d908:	f020 0001 	biceq.w	r0, r0, #1
    d90c:	ea40 0003 	orr.w	r0, r0, r3
    d910:	4770      	bx	lr
    d912:	0049      	lsls	r1, r1, #1
    d914:	eb40 0000 	adc.w	r0, r0, r0
    d918:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    d91c:	f1a2 0201 	sub.w	r2, r2, #1
    d920:	d1ed      	bne.n	d8fe <__addsf3+0x92>
    d922:	fab0 fc80 	clz	ip, r0
    d926:	f1ac 0c08 	sub.w	ip, ip, #8
    d92a:	ebb2 020c 	subs.w	r2, r2, ip
    d92e:	fa00 f00c 	lsl.w	r0, r0, ip
    d932:	bfaa      	itet	ge
    d934:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    d938:	4252      	neglt	r2, r2
    d93a:	4318      	orrge	r0, r3
    d93c:	bfbc      	itt	lt
    d93e:	40d0      	lsrlt	r0, r2
    d940:	4318      	orrlt	r0, r3
    d942:	4770      	bx	lr
    d944:	f092 0f00 	teq	r2, #0
    d948:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    d94c:	bf06      	itte	eq
    d94e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    d952:	3201      	addeq	r2, #1
    d954:	3b01      	subne	r3, #1
    d956:	e7b5      	b.n	d8c4 <__addsf3+0x58>
    d958:	ea4f 0341 	mov.w	r3, r1, lsl #1
    d95c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d960:	bf18      	it	ne
    d962:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d966:	d021      	beq.n	d9ac <__addsf3+0x140>
    d968:	ea92 0f03 	teq	r2, r3
    d96c:	d004      	beq.n	d978 <__addsf3+0x10c>
    d96e:	f092 0f00 	teq	r2, #0
    d972:	bf08      	it	eq
    d974:	4608      	moveq	r0, r1
    d976:	4770      	bx	lr
    d978:	ea90 0f01 	teq	r0, r1
    d97c:	bf1c      	itt	ne
    d97e:	2000      	movne	r0, #0
    d980:	4770      	bxne	lr
    d982:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    d986:	d104      	bne.n	d992 <__addsf3+0x126>
    d988:	0040      	lsls	r0, r0, #1
    d98a:	bf28      	it	cs
    d98c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    d990:	4770      	bx	lr
    d992:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    d996:	bf3c      	itt	cc
    d998:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    d99c:	4770      	bxcc	lr
    d99e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    d9a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    d9a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d9aa:	4770      	bx	lr
    d9ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
    d9b0:	bf16      	itet	ne
    d9b2:	4608      	movne	r0, r1
    d9b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    d9b8:	4601      	movne	r1, r0
    d9ba:	0242      	lsls	r2, r0, #9
    d9bc:	bf06      	itte	eq
    d9be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    d9c2:	ea90 0f01 	teqeq	r0, r1
    d9c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    d9ca:	4770      	bx	lr

0000d9cc <__aeabi_ui2f>:
    d9cc:	f04f 0300 	mov.w	r3, #0
    d9d0:	e004      	b.n	d9dc <__aeabi_i2f+0x8>
    d9d2:	bf00      	nop

0000d9d4 <__aeabi_i2f>:
    d9d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    d9d8:	bf48      	it	mi
    d9da:	4240      	negmi	r0, r0
    d9dc:	ea5f 0c00 	movs.w	ip, r0
    d9e0:	bf08      	it	eq
    d9e2:	4770      	bxeq	lr
    d9e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    d9e8:	4601      	mov	r1, r0
    d9ea:	f04f 0000 	mov.w	r0, #0
    d9ee:	e01c      	b.n	da2a <__aeabi_l2f+0x2a>

0000d9f0 <__aeabi_ul2f>:
    d9f0:	ea50 0201 	orrs.w	r2, r0, r1
    d9f4:	bf08      	it	eq
    d9f6:	4770      	bxeq	lr
    d9f8:	f04f 0300 	mov.w	r3, #0
    d9fc:	e00a      	b.n	da14 <__aeabi_l2f+0x14>
    d9fe:	bf00      	nop

0000da00 <__aeabi_l2f>:
    da00:	ea50 0201 	orrs.w	r2, r0, r1
    da04:	bf08      	it	eq
    da06:	4770      	bxeq	lr
    da08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    da0c:	d502      	bpl.n	da14 <__aeabi_l2f+0x14>
    da0e:	4240      	negs	r0, r0
    da10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    da14:	ea5f 0c01 	movs.w	ip, r1
    da18:	bf02      	ittt	eq
    da1a:	4684      	moveq	ip, r0
    da1c:	4601      	moveq	r1, r0
    da1e:	2000      	moveq	r0, #0
    da20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    da24:	bf08      	it	eq
    da26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    da2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    da2e:	fabc f28c 	clz	r2, ip
    da32:	3a08      	subs	r2, #8
    da34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    da38:	db10      	blt.n	da5c <__aeabi_l2f+0x5c>
    da3a:	fa01 fc02 	lsl.w	ip, r1, r2
    da3e:	4463      	add	r3, ip
    da40:	fa00 fc02 	lsl.w	ip, r0, r2
    da44:	f1c2 0220 	rsb	r2, r2, #32
    da48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    da4c:	fa20 f202 	lsr.w	r2, r0, r2
    da50:	eb43 0002 	adc.w	r0, r3, r2
    da54:	bf08      	it	eq
    da56:	f020 0001 	biceq.w	r0, r0, #1
    da5a:	4770      	bx	lr
    da5c:	f102 0220 	add.w	r2, r2, #32
    da60:	fa01 fc02 	lsl.w	ip, r1, r2
    da64:	f1c2 0220 	rsb	r2, r2, #32
    da68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    da6c:	fa21 f202 	lsr.w	r2, r1, r2
    da70:	eb43 0002 	adc.w	r0, r3, r2
    da74:	bf08      	it	eq
    da76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    da7a:	4770      	bx	lr

0000da7c <__aeabi_fmul>:
    da7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    da80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    da84:	bf1e      	ittt	ne
    da86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    da8a:	ea92 0f0c 	teqne	r2, ip
    da8e:	ea93 0f0c 	teqne	r3, ip
    da92:	d06f      	beq.n	db74 <__aeabi_fmul+0xf8>
    da94:	441a      	add	r2, r3
    da96:	ea80 0c01 	eor.w	ip, r0, r1
    da9a:	0240      	lsls	r0, r0, #9
    da9c:	bf18      	it	ne
    da9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    daa2:	d01e      	beq.n	dae2 <__aeabi_fmul+0x66>
    daa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    daa8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    daac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    dab0:	fba0 3101 	umull	r3, r1, r0, r1
    dab4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    dab8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    dabc:	bf3e      	ittt	cc
    dabe:	0049      	lslcc	r1, r1, #1
    dac0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    dac4:	005b      	lslcc	r3, r3, #1
    dac6:	ea40 0001 	orr.w	r0, r0, r1
    daca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    dace:	2afd      	cmp	r2, #253	; 0xfd
    dad0:	d81d      	bhi.n	db0e <__aeabi_fmul+0x92>
    dad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    dad6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    dada:	bf08      	it	eq
    dadc:	f020 0001 	biceq.w	r0, r0, #1
    dae0:	4770      	bx	lr
    dae2:	f090 0f00 	teq	r0, #0
    dae6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    daea:	bf08      	it	eq
    daec:	0249      	lsleq	r1, r1, #9
    daee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    daf2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    daf6:	3a7f      	subs	r2, #127	; 0x7f
    daf8:	bfc2      	ittt	gt
    dafa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    dafe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    db02:	4770      	bxgt	lr
    db04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    db08:	f04f 0300 	mov.w	r3, #0
    db0c:	3a01      	subs	r2, #1
    db0e:	dc5d      	bgt.n	dbcc <__aeabi_fmul+0x150>
    db10:	f112 0f19 	cmn.w	r2, #25
    db14:	bfdc      	itt	le
    db16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    db1a:	4770      	bxle	lr
    db1c:	f1c2 0200 	rsb	r2, r2, #0
    db20:	0041      	lsls	r1, r0, #1
    db22:	fa21 f102 	lsr.w	r1, r1, r2
    db26:	f1c2 0220 	rsb	r2, r2, #32
    db2a:	fa00 fc02 	lsl.w	ip, r0, r2
    db2e:	ea5f 0031 	movs.w	r0, r1, rrx
    db32:	f140 0000 	adc.w	r0, r0, #0
    db36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    db3a:	bf08      	it	eq
    db3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    db40:	4770      	bx	lr
    db42:	f092 0f00 	teq	r2, #0
    db46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    db4a:	bf02      	ittt	eq
    db4c:	0040      	lsleq	r0, r0, #1
    db4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    db52:	3a01      	subeq	r2, #1
    db54:	d0f9      	beq.n	db4a <__aeabi_fmul+0xce>
    db56:	ea40 000c 	orr.w	r0, r0, ip
    db5a:	f093 0f00 	teq	r3, #0
    db5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    db62:	bf02      	ittt	eq
    db64:	0049      	lsleq	r1, r1, #1
    db66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    db6a:	3b01      	subeq	r3, #1
    db6c:	d0f9      	beq.n	db62 <__aeabi_fmul+0xe6>
    db6e:	ea41 010c 	orr.w	r1, r1, ip
    db72:	e78f      	b.n	da94 <__aeabi_fmul+0x18>
    db74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    db78:	ea92 0f0c 	teq	r2, ip
    db7c:	bf18      	it	ne
    db7e:	ea93 0f0c 	teqne	r3, ip
    db82:	d00a      	beq.n	db9a <__aeabi_fmul+0x11e>
    db84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    db88:	bf18      	it	ne
    db8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    db8e:	d1d8      	bne.n	db42 <__aeabi_fmul+0xc6>
    db90:	ea80 0001 	eor.w	r0, r0, r1
    db94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    db98:	4770      	bx	lr
    db9a:	f090 0f00 	teq	r0, #0
    db9e:	bf17      	itett	ne
    dba0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    dba4:	4608      	moveq	r0, r1
    dba6:	f091 0f00 	teqne	r1, #0
    dbaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    dbae:	d014      	beq.n	dbda <__aeabi_fmul+0x15e>
    dbb0:	ea92 0f0c 	teq	r2, ip
    dbb4:	d101      	bne.n	dbba <__aeabi_fmul+0x13e>
    dbb6:	0242      	lsls	r2, r0, #9
    dbb8:	d10f      	bne.n	dbda <__aeabi_fmul+0x15e>
    dbba:	ea93 0f0c 	teq	r3, ip
    dbbe:	d103      	bne.n	dbc8 <__aeabi_fmul+0x14c>
    dbc0:	024b      	lsls	r3, r1, #9
    dbc2:	bf18      	it	ne
    dbc4:	4608      	movne	r0, r1
    dbc6:	d108      	bne.n	dbda <__aeabi_fmul+0x15e>
    dbc8:	ea80 0001 	eor.w	r0, r0, r1
    dbcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    dbd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    dbd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    dbd8:	4770      	bx	lr
    dbda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    dbde:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    dbe2:	4770      	bx	lr

0000dbe4 <__aeabi_fdiv>:
    dbe4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    dbe8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    dbec:	bf1e      	ittt	ne
    dbee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    dbf2:	ea92 0f0c 	teqne	r2, ip
    dbf6:	ea93 0f0c 	teqne	r3, ip
    dbfa:	d069      	beq.n	dcd0 <__aeabi_fdiv+0xec>
    dbfc:	eba2 0203 	sub.w	r2, r2, r3
    dc00:	ea80 0c01 	eor.w	ip, r0, r1
    dc04:	0249      	lsls	r1, r1, #9
    dc06:	ea4f 2040 	mov.w	r0, r0, lsl #9
    dc0a:	d037      	beq.n	dc7c <__aeabi_fdiv+0x98>
    dc0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dc10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    dc14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    dc18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    dc1c:	428b      	cmp	r3, r1
    dc1e:	bf38      	it	cc
    dc20:	005b      	lslcc	r3, r3, #1
    dc22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    dc26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    dc2a:	428b      	cmp	r3, r1
    dc2c:	bf24      	itt	cs
    dc2e:	1a5b      	subcs	r3, r3, r1
    dc30:	ea40 000c 	orrcs.w	r0, r0, ip
    dc34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    dc38:	bf24      	itt	cs
    dc3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    dc3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    dc42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    dc46:	bf24      	itt	cs
    dc48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    dc4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    dc50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    dc54:	bf24      	itt	cs
    dc56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    dc5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    dc5e:	011b      	lsls	r3, r3, #4
    dc60:	bf18      	it	ne
    dc62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    dc66:	d1e0      	bne.n	dc2a <__aeabi_fdiv+0x46>
    dc68:	2afd      	cmp	r2, #253	; 0xfd
    dc6a:	f63f af50 	bhi.w	db0e <__aeabi_fmul+0x92>
    dc6e:	428b      	cmp	r3, r1
    dc70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    dc74:	bf08      	it	eq
    dc76:	f020 0001 	biceq.w	r0, r0, #1
    dc7a:	4770      	bx	lr
    dc7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    dc80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    dc84:	327f      	adds	r2, #127	; 0x7f
    dc86:	bfc2      	ittt	gt
    dc88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    dc8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    dc90:	4770      	bxgt	lr
    dc92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    dc96:	f04f 0300 	mov.w	r3, #0
    dc9a:	3a01      	subs	r2, #1
    dc9c:	e737      	b.n	db0e <__aeabi_fmul+0x92>
    dc9e:	f092 0f00 	teq	r2, #0
    dca2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    dca6:	bf02      	ittt	eq
    dca8:	0040      	lsleq	r0, r0, #1
    dcaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    dcae:	3a01      	subeq	r2, #1
    dcb0:	d0f9      	beq.n	dca6 <__aeabi_fdiv+0xc2>
    dcb2:	ea40 000c 	orr.w	r0, r0, ip
    dcb6:	f093 0f00 	teq	r3, #0
    dcba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    dcbe:	bf02      	ittt	eq
    dcc0:	0049      	lsleq	r1, r1, #1
    dcc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    dcc6:	3b01      	subeq	r3, #1
    dcc8:	d0f9      	beq.n	dcbe <__aeabi_fdiv+0xda>
    dcca:	ea41 010c 	orr.w	r1, r1, ip
    dcce:	e795      	b.n	dbfc <__aeabi_fdiv+0x18>
    dcd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    dcd4:	ea92 0f0c 	teq	r2, ip
    dcd8:	d108      	bne.n	dcec <__aeabi_fdiv+0x108>
    dcda:	0242      	lsls	r2, r0, #9
    dcdc:	f47f af7d 	bne.w	dbda <__aeabi_fmul+0x15e>
    dce0:	ea93 0f0c 	teq	r3, ip
    dce4:	f47f af70 	bne.w	dbc8 <__aeabi_fmul+0x14c>
    dce8:	4608      	mov	r0, r1
    dcea:	e776      	b.n	dbda <__aeabi_fmul+0x15e>
    dcec:	ea93 0f0c 	teq	r3, ip
    dcf0:	d104      	bne.n	dcfc <__aeabi_fdiv+0x118>
    dcf2:	024b      	lsls	r3, r1, #9
    dcf4:	f43f af4c 	beq.w	db90 <__aeabi_fmul+0x114>
    dcf8:	4608      	mov	r0, r1
    dcfa:	e76e      	b.n	dbda <__aeabi_fmul+0x15e>
    dcfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    dd00:	bf18      	it	ne
    dd02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    dd06:	d1ca      	bne.n	dc9e <__aeabi_fdiv+0xba>
    dd08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    dd0c:	f47f af5c 	bne.w	dbc8 <__aeabi_fmul+0x14c>
    dd10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    dd14:	f47f af3c 	bne.w	db90 <__aeabi_fmul+0x114>
    dd18:	e75f      	b.n	dbda <__aeabi_fmul+0x15e>
    dd1a:	bf00      	nop

0000dd1c <__gesf2>:
    dd1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    dd20:	e006      	b.n	dd30 <__cmpsf2+0x4>
    dd22:	bf00      	nop

0000dd24 <__lesf2>:
    dd24:	f04f 0c01 	mov.w	ip, #1
    dd28:	e002      	b.n	dd30 <__cmpsf2+0x4>
    dd2a:	bf00      	nop

0000dd2c <__cmpsf2>:
    dd2c:	f04f 0c01 	mov.w	ip, #1
    dd30:	f84d cd04 	str.w	ip, [sp, #-4]!
    dd34:	ea4f 0240 	mov.w	r2, r0, lsl #1
    dd38:	ea4f 0341 	mov.w	r3, r1, lsl #1
    dd3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    dd40:	bf18      	it	ne
    dd42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    dd46:	d011      	beq.n	dd6c <__cmpsf2+0x40>
    dd48:	b001      	add	sp, #4
    dd4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    dd4e:	bf18      	it	ne
    dd50:	ea90 0f01 	teqne	r0, r1
    dd54:	bf58      	it	pl
    dd56:	ebb2 0003 	subspl.w	r0, r2, r3
    dd5a:	bf88      	it	hi
    dd5c:	17c8      	asrhi	r0, r1, #31
    dd5e:	bf38      	it	cc
    dd60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    dd64:	bf18      	it	ne
    dd66:	f040 0001 	orrne.w	r0, r0, #1
    dd6a:	4770      	bx	lr
    dd6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    dd70:	d102      	bne.n	dd78 <__cmpsf2+0x4c>
    dd72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    dd76:	d105      	bne.n	dd84 <__cmpsf2+0x58>
    dd78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    dd7c:	d1e4      	bne.n	dd48 <__cmpsf2+0x1c>
    dd7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    dd82:	d0e1      	beq.n	dd48 <__cmpsf2+0x1c>
    dd84:	f85d 0b04 	ldr.w	r0, [sp], #4
    dd88:	4770      	bx	lr
    dd8a:	bf00      	nop

0000dd8c <__aeabi_cfrcmple>:
    dd8c:	4684      	mov	ip, r0
    dd8e:	4608      	mov	r0, r1
    dd90:	4661      	mov	r1, ip
    dd92:	e7ff      	b.n	dd94 <__aeabi_cfcmpeq>

0000dd94 <__aeabi_cfcmpeq>:
    dd94:	b50f      	push	{r0, r1, r2, r3, lr}
    dd96:	f7ff ffc9 	bl	dd2c <__cmpsf2>
    dd9a:	2800      	cmp	r0, #0
    dd9c:	bf48      	it	mi
    dd9e:	f110 0f00 	cmnmi.w	r0, #0
    dda2:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000dda4 <__aeabi_fcmpeq>:
    dda4:	f84d ed08 	str.w	lr, [sp, #-8]!
    dda8:	f7ff fff4 	bl	dd94 <__aeabi_cfcmpeq>
    ddac:	bf0c      	ite	eq
    ddae:	2001      	moveq	r0, #1
    ddb0:	2000      	movne	r0, #0
    ddb2:	f85d fb08 	ldr.w	pc, [sp], #8
    ddb6:	bf00      	nop

0000ddb8 <__aeabi_fcmplt>:
    ddb8:	f84d ed08 	str.w	lr, [sp, #-8]!
    ddbc:	f7ff ffea 	bl	dd94 <__aeabi_cfcmpeq>
    ddc0:	bf34      	ite	cc
    ddc2:	2001      	movcc	r0, #1
    ddc4:	2000      	movcs	r0, #0
    ddc6:	f85d fb08 	ldr.w	pc, [sp], #8
    ddca:	bf00      	nop

0000ddcc <__aeabi_fcmple>:
    ddcc:	f84d ed08 	str.w	lr, [sp, #-8]!
    ddd0:	f7ff ffe0 	bl	dd94 <__aeabi_cfcmpeq>
    ddd4:	bf94      	ite	ls
    ddd6:	2001      	movls	r0, #1
    ddd8:	2000      	movhi	r0, #0
    ddda:	f85d fb08 	ldr.w	pc, [sp], #8
    ddde:	bf00      	nop

0000dde0 <__aeabi_fcmpge>:
    dde0:	f84d ed08 	str.w	lr, [sp, #-8]!
    dde4:	f7ff ffd2 	bl	dd8c <__aeabi_cfrcmple>
    dde8:	bf94      	ite	ls
    ddea:	2001      	movls	r0, #1
    ddec:	2000      	movhi	r0, #0
    ddee:	f85d fb08 	ldr.w	pc, [sp], #8
    ddf2:	bf00      	nop

0000ddf4 <__aeabi_fcmpgt>:
    ddf4:	f84d ed08 	str.w	lr, [sp, #-8]!
    ddf8:	f7ff ffc8 	bl	dd8c <__aeabi_cfrcmple>
    ddfc:	bf34      	ite	cc
    ddfe:	2001      	movcc	r0, #1
    de00:	2000      	movcs	r0, #0
    de02:	f85d fb08 	ldr.w	pc, [sp], #8
    de06:	bf00      	nop

0000de08 <__aeabi_f2uiz>:
    de08:	0042      	lsls	r2, r0, #1
    de0a:	d20e      	bcs.n	de2a <__aeabi_f2uiz+0x22>
    de0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    de10:	d30b      	bcc.n	de2a <__aeabi_f2uiz+0x22>
    de12:	f04f 039e 	mov.w	r3, #158	; 0x9e
    de16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    de1a:	d409      	bmi.n	de30 <__aeabi_f2uiz+0x28>
    de1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    de20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    de24:	fa23 f002 	lsr.w	r0, r3, r2
    de28:	4770      	bx	lr
    de2a:	f04f 0000 	mov.w	r0, #0
    de2e:	4770      	bx	lr
    de30:	f112 0f61 	cmn.w	r2, #97	; 0x61
    de34:	d101      	bne.n	de3a <__aeabi_f2uiz+0x32>
    de36:	0242      	lsls	r2, r0, #9
    de38:	d102      	bne.n	de40 <__aeabi_f2uiz+0x38>
    de3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    de3e:	4770      	bx	lr
    de40:	f04f 0000 	mov.w	r0, #0
    de44:	4770      	bx	lr
    de46:	bf00      	nop

0000de48 <selfrel_offset31>:
    de48:	6803      	ldr	r3, [r0, #0]
    de4a:	005a      	lsls	r2, r3, #1
    de4c:	bf4c      	ite	mi
    de4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    de52:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    de56:	4418      	add	r0, r3
    de58:	4770      	bx	lr
    de5a:	bf00      	nop

0000de5c <search_EIT_table>:
    de5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de60:	4606      	mov	r6, r0
    de62:	b083      	sub	sp, #12
    de64:	4691      	mov	r9, r2
    de66:	b321      	cbz	r1, deb2 <search_EIT_table+0x56>
    de68:	3901      	subs	r1, #1
    de6a:	9101      	str	r1, [sp, #4]
    de6c:	4688      	mov	r8, r1
    de6e:	2700      	movs	r7, #0
    de70:	eb07 0408 	add.w	r4, r7, r8
    de74:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    de78:	1064      	asrs	r4, r4, #1
    de7a:	00e5      	lsls	r5, r4, #3
    de7c:	eb06 0b05 	add.w	fp, r6, r5
    de80:	4658      	mov	r0, fp
    de82:	f7ff ffe1 	bl	de48 <selfrel_offset31>
    de86:	9b01      	ldr	r3, [sp, #4]
    de88:	4682      	mov	sl, r0
    de8a:	42a3      	cmp	r3, r4
    de8c:	f105 0008 	add.w	r0, r5, #8
    de90:	4430      	add	r0, r6
    de92:	d019      	beq.n	dec8 <search_EIT_table+0x6c>
    de94:	f7ff ffd8 	bl	de48 <selfrel_offset31>
    de98:	45ca      	cmp	sl, r9
    de9a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    de9e:	d904      	bls.n	deaa <search_EIT_table+0x4e>
    dea0:	42bc      	cmp	r4, r7
    dea2:	d00b      	beq.n	debc <search_EIT_table+0x60>
    dea4:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    dea8:	e7e2      	b.n	de70 <search_EIT_table+0x14>
    deaa:	4548      	cmp	r0, r9
    deac:	d202      	bcs.n	deb4 <search_EIT_table+0x58>
    deae:	1c67      	adds	r7, r4, #1
    deb0:	e7de      	b.n	de70 <search_EIT_table+0x14>
    deb2:	468b      	mov	fp, r1
    deb4:	4658      	mov	r0, fp
    deb6:	b003      	add	sp, #12
    deb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    debc:	f04f 0b00 	mov.w	fp, #0
    dec0:	4658      	mov	r0, fp
    dec2:	b003      	add	sp, #12
    dec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dec8:	45ca      	cmp	sl, r9
    deca:	d8e9      	bhi.n	dea0 <search_EIT_table+0x44>
    decc:	e7f2      	b.n	deb4 <search_EIT_table+0x58>
    dece:	bf00      	nop

0000ded0 <__gnu_unwind_get_pr_addr>:
    ded0:	2801      	cmp	r0, #1
    ded2:	d007      	beq.n	dee4 <__gnu_unwind_get_pr_addr+0x14>
    ded4:	2802      	cmp	r0, #2
    ded6:	d007      	beq.n	dee8 <__gnu_unwind_get_pr_addr+0x18>
    ded8:	4b04      	ldr	r3, [pc, #16]	; (deec <__gnu_unwind_get_pr_addr+0x1c>)
    deda:	2800      	cmp	r0, #0
    dedc:	bf0c      	ite	eq
    dede:	4618      	moveq	r0, r3
    dee0:	2000      	movne	r0, #0
    dee2:	4770      	bx	lr
    dee4:	4802      	ldr	r0, [pc, #8]	; (def0 <__gnu_unwind_get_pr_addr+0x20>)
    dee6:	4770      	bx	lr
    dee8:	4802      	ldr	r0, [pc, #8]	; (def4 <__gnu_unwind_get_pr_addr+0x24>)
    deea:	4770      	bx	lr
    deec:	0000e601 	.word	0x0000e601
    def0:	0000e609 	.word	0x0000e609
    def4:	0000e611 	.word	0x0000e611

0000def8 <get_eit_entry>:
    def8:	b530      	push	{r4, r5, lr}
    defa:	4b27      	ldr	r3, [pc, #156]	; (df98 <get_eit_entry+0xa0>)
    defc:	b083      	sub	sp, #12
    defe:	4604      	mov	r4, r0
    df00:	1e8d      	subs	r5, r1, #2
    df02:	2b00      	cmp	r3, #0
    df04:	d042      	beq.n	df8c <get_eit_entry+0x94>
    df06:	4628      	mov	r0, r5
    df08:	a901      	add	r1, sp, #4
    df0a:	f3af 8000 	nop.w
    df0e:	4603      	mov	r3, r0
    df10:	b323      	cbz	r3, df5c <get_eit_entry+0x64>
    df12:	462a      	mov	r2, r5
    df14:	9901      	ldr	r1, [sp, #4]
    df16:	f7ff ffa1 	bl	de5c <search_EIT_table>
    df1a:	4605      	mov	r5, r0
    df1c:	b318      	cbz	r0, df66 <get_eit_entry+0x6e>
    df1e:	f7ff ff93 	bl	de48 <selfrel_offset31>
    df22:	686b      	ldr	r3, [r5, #4]
    df24:	64a0      	str	r0, [r4, #72]	; 0x48
    df26:	2b01      	cmp	r3, #1
    df28:	d012      	beq.n	df50 <get_eit_entry+0x58>
    df2a:	2b00      	cmp	r3, #0
    df2c:	f105 0004 	add.w	r0, r5, #4
    df30:	db28      	blt.n	df84 <get_eit_entry+0x8c>
    df32:	f7ff ff89 	bl	de48 <selfrel_offset31>
    df36:	2300      	movs	r3, #0
    df38:	64e0      	str	r0, [r4, #76]	; 0x4c
    df3a:	6523      	str	r3, [r4, #80]	; 0x50
    df3c:	6803      	ldr	r3, [r0, #0]
    df3e:	2b00      	cmp	r3, #0
    df40:	db16      	blt.n	df70 <get_eit_entry+0x78>
    df42:	f7ff ff81 	bl	de48 <selfrel_offset31>
    df46:	2300      	movs	r3, #0
    df48:	6120      	str	r0, [r4, #16]
    df4a:	4618      	mov	r0, r3
    df4c:	b003      	add	sp, #12
    df4e:	bd30      	pop	{r4, r5, pc}
    df50:	2300      	movs	r3, #0
    df52:	6123      	str	r3, [r4, #16]
    df54:	2305      	movs	r3, #5
    df56:	4618      	mov	r0, r3
    df58:	b003      	add	sp, #12
    df5a:	bd30      	pop	{r4, r5, pc}
    df5c:	6123      	str	r3, [r4, #16]
    df5e:	2309      	movs	r3, #9
    df60:	4618      	mov	r0, r3
    df62:	b003      	add	sp, #12
    df64:	bd30      	pop	{r4, r5, pc}
    df66:	2309      	movs	r3, #9
    df68:	6120      	str	r0, [r4, #16]
    df6a:	4618      	mov	r0, r3
    df6c:	b003      	add	sp, #12
    df6e:	bd30      	pop	{r4, r5, pc}
    df70:	f3c3 6003 	ubfx	r0, r3, #24, #4
    df74:	f7ff ffac 	bl	ded0 <__gnu_unwind_get_pr_addr>
    df78:	2800      	cmp	r0, #0
    df7a:	6120      	str	r0, [r4, #16]
    df7c:	bf14      	ite	ne
    df7e:	2300      	movne	r3, #0
    df80:	2309      	moveq	r3, #9
    df82:	e7e2      	b.n	df4a <get_eit_entry+0x52>
    df84:	2301      	movs	r3, #1
    df86:	64e0      	str	r0, [r4, #76]	; 0x4c
    df88:	6523      	str	r3, [r4, #80]	; 0x50
    df8a:	e7d7      	b.n	df3c <get_eit_entry+0x44>
    df8c:	4b03      	ldr	r3, [pc, #12]	; (df9c <get_eit_entry+0xa4>)
    df8e:	4804      	ldr	r0, [pc, #16]	; (dfa0 <get_eit_entry+0xa8>)
    df90:	1a1b      	subs	r3, r3, r0
    df92:	10db      	asrs	r3, r3, #3
    df94:	9301      	str	r3, [sp, #4]
    df96:	e7bc      	b.n	df12 <get_eit_entry+0x1a>
    df98:	00000000 	.word	0x00000000
    df9c:	00015c8c 	.word	0x00015c8c
    dfa0:	00015ad4 	.word	0x00015ad4

0000dfa4 <restore_non_core_regs>:
    dfa4:	6803      	ldr	r3, [r0, #0]
    dfa6:	07da      	lsls	r2, r3, #31
    dfa8:	b510      	push	{r4, lr}
    dfaa:	4604      	mov	r4, r0
    dfac:	d406      	bmi.n	dfbc <restore_non_core_regs+0x18>
    dfae:	079b      	lsls	r3, r3, #30
    dfb0:	f100 0048 	add.w	r0, r0, #72	; 0x48
    dfb4:	d509      	bpl.n	dfca <restore_non_core_regs+0x26>
    dfb6:	f000 fc69 	bl	e88c <__gnu_Unwind_Restore_VFP_D>
    dfba:	6823      	ldr	r3, [r4, #0]
    dfbc:	0759      	lsls	r1, r3, #29
    dfbe:	d509      	bpl.n	dfd4 <restore_non_core_regs+0x30>
    dfc0:	071a      	lsls	r2, r3, #28
    dfc2:	d50e      	bpl.n	dfe2 <restore_non_core_regs+0x3e>
    dfc4:	06db      	lsls	r3, r3, #27
    dfc6:	d513      	bpl.n	dff0 <restore_non_core_regs+0x4c>
    dfc8:	bd10      	pop	{r4, pc}
    dfca:	f000 fc57 	bl	e87c <__gnu_Unwind_Restore_VFP>
    dfce:	6823      	ldr	r3, [r4, #0]
    dfd0:	0759      	lsls	r1, r3, #29
    dfd2:	d4f5      	bmi.n	dfc0 <restore_non_core_regs+0x1c>
    dfd4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    dfd8:	f000 fc60 	bl	e89c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    dfdc:	6823      	ldr	r3, [r4, #0]
    dfde:	071a      	lsls	r2, r3, #28
    dfe0:	d4f0      	bmi.n	dfc4 <restore_non_core_regs+0x20>
    dfe2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    dfe6:	f000 fc61 	bl	e8ac <__gnu_Unwind_Restore_WMMXD>
    dfea:	6823      	ldr	r3, [r4, #0]
    dfec:	06db      	lsls	r3, r3, #27
    dfee:	d4eb      	bmi.n	dfc8 <restore_non_core_regs+0x24>
    dff0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    dff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dff8:	f000 bc9c 	b.w	e934 <__gnu_Unwind_Restore_WMMXC>

0000dffc <_Unwind_decode_typeinfo_ptr.isra.0>:
    dffc:	6803      	ldr	r3, [r0, #0]
    dffe:	b10b      	cbz	r3, e004 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    e000:	4418      	add	r0, r3
    e002:	4770      	bx	lr
    e004:	4618      	mov	r0, r3
    e006:	4770      	bx	lr

0000e008 <__gnu_unwind_24bit.isra.1>:
    e008:	2009      	movs	r0, #9
    e00a:	4770      	bx	lr

0000e00c <_Unwind_DebugHook>:
    e00c:	4770      	bx	lr
    e00e:	bf00      	nop

0000e010 <unwind_phase2>:
    e010:	b570      	push	{r4, r5, r6, lr}
    e012:	4604      	mov	r4, r0
    e014:	460d      	mov	r5, r1
    e016:	e008      	b.n	e02a <unwind_phase2+0x1a>
    e018:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    e01a:	6163      	str	r3, [r4, #20]
    e01c:	2001      	movs	r0, #1
    e01e:	6923      	ldr	r3, [r4, #16]
    e020:	4621      	mov	r1, r4
    e022:	462a      	mov	r2, r5
    e024:	4798      	blx	r3
    e026:	2808      	cmp	r0, #8
    e028:	d108      	bne.n	e03c <unwind_phase2+0x2c>
    e02a:	4620      	mov	r0, r4
    e02c:	6c29      	ldr	r1, [r5, #64]	; 0x40
    e02e:	f7ff ff63 	bl	def8 <get_eit_entry>
    e032:	4606      	mov	r6, r0
    e034:	2800      	cmp	r0, #0
    e036:	d0ef      	beq.n	e018 <unwind_phase2+0x8>
    e038:	f000 fe88 	bl	ed4c <abort>
    e03c:	2807      	cmp	r0, #7
    e03e:	d1fb      	bne.n	e038 <unwind_phase2+0x28>
    e040:	4630      	mov	r0, r6
    e042:	6c29      	ldr	r1, [r5, #64]	; 0x40
    e044:	f7ff ffe2 	bl	e00c <_Unwind_DebugHook>
    e048:	1d28      	adds	r0, r5, #4
    e04a:	f000 fc0b 	bl	e864 <__restore_core_regs>
    e04e:	bf00      	nop

0000e050 <unwind_phase2_forced>:
    e050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e054:	1d0c      	adds	r4, r1, #4
    e056:	4605      	mov	r5, r0
    e058:	4617      	mov	r7, r2
    e05a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e05c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    e060:	ae03      	add	r6, sp, #12
    e062:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e066:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e06a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e06c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e070:	ac02      	add	r4, sp, #8
    e072:	f04f 0e00 	mov.w	lr, #0
    e076:	f8d5 800c 	ldr.w	r8, [r5, #12]
    e07a:	f8d5 9018 	ldr.w	r9, [r5, #24]
    e07e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    e082:	4628      	mov	r0, r5
    e084:	6c21      	ldr	r1, [r4, #64]	; 0x40
    e086:	f8c4 e000 	str.w	lr, [r4]
    e08a:	f7ff ff35 	bl	def8 <get_eit_entry>
    e08e:	2f00      	cmp	r7, #0
    e090:	4606      	mov	r6, r0
    e092:	bf14      	ite	ne
    e094:	270a      	movne	r7, #10
    e096:	2709      	moveq	r7, #9
    e098:	b186      	cbz	r6, e0bc <unwind_phase2_forced+0x6c>
    e09a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e09c:	462a      	mov	r2, r5
    e09e:	e88d 0210 	stmia.w	sp, {r4, r9}
    e0a2:	f047 0110 	orr.w	r1, r7, #16
    e0a6:	6460      	str	r0, [r4, #68]	; 0x44
    e0a8:	462b      	mov	r3, r5
    e0aa:	2001      	movs	r0, #1
    e0ac:	47c0      	blx	r8
    e0ae:	2800      	cmp	r0, #0
    e0b0:	d12f      	bne.n	e112 <unwind_phase2_forced+0xc2>
    e0b2:	4630      	mov	r0, r6
    e0b4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    e0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e0be:	616b      	str	r3, [r5, #20]
    e0c0:	4621      	mov	r1, r4
    e0c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    e0c6:	a87a      	add	r0, sp, #488	; 0x1e8
    e0c8:	f001 fbb2 	bl	f830 <memcpy>
    e0cc:	692b      	ldr	r3, [r5, #16]
    e0ce:	4629      	mov	r1, r5
    e0d0:	aa7a      	add	r2, sp, #488	; 0x1e8
    e0d2:	4638      	mov	r0, r7
    e0d4:	4798      	blx	r3
    e0d6:	9b88      	ldr	r3, [sp, #544]	; 0x220
    e0d8:	4682      	mov	sl, r0
    e0da:	e88d 0210 	stmia.w	sp, {r4, r9}
    e0de:	4639      	mov	r1, r7
    e0e0:	6463      	str	r3, [r4, #68]	; 0x44
    e0e2:	2001      	movs	r0, #1
    e0e4:	462a      	mov	r2, r5
    e0e6:	462b      	mov	r3, r5
    e0e8:	47c0      	blx	r8
    e0ea:	b990      	cbnz	r0, e112 <unwind_phase2_forced+0xc2>
    e0ec:	4620      	mov	r0, r4
    e0ee:	a97a      	add	r1, sp, #488	; 0x1e8
    e0f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    e0f4:	f001 fb9c 	bl	f830 <memcpy>
    e0f8:	f1ba 0f08 	cmp.w	sl, #8
    e0fc:	d106      	bne.n	e10c <unwind_phase2_forced+0xbc>
    e0fe:	4628      	mov	r0, r5
    e100:	6c21      	ldr	r1, [r4, #64]	; 0x40
    e102:	f7ff fef9 	bl	def8 <get_eit_entry>
    e106:	2709      	movs	r7, #9
    e108:	4606      	mov	r6, r0
    e10a:	e7c5      	b.n	e098 <unwind_phase2_forced+0x48>
    e10c:	f1ba 0f07 	cmp.w	sl, #7
    e110:	d004      	beq.n	e11c <unwind_phase2_forced+0xcc>
    e112:	2009      	movs	r0, #9
    e114:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    e118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e11c:	4630      	mov	r0, r6
    e11e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    e120:	f7ff ff74 	bl	e00c <_Unwind_DebugHook>
    e124:	a803      	add	r0, sp, #12
    e126:	f000 fb9d 	bl	e864 <__restore_core_regs>
    e12a:	bf00      	nop

0000e12c <_Unwind_GetCFA>:
    e12c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    e12e:	4770      	bx	lr

0000e130 <__gnu_Unwind_RaiseException>:
    e130:	b5f0      	push	{r4, r5, r6, r7, lr}
    e132:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    e134:	640b      	str	r3, [r1, #64]	; 0x40
    e136:	1d0e      	adds	r6, r1, #4
    e138:	460f      	mov	r7, r1
    e13a:	4604      	mov	r4, r0
    e13c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e13e:	b0f9      	sub	sp, #484	; 0x1e4
    e140:	ad01      	add	r5, sp, #4
    e142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e144:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e148:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e14a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e14c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e150:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    e154:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    e158:	9600      	str	r6, [sp, #0]
    e15a:	e006      	b.n	e16a <__gnu_Unwind_RaiseException+0x3a>
    e15c:	6923      	ldr	r3, [r4, #16]
    e15e:	4621      	mov	r1, r4
    e160:	466a      	mov	r2, sp
    e162:	4798      	blx	r3
    e164:	2808      	cmp	r0, #8
    e166:	4605      	mov	r5, r0
    e168:	d108      	bne.n	e17c <__gnu_Unwind_RaiseException+0x4c>
    e16a:	4620      	mov	r0, r4
    e16c:	9910      	ldr	r1, [sp, #64]	; 0x40
    e16e:	f7ff fec3 	bl	def8 <get_eit_entry>
    e172:	2800      	cmp	r0, #0
    e174:	d0f2      	beq.n	e15c <__gnu_Unwind_RaiseException+0x2c>
    e176:	2009      	movs	r0, #9
    e178:	b079      	add	sp, #484	; 0x1e4
    e17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e17c:	4668      	mov	r0, sp
    e17e:	f7ff ff11 	bl	dfa4 <restore_non_core_regs>
    e182:	2d06      	cmp	r5, #6
    e184:	d1f7      	bne.n	e176 <__gnu_Unwind_RaiseException+0x46>
    e186:	4620      	mov	r0, r4
    e188:	4639      	mov	r1, r7
    e18a:	f7ff ff41 	bl	e010 <unwind_phase2>
    e18e:	bf00      	nop

0000e190 <__gnu_Unwind_ForcedUnwind>:
    e190:	b430      	push	{r4, r5}
    e192:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    e194:	60c1      	str	r1, [r0, #12]
    e196:	6182      	str	r2, [r0, #24]
    e198:	4619      	mov	r1, r3
    e19a:	641d      	str	r5, [r3, #64]	; 0x40
    e19c:	2200      	movs	r2, #0
    e19e:	bc30      	pop	{r4, r5}
    e1a0:	f7ff bf56 	b.w	e050 <unwind_phase2_forced>

0000e1a4 <__gnu_Unwind_Resume>:
    e1a4:	b570      	push	{r4, r5, r6, lr}
    e1a6:	68c6      	ldr	r6, [r0, #12]
    e1a8:	6943      	ldr	r3, [r0, #20]
    e1aa:	640b      	str	r3, [r1, #64]	; 0x40
    e1ac:	4604      	mov	r4, r0
    e1ae:	460d      	mov	r5, r1
    e1b0:	b126      	cbz	r6, e1bc <__gnu_Unwind_Resume+0x18>
    e1b2:	2201      	movs	r2, #1
    e1b4:	f7ff ff4c 	bl	e050 <unwind_phase2_forced>
    e1b8:	f000 fdc8 	bl	ed4c <abort>
    e1bc:	6903      	ldr	r3, [r0, #16]
    e1be:	4621      	mov	r1, r4
    e1c0:	2002      	movs	r0, #2
    e1c2:	462a      	mov	r2, r5
    e1c4:	4798      	blx	r3
    e1c6:	2807      	cmp	r0, #7
    e1c8:	d007      	beq.n	e1da <__gnu_Unwind_Resume+0x36>
    e1ca:	2808      	cmp	r0, #8
    e1cc:	d103      	bne.n	e1d6 <__gnu_Unwind_Resume+0x32>
    e1ce:	4620      	mov	r0, r4
    e1d0:	4629      	mov	r1, r5
    e1d2:	f7ff ff1d 	bl	e010 <unwind_phase2>
    e1d6:	f000 fdb9 	bl	ed4c <abort>
    e1da:	4630      	mov	r0, r6
    e1dc:	6c29      	ldr	r1, [r5, #64]	; 0x40
    e1de:	f7ff ff15 	bl	e00c <_Unwind_DebugHook>
    e1e2:	1d28      	adds	r0, r5, #4
    e1e4:	f000 fb3e 	bl	e864 <__restore_core_regs>

0000e1e8 <__gnu_Unwind_Resume_or_Rethrow>:
    e1e8:	68c2      	ldr	r2, [r0, #12]
    e1ea:	b122      	cbz	r2, e1f6 <__gnu_Unwind_Resume_or_Rethrow+0xe>
    e1ec:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    e1ee:	640a      	str	r2, [r1, #64]	; 0x40
    e1f0:	2200      	movs	r2, #0
    e1f2:	f7ff bf2d 	b.w	e050 <unwind_phase2_forced>
    e1f6:	e79b      	b.n	e130 <__gnu_Unwind_RaiseException>

0000e1f8 <_Unwind_Complete>:
    e1f8:	4770      	bx	lr
    e1fa:	bf00      	nop

0000e1fc <_Unwind_DeleteException>:
    e1fc:	b508      	push	{r3, lr}
    e1fe:	6883      	ldr	r3, [r0, #8]
    e200:	b113      	cbz	r3, e208 <_Unwind_DeleteException+0xc>
    e202:	4601      	mov	r1, r0
    e204:	2001      	movs	r0, #1
    e206:	4798      	blx	r3
    e208:	bd08      	pop	{r3, pc}
    e20a:	bf00      	nop

0000e20c <_Unwind_VRS_Get>:
    e20c:	b410      	push	{r4}
    e20e:	2904      	cmp	r1, #4
    e210:	d809      	bhi.n	e226 <_Unwind_VRS_Get+0x1a>
    e212:	e8df f001 	tbb	[pc, r1]
    e216:	0307      	.short	0x0307
    e218:	0308      	.short	0x0308
    e21a:	03          	.byte	0x03
    e21b:	00          	.byte	0x00
    e21c:	2001      	movs	r0, #1
    e21e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e222:	4770      	bx	lr
    e224:	b11b      	cbz	r3, e22e <_Unwind_VRS_Get+0x22>
    e226:	2002      	movs	r0, #2
    e228:	f85d 4b04 	ldr.w	r4, [sp], #4
    e22c:	4770      	bx	lr
    e22e:	2a0f      	cmp	r2, #15
    e230:	d8f9      	bhi.n	e226 <_Unwind_VRS_Get+0x1a>
    e232:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    e236:	4618      	mov	r0, r3
    e238:	6853      	ldr	r3, [r2, #4]
    e23a:	9a01      	ldr	r2, [sp, #4]
    e23c:	6013      	str	r3, [r2, #0]
    e23e:	e7ee      	b.n	e21e <_Unwind_VRS_Get+0x12>

0000e240 <_Unwind_GetGR>:
    e240:	b500      	push	{lr}
    e242:	b085      	sub	sp, #20
    e244:	460a      	mov	r2, r1
    e246:	ab03      	add	r3, sp, #12
    e248:	2100      	movs	r1, #0
    e24a:	9300      	str	r3, [sp, #0]
    e24c:	460b      	mov	r3, r1
    e24e:	f7ff ffdd 	bl	e20c <_Unwind_VRS_Get>
    e252:	9803      	ldr	r0, [sp, #12]
    e254:	b005      	add	sp, #20
    e256:	f85d fb04 	ldr.w	pc, [sp], #4
    e25a:	bf00      	nop

0000e25c <_Unwind_VRS_Set>:
    e25c:	b410      	push	{r4}
    e25e:	2904      	cmp	r1, #4
    e260:	d809      	bhi.n	e276 <_Unwind_VRS_Set+0x1a>
    e262:	e8df f001 	tbb	[pc, r1]
    e266:	0307      	.short	0x0307
    e268:	0308      	.short	0x0308
    e26a:	03          	.byte	0x03
    e26b:	00          	.byte	0x00
    e26c:	2001      	movs	r0, #1
    e26e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e272:	4770      	bx	lr
    e274:	b11b      	cbz	r3, e27e <_Unwind_VRS_Set+0x22>
    e276:	2002      	movs	r0, #2
    e278:	f85d 4b04 	ldr.w	r4, [sp], #4
    e27c:	4770      	bx	lr
    e27e:	2a0f      	cmp	r2, #15
    e280:	d8f9      	bhi.n	e276 <_Unwind_VRS_Set+0x1a>
    e282:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    e286:	9801      	ldr	r0, [sp, #4]
    e288:	6801      	ldr	r1, [r0, #0]
    e28a:	6051      	str	r1, [r2, #4]
    e28c:	4618      	mov	r0, r3
    e28e:	e7ee      	b.n	e26e <_Unwind_VRS_Set+0x12>

0000e290 <_Unwind_SetGR>:
    e290:	b510      	push	{r4, lr}
    e292:	b084      	sub	sp, #16
    e294:	ab04      	add	r3, sp, #16
    e296:	460c      	mov	r4, r1
    e298:	f843 2d04 	str.w	r2, [r3, #-4]!
    e29c:	2100      	movs	r1, #0
    e29e:	9300      	str	r3, [sp, #0]
    e2a0:	4622      	mov	r2, r4
    e2a2:	460b      	mov	r3, r1
    e2a4:	f7ff ffda 	bl	e25c <_Unwind_VRS_Set>
    e2a8:	b004      	add	sp, #16
    e2aa:	bd10      	pop	{r4, pc}

0000e2ac <__gnu_Unwind_Backtrace>:
    e2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2ae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    e2b0:	6413      	str	r3, [r2, #64]	; 0x40
    e2b2:	1d15      	adds	r5, r2, #4
    e2b4:	4607      	mov	r7, r0
    e2b6:	460e      	mov	r6, r1
    e2b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e2ba:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    e2be:	ac17      	add	r4, sp, #92	; 0x5c
    e2c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e2c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e2c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e2c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e2ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    e2ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e2d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    e2d6:	9516      	str	r5, [sp, #88]	; 0x58
    e2d8:	e010      	b.n	e2fc <__gnu_Unwind_Backtrace+0x50>
    e2da:	a816      	add	r0, sp, #88	; 0x58
    e2dc:	f7ff ffd8 	bl	e290 <_Unwind_SetGR>
    e2e0:	4631      	mov	r1, r6
    e2e2:	a816      	add	r0, sp, #88	; 0x58
    e2e4:	47b8      	blx	r7
    e2e6:	4669      	mov	r1, sp
    e2e8:	aa16      	add	r2, sp, #88	; 0x58
    e2ea:	b978      	cbnz	r0, e30c <__gnu_Unwind_Backtrace+0x60>
    e2ec:	9b04      	ldr	r3, [sp, #16]
    e2ee:	2008      	movs	r0, #8
    e2f0:	4798      	blx	r3
    e2f2:	2805      	cmp	r0, #5
    e2f4:	4604      	mov	r4, r0
    e2f6:	d00a      	beq.n	e30e <__gnu_Unwind_Backtrace+0x62>
    e2f8:	2809      	cmp	r0, #9
    e2fa:	d007      	beq.n	e30c <__gnu_Unwind_Backtrace+0x60>
    e2fc:	9926      	ldr	r1, [sp, #152]	; 0x98
    e2fe:	4668      	mov	r0, sp
    e300:	f7ff fdfa 	bl	def8 <get_eit_entry>
    e304:	466a      	mov	r2, sp
    e306:	210c      	movs	r1, #12
    e308:	2800      	cmp	r0, #0
    e30a:	d0e6      	beq.n	e2da <__gnu_Unwind_Backtrace+0x2e>
    e30c:	2409      	movs	r4, #9
    e30e:	a816      	add	r0, sp, #88	; 0x58
    e310:	f7ff fe48 	bl	dfa4 <restore_non_core_regs>
    e314:	4620      	mov	r0, r4
    e316:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    e31a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e31c <__gnu_unwind_pr_common>:
    e31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e320:	460c      	mov	r4, r1
    e322:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    e324:	b08b      	sub	sp, #44	; 0x2c
    e326:	461d      	mov	r5, r3
    e328:	1d0e      	adds	r6, r1, #4
    e32a:	680b      	ldr	r3, [r1, #0]
    e32c:	9307      	str	r3, [sp, #28]
    e32e:	4690      	mov	r8, r2
    e330:	9608      	str	r6, [sp, #32]
    e332:	f000 0903 	and.w	r9, r0, #3
    e336:	2d00      	cmp	r5, #0
    e338:	f040 8089 	bne.w	e44e <__gnu_unwind_pr_common+0x132>
    e33c:	021b      	lsls	r3, r3, #8
    e33e:	2203      	movs	r2, #3
    e340:	9307      	str	r3, [sp, #28]
    e342:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
    e346:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    e34a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    e34c:	f1b9 0f02 	cmp.w	r9, #2
    e350:	bf08      	it	eq
    e352:	6ba6      	ldreq	r6, [r4, #56]	; 0x38
    e354:	f013 0301 	ands.w	r3, r3, #1
    e358:	d142      	bne.n	e3e0 <__gnu_unwind_pr_common+0xc4>
    e35a:	f000 0008 	and.w	r0, r0, #8
    e35e:	b2c0      	uxtb	r0, r0
    e360:	9003      	str	r0, [sp, #12]
    e362:	9302      	str	r3, [sp, #8]
    e364:	6837      	ldr	r7, [r6, #0]
    e366:	2f00      	cmp	r7, #0
    e368:	d03c      	beq.n	e3e4 <__gnu_unwind_pr_common+0xc8>
    e36a:	2d02      	cmp	r5, #2
    e36c:	d06b      	beq.n	e446 <__gnu_unwind_pr_common+0x12a>
    e36e:	8837      	ldrh	r7, [r6, #0]
    e370:	f8b6 a002 	ldrh.w	sl, [r6, #2]
    e374:	3604      	adds	r6, #4
    e376:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    e378:	f02a 0b01 	bic.w	fp, sl, #1
    e37c:	4640      	mov	r0, r8
    e37e:	210f      	movs	r1, #15
    e380:	449b      	add	fp, r3
    e382:	f7ff ff5d 	bl	e240 <_Unwind_GetGR>
    e386:	4583      	cmp	fp, r0
    e388:	d836      	bhi.n	e3f8 <__gnu_unwind_pr_common+0xdc>
    e38a:	f027 0301 	bic.w	r3, r7, #1
    e38e:	449b      	add	fp, r3
    e390:	f00a 0a01 	and.w	sl, sl, #1
    e394:	f007 0701 	and.w	r7, r7, #1
    e398:	4558      	cmp	r0, fp
    e39a:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    e39e:	bf2c      	ite	cs
    e3a0:	2000      	movcs	r0, #0
    e3a2:	2001      	movcc	r0, #1
    e3a4:	2f01      	cmp	r7, #1
    e3a6:	d031      	beq.n	e40c <__gnu_unwind_pr_common+0xf0>
    e3a8:	d360      	bcc.n	e46c <__gnu_unwind_pr_common+0x150>
    e3aa:	2f02      	cmp	r7, #2
    e3ac:	d120      	bne.n	e3f0 <__gnu_unwind_pr_common+0xd4>
    e3ae:	6833      	ldr	r3, [r6, #0]
    e3b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    e3b4:	9101      	str	r1, [sp, #4]
    e3b6:	f1b9 0f00 	cmp.w	r9, #0
    e3ba:	f040 8085 	bne.w	e4c8 <__gnu_unwind_pr_common+0x1ac>
    e3be:	b130      	cbz	r0, e3ce <__gnu_unwind_pr_common+0xb2>
    e3c0:	9a03      	ldr	r2, [sp, #12]
    e3c2:	2a00      	cmp	r2, #0
    e3c4:	f000 808d 	beq.w	e4e2 <__gnu_unwind_pr_common+0x1c6>
    e3c8:	2900      	cmp	r1, #0
    e3ca:	f000 80b0 	beq.w	e52e <__gnu_unwind_pr_common+0x212>
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	f2c0 8085 	blt.w	e4de <__gnu_unwind_pr_common+0x1c2>
    e3d4:	9b01      	ldr	r3, [sp, #4]
    e3d6:	f103 0a01 	add.w	sl, r3, #1
    e3da:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    e3de:	e7c1      	b.n	e364 <__gnu_unwind_pr_common+0x48>
    e3e0:	2100      	movs	r1, #0
    e3e2:	9102      	str	r1, [sp, #8]
    e3e4:	2d02      	cmp	r5, #2
    e3e6:	dd49      	ble.n	e47c <__gnu_unwind_pr_common+0x160>
    e3e8:	f7ff fe0e 	bl	e008 <__gnu_unwind_24bit.isra.1>
    e3ec:	2800      	cmp	r0, #0
    e3ee:	d04b      	beq.n	e488 <__gnu_unwind_pr_common+0x16c>
    e3f0:	2009      	movs	r0, #9
    e3f2:	b00b      	add	sp, #44	; 0x2c
    e3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3f8:	f00a 0a01 	and.w	sl, sl, #1
    e3fc:	f007 0701 	and.w	r7, r7, #1
    e400:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    e404:	2f01      	cmp	r7, #1
    e406:	f04f 0000 	mov.w	r0, #0
    e40a:	d1cd      	bne.n	e3a8 <__gnu_unwind_pr_common+0x8c>
    e40c:	f1b9 0f00 	cmp.w	r9, #0
    e410:	d141      	bne.n	e496 <__gnu_unwind_pr_common+0x17a>
    e412:	b1b0      	cbz	r0, e442 <__gnu_unwind_pr_common+0x126>
    e414:	e896 000c 	ldmia.w	r6, {r2, r3}
    e418:	0fd7      	lsrs	r7, r2, #31
    e41a:	1c9a      	adds	r2, r3, #2
    e41c:	d0e8      	beq.n	e3f0 <__gnu_unwind_pr_common+0xd4>
    e41e:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e422:	3301      	adds	r3, #1
    e424:	9106      	str	r1, [sp, #24]
    e426:	f000 80ad 	beq.w	e584 <__gnu_unwind_pr_common+0x268>
    e42a:	1d30      	adds	r0, r6, #4
    e42c:	f7ff fde6 	bl	dffc <_Unwind_decode_typeinfo_ptr.isra.0>
    e430:	463a      	mov	r2, r7
    e432:	4601      	mov	r1, r0
    e434:	ab06      	add	r3, sp, #24
    e436:	4620      	mov	r0, r4
    e438:	f7f7 f86e 	bl	5518 <__cxa_type_match>
    e43c:	2800      	cmp	r0, #0
    e43e:	f040 80cf 	bne.w	e5e0 <__gnu_unwind_pr_common+0x2c4>
    e442:	3608      	adds	r6, #8
    e444:	e78e      	b.n	e364 <__gnu_unwind_pr_common+0x48>
    e446:	f8d6 a004 	ldr.w	sl, [r6, #4]
    e44a:	3608      	adds	r6, #8
    e44c:	e793      	b.n	e376 <__gnu_unwind_pr_common+0x5a>
    e44e:	2d02      	cmp	r5, #2
    e450:	f73f af7b 	bgt.w	e34a <__gnu_unwind_pr_common+0x2e>
    e454:	0c1a      	lsrs	r2, r3, #16
    e456:	b2d7      	uxtb	r7, r2
    e458:	041b      	lsls	r3, r3, #16
    e45a:	2102      	movs	r1, #2
    e45c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    e460:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    e464:	9307      	str	r3, [sp, #28]
    e466:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    e46a:	e76e      	b.n	e34a <__gnu_unwind_pr_common+0x2e>
    e46c:	f1b9 0f00 	cmp.w	r9, #0
    e470:	d002      	beq.n	e478 <__gnu_unwind_pr_common+0x15c>
    e472:	2800      	cmp	r0, #0
    e474:	f040 8090 	bne.w	e598 <__gnu_unwind_pr_common+0x27c>
    e478:	3604      	adds	r6, #4
    e47a:	e773      	b.n	e364 <__gnu_unwind_pr_common+0x48>
    e47c:	4640      	mov	r0, r8
    e47e:	a907      	add	r1, sp, #28
    e480:	f000 faf0 	bl	ea64 <__gnu_unwind_execute>
    e484:	2800      	cmp	r0, #0
    e486:	d1b3      	bne.n	e3f0 <__gnu_unwind_pr_common+0xd4>
    e488:	9a02      	ldr	r2, [sp, #8]
    e48a:	2a00      	cmp	r2, #0
    e48c:	d159      	bne.n	e542 <__gnu_unwind_pr_common+0x226>
    e48e:	2008      	movs	r0, #8
    e490:	b00b      	add	sp, #44	; 0x2c
    e492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e496:	4640      	mov	r0, r8
    e498:	210d      	movs	r1, #13
    e49a:	6a27      	ldr	r7, [r4, #32]
    e49c:	f7ff fed0 	bl	e240 <_Unwind_GetGR>
    e4a0:	4287      	cmp	r7, r0
    e4a2:	d1ce      	bne.n	e442 <__gnu_unwind_pr_common+0x126>
    e4a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e4a6:	429e      	cmp	r6, r3
    e4a8:	d1cb      	bne.n	e442 <__gnu_unwind_pr_common+0x126>
    e4aa:	4630      	mov	r0, r6
    e4ac:	f7ff fccc 	bl	de48 <selfrel_offset31>
    e4b0:	210f      	movs	r1, #15
    e4b2:	4602      	mov	r2, r0
    e4b4:	4640      	mov	r0, r8
    e4b6:	f7ff feeb 	bl	e290 <_Unwind_SetGR>
    e4ba:	4640      	mov	r0, r8
    e4bc:	4622      	mov	r2, r4
    e4be:	2100      	movs	r1, #0
    e4c0:	f7ff fee6 	bl	e290 <_Unwind_SetGR>
    e4c4:	2007      	movs	r0, #7
    e4c6:	e794      	b.n	e3f2 <__gnu_unwind_pr_common+0xd6>
    e4c8:	4640      	mov	r0, r8
    e4ca:	210d      	movs	r1, #13
    e4cc:	6a27      	ldr	r7, [r4, #32]
    e4ce:	f7ff feb7 	bl	e240 <_Unwind_GetGR>
    e4d2:	4287      	cmp	r7, r0
    e4d4:	d045      	beq.n	e562 <__gnu_unwind_pr_common+0x246>
    e4d6:	6833      	ldr	r3, [r6, #0]
    e4d8:	2b00      	cmp	r3, #0
    e4da:	f6bf af7b 	bge.w	e3d4 <__gnu_unwind_pr_common+0xb8>
    e4de:	3604      	adds	r6, #4
    e4e0:	e778      	b.n	e3d4 <__gnu_unwind_pr_common+0xb8>
    e4e2:	9901      	ldr	r1, [sp, #4]
    e4e4:	b319      	cbz	r1, e52e <__gnu_unwind_pr_common+0x212>
    e4e6:	f104 0c58 	add.w	ip, r4, #88	; 0x58
    e4ea:	f8cd 9010 	str.w	r9, [sp, #16]
    e4ee:	9505      	str	r5, [sp, #20]
    e4f0:	1d37      	adds	r7, r6, #4
    e4f2:	f8dd b00c 	ldr.w	fp, [sp, #12]
    e4f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
    e4fa:	4665      	mov	r5, ip
    e4fc:	e002      	b.n	e504 <__gnu_unwind_pr_common+0x1e8>
    e4fe:	45ca      	cmp	sl, r9
    e500:	d015      	beq.n	e52e <__gnu_unwind_pr_common+0x212>
    e502:	46d3      	mov	fp, sl
    e504:	4638      	mov	r0, r7
    e506:	9506      	str	r5, [sp, #24]
    e508:	f7ff fd78 	bl	dffc <_Unwind_decode_typeinfo_ptr.isra.0>
    e50c:	2200      	movs	r2, #0
    e50e:	4601      	mov	r1, r0
    e510:	ab06      	add	r3, sp, #24
    e512:	4620      	mov	r0, r4
    e514:	f7f7 f800 	bl	5518 <__cxa_type_match>
    e518:	f10b 0a01 	add.w	sl, fp, #1
    e51c:	3704      	adds	r7, #4
    e51e:	2800      	cmp	r0, #0
    e520:	d0ed      	beq.n	e4fe <__gnu_unwind_pr_common+0x1e2>
    e522:	9b01      	ldr	r3, [sp, #4]
    e524:	f8dd 9010 	ldr.w	r9, [sp, #16]
    e528:	9d05      	ldr	r5, [sp, #20]
    e52a:	455b      	cmp	r3, fp
    e52c:	d1d3      	bne.n	e4d6 <__gnu_unwind_pr_common+0x1ba>
    e52e:	4640      	mov	r0, r8
    e530:	210d      	movs	r1, #13
    e532:	f7ff fe85 	bl	e240 <_Unwind_GetGR>
    e536:	9b06      	ldr	r3, [sp, #24]
    e538:	6220      	str	r0, [r4, #32]
    e53a:	62a6      	str	r6, [r4, #40]	; 0x28
    e53c:	6263      	str	r3, [r4, #36]	; 0x24
    e53e:	2006      	movs	r0, #6
    e540:	e757      	b.n	e3f2 <__gnu_unwind_pr_common+0xd6>
    e542:	210f      	movs	r1, #15
    e544:	4640      	mov	r0, r8
    e546:	f7ff fe7b 	bl	e240 <_Unwind_GetGR>
    e54a:	210e      	movs	r1, #14
    e54c:	4602      	mov	r2, r0
    e54e:	4640      	mov	r0, r8
    e550:	f7ff fe9e 	bl	e290 <_Unwind_SetGR>
    e554:	4640      	mov	r0, r8
    e556:	210f      	movs	r1, #15
    e558:	4a28      	ldr	r2, [pc, #160]	; (e5fc <__gnu_unwind_pr_common+0x2e0>)
    e55a:	f7ff fe99 	bl	e290 <_Unwind_SetGR>
    e55e:	2007      	movs	r0, #7
    e560:	e747      	b.n	e3f2 <__gnu_unwind_pr_common+0xd6>
    e562:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e564:	429e      	cmp	r6, r3
    e566:	d1b6      	bne.n	e4d6 <__gnu_unwind_pr_common+0x1ba>
    e568:	2204      	movs	r2, #4
    e56a:	2700      	movs	r7, #0
    e56c:	18b3      	adds	r3, r6, r2
    e56e:	9901      	ldr	r1, [sp, #4]
    e570:	62a1      	str	r1, [r4, #40]	; 0x28
    e572:	62e7      	str	r7, [r4, #44]	; 0x2c
    e574:	6322      	str	r2, [r4, #48]	; 0x30
    e576:	6363      	str	r3, [r4, #52]	; 0x34
    e578:	6833      	ldr	r3, [r6, #0]
    e57a:	42bb      	cmp	r3, r7
    e57c:	db1f      	blt.n	e5be <__gnu_unwind_pr_common+0x2a2>
    e57e:	2201      	movs	r2, #1
    e580:	9202      	str	r2, [sp, #8]
    e582:	e727      	b.n	e3d4 <__gnu_unwind_pr_common+0xb8>
    e584:	4640      	mov	r0, r8
    e586:	210d      	movs	r1, #13
    e588:	f7ff fe5a 	bl	e240 <_Unwind_GetGR>
    e58c:	6220      	str	r0, [r4, #32]
    e58e:	9b06      	ldr	r3, [sp, #24]
    e590:	6263      	str	r3, [r4, #36]	; 0x24
    e592:	62a6      	str	r6, [r4, #40]	; 0x28
    e594:	2006      	movs	r0, #6
    e596:	e72c      	b.n	e3f2 <__gnu_unwind_pr_common+0xd6>
    e598:	4630      	mov	r0, r6
    e59a:	f7ff fc55 	bl	de48 <selfrel_offset31>
    e59e:	3604      	adds	r6, #4
    e5a0:	4605      	mov	r5, r0
    e5a2:	63a6      	str	r6, [r4, #56]	; 0x38
    e5a4:	4620      	mov	r0, r4
    e5a6:	f7f7 f80d 	bl	55c4 <__cxa_begin_cleanup>
    e5aa:	2800      	cmp	r0, #0
    e5ac:	f43f af20 	beq.w	e3f0 <__gnu_unwind_pr_common+0xd4>
    e5b0:	4640      	mov	r0, r8
    e5b2:	462a      	mov	r2, r5
    e5b4:	210f      	movs	r1, #15
    e5b6:	f7ff fe6b 	bl	e290 <_Unwind_SetGR>
    e5ba:	2007      	movs	r0, #7
    e5bc:	e719      	b.n	e3f2 <__gnu_unwind_pr_common+0xd6>
    e5be:	1c48      	adds	r0, r1, #1
    e5c0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    e5c4:	f7ff fc40 	bl	de48 <selfrel_offset31>
    e5c8:	210f      	movs	r1, #15
    e5ca:	4602      	mov	r2, r0
    e5cc:	4640      	mov	r0, r8
    e5ce:	f7ff fe5f 	bl	e290 <_Unwind_SetGR>
    e5d2:	4640      	mov	r0, r8
    e5d4:	4639      	mov	r1, r7
    e5d6:	4622      	mov	r2, r4
    e5d8:	f7ff fe5a 	bl	e290 <_Unwind_SetGR>
    e5dc:	2007      	movs	r0, #7
    e5de:	e708      	b.n	e3f2 <__gnu_unwind_pr_common+0xd6>
    e5e0:	4607      	mov	r7, r0
    e5e2:	210d      	movs	r1, #13
    e5e4:	4640      	mov	r0, r8
    e5e6:	f7ff fe2b 	bl	e240 <_Unwind_GetGR>
    e5ea:	2f02      	cmp	r7, #2
    e5ec:	6220      	str	r0, [r4, #32]
    e5ee:	d1ce      	bne.n	e58e <__gnu_unwind_pr_common+0x272>
    e5f0:	4623      	mov	r3, r4
    e5f2:	9a06      	ldr	r2, [sp, #24]
    e5f4:	f843 2f2c 	str.w	r2, [r3, #44]!
    e5f8:	6263      	str	r3, [r4, #36]	; 0x24
    e5fa:	e7ca      	b.n	e592 <__gnu_unwind_pr_common+0x276>
    e5fc:	000056f5 	.word	0x000056f5

0000e600 <__aeabi_unwind_cpp_pr0>:
    e600:	2300      	movs	r3, #0
    e602:	f7ff be8b 	b.w	e31c <__gnu_unwind_pr_common>
    e606:	bf00      	nop

0000e608 <__aeabi_unwind_cpp_pr1>:
    e608:	2301      	movs	r3, #1
    e60a:	f7ff be87 	b.w	e31c <__gnu_unwind_pr_common>
    e60e:	bf00      	nop

0000e610 <__aeabi_unwind_cpp_pr2>:
    e610:	2302      	movs	r3, #2
    e612:	f7ff be83 	b.w	e31c <__gnu_unwind_pr_common>
    e616:	bf00      	nop

0000e618 <_Unwind_VRS_Pop>:
    e618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e61c:	4604      	mov	r4, r0
    e61e:	b0c4      	sub	sp, #272	; 0x110
    e620:	2904      	cmp	r1, #4
    e622:	d80b      	bhi.n	e63c <_Unwind_VRS_Pop+0x24>
    e624:	e8df f001 	tbb	[pc, r1]
    e628:	300a0359 	.word	0x300a0359
    e62c:	0e          	.byte	0x0e
    e62d:	00          	.byte	0x00
    e62e:	2b01      	cmp	r3, #1
    e630:	ea4f 4512 	mov.w	r5, r2, lsr #16
    e634:	b296      	uxth	r6, r2
    e636:	d066      	beq.n	e706 <_Unwind_VRS_Pop+0xee>
    e638:	2b05      	cmp	r3, #5
    e63a:	d06b      	beq.n	e714 <_Unwind_VRS_Pop+0xfc>
    e63c:	2002      	movs	r0, #2
    e63e:	b044      	add	sp, #272	; 0x110
    e640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e644:	2b00      	cmp	r3, #0
    e646:	d1f9      	bne.n	e63c <_Unwind_VRS_Pop+0x24>
    e648:	2a10      	cmp	r2, #16
    e64a:	d8f7      	bhi.n	e63c <_Unwind_VRS_Pop+0x24>
    e64c:	6823      	ldr	r3, [r4, #0]
    e64e:	06d9      	lsls	r1, r3, #27
    e650:	f100 80d3 	bmi.w	e7fa <_Unwind_VRS_Pop+0x1e2>
    e654:	ae22      	add	r6, sp, #136	; 0x88
    e656:	4630      	mov	r0, r6
    e658:	9201      	str	r2, [sp, #4]
    e65a:	f000 f975 	bl	e948 <__gnu_Unwind_Save_WMMXC>
    e65e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    e660:	9a01      	ldr	r2, [sp, #4]
    e662:	2300      	movs	r3, #0
    e664:	2001      	movs	r0, #1
    e666:	fa00 f103 	lsl.w	r1, r0, r3
    e66a:	4211      	tst	r1, r2
    e66c:	d003      	beq.n	e676 <_Unwind_VRS_Pop+0x5e>
    e66e:	6829      	ldr	r1, [r5, #0]
    e670:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
    e674:	3504      	adds	r5, #4
    e676:	3301      	adds	r3, #1
    e678:	2b04      	cmp	r3, #4
    e67a:	d1f4      	bne.n	e666 <_Unwind_VRS_Pop+0x4e>
    e67c:	4630      	mov	r0, r6
    e67e:	63a5      	str	r5, [r4, #56]	; 0x38
    e680:	f000 f958 	bl	e934 <__gnu_Unwind_Restore_WMMXC>
    e684:	2000      	movs	r0, #0
    e686:	e7da      	b.n	e63e <_Unwind_VRS_Pop+0x26>
    e688:	2b03      	cmp	r3, #3
    e68a:	d1d7      	bne.n	e63c <_Unwind_VRS_Pop+0x24>
    e68c:	0c15      	lsrs	r5, r2, #16
    e68e:	b297      	uxth	r7, r2
    e690:	197b      	adds	r3, r7, r5
    e692:	2b10      	cmp	r3, #16
    e694:	d8d2      	bhi.n	e63c <_Unwind_VRS_Pop+0x24>
    e696:	6823      	ldr	r3, [r4, #0]
    e698:	071e      	lsls	r6, r3, #28
    e69a:	f100 80bf 	bmi.w	e81c <_Unwind_VRS_Pop+0x204>
    e69e:	ae22      	add	r6, sp, #136	; 0x88
    e6a0:	4630      	mov	r0, r6
    e6a2:	f000 f925 	bl	e8f0 <__gnu_Unwind_Save_WMMXD>
    e6a6:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
    e6aa:	007f      	lsls	r7, r7, #1
    e6ac:	eb06 00c5 	add.w	r0, r6, r5, lsl #3
    e6b0:	1e7b      	subs	r3, r7, #1
    e6b2:	4672      	mov	r2, lr
    e6b4:	b15f      	cbz	r7, e6ce <_Unwind_VRS_Pop+0xb6>
    e6b6:	ebce 0000 	rsb	r0, lr, r0
    e6ba:	f1ae 0204 	sub.w	r2, lr, #4
    e6be:	3b01      	subs	r3, #1
    e6c0:	f852 1f04 	ldr.w	r1, [r2, #4]!
    e6c4:	5081      	str	r1, [r0, r2]
    e6c6:	1c5d      	adds	r5, r3, #1
    e6c8:	d1f9      	bne.n	e6be <_Unwind_VRS_Pop+0xa6>
    e6ca:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
    e6ce:	4630      	mov	r0, r6
    e6d0:	63a2      	str	r2, [r4, #56]	; 0x38
    e6d2:	f000 f8eb 	bl	e8ac <__gnu_Unwind_Restore_WMMXD>
    e6d6:	2000      	movs	r0, #0
    e6d8:	e7b1      	b.n	e63e <_Unwind_VRS_Pop+0x26>
    e6da:	2b00      	cmp	r3, #0
    e6dc:	d1ae      	bne.n	e63c <_Unwind_VRS_Pop+0x24>
    e6de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    e6e0:	b296      	uxth	r6, r2
    e6e2:	2001      	movs	r0, #1
    e6e4:	fa00 f103 	lsl.w	r1, r0, r3
    e6e8:	4231      	tst	r1, r6
    e6ea:	d004      	beq.n	e6f6 <_Unwind_VRS_Pop+0xde>
    e6ec:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    e6f0:	6829      	ldr	r1, [r5, #0]
    e6f2:	6079      	str	r1, [r7, #4]
    e6f4:	3504      	adds	r5, #4
    e6f6:	3301      	adds	r3, #1
    e6f8:	2b10      	cmp	r3, #16
    e6fa:	d1f3      	bne.n	e6e4 <_Unwind_VRS_Pop+0xcc>
    e6fc:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    e700:	d175      	bne.n	e7ee <_Unwind_VRS_Pop+0x1d6>
    e702:	63a5      	str	r5, [r4, #56]	; 0x38
    e704:	e79b      	b.n	e63e <_Unwind_VRS_Pop+0x26>
    e706:	1972      	adds	r2, r6, r5
    e708:	2a10      	cmp	r2, #16
    e70a:	d897      	bhi.n	e63c <_Unwind_VRS_Pop+0x24>
    e70c:	2d0f      	cmp	r5, #15
    e70e:	d895      	bhi.n	e63c <_Unwind_VRS_Pop+0x24>
    e710:	2700      	movs	r7, #0
    e712:	e008      	b.n	e726 <_Unwind_VRS_Pop+0x10e>
    e714:	1977      	adds	r7, r6, r5
    e716:	2f20      	cmp	r7, #32
    e718:	d890      	bhi.n	e63c <_Unwind_VRS_Pop+0x24>
    e71a:	2d0f      	cmp	r5, #15
    e71c:	d969      	bls.n	e7f2 <_Unwind_VRS_Pop+0x1da>
    e71e:	4637      	mov	r7, r6
    e720:	b346      	cbz	r6, e774 <_Unwind_VRS_Pop+0x15c>
    e722:	2d0f      	cmp	r5, #15
    e724:	d811      	bhi.n	e74a <_Unwind_VRS_Pop+0x132>
    e726:	6822      	ldr	r2, [r4, #0]
    e728:	07d0      	lsls	r0, r2, #31
    e72a:	d50e      	bpl.n	e74a <_Unwind_VRS_Pop+0x132>
    e72c:	f022 0101 	bic.w	r1, r2, #1
    e730:	2b05      	cmp	r3, #5
    e732:	6021      	str	r1, [r4, #0]
    e734:	4620      	mov	r0, r4
    e736:	f000 808b 	beq.w	e850 <_Unwind_VRS_Pop+0x238>
    e73a:	f022 0203 	bic.w	r2, r2, #3
    e73e:	f840 2b48 	str.w	r2, [r0], #72
    e742:	9301      	str	r3, [sp, #4]
    e744:	f000 f89e 	bl	e884 <__gnu_Unwind_Save_VFP>
    e748:	9b01      	ldr	r3, [sp, #4]
    e74a:	b117      	cbz	r7, e752 <_Unwind_VRS_Pop+0x13a>
    e74c:	6822      	ldr	r2, [r4, #0]
    e74e:	0751      	lsls	r1, r2, #29
    e750:	d46c      	bmi.n	e82c <_Unwind_VRS_Pop+0x214>
    e752:	2b01      	cmp	r3, #1
    e754:	d074      	beq.n	e840 <_Unwind_VRS_Pop+0x228>
    e756:	2d0f      	cmp	r5, #15
    e758:	d804      	bhi.n	e764 <_Unwind_VRS_Pop+0x14c>
    e75a:	a822      	add	r0, sp, #136	; 0x88
    e75c:	9301      	str	r3, [sp, #4]
    e75e:	f000 f899 	bl	e894 <__gnu_Unwind_Save_VFP_D>
    e762:	9b01      	ldr	r3, [sp, #4]
    e764:	b137      	cbz	r7, e774 <_Unwind_VRS_Pop+0x15c>
    e766:	a802      	add	r0, sp, #8
    e768:	9301      	str	r3, [sp, #4]
    e76a:	f000 f89b 	bl	e8a4 <__gnu_Unwind_Save_VFP_D_16_to_31>
    e76e:	9b01      	ldr	r3, [sp, #4]
    e770:	f1c5 0610 	rsb	r6, r5, #16
    e774:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
    e778:	2e00      	cmp	r6, #0
    e77a:	46c4      	mov	ip, r8
    e77c:	dd12      	ble.n	e7a4 <_Unwind_VRS_Pop+0x18c>
    e77e:	aa22      	add	r2, sp, #136	; 0x88
    e780:	ea4f 0c46 	mov.w	ip, r6, lsl #1
    e784:	eb02 06c5 	add.w	r6, r2, r5, lsl #3
    e788:	ebc8 0606 	rsb	r6, r8, r6
    e78c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    e790:	f1a8 0204 	sub.w	r2, r8, #4
    e794:	f852 0f04 	ldr.w	r0, [r2, #4]!
    e798:	50b0      	str	r0, [r6, r2]
    e79a:	3901      	subs	r1, #1
    e79c:	1c48      	adds	r0, r1, #1
    e79e:	d1f9      	bne.n	e794 <_Unwind_VRS_Pop+0x17c>
    e7a0:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
    e7a4:	b1b7      	cbz	r7, e7d4 <_Unwind_VRS_Pop+0x1bc>
    e7a6:	aa44      	add	r2, sp, #272	; 0x110
    e7a8:	2d10      	cmp	r5, #16
    e7aa:	bf2c      	ite	cs
    e7ac:	4628      	movcs	r0, r5
    e7ae:	2010      	movcc	r0, #16
    e7b0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    e7b4:	ea4f 0847 	mov.w	r8, r7, lsl #1
    e7b8:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
    e7bc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    e7c0:	4661      	mov	r1, ip
    e7c2:	f851 6b04 	ldr.w	r6, [r1], #4
    e7c6:	f840 6b04 	str.w	r6, [r0], #4
    e7ca:	3a01      	subs	r2, #1
    e7cc:	1c56      	adds	r6, r2, #1
    e7ce:	d1f8      	bne.n	e7c2 <_Unwind_VRS_Pop+0x1aa>
    e7d0:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
    e7d4:	2b01      	cmp	r3, #1
    e7d6:	d01a      	beq.n	e80e <_Unwind_VRS_Pop+0x1f6>
    e7d8:	2d0f      	cmp	r5, #15
    e7da:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
    e7de:	d802      	bhi.n	e7e6 <_Unwind_VRS_Pop+0x1ce>
    e7e0:	a822      	add	r0, sp, #136	; 0x88
    e7e2:	f000 f853 	bl	e88c <__gnu_Unwind_Restore_VFP_D>
    e7e6:	b117      	cbz	r7, e7ee <_Unwind_VRS_Pop+0x1d6>
    e7e8:	a802      	add	r0, sp, #8
    e7ea:	f000 f857 	bl	e89c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    e7ee:	2000      	movs	r0, #0
    e7f0:	e725      	b.n	e63e <_Unwind_VRS_Pop+0x26>
    e7f2:	2f10      	cmp	r7, #16
    e7f4:	d98c      	bls.n	e710 <_Unwind_VRS_Pop+0xf8>
    e7f6:	3f10      	subs	r7, #16
    e7f8:	e793      	b.n	e722 <_Unwind_VRS_Pop+0x10a>
    e7fa:	f023 0310 	bic.w	r3, r3, #16
    e7fe:	6023      	str	r3, [r4, #0]
    e800:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    e804:	9201      	str	r2, [sp, #4]
    e806:	f000 f89f 	bl	e948 <__gnu_Unwind_Save_WMMXC>
    e80a:	9a01      	ldr	r2, [sp, #4]
    e80c:	e722      	b.n	e654 <_Unwind_VRS_Pop+0x3c>
    e80e:	f10c 0304 	add.w	r3, ip, #4
    e812:	63a3      	str	r3, [r4, #56]	; 0x38
    e814:	a822      	add	r0, sp, #136	; 0x88
    e816:	f000 f831 	bl	e87c <__gnu_Unwind_Restore_VFP>
    e81a:	e7e8      	b.n	e7ee <_Unwind_VRS_Pop+0x1d6>
    e81c:	f023 0308 	bic.w	r3, r3, #8
    e820:	6023      	str	r3, [r4, #0]
    e822:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    e826:	f000 f863 	bl	e8f0 <__gnu_Unwind_Save_WMMXD>
    e82a:	e738      	b.n	e69e <_Unwind_VRS_Pop+0x86>
    e82c:	4620      	mov	r0, r4
    e82e:	f022 0204 	bic.w	r2, r2, #4
    e832:	f840 2bd0 	str.w	r2, [r0], #208
    e836:	9301      	str	r3, [sp, #4]
    e838:	f000 f834 	bl	e8a4 <__gnu_Unwind_Save_VFP_D_16_to_31>
    e83c:	9b01      	ldr	r3, [sp, #4]
    e83e:	e788      	b.n	e752 <_Unwind_VRS_Pop+0x13a>
    e840:	a822      	add	r0, sp, #136	; 0x88
    e842:	9301      	str	r3, [sp, #4]
    e844:	f000 f81e 	bl	e884 <__gnu_Unwind_Save_VFP>
    e848:	9b01      	ldr	r3, [sp, #4]
    e84a:	2f00      	cmp	r7, #0
    e84c:	d190      	bne.n	e770 <_Unwind_VRS_Pop+0x158>
    e84e:	e791      	b.n	e774 <_Unwind_VRS_Pop+0x15c>
    e850:	f041 0102 	orr.w	r1, r1, #2
    e854:	f840 1b48 	str.w	r1, [r0], #72
    e858:	9301      	str	r3, [sp, #4]
    e85a:	f000 f81b 	bl	e894 <__gnu_Unwind_Save_VFP_D>
    e85e:	9b01      	ldr	r3, [sp, #4]
    e860:	e773      	b.n	e74a <_Unwind_VRS_Pop+0x132>
    e862:	bf00      	nop

0000e864 <__restore_core_regs>:
    e864:	f100 0134 	add.w	r1, r0, #52	; 0x34
    e868:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    e86c:	469c      	mov	ip, r3
    e86e:	46a6      	mov	lr, r4
    e870:	f84c 5d04 	str.w	r5, [ip, #-4]!
    e874:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    e878:	46e5      	mov	sp, ip
    e87a:	bd00      	pop	{pc}

0000e87c <__gnu_Unwind_Restore_VFP>:
    e87c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    e880:	4770      	bx	lr
    e882:	bf00      	nop

0000e884 <__gnu_Unwind_Save_VFP>:
    e884:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    e888:	4770      	bx	lr
    e88a:	bf00      	nop

0000e88c <__gnu_Unwind_Restore_VFP_D>:
    e88c:	ec90 0b20 	vldmia	r0, {d0-d15}
    e890:	4770      	bx	lr
    e892:	bf00      	nop

0000e894 <__gnu_Unwind_Save_VFP_D>:
    e894:	ec80 0b20 	vstmia	r0, {d0-d15}
    e898:	4770      	bx	lr
    e89a:	bf00      	nop

0000e89c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    e89c:	ecd0 0b20 	vldmia	r0, {d16-d31}
    e8a0:	4770      	bx	lr
    e8a2:	bf00      	nop

0000e8a4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    e8a4:	ecc0 0b20 	vstmia	r0, {d16-d31}
    e8a8:	4770      	bx	lr
    e8aa:	bf00      	nop

0000e8ac <__gnu_Unwind_Restore_WMMXD>:
    e8ac:	ecf0 0102 	ldfe	f0, [r0], #8
    e8b0:	ecf0 1102 	ldfe	f1, [r0], #8
    e8b4:	ecf0 2102 	ldfe	f2, [r0], #8
    e8b8:	ecf0 3102 	ldfe	f3, [r0], #8
    e8bc:	ecf0 4102 	ldfe	f4, [r0], #8
    e8c0:	ecf0 5102 	ldfe	f5, [r0], #8
    e8c4:	ecf0 6102 	ldfe	f6, [r0], #8
    e8c8:	ecf0 7102 	ldfe	f7, [r0], #8
    e8cc:	ecf0 8102 	ldfp	f0, [r0], #8
    e8d0:	ecf0 9102 	ldfp	f1, [r0], #8
    e8d4:	ecf0 a102 	ldfp	f2, [r0], #8
    e8d8:	ecf0 b102 	ldfp	f3, [r0], #8
    e8dc:	ecf0 c102 	ldfp	f4, [r0], #8
    e8e0:	ecf0 d102 	ldfp	f5, [r0], #8
    e8e4:	ecf0 e102 	ldfp	f6, [r0], #8
    e8e8:	ecf0 f102 	ldfp	f7, [r0], #8
    e8ec:	4770      	bx	lr
    e8ee:	bf00      	nop

0000e8f0 <__gnu_Unwind_Save_WMMXD>:
    e8f0:	ece0 0102 	stfe	f0, [r0], #8
    e8f4:	ece0 1102 	stfe	f1, [r0], #8
    e8f8:	ece0 2102 	stfe	f2, [r0], #8
    e8fc:	ece0 3102 	stfe	f3, [r0], #8
    e900:	ece0 4102 	stfe	f4, [r0], #8
    e904:	ece0 5102 	stfe	f5, [r0], #8
    e908:	ece0 6102 	stfe	f6, [r0], #8
    e90c:	ece0 7102 	stfe	f7, [r0], #8
    e910:	ece0 8102 	stfp	f0, [r0], #8
    e914:	ece0 9102 	stfp	f1, [r0], #8
    e918:	ece0 a102 	stfp	f2, [r0], #8
    e91c:	ece0 b102 	stfp	f3, [r0], #8
    e920:	ece0 c102 	stfp	f4, [r0], #8
    e924:	ece0 d102 	stfp	f5, [r0], #8
    e928:	ece0 e102 	stfp	f6, [r0], #8
    e92c:	ece0 f102 	stfp	f7, [r0], #8
    e930:	4770      	bx	lr
    e932:	bf00      	nop

0000e934 <__gnu_Unwind_Restore_WMMXC>:
    e934:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    e938:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    e93c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    e940:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    e944:	4770      	bx	lr
    e946:	bf00      	nop

0000e948 <__gnu_Unwind_Save_WMMXC>:
    e948:	fca0 8101 	stc2	1, cr8, [r0], #4
    e94c:	fca0 9101 	stc2	1, cr9, [r0], #4
    e950:	fca0 a101 	stc2	1, cr10, [r0], #4
    e954:	fca0 b101 	stc2	1, cr11, [r0], #4
    e958:	4770      	bx	lr
    e95a:	bf00      	nop

0000e95c <_Unwind_RaiseException>:
    e95c:	46ec      	mov	ip, sp
    e95e:	b500      	push	{lr}
    e960:	e92d 5000 	stmdb	sp!, {ip, lr}
    e964:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    e968:	f04f 0300 	mov.w	r3, #0
    e96c:	e92d 000c 	stmdb	sp!, {r2, r3}
    e970:	a901      	add	r1, sp, #4
    e972:	f7ff fbdd 	bl	e130 <__gnu_Unwind_RaiseException>
    e976:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    e97a:	b012      	add	sp, #72	; 0x48
    e97c:	4770      	bx	lr
    e97e:	bf00      	nop

0000e980 <_Unwind_Resume>:
    e980:	46ec      	mov	ip, sp
    e982:	b500      	push	{lr}
    e984:	e92d 5000 	stmdb	sp!, {ip, lr}
    e988:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    e98c:	f04f 0300 	mov.w	r3, #0
    e990:	e92d 000c 	stmdb	sp!, {r2, r3}
    e994:	a901      	add	r1, sp, #4
    e996:	f7ff fc05 	bl	e1a4 <__gnu_Unwind_Resume>
    e99a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    e99e:	b012      	add	sp, #72	; 0x48
    e9a0:	4770      	bx	lr
    e9a2:	bf00      	nop

0000e9a4 <_Unwind_Resume_or_Rethrow>:
    e9a4:	46ec      	mov	ip, sp
    e9a6:	b500      	push	{lr}
    e9a8:	e92d 5000 	stmdb	sp!, {ip, lr}
    e9ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    e9b0:	f04f 0300 	mov.w	r3, #0
    e9b4:	e92d 000c 	stmdb	sp!, {r2, r3}
    e9b8:	a901      	add	r1, sp, #4
    e9ba:	f7ff fc15 	bl	e1e8 <__gnu_Unwind_Resume_or_Rethrow>
    e9be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    e9c2:	b012      	add	sp, #72	; 0x48
    e9c4:	4770      	bx	lr
    e9c6:	bf00      	nop

0000e9c8 <_Unwind_ForcedUnwind>:
    e9c8:	46ec      	mov	ip, sp
    e9ca:	b500      	push	{lr}
    e9cc:	e92d 5000 	stmdb	sp!, {ip, lr}
    e9d0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    e9d4:	f04f 0300 	mov.w	r3, #0
    e9d8:	e92d 000c 	stmdb	sp!, {r2, r3}
    e9dc:	ab01      	add	r3, sp, #4
    e9de:	f7ff fbd7 	bl	e190 <__gnu_Unwind_ForcedUnwind>
    e9e2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    e9e6:	b012      	add	sp, #72	; 0x48
    e9e8:	4770      	bx	lr
    e9ea:	bf00      	nop

0000e9ec <_Unwind_Backtrace>:
    e9ec:	46ec      	mov	ip, sp
    e9ee:	b500      	push	{lr}
    e9f0:	e92d 5000 	stmdb	sp!, {ip, lr}
    e9f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    e9f8:	f04f 0300 	mov.w	r3, #0
    e9fc:	e92d 000c 	stmdb	sp!, {r2, r3}
    ea00:	aa01      	add	r2, sp, #4
    ea02:	f7ff fc53 	bl	e2ac <__gnu_Unwind_Backtrace>
    ea06:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    ea0a:	b012      	add	sp, #72	; 0x48
    ea0c:	4770      	bx	lr
    ea0e:	bf00      	nop

0000ea10 <next_unwind_byte>:
    ea10:	7a03      	ldrb	r3, [r0, #8]
    ea12:	b91b      	cbnz	r3, ea1c <next_unwind_byte+0xc>
    ea14:	7a43      	ldrb	r3, [r0, #9]
    ea16:	b943      	cbnz	r3, ea2a <next_unwind_byte+0x1a>
    ea18:	20b0      	movs	r0, #176	; 0xb0
    ea1a:	4770      	bx	lr
    ea1c:	6802      	ldr	r2, [r0, #0]
    ea1e:	3b01      	subs	r3, #1
    ea20:	7203      	strb	r3, [r0, #8]
    ea22:	0213      	lsls	r3, r2, #8
    ea24:	6003      	str	r3, [r0, #0]
    ea26:	0e10      	lsrs	r0, r2, #24
    ea28:	4770      	bx	lr
    ea2a:	6842      	ldr	r2, [r0, #4]
    ea2c:	3b01      	subs	r3, #1
    ea2e:	7243      	strb	r3, [r0, #9]
    ea30:	1d11      	adds	r1, r2, #4
    ea32:	6812      	ldr	r2, [r2, #0]
    ea34:	6041      	str	r1, [r0, #4]
    ea36:	2303      	movs	r3, #3
    ea38:	7203      	strb	r3, [r0, #8]
    ea3a:	0213      	lsls	r3, r2, #8
    ea3c:	6003      	str	r3, [r0, #0]
    ea3e:	0e10      	lsrs	r0, r2, #24
    ea40:	4770      	bx	lr
    ea42:	bf00      	nop

0000ea44 <_Unwind_GetGR.constprop.0>:
    ea44:	b500      	push	{lr}
    ea46:	b085      	sub	sp, #20
    ea48:	ab03      	add	r3, sp, #12
    ea4a:	2100      	movs	r1, #0
    ea4c:	9300      	str	r3, [sp, #0]
    ea4e:	220c      	movs	r2, #12
    ea50:	460b      	mov	r3, r1
    ea52:	f7ff fbdb 	bl	e20c <_Unwind_VRS_Get>
    ea56:	9803      	ldr	r0, [sp, #12]
    ea58:	b005      	add	sp, #20
    ea5a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea5e:	bf00      	nop

0000ea60 <unwind_UCB_from_context>:
    ea60:	f7ff bff0 	b.w	ea44 <_Unwind_GetGR.constprop.0>

0000ea64 <__gnu_unwind_execute>:
    ea64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea68:	4606      	mov	r6, r0
    ea6a:	b085      	sub	sp, #20
    ea6c:	460d      	mov	r5, r1
    ea6e:	f04f 0800 	mov.w	r8, #0
    ea72:	4628      	mov	r0, r5
    ea74:	f7ff ffcc 	bl	ea10 <next_unwind_byte>
    ea78:	28b0      	cmp	r0, #176	; 0xb0
    ea7a:	4604      	mov	r4, r0
    ea7c:	f000 80ac 	beq.w	ebd8 <__gnu_unwind_execute+0x174>
    ea80:	f020 027f 	bic.w	r2, r0, #127	; 0x7f
    ea84:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    ea88:	d020      	beq.n	eacc <__gnu_unwind_execute+0x68>
    ea8a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    ea8e:	2a80      	cmp	r2, #128	; 0x80
    ea90:	d073      	beq.n	eb7a <__gnu_unwind_execute+0x116>
    ea92:	2a90      	cmp	r2, #144	; 0x90
    ea94:	d036      	beq.n	eb04 <__gnu_unwind_execute+0xa0>
    ea96:	2aa0      	cmp	r2, #160	; 0xa0
    ea98:	d042      	beq.n	eb20 <__gnu_unwind_execute+0xbc>
    ea9a:	2ab0      	cmp	r2, #176	; 0xb0
    ea9c:	d056      	beq.n	eb4c <__gnu_unwind_execute+0xe8>
    ea9e:	2ac0      	cmp	r2, #192	; 0xc0
    eaa0:	f000 8082 	beq.w	eba8 <__gnu_unwind_execute+0x144>
    eaa4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    eaa8:	2bd0      	cmp	r3, #208	; 0xd0
    eaaa:	d10b      	bne.n	eac4 <__gnu_unwind_execute+0x60>
    eaac:	f000 0407 	and.w	r4, r0, #7
    eab0:	1c62      	adds	r2, r4, #1
    eab2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    eab6:	4630      	mov	r0, r6
    eab8:	2101      	movs	r1, #1
    eaba:	2305      	movs	r3, #5
    eabc:	f7ff fdac 	bl	e618 <_Unwind_VRS_Pop>
    eac0:	2800      	cmp	r0, #0
    eac2:	d0d6      	beq.n	ea72 <__gnu_unwind_execute+0xe>
    eac4:	2009      	movs	r0, #9
    eac6:	b005      	add	sp, #20
    eac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    eacc:	af03      	add	r7, sp, #12
    eace:	ea4f 0980 	mov.w	r9, r0, lsl #2
    ead2:	460b      	mov	r3, r1
    ead4:	9700      	str	r7, [sp, #0]
    ead6:	4630      	mov	r0, r6
    ead8:	220d      	movs	r2, #13
    eada:	f7ff fb97 	bl	e20c <_Unwind_VRS_Get>
    eade:	fa5f f989 	uxtb.w	r9, r9
    eae2:	9b03      	ldr	r3, [sp, #12]
    eae4:	f109 0904 	add.w	r9, r9, #4
    eae8:	0660      	lsls	r0, r4, #25
    eaea:	bf4c      	ite	mi
    eaec:	ebc9 0303 	rsbmi	r3, r9, r3
    eaf0:	444b      	addpl	r3, r9
    eaf2:	9303      	str	r3, [sp, #12]
    eaf4:	2100      	movs	r1, #0
    eaf6:	9700      	str	r7, [sp, #0]
    eaf8:	460b      	mov	r3, r1
    eafa:	4630      	mov	r0, r6
    eafc:	220d      	movs	r2, #13
    eafe:	f7ff fbad 	bl	e25c <_Unwind_VRS_Set>
    eb02:	e7b6      	b.n	ea72 <__gnu_unwind_execute+0xe>
    eb04:	f000 030d 	and.w	r3, r0, #13
    eb08:	2b0d      	cmp	r3, #13
    eb0a:	d0db      	beq.n	eac4 <__gnu_unwind_execute+0x60>
    eb0c:	af03      	add	r7, sp, #12
    eb0e:	2100      	movs	r1, #0
    eb10:	f000 020f 	and.w	r2, r0, #15
    eb14:	9700      	str	r7, [sp, #0]
    eb16:	460b      	mov	r3, r1
    eb18:	4630      	mov	r0, r6
    eb1a:	f7ff fb77 	bl	e20c <_Unwind_VRS_Get>
    eb1e:	e7e9      	b.n	eaf4 <__gnu_unwind_execute+0x90>
    eb20:	43c2      	mvns	r2, r0
    eb22:	f44f 637f 	mov.w	r3, #4080	; 0xff0
    eb26:	f002 0207 	and.w	r2, r2, #7
    eb2a:	fa43 f202 	asr.w	r2, r3, r2
    eb2e:	0701      	lsls	r1, r0, #28
    eb30:	ea02 0203 	and.w	r2, r2, r3
    eb34:	f04f 0100 	mov.w	r1, #0
    eb38:	bf48      	it	mi
    eb3a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    eb3e:	460b      	mov	r3, r1
    eb40:	4630      	mov	r0, r6
    eb42:	f7ff fd69 	bl	e618 <_Unwind_VRS_Pop>
    eb46:	2800      	cmp	r0, #0
    eb48:	d1bc      	bne.n	eac4 <__gnu_unwind_execute+0x60>
    eb4a:	e792      	b.n	ea72 <__gnu_unwind_execute+0xe>
    eb4c:	28b1      	cmp	r0, #177	; 0xb1
    eb4e:	d048      	beq.n	ebe2 <__gnu_unwind_execute+0x17e>
    eb50:	28b2      	cmp	r0, #178	; 0xb2
    eb52:	d051      	beq.n	ebf8 <__gnu_unwind_execute+0x194>
    eb54:	28b3      	cmp	r0, #179	; 0xb3
    eb56:	d07c      	beq.n	ec52 <__gnu_unwind_execute+0x1ee>
    eb58:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    eb5c:	2bb4      	cmp	r3, #180	; 0xb4
    eb5e:	d0b1      	beq.n	eac4 <__gnu_unwind_execute+0x60>
    eb60:	f000 0207 	and.w	r2, r0, #7
    eb64:	3201      	adds	r2, #1
    eb66:	2101      	movs	r1, #1
    eb68:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    eb6c:	460b      	mov	r3, r1
    eb6e:	4630      	mov	r0, r6
    eb70:	f7ff fd52 	bl	e618 <_Unwind_VRS_Pop>
    eb74:	2800      	cmp	r0, #0
    eb76:	d1a5      	bne.n	eac4 <__gnu_unwind_execute+0x60>
    eb78:	e77b      	b.n	ea72 <__gnu_unwind_execute+0xe>
    eb7a:	4628      	mov	r0, r5
    eb7c:	f7ff ff48 	bl	ea10 <next_unwind_byte>
    eb80:	0224      	lsls	r4, r4, #8
    eb82:	4320      	orrs	r0, r4
    eb84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    eb88:	d09c      	beq.n	eac4 <__gnu_unwind_execute+0x60>
    eb8a:	0104      	lsls	r4, r0, #4
    eb8c:	2100      	movs	r1, #0
    eb8e:	b2a2      	uxth	r2, r4
    eb90:	460b      	mov	r3, r1
    eb92:	4630      	mov	r0, r6
    eb94:	f7ff fd40 	bl	e618 <_Unwind_VRS_Pop>
    eb98:	2800      	cmp	r0, #0
    eb9a:	d193      	bne.n	eac4 <__gnu_unwind_execute+0x60>
    eb9c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    eba0:	bf18      	it	ne
    eba2:	f04f 0801 	movne.w	r8, #1
    eba6:	e764      	b.n	ea72 <__gnu_unwind_execute+0xe>
    eba8:	28c6      	cmp	r0, #198	; 0xc6
    ebaa:	d05e      	beq.n	ec6a <__gnu_unwind_execute+0x206>
    ebac:	28c7      	cmp	r0, #199	; 0xc7
    ebae:	d068      	beq.n	ec82 <__gnu_unwind_execute+0x21e>
    ebb0:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    ebb4:	2bc0      	cmp	r3, #192	; 0xc0
    ebb6:	d077      	beq.n	eca8 <__gnu_unwind_execute+0x244>
    ebb8:	28c8      	cmp	r0, #200	; 0xc8
    ebba:	f000 808d 	beq.w	ecd8 <__gnu_unwind_execute+0x274>
    ebbe:	28c9      	cmp	r0, #201	; 0xc9
    ebc0:	d180      	bne.n	eac4 <__gnu_unwind_execute+0x60>
    ebc2:	4628      	mov	r0, r5
    ebc4:	f7ff ff24 	bl	ea10 <next_unwind_byte>
    ebc8:	f000 030f 	and.w	r3, r0, #15
    ebcc:	3301      	adds	r3, #1
    ebce:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    ebd2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    ebd6:	e76e      	b.n	eab6 <__gnu_unwind_execute+0x52>
    ebd8:	f1b8 0f00 	cmp.w	r8, #0
    ebdc:	d06b      	beq.n	ecb6 <__gnu_unwind_execute+0x252>
    ebde:	2000      	movs	r0, #0
    ebe0:	e771      	b.n	eac6 <__gnu_unwind_execute+0x62>
    ebe2:	4628      	mov	r0, r5
    ebe4:	f7ff ff14 	bl	ea10 <next_unwind_byte>
    ebe8:	4602      	mov	r2, r0
    ebea:	2800      	cmp	r0, #0
    ebec:	f43f af6a 	beq.w	eac4 <__gnu_unwind_execute+0x60>
    ebf0:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
    ebf4:	d0ba      	beq.n	eb6c <__gnu_unwind_execute+0x108>
    ebf6:	e765      	b.n	eac4 <__gnu_unwind_execute+0x60>
    ebf8:	2100      	movs	r1, #0
    ebfa:	af03      	add	r7, sp, #12
    ebfc:	220d      	movs	r2, #13
    ebfe:	460b      	mov	r3, r1
    ec00:	9700      	str	r7, [sp, #0]
    ec02:	4630      	mov	r0, r6
    ec04:	f7ff fb02 	bl	e20c <_Unwind_VRS_Get>
    ec08:	4628      	mov	r0, r5
    ec0a:	f7ff ff01 	bl	ea10 <next_unwind_byte>
    ec0e:	0602      	lsls	r2, r0, #24
    ec10:	f04f 0402 	mov.w	r4, #2
    ec14:	d50c      	bpl.n	ec30 <__gnu_unwind_execute+0x1cc>
    ec16:	9b03      	ldr	r3, [sp, #12]
    ec18:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    ec1c:	40a0      	lsls	r0, r4
    ec1e:	4403      	add	r3, r0
    ec20:	4628      	mov	r0, r5
    ec22:	9303      	str	r3, [sp, #12]
    ec24:	f7ff fef4 	bl	ea10 <next_unwind_byte>
    ec28:	0603      	lsls	r3, r0, #24
    ec2a:	f104 0407 	add.w	r4, r4, #7
    ec2e:	d4f2      	bmi.n	ec16 <__gnu_unwind_execute+0x1b2>
    ec30:	9b03      	ldr	r3, [sp, #12]
    ec32:	9700      	str	r7, [sp, #0]
    ec34:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    ec38:	fa00 f404 	lsl.w	r4, r0, r4
    ec3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
    ec40:	2100      	movs	r1, #0
    ec42:	441c      	add	r4, r3
    ec44:	4630      	mov	r0, r6
    ec46:	460b      	mov	r3, r1
    ec48:	220d      	movs	r2, #13
    ec4a:	9403      	str	r4, [sp, #12]
    ec4c:	f7ff fb06 	bl	e25c <_Unwind_VRS_Set>
    ec50:	e70f      	b.n	ea72 <__gnu_unwind_execute+0xe>
    ec52:	4628      	mov	r0, r5
    ec54:	f7ff fedc 	bl	ea10 <next_unwind_byte>
    ec58:	f000 030f 	and.w	r3, r0, #15
    ec5c:	3301      	adds	r3, #1
    ec5e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    ec62:	2101      	movs	r1, #1
    ec64:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    ec68:	e780      	b.n	eb6c <__gnu_unwind_execute+0x108>
    ec6a:	4628      	mov	r0, r5
    ec6c:	f7ff fed0 	bl	ea10 <next_unwind_byte>
    ec70:	f000 030f 	and.w	r3, r0, #15
    ec74:	3301      	adds	r3, #1
    ec76:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    ec7a:	2103      	movs	r1, #3
    ec7c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    ec80:	e774      	b.n	eb6c <__gnu_unwind_execute+0x108>
    ec82:	4628      	mov	r0, r5
    ec84:	f7ff fec4 	bl	ea10 <next_unwind_byte>
    ec88:	4602      	mov	r2, r0
    ec8a:	2800      	cmp	r0, #0
    ec8c:	f43f af1a 	beq.w	eac4 <__gnu_unwind_execute+0x60>
    ec90:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    ec94:	f47f af16 	bne.w	eac4 <__gnu_unwind_execute+0x60>
    ec98:	4630      	mov	r0, r6
    ec9a:	2104      	movs	r1, #4
    ec9c:	f7ff fcbc 	bl	e618 <_Unwind_VRS_Pop>
    eca0:	2800      	cmp	r0, #0
    eca2:	f47f af0f 	bne.w	eac4 <__gnu_unwind_execute+0x60>
    eca6:	e6e4      	b.n	ea72 <__gnu_unwind_execute+0xe>
    eca8:	f000 020f 	and.w	r2, r0, #15
    ecac:	3201      	adds	r2, #1
    ecae:	2103      	movs	r1, #3
    ecb0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    ecb4:	e75a      	b.n	eb6c <__gnu_unwind_execute+0x108>
    ecb6:	ac03      	add	r4, sp, #12
    ecb8:	4641      	mov	r1, r8
    ecba:	220e      	movs	r2, #14
    ecbc:	4643      	mov	r3, r8
    ecbe:	9400      	str	r4, [sp, #0]
    ecc0:	4630      	mov	r0, r6
    ecc2:	f7ff faa3 	bl	e20c <_Unwind_VRS_Get>
    ecc6:	9400      	str	r4, [sp, #0]
    ecc8:	4630      	mov	r0, r6
    ecca:	4641      	mov	r1, r8
    eccc:	220f      	movs	r2, #15
    ecce:	4643      	mov	r3, r8
    ecd0:	f7ff fac4 	bl	e25c <_Unwind_VRS_Set>
    ecd4:	4640      	mov	r0, r8
    ecd6:	e6f6      	b.n	eac6 <__gnu_unwind_execute+0x62>
    ecd8:	4628      	mov	r0, r5
    ecda:	f7ff fe99 	bl	ea10 <next_unwind_byte>
    ecde:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    ece2:	f000 030f 	and.w	r3, r0, #15
    ece6:	3210      	adds	r2, #16
    ece8:	3301      	adds	r3, #1
    ecea:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    ecee:	e6e2      	b.n	eab6 <__gnu_unwind_execute+0x52>

0000ecf0 <__gnu_unwind_frame>:
    ecf0:	b500      	push	{lr}
    ecf2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    ecf4:	b085      	sub	sp, #20
    ecf6:	685a      	ldr	r2, [r3, #4]
    ecf8:	2003      	movs	r0, #3
    ecfa:	f88d 000c 	strb.w	r0, [sp, #12]
    ecfe:	4608      	mov	r0, r1
    ed00:	0211      	lsls	r1, r2, #8
    ed02:	9101      	str	r1, [sp, #4]
    ed04:	79da      	ldrb	r2, [r3, #7]
    ed06:	f88d 200d 	strb.w	r2, [sp, #13]
    ed0a:	3308      	adds	r3, #8
    ed0c:	a901      	add	r1, sp, #4
    ed0e:	9302      	str	r3, [sp, #8]
    ed10:	f7ff fea8 	bl	ea64 <__gnu_unwind_execute>
    ed14:	b005      	add	sp, #20
    ed16:	f85d fb04 	ldr.w	pc, [sp], #4
    ed1a:	bf00      	nop

0000ed1c <_Unwind_GetRegionStart>:
    ed1c:	b508      	push	{r3, lr}
    ed1e:	f7ff fe9f 	bl	ea60 <unwind_UCB_from_context>
    ed22:	6c80      	ldr	r0, [r0, #72]	; 0x48
    ed24:	bd08      	pop	{r3, pc}
    ed26:	bf00      	nop

0000ed28 <_Unwind_GetLanguageSpecificData>:
    ed28:	b508      	push	{r3, lr}
    ed2a:	f7ff fe99 	bl	ea60 <unwind_UCB_from_context>
    ed2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    ed30:	79da      	ldrb	r2, [r3, #7]
    ed32:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    ed36:	3008      	adds	r0, #8
    ed38:	bd08      	pop	{r3, pc}
    ed3a:	bf00      	nop

0000ed3c <_Unwind_GetDataRelBase>:
    ed3c:	b508      	push	{r3, lr}
    ed3e:	f000 f805 	bl	ed4c <abort>
    ed42:	bf00      	nop

0000ed44 <_Unwind_GetTextRelBase>:
    ed44:	b508      	push	{r3, lr}
    ed46:	f000 f801 	bl	ed4c <abort>
    ed4a:	bf00      	nop

0000ed4c <abort>:
    ed4c:	b508      	push	{r3, lr}
    ed4e:	2006      	movs	r0, #6
    ed50:	f001 f90e 	bl	ff70 <raise>
    ed54:	2001      	movs	r0, #1
    ed56:	f7f4 fcb3 	bl	36c0 <_exit>
    ed5a:	bf00      	nop

0000ed5c <__cxa_atexit>:
    ed5c:	b410      	push	{r4}
    ed5e:	460c      	mov	r4, r1
    ed60:	4613      	mov	r3, r2
    ed62:	4601      	mov	r1, r0
    ed64:	4622      	mov	r2, r4
    ed66:	2002      	movs	r0, #2
    ed68:	f85d 4b04 	ldr.w	r4, [sp], #4
    ed6c:	f002 be24 	b.w	119b8 <__register_exitproc>

0000ed70 <fputc>:
    ed70:	4b08      	ldr	r3, [pc, #32]	; (ed94 <fputc+0x24>)
    ed72:	b570      	push	{r4, r5, r6, lr}
    ed74:	681c      	ldr	r4, [r3, #0]
    ed76:	4606      	mov	r6, r0
    ed78:	460d      	mov	r5, r1
    ed7a:	b124      	cbz	r4, ed86 <fputc+0x16>
    ed7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ed7e:	b913      	cbnz	r3, ed86 <fputc+0x16>
    ed80:	4620      	mov	r0, r4
    ed82:	f003 fef7 	bl	12b74 <__sinit>
    ed86:	4620      	mov	r0, r4
    ed88:	4631      	mov	r1, r6
    ed8a:	462a      	mov	r2, r5
    ed8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed90:	f000 be96 	b.w	fac0 <_putc_r>
    ed94:	1fff88f0 	.word	0x1fff88f0

0000ed98 <_fputs_r>:
    ed98:	b530      	push	{r4, r5, lr}
    ed9a:	b087      	sub	sp, #28
    ed9c:	4605      	mov	r5, r0
    ed9e:	4608      	mov	r0, r1
    eda0:	4614      	mov	r4, r2
    eda2:	9101      	str	r1, [sp, #4]
    eda4:	f7f4 fcc2 	bl	372c <strlen>
    eda8:	aa01      	add	r2, sp, #4
    edaa:	2301      	movs	r3, #1
    edac:	9005      	str	r0, [sp, #20]
    edae:	9002      	str	r0, [sp, #8]
    edb0:	9203      	str	r2, [sp, #12]
    edb2:	9304      	str	r3, [sp, #16]
    edb4:	b10d      	cbz	r5, edba <_fputs_r+0x22>
    edb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
    edb8:	b183      	cbz	r3, eddc <_fputs_r+0x44>
    edba:	89a3      	ldrh	r3, [r4, #12]
    edbc:	049a      	lsls	r2, r3, #18
    edbe:	d406      	bmi.n	edce <_fputs_r+0x36>
    edc0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    edc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    edc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    edca:	81a3      	strh	r3, [r4, #12]
    edcc:	6662      	str	r2, [r4, #100]	; 0x64
    edce:	4628      	mov	r0, r5
    edd0:	4621      	mov	r1, r4
    edd2:	aa03      	add	r2, sp, #12
    edd4:	f000 f80e 	bl	edf4 <__sfvwrite_r>
    edd8:	b007      	add	sp, #28
    edda:	bd30      	pop	{r4, r5, pc}
    eddc:	4628      	mov	r0, r5
    edde:	f003 fec9 	bl	12b74 <__sinit>
    ede2:	e7ea      	b.n	edba <_fputs_r+0x22>

0000ede4 <fputs>:
    ede4:	4b02      	ldr	r3, [pc, #8]	; (edf0 <fputs+0xc>)
    ede6:	460a      	mov	r2, r1
    ede8:	4601      	mov	r1, r0
    edea:	6818      	ldr	r0, [r3, #0]
    edec:	f7ff bfd4 	b.w	ed98 <_fputs_r>
    edf0:	1fff88f0 	.word	0x1fff88f0

0000edf4 <__sfvwrite_r>:
    edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edf8:	6893      	ldr	r3, [r2, #8]
    edfa:	b083      	sub	sp, #12
    edfc:	4616      	mov	r6, r2
    edfe:	4681      	mov	r9, r0
    ee00:	460c      	mov	r4, r1
    ee02:	b32b      	cbz	r3, ee50 <__sfvwrite_r+0x5c>
    ee04:	898b      	ldrh	r3, [r1, #12]
    ee06:	0719      	lsls	r1, r3, #28
    ee08:	d526      	bpl.n	ee58 <__sfvwrite_r+0x64>
    ee0a:	6922      	ldr	r2, [r4, #16]
    ee0c:	b322      	cbz	r2, ee58 <__sfvwrite_r+0x64>
    ee0e:	f003 0202 	and.w	r2, r3, #2
    ee12:	b292      	uxth	r2, r2
    ee14:	6835      	ldr	r5, [r6, #0]
    ee16:	2a00      	cmp	r2, #0
    ee18:	d02c      	beq.n	ee74 <__sfvwrite_r+0x80>
    ee1a:	f04f 0a00 	mov.w	sl, #0
    ee1e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; f108 <__sfvwrite_r+0x314>
    ee22:	46d0      	mov	r8, sl
    ee24:	45d8      	cmp	r8, fp
    ee26:	bf34      	ite	cc
    ee28:	4643      	movcc	r3, r8
    ee2a:	465b      	movcs	r3, fp
    ee2c:	4652      	mov	r2, sl
    ee2e:	4648      	mov	r0, r9
    ee30:	f1b8 0f00 	cmp.w	r8, #0
    ee34:	d04f      	beq.n	eed6 <__sfvwrite_r+0xe2>
    ee36:	69e1      	ldr	r1, [r4, #28]
    ee38:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ee3a:	47b8      	blx	r7
    ee3c:	2800      	cmp	r0, #0
    ee3e:	dd56      	ble.n	eeee <__sfvwrite_r+0xfa>
    ee40:	68b3      	ldr	r3, [r6, #8]
    ee42:	1a1b      	subs	r3, r3, r0
    ee44:	4482      	add	sl, r0
    ee46:	ebc0 0808 	rsb	r8, r0, r8
    ee4a:	60b3      	str	r3, [r6, #8]
    ee4c:	2b00      	cmp	r3, #0
    ee4e:	d1e9      	bne.n	ee24 <__sfvwrite_r+0x30>
    ee50:	2000      	movs	r0, #0
    ee52:	b003      	add	sp, #12
    ee54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee58:	4648      	mov	r0, r9
    ee5a:	4621      	mov	r1, r4
    ee5c:	f002 fd4a 	bl	118f4 <__swsetup_r>
    ee60:	2800      	cmp	r0, #0
    ee62:	f040 8148 	bne.w	f0f6 <__sfvwrite_r+0x302>
    ee66:	89a3      	ldrh	r3, [r4, #12]
    ee68:	6835      	ldr	r5, [r6, #0]
    ee6a:	f003 0202 	and.w	r2, r3, #2
    ee6e:	b292      	uxth	r2, r2
    ee70:	2a00      	cmp	r2, #0
    ee72:	d1d2      	bne.n	ee1a <__sfvwrite_r+0x26>
    ee74:	f013 0a01 	ands.w	sl, r3, #1
    ee78:	d142      	bne.n	ef00 <__sfvwrite_r+0x10c>
    ee7a:	46d0      	mov	r8, sl
    ee7c:	f1b8 0f00 	cmp.w	r8, #0
    ee80:	d023      	beq.n	eeca <__sfvwrite_r+0xd6>
    ee82:	059a      	lsls	r2, r3, #22
    ee84:	68a7      	ldr	r7, [r4, #8]
    ee86:	d576      	bpl.n	ef76 <__sfvwrite_r+0x182>
    ee88:	45b8      	cmp	r8, r7
    ee8a:	f0c0 80a4 	bcc.w	efd6 <__sfvwrite_r+0x1e2>
    ee8e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    ee92:	f040 80b2 	bne.w	effa <__sfvwrite_r+0x206>
    ee96:	6820      	ldr	r0, [r4, #0]
    ee98:	46bb      	mov	fp, r7
    ee9a:	4651      	mov	r1, sl
    ee9c:	465a      	mov	r2, fp
    ee9e:	f000 fd61 	bl	f964 <memmove>
    eea2:	68a2      	ldr	r2, [r4, #8]
    eea4:	6821      	ldr	r1, [r4, #0]
    eea6:	1bd2      	subs	r2, r2, r7
    eea8:	eb01 030b 	add.w	r3, r1, fp
    eeac:	60a2      	str	r2, [r4, #8]
    eeae:	6023      	str	r3, [r4, #0]
    eeb0:	4642      	mov	r2, r8
    eeb2:	68b3      	ldr	r3, [r6, #8]
    eeb4:	1a9b      	subs	r3, r3, r2
    eeb6:	4492      	add	sl, r2
    eeb8:	ebc2 0808 	rsb	r8, r2, r8
    eebc:	60b3      	str	r3, [r6, #8]
    eebe:	2b00      	cmp	r3, #0
    eec0:	d0c6      	beq.n	ee50 <__sfvwrite_r+0x5c>
    eec2:	89a3      	ldrh	r3, [r4, #12]
    eec4:	f1b8 0f00 	cmp.w	r8, #0
    eec8:	d1db      	bne.n	ee82 <__sfvwrite_r+0x8e>
    eeca:	f8d5 a000 	ldr.w	sl, [r5]
    eece:	f8d5 8004 	ldr.w	r8, [r5, #4]
    eed2:	3508      	adds	r5, #8
    eed4:	e7d2      	b.n	ee7c <__sfvwrite_r+0x88>
    eed6:	f8d5 a000 	ldr.w	sl, [r5]
    eeda:	f8d5 8004 	ldr.w	r8, [r5, #4]
    eede:	3508      	adds	r5, #8
    eee0:	e7a0      	b.n	ee24 <__sfvwrite_r+0x30>
    eee2:	4648      	mov	r0, r9
    eee4:	4621      	mov	r1, r4
    eee6:	f003 fe29 	bl	12b3c <_fflush_r>
    eeea:	2800      	cmp	r0, #0
    eeec:	d059      	beq.n	efa2 <__sfvwrite_r+0x1ae>
    eeee:	89a3      	ldrh	r3, [r4, #12]
    eef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eef8:	81a3      	strh	r3, [r4, #12]
    eefa:	b003      	add	sp, #12
    eefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef00:	4692      	mov	sl, r2
    ef02:	9201      	str	r2, [sp, #4]
    ef04:	4693      	mov	fp, r2
    ef06:	4690      	mov	r8, r2
    ef08:	f1b8 0f00 	cmp.w	r8, #0
    ef0c:	d02b      	beq.n	ef66 <__sfvwrite_r+0x172>
    ef0e:	9f01      	ldr	r7, [sp, #4]
    ef10:	2f00      	cmp	r7, #0
    ef12:	d064      	beq.n	efde <__sfvwrite_r+0x1ea>
    ef14:	6820      	ldr	r0, [r4, #0]
    ef16:	6921      	ldr	r1, [r4, #16]
    ef18:	f8d4 c008 	ldr.w	ip, [r4, #8]
    ef1c:	6962      	ldr	r2, [r4, #20]
    ef1e:	45c2      	cmp	sl, r8
    ef20:	bf34      	ite	cc
    ef22:	4653      	movcc	r3, sl
    ef24:	4643      	movcs	r3, r8
    ef26:	4288      	cmp	r0, r1
    ef28:	461f      	mov	r7, r3
    ef2a:	d903      	bls.n	ef34 <__sfvwrite_r+0x140>
    ef2c:	4494      	add	ip, r2
    ef2e:	4563      	cmp	r3, ip
    ef30:	f300 80ae 	bgt.w	f090 <__sfvwrite_r+0x29c>
    ef34:	4293      	cmp	r3, r2
    ef36:	db36      	blt.n	efa6 <__sfvwrite_r+0x1b2>
    ef38:	4613      	mov	r3, r2
    ef3a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ef3c:	69e1      	ldr	r1, [r4, #28]
    ef3e:	4648      	mov	r0, r9
    ef40:	465a      	mov	r2, fp
    ef42:	47b8      	blx	r7
    ef44:	1e07      	subs	r7, r0, #0
    ef46:	ddd2      	ble.n	eeee <__sfvwrite_r+0xfa>
    ef48:	ebba 0a07 	subs.w	sl, sl, r7
    ef4c:	d03a      	beq.n	efc4 <__sfvwrite_r+0x1d0>
    ef4e:	68b3      	ldr	r3, [r6, #8]
    ef50:	1bdb      	subs	r3, r3, r7
    ef52:	44bb      	add	fp, r7
    ef54:	ebc7 0808 	rsb	r8, r7, r8
    ef58:	60b3      	str	r3, [r6, #8]
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	f43f af78 	beq.w	ee50 <__sfvwrite_r+0x5c>
    ef60:	f1b8 0f00 	cmp.w	r8, #0
    ef64:	d1d3      	bne.n	ef0e <__sfvwrite_r+0x11a>
    ef66:	2700      	movs	r7, #0
    ef68:	f8d5 b000 	ldr.w	fp, [r5]
    ef6c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    ef70:	9701      	str	r7, [sp, #4]
    ef72:	3508      	adds	r5, #8
    ef74:	e7c8      	b.n	ef08 <__sfvwrite_r+0x114>
    ef76:	6820      	ldr	r0, [r4, #0]
    ef78:	6923      	ldr	r3, [r4, #16]
    ef7a:	4298      	cmp	r0, r3
    ef7c:	d802      	bhi.n	ef84 <__sfvwrite_r+0x190>
    ef7e:	6963      	ldr	r3, [r4, #20]
    ef80:	4598      	cmp	r8, r3
    ef82:	d272      	bcs.n	f06a <__sfvwrite_r+0x276>
    ef84:	45b8      	cmp	r8, r7
    ef86:	bf38      	it	cc
    ef88:	4647      	movcc	r7, r8
    ef8a:	463a      	mov	r2, r7
    ef8c:	4651      	mov	r1, sl
    ef8e:	f000 fce9 	bl	f964 <memmove>
    ef92:	68a3      	ldr	r3, [r4, #8]
    ef94:	6822      	ldr	r2, [r4, #0]
    ef96:	1bdb      	subs	r3, r3, r7
    ef98:	443a      	add	r2, r7
    ef9a:	60a3      	str	r3, [r4, #8]
    ef9c:	6022      	str	r2, [r4, #0]
    ef9e:	2b00      	cmp	r3, #0
    efa0:	d09f      	beq.n	eee2 <__sfvwrite_r+0xee>
    efa2:	463a      	mov	r2, r7
    efa4:	e785      	b.n	eeb2 <__sfvwrite_r+0xbe>
    efa6:	461a      	mov	r2, r3
    efa8:	4659      	mov	r1, fp
    efaa:	9300      	str	r3, [sp, #0]
    efac:	f000 fcda 	bl	f964 <memmove>
    efb0:	9b00      	ldr	r3, [sp, #0]
    efb2:	68a1      	ldr	r1, [r4, #8]
    efb4:	6822      	ldr	r2, [r4, #0]
    efb6:	1ac9      	subs	r1, r1, r3
    efb8:	ebba 0a07 	subs.w	sl, sl, r7
    efbc:	4413      	add	r3, r2
    efbe:	60a1      	str	r1, [r4, #8]
    efc0:	6023      	str	r3, [r4, #0]
    efc2:	d1c4      	bne.n	ef4e <__sfvwrite_r+0x15a>
    efc4:	4648      	mov	r0, r9
    efc6:	4621      	mov	r1, r4
    efc8:	f003 fdb8 	bl	12b3c <_fflush_r>
    efcc:	2800      	cmp	r0, #0
    efce:	d18e      	bne.n	eeee <__sfvwrite_r+0xfa>
    efd0:	f8cd a004 	str.w	sl, [sp, #4]
    efd4:	e7bb      	b.n	ef4e <__sfvwrite_r+0x15a>
    efd6:	6820      	ldr	r0, [r4, #0]
    efd8:	4647      	mov	r7, r8
    efda:	46c3      	mov	fp, r8
    efdc:	e75d      	b.n	ee9a <__sfvwrite_r+0xa6>
    efde:	4658      	mov	r0, fp
    efe0:	210a      	movs	r1, #10
    efe2:	4642      	mov	r2, r8
    efe4:	f000 fba8 	bl	f738 <memchr>
    efe8:	2800      	cmp	r0, #0
    efea:	d07f      	beq.n	f0ec <__sfvwrite_r+0x2f8>
    efec:	f100 0a01 	add.w	sl, r0, #1
    eff0:	2701      	movs	r7, #1
    eff2:	ebcb 0a0a 	rsb	sl, fp, sl
    eff6:	9701      	str	r7, [sp, #4]
    eff8:	e78c      	b.n	ef14 <__sfvwrite_r+0x120>
    effa:	6822      	ldr	r2, [r4, #0]
    effc:	6921      	ldr	r1, [r4, #16]
    effe:	6967      	ldr	r7, [r4, #20]
    f000:	ebc1 0c02 	rsb	ip, r1, r2
    f004:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    f008:	f10c 0201 	add.w	r2, ip, #1
    f00c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    f010:	4442      	add	r2, r8
    f012:	107f      	asrs	r7, r7, #1
    f014:	4297      	cmp	r7, r2
    f016:	bf34      	ite	cc
    f018:	4617      	movcc	r7, r2
    f01a:	463a      	movcs	r2, r7
    f01c:	055b      	lsls	r3, r3, #21
    f01e:	d54f      	bpl.n	f0c0 <__sfvwrite_r+0x2cc>
    f020:	4611      	mov	r1, r2
    f022:	4648      	mov	r0, r9
    f024:	f8cd c000 	str.w	ip, [sp]
    f028:	f000 f8ea 	bl	f200 <_malloc_r>
    f02c:	f8dd c000 	ldr.w	ip, [sp]
    f030:	4683      	mov	fp, r0
    f032:	2800      	cmp	r0, #0
    f034:	d062      	beq.n	f0fc <__sfvwrite_r+0x308>
    f036:	4662      	mov	r2, ip
    f038:	6921      	ldr	r1, [r4, #16]
    f03a:	f8cd c000 	str.w	ip, [sp]
    f03e:	f000 fbf7 	bl	f830 <memcpy>
    f042:	89a2      	ldrh	r2, [r4, #12]
    f044:	f8dd c000 	ldr.w	ip, [sp]
    f048:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    f04c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f050:	81a2      	strh	r2, [r4, #12]
    f052:	eb0b 000c 	add.w	r0, fp, ip
    f056:	ebcc 0207 	rsb	r2, ip, r7
    f05a:	f8c4 b010 	str.w	fp, [r4, #16]
    f05e:	6167      	str	r7, [r4, #20]
    f060:	6020      	str	r0, [r4, #0]
    f062:	60a2      	str	r2, [r4, #8]
    f064:	4647      	mov	r7, r8
    f066:	46c3      	mov	fp, r8
    f068:	e717      	b.n	ee9a <__sfvwrite_r+0xa6>
    f06a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f06e:	4590      	cmp	r8, r2
    f070:	bf38      	it	cc
    f072:	4642      	movcc	r2, r8
    f074:	fb92 f2f3 	sdiv	r2, r2, r3
    f078:	fb02 f303 	mul.w	r3, r2, r3
    f07c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    f07e:	69e1      	ldr	r1, [r4, #28]
    f080:	4648      	mov	r0, r9
    f082:	4652      	mov	r2, sl
    f084:	47b8      	blx	r7
    f086:	2800      	cmp	r0, #0
    f088:	f77f af31 	ble.w	eeee <__sfvwrite_r+0xfa>
    f08c:	4602      	mov	r2, r0
    f08e:	e710      	b.n	eeb2 <__sfvwrite_r+0xbe>
    f090:	4662      	mov	r2, ip
    f092:	4659      	mov	r1, fp
    f094:	f8cd c000 	str.w	ip, [sp]
    f098:	f000 fc64 	bl	f964 <memmove>
    f09c:	f8dd c000 	ldr.w	ip, [sp]
    f0a0:	6823      	ldr	r3, [r4, #0]
    f0a2:	4463      	add	r3, ip
    f0a4:	6023      	str	r3, [r4, #0]
    f0a6:	4648      	mov	r0, r9
    f0a8:	4621      	mov	r1, r4
    f0aa:	f8cd c000 	str.w	ip, [sp]
    f0ae:	f003 fd45 	bl	12b3c <_fflush_r>
    f0b2:	f8dd c000 	ldr.w	ip, [sp]
    f0b6:	2800      	cmp	r0, #0
    f0b8:	f47f af19 	bne.w	eeee <__sfvwrite_r+0xfa>
    f0bc:	4667      	mov	r7, ip
    f0be:	e743      	b.n	ef48 <__sfvwrite_r+0x154>
    f0c0:	4648      	mov	r0, r9
    f0c2:	f8cd c000 	str.w	ip, [sp]
    f0c6:	f000 fd2f 	bl	fb28 <_realloc_r>
    f0ca:	f8dd c000 	ldr.w	ip, [sp]
    f0ce:	4683      	mov	fp, r0
    f0d0:	2800      	cmp	r0, #0
    f0d2:	d1be      	bne.n	f052 <__sfvwrite_r+0x25e>
    f0d4:	4648      	mov	r0, r9
    f0d6:	6921      	ldr	r1, [r4, #16]
    f0d8:	f003 fe30 	bl	12d3c <_free_r>
    f0dc:	89a3      	ldrh	r3, [r4, #12]
    f0de:	220c      	movs	r2, #12
    f0e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f0e4:	b29b      	uxth	r3, r3
    f0e6:	f8c9 2000 	str.w	r2, [r9]
    f0ea:	e701      	b.n	eef0 <__sfvwrite_r+0xfc>
    f0ec:	2701      	movs	r7, #1
    f0ee:	f108 0a01 	add.w	sl, r8, #1
    f0f2:	9701      	str	r7, [sp, #4]
    f0f4:	e70e      	b.n	ef14 <__sfvwrite_r+0x120>
    f0f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f0fa:	e6aa      	b.n	ee52 <__sfvwrite_r+0x5e>
    f0fc:	230c      	movs	r3, #12
    f0fe:	f8c9 3000 	str.w	r3, [r9]
    f102:	89a3      	ldrh	r3, [r4, #12]
    f104:	e6f4      	b.n	eef0 <__sfvwrite_r+0xfc>
    f106:	bf00      	nop
    f108:	7ffffc00 	.word	0x7ffffc00

0000f10c <_fwrite_r>:
    f10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f110:	b086      	sub	sp, #24
    f112:	fb02 f503 	mul.w	r5, r2, r3
    f116:	4617      	mov	r7, r2
    f118:	4698      	mov	r8, r3
    f11a:	aa01      	add	r2, sp, #4
    f11c:	2301      	movs	r3, #1
    f11e:	9101      	str	r1, [sp, #4]
    f120:	9502      	str	r5, [sp, #8]
    f122:	9505      	str	r5, [sp, #20]
    f124:	9203      	str	r2, [sp, #12]
    f126:	9304      	str	r3, [sp, #16]
    f128:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f12a:	4606      	mov	r6, r0
    f12c:	b108      	cbz	r0, f132 <_fwrite_r+0x26>
    f12e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    f130:	b1d3      	cbz	r3, f168 <_fwrite_r+0x5c>
    f132:	89a2      	ldrh	r2, [r4, #12]
    f134:	0493      	lsls	r3, r2, #18
    f136:	d406      	bmi.n	f146 <_fwrite_r+0x3a>
    f138:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f13a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    f13e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f142:	81a2      	strh	r2, [r4, #12]
    f144:	6663      	str	r3, [r4, #100]	; 0x64
    f146:	4630      	mov	r0, r6
    f148:	4621      	mov	r1, r4
    f14a:	aa03      	add	r2, sp, #12
    f14c:	f7ff fe52 	bl	edf4 <__sfvwrite_r>
    f150:	b130      	cbz	r0, f160 <_fwrite_r+0x54>
    f152:	9805      	ldr	r0, [sp, #20]
    f154:	1a28      	subs	r0, r5, r0
    f156:	fbb0 f0f7 	udiv	r0, r0, r7
    f15a:	b006      	add	sp, #24
    f15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f160:	4640      	mov	r0, r8
    f162:	b006      	add	sp, #24
    f164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f168:	f003 fd04 	bl	12b74 <__sinit>
    f16c:	e7e1      	b.n	f132 <_fwrite_r+0x26>
    f16e:	bf00      	nop

0000f170 <fwrite>:
    f170:	b530      	push	{r4, r5, lr}
    f172:	b083      	sub	sp, #12
    f174:	4c05      	ldr	r4, [pc, #20]	; (f18c <fwrite+0x1c>)
    f176:	9300      	str	r3, [sp, #0]
    f178:	6824      	ldr	r4, [r4, #0]
    f17a:	460d      	mov	r5, r1
    f17c:	4613      	mov	r3, r2
    f17e:	4601      	mov	r1, r0
    f180:	462a      	mov	r2, r5
    f182:	4620      	mov	r0, r4
    f184:	f7ff ffc2 	bl	f10c <_fwrite_r>
    f188:	b003      	add	sp, #12
    f18a:	bd30      	pop	{r4, r5, pc}
    f18c:	1fff88f0 	.word	0x1fff88f0

0000f190 <__libc_init_array>:
    f190:	b570      	push	{r4, r5, r6, lr}
    f192:	4e0f      	ldr	r6, [pc, #60]	; (f1d0 <__libc_init_array+0x40>)
    f194:	4d0f      	ldr	r5, [pc, #60]	; (f1d4 <__libc_init_array+0x44>)
    f196:	1b76      	subs	r6, r6, r5
    f198:	10b6      	asrs	r6, r6, #2
    f19a:	d007      	beq.n	f1ac <__libc_init_array+0x1c>
    f19c:	3d04      	subs	r5, #4
    f19e:	2400      	movs	r4, #0
    f1a0:	3401      	adds	r4, #1
    f1a2:	f855 3f04 	ldr.w	r3, [r5, #4]!
    f1a6:	4798      	blx	r3
    f1a8:	42a6      	cmp	r6, r4
    f1aa:	d1f9      	bne.n	f1a0 <__libc_init_array+0x10>
    f1ac:	4e0a      	ldr	r6, [pc, #40]	; (f1d8 <__libc_init_array+0x48>)
    f1ae:	4d0b      	ldr	r5, [pc, #44]	; (f1dc <__libc_init_array+0x4c>)
    f1b0:	1b76      	subs	r6, r6, r5
    f1b2:	f006 fc73 	bl	15a9c <_init>
    f1b6:	10b6      	asrs	r6, r6, #2
    f1b8:	d008      	beq.n	f1cc <__libc_init_array+0x3c>
    f1ba:	3d04      	subs	r5, #4
    f1bc:	2400      	movs	r4, #0
    f1be:	3401      	adds	r4, #1
    f1c0:	f855 3f04 	ldr.w	r3, [r5, #4]!
    f1c4:	4798      	blx	r3
    f1c6:	42a6      	cmp	r6, r4
    f1c8:	d1f9      	bne.n	f1be <__libc_init_array+0x2e>
    f1ca:	bd70      	pop	{r4, r5, r6, pc}
    f1cc:	bd70      	pop	{r4, r5, r6, pc}
    f1ce:	bf00      	nop
    f1d0:	00015aa8 	.word	0x00015aa8
    f1d4:	00015aa8 	.word	0x00015aa8
    f1d8:	00015ad0 	.word	0x00015ad0
    f1dc:	00015aa8 	.word	0x00015aa8

0000f1e0 <malloc>:
    f1e0:	4b02      	ldr	r3, [pc, #8]	; (f1ec <malloc+0xc>)
    f1e2:	4601      	mov	r1, r0
    f1e4:	6818      	ldr	r0, [r3, #0]
    f1e6:	f000 b80b 	b.w	f200 <_malloc_r>
    f1ea:	bf00      	nop
    f1ec:	1fff88f0 	.word	0x1fff88f0

0000f1f0 <free>:
    f1f0:	4b02      	ldr	r3, [pc, #8]	; (f1fc <free+0xc>)
    f1f2:	4601      	mov	r1, r0
    f1f4:	6818      	ldr	r0, [r3, #0]
    f1f6:	f003 bda1 	b.w	12d3c <_free_r>
    f1fa:	bf00      	nop
    f1fc:	1fff88f0 	.word	0x1fff88f0

0000f200 <_malloc_r>:
    f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f204:	f101 050b 	add.w	r5, r1, #11
    f208:	2d16      	cmp	r5, #22
    f20a:	b083      	sub	sp, #12
    f20c:	4606      	mov	r6, r0
    f20e:	d927      	bls.n	f260 <_malloc_r+0x60>
    f210:	f035 0507 	bics.w	r5, r5, #7
    f214:	d427      	bmi.n	f266 <_malloc_r+0x66>
    f216:	42a9      	cmp	r1, r5
    f218:	d825      	bhi.n	f266 <_malloc_r+0x66>
    f21a:	4630      	mov	r0, r6
    f21c:	f000 fc4c 	bl	fab8 <__malloc_lock>
    f220:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    f224:	d226      	bcs.n	f274 <_malloc_r+0x74>
    f226:	4fc1      	ldr	r7, [pc, #772]	; (f52c <_malloc_r+0x32c>)
    f228:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    f22c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
    f230:	68dc      	ldr	r4, [r3, #12]
    f232:	429c      	cmp	r4, r3
    f234:	f000 81d2 	beq.w	f5dc <_malloc_r+0x3dc>
    f238:	6863      	ldr	r3, [r4, #4]
    f23a:	68e2      	ldr	r2, [r4, #12]
    f23c:	68a1      	ldr	r1, [r4, #8]
    f23e:	f023 0303 	bic.w	r3, r3, #3
    f242:	4423      	add	r3, r4
    f244:	4630      	mov	r0, r6
    f246:	685d      	ldr	r5, [r3, #4]
    f248:	60ca      	str	r2, [r1, #12]
    f24a:	f045 0501 	orr.w	r5, r5, #1
    f24e:	6091      	str	r1, [r2, #8]
    f250:	605d      	str	r5, [r3, #4]
    f252:	f000 fc33 	bl	fabc <__malloc_unlock>
    f256:	3408      	adds	r4, #8
    f258:	4620      	mov	r0, r4
    f25a:	b003      	add	sp, #12
    f25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f260:	2510      	movs	r5, #16
    f262:	42a9      	cmp	r1, r5
    f264:	d9d9      	bls.n	f21a <_malloc_r+0x1a>
    f266:	2400      	movs	r4, #0
    f268:	230c      	movs	r3, #12
    f26a:	4620      	mov	r0, r4
    f26c:	6033      	str	r3, [r6, #0]
    f26e:	b003      	add	sp, #12
    f270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f274:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    f278:	f000 808a 	beq.w	f390 <_malloc_r+0x190>
    f27c:	f1bc 0f04 	cmp.w	ip, #4
    f280:	f200 8160 	bhi.w	f544 <_malloc_r+0x344>
    f284:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    f288:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    f28c:	ea4f 014c 	mov.w	r1, ip, lsl #1
    f290:	4fa6      	ldr	r7, [pc, #664]	; (f52c <_malloc_r+0x32c>)
    f292:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    f296:	68cc      	ldr	r4, [r1, #12]
    f298:	42a1      	cmp	r1, r4
    f29a:	d105      	bne.n	f2a8 <_malloc_r+0xa8>
    f29c:	e00c      	b.n	f2b8 <_malloc_r+0xb8>
    f29e:	2b00      	cmp	r3, #0
    f2a0:	da7a      	bge.n	f398 <_malloc_r+0x198>
    f2a2:	68e4      	ldr	r4, [r4, #12]
    f2a4:	42a1      	cmp	r1, r4
    f2a6:	d007      	beq.n	f2b8 <_malloc_r+0xb8>
    f2a8:	6862      	ldr	r2, [r4, #4]
    f2aa:	f022 0203 	bic.w	r2, r2, #3
    f2ae:	1b53      	subs	r3, r2, r5
    f2b0:	2b0f      	cmp	r3, #15
    f2b2:	ddf4      	ble.n	f29e <_malloc_r+0x9e>
    f2b4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    f2b8:	f10c 0c01 	add.w	ip, ip, #1
    f2bc:	4b9b      	ldr	r3, [pc, #620]	; (f52c <_malloc_r+0x32c>)
    f2be:	693c      	ldr	r4, [r7, #16]
    f2c0:	f103 0e08 	add.w	lr, r3, #8
    f2c4:	4574      	cmp	r4, lr
    f2c6:	f000 817e 	beq.w	f5c6 <_malloc_r+0x3c6>
    f2ca:	6861      	ldr	r1, [r4, #4]
    f2cc:	f021 0103 	bic.w	r1, r1, #3
    f2d0:	1b4a      	subs	r2, r1, r5
    f2d2:	2a0f      	cmp	r2, #15
    f2d4:	f300 8164 	bgt.w	f5a0 <_malloc_r+0x3a0>
    f2d8:	2a00      	cmp	r2, #0
    f2da:	f8c3 e014 	str.w	lr, [r3, #20]
    f2de:	f8c3 e010 	str.w	lr, [r3, #16]
    f2e2:	da6a      	bge.n	f3ba <_malloc_r+0x1ba>
    f2e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    f2e8:	f080 813a 	bcs.w	f560 <_malloc_r+0x360>
    f2ec:	08c9      	lsrs	r1, r1, #3
    f2ee:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
    f2f2:	ea4f 08a1 	mov.w	r8, r1, asr #2
    f2f6:	685a      	ldr	r2, [r3, #4]
    f2f8:	6881      	ldr	r1, [r0, #8]
    f2fa:	60a1      	str	r1, [r4, #8]
    f2fc:	f04f 0901 	mov.w	r9, #1
    f300:	fa09 f808 	lsl.w	r8, r9, r8
    f304:	ea48 0202 	orr.w	r2, r8, r2
    f308:	60e0      	str	r0, [r4, #12]
    f30a:	605a      	str	r2, [r3, #4]
    f30c:	6084      	str	r4, [r0, #8]
    f30e:	60cc      	str	r4, [r1, #12]
    f310:	ea4f 03ac 	mov.w	r3, ip, asr #2
    f314:	2001      	movs	r0, #1
    f316:	4098      	lsls	r0, r3
    f318:	4290      	cmp	r0, r2
    f31a:	d85b      	bhi.n	f3d4 <_malloc_r+0x1d4>
    f31c:	4202      	tst	r2, r0
    f31e:	d106      	bne.n	f32e <_malloc_r+0x12e>
    f320:	f02c 0c03 	bic.w	ip, ip, #3
    f324:	0040      	lsls	r0, r0, #1
    f326:	4202      	tst	r2, r0
    f328:	f10c 0c04 	add.w	ip, ip, #4
    f32c:	d0fa      	beq.n	f324 <_malloc_r+0x124>
    f32e:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
    f332:	4644      	mov	r4, r8
    f334:	46e1      	mov	r9, ip
    f336:	68e3      	ldr	r3, [r4, #12]
    f338:	429c      	cmp	r4, r3
    f33a:	d107      	bne.n	f34c <_malloc_r+0x14c>
    f33c:	e145      	b.n	f5ca <_malloc_r+0x3ca>
    f33e:	2a00      	cmp	r2, #0
    f340:	f280 8156 	bge.w	f5f0 <_malloc_r+0x3f0>
    f344:	68db      	ldr	r3, [r3, #12]
    f346:	429c      	cmp	r4, r3
    f348:	f000 813f 	beq.w	f5ca <_malloc_r+0x3ca>
    f34c:	6859      	ldr	r1, [r3, #4]
    f34e:	f021 0103 	bic.w	r1, r1, #3
    f352:	1b4a      	subs	r2, r1, r5
    f354:	2a0f      	cmp	r2, #15
    f356:	ddf2      	ble.n	f33e <_malloc_r+0x13e>
    f358:	461c      	mov	r4, r3
    f35a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    f35e:	f854 8f08 	ldr.w	r8, [r4, #8]!
    f362:	1959      	adds	r1, r3, r5
    f364:	f045 0901 	orr.w	r9, r5, #1
    f368:	f042 0501 	orr.w	r5, r2, #1
    f36c:	f8c3 9004 	str.w	r9, [r3, #4]
    f370:	4630      	mov	r0, r6
    f372:	f8c8 c00c 	str.w	ip, [r8, #12]
    f376:	f8cc 8008 	str.w	r8, [ip, #8]
    f37a:	6179      	str	r1, [r7, #20]
    f37c:	6139      	str	r1, [r7, #16]
    f37e:	f8c1 e00c 	str.w	lr, [r1, #12]
    f382:	f8c1 e008 	str.w	lr, [r1, #8]
    f386:	604d      	str	r5, [r1, #4]
    f388:	508a      	str	r2, [r1, r2]
    f38a:	f000 fb97 	bl	fabc <__malloc_unlock>
    f38e:	e763      	b.n	f258 <_malloc_r+0x58>
    f390:	217e      	movs	r1, #126	; 0x7e
    f392:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    f396:	e77b      	b.n	f290 <_malloc_r+0x90>
    f398:	4422      	add	r2, r4
    f39a:	68e3      	ldr	r3, [r4, #12]
    f39c:	6850      	ldr	r0, [r2, #4]
    f39e:	68a1      	ldr	r1, [r4, #8]
    f3a0:	f040 0501 	orr.w	r5, r0, #1
    f3a4:	60cb      	str	r3, [r1, #12]
    f3a6:	4630      	mov	r0, r6
    f3a8:	6099      	str	r1, [r3, #8]
    f3aa:	6055      	str	r5, [r2, #4]
    f3ac:	f000 fb86 	bl	fabc <__malloc_unlock>
    f3b0:	3408      	adds	r4, #8
    f3b2:	4620      	mov	r0, r4
    f3b4:	b003      	add	sp, #12
    f3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3ba:	4421      	add	r1, r4
    f3bc:	4630      	mov	r0, r6
    f3be:	684b      	ldr	r3, [r1, #4]
    f3c0:	f043 0301 	orr.w	r3, r3, #1
    f3c4:	604b      	str	r3, [r1, #4]
    f3c6:	f000 fb79 	bl	fabc <__malloc_unlock>
    f3ca:	3408      	adds	r4, #8
    f3cc:	4620      	mov	r0, r4
    f3ce:	b003      	add	sp, #12
    f3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3d4:	68bc      	ldr	r4, [r7, #8]
    f3d6:	6863      	ldr	r3, [r4, #4]
    f3d8:	f023 0903 	bic.w	r9, r3, #3
    f3dc:	45a9      	cmp	r9, r5
    f3de:	d304      	bcc.n	f3ea <_malloc_r+0x1ea>
    f3e0:	ebc5 0309 	rsb	r3, r5, r9
    f3e4:	2b0f      	cmp	r3, #15
    f3e6:	f300 8091 	bgt.w	f50c <_malloc_r+0x30c>
    f3ea:	4b51      	ldr	r3, [pc, #324]	; (f530 <_malloc_r+0x330>)
    f3ec:	4a51      	ldr	r2, [pc, #324]	; (f534 <_malloc_r+0x334>)
    f3ee:	6819      	ldr	r1, [r3, #0]
    f3f0:	6813      	ldr	r3, [r2, #0]
    f3f2:	3301      	adds	r3, #1
    f3f4:	eb05 0a01 	add.w	sl, r5, r1
    f3f8:	eb04 0b09 	add.w	fp, r4, r9
    f3fc:	f000 8161 	beq.w	f6c2 <_malloc_r+0x4c2>
    f400:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    f404:	f10a 0a0f 	add.w	sl, sl, #15
    f408:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    f40c:	f02a 0a0f 	bic.w	sl, sl, #15
    f410:	4630      	mov	r0, r6
    f412:	4651      	mov	r1, sl
    f414:	9201      	str	r2, [sp, #4]
    f416:	f000 fd6d 	bl	fef4 <_sbrk_r>
    f41a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f41e:	4680      	mov	r8, r0
    f420:	9a01      	ldr	r2, [sp, #4]
    f422:	f000 8100 	beq.w	f626 <_malloc_r+0x426>
    f426:	4583      	cmp	fp, r0
    f428:	f200 80fa 	bhi.w	f620 <_malloc_r+0x420>
    f42c:	f8df c110 	ldr.w	ip, [pc, #272]	; f540 <_malloc_r+0x340>
    f430:	f8dc 3000 	ldr.w	r3, [ip]
    f434:	45c3      	cmp	fp, r8
    f436:	4453      	add	r3, sl
    f438:	f8cc 3000 	str.w	r3, [ip]
    f43c:	f000 814a 	beq.w	f6d4 <_malloc_r+0x4d4>
    f440:	6812      	ldr	r2, [r2, #0]
    f442:	493c      	ldr	r1, [pc, #240]	; (f534 <_malloc_r+0x334>)
    f444:	3201      	adds	r2, #1
    f446:	bf1b      	ittet	ne
    f448:	ebcb 0b08 	rsbne	fp, fp, r8
    f44c:	445b      	addne	r3, fp
    f44e:	f8c1 8000 	streq.w	r8, [r1]
    f452:	f8cc 3000 	strne.w	r3, [ip]
    f456:	f018 0307 	ands.w	r3, r8, #7
    f45a:	f000 8113 	beq.w	f684 <_malloc_r+0x484>
    f45e:	f1c3 0208 	rsb	r2, r3, #8
    f462:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    f466:	4490      	add	r8, r2
    f468:	3308      	adds	r3, #8
    f46a:	44c2      	add	sl, r8
    f46c:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    f470:	ebca 0a03 	rsb	sl, sl, r3
    f474:	4651      	mov	r1, sl
    f476:	4630      	mov	r0, r6
    f478:	f8cd c004 	str.w	ip, [sp, #4]
    f47c:	f000 fd3a 	bl	fef4 <_sbrk_r>
    f480:	1c43      	adds	r3, r0, #1
    f482:	f8dd c004 	ldr.w	ip, [sp, #4]
    f486:	f000 8135 	beq.w	f6f4 <_malloc_r+0x4f4>
    f48a:	ebc8 0200 	rsb	r2, r8, r0
    f48e:	4452      	add	r2, sl
    f490:	f042 0201 	orr.w	r2, r2, #1
    f494:	f8dc 3000 	ldr.w	r3, [ip]
    f498:	f8c7 8008 	str.w	r8, [r7, #8]
    f49c:	4453      	add	r3, sl
    f49e:	42bc      	cmp	r4, r7
    f4a0:	f8c8 2004 	str.w	r2, [r8, #4]
    f4a4:	f8cc 3000 	str.w	r3, [ip]
    f4a8:	f8df a094 	ldr.w	sl, [pc, #148]	; f540 <_malloc_r+0x340>
    f4ac:	d015      	beq.n	f4da <_malloc_r+0x2da>
    f4ae:	f1b9 0f0f 	cmp.w	r9, #15
    f4b2:	f240 80ea 	bls.w	f68a <_malloc_r+0x48a>
    f4b6:	6861      	ldr	r1, [r4, #4]
    f4b8:	f1a9 020c 	sub.w	r2, r9, #12
    f4bc:	f022 0207 	bic.w	r2, r2, #7
    f4c0:	f001 0e01 	and.w	lr, r1, #1
    f4c4:	18a1      	adds	r1, r4, r2
    f4c6:	2005      	movs	r0, #5
    f4c8:	ea42 0e0e 	orr.w	lr, r2, lr
    f4cc:	2a0f      	cmp	r2, #15
    f4ce:	f8c4 e004 	str.w	lr, [r4, #4]
    f4d2:	6048      	str	r0, [r1, #4]
    f4d4:	6088      	str	r0, [r1, #8]
    f4d6:	f200 8111 	bhi.w	f6fc <_malloc_r+0x4fc>
    f4da:	4a17      	ldr	r2, [pc, #92]	; (f538 <_malloc_r+0x338>)
    f4dc:	68bc      	ldr	r4, [r7, #8]
    f4de:	6811      	ldr	r1, [r2, #0]
    f4e0:	428b      	cmp	r3, r1
    f4e2:	bf88      	it	hi
    f4e4:	6013      	strhi	r3, [r2, #0]
    f4e6:	4a15      	ldr	r2, [pc, #84]	; (f53c <_malloc_r+0x33c>)
    f4e8:	6811      	ldr	r1, [r2, #0]
    f4ea:	428b      	cmp	r3, r1
    f4ec:	bf88      	it	hi
    f4ee:	6013      	strhi	r3, [r2, #0]
    f4f0:	6862      	ldr	r2, [r4, #4]
    f4f2:	f022 0203 	bic.w	r2, r2, #3
    f4f6:	4295      	cmp	r5, r2
    f4f8:	ebc5 0302 	rsb	r3, r5, r2
    f4fc:	d801      	bhi.n	f502 <_malloc_r+0x302>
    f4fe:	2b0f      	cmp	r3, #15
    f500:	dc04      	bgt.n	f50c <_malloc_r+0x30c>
    f502:	4630      	mov	r0, r6
    f504:	f000 fada 	bl	fabc <__malloc_unlock>
    f508:	2400      	movs	r4, #0
    f50a:	e6a5      	b.n	f258 <_malloc_r+0x58>
    f50c:	1962      	adds	r2, r4, r5
    f50e:	f043 0301 	orr.w	r3, r3, #1
    f512:	f045 0501 	orr.w	r5, r5, #1
    f516:	6065      	str	r5, [r4, #4]
    f518:	4630      	mov	r0, r6
    f51a:	60ba      	str	r2, [r7, #8]
    f51c:	6053      	str	r3, [r2, #4]
    f51e:	f000 facd 	bl	fabc <__malloc_unlock>
    f522:	3408      	adds	r4, #8
    f524:	4620      	mov	r0, r4
    f526:	b003      	add	sp, #12
    f528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f52c:	1fff88f4 	.word	0x1fff88f4
    f530:	1fff9c54 	.word	0x1fff9c54
    f534:	1fff8d00 	.word	0x1fff8d00
    f538:	1fff9c50 	.word	0x1fff9c50
    f53c:	1fff9c4c 	.word	0x1fff9c4c
    f540:	1fff9c58 	.word	0x1fff9c58
    f544:	f1bc 0f14 	cmp.w	ip, #20
    f548:	d961      	bls.n	f60e <_malloc_r+0x40e>
    f54a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    f54e:	f200 808f 	bhi.w	f670 <_malloc_r+0x470>
    f552:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    f556:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    f55a:	ea4f 014c 	mov.w	r1, ip, lsl #1
    f55e:	e697      	b.n	f290 <_malloc_r+0x90>
    f560:	0a4b      	lsrs	r3, r1, #9
    f562:	2b04      	cmp	r3, #4
    f564:	d958      	bls.n	f618 <_malloc_r+0x418>
    f566:	2b14      	cmp	r3, #20
    f568:	f200 80ae 	bhi.w	f6c8 <_malloc_r+0x4c8>
    f56c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    f570:	0050      	lsls	r0, r2, #1
    f572:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    f576:	f8df 81bc 	ldr.w	r8, [pc, #444]	; f734 <_malloc_r+0x534>
    f57a:	6883      	ldr	r3, [r0, #8]
    f57c:	4283      	cmp	r3, r0
    f57e:	f000 808a 	beq.w	f696 <_malloc_r+0x496>
    f582:	685a      	ldr	r2, [r3, #4]
    f584:	f022 0203 	bic.w	r2, r2, #3
    f588:	4291      	cmp	r1, r2
    f58a:	d202      	bcs.n	f592 <_malloc_r+0x392>
    f58c:	689b      	ldr	r3, [r3, #8]
    f58e:	4298      	cmp	r0, r3
    f590:	d1f7      	bne.n	f582 <_malloc_r+0x382>
    f592:	68d9      	ldr	r1, [r3, #12]
    f594:	687a      	ldr	r2, [r7, #4]
    f596:	60e1      	str	r1, [r4, #12]
    f598:	60a3      	str	r3, [r4, #8]
    f59a:	608c      	str	r4, [r1, #8]
    f59c:	60dc      	str	r4, [r3, #12]
    f59e:	e6b7      	b.n	f310 <_malloc_r+0x110>
    f5a0:	1961      	adds	r1, r4, r5
    f5a2:	f042 0701 	orr.w	r7, r2, #1
    f5a6:	f045 0501 	orr.w	r5, r5, #1
    f5aa:	6065      	str	r5, [r4, #4]
    f5ac:	4630      	mov	r0, r6
    f5ae:	6159      	str	r1, [r3, #20]
    f5b0:	6119      	str	r1, [r3, #16]
    f5b2:	f8c1 e00c 	str.w	lr, [r1, #12]
    f5b6:	f8c1 e008 	str.w	lr, [r1, #8]
    f5ba:	604f      	str	r7, [r1, #4]
    f5bc:	508a      	str	r2, [r1, r2]
    f5be:	3408      	adds	r4, #8
    f5c0:	f000 fa7c 	bl	fabc <__malloc_unlock>
    f5c4:	e648      	b.n	f258 <_malloc_r+0x58>
    f5c6:	685a      	ldr	r2, [r3, #4]
    f5c8:	e6a2      	b.n	f310 <_malloc_r+0x110>
    f5ca:	f109 0901 	add.w	r9, r9, #1
    f5ce:	f019 0f03 	tst.w	r9, #3
    f5d2:	f104 0408 	add.w	r4, r4, #8
    f5d6:	f47f aeae 	bne.w	f336 <_malloc_r+0x136>
    f5da:	e02d      	b.n	f638 <_malloc_r+0x438>
    f5dc:	f104 0308 	add.w	r3, r4, #8
    f5e0:	6964      	ldr	r4, [r4, #20]
    f5e2:	42a3      	cmp	r3, r4
    f5e4:	bf08      	it	eq
    f5e6:	f10c 0c02 	addeq.w	ip, ip, #2
    f5ea:	f43f ae67 	beq.w	f2bc <_malloc_r+0xbc>
    f5ee:	e623      	b.n	f238 <_malloc_r+0x38>
    f5f0:	4419      	add	r1, r3
    f5f2:	461c      	mov	r4, r3
    f5f4:	6848      	ldr	r0, [r1, #4]
    f5f6:	68db      	ldr	r3, [r3, #12]
    f5f8:	f854 2f08 	ldr.w	r2, [r4, #8]!
    f5fc:	f040 0501 	orr.w	r5, r0, #1
    f600:	604d      	str	r5, [r1, #4]
    f602:	4630      	mov	r0, r6
    f604:	60d3      	str	r3, [r2, #12]
    f606:	609a      	str	r2, [r3, #8]
    f608:	f000 fa58 	bl	fabc <__malloc_unlock>
    f60c:	e624      	b.n	f258 <_malloc_r+0x58>
    f60e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
    f612:	ea4f 014c 	mov.w	r1, ip, lsl #1
    f616:	e63b      	b.n	f290 <_malloc_r+0x90>
    f618:	098a      	lsrs	r2, r1, #6
    f61a:	3238      	adds	r2, #56	; 0x38
    f61c:	0050      	lsls	r0, r2, #1
    f61e:	e7a8      	b.n	f572 <_malloc_r+0x372>
    f620:	42bc      	cmp	r4, r7
    f622:	f43f af03 	beq.w	f42c <_malloc_r+0x22c>
    f626:	68bc      	ldr	r4, [r7, #8]
    f628:	6862      	ldr	r2, [r4, #4]
    f62a:	f022 0203 	bic.w	r2, r2, #3
    f62e:	e762      	b.n	f4f6 <_malloc_r+0x2f6>
    f630:	f8d8 8000 	ldr.w	r8, [r8]
    f634:	4598      	cmp	r8, r3
    f636:	d17b      	bne.n	f730 <_malloc_r+0x530>
    f638:	f01c 0f03 	tst.w	ip, #3
    f63c:	f1a8 0308 	sub.w	r3, r8, #8
    f640:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    f644:	d1f4      	bne.n	f630 <_malloc_r+0x430>
    f646:	687b      	ldr	r3, [r7, #4]
    f648:	ea23 0300 	bic.w	r3, r3, r0
    f64c:	607b      	str	r3, [r7, #4]
    f64e:	0040      	lsls	r0, r0, #1
    f650:	4298      	cmp	r0, r3
    f652:	f63f aebf 	bhi.w	f3d4 <_malloc_r+0x1d4>
    f656:	2800      	cmp	r0, #0
    f658:	f43f aebc 	beq.w	f3d4 <_malloc_r+0x1d4>
    f65c:	4203      	tst	r3, r0
    f65e:	46cc      	mov	ip, r9
    f660:	f47f ae65 	bne.w	f32e <_malloc_r+0x12e>
    f664:	0040      	lsls	r0, r0, #1
    f666:	4203      	tst	r3, r0
    f668:	f10c 0c04 	add.w	ip, ip, #4
    f66c:	d0fa      	beq.n	f664 <_malloc_r+0x464>
    f66e:	e65e      	b.n	f32e <_malloc_r+0x12e>
    f670:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    f674:	d81a      	bhi.n	f6ac <_malloc_r+0x4ac>
    f676:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    f67a:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    f67e:	ea4f 014c 	mov.w	r1, ip, lsl #1
    f682:	e605      	b.n	f290 <_malloc_r+0x90>
    f684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f688:	e6ef      	b.n	f46a <_malloc_r+0x26a>
    f68a:	2301      	movs	r3, #1
    f68c:	f8c8 3004 	str.w	r3, [r8, #4]
    f690:	4644      	mov	r4, r8
    f692:	2200      	movs	r2, #0
    f694:	e72f      	b.n	f4f6 <_malloc_r+0x2f6>
    f696:	1091      	asrs	r1, r2, #2
    f698:	2001      	movs	r0, #1
    f69a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    f69e:	fa00 f101 	lsl.w	r1, r0, r1
    f6a2:	430a      	orrs	r2, r1
    f6a4:	f8c8 2004 	str.w	r2, [r8, #4]
    f6a8:	4619      	mov	r1, r3
    f6aa:	e774      	b.n	f596 <_malloc_r+0x396>
    f6ac:	f240 5354 	movw	r3, #1364	; 0x554
    f6b0:	459c      	cmp	ip, r3
    f6b2:	d81b      	bhi.n	f6ec <_malloc_r+0x4ec>
    f6b4:	ea4f 4c95 	mov.w	ip, r5, lsr #18
    f6b8:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
    f6bc:	ea4f 014c 	mov.w	r1, ip, lsl #1
    f6c0:	e5e6      	b.n	f290 <_malloc_r+0x90>
    f6c2:	f10a 0a10 	add.w	sl, sl, #16
    f6c6:	e6a3      	b.n	f410 <_malloc_r+0x210>
    f6c8:	2b54      	cmp	r3, #84	; 0x54
    f6ca:	d81f      	bhi.n	f70c <_malloc_r+0x50c>
    f6cc:	0b0a      	lsrs	r2, r1, #12
    f6ce:	326e      	adds	r2, #110	; 0x6e
    f6d0:	0050      	lsls	r0, r2, #1
    f6d2:	e74e      	b.n	f572 <_malloc_r+0x372>
    f6d4:	f3cb 010b 	ubfx	r1, fp, #0, #12
    f6d8:	2900      	cmp	r1, #0
    f6da:	f47f aeb1 	bne.w	f440 <_malloc_r+0x240>
    f6de:	eb0a 0109 	add.w	r1, sl, r9
    f6e2:	68ba      	ldr	r2, [r7, #8]
    f6e4:	f041 0101 	orr.w	r1, r1, #1
    f6e8:	6051      	str	r1, [r2, #4]
    f6ea:	e6f6      	b.n	f4da <_malloc_r+0x2da>
    f6ec:	21fc      	movs	r1, #252	; 0xfc
    f6ee:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    f6f2:	e5cd      	b.n	f290 <_malloc_r+0x90>
    f6f4:	2201      	movs	r2, #1
    f6f6:	f04f 0a00 	mov.w	sl, #0
    f6fa:	e6cb      	b.n	f494 <_malloc_r+0x294>
    f6fc:	f104 0108 	add.w	r1, r4, #8
    f700:	4630      	mov	r0, r6
    f702:	f003 fb1b 	bl	12d3c <_free_r>
    f706:	f8da 3000 	ldr.w	r3, [sl]
    f70a:	e6e6      	b.n	f4da <_malloc_r+0x2da>
    f70c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    f710:	d803      	bhi.n	f71a <_malloc_r+0x51a>
    f712:	0bca      	lsrs	r2, r1, #15
    f714:	3277      	adds	r2, #119	; 0x77
    f716:	0050      	lsls	r0, r2, #1
    f718:	e72b      	b.n	f572 <_malloc_r+0x372>
    f71a:	f240 5254 	movw	r2, #1364	; 0x554
    f71e:	4293      	cmp	r3, r2
    f720:	d803      	bhi.n	f72a <_malloc_r+0x52a>
    f722:	0c8a      	lsrs	r2, r1, #18
    f724:	327c      	adds	r2, #124	; 0x7c
    f726:	0050      	lsls	r0, r2, #1
    f728:	e723      	b.n	f572 <_malloc_r+0x372>
    f72a:	20fc      	movs	r0, #252	; 0xfc
    f72c:	227e      	movs	r2, #126	; 0x7e
    f72e:	e720      	b.n	f572 <_malloc_r+0x372>
    f730:	687b      	ldr	r3, [r7, #4]
    f732:	e78c      	b.n	f64e <_malloc_r+0x44e>
    f734:	1fff88f4 	.word	0x1fff88f4

0000f738 <memchr>:
    f738:	0783      	lsls	r3, r0, #30
    f73a:	b470      	push	{r4, r5, r6}
    f73c:	b2c9      	uxtb	r1, r1
    f73e:	d03f      	beq.n	f7c0 <memchr+0x88>
    f740:	1e54      	subs	r4, r2, #1
    f742:	b32a      	cbz	r2, f790 <memchr+0x58>
    f744:	7803      	ldrb	r3, [r0, #0]
    f746:	428b      	cmp	r3, r1
    f748:	d023      	beq.n	f792 <memchr+0x5a>
    f74a:	1c43      	adds	r3, r0, #1
    f74c:	e004      	b.n	f758 <memchr+0x20>
    f74e:	b1fc      	cbz	r4, f790 <memchr+0x58>
    f750:	7804      	ldrb	r4, [r0, #0]
    f752:	428c      	cmp	r4, r1
    f754:	d01d      	beq.n	f792 <memchr+0x5a>
    f756:	4614      	mov	r4, r2
    f758:	f013 0f03 	tst.w	r3, #3
    f75c:	4618      	mov	r0, r3
    f75e:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
    f762:	f103 0301 	add.w	r3, r3, #1
    f766:	d1f2      	bne.n	f74e <memchr+0x16>
    f768:	2c03      	cmp	r4, #3
    f76a:	d814      	bhi.n	f796 <memchr+0x5e>
    f76c:	1e65      	subs	r5, r4, #1
    f76e:	b34c      	cbz	r4, f7c4 <memchr+0x8c>
    f770:	7803      	ldrb	r3, [r0, #0]
    f772:	428b      	cmp	r3, r1
    f774:	d00d      	beq.n	f792 <memchr+0x5a>
    f776:	1c42      	adds	r2, r0, #1
    f778:	2300      	movs	r3, #0
    f77a:	e002      	b.n	f782 <memchr+0x4a>
    f77c:	7804      	ldrb	r4, [r0, #0]
    f77e:	428c      	cmp	r4, r1
    f780:	d007      	beq.n	f792 <memchr+0x5a>
    f782:	42ab      	cmp	r3, r5
    f784:	4610      	mov	r0, r2
    f786:	f103 0301 	add.w	r3, r3, #1
    f78a:	f102 0201 	add.w	r2, r2, #1
    f78e:	d1f5      	bne.n	f77c <memchr+0x44>
    f790:	2000      	movs	r0, #0
    f792:	bc70      	pop	{r4, r5, r6}
    f794:	4770      	bx	lr
    f796:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
    f79a:	4603      	mov	r3, r0
    f79c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    f7a0:	4618      	mov	r0, r3
    f7a2:	3304      	adds	r3, #4
    f7a4:	6802      	ldr	r2, [r0, #0]
    f7a6:	4072      	eors	r2, r6
    f7a8:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
    f7ac:	ea25 0202 	bic.w	r2, r5, r2
    f7b0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    f7b4:	d1da      	bne.n	f76c <memchr+0x34>
    f7b6:	3c04      	subs	r4, #4
    f7b8:	2c03      	cmp	r4, #3
    f7ba:	4618      	mov	r0, r3
    f7bc:	d8f0      	bhi.n	f7a0 <memchr+0x68>
    f7be:	e7d5      	b.n	f76c <memchr+0x34>
    f7c0:	4614      	mov	r4, r2
    f7c2:	e7d1      	b.n	f768 <memchr+0x30>
    f7c4:	4620      	mov	r0, r4
    f7c6:	e7e4      	b.n	f792 <memchr+0x5a>

0000f7c8 <memcmp>:
    f7c8:	2a03      	cmp	r2, #3
    f7ca:	b470      	push	{r4, r5, r6}
    f7cc:	d928      	bls.n	f820 <memcmp+0x58>
    f7ce:	ea40 0301 	orr.w	r3, r0, r1
    f7d2:	079b      	lsls	r3, r3, #30
    f7d4:	d013      	beq.n	f7fe <memcmp+0x36>
    f7d6:	7805      	ldrb	r5, [r0, #0]
    f7d8:	780c      	ldrb	r4, [r1, #0]
    f7da:	42a5      	cmp	r5, r4
    f7dc:	d124      	bne.n	f828 <memcmp+0x60>
    f7de:	3a01      	subs	r2, #1
    f7e0:	2300      	movs	r3, #0
    f7e2:	e005      	b.n	f7f0 <memcmp+0x28>
    f7e4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    f7e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    f7ec:	42a5      	cmp	r5, r4
    f7ee:	d11b      	bne.n	f828 <memcmp+0x60>
    f7f0:	4293      	cmp	r3, r2
    f7f2:	f103 0301 	add.w	r3, r3, #1
    f7f6:	d1f5      	bne.n	f7e4 <memcmp+0x1c>
    f7f8:	2000      	movs	r0, #0
    f7fa:	bc70      	pop	{r4, r5, r6}
    f7fc:	4770      	bx	lr
    f7fe:	460c      	mov	r4, r1
    f800:	4603      	mov	r3, r0
    f802:	6825      	ldr	r5, [r4, #0]
    f804:	681e      	ldr	r6, [r3, #0]
    f806:	42ae      	cmp	r6, r5
    f808:	4621      	mov	r1, r4
    f80a:	4618      	mov	r0, r3
    f80c:	f104 0404 	add.w	r4, r4, #4
    f810:	f103 0304 	add.w	r3, r3, #4
    f814:	d104      	bne.n	f820 <memcmp+0x58>
    f816:	3a04      	subs	r2, #4
    f818:	2a03      	cmp	r2, #3
    f81a:	4618      	mov	r0, r3
    f81c:	4621      	mov	r1, r4
    f81e:	d8f0      	bhi.n	f802 <memcmp+0x3a>
    f820:	2a00      	cmp	r2, #0
    f822:	d1d8      	bne.n	f7d6 <memcmp+0xe>
    f824:	4610      	mov	r0, r2
    f826:	e7e8      	b.n	f7fa <memcmp+0x32>
    f828:	1b28      	subs	r0, r5, r4
    f82a:	bc70      	pop	{r4, r5, r6}
    f82c:	4770      	bx	lr
    f82e:	bf00      	nop

0000f830 <memcpy>:
    f830:	4684      	mov	ip, r0
    f832:	ea41 0300 	orr.w	r3, r1, r0
    f836:	f013 0303 	ands.w	r3, r3, #3
    f83a:	d16d      	bne.n	f918 <memcpy+0xe8>
    f83c:	3a40      	subs	r2, #64	; 0x40
    f83e:	d341      	bcc.n	f8c4 <memcpy+0x94>
    f840:	f851 3b04 	ldr.w	r3, [r1], #4
    f844:	f840 3b04 	str.w	r3, [r0], #4
    f848:	f851 3b04 	ldr.w	r3, [r1], #4
    f84c:	f840 3b04 	str.w	r3, [r0], #4
    f850:	f851 3b04 	ldr.w	r3, [r1], #4
    f854:	f840 3b04 	str.w	r3, [r0], #4
    f858:	f851 3b04 	ldr.w	r3, [r1], #4
    f85c:	f840 3b04 	str.w	r3, [r0], #4
    f860:	f851 3b04 	ldr.w	r3, [r1], #4
    f864:	f840 3b04 	str.w	r3, [r0], #4
    f868:	f851 3b04 	ldr.w	r3, [r1], #4
    f86c:	f840 3b04 	str.w	r3, [r0], #4
    f870:	f851 3b04 	ldr.w	r3, [r1], #4
    f874:	f840 3b04 	str.w	r3, [r0], #4
    f878:	f851 3b04 	ldr.w	r3, [r1], #4
    f87c:	f840 3b04 	str.w	r3, [r0], #4
    f880:	f851 3b04 	ldr.w	r3, [r1], #4
    f884:	f840 3b04 	str.w	r3, [r0], #4
    f888:	f851 3b04 	ldr.w	r3, [r1], #4
    f88c:	f840 3b04 	str.w	r3, [r0], #4
    f890:	f851 3b04 	ldr.w	r3, [r1], #4
    f894:	f840 3b04 	str.w	r3, [r0], #4
    f898:	f851 3b04 	ldr.w	r3, [r1], #4
    f89c:	f840 3b04 	str.w	r3, [r0], #4
    f8a0:	f851 3b04 	ldr.w	r3, [r1], #4
    f8a4:	f840 3b04 	str.w	r3, [r0], #4
    f8a8:	f851 3b04 	ldr.w	r3, [r1], #4
    f8ac:	f840 3b04 	str.w	r3, [r0], #4
    f8b0:	f851 3b04 	ldr.w	r3, [r1], #4
    f8b4:	f840 3b04 	str.w	r3, [r0], #4
    f8b8:	f851 3b04 	ldr.w	r3, [r1], #4
    f8bc:	f840 3b04 	str.w	r3, [r0], #4
    f8c0:	3a40      	subs	r2, #64	; 0x40
    f8c2:	d2bd      	bcs.n	f840 <memcpy+0x10>
    f8c4:	3230      	adds	r2, #48	; 0x30
    f8c6:	d311      	bcc.n	f8ec <memcpy+0xbc>
    f8c8:	f851 3b04 	ldr.w	r3, [r1], #4
    f8cc:	f840 3b04 	str.w	r3, [r0], #4
    f8d0:	f851 3b04 	ldr.w	r3, [r1], #4
    f8d4:	f840 3b04 	str.w	r3, [r0], #4
    f8d8:	f851 3b04 	ldr.w	r3, [r1], #4
    f8dc:	f840 3b04 	str.w	r3, [r0], #4
    f8e0:	f851 3b04 	ldr.w	r3, [r1], #4
    f8e4:	f840 3b04 	str.w	r3, [r0], #4
    f8e8:	3a10      	subs	r2, #16
    f8ea:	d2ed      	bcs.n	f8c8 <memcpy+0x98>
    f8ec:	320c      	adds	r2, #12
    f8ee:	d305      	bcc.n	f8fc <memcpy+0xcc>
    f8f0:	f851 3b04 	ldr.w	r3, [r1], #4
    f8f4:	f840 3b04 	str.w	r3, [r0], #4
    f8f8:	3a04      	subs	r2, #4
    f8fa:	d2f9      	bcs.n	f8f0 <memcpy+0xc0>
    f8fc:	3204      	adds	r2, #4
    f8fe:	d008      	beq.n	f912 <memcpy+0xe2>
    f900:	07d2      	lsls	r2, r2, #31
    f902:	bf1c      	itt	ne
    f904:	f811 3b01 	ldrbne.w	r3, [r1], #1
    f908:	f800 3b01 	strbne.w	r3, [r0], #1
    f90c:	d301      	bcc.n	f912 <memcpy+0xe2>
    f90e:	880b      	ldrh	r3, [r1, #0]
    f910:	8003      	strh	r3, [r0, #0]
    f912:	4660      	mov	r0, ip
    f914:	4770      	bx	lr
    f916:	bf00      	nop
    f918:	2a08      	cmp	r2, #8
    f91a:	d313      	bcc.n	f944 <memcpy+0x114>
    f91c:	078b      	lsls	r3, r1, #30
    f91e:	d08d      	beq.n	f83c <memcpy+0xc>
    f920:	f010 0303 	ands.w	r3, r0, #3
    f924:	d08a      	beq.n	f83c <memcpy+0xc>
    f926:	f1c3 0304 	rsb	r3, r3, #4
    f92a:	1ad2      	subs	r2, r2, r3
    f92c:	07db      	lsls	r3, r3, #31
    f92e:	bf1c      	itt	ne
    f930:	f811 3b01 	ldrbne.w	r3, [r1], #1
    f934:	f800 3b01 	strbne.w	r3, [r0], #1
    f938:	d380      	bcc.n	f83c <memcpy+0xc>
    f93a:	f831 3b02 	ldrh.w	r3, [r1], #2
    f93e:	f820 3b02 	strh.w	r3, [r0], #2
    f942:	e77b      	b.n	f83c <memcpy+0xc>
    f944:	3a04      	subs	r2, #4
    f946:	d3d9      	bcc.n	f8fc <memcpy+0xcc>
    f948:	3a01      	subs	r2, #1
    f94a:	f811 3b01 	ldrb.w	r3, [r1], #1
    f94e:	f800 3b01 	strb.w	r3, [r0], #1
    f952:	d2f9      	bcs.n	f948 <memcpy+0x118>
    f954:	780b      	ldrb	r3, [r1, #0]
    f956:	7003      	strb	r3, [r0, #0]
    f958:	784b      	ldrb	r3, [r1, #1]
    f95a:	7043      	strb	r3, [r0, #1]
    f95c:	788b      	ldrb	r3, [r1, #2]
    f95e:	7083      	strb	r3, [r0, #2]
    f960:	4660      	mov	r0, ip
    f962:	4770      	bx	lr

0000f964 <memmove>:
    f964:	4288      	cmp	r0, r1
    f966:	b4f0      	push	{r4, r5, r6, r7}
    f968:	d910      	bls.n	f98c <memmove+0x28>
    f96a:	188c      	adds	r4, r1, r2
    f96c:	42a0      	cmp	r0, r4
    f96e:	d20d      	bcs.n	f98c <memmove+0x28>
    f970:	1885      	adds	r5, r0, r2
    f972:	1e53      	subs	r3, r2, #1
    f974:	b142      	cbz	r2, f988 <memmove+0x24>
    f976:	4621      	mov	r1, r4
    f978:	462a      	mov	r2, r5
    f97a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    f97e:	f802 4d01 	strb.w	r4, [r2, #-1]!
    f982:	3b01      	subs	r3, #1
    f984:	1c5c      	adds	r4, r3, #1
    f986:	d1f8      	bne.n	f97a <memmove+0x16>
    f988:	bcf0      	pop	{r4, r5, r6, r7}
    f98a:	4770      	bx	lr
    f98c:	2a0f      	cmp	r2, #15
    f98e:	d93f      	bls.n	fa10 <memmove+0xac>
    f990:	ea40 0301 	orr.w	r3, r0, r1
    f994:	079b      	lsls	r3, r3, #30
    f996:	d13f      	bne.n	fa18 <memmove+0xb4>
    f998:	f1a2 0710 	sub.w	r7, r2, #16
    f99c:	093f      	lsrs	r7, r7, #4
    f99e:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    f9a2:	3610      	adds	r6, #16
    f9a4:	460c      	mov	r4, r1
    f9a6:	4603      	mov	r3, r0
    f9a8:	6825      	ldr	r5, [r4, #0]
    f9aa:	601d      	str	r5, [r3, #0]
    f9ac:	6865      	ldr	r5, [r4, #4]
    f9ae:	605d      	str	r5, [r3, #4]
    f9b0:	68a5      	ldr	r5, [r4, #8]
    f9b2:	609d      	str	r5, [r3, #8]
    f9b4:	68e5      	ldr	r5, [r4, #12]
    f9b6:	60dd      	str	r5, [r3, #12]
    f9b8:	3310      	adds	r3, #16
    f9ba:	42b3      	cmp	r3, r6
    f9bc:	f104 0410 	add.w	r4, r4, #16
    f9c0:	d1f2      	bne.n	f9a8 <memmove+0x44>
    f9c2:	1c7b      	adds	r3, r7, #1
    f9c4:	f002 0c0f 	and.w	ip, r2, #15
    f9c8:	011b      	lsls	r3, r3, #4
    f9ca:	f1bc 0f03 	cmp.w	ip, #3
    f9ce:	4419      	add	r1, r3
    f9d0:	4403      	add	r3, r0
    f9d2:	d923      	bls.n	fa1c <memmove+0xb8>
    f9d4:	460e      	mov	r6, r1
    f9d6:	461d      	mov	r5, r3
    f9d8:	4664      	mov	r4, ip
    f9da:	3c04      	subs	r4, #4
    f9dc:	f856 7b04 	ldr.w	r7, [r6], #4
    f9e0:	f845 7b04 	str.w	r7, [r5], #4
    f9e4:	2c03      	cmp	r4, #3
    f9e6:	d8f8      	bhi.n	f9da <memmove+0x76>
    f9e8:	f1ac 0404 	sub.w	r4, ip, #4
    f9ec:	f024 0403 	bic.w	r4, r4, #3
    f9f0:	3404      	adds	r4, #4
    f9f2:	f002 0203 	and.w	r2, r2, #3
    f9f6:	4423      	add	r3, r4
    f9f8:	4421      	add	r1, r4
    f9fa:	2a00      	cmp	r2, #0
    f9fc:	d0c4      	beq.n	f988 <memmove+0x24>
    f9fe:	441a      	add	r2, r3
    fa00:	f811 4b01 	ldrb.w	r4, [r1], #1
    fa04:	f803 4b01 	strb.w	r4, [r3], #1
    fa08:	4293      	cmp	r3, r2
    fa0a:	d1f9      	bne.n	fa00 <memmove+0x9c>
    fa0c:	bcf0      	pop	{r4, r5, r6, r7}
    fa0e:	4770      	bx	lr
    fa10:	4603      	mov	r3, r0
    fa12:	2a00      	cmp	r2, #0
    fa14:	d1f3      	bne.n	f9fe <memmove+0x9a>
    fa16:	e7b7      	b.n	f988 <memmove+0x24>
    fa18:	4603      	mov	r3, r0
    fa1a:	e7f0      	b.n	f9fe <memmove+0x9a>
    fa1c:	4662      	mov	r2, ip
    fa1e:	2a00      	cmp	r2, #0
    fa20:	d1ed      	bne.n	f9fe <memmove+0x9a>
    fa22:	e7b1      	b.n	f988 <memmove+0x24>

0000fa24 <memset>:
    fa24:	b4f0      	push	{r4, r5, r6, r7}
    fa26:	0784      	lsls	r4, r0, #30
    fa28:	d043      	beq.n	fab2 <memset+0x8e>
    fa2a:	1e54      	subs	r4, r2, #1
    fa2c:	2a00      	cmp	r2, #0
    fa2e:	d03e      	beq.n	faae <memset+0x8a>
    fa30:	b2cd      	uxtb	r5, r1
    fa32:	4603      	mov	r3, r0
    fa34:	e003      	b.n	fa3e <memset+0x1a>
    fa36:	1e62      	subs	r2, r4, #1
    fa38:	2c00      	cmp	r4, #0
    fa3a:	d038      	beq.n	faae <memset+0x8a>
    fa3c:	4614      	mov	r4, r2
    fa3e:	f803 5b01 	strb.w	r5, [r3], #1
    fa42:	079a      	lsls	r2, r3, #30
    fa44:	d1f7      	bne.n	fa36 <memset+0x12>
    fa46:	2c03      	cmp	r4, #3
    fa48:	d92a      	bls.n	faa0 <memset+0x7c>
    fa4a:	b2cd      	uxtb	r5, r1
    fa4c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    fa50:	2c0f      	cmp	r4, #15
    fa52:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    fa56:	d915      	bls.n	fa84 <memset+0x60>
    fa58:	f1a4 0710 	sub.w	r7, r4, #16
    fa5c:	093f      	lsrs	r7, r7, #4
    fa5e:	f103 0610 	add.w	r6, r3, #16
    fa62:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    fa66:	461a      	mov	r2, r3
    fa68:	6015      	str	r5, [r2, #0]
    fa6a:	6055      	str	r5, [r2, #4]
    fa6c:	6095      	str	r5, [r2, #8]
    fa6e:	60d5      	str	r5, [r2, #12]
    fa70:	3210      	adds	r2, #16
    fa72:	42b2      	cmp	r2, r6
    fa74:	d1f8      	bne.n	fa68 <memset+0x44>
    fa76:	f004 040f 	and.w	r4, r4, #15
    fa7a:	3701      	adds	r7, #1
    fa7c:	2c03      	cmp	r4, #3
    fa7e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    fa82:	d90d      	bls.n	faa0 <memset+0x7c>
    fa84:	461e      	mov	r6, r3
    fa86:	4622      	mov	r2, r4
    fa88:	3a04      	subs	r2, #4
    fa8a:	2a03      	cmp	r2, #3
    fa8c:	f846 5b04 	str.w	r5, [r6], #4
    fa90:	d8fa      	bhi.n	fa88 <memset+0x64>
    fa92:	1f22      	subs	r2, r4, #4
    fa94:	f022 0203 	bic.w	r2, r2, #3
    fa98:	3204      	adds	r2, #4
    fa9a:	4413      	add	r3, r2
    fa9c:	f004 0403 	and.w	r4, r4, #3
    faa0:	b12c      	cbz	r4, faae <memset+0x8a>
    faa2:	b2c9      	uxtb	r1, r1
    faa4:	441c      	add	r4, r3
    faa6:	f803 1b01 	strb.w	r1, [r3], #1
    faaa:	42a3      	cmp	r3, r4
    faac:	d1fb      	bne.n	faa6 <memset+0x82>
    faae:	bcf0      	pop	{r4, r5, r6, r7}
    fab0:	4770      	bx	lr
    fab2:	4614      	mov	r4, r2
    fab4:	4603      	mov	r3, r0
    fab6:	e7c6      	b.n	fa46 <memset+0x22>

0000fab8 <__malloc_lock>:
    fab8:	4770      	bx	lr
    faba:	bf00      	nop

0000fabc <__malloc_unlock>:
    fabc:	4770      	bx	lr
    fabe:	bf00      	nop

0000fac0 <_putc_r>:
    fac0:	b570      	push	{r4, r5, r6, lr}
    fac2:	460d      	mov	r5, r1
    fac4:	4614      	mov	r4, r2
    fac6:	4606      	mov	r6, r0
    fac8:	b108      	cbz	r0, face <_putc_r+0xe>
    faca:	6b83      	ldr	r3, [r0, #56]	; 0x38
    facc:	b1d3      	cbz	r3, fb04 <_putc_r+0x44>
    face:	68a3      	ldr	r3, [r4, #8]
    fad0:	3b01      	subs	r3, #1
    fad2:	2b00      	cmp	r3, #0
    fad4:	60a3      	str	r3, [r4, #8]
    fad6:	db06      	blt.n	fae6 <_putc_r+0x26>
    fad8:	6823      	ldr	r3, [r4, #0]
    fada:	701d      	strb	r5, [r3, #0]
    fadc:	6823      	ldr	r3, [r4, #0]
    fade:	1c5a      	adds	r2, r3, #1
    fae0:	6022      	str	r2, [r4, #0]
    fae2:	7818      	ldrb	r0, [r3, #0]
    fae4:	bd70      	pop	{r4, r5, r6, pc}
    fae6:	69a2      	ldr	r2, [r4, #24]
    fae8:	4293      	cmp	r3, r2
    faea:	db0e      	blt.n	fb0a <_putc_r+0x4a>
    faec:	6823      	ldr	r3, [r4, #0]
    faee:	701d      	strb	r5, [r3, #0]
    faf0:	6823      	ldr	r3, [r4, #0]
    faf2:	7819      	ldrb	r1, [r3, #0]
    faf4:	290a      	cmp	r1, #10
    faf6:	d1f2      	bne.n	fade <_putc_r+0x1e>
    faf8:	4630      	mov	r0, r6
    fafa:	4622      	mov	r2, r4
    fafc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb00:	f001 be90 	b.w	11824 <__swbuf_r>
    fb04:	f003 f836 	bl	12b74 <__sinit>
    fb08:	e7e1      	b.n	face <_putc_r+0xe>
    fb0a:	4630      	mov	r0, r6
    fb0c:	4629      	mov	r1, r5
    fb0e:	4622      	mov	r2, r4
    fb10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb14:	f001 be86 	b.w	11824 <__swbuf_r>

0000fb18 <realloc>:
    fb18:	4b02      	ldr	r3, [pc, #8]	; (fb24 <realloc+0xc>)
    fb1a:	460a      	mov	r2, r1
    fb1c:	4601      	mov	r1, r0
    fb1e:	6818      	ldr	r0, [r3, #0]
    fb20:	f000 b802 	b.w	fb28 <_realloc_r>
    fb24:	1fff88f0 	.word	0x1fff88f0

0000fb28 <_realloc_r>:
    fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb2c:	460c      	mov	r4, r1
    fb2e:	b083      	sub	sp, #12
    fb30:	4690      	mov	r8, r2
    fb32:	4681      	mov	r9, r0
    fb34:	2900      	cmp	r1, #0
    fb36:	f000 80e2 	beq.w	fcfe <_realloc_r+0x1d6>
    fb3a:	f7ff ffbd 	bl	fab8 <__malloc_lock>
    fb3e:	f108 060b 	add.w	r6, r8, #11
    fb42:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fb46:	2e16      	cmp	r6, #22
    fb48:	f023 0503 	bic.w	r5, r3, #3
    fb4c:	f1a4 0708 	sub.w	r7, r4, #8
    fb50:	d84b      	bhi.n	fbea <_realloc_r+0xc2>
    fb52:	2110      	movs	r1, #16
    fb54:	460e      	mov	r6, r1
    fb56:	45b0      	cmp	r8, r6
    fb58:	d84c      	bhi.n	fbf4 <_realloc_r+0xcc>
    fb5a:	428d      	cmp	r5, r1
    fb5c:	da78      	bge.n	fc50 <_realloc_r+0x128>
    fb5e:	f8df b390 	ldr.w	fp, [pc, #912]	; fef0 <_realloc_r+0x3c8>
    fb62:	f8db e008 	ldr.w	lr, [fp, #8]
    fb66:	1978      	adds	r0, r7, r5
    fb68:	4586      	cmp	lr, r0
    fb6a:	f000 80ce 	beq.w	fd0a <_realloc_r+0x1e2>
    fb6e:	6842      	ldr	r2, [r0, #4]
    fb70:	f022 0c01 	bic.w	ip, r2, #1
    fb74:	4484      	add	ip, r0
    fb76:	f8dc c004 	ldr.w	ip, [ip, #4]
    fb7a:	f01c 0f01 	tst.w	ip, #1
    fb7e:	d07a      	beq.n	fc76 <_realloc_r+0x14e>
    fb80:	2200      	movs	r2, #0
    fb82:	4610      	mov	r0, r2
    fb84:	07db      	lsls	r3, r3, #31
    fb86:	f100 8092 	bmi.w	fcae <_realloc_r+0x186>
    fb8a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    fb8e:	ebc3 0a07 	rsb	sl, r3, r7
    fb92:	f8da 3004 	ldr.w	r3, [sl, #4]
    fb96:	f023 0303 	bic.w	r3, r3, #3
    fb9a:	442b      	add	r3, r5
    fb9c:	b388      	cbz	r0, fc02 <_realloc_r+0xda>
    fb9e:	4570      	cmp	r0, lr
    fba0:	f000 80ed 	beq.w	fd7e <_realloc_r+0x256>
    fba4:	eb02 0e03 	add.w	lr, r2, r3
    fba8:	458e      	cmp	lr, r1
    fbaa:	db2a      	blt.n	fc02 <_realloc_r+0xda>
    fbac:	68c3      	ldr	r3, [r0, #12]
    fbae:	6882      	ldr	r2, [r0, #8]
    fbb0:	4657      	mov	r7, sl
    fbb2:	60d3      	str	r3, [r2, #12]
    fbb4:	609a      	str	r2, [r3, #8]
    fbb6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    fbba:	f8da 300c 	ldr.w	r3, [sl, #12]
    fbbe:	60cb      	str	r3, [r1, #12]
    fbc0:	1f2a      	subs	r2, r5, #4
    fbc2:	2a24      	cmp	r2, #36	; 0x24
    fbc4:	6099      	str	r1, [r3, #8]
    fbc6:	f200 8126 	bhi.w	fe16 <_realloc_r+0x2ee>
    fbca:	2a13      	cmp	r2, #19
    fbcc:	f240 80b3 	bls.w	fd36 <_realloc_r+0x20e>
    fbd0:	6823      	ldr	r3, [r4, #0]
    fbd2:	f8ca 3008 	str.w	r3, [sl, #8]
    fbd6:	6863      	ldr	r3, [r4, #4]
    fbd8:	f8ca 300c 	str.w	r3, [sl, #12]
    fbdc:	2a1b      	cmp	r2, #27
    fbde:	f200 8130 	bhi.w	fe42 <_realloc_r+0x31a>
    fbe2:	3408      	adds	r4, #8
    fbe4:	f10a 0310 	add.w	r3, sl, #16
    fbe8:	e0a6      	b.n	fd38 <_realloc_r+0x210>
    fbea:	f026 0607 	bic.w	r6, r6, #7
    fbee:	2e00      	cmp	r6, #0
    fbf0:	4631      	mov	r1, r6
    fbf2:	dab0      	bge.n	fb56 <_realloc_r+0x2e>
    fbf4:	230c      	movs	r3, #12
    fbf6:	2000      	movs	r0, #0
    fbf8:	f8c9 3000 	str.w	r3, [r9]
    fbfc:	b003      	add	sp, #12
    fbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc02:	428b      	cmp	r3, r1
    fc04:	db53      	blt.n	fcae <_realloc_r+0x186>
    fc06:	4657      	mov	r7, sl
    fc08:	f8da 100c 	ldr.w	r1, [sl, #12]
    fc0c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    fc10:	1f2a      	subs	r2, r5, #4
    fc12:	2a24      	cmp	r2, #36	; 0x24
    fc14:	60c1      	str	r1, [r0, #12]
    fc16:	6088      	str	r0, [r1, #8]
    fc18:	f200 8109 	bhi.w	fe2e <_realloc_r+0x306>
    fc1c:	2a13      	cmp	r2, #19
    fc1e:	f240 8104 	bls.w	fe2a <_realloc_r+0x302>
    fc22:	6821      	ldr	r1, [r4, #0]
    fc24:	f8ca 1008 	str.w	r1, [sl, #8]
    fc28:	6861      	ldr	r1, [r4, #4]
    fc2a:	f8ca 100c 	str.w	r1, [sl, #12]
    fc2e:	2a1b      	cmp	r2, #27
    fc30:	f200 811c 	bhi.w	fe6c <_realloc_r+0x344>
    fc34:	3408      	adds	r4, #8
    fc36:	f10a 0210 	add.w	r2, sl, #16
    fc3a:	6821      	ldr	r1, [r4, #0]
    fc3c:	6011      	str	r1, [r2, #0]
    fc3e:	6861      	ldr	r1, [r4, #4]
    fc40:	6051      	str	r1, [r2, #4]
    fc42:	68a1      	ldr	r1, [r4, #8]
    fc44:	6091      	str	r1, [r2, #8]
    fc46:	461d      	mov	r5, r3
    fc48:	f8da 3004 	ldr.w	r3, [sl, #4]
    fc4c:	463c      	mov	r4, r7
    fc4e:	4657      	mov	r7, sl
    fc50:	1baa      	subs	r2, r5, r6
    fc52:	2a0f      	cmp	r2, #15
    fc54:	f003 0301 	and.w	r3, r3, #1
    fc58:	d819      	bhi.n	fc8e <_realloc_r+0x166>
    fc5a:	432b      	orrs	r3, r5
    fc5c:	443d      	add	r5, r7
    fc5e:	607b      	str	r3, [r7, #4]
    fc60:	686b      	ldr	r3, [r5, #4]
    fc62:	f043 0301 	orr.w	r3, r3, #1
    fc66:	606b      	str	r3, [r5, #4]
    fc68:	4648      	mov	r0, r9
    fc6a:	f7ff ff27 	bl	fabc <__malloc_unlock>
    fc6e:	4620      	mov	r0, r4
    fc70:	b003      	add	sp, #12
    fc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc76:	f022 0203 	bic.w	r2, r2, #3
    fc7a:	eb02 0c05 	add.w	ip, r2, r5
    fc7e:	458c      	cmp	ip, r1
    fc80:	db80      	blt.n	fb84 <_realloc_r+0x5c>
    fc82:	68c2      	ldr	r2, [r0, #12]
    fc84:	6881      	ldr	r1, [r0, #8]
    fc86:	4665      	mov	r5, ip
    fc88:	60ca      	str	r2, [r1, #12]
    fc8a:	6091      	str	r1, [r2, #8]
    fc8c:	e7e0      	b.n	fc50 <_realloc_r+0x128>
    fc8e:	19b9      	adds	r1, r7, r6
    fc90:	f042 0001 	orr.w	r0, r2, #1
    fc94:	431e      	orrs	r6, r3
    fc96:	440a      	add	r2, r1
    fc98:	607e      	str	r6, [r7, #4]
    fc9a:	6048      	str	r0, [r1, #4]
    fc9c:	6853      	ldr	r3, [r2, #4]
    fc9e:	f043 0301 	orr.w	r3, r3, #1
    fca2:	3108      	adds	r1, #8
    fca4:	6053      	str	r3, [r2, #4]
    fca6:	4648      	mov	r0, r9
    fca8:	f003 f848 	bl	12d3c <_free_r>
    fcac:	e7dc      	b.n	fc68 <_realloc_r+0x140>
    fcae:	4641      	mov	r1, r8
    fcb0:	4648      	mov	r0, r9
    fcb2:	f7ff faa5 	bl	f200 <_malloc_r>
    fcb6:	4680      	mov	r8, r0
    fcb8:	b1d0      	cbz	r0, fcf0 <_realloc_r+0x1c8>
    fcba:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fcbe:	f023 0201 	bic.w	r2, r3, #1
    fcc2:	443a      	add	r2, r7
    fcc4:	f1a0 0108 	sub.w	r1, r0, #8
    fcc8:	4291      	cmp	r1, r2
    fcca:	f000 809e 	beq.w	fe0a <_realloc_r+0x2e2>
    fcce:	1f2a      	subs	r2, r5, #4
    fcd0:	2a24      	cmp	r2, #36	; 0x24
    fcd2:	d850      	bhi.n	fd76 <_realloc_r+0x24e>
    fcd4:	2a13      	cmp	r2, #19
    fcd6:	d823      	bhi.n	fd20 <_realloc_r+0x1f8>
    fcd8:	4603      	mov	r3, r0
    fcda:	4622      	mov	r2, r4
    fcdc:	6811      	ldr	r1, [r2, #0]
    fcde:	6019      	str	r1, [r3, #0]
    fce0:	6851      	ldr	r1, [r2, #4]
    fce2:	6059      	str	r1, [r3, #4]
    fce4:	6892      	ldr	r2, [r2, #8]
    fce6:	609a      	str	r2, [r3, #8]
    fce8:	4621      	mov	r1, r4
    fcea:	4648      	mov	r0, r9
    fcec:	f003 f826 	bl	12d3c <_free_r>
    fcf0:	4648      	mov	r0, r9
    fcf2:	f7ff fee3 	bl	fabc <__malloc_unlock>
    fcf6:	4640      	mov	r0, r8
    fcf8:	b003      	add	sp, #12
    fcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcfe:	4611      	mov	r1, r2
    fd00:	b003      	add	sp, #12
    fd02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd06:	f7ff ba7b 	b.w	f200 <_malloc_r>
    fd0a:	f8de 2004 	ldr.w	r2, [lr, #4]
    fd0e:	f022 0203 	bic.w	r2, r2, #3
    fd12:	1950      	adds	r0, r2, r5
    fd14:	f106 0c10 	add.w	ip, r6, #16
    fd18:	4560      	cmp	r0, ip
    fd1a:	da19      	bge.n	fd50 <_realloc_r+0x228>
    fd1c:	4670      	mov	r0, lr
    fd1e:	e731      	b.n	fb84 <_realloc_r+0x5c>
    fd20:	6823      	ldr	r3, [r4, #0]
    fd22:	6003      	str	r3, [r0, #0]
    fd24:	6863      	ldr	r3, [r4, #4]
    fd26:	6043      	str	r3, [r0, #4]
    fd28:	2a1b      	cmp	r2, #27
    fd2a:	d863      	bhi.n	fdf4 <_realloc_r+0x2cc>
    fd2c:	f100 0308 	add.w	r3, r0, #8
    fd30:	f104 0208 	add.w	r2, r4, #8
    fd34:	e7d2      	b.n	fcdc <_realloc_r+0x1b4>
    fd36:	463b      	mov	r3, r7
    fd38:	6822      	ldr	r2, [r4, #0]
    fd3a:	601a      	str	r2, [r3, #0]
    fd3c:	6862      	ldr	r2, [r4, #4]
    fd3e:	605a      	str	r2, [r3, #4]
    fd40:	68a2      	ldr	r2, [r4, #8]
    fd42:	609a      	str	r2, [r3, #8]
    fd44:	463c      	mov	r4, r7
    fd46:	4675      	mov	r5, lr
    fd48:	f8da 3004 	ldr.w	r3, [sl, #4]
    fd4c:	4657      	mov	r7, sl
    fd4e:	e77f      	b.n	fc50 <_realloc_r+0x128>
    fd50:	4437      	add	r7, r6
    fd52:	1b83      	subs	r3, r0, r6
    fd54:	f043 0301 	orr.w	r3, r3, #1
    fd58:	f8cb 7008 	str.w	r7, [fp, #8]
    fd5c:	607b      	str	r3, [r7, #4]
    fd5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fd62:	f003 0301 	and.w	r3, r3, #1
    fd66:	431e      	orrs	r6, r3
    fd68:	4648      	mov	r0, r9
    fd6a:	f844 6c04 	str.w	r6, [r4, #-4]
    fd6e:	f7ff fea5 	bl	fabc <__malloc_unlock>
    fd72:	4620      	mov	r0, r4
    fd74:	e77c      	b.n	fc70 <_realloc_r+0x148>
    fd76:	4621      	mov	r1, r4
    fd78:	f7ff fdf4 	bl	f964 <memmove>
    fd7c:	e7b4      	b.n	fce8 <_realloc_r+0x1c0>
    fd7e:	eb02 0c03 	add.w	ip, r2, r3
    fd82:	f106 0210 	add.w	r2, r6, #16
    fd86:	4594      	cmp	ip, r2
    fd88:	f6ff af3b 	blt.w	fc02 <_realloc_r+0xda>
    fd8c:	4657      	mov	r7, sl
    fd8e:	f8da 300c 	ldr.w	r3, [sl, #12]
    fd92:	f857 1f08 	ldr.w	r1, [r7, #8]!
    fd96:	1f2a      	subs	r2, r5, #4
    fd98:	2a24      	cmp	r2, #36	; 0x24
    fd9a:	60cb      	str	r3, [r1, #12]
    fd9c:	6099      	str	r1, [r3, #8]
    fd9e:	f200 8087 	bhi.w	feb0 <_realloc_r+0x388>
    fda2:	2a13      	cmp	r2, #19
    fda4:	d978      	bls.n	fe98 <_realloc_r+0x370>
    fda6:	6823      	ldr	r3, [r4, #0]
    fda8:	f8ca 3008 	str.w	r3, [sl, #8]
    fdac:	6863      	ldr	r3, [r4, #4]
    fdae:	f8ca 300c 	str.w	r3, [sl, #12]
    fdb2:	2a1b      	cmp	r2, #27
    fdb4:	f200 8085 	bhi.w	fec2 <_realloc_r+0x39a>
    fdb8:	3408      	adds	r4, #8
    fdba:	f10a 0310 	add.w	r3, sl, #16
    fdbe:	6822      	ldr	r2, [r4, #0]
    fdc0:	601a      	str	r2, [r3, #0]
    fdc2:	6862      	ldr	r2, [r4, #4]
    fdc4:	605a      	str	r2, [r3, #4]
    fdc6:	68a2      	ldr	r2, [r4, #8]
    fdc8:	609a      	str	r2, [r3, #8]
    fdca:	eb0a 0306 	add.w	r3, sl, r6
    fdce:	ebc6 020c 	rsb	r2, r6, ip
    fdd2:	f042 0201 	orr.w	r2, r2, #1
    fdd6:	f8cb 3008 	str.w	r3, [fp, #8]
    fdda:	605a      	str	r2, [r3, #4]
    fddc:	f8da 3004 	ldr.w	r3, [sl, #4]
    fde0:	f003 0301 	and.w	r3, r3, #1
    fde4:	431e      	orrs	r6, r3
    fde6:	4648      	mov	r0, r9
    fde8:	f8ca 6004 	str.w	r6, [sl, #4]
    fdec:	f7ff fe66 	bl	fabc <__malloc_unlock>
    fdf0:	4638      	mov	r0, r7
    fdf2:	e73d      	b.n	fc70 <_realloc_r+0x148>
    fdf4:	68a3      	ldr	r3, [r4, #8]
    fdf6:	6083      	str	r3, [r0, #8]
    fdf8:	68e3      	ldr	r3, [r4, #12]
    fdfa:	60c3      	str	r3, [r0, #12]
    fdfc:	2a24      	cmp	r2, #36	; 0x24
    fdfe:	d02c      	beq.n	fe5a <_realloc_r+0x332>
    fe00:	f100 0310 	add.w	r3, r0, #16
    fe04:	f104 0210 	add.w	r2, r4, #16
    fe08:	e768      	b.n	fcdc <_realloc_r+0x1b4>
    fe0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
    fe0e:	f022 0203 	bic.w	r2, r2, #3
    fe12:	4415      	add	r5, r2
    fe14:	e71c      	b.n	fc50 <_realloc_r+0x128>
    fe16:	4621      	mov	r1, r4
    fe18:	4638      	mov	r0, r7
    fe1a:	4675      	mov	r5, lr
    fe1c:	463c      	mov	r4, r7
    fe1e:	f7ff fda1 	bl	f964 <memmove>
    fe22:	4657      	mov	r7, sl
    fe24:	f8da 3004 	ldr.w	r3, [sl, #4]
    fe28:	e712      	b.n	fc50 <_realloc_r+0x128>
    fe2a:	463a      	mov	r2, r7
    fe2c:	e705      	b.n	fc3a <_realloc_r+0x112>
    fe2e:	4621      	mov	r1, r4
    fe30:	4638      	mov	r0, r7
    fe32:	461d      	mov	r5, r3
    fe34:	463c      	mov	r4, r7
    fe36:	f7ff fd95 	bl	f964 <memmove>
    fe3a:	4657      	mov	r7, sl
    fe3c:	f8da 3004 	ldr.w	r3, [sl, #4]
    fe40:	e706      	b.n	fc50 <_realloc_r+0x128>
    fe42:	68a3      	ldr	r3, [r4, #8]
    fe44:	f8ca 3010 	str.w	r3, [sl, #16]
    fe48:	68e3      	ldr	r3, [r4, #12]
    fe4a:	f8ca 3014 	str.w	r3, [sl, #20]
    fe4e:	2a24      	cmp	r2, #36	; 0x24
    fe50:	d018      	beq.n	fe84 <_realloc_r+0x35c>
    fe52:	3410      	adds	r4, #16
    fe54:	f10a 0318 	add.w	r3, sl, #24
    fe58:	e76e      	b.n	fd38 <_realloc_r+0x210>
    fe5a:	6923      	ldr	r3, [r4, #16]
    fe5c:	6103      	str	r3, [r0, #16]
    fe5e:	6963      	ldr	r3, [r4, #20]
    fe60:	6143      	str	r3, [r0, #20]
    fe62:	f104 0218 	add.w	r2, r4, #24
    fe66:	f100 0318 	add.w	r3, r0, #24
    fe6a:	e737      	b.n	fcdc <_realloc_r+0x1b4>
    fe6c:	68a1      	ldr	r1, [r4, #8]
    fe6e:	f8ca 1010 	str.w	r1, [sl, #16]
    fe72:	68e1      	ldr	r1, [r4, #12]
    fe74:	f8ca 1014 	str.w	r1, [sl, #20]
    fe78:	2a24      	cmp	r2, #36	; 0x24
    fe7a:	d00f      	beq.n	fe9c <_realloc_r+0x374>
    fe7c:	3410      	adds	r4, #16
    fe7e:	f10a 0218 	add.w	r2, sl, #24
    fe82:	e6da      	b.n	fc3a <_realloc_r+0x112>
    fe84:	6923      	ldr	r3, [r4, #16]
    fe86:	f8ca 3018 	str.w	r3, [sl, #24]
    fe8a:	6963      	ldr	r3, [r4, #20]
    fe8c:	f8ca 301c 	str.w	r3, [sl, #28]
    fe90:	3418      	adds	r4, #24
    fe92:	f10a 0320 	add.w	r3, sl, #32
    fe96:	e74f      	b.n	fd38 <_realloc_r+0x210>
    fe98:	463b      	mov	r3, r7
    fe9a:	e790      	b.n	fdbe <_realloc_r+0x296>
    fe9c:	6922      	ldr	r2, [r4, #16]
    fe9e:	f8ca 2018 	str.w	r2, [sl, #24]
    fea2:	6962      	ldr	r2, [r4, #20]
    fea4:	f8ca 201c 	str.w	r2, [sl, #28]
    fea8:	3418      	adds	r4, #24
    feaa:	f10a 0220 	add.w	r2, sl, #32
    feae:	e6c4      	b.n	fc3a <_realloc_r+0x112>
    feb0:	4621      	mov	r1, r4
    feb2:	4638      	mov	r0, r7
    feb4:	f8cd c004 	str.w	ip, [sp, #4]
    feb8:	f7ff fd54 	bl	f964 <memmove>
    febc:	f8dd c004 	ldr.w	ip, [sp, #4]
    fec0:	e783      	b.n	fdca <_realloc_r+0x2a2>
    fec2:	68a3      	ldr	r3, [r4, #8]
    fec4:	f8ca 3010 	str.w	r3, [sl, #16]
    fec8:	68e3      	ldr	r3, [r4, #12]
    feca:	f8ca 3014 	str.w	r3, [sl, #20]
    fece:	2a24      	cmp	r2, #36	; 0x24
    fed0:	d003      	beq.n	feda <_realloc_r+0x3b2>
    fed2:	3410      	adds	r4, #16
    fed4:	f10a 0318 	add.w	r3, sl, #24
    fed8:	e771      	b.n	fdbe <_realloc_r+0x296>
    feda:	6923      	ldr	r3, [r4, #16]
    fedc:	f8ca 3018 	str.w	r3, [sl, #24]
    fee0:	6963      	ldr	r3, [r4, #20]
    fee2:	f8ca 301c 	str.w	r3, [sl, #28]
    fee6:	3418      	adds	r4, #24
    fee8:	f10a 0320 	add.w	r3, sl, #32
    feec:	e767      	b.n	fdbe <_realloc_r+0x296>
    feee:	bf00      	nop
    fef0:	1fff88f4 	.word	0x1fff88f4

0000fef4 <_sbrk_r>:
    fef4:	b538      	push	{r3, r4, r5, lr}
    fef6:	4c07      	ldr	r4, [pc, #28]	; (ff14 <_sbrk_r+0x20>)
    fef8:	2300      	movs	r3, #0
    fefa:	4605      	mov	r5, r0
    fefc:	4608      	mov	r0, r1
    fefe:	6023      	str	r3, [r4, #0]
    ff00:	f7f3 fc08 	bl	3714 <_sbrk>
    ff04:	1c43      	adds	r3, r0, #1
    ff06:	d000      	beq.n	ff0a <_sbrk_r+0x16>
    ff08:	bd38      	pop	{r3, r4, r5, pc}
    ff0a:	6823      	ldr	r3, [r4, #0]
    ff0c:	2b00      	cmp	r3, #0
    ff0e:	d0fb      	beq.n	ff08 <_sbrk_r+0x14>
    ff10:	602b      	str	r3, [r5, #0]
    ff12:	bd38      	pop	{r3, r4, r5, pc}
    ff14:	1fff9c90 	.word	0x1fff9c90

0000ff18 <_raise_r>:
    ff18:	291f      	cmp	r1, #31
    ff1a:	b538      	push	{r3, r4, r5, lr}
    ff1c:	460c      	mov	r4, r1
    ff1e:	4605      	mov	r5, r0
    ff20:	d820      	bhi.n	ff64 <_raise_r+0x4c>
    ff22:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
    ff26:	b19a      	cbz	r2, ff50 <_raise_r+0x38>
    ff28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    ff2c:	b183      	cbz	r3, ff50 <_raise_r+0x38>
    ff2e:	2b01      	cmp	r3, #1
    ff30:	d00c      	beq.n	ff4c <_raise_r+0x34>
    ff32:	1c59      	adds	r1, r3, #1
    ff34:	d006      	beq.n	ff44 <_raise_r+0x2c>
    ff36:	2500      	movs	r5, #0
    ff38:	4620      	mov	r0, r4
    ff3a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    ff3e:	4798      	blx	r3
    ff40:	4628      	mov	r0, r5
    ff42:	bd38      	pop	{r3, r4, r5, pc}
    ff44:	2316      	movs	r3, #22
    ff46:	6003      	str	r3, [r0, #0]
    ff48:	2001      	movs	r0, #1
    ff4a:	bd38      	pop	{r3, r4, r5, pc}
    ff4c:	2000      	movs	r0, #0
    ff4e:	bd38      	pop	{r3, r4, r5, pc}
    ff50:	4628      	mov	r0, r5
    ff52:	f000 f829 	bl	ffa8 <_getpid_r>
    ff56:	4622      	mov	r2, r4
    ff58:	4601      	mov	r1, r0
    ff5a:	4628      	mov	r0, r5
    ff5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ff60:	f000 b80e 	b.w	ff80 <_kill_r>
    ff64:	2316      	movs	r3, #22
    ff66:	6003      	str	r3, [r0, #0]
    ff68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ff6c:	bd38      	pop	{r3, r4, r5, pc}
    ff6e:	bf00      	nop

0000ff70 <raise>:
    ff70:	4b02      	ldr	r3, [pc, #8]	; (ff7c <raise+0xc>)
    ff72:	4601      	mov	r1, r0
    ff74:	6818      	ldr	r0, [r3, #0]
    ff76:	f7ff bfcf 	b.w	ff18 <_raise_r>
    ff7a:	bf00      	nop
    ff7c:	1fff88f0 	.word	0x1fff88f0

0000ff80 <_kill_r>:
    ff80:	b538      	push	{r3, r4, r5, lr}
    ff82:	4c08      	ldr	r4, [pc, #32]	; (ffa4 <_kill_r+0x24>)
    ff84:	2300      	movs	r3, #0
    ff86:	4605      	mov	r5, r0
    ff88:	4608      	mov	r0, r1
    ff8a:	4611      	mov	r1, r2
    ff8c:	6023      	str	r3, [r4, #0]
    ff8e:	f7f3 fbc9 	bl	3724 <_kill>
    ff92:	1c43      	adds	r3, r0, #1
    ff94:	d000      	beq.n	ff98 <_kill_r+0x18>
    ff96:	bd38      	pop	{r3, r4, r5, pc}
    ff98:	6823      	ldr	r3, [r4, #0]
    ff9a:	2b00      	cmp	r3, #0
    ff9c:	d0fb      	beq.n	ff96 <_kill_r+0x16>
    ff9e:	602b      	str	r3, [r5, #0]
    ffa0:	bd38      	pop	{r3, r4, r5, pc}
    ffa2:	bf00      	nop
    ffa4:	1fff9c90 	.word	0x1fff9c90

0000ffa8 <_getpid_r>:
    ffa8:	f7f3 bbbe 	b.w	3728 <_getpid>

0000ffac <sprintf>:
    ffac:	b40e      	push	{r1, r2, r3}
    ffae:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffb0:	b09c      	sub	sp, #112	; 0x70
    ffb2:	ab21      	add	r3, sp, #132	; 0x84
    ffb4:	490f      	ldr	r1, [pc, #60]	; (fff4 <sprintf+0x48>)
    ffb6:	f853 2b04 	ldr.w	r2, [r3], #4
    ffba:	9301      	str	r3, [sp, #4]
    ffbc:	4605      	mov	r5, r0
    ffbe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ffc2:	6808      	ldr	r0, [r1, #0]
    ffc4:	9502      	str	r5, [sp, #8]
    ffc6:	f44f 7702 	mov.w	r7, #520	; 0x208
    ffca:	f64f 76ff 	movw	r6, #65535	; 0xffff
    ffce:	a902      	add	r1, sp, #8
    ffd0:	9506      	str	r5, [sp, #24]
    ffd2:	f8ad 7014 	strh.w	r7, [sp, #20]
    ffd6:	9404      	str	r4, [sp, #16]
    ffd8:	9407      	str	r4, [sp, #28]
    ffda:	f8ad 6016 	strh.w	r6, [sp, #22]
    ffde:	f000 f973 	bl	102c8 <_svfprintf_r>
    ffe2:	9b02      	ldr	r3, [sp, #8]
    ffe4:	2200      	movs	r2, #0
    ffe6:	701a      	strb	r2, [r3, #0]
    ffe8:	b01c      	add	sp, #112	; 0x70
    ffea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ffee:	b003      	add	sp, #12
    fff0:	4770      	bx	lr
    fff2:	bf00      	nop
    fff4:	1fff88f0 	.word	0x1fff88f0

0000fff8 <strcmp>:
    fff8:	ea40 0c01 	orr.w	ip, r0, r1
    fffc:	f01c 0f07 	tst.w	ip, #7
   10000:	d123      	bne.n	1004a <strcmp+0x52>
   10002:	f1bd 0d10 	subs.w	sp, sp, #16
   10006:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1000a:	e9cd 6700 	strd	r6, r7, [sp]
   1000e:	f06f 0600 	mvn.w	r6, #0
   10012:	f04f 0700 	mov.w	r7, #0
   10016:	bf00      	nop
   10018:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   1001c:	e8f1 4502 	ldrd	r4, r5, [r1], #8
   10020:	42a2      	cmp	r2, r4
   10022:	fa82 fc46 	uadd8	ip, r2, r6
   10026:	faa7 fc86 	sel	ip, r7, r6
   1002a:	bf08      	it	eq
   1002c:	f1bc 0f00 	cmpeq.w	ip, #0
   10030:	f040 80d7 	bne.w	101e2 <strcmp+0x1ea>
   10034:	42ab      	cmp	r3, r5
   10036:	fa83 fc46 	uadd8	ip, r3, r6
   1003a:	faa7 fc86 	sel	ip, r7, r6
   1003e:	bf08      	it	eq
   10040:	f1bc 0f00 	cmpeq.w	ip, #0
   10044:	f040 80ca 	bne.w	101dc <strcmp+0x1e4>
   10048:	e7e6      	b.n	10018 <strcmp+0x20>
   1004a:	f010 0c03 	ands.w	ip, r0, #3
   1004e:	d021      	beq.n	10094 <strcmp+0x9c>
   10050:	f020 0003 	bic.w	r0, r0, #3
   10054:	f850 2b04 	ldr.w	r2, [r0], #4
   10058:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
   1005c:	d008      	beq.n	10070 <strcmp+0x78>
   1005e:	d20f      	bcs.n	10080 <strcmp+0x88>
   10060:	f811 cb01 	ldrb.w	ip, [r1], #1
   10064:	fa5f f392 	uxtb.w	r3, r2, ror #8
   10068:	ebb3 0c0c 	subs.w	ip, r3, ip
   1006c:	d110      	bne.n	10090 <strcmp+0x98>
   1006e:	b17b      	cbz	r3, 10090 <strcmp+0x98>
   10070:	f811 cb01 	ldrb.w	ip, [r1], #1
   10074:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
   10078:	ebb3 0c0c 	subs.w	ip, r3, ip
   1007c:	d108      	bne.n	10090 <strcmp+0x98>
   1007e:	b13b      	cbz	r3, 10090 <strcmp+0x98>
   10080:	f811 cb01 	ldrb.w	ip, [r1], #1
   10084:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
   10088:	ebb3 0c0c 	subs.w	ip, r3, ip
   1008c:	d100      	bne.n	10090 <strcmp+0x98>
   1008e:	b90b      	cbnz	r3, 10094 <strcmp+0x9c>
   10090:	4660      	mov	r0, ip
   10092:	4770      	bx	lr
   10094:	f1bd 0d10 	subs.w	sp, sp, #16
   10098:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1009c:	e9cd 6700 	strd	r6, r7, [sp]
   100a0:	f06f 0600 	mvn.w	r6, #0
   100a4:	f04f 0700 	mov.w	r7, #0
   100a8:	f011 0c03 	ands.w	ip, r1, #3
   100ac:	d12d      	bne.n	1010a <strcmp+0x112>
   100ae:	f010 0f04 	tst.w	r0, #4
   100b2:	d00d      	beq.n	100d0 <strcmp+0xd8>
   100b4:	f850 2b04 	ldr.w	r2, [r0], #4
   100b8:	f851 4b04 	ldr.w	r4, [r1], #4
   100bc:	42a2      	cmp	r2, r4
   100be:	fa82 fc46 	uadd8	ip, r2, r6
   100c2:	faa7 fc86 	sel	ip, r7, r6
   100c6:	bf08      	it	eq
   100c8:	f1bc 0f00 	cmpeq.w	ip, #0
   100cc:	f040 8089 	bne.w	101e2 <strcmp+0x1ea>
   100d0:	f011 0f04 	tst.w	r1, #4
   100d4:	d09f      	beq.n	10016 <strcmp+0x1e>
   100d6:	f851 5b04 	ldr.w	r5, [r1], #4
   100da:	bf00      	nop
   100dc:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   100e0:	42aa      	cmp	r2, r5
   100e2:	fa82 fc46 	uadd8	ip, r2, r6
   100e6:	faa7 fc86 	sel	ip, r7, r6
   100ea:	bf08      	it	eq
   100ec:	f1bc 0f00 	cmpeq.w	ip, #0
   100f0:	d171      	bne.n	101d6 <strcmp+0x1de>
   100f2:	e8f1 4502 	ldrd	r4, r5, [r1], #8
   100f6:	42a3      	cmp	r3, r4
   100f8:	fa83 fc46 	uadd8	ip, r3, r6
   100fc:	faa7 fc86 	sel	ip, r7, r6
   10100:	bf08      	it	eq
   10102:	f1bc 0f00 	cmpeq.w	ip, #0
   10106:	d163      	bne.n	101d0 <strcmp+0x1d8>
   10108:	e7e8      	b.n	100dc <strcmp+0xe4>
   1010a:	f021 0103 	bic.w	r1, r1, #3
   1010e:	f1bc 0f02 	cmp.w	ip, #2
   10112:	d01e      	beq.n	10152 <strcmp+0x15a>
   10114:	da3b      	bge.n	1018e <strcmp+0x196>
   10116:	f851 5b04 	ldr.w	r5, [r1], #4
   1011a:	bf00      	nop
   1011c:	f850 3b04 	ldr.w	r3, [r0], #4
   10120:	ea4f 2515 	mov.w	r5, r5, lsr #8
   10124:	fa83 fc46 	uadd8	ip, r3, r6
   10128:	faa7 fc86 	sel	ip, r7, r6
   1012c:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
   10130:	ea03 2216 	and.w	r2, r3, r6, lsr #8
   10134:	bf08      	it	eq
   10136:	42aa      	cmpeq	r2, r5
   10138:	d14d      	bne.n	101d6 <strcmp+0x1de>
   1013a:	f851 5b04 	ldr.w	r5, [r1], #4
   1013e:	f1bc 0f00 	cmp.w	ip, #0
   10142:	ea82 0303 	eor.w	r3, r2, r3
   10146:	ea4f 6205 	mov.w	r2, r5, lsl #24
   1014a:	bf08      	it	eq
   1014c:	4293      	cmpeq	r3, r2
   1014e:	d13c      	bne.n	101ca <strcmp+0x1d2>
   10150:	e7e4      	b.n	1011c <strcmp+0x124>
   10152:	f851 5b04 	ldr.w	r5, [r1], #4
   10156:	bf00      	nop
   10158:	f850 3b04 	ldr.w	r3, [r0], #4
   1015c:	ea4f 4515 	mov.w	r5, r5, lsr #16
   10160:	fa83 fc46 	uadd8	ip, r3, r6
   10164:	faa7 fc86 	sel	ip, r7, r6
   10168:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
   1016c:	ea03 4216 	and.w	r2, r3, r6, lsr #16
   10170:	bf08      	it	eq
   10172:	42aa      	cmpeq	r2, r5
   10174:	d12f      	bne.n	101d6 <strcmp+0x1de>
   10176:	f851 5b04 	ldr.w	r5, [r1], #4
   1017a:	f1bc 0f00 	cmp.w	ip, #0
   1017e:	ea82 0303 	eor.w	r3, r2, r3
   10182:	ea4f 4205 	mov.w	r2, r5, lsl #16
   10186:	bf08      	it	eq
   10188:	4293      	cmpeq	r3, r2
   1018a:	d11e      	bne.n	101ca <strcmp+0x1d2>
   1018c:	e7e4      	b.n	10158 <strcmp+0x160>
   1018e:	f851 5b04 	ldr.w	r5, [r1], #4
   10192:	bf00      	nop
   10194:	f850 3b04 	ldr.w	r3, [r0], #4
   10198:	ea4f 6515 	mov.w	r5, r5, lsr #24
   1019c:	fa83 fc46 	uadd8	ip, r3, r6
   101a0:	faa7 fc86 	sel	ip, r7, r6
   101a4:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
   101a8:	ea03 6216 	and.w	r2, r3, r6, lsr #24
   101ac:	bf08      	it	eq
   101ae:	42aa      	cmpeq	r2, r5
   101b0:	d111      	bne.n	101d6 <strcmp+0x1de>
   101b2:	f851 5b04 	ldr.w	r5, [r1], #4
   101b6:	f1bc 0f00 	cmp.w	ip, #0
   101ba:	ea82 0303 	eor.w	r3, r2, r3
   101be:	ea4f 2205 	mov.w	r2, r5, lsl #8
   101c2:	bf08      	it	eq
   101c4:	4293      	cmpeq	r3, r2
   101c6:	d100      	bne.n	101ca <strcmp+0x1d2>
   101c8:	e7e4      	b.n	10194 <strcmp+0x19c>
   101ca:	ba19      	rev	r1, r3
   101cc:	ba12      	rev	r2, r2
   101ce:	e00a      	b.n	101e6 <strcmp+0x1ee>
   101d0:	ba19      	rev	r1, r3
   101d2:	ba22      	rev	r2, r4
   101d4:	e007      	b.n	101e6 <strcmp+0x1ee>
   101d6:	ba11      	rev	r1, r2
   101d8:	ba2a      	rev	r2, r5
   101da:	e004      	b.n	101e6 <strcmp+0x1ee>
   101dc:	ba19      	rev	r1, r3
   101de:	ba2a      	rev	r2, r5
   101e0:	e001      	b.n	101e6 <strcmp+0x1ee>
   101e2:	ba11      	rev	r1, r2
   101e4:	ba22      	rev	r2, r4
   101e6:	fa9c f08c 	rev.w	r0, ip
   101ea:	e9dd 6700 	ldrd	r6, r7, [sp]
   101ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   101f2:	f11d 0d10 	adds.w	sp, sp, #16
   101f6:	b138      	cbz	r0, 10208 <strcmp+0x210>
   101f8:	fab0 f080 	clz	r0, r0
   101fc:	f1c0 0018 	rsb	r0, r0, #24
   10200:	fa21 f100 	lsr.w	r1, r1, r0
   10204:	fa22 f200 	lsr.w	r2, r2, r0
   10208:	2001      	movs	r0, #1
   1020a:	4291      	cmp	r1, r2
   1020c:	bf98      	it	ls
   1020e:	4180      	sbcls	r0, r0
   10210:	4770      	bx	lr
   10212:	bf00      	nop

00010214 <strncmp>:
   10214:	b430      	push	{r4, r5}
   10216:	2a00      	cmp	r2, #0
   10218:	d04a      	beq.n	102b0 <strncmp+0x9c>
   1021a:	ea40 0301 	orr.w	r3, r0, r1
   1021e:	f013 0303 	ands.w	r3, r3, #3
   10222:	d12d      	bne.n	10280 <strncmp+0x6c>
   10224:	2a03      	cmp	r2, #3
   10226:	d92b      	bls.n	10280 <strncmp+0x6c>
   10228:	6804      	ldr	r4, [r0, #0]
   1022a:	680d      	ldr	r5, [r1, #0]
   1022c:	42ac      	cmp	r4, r5
   1022e:	d127      	bne.n	10280 <strncmp+0x6c>
   10230:	3a04      	subs	r2, #4
   10232:	d03d      	beq.n	102b0 <strncmp+0x9c>
   10234:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   10238:	ea25 0404 	bic.w	r4, r5, r4
   1023c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10240:	d13c      	bne.n	102bc <strncmp+0xa8>
   10242:	460c      	mov	r4, r1
   10244:	4603      	mov	r3, r0
   10246:	e00e      	b.n	10266 <strncmp+0x52>
   10248:	685b      	ldr	r3, [r3, #4]
   1024a:	6864      	ldr	r4, [r4, #4]
   1024c:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   10250:	42a3      	cmp	r3, r4
   10252:	ea25 0503 	bic.w	r5, r5, r3
   10256:	d113      	bne.n	10280 <strncmp+0x6c>
   10258:	3a04      	subs	r2, #4
   1025a:	d029      	beq.n	102b0 <strncmp+0x9c>
   1025c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   10260:	d129      	bne.n	102b6 <strncmp+0xa2>
   10262:	4603      	mov	r3, r0
   10264:	460c      	mov	r4, r1
   10266:	2a03      	cmp	r2, #3
   10268:	f100 0004 	add.w	r0, r0, #4
   1026c:	f101 0104 	add.w	r1, r1, #4
   10270:	d8ea      	bhi.n	10248 <strncmp+0x34>
   10272:	1e55      	subs	r5, r2, #1
   10274:	b92a      	cbnz	r2, 10282 <strncmp+0x6e>
   10276:	7918      	ldrb	r0, [r3, #4]
   10278:	7922      	ldrb	r2, [r4, #4]
   1027a:	1a80      	subs	r0, r0, r2
   1027c:	bc30      	pop	{r4, r5}
   1027e:	4770      	bx	lr
   10280:	1e55      	subs	r5, r2, #1
   10282:	7803      	ldrb	r3, [r0, #0]
   10284:	780a      	ldrb	r2, [r1, #0]
   10286:	4293      	cmp	r3, r2
   10288:	d11a      	bne.n	102c0 <strncmp+0xac>
   1028a:	b1dd      	cbz	r5, 102c4 <strncmp+0xb0>
   1028c:	b1b3      	cbz	r3, 102bc <strncmp+0xa8>
   1028e:	1c6c      	adds	r4, r5, #1
   10290:	440c      	add	r4, r1
   10292:	1c8b      	adds	r3, r1, #2
   10294:	4601      	mov	r1, r0
   10296:	e004      	b.n	102a2 <strncmp+0x8e>
   10298:	42a3      	cmp	r3, r4
   1029a:	d00c      	beq.n	102b6 <strncmp+0xa2>
   1029c:	3301      	adds	r3, #1
   1029e:	2800      	cmp	r0, #0
   102a0:	d0ec      	beq.n	1027c <strncmp+0x68>
   102a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   102a6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   102aa:	4290      	cmp	r0, r2
   102ac:	d0f4      	beq.n	10298 <strncmp+0x84>
   102ae:	e7e4      	b.n	1027a <strncmp+0x66>
   102b0:	4610      	mov	r0, r2
   102b2:	bc30      	pop	{r4, r5}
   102b4:	4770      	bx	lr
   102b6:	2000      	movs	r0, #0
   102b8:	bc30      	pop	{r4, r5}
   102ba:	4770      	bx	lr
   102bc:	4618      	mov	r0, r3
   102be:	e7dd      	b.n	1027c <strncmp+0x68>
   102c0:	4618      	mov	r0, r3
   102c2:	e7da      	b.n	1027a <strncmp+0x66>
   102c4:	4628      	mov	r0, r5
   102c6:	e7d9      	b.n	1027c <strncmp+0x68>

000102c8 <_svfprintf_r>:
   102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102cc:	b0c9      	sub	sp, #292	; 0x124
   102ce:	4691      	mov	r9, r2
   102d0:	9310      	str	r3, [sp, #64]	; 0x40
   102d2:	910c      	str	r1, [sp, #48]	; 0x30
   102d4:	900d      	str	r0, [sp, #52]	; 0x34
   102d6:	f002 fe25 	bl	12f24 <_localeconv_r>
   102da:	6800      	ldr	r0, [r0, #0]
   102dc:	9015      	str	r0, [sp, #84]	; 0x54
   102de:	f7f3 fa25 	bl	372c <strlen>
   102e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   102e4:	9018      	str	r0, [sp, #96]	; 0x60
   102e6:	89a3      	ldrh	r3, [r4, #12]
   102e8:	061a      	lsls	r2, r3, #24
   102ea:	d503      	bpl.n	102f4 <_svfprintf_r+0x2c>
   102ec:	6923      	ldr	r3, [r4, #16]
   102ee:	2b00      	cmp	r3, #0
   102f0:	f001 808d 	beq.w	1140e <_svfprintf_r+0x1146>
   102f4:	ac38      	add	r4, sp, #224	; 0xe0
   102f6:	46a4      	mov	ip, r4
   102f8:	9408      	str	r4, [sp, #32]
   102fa:	942b      	str	r4, [sp, #172]	; 0xac
   102fc:	2500      	movs	r5, #0
   102fe:	2400      	movs	r4, #0
   10300:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   10304:	2300      	movs	r3, #0
   10306:	9311      	str	r3, [sp, #68]	; 0x44
   10308:	932d      	str	r3, [sp, #180]	; 0xb4
   1030a:	932c      	str	r3, [sp, #176]	; 0xb0
   1030c:	931a      	str	r3, [sp, #104]	; 0x68
   1030e:	9319      	str	r3, [sp, #100]	; 0x64
   10310:	930e      	str	r3, [sp, #56]	; 0x38
   10312:	4666      	mov	r6, ip
   10314:	f899 3000 	ldrb.w	r3, [r9]
   10318:	2b00      	cmp	r3, #0
   1031a:	f000 80f8 	beq.w	1050e <_svfprintf_r+0x246>
   1031e:	2b25      	cmp	r3, #37	; 0x25
   10320:	f000 80f5 	beq.w	1050e <_svfprintf_r+0x246>
   10324:	f109 0201 	add.w	r2, r9, #1
   10328:	e001      	b.n	1032e <_svfprintf_r+0x66>
   1032a:	2b25      	cmp	r3, #37	; 0x25
   1032c:	d004      	beq.n	10338 <_svfprintf_r+0x70>
   1032e:	4614      	mov	r4, r2
   10330:	3201      	adds	r2, #1
   10332:	7823      	ldrb	r3, [r4, #0]
   10334:	2b00      	cmp	r3, #0
   10336:	d1f8      	bne.n	1032a <_svfprintf_r+0x62>
   10338:	ebc9 0504 	rsb	r5, r9, r4
   1033c:	b17d      	cbz	r5, 1035e <_svfprintf_r+0x96>
   1033e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10340:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   10342:	f8c6 9000 	str.w	r9, [r6]
   10346:	3301      	adds	r3, #1
   10348:	442a      	add	r2, r5
   1034a:	2b07      	cmp	r3, #7
   1034c:	6075      	str	r5, [r6, #4]
   1034e:	922d      	str	r2, [sp, #180]	; 0xb4
   10350:	932c      	str	r3, [sp, #176]	; 0xb0
   10352:	f300 80c2 	bgt.w	104da <_svfprintf_r+0x212>
   10356:	3608      	adds	r6, #8
   10358:	980e      	ldr	r0, [sp, #56]	; 0x38
   1035a:	4428      	add	r0, r5
   1035c:	900e      	str	r0, [sp, #56]	; 0x38
   1035e:	7823      	ldrb	r3, [r4, #0]
   10360:	2b00      	cmp	r3, #0
   10362:	f000 80c2 	beq.w	104ea <_svfprintf_r+0x222>
   10366:	2300      	movs	r3, #0
   10368:	f894 8001 	ldrb.w	r8, [r4, #1]
   1036c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   10370:	461a      	mov	r2, r3
   10372:	930f      	str	r3, [sp, #60]	; 0x3c
   10374:	9309      	str	r3, [sp, #36]	; 0x24
   10376:	f104 0901 	add.w	r9, r4, #1
   1037a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1037e:	940a      	str	r4, [sp, #40]	; 0x28
   10380:	f109 0901 	add.w	r9, r9, #1
   10384:	f1a8 0320 	sub.w	r3, r8, #32
   10388:	2b58      	cmp	r3, #88	; 0x58
   1038a:	f200 83c7 	bhi.w	10b1c <_svfprintf_r+0x854>
   1038e:	e8df f013 	tbh	[pc, r3, lsl #1]
   10392:	026a      	.short	0x026a
   10394:	03c503c5 	.word	0x03c503c5
   10398:	03c50271 	.word	0x03c50271
   1039c:	03c503c5 	.word	0x03c503c5
   103a0:	03c503c5 	.word	0x03c503c5
   103a4:	031403c5 	.word	0x031403c5
   103a8:	03c50364 	.word	0x03c50364
   103ac:	00c0009d 	.word	0x00c0009d
   103b0:	027803c5 	.word	0x027803c5
   103b4:	027f027f 	.word	0x027f027f
   103b8:	027f027f 	.word	0x027f027f
   103bc:	027f027f 	.word	0x027f027f
   103c0:	027f027f 	.word	0x027f027f
   103c4:	03c5027f 	.word	0x03c5027f
   103c8:	03c503c5 	.word	0x03c503c5
   103cc:	03c503c5 	.word	0x03c503c5
   103d0:	03c503c5 	.word	0x03c503c5
   103d4:	03c503c5 	.word	0x03c503c5
   103d8:	029003c5 	.word	0x029003c5
   103dc:	03c5036f 	.word	0x03c5036f
   103e0:	03c5036f 	.word	0x03c5036f
   103e4:	03c503c5 	.word	0x03c503c5
   103e8:	036803c5 	.word	0x036803c5
   103ec:	03c503c5 	.word	0x03c503c5
   103f0:	03c50078 	.word	0x03c50078
   103f4:	03c503c5 	.word	0x03c503c5
   103f8:	03c503c5 	.word	0x03c503c5
   103fc:	03c50059 	.word	0x03c50059
   10400:	02af03c5 	.word	0x02af03c5
   10404:	03c503c5 	.word	0x03c503c5
   10408:	03c503c5 	.word	0x03c503c5
   1040c:	03c503c5 	.word	0x03c503c5
   10410:	03c503c5 	.word	0x03c503c5
   10414:	03c503c5 	.word	0x03c503c5
   10418:	03480337 	.word	0x03480337
   1041c:	036f036f 	.word	0x036f036f
   10420:	02ff036f 	.word	0x02ff036f
   10424:	03c50348 	.word	0x03c50348
   10428:	030803c5 	.word	0x030803c5
   1042c:	02c503c5 	.word	0x02c503c5
   10430:	0321007c 	.word	0x0321007c
   10434:	03c503a5 	.word	0x03c503a5
   10438:	03c502d9 	.word	0x03c502d9
   1043c:	03c5005f 	.word	0x03c5005f
   10440:	00de03c5 	.word	0x00de03c5
   10444:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10448:	f04c 0c10 	orr.w	ip, ip, #16
   1044c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10450:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10452:	06a2      	lsls	r2, r4, #26
   10454:	f100 8356 	bmi.w	10b04 <_svfprintf_r+0x83c>
   10458:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1045a:	06e3      	lsls	r3, r4, #27
   1045c:	f100 85e0 	bmi.w	11020 <_svfprintf_r+0xd58>
   10460:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10464:	f01c 0f40 	tst.w	ip, #64	; 0x40
   10468:	f000 85da 	beq.w	11020 <_svfprintf_r+0xd58>
   1046c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   10470:	f8bc 4000 	ldrh.w	r4, [ip]
   10474:	f10c 0c04 	add.w	ip, ip, #4
   10478:	2500      	movs	r5, #0
   1047a:	2301      	movs	r3, #1
   1047c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10480:	e08c      	b.n	1059c <_svfprintf_r+0x2d4>
   10482:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10484:	f045 0510 	orr.w	r5, r5, #16
   10488:	9509      	str	r5, [sp, #36]	; 0x24
   1048a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1048e:	f01c 0320 	ands.w	r3, ip, #32
   10492:	f040 832c 	bne.w	10aee <_svfprintf_r+0x826>
   10496:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1049a:	f01c 0210 	ands.w	r2, ip, #16
   1049e:	f040 85b8 	bne.w	11012 <_svfprintf_r+0xd4a>
   104a2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   104a6:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
   104aa:	f000 85b2 	beq.w	11012 <_svfprintf_r+0xd4a>
   104ae:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   104b2:	f8bc 4000 	ldrh.w	r4, [ip]
   104b6:	f10c 0c04 	add.w	ip, ip, #4
   104ba:	4613      	mov	r3, r2
   104bc:	2500      	movs	r5, #0
   104be:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   104c2:	e06b      	b.n	1059c <_svfprintf_r+0x2d4>
   104c4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   104c6:	9310      	str	r3, [sp, #64]	; 0x40
   104c8:	4264      	negs	r4, r4
   104ca:	940f      	str	r4, [sp, #60]	; 0x3c
   104cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   104ce:	f045 0504 	orr.w	r5, r5, #4
   104d2:	9509      	str	r5, [sp, #36]	; 0x24
   104d4:	f899 8000 	ldrb.w	r8, [r9]
   104d8:	e752      	b.n	10380 <_svfprintf_r+0xb8>
   104da:	980d      	ldr	r0, [sp, #52]	; 0x34
   104dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   104de:	aa2b      	add	r2, sp, #172	; 0xac
   104e0:	f003 f8e0 	bl	136a4 <__ssprint_r>
   104e4:	b940      	cbnz	r0, 104f8 <_svfprintf_r+0x230>
   104e6:	ae38      	add	r6, sp, #224	; 0xe0
   104e8:	e736      	b.n	10358 <_svfprintf_r+0x90>
   104ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   104ec:	b123      	cbz	r3, 104f8 <_svfprintf_r+0x230>
   104ee:	980d      	ldr	r0, [sp, #52]	; 0x34
   104f0:	990c      	ldr	r1, [sp, #48]	; 0x30
   104f2:	aa2b      	add	r2, sp, #172	; 0xac
   104f4:	f003 f8d6 	bl	136a4 <__ssprint_r>
   104f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   104fa:	980e      	ldr	r0, [sp, #56]	; 0x38
   104fc:	89a3      	ldrh	r3, [r4, #12]
   104fe:	f013 0f40 	tst.w	r3, #64	; 0x40
   10502:	bf18      	it	ne
   10504:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10508:	b049      	add	sp, #292	; 0x124
   1050a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1050e:	464c      	mov	r4, r9
   10510:	e725      	b.n	1035e <_svfprintf_r+0x96>
   10512:	f899 8000 	ldrb.w	r8, [r9]
   10516:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   1051a:	f109 0001 	add.w	r0, r9, #1
   1051e:	f001 8118 	beq.w	11752 <_svfprintf_r+0x148a>
   10522:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   10526:	2b09      	cmp	r3, #9
   10528:	bf98      	it	ls
   1052a:	2100      	movls	r1, #0
   1052c:	f201 8077 	bhi.w	1161e <_svfprintf_r+0x1356>
   10530:	f810 8b01 	ldrb.w	r8, [r0], #1
   10534:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   10538:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   1053c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   10540:	2b09      	cmp	r3, #9
   10542:	d9f5      	bls.n	10530 <_svfprintf_r+0x268>
   10544:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   10548:	910a      	str	r1, [sp, #40]	; 0x28
   1054a:	4681      	mov	r9, r0
   1054c:	e71a      	b.n	10384 <_svfprintf_r+0xbc>
   1054e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10550:	4ca1      	ldr	r4, [pc, #644]	; (107d8 <_svfprintf_r+0x510>)
   10552:	941a      	str	r4, [sp, #104]	; 0x68
   10554:	06af      	lsls	r7, r5, #26
   10556:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   1055a:	f140 81d1 	bpl.w	10900 <_svfprintf_r+0x638>
   1055e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   10562:	f10c 0307 	add.w	r3, ip, #7
   10566:	f023 0307 	bic.w	r3, r3, #7
   1056a:	f103 0408 	add.w	r4, r3, #8
   1056e:	9410      	str	r4, [sp, #64]	; 0x40
   10570:	e9d3 4500 	ldrd	r4, r5, [r3]
   10574:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10578:	f01c 0f01 	tst.w	ip, #1
   1057c:	f000 8464 	beq.w	10e48 <_svfprintf_r+0xb80>
   10580:	ea54 0005 	orrs.w	r0, r4, r5
   10584:	f000 8460 	beq.w	10e48 <_svfprintf_r+0xb80>
   10588:	2330      	movs	r3, #48	; 0x30
   1058a:	f04c 0c02 	orr.w	ip, ip, #2
   1058e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   10592:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   10596:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   1059a:	2302      	movs	r3, #2
   1059c:	f04f 0a00 	mov.w	sl, #0
   105a0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   105a4:	990a      	ldr	r1, [sp, #40]	; 0x28
   105a6:	2900      	cmp	r1, #0
   105a8:	db05      	blt.n	105b6 <_svfprintf_r+0x2ee>
   105aa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   105ae:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
   105b2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   105b6:	ea54 0005 	orrs.w	r0, r4, r5
   105ba:	f040 82c7 	bne.w	10b4c <_svfprintf_r+0x884>
   105be:	990a      	ldr	r1, [sp, #40]	; 0x28
   105c0:	2900      	cmp	r1, #0
   105c2:	f040 82c3 	bne.w	10b4c <_svfprintf_r+0x884>
   105c6:	2b00      	cmp	r3, #0
   105c8:	f040 843a 	bne.w	10e40 <_svfprintf_r+0xb78>
   105cc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   105d0:	f01c 0f01 	tst.w	ip, #1
   105d4:	f000 8434 	beq.w	10e40 <_svfprintf_r+0xb78>
   105d8:	af48      	add	r7, sp, #288	; 0x120
   105da:	2330      	movs	r3, #48	; 0x30
   105dc:	f807 3d41 	strb.w	r3, [r7, #-65]!
   105e0:	9d08      	ldr	r5, [sp, #32]
   105e2:	1bec      	subs	r4, r5, r7
   105e4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   105e8:	2500      	movs	r5, #0
   105ea:	4564      	cmp	r4, ip
   105ec:	bfa8      	it	ge
   105ee:	46a4      	movge	ip, r4
   105f0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   105f4:	9514      	str	r5, [sp, #80]	; 0x50
   105f6:	f1ba 0f00 	cmp.w	sl, #0
   105fa:	d002      	beq.n	10602 <_svfprintf_r+0x33a>
   105fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   105fe:	3501      	adds	r5, #1
   10600:	950b      	str	r5, [sp, #44]	; 0x2c
   10602:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10604:	f013 0302 	ands.w	r3, r3, #2
   10608:	9312      	str	r3, [sp, #72]	; 0x48
   1060a:	d002      	beq.n	10612 <_svfprintf_r+0x34a>
   1060c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1060e:	3502      	adds	r5, #2
   10610:	950b      	str	r5, [sp, #44]	; 0x2c
   10612:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10616:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
   1061a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   1061e:	f040 8292 	bne.w	10b46 <_svfprintf_r+0x87e>
   10622:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   10624:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   10628:	ebcc 0b05 	rsb	fp, ip, r5
   1062c:	f1bb 0f00 	cmp.w	fp, #0
   10630:	f340 8289 	ble.w	10b46 <_svfprintf_r+0x87e>
   10634:	f1bb 0f10 	cmp.w	fp, #16
   10638:	992d      	ldr	r1, [sp, #180]	; 0xb4
   1063a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   1063c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 107e0 <_svfprintf_r+0x518>
   10640:	dd2c      	ble.n	1069c <_svfprintf_r+0x3d4>
   10642:	971b      	str	r7, [sp, #108]	; 0x6c
   10644:	4630      	mov	r0, r6
   10646:	4657      	mov	r7, sl
   10648:	2510      	movs	r5, #16
   1064a:	46ca      	mov	sl, r9
   1064c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1064e:	46a1      	mov	r9, r4
   10650:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   10652:	e006      	b.n	10662 <_svfprintf_r+0x39a>
   10654:	f1ab 0b10 	sub.w	fp, fp, #16
   10658:	f1bb 0f10 	cmp.w	fp, #16
   1065c:	f100 0008 	add.w	r0, r0, #8
   10660:	dd17      	ble.n	10692 <_svfprintf_r+0x3ca>
   10662:	3201      	adds	r2, #1
   10664:	3110      	adds	r1, #16
   10666:	2a07      	cmp	r2, #7
   10668:	912d      	str	r1, [sp, #180]	; 0xb4
   1066a:	922c      	str	r2, [sp, #176]	; 0xb0
   1066c:	6007      	str	r7, [r0, #0]
   1066e:	6045      	str	r5, [r0, #4]
   10670:	ddf0      	ble.n	10654 <_svfprintf_r+0x38c>
   10672:	4620      	mov	r0, r4
   10674:	4631      	mov	r1, r6
   10676:	aa2b      	add	r2, sp, #172	; 0xac
   10678:	f003 f814 	bl	136a4 <__ssprint_r>
   1067c:	2800      	cmp	r0, #0
   1067e:	f47f af3b 	bne.w	104f8 <_svfprintf_r+0x230>
   10682:	f1ab 0b10 	sub.w	fp, fp, #16
   10686:	f1bb 0f10 	cmp.w	fp, #16
   1068a:	992d      	ldr	r1, [sp, #180]	; 0xb4
   1068c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   1068e:	a838      	add	r0, sp, #224	; 0xe0
   10690:	dce7      	bgt.n	10662 <_svfprintf_r+0x39a>
   10692:	464c      	mov	r4, r9
   10694:	46d1      	mov	r9, sl
   10696:	46ba      	mov	sl, r7
   10698:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   1069a:	4606      	mov	r6, r0
   1069c:	3201      	adds	r2, #1
   1069e:	eb0b 0c01 	add.w	ip, fp, r1
   106a2:	2a07      	cmp	r2, #7
   106a4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   106a8:	922c      	str	r2, [sp, #176]	; 0xb0
   106aa:	e886 0c00 	stmia.w	r6, {sl, fp}
   106ae:	f300 841c 	bgt.w	10eea <_svfprintf_r+0xc22>
   106b2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   106b6:	3608      	adds	r6, #8
   106b8:	f1ba 0f00 	cmp.w	sl, #0
   106bc:	d00f      	beq.n	106de <_svfprintf_r+0x416>
   106be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   106c0:	3301      	adds	r3, #1
   106c2:	f10c 0c01 	add.w	ip, ip, #1
   106c6:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
   106ca:	2201      	movs	r2, #1
   106cc:	2b07      	cmp	r3, #7
   106ce:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   106d2:	932c      	str	r3, [sp, #176]	; 0xb0
   106d4:	e886 0006 	stmia.w	r6, {r1, r2}
   106d8:	f300 839a 	bgt.w	10e10 <_svfprintf_r+0xb48>
   106dc:	3608      	adds	r6, #8
   106de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   106e0:	b173      	cbz	r3, 10700 <_svfprintf_r+0x438>
   106e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   106e4:	3301      	adds	r3, #1
   106e6:	f10c 0c02 	add.w	ip, ip, #2
   106ea:	a924      	add	r1, sp, #144	; 0x90
   106ec:	2202      	movs	r2, #2
   106ee:	2b07      	cmp	r3, #7
   106f0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   106f4:	932c      	str	r3, [sp, #176]	; 0xb0
   106f6:	e886 0006 	stmia.w	r6, {r1, r2}
   106fa:	f300 8395 	bgt.w	10e28 <_svfprintf_r+0xb60>
   106fe:	3608      	adds	r6, #8
   10700:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   10702:	2d80      	cmp	r5, #128	; 0x80
   10704:	f000 82cc 	beq.w	10ca0 <_svfprintf_r+0x9d8>
   10708:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1070a:	ebc4 0a05 	rsb	sl, r4, r5
   1070e:	f1ba 0f00 	cmp.w	sl, #0
   10712:	dd3b      	ble.n	1078c <_svfprintf_r+0x4c4>
   10714:	f1ba 0f10 	cmp.w	sl, #16
   10718:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1071a:	4d30      	ldr	r5, [pc, #192]	; (107dc <_svfprintf_r+0x514>)
   1071c:	dd2b      	ble.n	10776 <_svfprintf_r+0x4ae>
   1071e:	940a      	str	r4, [sp, #40]	; 0x28
   10720:	4632      	mov	r2, r6
   10722:	f04f 0b10 	mov.w	fp, #16
   10726:	462e      	mov	r6, r5
   10728:	4661      	mov	r1, ip
   1072a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1072c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1072e:	e006      	b.n	1073e <_svfprintf_r+0x476>
   10730:	f1aa 0a10 	sub.w	sl, sl, #16
   10734:	f1ba 0f10 	cmp.w	sl, #16
   10738:	f102 0208 	add.w	r2, r2, #8
   1073c:	dd17      	ble.n	1076e <_svfprintf_r+0x4a6>
   1073e:	3301      	adds	r3, #1
   10740:	3110      	adds	r1, #16
   10742:	2b07      	cmp	r3, #7
   10744:	912d      	str	r1, [sp, #180]	; 0xb4
   10746:	932c      	str	r3, [sp, #176]	; 0xb0
   10748:	e882 0840 	stmia.w	r2, {r6, fp}
   1074c:	ddf0      	ble.n	10730 <_svfprintf_r+0x468>
   1074e:	4620      	mov	r0, r4
   10750:	4629      	mov	r1, r5
   10752:	aa2b      	add	r2, sp, #172	; 0xac
   10754:	f002 ffa6 	bl	136a4 <__ssprint_r>
   10758:	2800      	cmp	r0, #0
   1075a:	f47f aecd 	bne.w	104f8 <_svfprintf_r+0x230>
   1075e:	f1aa 0a10 	sub.w	sl, sl, #16
   10762:	f1ba 0f10 	cmp.w	sl, #16
   10766:	992d      	ldr	r1, [sp, #180]	; 0xb4
   10768:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1076a:	aa38      	add	r2, sp, #224	; 0xe0
   1076c:	dce7      	bgt.n	1073e <_svfprintf_r+0x476>
   1076e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10770:	4635      	mov	r5, r6
   10772:	468c      	mov	ip, r1
   10774:	4616      	mov	r6, r2
   10776:	3301      	adds	r3, #1
   10778:	44d4      	add	ip, sl
   1077a:	2b07      	cmp	r3, #7
   1077c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10780:	932c      	str	r3, [sp, #176]	; 0xb0
   10782:	e886 0420 	stmia.w	r6, {r5, sl}
   10786:	f300 8337 	bgt.w	10df8 <_svfprintf_r+0xb30>
   1078a:	3608      	adds	r6, #8
   1078c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1078e:	05ed      	lsls	r5, r5, #23
   10790:	f100 8226 	bmi.w	10be0 <_svfprintf_r+0x918>
   10794:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10796:	6037      	str	r7, [r6, #0]
   10798:	3301      	adds	r3, #1
   1079a:	44a4      	add	ip, r4
   1079c:	2b07      	cmp	r3, #7
   1079e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   107a2:	6074      	str	r4, [r6, #4]
   107a4:	932c      	str	r3, [sp, #176]	; 0xb0
   107a6:	f300 8311 	bgt.w	10dcc <_svfprintf_r+0xb04>
   107aa:	3608      	adds	r6, #8
   107ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
   107ae:	0763      	lsls	r3, r4, #29
   107b0:	d549      	bpl.n	10846 <_svfprintf_r+0x57e>
   107b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   107b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   107b6:	1a2c      	subs	r4, r5, r0
   107b8:	2c00      	cmp	r4, #0
   107ba:	dd44      	ble.n	10846 <_svfprintf_r+0x57e>
   107bc:	2c10      	cmp	r4, #16
   107be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   107c0:	f8df a01c 	ldr.w	sl, [pc, #28]	; 107e0 <_svfprintf_r+0x518>
   107c4:	dd2b      	ble.n	1081e <_svfprintf_r+0x556>
   107c6:	4657      	mov	r7, sl
   107c8:	2510      	movs	r5, #16
   107ca:	4662      	mov	r2, ip
   107cc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   107d0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   107d4:	e00b      	b.n	107ee <_svfprintf_r+0x526>
   107d6:	bf00      	nop
   107d8:	00015954 	.word	0x00015954
   107dc:	00015920 	.word	0x00015920
   107e0:	00015974 	.word	0x00015974
   107e4:	3c10      	subs	r4, #16
   107e6:	2c10      	cmp	r4, #16
   107e8:	f106 0608 	add.w	r6, r6, #8
   107ec:	dd15      	ble.n	1081a <_svfprintf_r+0x552>
   107ee:	3301      	adds	r3, #1
   107f0:	3210      	adds	r2, #16
   107f2:	2b07      	cmp	r3, #7
   107f4:	922d      	str	r2, [sp, #180]	; 0xb4
   107f6:	932c      	str	r3, [sp, #176]	; 0xb0
   107f8:	6037      	str	r7, [r6, #0]
   107fa:	6075      	str	r5, [r6, #4]
   107fc:	ddf2      	ble.n	107e4 <_svfprintf_r+0x51c>
   107fe:	4650      	mov	r0, sl
   10800:	4641      	mov	r1, r8
   10802:	aa2b      	add	r2, sp, #172	; 0xac
   10804:	f002 ff4e 	bl	136a4 <__ssprint_r>
   10808:	2800      	cmp	r0, #0
   1080a:	f47f ae75 	bne.w	104f8 <_svfprintf_r+0x230>
   1080e:	3c10      	subs	r4, #16
   10810:	2c10      	cmp	r4, #16
   10812:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   10814:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10816:	ae38      	add	r6, sp, #224	; 0xe0
   10818:	dce9      	bgt.n	107ee <_svfprintf_r+0x526>
   1081a:	4694      	mov	ip, r2
   1081c:	46ba      	mov	sl, r7
   1081e:	3301      	adds	r3, #1
   10820:	44a4      	add	ip, r4
   10822:	2b07      	cmp	r3, #7
   10824:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10828:	932c      	str	r3, [sp, #176]	; 0xb0
   1082a:	f8c6 a000 	str.w	sl, [r6]
   1082e:	6074      	str	r4, [r6, #4]
   10830:	dd09      	ble.n	10846 <_svfprintf_r+0x57e>
   10832:	980d      	ldr	r0, [sp, #52]	; 0x34
   10834:	990c      	ldr	r1, [sp, #48]	; 0x30
   10836:	aa2b      	add	r2, sp, #172	; 0xac
   10838:	f002 ff34 	bl	136a4 <__ssprint_r>
   1083c:	2800      	cmp	r0, #0
   1083e:	f47f ae5b 	bne.w	104f8 <_svfprintf_r+0x230>
   10842:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10846:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   10848:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1084a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1084c:	42a8      	cmp	r0, r5
   1084e:	bfac      	ite	ge
   10850:	1824      	addge	r4, r4, r0
   10852:	1964      	addlt	r4, r4, r5
   10854:	940e      	str	r4, [sp, #56]	; 0x38
   10856:	f1bc 0f00 	cmp.w	ip, #0
   1085a:	f040 82c3 	bne.w	10de4 <_svfprintf_r+0xb1c>
   1085e:	2300      	movs	r3, #0
   10860:	932c      	str	r3, [sp, #176]	; 0xb0
   10862:	ae38      	add	r6, sp, #224	; 0xe0
   10864:	e556      	b.n	10314 <_svfprintf_r+0x4c>
   10866:	f899 8000 	ldrb.w	r8, [r9]
   1086a:	2a00      	cmp	r2, #0
   1086c:	f47f ad88 	bne.w	10380 <_svfprintf_r+0xb8>
   10870:	2220      	movs	r2, #32
   10872:	e585      	b.n	10380 <_svfprintf_r+0xb8>
   10874:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10876:	f045 0501 	orr.w	r5, r5, #1
   1087a:	9509      	str	r5, [sp, #36]	; 0x24
   1087c:	f899 8000 	ldrb.w	r8, [r9]
   10880:	e57e      	b.n	10380 <_svfprintf_r+0xb8>
   10882:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10884:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   10888:	9509      	str	r5, [sp, #36]	; 0x24
   1088a:	f899 8000 	ldrb.w	r8, [r9]
   1088e:	e577      	b.n	10380 <_svfprintf_r+0xb8>
   10890:	2400      	movs	r4, #0
   10892:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   10896:	940f      	str	r4, [sp, #60]	; 0x3c
   10898:	4621      	mov	r1, r4
   1089a:	f819 8b01 	ldrb.w	r8, [r9], #1
   1089e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   108a2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   108a6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   108aa:	2b09      	cmp	r3, #9
   108ac:	d9f5      	bls.n	1089a <_svfprintf_r+0x5d2>
   108ae:	910f      	str	r1, [sp, #60]	; 0x3c
   108b0:	e568      	b.n	10384 <_svfprintf_r+0xbc>
   108b2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   108b6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   108ba:	f04c 0c10 	orr.w	ip, ip, #16
   108be:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   108c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   108c4:	06a3      	lsls	r3, r4, #26
   108c6:	f140 80b2 	bpl.w	10a2e <_svfprintf_r+0x766>
   108ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
   108cc:	1de9      	adds	r1, r5, #7
   108ce:	f021 0107 	bic.w	r1, r1, #7
   108d2:	e9d1 2300 	ldrd	r2, r3, [r1]
   108d6:	3108      	adds	r1, #8
   108d8:	9110      	str	r1, [sp, #64]	; 0x40
   108da:	4614      	mov	r4, r2
   108dc:	461d      	mov	r5, r3
   108de:	2a00      	cmp	r2, #0
   108e0:	f173 0000 	sbcs.w	r0, r3, #0
   108e4:	f2c0 838b 	blt.w	10ffe <_svfprintf_r+0xd36>
   108e8:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   108ec:	2301      	movs	r3, #1
   108ee:	e659      	b.n	105a4 <_svfprintf_r+0x2dc>
   108f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   108f2:	4cb7      	ldr	r4, [pc, #732]	; (10bd0 <_svfprintf_r+0x908>)
   108f4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   108f8:	06af      	lsls	r7, r5, #26
   108fa:	941a      	str	r4, [sp, #104]	; 0x68
   108fc:	f53f ae2f 	bmi.w	1055e <_svfprintf_r+0x296>
   10900:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10902:	06ed      	lsls	r5, r5, #27
   10904:	f140 845d 	bpl.w	111c2 <_svfprintf_r+0xefa>
   10908:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1090c:	f8dc 4000 	ldr.w	r4, [ip]
   10910:	f10c 0c04 	add.w	ip, ip, #4
   10914:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10918:	2500      	movs	r5, #0
   1091a:	e62b      	b.n	10574 <_svfprintf_r+0x2ac>
   1091c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10920:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   10924:	f01c 0f20 	tst.w	ip, #32
   10928:	f000 843d 	beq.w	111a6 <_svfprintf_r+0xede>
   1092c:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1092e:	6821      	ldr	r1, [r4, #0]
   10930:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   10932:	17e5      	asrs	r5, r4, #31
   10934:	462b      	mov	r3, r5
   10936:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10938:	4622      	mov	r2, r4
   1093a:	3504      	adds	r5, #4
   1093c:	9510      	str	r5, [sp, #64]	; 0x40
   1093e:	e9c1 2300 	strd	r2, r3, [r1]
   10942:	e4e7      	b.n	10314 <_svfprintf_r+0x4c>
   10944:	9c10      	ldr	r4, [sp, #64]	; 0x40
   10946:	6827      	ldr	r7, [r4, #0]
   10948:	f04f 0a00 	mov.w	sl, #0
   1094c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   10950:	1d25      	adds	r5, r4, #4
   10952:	2f00      	cmp	r7, #0
   10954:	f000 85f5 	beq.w	11542 <_svfprintf_r+0x127a>
   10958:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1095a:	2c00      	cmp	r4, #0
   1095c:	4638      	mov	r0, r7
   1095e:	f2c0 85a7 	blt.w	114b0 <_svfprintf_r+0x11e8>
   10962:	4651      	mov	r1, sl
   10964:	4622      	mov	r2, r4
   10966:	f7fe fee7 	bl	f738 <memchr>
   1096a:	2800      	cmp	r0, #0
   1096c:	f000 861f 	beq.w	115ae <_svfprintf_r+0x12e6>
   10970:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10972:	9510      	str	r5, [sp, #64]	; 0x40
   10974:	1bc0      	subs	r0, r0, r7
   10976:	42a0      	cmp	r0, r4
   10978:	bfb8      	it	lt
   1097a:	4604      	movlt	r4, r0
   1097c:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
   10980:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   10984:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
   10988:	950b      	str	r5, [sp, #44]	; 0x2c
   1098a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   1098e:	e632      	b.n	105f6 <_svfprintf_r+0x32e>
   10990:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10994:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
   10998:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   1099c:	f899 8000 	ldrb.w	r8, [r9]
   109a0:	e4ee      	b.n	10380 <_svfprintf_r+0xb8>
   109a2:	f899 8000 	ldrb.w	r8, [r9]
   109a6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   109aa:	464b      	mov	r3, r9
   109ac:	f000 848b 	beq.w	112c6 <_svfprintf_r+0xffe>
   109b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   109b2:	f045 0510 	orr.w	r5, r5, #16
   109b6:	9509      	str	r5, [sp, #36]	; 0x24
   109b8:	e4e2      	b.n	10380 <_svfprintf_r+0xb8>
   109ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
   109bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   109be:	6824      	ldr	r4, [r4, #0]
   109c0:	940f      	str	r4, [sp, #60]	; 0x3c
   109c2:	2c00      	cmp	r4, #0
   109c4:	f105 0304 	add.w	r3, r5, #4
   109c8:	f6ff ad7c 	blt.w	104c4 <_svfprintf_r+0x1fc>
   109cc:	9310      	str	r3, [sp, #64]	; 0x40
   109ce:	f899 8000 	ldrb.w	r8, [r9]
   109d2:	e4d5      	b.n	10380 <_svfprintf_r+0xb8>
   109d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   109d6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   109da:	487e      	ldr	r0, [pc, #504]	; (10bd4 <_svfprintf_r+0x90c>)
   109dc:	6814      	ldr	r4, [r2, #0]
   109de:	901a      	str	r0, [sp, #104]	; 0x68
   109e0:	2330      	movs	r3, #48	; 0x30
   109e2:	1d15      	adds	r5, r2, #4
   109e4:	f04f 0878 	mov.w	r8, #120	; 0x78
   109e8:	f04c 0c02 	orr.w	ip, ip, #2
   109ec:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   109f0:	9510      	str	r5, [sp, #64]	; 0x40
   109f2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   109f6:	2500      	movs	r5, #0
   109f8:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   109fc:	2302      	movs	r3, #2
   109fe:	e5cd      	b.n	1059c <_svfprintf_r+0x2d4>
   10a00:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10a02:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10a04:	6812      	ldr	r2, [r2, #0]
   10a06:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
   10a0a:	2300      	movs	r3, #0
   10a0c:	2401      	movs	r4, #1
   10a0e:	3504      	adds	r5, #4
   10a10:	469a      	mov	sl, r3
   10a12:	940b      	str	r4, [sp, #44]	; 0x2c
   10a14:	9510      	str	r5, [sp, #64]	; 0x40
   10a16:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   10a1a:	930a      	str	r3, [sp, #40]	; 0x28
   10a1c:	9314      	str	r3, [sp, #80]	; 0x50
   10a1e:	af2e      	add	r7, sp, #184	; 0xb8
   10a20:	e5ef      	b.n	10602 <_svfprintf_r+0x33a>
   10a22:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10a24:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   10a28:	06a3      	lsls	r3, r4, #26
   10a2a:	f53f af4e 	bmi.w	108ca <_svfprintf_r+0x602>
   10a2e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10a32:	f01c 0f10 	tst.w	ip, #16
   10a36:	f040 82d2 	bne.w	10fde <_svfprintf_r+0xd16>
   10a3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10a3c:	0667      	lsls	r7, r4, #25
   10a3e:	f140 82ce 	bpl.w	10fde <_svfprintf_r+0xd16>
   10a42:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   10a46:	f9bc 4000 	ldrsh.w	r4, [ip]
   10a4a:	f10c 0c04 	add.w	ip, ip, #4
   10a4e:	17e5      	asrs	r5, r4, #31
   10a50:	4622      	mov	r2, r4
   10a52:	462b      	mov	r3, r5
   10a54:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10a58:	e741      	b.n	108de <_svfprintf_r+0x616>
   10a5a:	f899 8000 	ldrb.w	r8, [r9]
   10a5e:	222b      	movs	r2, #43	; 0x2b
   10a60:	e48e      	b.n	10380 <_svfprintf_r+0xb8>
   10a62:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10a64:	f045 0508 	orr.w	r5, r5, #8
   10a68:	9509      	str	r5, [sp, #36]	; 0x24
   10a6a:	f899 8000 	ldrb.w	r8, [r9]
   10a6e:	e487      	b.n	10380 <_svfprintf_r+0xb8>
   10a70:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10a72:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10a74:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   10a78:	1deb      	adds	r3, r5, #7
   10a7a:	0725      	lsls	r5, r4, #28
   10a7c:	f023 0307 	bic.w	r3, r3, #7
   10a80:	f140 838a 	bpl.w	11198 <_svfprintf_r+0xed0>
   10a84:	e9d3 4500 	ldrd	r4, r5, [r3]
   10a88:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   10a8c:	f103 0c08 	add.w	ip, r3, #8
   10a90:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10a94:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   10a98:	f7fc f98a 	bl	cdb0 <__fpclassifyd>
   10a9c:	2801      	cmp	r0, #1
   10a9e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   10aa2:	f040 835f 	bne.w	11164 <_svfprintf_r+0xe9c>
   10aa6:	2200      	movs	r2, #0
   10aa8:	2300      	movs	r3, #0
   10aaa:	f7fc fe69 	bl	d780 <__aeabi_dcmplt>
   10aae:	2800      	cmp	r0, #0
   10ab0:	f040 856d 	bne.w	1158e <_svfprintf_r+0x12c6>
   10ab4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   10ab8:	2503      	movs	r5, #3
   10aba:	950b      	str	r5, [sp, #44]	; 0x2c
   10abc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10abe:	4f46      	ldr	r7, [pc, #280]	; (10bd8 <_svfprintf_r+0x910>)
   10ac0:	4b46      	ldr	r3, [pc, #280]	; (10bdc <_svfprintf_r+0x914>)
   10ac2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   10ac6:	2400      	movs	r4, #0
   10ac8:	9509      	str	r5, [sp, #36]	; 0x24
   10aca:	2500      	movs	r5, #0
   10acc:	940a      	str	r4, [sp, #40]	; 0x28
   10ace:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   10ad2:	bfd8      	it	le
   10ad4:	461f      	movle	r7, r3
   10ad6:	2403      	movs	r4, #3
   10ad8:	9514      	str	r5, [sp, #80]	; 0x50
   10ada:	e58c      	b.n	105f6 <_svfprintf_r+0x32e>
   10adc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10ae0:	f04c 0c20 	orr.w	ip, ip, #32
   10ae4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10ae8:	f899 8000 	ldrb.w	r8, [r9]
   10aec:	e448      	b.n	10380 <_svfprintf_r+0xb8>
   10aee:	9c10      	ldr	r4, [sp, #64]	; 0x40
   10af0:	1de3      	adds	r3, r4, #7
   10af2:	f023 0307 	bic.w	r3, r3, #7
   10af6:	f103 0508 	add.w	r5, r3, #8
   10afa:	9510      	str	r5, [sp, #64]	; 0x40
   10afc:	e9d3 4500 	ldrd	r4, r5, [r3]
   10b00:	2300      	movs	r3, #0
   10b02:	e54b      	b.n	1059c <_svfprintf_r+0x2d4>
   10b04:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10b06:	1deb      	adds	r3, r5, #7
   10b08:	f023 0307 	bic.w	r3, r3, #7
   10b0c:	f103 0c08 	add.w	ip, r3, #8
   10b10:	e9d3 4500 	ldrd	r4, r5, [r3]
   10b14:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10b18:	2301      	movs	r3, #1
   10b1a:	e53f      	b.n	1059c <_svfprintf_r+0x2d4>
   10b1c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   10b20:	f1b8 0f00 	cmp.w	r8, #0
   10b24:	f43f ace1 	beq.w	104ea <_svfprintf_r+0x222>
   10b28:	2300      	movs	r3, #0
   10b2a:	f04f 0c01 	mov.w	ip, #1
   10b2e:	469a      	mov	sl, r3
   10b30:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   10b34:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
   10b38:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   10b3c:	930a      	str	r3, [sp, #40]	; 0x28
   10b3e:	9314      	str	r3, [sp, #80]	; 0x50
   10b40:	4664      	mov	r4, ip
   10b42:	af2e      	add	r7, sp, #184	; 0xb8
   10b44:	e55d      	b.n	10602 <_svfprintf_r+0x33a>
   10b46:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10b4a:	e5b5      	b.n	106b8 <_svfprintf_r+0x3f0>
   10b4c:	2b01      	cmp	r3, #1
   10b4e:	f000 80ec 	beq.w	10d2a <_svfprintf_r+0xa62>
   10b52:	2b02      	cmp	r3, #2
   10b54:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
   10b58:	d118      	bne.n	10b8c <_svfprintf_r+0x8c4>
   10b5a:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
   10b5e:	4619      	mov	r1, r3
   10b60:	f004 000f 	and.w	r0, r4, #15
   10b64:	0922      	lsrs	r2, r4, #4
   10b66:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   10b6a:	460f      	mov	r7, r1
   10b6c:	092b      	lsrs	r3, r5, #4
   10b6e:	f81c 1000 	ldrb.w	r1, [ip, r0]
   10b72:	7039      	strb	r1, [r7, #0]
   10b74:	ea52 0003 	orrs.w	r0, r2, r3
   10b78:	4614      	mov	r4, r2
   10b7a:	461d      	mov	r5, r3
   10b7c:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
   10b80:	d1ee      	bne.n	10b60 <_svfprintf_r+0x898>
   10b82:	9d08      	ldr	r5, [sp, #32]
   10b84:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   10b88:	1bec      	subs	r4, r5, r7
   10b8a:	e52b      	b.n	105e4 <_svfprintf_r+0x31c>
   10b8c:	08e0      	lsrs	r0, r4, #3
   10b8e:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   10b92:	f004 0207 	and.w	r2, r4, #7
   10b96:	08e9      	lsrs	r1, r5, #3
   10b98:	3230      	adds	r2, #48	; 0x30
   10b9a:	ea50 0c01 	orrs.w	ip, r0, r1
   10b9e:	461f      	mov	r7, r3
   10ba0:	701a      	strb	r2, [r3, #0]
   10ba2:	4604      	mov	r4, r0
   10ba4:	460d      	mov	r5, r1
   10ba6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10baa:	d1ef      	bne.n	10b8c <_svfprintf_r+0x8c4>
   10bac:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10bae:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
   10bb2:	07e0      	lsls	r0, r4, #31
   10bb4:	4639      	mov	r1, r7
   10bb6:	f140 80c1 	bpl.w	10d3c <_svfprintf_r+0xa74>
   10bba:	2a30      	cmp	r2, #48	; 0x30
   10bbc:	f000 80be 	beq.w	10d3c <_svfprintf_r+0xa74>
   10bc0:	9d08      	ldr	r5, [sp, #32]
   10bc2:	461f      	mov	r7, r3
   10bc4:	2330      	movs	r3, #48	; 0x30
   10bc6:	1bec      	subs	r4, r5, r7
   10bc8:	f801 3c01 	strb.w	r3, [r1, #-1]
   10bcc:	e50a      	b.n	105e4 <_svfprintf_r+0x31c>
   10bce:	bf00      	nop
   10bd0:	00015940 	.word	0x00015940
   10bd4:	00015954 	.word	0x00015954
   10bd8:	00015934 	.word	0x00015934
   10bdc:	00015930 	.word	0x00015930
   10be0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   10be4:	f340 80ad 	ble.w	10d42 <_svfprintf_r+0xa7a>
   10be8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   10bec:	2200      	movs	r2, #0
   10bee:	2300      	movs	r3, #0
   10bf0:	f8cd c01c 	str.w	ip, [sp, #28]
   10bf4:	f7fc fdba 	bl	d76c <__aeabi_dcmpeq>
   10bf8:	f8dd c01c 	ldr.w	ip, [sp, #28]
   10bfc:	2800      	cmp	r0, #0
   10bfe:	f000 8126 	beq.w	10e4e <_svfprintf_r+0xb86>
   10c02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10c04:	4aaa      	ldr	r2, [pc, #680]	; (10eb0 <_svfprintf_r+0xbe8>)
   10c06:	6032      	str	r2, [r6, #0]
   10c08:	3301      	adds	r3, #1
   10c0a:	f10c 0c01 	add.w	ip, ip, #1
   10c0e:	2201      	movs	r2, #1
   10c10:	2b07      	cmp	r3, #7
   10c12:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10c16:	932c      	str	r3, [sp, #176]	; 0xb0
   10c18:	6072      	str	r2, [r6, #4]
   10c1a:	f300 82f7 	bgt.w	1120c <_svfprintf_r+0xf44>
   10c1e:	3608      	adds	r6, #8
   10c20:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10c22:	9c11      	ldr	r4, [sp, #68]	; 0x44
   10c24:	42a3      	cmp	r3, r4
   10c26:	db03      	blt.n	10c30 <_svfprintf_r+0x968>
   10c28:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10c2a:	07ec      	lsls	r4, r5, #31
   10c2c:	f57f adbe 	bpl.w	107ac <_svfprintf_r+0x4e4>
   10c30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10c32:	9d18      	ldr	r5, [sp, #96]	; 0x60
   10c34:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10c36:	6034      	str	r4, [r6, #0]
   10c38:	3301      	adds	r3, #1
   10c3a:	44ac      	add	ip, r5
   10c3c:	2b07      	cmp	r3, #7
   10c3e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10c42:	6075      	str	r5, [r6, #4]
   10c44:	932c      	str	r3, [sp, #176]	; 0xb0
   10c46:	f300 8348 	bgt.w	112da <_svfprintf_r+0x1012>
   10c4a:	3608      	adds	r6, #8
   10c4c:	9d11      	ldr	r5, [sp, #68]	; 0x44
   10c4e:	1e6c      	subs	r4, r5, #1
   10c50:	2c00      	cmp	r4, #0
   10c52:	f77f adab 	ble.w	107ac <_svfprintf_r+0x4e4>
   10c56:	2c10      	cmp	r4, #16
   10c58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10c5a:	4d96      	ldr	r5, [pc, #600]	; (10eb4 <_svfprintf_r+0xbec>)
   10c5c:	f340 8197 	ble.w	10f8e <_svfprintf_r+0xcc6>
   10c60:	2710      	movs	r7, #16
   10c62:	4662      	mov	r2, ip
   10c64:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10c68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   10c6c:	e004      	b.n	10c78 <_svfprintf_r+0x9b0>
   10c6e:	3608      	adds	r6, #8
   10c70:	3c10      	subs	r4, #16
   10c72:	2c10      	cmp	r4, #16
   10c74:	f340 818a 	ble.w	10f8c <_svfprintf_r+0xcc4>
   10c78:	3301      	adds	r3, #1
   10c7a:	3210      	adds	r2, #16
   10c7c:	2b07      	cmp	r3, #7
   10c7e:	922d      	str	r2, [sp, #180]	; 0xb4
   10c80:	932c      	str	r3, [sp, #176]	; 0xb0
   10c82:	e886 00a0 	stmia.w	r6, {r5, r7}
   10c86:	ddf2      	ble.n	10c6e <_svfprintf_r+0x9a6>
   10c88:	4640      	mov	r0, r8
   10c8a:	4651      	mov	r1, sl
   10c8c:	aa2b      	add	r2, sp, #172	; 0xac
   10c8e:	f002 fd09 	bl	136a4 <__ssprint_r>
   10c92:	2800      	cmp	r0, #0
   10c94:	f47f ac30 	bne.w	104f8 <_svfprintf_r+0x230>
   10c98:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   10c9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10c9c:	ae38      	add	r6, sp, #224	; 0xe0
   10c9e:	e7e7      	b.n	10c70 <_svfprintf_r+0x9a8>
   10ca0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   10ca2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10ca4:	ebc0 0a05 	rsb	sl, r0, r5
   10ca8:	f1ba 0f00 	cmp.w	sl, #0
   10cac:	f77f ad2c 	ble.w	10708 <_svfprintf_r+0x440>
   10cb0:	f1ba 0f10 	cmp.w	sl, #16
   10cb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10cb6:	4d7f      	ldr	r5, [pc, #508]	; (10eb4 <_svfprintf_r+0xbec>)
   10cb8:	dd2b      	ble.n	10d12 <_svfprintf_r+0xa4a>
   10cba:	9412      	str	r4, [sp, #72]	; 0x48
   10cbc:	4632      	mov	r2, r6
   10cbe:	f04f 0b10 	mov.w	fp, #16
   10cc2:	462e      	mov	r6, r5
   10cc4:	4661      	mov	r1, ip
   10cc6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   10cc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   10cca:	e006      	b.n	10cda <_svfprintf_r+0xa12>
   10ccc:	f1aa 0a10 	sub.w	sl, sl, #16
   10cd0:	f1ba 0f10 	cmp.w	sl, #16
   10cd4:	f102 0208 	add.w	r2, r2, #8
   10cd8:	dd17      	ble.n	10d0a <_svfprintf_r+0xa42>
   10cda:	3301      	adds	r3, #1
   10cdc:	3110      	adds	r1, #16
   10cde:	2b07      	cmp	r3, #7
   10ce0:	912d      	str	r1, [sp, #180]	; 0xb4
   10ce2:	932c      	str	r3, [sp, #176]	; 0xb0
   10ce4:	e882 0840 	stmia.w	r2, {r6, fp}
   10ce8:	ddf0      	ble.n	10ccc <_svfprintf_r+0xa04>
   10cea:	4620      	mov	r0, r4
   10cec:	4629      	mov	r1, r5
   10cee:	aa2b      	add	r2, sp, #172	; 0xac
   10cf0:	f002 fcd8 	bl	136a4 <__ssprint_r>
   10cf4:	2800      	cmp	r0, #0
   10cf6:	f47f abff 	bne.w	104f8 <_svfprintf_r+0x230>
   10cfa:	f1aa 0a10 	sub.w	sl, sl, #16
   10cfe:	f1ba 0f10 	cmp.w	sl, #16
   10d02:	992d      	ldr	r1, [sp, #180]	; 0xb4
   10d04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10d06:	aa38      	add	r2, sp, #224	; 0xe0
   10d08:	dce7      	bgt.n	10cda <_svfprintf_r+0xa12>
   10d0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
   10d0c:	4635      	mov	r5, r6
   10d0e:	468c      	mov	ip, r1
   10d10:	4616      	mov	r6, r2
   10d12:	3301      	adds	r3, #1
   10d14:	44d4      	add	ip, sl
   10d16:	2b07      	cmp	r3, #7
   10d18:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10d1c:	932c      	str	r3, [sp, #176]	; 0xb0
   10d1e:	e886 0420 	stmia.w	r6, {r5, sl}
   10d22:	f300 8212 	bgt.w	1114a <_svfprintf_r+0xe82>
   10d26:	3608      	adds	r6, #8
   10d28:	e4ee      	b.n	10708 <_svfprintf_r+0x440>
   10d2a:	2d00      	cmp	r5, #0
   10d2c:	bf08      	it	eq
   10d2e:	2c0a      	cmpeq	r4, #10
   10d30:	f080 8138 	bcs.w	10fa4 <_svfprintf_r+0xcdc>
   10d34:	af48      	add	r7, sp, #288	; 0x120
   10d36:	3430      	adds	r4, #48	; 0x30
   10d38:	f807 4d41 	strb.w	r4, [r7, #-65]!
   10d3c:	9d08      	ldr	r5, [sp, #32]
   10d3e:	1bec      	subs	r4, r5, r7
   10d40:	e450      	b.n	105e4 <_svfprintf_r+0x31c>
   10d42:	9c11      	ldr	r4, [sp, #68]	; 0x44
   10d44:	2c01      	cmp	r4, #1
   10d46:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10d48:	f340 81d5 	ble.w	110f6 <_svfprintf_r+0xe2e>
   10d4c:	3401      	adds	r4, #1
   10d4e:	f10c 0301 	add.w	r3, ip, #1
   10d52:	2201      	movs	r2, #1
   10d54:	2c07      	cmp	r4, #7
   10d56:	6037      	str	r7, [r6, #0]
   10d58:	932d      	str	r3, [sp, #180]	; 0xb4
   10d5a:	942c      	str	r4, [sp, #176]	; 0xb0
   10d5c:	6072      	str	r2, [r6, #4]
   10d5e:	f300 81db 	bgt.w	11118 <_svfprintf_r+0xe50>
   10d62:	3608      	adds	r6, #8
   10d64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   10d68:	9d15      	ldr	r5, [sp, #84]	; 0x54
   10d6a:	6035      	str	r5, [r6, #0]
   10d6c:	3401      	adds	r4, #1
   10d6e:	4498      	add	r8, r3
   10d70:	9d18      	ldr	r5, [sp, #96]	; 0x60
   10d72:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   10d76:	2c07      	cmp	r4, #7
   10d78:	942c      	str	r4, [sp, #176]	; 0xb0
   10d7a:	6075      	str	r5, [r6, #4]
   10d7c:	f300 81d8 	bgt.w	11130 <_svfprintf_r+0xe68>
   10d80:	3608      	adds	r6, #8
   10d82:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   10d86:	2200      	movs	r2, #0
   10d88:	2300      	movs	r3, #0
   10d8a:	f7fc fcef 	bl	d76c <__aeabi_dcmpeq>
   10d8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   10d90:	2800      	cmp	r0, #0
   10d92:	f040 80b9 	bne.w	10f08 <_svfprintf_r+0xc40>
   10d96:	1e6b      	subs	r3, r5, #1
   10d98:	3401      	adds	r4, #1
   10d9a:	3701      	adds	r7, #1
   10d9c:	4498      	add	r8, r3
   10d9e:	2c07      	cmp	r4, #7
   10da0:	942c      	str	r4, [sp, #176]	; 0xb0
   10da2:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   10da6:	6037      	str	r7, [r6, #0]
   10da8:	6073      	str	r3, [r6, #4]
   10daa:	f300 80e2 	bgt.w	10f72 <_svfprintf_r+0xcaa>
   10dae:	3608      	adds	r6, #8
   10db0:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
   10db4:	9d19      	ldr	r5, [sp, #100]	; 0x64
   10db6:	3401      	adds	r4, #1
   10db8:	44c4      	add	ip, r8
   10dba:	ab27      	add	r3, sp, #156	; 0x9c
   10dbc:	2c07      	cmp	r4, #7
   10dbe:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10dc2:	942c      	str	r4, [sp, #176]	; 0xb0
   10dc4:	e886 0028 	stmia.w	r6, {r3, r5}
   10dc8:	f77f acef 	ble.w	107aa <_svfprintf_r+0x4e2>
   10dcc:	980d      	ldr	r0, [sp, #52]	; 0x34
   10dce:	990c      	ldr	r1, [sp, #48]	; 0x30
   10dd0:	aa2b      	add	r2, sp, #172	; 0xac
   10dd2:	f002 fc67 	bl	136a4 <__ssprint_r>
   10dd6:	2800      	cmp	r0, #0
   10dd8:	f47f ab8e 	bne.w	104f8 <_svfprintf_r+0x230>
   10ddc:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10de0:	ae38      	add	r6, sp, #224	; 0xe0
   10de2:	e4e3      	b.n	107ac <_svfprintf_r+0x4e4>
   10de4:	980d      	ldr	r0, [sp, #52]	; 0x34
   10de6:	990c      	ldr	r1, [sp, #48]	; 0x30
   10de8:	aa2b      	add	r2, sp, #172	; 0xac
   10dea:	f002 fc5b 	bl	136a4 <__ssprint_r>
   10dee:	2800      	cmp	r0, #0
   10df0:	f43f ad35 	beq.w	1085e <_svfprintf_r+0x596>
   10df4:	f7ff bb80 	b.w	104f8 <_svfprintf_r+0x230>
   10df8:	980d      	ldr	r0, [sp, #52]	; 0x34
   10dfa:	990c      	ldr	r1, [sp, #48]	; 0x30
   10dfc:	aa2b      	add	r2, sp, #172	; 0xac
   10dfe:	f002 fc51 	bl	136a4 <__ssprint_r>
   10e02:	2800      	cmp	r0, #0
   10e04:	f47f ab78 	bne.w	104f8 <_svfprintf_r+0x230>
   10e08:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10e0c:	ae38      	add	r6, sp, #224	; 0xe0
   10e0e:	e4bd      	b.n	1078c <_svfprintf_r+0x4c4>
   10e10:	980d      	ldr	r0, [sp, #52]	; 0x34
   10e12:	990c      	ldr	r1, [sp, #48]	; 0x30
   10e14:	aa2b      	add	r2, sp, #172	; 0xac
   10e16:	f002 fc45 	bl	136a4 <__ssprint_r>
   10e1a:	2800      	cmp	r0, #0
   10e1c:	f47f ab6c 	bne.w	104f8 <_svfprintf_r+0x230>
   10e20:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10e24:	ae38      	add	r6, sp, #224	; 0xe0
   10e26:	e45a      	b.n	106de <_svfprintf_r+0x416>
   10e28:	980d      	ldr	r0, [sp, #52]	; 0x34
   10e2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   10e2c:	aa2b      	add	r2, sp, #172	; 0xac
   10e2e:	f002 fc39 	bl	136a4 <__ssprint_r>
   10e32:	2800      	cmp	r0, #0
   10e34:	f47f ab60 	bne.w	104f8 <_svfprintf_r+0x230>
   10e38:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10e3c:	ae38      	add	r6, sp, #224	; 0xe0
   10e3e:	e45f      	b.n	10700 <_svfprintf_r+0x438>
   10e40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10e42:	af38      	add	r7, sp, #224	; 0xe0
   10e44:	f7ff bbce 	b.w	105e4 <_svfprintf_r+0x31c>
   10e48:	2302      	movs	r3, #2
   10e4a:	f7ff bba7 	b.w	1059c <_svfprintf_r+0x2d4>
   10e4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10e50:	2b00      	cmp	r3, #0
   10e52:	f340 81e7 	ble.w	11224 <_svfprintf_r+0xf5c>
   10e56:	9c11      	ldr	r4, [sp, #68]	; 0x44
   10e58:	9d14      	ldr	r5, [sp, #80]	; 0x50
   10e5a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10e5e:	42ac      	cmp	r4, r5
   10e60:	bfa8      	it	ge
   10e62:	462c      	movge	r4, r5
   10e64:	2c00      	cmp	r4, #0
   10e66:	44ba      	add	sl, r7
   10e68:	dd0b      	ble.n	10e82 <_svfprintf_r+0xbba>
   10e6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10e6c:	6037      	str	r7, [r6, #0]
   10e6e:	3301      	adds	r3, #1
   10e70:	44a4      	add	ip, r4
   10e72:	2b07      	cmp	r3, #7
   10e74:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10e78:	6074      	str	r4, [r6, #4]
   10e7a:	932c      	str	r3, [sp, #176]	; 0xb0
   10e7c:	f300 8328 	bgt.w	114d0 <_svfprintf_r+0x1208>
   10e80:	3608      	adds	r6, #8
   10e82:	9d14      	ldr	r5, [sp, #80]	; 0x50
   10e84:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   10e88:	1b2c      	subs	r4, r5, r4
   10e8a:	2c00      	cmp	r4, #0
   10e8c:	f340 80db 	ble.w	11046 <_svfprintf_r+0xd7e>
   10e90:	2c10      	cmp	r4, #16
   10e92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10e94:	4d07      	ldr	r5, [pc, #28]	; (10eb4 <_svfprintf_r+0xbec>)
   10e96:	f340 81ad 	ble.w	111f4 <_svfprintf_r+0xf2c>
   10e9a:	970a      	str	r7, [sp, #40]	; 0x28
   10e9c:	f04f 0810 	mov.w	r8, #16
   10ea0:	462f      	mov	r7, r5
   10ea2:	4662      	mov	r2, ip
   10ea4:	4625      	mov	r5, r4
   10ea6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   10eaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   10eac:	e009      	b.n	10ec2 <_svfprintf_r+0xbfa>
   10eae:	bf00      	nop
   10eb0:	00015970 	.word	0x00015970
   10eb4:	00015920 	.word	0x00015920
   10eb8:	3608      	adds	r6, #8
   10eba:	3d10      	subs	r5, #16
   10ebc:	2d10      	cmp	r5, #16
   10ebe:	f340 8195 	ble.w	111ec <_svfprintf_r+0xf24>
   10ec2:	3301      	adds	r3, #1
   10ec4:	3210      	adds	r2, #16
   10ec6:	2b07      	cmp	r3, #7
   10ec8:	922d      	str	r2, [sp, #180]	; 0xb4
   10eca:	932c      	str	r3, [sp, #176]	; 0xb0
   10ecc:	e886 0180 	stmia.w	r6, {r7, r8}
   10ed0:	ddf2      	ble.n	10eb8 <_svfprintf_r+0xbf0>
   10ed2:	4658      	mov	r0, fp
   10ed4:	4621      	mov	r1, r4
   10ed6:	aa2b      	add	r2, sp, #172	; 0xac
   10ed8:	f002 fbe4 	bl	136a4 <__ssprint_r>
   10edc:	2800      	cmp	r0, #0
   10ede:	f47f ab0b 	bne.w	104f8 <_svfprintf_r+0x230>
   10ee2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   10ee4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10ee6:	ae38      	add	r6, sp, #224	; 0xe0
   10ee8:	e7e7      	b.n	10eba <_svfprintf_r+0xbf2>
   10eea:	980d      	ldr	r0, [sp, #52]	; 0x34
   10eec:	990c      	ldr	r1, [sp, #48]	; 0x30
   10eee:	aa2b      	add	r2, sp, #172	; 0xac
   10ef0:	f002 fbd8 	bl	136a4 <__ssprint_r>
   10ef4:	2800      	cmp	r0, #0
   10ef6:	f47f aaff 	bne.w	104f8 <_svfprintf_r+0x230>
   10efa:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   10efe:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10f02:	ae38      	add	r6, sp, #224	; 0xe0
   10f04:	f7ff bbd8 	b.w	106b8 <_svfprintf_r+0x3f0>
   10f08:	1e6f      	subs	r7, r5, #1
   10f0a:	2f00      	cmp	r7, #0
   10f0c:	f77f af50 	ble.w	10db0 <_svfprintf_r+0xae8>
   10f10:	2f10      	cmp	r7, #16
   10f12:	4db3      	ldr	r5, [pc, #716]	; (111e0 <_svfprintf_r+0xf18>)
   10f14:	dd23      	ble.n	10f5e <_svfprintf_r+0xc96>
   10f16:	4643      	mov	r3, r8
   10f18:	f04f 0a10 	mov.w	sl, #16
   10f1c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10f20:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   10f24:	e004      	b.n	10f30 <_svfprintf_r+0xc68>
   10f26:	3f10      	subs	r7, #16
   10f28:	2f10      	cmp	r7, #16
   10f2a:	f106 0608 	add.w	r6, r6, #8
   10f2e:	dd15      	ble.n	10f5c <_svfprintf_r+0xc94>
   10f30:	3401      	adds	r4, #1
   10f32:	3310      	adds	r3, #16
   10f34:	2c07      	cmp	r4, #7
   10f36:	932d      	str	r3, [sp, #180]	; 0xb4
   10f38:	942c      	str	r4, [sp, #176]	; 0xb0
   10f3a:	e886 0420 	stmia.w	r6, {r5, sl}
   10f3e:	ddf2      	ble.n	10f26 <_svfprintf_r+0xc5e>
   10f40:	4640      	mov	r0, r8
   10f42:	4659      	mov	r1, fp
   10f44:	aa2b      	add	r2, sp, #172	; 0xac
   10f46:	f002 fbad 	bl	136a4 <__ssprint_r>
   10f4a:	2800      	cmp	r0, #0
   10f4c:	f47f aad4 	bne.w	104f8 <_svfprintf_r+0x230>
   10f50:	3f10      	subs	r7, #16
   10f52:	2f10      	cmp	r7, #16
   10f54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10f56:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10f58:	ae38      	add	r6, sp, #224	; 0xe0
   10f5a:	dce9      	bgt.n	10f30 <_svfprintf_r+0xc68>
   10f5c:	4698      	mov	r8, r3
   10f5e:	3401      	adds	r4, #1
   10f60:	44b8      	add	r8, r7
   10f62:	2c07      	cmp	r4, #7
   10f64:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   10f68:	942c      	str	r4, [sp, #176]	; 0xb0
   10f6a:	e886 00a0 	stmia.w	r6, {r5, r7}
   10f6e:	f77f af1e 	ble.w	10dae <_svfprintf_r+0xae6>
   10f72:	980d      	ldr	r0, [sp, #52]	; 0x34
   10f74:	990c      	ldr	r1, [sp, #48]	; 0x30
   10f76:	aa2b      	add	r2, sp, #172	; 0xac
   10f78:	f002 fb94 	bl	136a4 <__ssprint_r>
   10f7c:	2800      	cmp	r0, #0
   10f7e:	f47f aabb 	bne.w	104f8 <_svfprintf_r+0x230>
   10f82:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   10f86:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10f88:	ae38      	add	r6, sp, #224	; 0xe0
   10f8a:	e711      	b.n	10db0 <_svfprintf_r+0xae8>
   10f8c:	4694      	mov	ip, r2
   10f8e:	3301      	adds	r3, #1
   10f90:	44a4      	add	ip, r4
   10f92:	2b07      	cmp	r3, #7
   10f94:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10f98:	932c      	str	r3, [sp, #176]	; 0xb0
   10f9a:	6035      	str	r5, [r6, #0]
   10f9c:	6074      	str	r4, [r6, #4]
   10f9e:	f77f ac04 	ble.w	107aa <_svfprintf_r+0x4e2>
   10fa2:	e713      	b.n	10dcc <_svfprintf_r+0xb04>
   10fa4:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
   10fa8:	4620      	mov	r0, r4
   10faa:	4629      	mov	r1, r5
   10fac:	220a      	movs	r2, #10
   10fae:	2300      	movs	r3, #0
   10fb0:	f002 fd00 	bl	139b4 <__aeabi_uldivmod>
   10fb4:	3230      	adds	r2, #48	; 0x30
   10fb6:	f88b 2000 	strb.w	r2, [fp]
   10fba:	4620      	mov	r0, r4
   10fbc:	4629      	mov	r1, r5
   10fbe:	220a      	movs	r2, #10
   10fc0:	2300      	movs	r3, #0
   10fc2:	f002 fcf7 	bl	139b4 <__aeabi_uldivmod>
   10fc6:	4604      	mov	r4, r0
   10fc8:	460d      	mov	r5, r1
   10fca:	ea54 0c05 	orrs.w	ip, r4, r5
   10fce:	465f      	mov	r7, fp
   10fd0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   10fd4:	d1e8      	bne.n	10fa8 <_svfprintf_r+0xce0>
   10fd6:	9d08      	ldr	r5, [sp, #32]
   10fd8:	1bec      	subs	r4, r5, r7
   10fda:	f7ff bb03 	b.w	105e4 <_svfprintf_r+0x31c>
   10fde:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10fe0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   10fe4:	682c      	ldr	r4, [r5, #0]
   10fe6:	17e5      	asrs	r5, r4, #31
   10fe8:	4622      	mov	r2, r4
   10fea:	462b      	mov	r3, r5
   10fec:	f10c 0c04 	add.w	ip, ip, #4
   10ff0:	2a00      	cmp	r2, #0
   10ff2:	f173 0000 	sbcs.w	r0, r3, #0
   10ff6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10ffa:	f6bf ac75 	bge.w	108e8 <_svfprintf_r+0x620>
   10ffe:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   11002:	4264      	negs	r4, r4
   11004:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   11008:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   1100c:	2301      	movs	r3, #1
   1100e:	f7ff bac9 	b.w	105a4 <_svfprintf_r+0x2dc>
   11012:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11014:	682c      	ldr	r4, [r5, #0]
   11016:	3504      	adds	r5, #4
   11018:	9510      	str	r5, [sp, #64]	; 0x40
   1101a:	2500      	movs	r5, #0
   1101c:	f7ff babe 	b.w	1059c <_svfprintf_r+0x2d4>
   11020:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11022:	682c      	ldr	r4, [r5, #0]
   11024:	3504      	adds	r5, #4
   11026:	9510      	str	r5, [sp, #64]	; 0x40
   11028:	2301      	movs	r3, #1
   1102a:	2500      	movs	r5, #0
   1102c:	f7ff bab6 	b.w	1059c <_svfprintf_r+0x2d4>
   11030:	980d      	ldr	r0, [sp, #52]	; 0x34
   11032:	990c      	ldr	r1, [sp, #48]	; 0x30
   11034:	aa2b      	add	r2, sp, #172	; 0xac
   11036:	f002 fb35 	bl	136a4 <__ssprint_r>
   1103a:	2800      	cmp	r0, #0
   1103c:	f47f aa5c 	bne.w	104f8 <_svfprintf_r+0x230>
   11040:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   11044:	ae38      	add	r6, sp, #224	; 0xe0
   11046:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11048:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1104a:	442f      	add	r7, r5
   1104c:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1104e:	42ac      	cmp	r4, r5
   11050:	db42      	blt.n	110d8 <_svfprintf_r+0xe10>
   11052:	9d09      	ldr	r5, [sp, #36]	; 0x24
   11054:	07e9      	lsls	r1, r5, #31
   11056:	d43f      	bmi.n	110d8 <_svfprintf_r+0xe10>
   11058:	9811      	ldr	r0, [sp, #68]	; 0x44
   1105a:	ebc7 050a 	rsb	r5, r7, sl
   1105e:	1b04      	subs	r4, r0, r4
   11060:	42ac      	cmp	r4, r5
   11062:	bfb8      	it	lt
   11064:	4625      	movlt	r5, r4
   11066:	2d00      	cmp	r5, #0
   11068:	dd0b      	ble.n	11082 <_svfprintf_r+0xdba>
   1106a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1106c:	6037      	str	r7, [r6, #0]
   1106e:	3301      	adds	r3, #1
   11070:	44ac      	add	ip, r5
   11072:	2b07      	cmp	r3, #7
   11074:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   11078:	6075      	str	r5, [r6, #4]
   1107a:	932c      	str	r3, [sp, #176]	; 0xb0
   1107c:	f300 8252 	bgt.w	11524 <_svfprintf_r+0x125c>
   11080:	3608      	adds	r6, #8
   11082:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   11086:	1b64      	subs	r4, r4, r5
   11088:	2c00      	cmp	r4, #0
   1108a:	f77f ab8f 	ble.w	107ac <_svfprintf_r+0x4e4>
   1108e:	2c10      	cmp	r4, #16
   11090:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   11092:	4d53      	ldr	r5, [pc, #332]	; (111e0 <_svfprintf_r+0xf18>)
   11094:	f77f af7b 	ble.w	10f8e <_svfprintf_r+0xcc6>
   11098:	2710      	movs	r7, #16
   1109a:	4662      	mov	r2, ip
   1109c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   110a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   110a4:	e004      	b.n	110b0 <_svfprintf_r+0xde8>
   110a6:	3608      	adds	r6, #8
   110a8:	3c10      	subs	r4, #16
   110aa:	2c10      	cmp	r4, #16
   110ac:	f77f af6e 	ble.w	10f8c <_svfprintf_r+0xcc4>
   110b0:	3301      	adds	r3, #1
   110b2:	3210      	adds	r2, #16
   110b4:	2b07      	cmp	r3, #7
   110b6:	922d      	str	r2, [sp, #180]	; 0xb4
   110b8:	932c      	str	r3, [sp, #176]	; 0xb0
   110ba:	e886 00a0 	stmia.w	r6, {r5, r7}
   110be:	ddf2      	ble.n	110a6 <_svfprintf_r+0xdde>
   110c0:	4640      	mov	r0, r8
   110c2:	4651      	mov	r1, sl
   110c4:	aa2b      	add	r2, sp, #172	; 0xac
   110c6:	f002 faed 	bl	136a4 <__ssprint_r>
   110ca:	2800      	cmp	r0, #0
   110cc:	f47f aa14 	bne.w	104f8 <_svfprintf_r+0x230>
   110d0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   110d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   110d4:	ae38      	add	r6, sp, #224	; 0xe0
   110d6:	e7e7      	b.n	110a8 <_svfprintf_r+0xde0>
   110d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   110da:	9d15      	ldr	r5, [sp, #84]	; 0x54
   110dc:	6035      	str	r5, [r6, #0]
   110de:	9d18      	ldr	r5, [sp, #96]	; 0x60
   110e0:	6075      	str	r5, [r6, #4]
   110e2:	3301      	adds	r3, #1
   110e4:	44ac      	add	ip, r5
   110e6:	2b07      	cmp	r3, #7
   110e8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   110ec:	932c      	str	r3, [sp, #176]	; 0xb0
   110ee:	f300 81fb 	bgt.w	114e8 <_svfprintf_r+0x1220>
   110f2:	3608      	adds	r6, #8
   110f4:	e7b0      	b.n	11058 <_svfprintf_r+0xd90>
   110f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   110f8:	07ea      	lsls	r2, r5, #31
   110fa:	f53f ae27 	bmi.w	10d4c <_svfprintf_r+0xa84>
   110fe:	3401      	adds	r4, #1
   11100:	f10c 0801 	add.w	r8, ip, #1
   11104:	2301      	movs	r3, #1
   11106:	2c07      	cmp	r4, #7
   11108:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   1110c:	942c      	str	r4, [sp, #176]	; 0xb0
   1110e:	6037      	str	r7, [r6, #0]
   11110:	6073      	str	r3, [r6, #4]
   11112:	f77f ae4c 	ble.w	10dae <_svfprintf_r+0xae6>
   11116:	e72c      	b.n	10f72 <_svfprintf_r+0xcaa>
   11118:	980d      	ldr	r0, [sp, #52]	; 0x34
   1111a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1111c:	aa2b      	add	r2, sp, #172	; 0xac
   1111e:	f002 fac1 	bl	136a4 <__ssprint_r>
   11122:	2800      	cmp	r0, #0
   11124:	f47f a9e8 	bne.w	104f8 <_svfprintf_r+0x230>
   11128:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1112a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   1112c:	ae38      	add	r6, sp, #224	; 0xe0
   1112e:	e619      	b.n	10d64 <_svfprintf_r+0xa9c>
   11130:	980d      	ldr	r0, [sp, #52]	; 0x34
   11132:	990c      	ldr	r1, [sp, #48]	; 0x30
   11134:	aa2b      	add	r2, sp, #172	; 0xac
   11136:	f002 fab5 	bl	136a4 <__ssprint_r>
   1113a:	2800      	cmp	r0, #0
   1113c:	f47f a9dc 	bne.w	104f8 <_svfprintf_r+0x230>
   11140:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   11144:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   11146:	ae38      	add	r6, sp, #224	; 0xe0
   11148:	e61b      	b.n	10d82 <_svfprintf_r+0xaba>
   1114a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1114c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1114e:	aa2b      	add	r2, sp, #172	; 0xac
   11150:	f002 faa8 	bl	136a4 <__ssprint_r>
   11154:	2800      	cmp	r0, #0
   11156:	f47f a9cf 	bne.w	104f8 <_svfprintf_r+0x230>
   1115a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   1115e:	ae38      	add	r6, sp, #224	; 0xe0
   11160:	f7ff bad2 	b.w	10708 <_svfprintf_r+0x440>
   11164:	f7fb fe24 	bl	cdb0 <__fpclassifyd>
   11168:	2800      	cmp	r0, #0
   1116a:	f040 80c2 	bne.w	112f2 <_svfprintf_r+0x102a>
   1116e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11170:	4f1c      	ldr	r7, [pc, #112]	; (111e4 <_svfprintf_r+0xf1c>)
   11172:	4b1d      	ldr	r3, [pc, #116]	; (111e8 <_svfprintf_r+0xf20>)
   11174:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   11178:	900a      	str	r0, [sp, #40]	; 0x28
   1117a:	f04f 0c03 	mov.w	ip, #3
   1117e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   11182:	9409      	str	r4, [sp, #36]	; 0x24
   11184:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   11188:	9014      	str	r0, [sp, #80]	; 0x50
   1118a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   1118e:	bfd8      	it	le
   11190:	461f      	movle	r7, r3
   11192:	4664      	mov	r4, ip
   11194:	f7ff ba2f 	b.w	105f6 <_svfprintf_r+0x32e>
   11198:	e9d3 4500 	ldrd	r4, r5, [r3]
   1119c:	3308      	adds	r3, #8
   1119e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   111a2:	9310      	str	r3, [sp, #64]	; 0x40
   111a4:	e476      	b.n	10a94 <_svfprintf_r+0x7cc>
   111a6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   111aa:	f01c 0f10 	tst.w	ip, #16
   111ae:	f000 8155 	beq.w	1145c <_svfprintf_r+0x1194>
   111b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   111b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   111b6:	6823      	ldr	r3, [r4, #0]
   111b8:	3404      	adds	r4, #4
   111ba:	9410      	str	r4, [sp, #64]	; 0x40
   111bc:	601d      	str	r5, [r3, #0]
   111be:	f7ff b8a9 	b.w	10314 <_svfprintf_r+0x4c>
   111c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   111c4:	0664      	lsls	r4, r4, #25
   111c6:	f140 8142 	bpl.w	1144e <_svfprintf_r+0x1186>
   111ca:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   111ce:	f8bc 4000 	ldrh.w	r4, [ip]
   111d2:	f10c 0c04 	add.w	ip, ip, #4
   111d6:	2500      	movs	r5, #0
   111d8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   111dc:	f7ff b9ca 	b.w	10574 <_svfprintf_r+0x2ac>
   111e0:	00015920 	.word	0x00015920
   111e4:	0001593c 	.word	0x0001593c
   111e8:	00015938 	.word	0x00015938
   111ec:	462c      	mov	r4, r5
   111ee:	463d      	mov	r5, r7
   111f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   111f2:	4694      	mov	ip, r2
   111f4:	3301      	adds	r3, #1
   111f6:	44a4      	add	ip, r4
   111f8:	2b07      	cmp	r3, #7
   111fa:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   111fe:	932c      	str	r3, [sp, #176]	; 0xb0
   11200:	6035      	str	r5, [r6, #0]
   11202:	6074      	str	r4, [r6, #4]
   11204:	f73f af14 	bgt.w	11030 <_svfprintf_r+0xd68>
   11208:	3608      	adds	r6, #8
   1120a:	e71c      	b.n	11046 <_svfprintf_r+0xd7e>
   1120c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1120e:	990c      	ldr	r1, [sp, #48]	; 0x30
   11210:	aa2b      	add	r2, sp, #172	; 0xac
   11212:	f002 fa47 	bl	136a4 <__ssprint_r>
   11216:	2800      	cmp	r0, #0
   11218:	f47f a96e 	bne.w	104f8 <_svfprintf_r+0x230>
   1121c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   11220:	ae38      	add	r6, sp, #224	; 0xe0
   11222:	e4fd      	b.n	10c20 <_svfprintf_r+0x958>
   11224:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   11226:	49b7      	ldr	r1, [pc, #732]	; (11504 <_svfprintf_r+0x123c>)
   11228:	6031      	str	r1, [r6, #0]
   1122a:	3201      	adds	r2, #1
   1122c:	f10c 0c01 	add.w	ip, ip, #1
   11230:	2101      	movs	r1, #1
   11232:	2a07      	cmp	r2, #7
   11234:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   11238:	922c      	str	r2, [sp, #176]	; 0xb0
   1123a:	6071      	str	r1, [r6, #4]
   1123c:	f300 80f7 	bgt.w	1142e <_svfprintf_r+0x1166>
   11240:	3608      	adds	r6, #8
   11242:	461c      	mov	r4, r3
   11244:	b92c      	cbnz	r4, 11252 <_svfprintf_r+0xf8a>
   11246:	9d11      	ldr	r5, [sp, #68]	; 0x44
   11248:	b91d      	cbnz	r5, 11252 <_svfprintf_r+0xf8a>
   1124a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1124c:	07e8      	lsls	r0, r5, #31
   1124e:	f57f aaad 	bpl.w	107ac <_svfprintf_r+0x4e4>
   11252:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   11254:	9918      	ldr	r1, [sp, #96]	; 0x60
   11256:	9d15      	ldr	r5, [sp, #84]	; 0x54
   11258:	6035      	str	r5, [r6, #0]
   1125a:	3301      	adds	r3, #1
   1125c:	4461      	add	r1, ip
   1125e:	9d18      	ldr	r5, [sp, #96]	; 0x60
   11260:	912d      	str	r1, [sp, #180]	; 0xb4
   11262:	2b07      	cmp	r3, #7
   11264:	6075      	str	r5, [r6, #4]
   11266:	932c      	str	r3, [sp, #176]	; 0xb0
   11268:	f300 81de 	bgt.w	11628 <_svfprintf_r+0x1360>
   1126c:	f106 0208 	add.w	r2, r6, #8
   11270:	4264      	negs	r4, r4
   11272:	2c00      	cmp	r4, #0
   11274:	f340 810b 	ble.w	1148e <_svfprintf_r+0x11c6>
   11278:	2c10      	cmp	r4, #16
   1127a:	4da3      	ldr	r5, [pc, #652]	; (11508 <_svfprintf_r+0x1240>)
   1127c:	f340 8148 	ble.w	11510 <_svfprintf_r+0x1248>
   11280:	46a3      	mov	fp, r4
   11282:	2610      	movs	r6, #16
   11284:	460c      	mov	r4, r1
   11286:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   1128a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   1128e:	e006      	b.n	1129e <_svfprintf_r+0xfd6>
   11290:	3208      	adds	r2, #8
   11292:	f1ab 0b10 	sub.w	fp, fp, #16
   11296:	f1bb 0f10 	cmp.w	fp, #16
   1129a:	f340 8137 	ble.w	1150c <_svfprintf_r+0x1244>
   1129e:	3301      	adds	r3, #1
   112a0:	3410      	adds	r4, #16
   112a2:	2b07      	cmp	r3, #7
   112a4:	942d      	str	r4, [sp, #180]	; 0xb4
   112a6:	932c      	str	r3, [sp, #176]	; 0xb0
   112a8:	e882 0060 	stmia.w	r2, {r5, r6}
   112ac:	ddf0      	ble.n	11290 <_svfprintf_r+0xfc8>
   112ae:	4640      	mov	r0, r8
   112b0:	4651      	mov	r1, sl
   112b2:	aa2b      	add	r2, sp, #172	; 0xac
   112b4:	f002 f9f6 	bl	136a4 <__ssprint_r>
   112b8:	2800      	cmp	r0, #0
   112ba:	f47f a91d 	bne.w	104f8 <_svfprintf_r+0x230>
   112be:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   112c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   112c2:	aa38      	add	r2, sp, #224	; 0xe0
   112c4:	e7e5      	b.n	11292 <_svfprintf_r+0xfca>
   112c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   112c8:	f893 8001 	ldrb.w	r8, [r3, #1]
   112cc:	f044 0420 	orr.w	r4, r4, #32
   112d0:	f109 0901 	add.w	r9, r9, #1
   112d4:	9409      	str	r4, [sp, #36]	; 0x24
   112d6:	f7ff b853 	b.w	10380 <_svfprintf_r+0xb8>
   112da:	980d      	ldr	r0, [sp, #52]	; 0x34
   112dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   112de:	aa2b      	add	r2, sp, #172	; 0xac
   112e0:	f002 f9e0 	bl	136a4 <__ssprint_r>
   112e4:	2800      	cmp	r0, #0
   112e6:	f47f a907 	bne.w	104f8 <_svfprintf_r+0x230>
   112ea:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   112ee:	ae38      	add	r6, sp, #224	; 0xe0
   112f0:	e4ac      	b.n	10c4c <_svfprintf_r+0x984>
   112f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   112f4:	3501      	adds	r5, #1
   112f6:	f028 0a20 	bic.w	sl, r8, #32
   112fa:	f000 80a5 	beq.w	11448 <_svfprintf_r+0x1180>
   112fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   11302:	d104      	bne.n	1130e <_svfprintf_r+0x1046>
   11304:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11306:	2d00      	cmp	r5, #0
   11308:	bf08      	it	eq
   1130a:	2501      	moveq	r5, #1
   1130c:	950a      	str	r5, [sp, #40]	; 0x28
   1130e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   11312:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   11316:	2b00      	cmp	r3, #0
   11318:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
   1131c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
   11320:	f2c0 819c 	blt.w	1165c <_svfprintf_r+0x1394>
   11324:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   11328:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
   1132c:	f04f 0b00 	mov.w	fp, #0
   11330:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   11334:	f000 819b 	beq.w	1166e <_svfprintf_r+0x13a6>
   11338:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1133c:	f000 81a9 	beq.w	11692 <_svfprintf_r+0x13ca>
   11340:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   11344:	bf0a      	itet	eq
   11346:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
   11348:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   1134a:	1c65      	addeq	r5, r4, #1
   1134c:	2002      	movs	r0, #2
   1134e:	a925      	add	r1, sp, #148	; 0x94
   11350:	aa26      	add	r2, sp, #152	; 0x98
   11352:	ab29      	add	r3, sp, #164	; 0xa4
   11354:	e88d 0021 	stmia.w	sp, {r0, r5}
   11358:	9203      	str	r2, [sp, #12]
   1135a:	9304      	str	r3, [sp, #16]
   1135c:	9102      	str	r1, [sp, #8]
   1135e:	980d      	ldr	r0, [sp, #52]	; 0x34
   11360:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   11364:	f000 fc24 	bl	11bb0 <_dtoa_r>
   11368:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   1136c:	4607      	mov	r7, r0
   1136e:	d002      	beq.n	11376 <_svfprintf_r+0x10ae>
   11370:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   11374:	d105      	bne.n	11382 <_svfprintf_r+0x10ba>
   11376:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1137a:	f01c 0f01 	tst.w	ip, #1
   1137e:	f000 819c 	beq.w	116ba <_svfprintf_r+0x13f2>
   11382:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   11386:	eb07 0405 	add.w	r4, r7, r5
   1138a:	f000 811c 	beq.w	115c6 <_svfprintf_r+0x12fe>
   1138e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   11392:	2200      	movs	r2, #0
   11394:	2300      	movs	r3, #0
   11396:	f7fc f9e9 	bl	d76c <__aeabi_dcmpeq>
   1139a:	2800      	cmp	r0, #0
   1139c:	f040 8105 	bne.w	115aa <_svfprintf_r+0x12e2>
   113a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   113a2:	429c      	cmp	r4, r3
   113a4:	d906      	bls.n	113b4 <_svfprintf_r+0x10ec>
   113a6:	2130      	movs	r1, #48	; 0x30
   113a8:	1c5a      	adds	r2, r3, #1
   113aa:	9229      	str	r2, [sp, #164]	; 0xa4
   113ac:	7019      	strb	r1, [r3, #0]
   113ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   113b0:	429c      	cmp	r4, r3
   113b2:	d8f9      	bhi.n	113a8 <_svfprintf_r+0x10e0>
   113b4:	1bdb      	subs	r3, r3, r7
   113b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   113ba:	9311      	str	r3, [sp, #68]	; 0x44
   113bc:	f000 80ed 	beq.w	1159a <_svfprintf_r+0x12d2>
   113c0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   113c4:	f340 81f2 	ble.w	117ac <_svfprintf_r+0x14e4>
   113c8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   113cc:	f000 8168 	beq.w	116a0 <_svfprintf_r+0x13d8>
   113d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
   113d2:	9414      	str	r4, [sp, #80]	; 0x50
   113d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
   113d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
   113d8:	42ac      	cmp	r4, r5
   113da:	f300 8132 	bgt.w	11642 <_svfprintf_r+0x137a>
   113de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   113e2:	f01c 0f01 	tst.w	ip, #1
   113e6:	f040 81ad 	bne.w	11744 <_svfprintf_r+0x147c>
   113ea:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
   113ee:	462c      	mov	r4, r5
   113f0:	f04f 0867 	mov.w	r8, #103	; 0x67
   113f4:	f1bb 0f00 	cmp.w	fp, #0
   113f8:	f040 80b2 	bne.w	11560 <_svfprintf_r+0x1298>
   113fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   113fe:	930b      	str	r3, [sp, #44]	; 0x2c
   11400:	9509      	str	r5, [sp, #36]	; 0x24
   11402:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   11406:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   1140a:	f7ff b8f4 	b.w	105f6 <_svfprintf_r+0x32e>
   1140e:	980d      	ldr	r0, [sp, #52]	; 0x34
   11410:	2140      	movs	r1, #64	; 0x40
   11412:	f7fd fef5 	bl	f200 <_malloc_r>
   11416:	6020      	str	r0, [r4, #0]
   11418:	6120      	str	r0, [r4, #16]
   1141a:	2800      	cmp	r0, #0
   1141c:	f000 81bf 	beq.w	1179e <_svfprintf_r+0x14d6>
   11420:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   11424:	2340      	movs	r3, #64	; 0x40
   11426:	f8cc 3014 	str.w	r3, [ip, #20]
   1142a:	f7fe bf63 	b.w	102f4 <_svfprintf_r+0x2c>
   1142e:	980d      	ldr	r0, [sp, #52]	; 0x34
   11430:	990c      	ldr	r1, [sp, #48]	; 0x30
   11432:	aa2b      	add	r2, sp, #172	; 0xac
   11434:	f002 f936 	bl	136a4 <__ssprint_r>
   11438:	2800      	cmp	r0, #0
   1143a:	f47f a85d 	bne.w	104f8 <_svfprintf_r+0x230>
   1143e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   11440:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   11444:	ae38      	add	r6, sp, #224	; 0xe0
   11446:	e6fd      	b.n	11244 <_svfprintf_r+0xf7c>
   11448:	2406      	movs	r4, #6
   1144a:	940a      	str	r4, [sp, #40]	; 0x28
   1144c:	e75f      	b.n	1130e <_svfprintf_r+0x1046>
   1144e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11450:	682c      	ldr	r4, [r5, #0]
   11452:	3504      	adds	r5, #4
   11454:	9510      	str	r5, [sp, #64]	; 0x40
   11456:	2500      	movs	r5, #0
   11458:	f7ff b88c 	b.w	10574 <_svfprintf_r+0x2ac>
   1145c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   11460:	f01c 0f40 	tst.w	ip, #64	; 0x40
   11464:	f000 8087 	beq.w	11576 <_svfprintf_r+0x12ae>
   11468:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1146a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1146c:	6823      	ldr	r3, [r4, #0]
   1146e:	3404      	adds	r4, #4
   11470:	9410      	str	r4, [sp, #64]	; 0x40
   11472:	801d      	strh	r5, [r3, #0]
   11474:	f7fe bf4e 	b.w	10314 <_svfprintf_r+0x4c>
   11478:	980d      	ldr	r0, [sp, #52]	; 0x34
   1147a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1147c:	aa2b      	add	r2, sp, #172	; 0xac
   1147e:	f002 f911 	bl	136a4 <__ssprint_r>
   11482:	2800      	cmp	r0, #0
   11484:	f47f a838 	bne.w	104f8 <_svfprintf_r+0x230>
   11488:	992d      	ldr	r1, [sp, #180]	; 0xb4
   1148a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1148c:	aa38      	add	r2, sp, #224	; 0xe0
   1148e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   11492:	9c11      	ldr	r4, [sp, #68]	; 0x44
   11494:	6017      	str	r7, [r2, #0]
   11496:	3301      	adds	r3, #1
   11498:	448c      	add	ip, r1
   1149a:	2b07      	cmp	r3, #7
   1149c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   114a0:	932c      	str	r3, [sp, #176]	; 0xb0
   114a2:	6054      	str	r4, [r2, #4]
   114a4:	f73f ac92 	bgt.w	10dcc <_svfprintf_r+0xb04>
   114a8:	f102 0608 	add.w	r6, r2, #8
   114ac:	f7ff b97e 	b.w	107ac <_svfprintf_r+0x4e4>
   114b0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   114b4:	f7f2 f93a 	bl	372c <strlen>
   114b8:	9510      	str	r5, [sp, #64]	; 0x40
   114ba:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   114be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   114c0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   114c4:	4604      	mov	r4, r0
   114c6:	9514      	str	r5, [sp, #80]	; 0x50
   114c8:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   114cc:	f7ff b893 	b.w	105f6 <_svfprintf_r+0x32e>
   114d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   114d2:	990c      	ldr	r1, [sp, #48]	; 0x30
   114d4:	aa2b      	add	r2, sp, #172	; 0xac
   114d6:	f002 f8e5 	bl	136a4 <__ssprint_r>
   114da:	2800      	cmp	r0, #0
   114dc:	f47f a80c 	bne.w	104f8 <_svfprintf_r+0x230>
   114e0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   114e4:	ae38      	add	r6, sp, #224	; 0xe0
   114e6:	e4cc      	b.n	10e82 <_svfprintf_r+0xbba>
   114e8:	980d      	ldr	r0, [sp, #52]	; 0x34
   114ea:	990c      	ldr	r1, [sp, #48]	; 0x30
   114ec:	aa2b      	add	r2, sp, #172	; 0xac
   114ee:	f002 f8d9 	bl	136a4 <__ssprint_r>
   114f2:	2800      	cmp	r0, #0
   114f4:	f47f a800 	bne.w	104f8 <_svfprintf_r+0x230>
   114f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   114fa:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   114fe:	ae38      	add	r6, sp, #224	; 0xe0
   11500:	e5aa      	b.n	11058 <_svfprintf_r+0xd90>
   11502:	bf00      	nop
   11504:	00015970 	.word	0x00015970
   11508:	00015920 	.word	0x00015920
   1150c:	4621      	mov	r1, r4
   1150e:	465c      	mov	r4, fp
   11510:	3301      	adds	r3, #1
   11512:	4421      	add	r1, r4
   11514:	2b07      	cmp	r3, #7
   11516:	912d      	str	r1, [sp, #180]	; 0xb4
   11518:	932c      	str	r3, [sp, #176]	; 0xb0
   1151a:	6015      	str	r5, [r2, #0]
   1151c:	6054      	str	r4, [r2, #4]
   1151e:	dcab      	bgt.n	11478 <_svfprintf_r+0x11b0>
   11520:	3208      	adds	r2, #8
   11522:	e7b4      	b.n	1148e <_svfprintf_r+0x11c6>
   11524:	980d      	ldr	r0, [sp, #52]	; 0x34
   11526:	990c      	ldr	r1, [sp, #48]	; 0x30
   11528:	aa2b      	add	r2, sp, #172	; 0xac
   1152a:	f002 f8bb 	bl	136a4 <__ssprint_r>
   1152e:	2800      	cmp	r0, #0
   11530:	f47e afe2 	bne.w	104f8 <_svfprintf_r+0x230>
   11534:	9c25      	ldr	r4, [sp, #148]	; 0x94
   11536:	9911      	ldr	r1, [sp, #68]	; 0x44
   11538:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   1153c:	1b0c      	subs	r4, r1, r4
   1153e:	ae38      	add	r6, sp, #224	; 0xe0
   11540:	e59f      	b.n	11082 <_svfprintf_r+0xdba>
   11542:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11544:	9714      	str	r7, [sp, #80]	; 0x50
   11546:	2c06      	cmp	r4, #6
   11548:	bf28      	it	cs
   1154a:	2406      	movcs	r4, #6
   1154c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   11550:	46ba      	mov	sl, r7
   11552:	970a      	str	r7, [sp, #40]	; 0x28
   11554:	9510      	str	r5, [sp, #64]	; 0x40
   11556:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1155a:	4f97      	ldr	r7, [pc, #604]	; (117b8 <_svfprintf_r+0x14f0>)
   1155c:	f7ff b84b 	b.w	105f6 <_svfprintf_r+0x32e>
   11560:	9d12      	ldr	r5, [sp, #72]	; 0x48
   11562:	9509      	str	r5, [sp, #36]	; 0x24
   11564:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   11568:	2500      	movs	r5, #0
   1156a:	930b      	str	r3, [sp, #44]	; 0x2c
   1156c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   11570:	950a      	str	r5, [sp, #40]	; 0x28
   11572:	f7ff b843 	b.w	105fc <_svfprintf_r+0x334>
   11576:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1157a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1157c:	f8dc 3000 	ldr.w	r3, [ip]
   11580:	f10c 0c04 	add.w	ip, ip, #4
   11584:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   11588:	601c      	str	r4, [r3, #0]
   1158a:	f7fe bec3 	b.w	10314 <_svfprintf_r+0x4c>
   1158e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   11592:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   11596:	f7ff ba8f 	b.w	10ab8 <_svfprintf_r+0x7f0>
   1159a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1159c:	1cdc      	adds	r4, r3, #3
   1159e:	db19      	blt.n	115d4 <_svfprintf_r+0x130c>
   115a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   115a2:	429c      	cmp	r4, r3
   115a4:	db16      	blt.n	115d4 <_svfprintf_r+0x130c>
   115a6:	9314      	str	r3, [sp, #80]	; 0x50
   115a8:	e714      	b.n	113d4 <_svfprintf_r+0x110c>
   115aa:	4623      	mov	r3, r4
   115ac:	e702      	b.n	113b4 <_svfprintf_r+0x10ec>
   115ae:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   115b2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   115b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   115b8:	9510      	str	r5, [sp, #64]	; 0x40
   115ba:	900a      	str	r0, [sp, #40]	; 0x28
   115bc:	9014      	str	r0, [sp, #80]	; 0x50
   115be:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   115c2:	f7ff b818 	b.w	105f6 <_svfprintf_r+0x32e>
   115c6:	783b      	ldrb	r3, [r7, #0]
   115c8:	2b30      	cmp	r3, #48	; 0x30
   115ca:	f000 80ad 	beq.w	11728 <_svfprintf_r+0x1460>
   115ce:	9d25      	ldr	r5, [sp, #148]	; 0x94
   115d0:	442c      	add	r4, r5
   115d2:	e6dc      	b.n	1138e <_svfprintf_r+0x10c6>
   115d4:	f1a8 0802 	sub.w	r8, r8, #2
   115d8:	3b01      	subs	r3, #1
   115da:	2b00      	cmp	r3, #0
   115dc:	9325      	str	r3, [sp, #148]	; 0x94
   115de:	bfba      	itte	lt
   115e0:	425b      	neglt	r3, r3
   115e2:	222d      	movlt	r2, #45	; 0x2d
   115e4:	222b      	movge	r2, #43	; 0x2b
   115e6:	2b09      	cmp	r3, #9
   115e8:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
   115ec:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
   115f0:	dc65      	bgt.n	116be <_svfprintf_r+0x13f6>
   115f2:	3330      	adds	r3, #48	; 0x30
   115f4:	2230      	movs	r2, #48	; 0x30
   115f6:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
   115fa:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
   115fe:	ab28      	add	r3, sp, #160	; 0xa0
   11600:	9d11      	ldr	r5, [sp, #68]	; 0x44
   11602:	9c11      	ldr	r4, [sp, #68]	; 0x44
   11604:	aa27      	add	r2, sp, #156	; 0x9c
   11606:	1a9a      	subs	r2, r3, r2
   11608:	2d01      	cmp	r5, #1
   1160a:	9219      	str	r2, [sp, #100]	; 0x64
   1160c:	4414      	add	r4, r2
   1160e:	f340 80b7 	ble.w	11780 <_svfprintf_r+0x14b8>
   11612:	3401      	adds	r4, #1
   11614:	2500      	movs	r5, #0
   11616:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   1161a:	9514      	str	r5, [sp, #80]	; 0x50
   1161c:	e6ea      	b.n	113f4 <_svfprintf_r+0x112c>
   1161e:	2400      	movs	r4, #0
   11620:	4681      	mov	r9, r0
   11622:	940a      	str	r4, [sp, #40]	; 0x28
   11624:	f7fe beae 	b.w	10384 <_svfprintf_r+0xbc>
   11628:	980d      	ldr	r0, [sp, #52]	; 0x34
   1162a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1162c:	aa2b      	add	r2, sp, #172	; 0xac
   1162e:	f002 f839 	bl	136a4 <__ssprint_r>
   11632:	2800      	cmp	r0, #0
   11634:	f47e af60 	bne.w	104f8 <_svfprintf_r+0x230>
   11638:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1163a:	992d      	ldr	r1, [sp, #180]	; 0xb4
   1163c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1163e:	aa38      	add	r2, sp, #224	; 0xe0
   11640:	e616      	b.n	11270 <_svfprintf_r+0xfa8>
   11642:	9c14      	ldr	r4, [sp, #80]	; 0x50
   11644:	9d11      	ldr	r5, [sp, #68]	; 0x44
   11646:	2c00      	cmp	r4, #0
   11648:	bfd4      	ite	le
   1164a:	f1c4 0402 	rsble	r4, r4, #2
   1164e:	2401      	movgt	r4, #1
   11650:	442c      	add	r4, r5
   11652:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   11656:	f04f 0867 	mov.w	r8, #103	; 0x67
   1165a:	e6cb      	b.n	113f4 <_svfprintf_r+0x112c>
   1165c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1165e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11660:	9020      	str	r0, [sp, #128]	; 0x80
   11662:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   11666:	9121      	str	r1, [sp, #132]	; 0x84
   11668:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   1166c:	e660      	b.n	11330 <_svfprintf_r+0x1068>
   1166e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11670:	9501      	str	r5, [sp, #4]
   11672:	2003      	movs	r0, #3
   11674:	a925      	add	r1, sp, #148	; 0x94
   11676:	aa26      	add	r2, sp, #152	; 0x98
   11678:	ab29      	add	r3, sp, #164	; 0xa4
   1167a:	9000      	str	r0, [sp, #0]
   1167c:	9203      	str	r2, [sp, #12]
   1167e:	9304      	str	r3, [sp, #16]
   11680:	9102      	str	r1, [sp, #8]
   11682:	980d      	ldr	r0, [sp, #52]	; 0x34
   11684:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   11688:	f000 fa92 	bl	11bb0 <_dtoa_r>
   1168c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1168e:	4607      	mov	r7, r0
   11690:	e677      	b.n	11382 <_svfprintf_r+0x10ba>
   11692:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11694:	9401      	str	r4, [sp, #4]
   11696:	2003      	movs	r0, #3
   11698:	a925      	add	r1, sp, #148	; 0x94
   1169a:	aa26      	add	r2, sp, #152	; 0x98
   1169c:	ab29      	add	r3, sp, #164	; 0xa4
   1169e:	e7ec      	b.n	1167a <_svfprintf_r+0x13b2>
   116a0:	9d25      	ldr	r5, [sp, #148]	; 0x94
   116a2:	9514      	str	r5, [sp, #80]	; 0x50
   116a4:	2d00      	cmp	r5, #0
   116a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   116a8:	dd63      	ble.n	11772 <_svfprintf_r+0x14aa>
   116aa:	bbb4      	cbnz	r4, 1171a <_svfprintf_r+0x1452>
   116ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
   116ae:	07e8      	lsls	r0, r5, #31
   116b0:	d433      	bmi.n	1171a <_svfprintf_r+0x1452>
   116b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
   116b4:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   116b8:	e69c      	b.n	113f4 <_svfprintf_r+0x112c>
   116ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   116bc:	e67a      	b.n	113b4 <_svfprintf_r+0x10ec>
   116be:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
   116c2:	4d3e      	ldr	r5, [pc, #248]	; (117bc <_svfprintf_r+0x14f4>)
   116c4:	17da      	asrs	r2, r3, #31
   116c6:	fb85 5103 	smull	r5, r1, r5, r3
   116ca:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
   116ce:	eb01 0481 	add.w	r4, r1, r1, lsl #2
   116d2:	4602      	mov	r2, r0
   116d4:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
   116d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
   116dc:	2909      	cmp	r1, #9
   116de:	7010      	strb	r0, [r2, #0]
   116e0:	460b      	mov	r3, r1
   116e2:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
   116e6:	dcec      	bgt.n	116c2 <_svfprintf_r+0x13fa>
   116e8:	f101 0330 	add.w	r3, r1, #48	; 0x30
   116ec:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
   116f0:	b2d9      	uxtb	r1, r3
   116f2:	4284      	cmp	r4, r0
   116f4:	f802 1c01 	strb.w	r1, [r2, #-1]
   116f8:	d95a      	bls.n	117b0 <_svfprintf_r+0x14e8>
   116fa:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
   116fe:	4613      	mov	r3, r2
   11700:	e001      	b.n	11706 <_svfprintf_r+0x143e>
   11702:	f813 1b01 	ldrb.w	r1, [r3], #1
   11706:	42a3      	cmp	r3, r4
   11708:	f800 1f01 	strb.w	r1, [r0, #1]!
   1170c:	d1f9      	bne.n	11702 <_svfprintf_r+0x143a>
   1170e:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
   11712:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
   11716:	3bf6      	subs	r3, #246	; 0xf6
   11718:	e772      	b.n	11600 <_svfprintf_r+0x1338>
   1171a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1171c:	1c6c      	adds	r4, r5, #1
   1171e:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11720:	442c      	add	r4, r5
   11722:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   11726:	e665      	b.n	113f4 <_svfprintf_r+0x112c>
   11728:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   1172c:	2200      	movs	r2, #0
   1172e:	2300      	movs	r3, #0
   11730:	f7fc f81c 	bl	d76c <__aeabi_dcmpeq>
   11734:	2800      	cmp	r0, #0
   11736:	f47f af4a 	bne.w	115ce <_svfprintf_r+0x1306>
   1173a:	f1c5 0501 	rsb	r5, r5, #1
   1173e:	9525      	str	r5, [sp, #148]	; 0x94
   11740:	442c      	add	r4, r5
   11742:	e624      	b.n	1138e <_svfprintf_r+0x10c6>
   11744:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11746:	1c6c      	adds	r4, r5, #1
   11748:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   1174c:	f04f 0867 	mov.w	r8, #103	; 0x67
   11750:	e650      	b.n	113f4 <_svfprintf_r+0x112c>
   11752:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11754:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   11758:	682d      	ldr	r5, [r5, #0]
   1175a:	f899 8001 	ldrb.w	r8, [r9, #1]
   1175e:	950a      	str	r5, [sp, #40]	; 0x28
   11760:	f10c 0304 	add.w	r3, ip, #4
   11764:	2d00      	cmp	r5, #0
   11766:	9310      	str	r3, [sp, #64]	; 0x40
   11768:	4681      	mov	r9, r0
   1176a:	f6be ae09 	bge.w	10380 <_svfprintf_r+0xb8>
   1176e:	f7fe be04 	b.w	1037a <_svfprintf_r+0xb2>
   11772:	b97c      	cbnz	r4, 11794 <_svfprintf_r+0x14cc>
   11774:	9d09      	ldr	r5, [sp, #36]	; 0x24
   11776:	07e9      	lsls	r1, r5, #31
   11778:	d40c      	bmi.n	11794 <_svfprintf_r+0x14cc>
   1177a:	2301      	movs	r3, #1
   1177c:	461c      	mov	r4, r3
   1177e:	e639      	b.n	113f4 <_svfprintf_r+0x112c>
   11780:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   11784:	f01c 0301 	ands.w	r3, ip, #1
   11788:	f47f af43 	bne.w	11612 <_svfprintf_r+0x134a>
   1178c:	9314      	str	r3, [sp, #80]	; 0x50
   1178e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   11792:	e62f      	b.n	113f4 <_svfprintf_r+0x112c>
   11794:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11796:	1cac      	adds	r4, r5, #2
   11798:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   1179c:	e62a      	b.n	113f4 <_svfprintf_r+0x112c>
   1179e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   117a0:	230c      	movs	r3, #12
   117a2:	602b      	str	r3, [r5, #0]
   117a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   117a8:	f7fe beae 	b.w	10508 <_svfprintf_r+0x240>
   117ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   117ae:	e713      	b.n	115d8 <_svfprintf_r+0x1310>
   117b0:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
   117b4:	e724      	b.n	11600 <_svfprintf_r+0x1338>
   117b6:	bf00      	nop
   117b8:	00015968 	.word	0x00015968
   117bc:	66666667 	.word	0x66666667

000117c0 <_vdprintf_r>:
   117c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   117c2:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   117c6:	ad04      	add	r5, sp, #16
   117c8:	9300      	str	r3, [sp, #0]
   117ca:	f44f 7400 	mov.w	r4, #512	; 0x200
   117ce:	4613      	mov	r3, r2
   117d0:	460f      	mov	r7, r1
   117d2:	aa03      	add	r2, sp, #12
   117d4:	4629      	mov	r1, r5
   117d6:	9403      	str	r4, [sp, #12]
   117d8:	4606      	mov	r6, r0
   117da:	f001 ffe3 	bl	137a4 <_vasnprintf_r>
   117de:	4604      	mov	r4, r0
   117e0:	b180      	cbz	r0, 11804 <_vdprintf_r+0x44>
   117e2:	4639      	mov	r1, r7
   117e4:	4630      	mov	r0, r6
   117e6:	4622      	mov	r2, r4
   117e8:	9b03      	ldr	r3, [sp, #12]
   117ea:	f000 f86f 	bl	118cc <_write_r>
   117ee:	42ac      	cmp	r4, r5
   117f0:	9003      	str	r0, [sp, #12]
   117f2:	d004      	beq.n	117fe <_vdprintf_r+0x3e>
   117f4:	4630      	mov	r0, r6
   117f6:	4621      	mov	r1, r4
   117f8:	f001 faa0 	bl	12d3c <_free_r>
   117fc:	9803      	ldr	r0, [sp, #12]
   117fe:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   11802:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11808:	e7f9      	b.n	117fe <_vdprintf_r+0x3e>
   1180a:	bf00      	nop

0001180c <vdprintf>:
   1180c:	b430      	push	{r4, r5}
   1180e:	4c04      	ldr	r4, [pc, #16]	; (11820 <vdprintf+0x14>)
   11810:	460d      	mov	r5, r1
   11812:	4613      	mov	r3, r2
   11814:	4601      	mov	r1, r0
   11816:	462a      	mov	r2, r5
   11818:	6820      	ldr	r0, [r4, #0]
   1181a:	bc30      	pop	{r4, r5}
   1181c:	f7ff bfd0 	b.w	117c0 <_vdprintf_r>
   11820:	1fff88f0 	.word	0x1fff88f0

00011824 <__swbuf_r>:
   11824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11826:	460d      	mov	r5, r1
   11828:	4614      	mov	r4, r2
   1182a:	4607      	mov	r7, r0
   1182c:	b110      	cbz	r0, 11834 <__swbuf_r+0x10>
   1182e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   11830:	2b00      	cmp	r3, #0
   11832:	d048      	beq.n	118c6 <__swbuf_r+0xa2>
   11834:	89a2      	ldrh	r2, [r4, #12]
   11836:	69a3      	ldr	r3, [r4, #24]
   11838:	60a3      	str	r3, [r4, #8]
   1183a:	b293      	uxth	r3, r2
   1183c:	0718      	lsls	r0, r3, #28
   1183e:	d538      	bpl.n	118b2 <__swbuf_r+0x8e>
   11840:	6926      	ldr	r6, [r4, #16]
   11842:	2e00      	cmp	r6, #0
   11844:	d035      	beq.n	118b2 <__swbuf_r+0x8e>
   11846:	0499      	lsls	r1, r3, #18
   11848:	b2ed      	uxtb	r5, r5
   1184a:	d515      	bpl.n	11878 <__swbuf_r+0x54>
   1184c:	6823      	ldr	r3, [r4, #0]
   1184e:	6962      	ldr	r2, [r4, #20]
   11850:	1b9e      	subs	r6, r3, r6
   11852:	4296      	cmp	r6, r2
   11854:	da1c      	bge.n	11890 <__swbuf_r+0x6c>
   11856:	3601      	adds	r6, #1
   11858:	68a2      	ldr	r2, [r4, #8]
   1185a:	1c59      	adds	r1, r3, #1
   1185c:	3a01      	subs	r2, #1
   1185e:	60a2      	str	r2, [r4, #8]
   11860:	6021      	str	r1, [r4, #0]
   11862:	701d      	strb	r5, [r3, #0]
   11864:	6963      	ldr	r3, [r4, #20]
   11866:	42b3      	cmp	r3, r6
   11868:	d01a      	beq.n	118a0 <__swbuf_r+0x7c>
   1186a:	89a3      	ldrh	r3, [r4, #12]
   1186c:	07db      	lsls	r3, r3, #31
   1186e:	d501      	bpl.n	11874 <__swbuf_r+0x50>
   11870:	2d0a      	cmp	r5, #10
   11872:	d015      	beq.n	118a0 <__swbuf_r+0x7c>
   11874:	4628      	mov	r0, r5
   11876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11878:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1187a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1187e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   11882:	6663      	str	r3, [r4, #100]	; 0x64
   11884:	6823      	ldr	r3, [r4, #0]
   11886:	81a2      	strh	r2, [r4, #12]
   11888:	6962      	ldr	r2, [r4, #20]
   1188a:	1b9e      	subs	r6, r3, r6
   1188c:	4296      	cmp	r6, r2
   1188e:	dbe2      	blt.n	11856 <__swbuf_r+0x32>
   11890:	4638      	mov	r0, r7
   11892:	4621      	mov	r1, r4
   11894:	f001 f952 	bl	12b3c <_fflush_r>
   11898:	b940      	cbnz	r0, 118ac <__swbuf_r+0x88>
   1189a:	6823      	ldr	r3, [r4, #0]
   1189c:	2601      	movs	r6, #1
   1189e:	e7db      	b.n	11858 <__swbuf_r+0x34>
   118a0:	4638      	mov	r0, r7
   118a2:	4621      	mov	r1, r4
   118a4:	f001 f94a 	bl	12b3c <_fflush_r>
   118a8:	2800      	cmp	r0, #0
   118aa:	d0e3      	beq.n	11874 <__swbuf_r+0x50>
   118ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   118b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118b2:	4638      	mov	r0, r7
   118b4:	4621      	mov	r1, r4
   118b6:	f000 f81d 	bl	118f4 <__swsetup_r>
   118ba:	2800      	cmp	r0, #0
   118bc:	d1f6      	bne.n	118ac <__swbuf_r+0x88>
   118be:	89a2      	ldrh	r2, [r4, #12]
   118c0:	6926      	ldr	r6, [r4, #16]
   118c2:	b293      	uxth	r3, r2
   118c4:	e7bf      	b.n	11846 <__swbuf_r+0x22>
   118c6:	f001 f955 	bl	12b74 <__sinit>
   118ca:	e7b3      	b.n	11834 <__swbuf_r+0x10>

000118cc <_write_r>:
   118cc:	b570      	push	{r4, r5, r6, lr}
   118ce:	4c08      	ldr	r4, [pc, #32]	; (118f0 <_write_r+0x24>)
   118d0:	4606      	mov	r6, r0
   118d2:	2500      	movs	r5, #0
   118d4:	4608      	mov	r0, r1
   118d6:	4611      	mov	r1, r2
   118d8:	461a      	mov	r2, r3
   118da:	6025      	str	r5, [r4, #0]
   118dc:	f7f2 f98a 	bl	3bf4 <_write>
   118e0:	1c43      	adds	r3, r0, #1
   118e2:	d000      	beq.n	118e6 <_write_r+0x1a>
   118e4:	bd70      	pop	{r4, r5, r6, pc}
   118e6:	6823      	ldr	r3, [r4, #0]
   118e8:	2b00      	cmp	r3, #0
   118ea:	d0fb      	beq.n	118e4 <_write_r+0x18>
   118ec:	6033      	str	r3, [r6, #0]
   118ee:	bd70      	pop	{r4, r5, r6, pc}
   118f0:	1fff9c90 	.word	0x1fff9c90

000118f4 <__swsetup_r>:
   118f4:	4b2f      	ldr	r3, [pc, #188]	; (119b4 <__swsetup_r+0xc0>)
   118f6:	681b      	ldr	r3, [r3, #0]
   118f8:	b570      	push	{r4, r5, r6, lr}
   118fa:	4606      	mov	r6, r0
   118fc:	460c      	mov	r4, r1
   118fe:	b113      	cbz	r3, 11906 <__swsetup_r+0x12>
   11900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11902:	2a00      	cmp	r2, #0
   11904:	d036      	beq.n	11974 <__swsetup_r+0x80>
   11906:	89a5      	ldrh	r5, [r4, #12]
   11908:	b2ab      	uxth	r3, r5
   1190a:	0719      	lsls	r1, r3, #28
   1190c:	d50c      	bpl.n	11928 <__swsetup_r+0x34>
   1190e:	6922      	ldr	r2, [r4, #16]
   11910:	b1aa      	cbz	r2, 1193e <__swsetup_r+0x4a>
   11912:	f013 0101 	ands.w	r1, r3, #1
   11916:	d01e      	beq.n	11956 <__swsetup_r+0x62>
   11918:	6963      	ldr	r3, [r4, #20]
   1191a:	2100      	movs	r1, #0
   1191c:	425b      	negs	r3, r3
   1191e:	61a3      	str	r3, [r4, #24]
   11920:	60a1      	str	r1, [r4, #8]
   11922:	b1f2      	cbz	r2, 11962 <__swsetup_r+0x6e>
   11924:	2000      	movs	r0, #0
   11926:	bd70      	pop	{r4, r5, r6, pc}
   11928:	06da      	lsls	r2, r3, #27
   1192a:	d53b      	bpl.n	119a4 <__swsetup_r+0xb0>
   1192c:	075b      	lsls	r3, r3, #29
   1192e:	d425      	bmi.n	1197c <__swsetup_r+0x88>
   11930:	6922      	ldr	r2, [r4, #16]
   11932:	f045 0308 	orr.w	r3, r5, #8
   11936:	81a3      	strh	r3, [r4, #12]
   11938:	b29b      	uxth	r3, r3
   1193a:	2a00      	cmp	r2, #0
   1193c:	d1e9      	bne.n	11912 <__swsetup_r+0x1e>
   1193e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   11942:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   11946:	d0e4      	beq.n	11912 <__swsetup_r+0x1e>
   11948:	4630      	mov	r0, r6
   1194a:	4621      	mov	r1, r4
   1194c:	f001 faee 	bl	12f2c <__smakebuf_r>
   11950:	89a3      	ldrh	r3, [r4, #12]
   11952:	6922      	ldr	r2, [r4, #16]
   11954:	e7dd      	b.n	11912 <__swsetup_r+0x1e>
   11956:	0798      	lsls	r0, r3, #30
   11958:	bf58      	it	pl
   1195a:	6961      	ldrpl	r1, [r4, #20]
   1195c:	60a1      	str	r1, [r4, #8]
   1195e:	2a00      	cmp	r2, #0
   11960:	d1e0      	bne.n	11924 <__swsetup_r+0x30>
   11962:	89a3      	ldrh	r3, [r4, #12]
   11964:	061a      	lsls	r2, r3, #24
   11966:	d5dd      	bpl.n	11924 <__swsetup_r+0x30>
   11968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1196c:	81a3      	strh	r3, [r4, #12]
   1196e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11972:	bd70      	pop	{r4, r5, r6, pc}
   11974:	4618      	mov	r0, r3
   11976:	f001 f8fd 	bl	12b74 <__sinit>
   1197a:	e7c4      	b.n	11906 <__swsetup_r+0x12>
   1197c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1197e:	b149      	cbz	r1, 11994 <__swsetup_r+0xa0>
   11980:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11984:	4299      	cmp	r1, r3
   11986:	d003      	beq.n	11990 <__swsetup_r+0x9c>
   11988:	4630      	mov	r0, r6
   1198a:	f001 f9d7 	bl	12d3c <_free_r>
   1198e:	89a5      	ldrh	r5, [r4, #12]
   11990:	2300      	movs	r3, #0
   11992:	6323      	str	r3, [r4, #48]	; 0x30
   11994:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   11998:	2300      	movs	r3, #0
   1199a:	6922      	ldr	r2, [r4, #16]
   1199c:	6063      	str	r3, [r4, #4]
   1199e:	b2ad      	uxth	r5, r5
   119a0:	6022      	str	r2, [r4, #0]
   119a2:	e7c6      	b.n	11932 <__swsetup_r+0x3e>
   119a4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   119a8:	2309      	movs	r3, #9
   119aa:	6033      	str	r3, [r6, #0]
   119ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   119b0:	81a5      	strh	r5, [r4, #12]
   119b2:	bd70      	pop	{r4, r5, r6, pc}
   119b4:	1fff88f0 	.word	0x1fff88f0

000119b8 <__register_exitproc>:
   119b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   119ba:	4c27      	ldr	r4, [pc, #156]	; (11a58 <__register_exitproc+0xa0>)
   119bc:	6826      	ldr	r6, [r4, #0]
   119be:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   119c2:	b085      	sub	sp, #20
   119c4:	4607      	mov	r7, r0
   119c6:	2c00      	cmp	r4, #0
   119c8:	d041      	beq.n	11a4e <__register_exitproc+0x96>
   119ca:	6865      	ldr	r5, [r4, #4]
   119cc:	2d1f      	cmp	r5, #31
   119ce:	dd1e      	ble.n	11a0e <__register_exitproc+0x56>
   119d0:	4822      	ldr	r0, [pc, #136]	; (11a5c <__register_exitproc+0xa4>)
   119d2:	b918      	cbnz	r0, 119dc <__register_exitproc+0x24>
   119d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   119d8:	b005      	add	sp, #20
   119da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   119e0:	9103      	str	r1, [sp, #12]
   119e2:	9202      	str	r2, [sp, #8]
   119e4:	9301      	str	r3, [sp, #4]
   119e6:	f7fd fbfb 	bl	f1e0 <malloc>
   119ea:	9903      	ldr	r1, [sp, #12]
   119ec:	9a02      	ldr	r2, [sp, #8]
   119ee:	9b01      	ldr	r3, [sp, #4]
   119f0:	4604      	mov	r4, r0
   119f2:	2800      	cmp	r0, #0
   119f4:	d0ee      	beq.n	119d4 <__register_exitproc+0x1c>
   119f6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   119fa:	6025      	str	r5, [r4, #0]
   119fc:	2000      	movs	r0, #0
   119fe:	6060      	str	r0, [r4, #4]
   11a00:	4605      	mov	r5, r0
   11a02:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   11a06:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   11a0a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   11a0e:	b93f      	cbnz	r7, 11a20 <__register_exitproc+0x68>
   11a10:	1cab      	adds	r3, r5, #2
   11a12:	2000      	movs	r0, #0
   11a14:	3501      	adds	r5, #1
   11a16:	6065      	str	r5, [r4, #4]
   11a18:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   11a1c:	b005      	add	sp, #20
   11a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a20:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   11a24:	f04f 0c01 	mov.w	ip, #1
   11a28:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   11a2c:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
   11a30:	fa0c f205 	lsl.w	r2, ip, r5
   11a34:	4316      	orrs	r6, r2
   11a36:	2f02      	cmp	r7, #2
   11a38:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
   11a3c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   11a40:	d1e6      	bne.n	11a10 <__register_exitproc+0x58>
   11a42:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   11a46:	431a      	orrs	r2, r3
   11a48:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   11a4c:	e7e0      	b.n	11a10 <__register_exitproc+0x58>
   11a4e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   11a52:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   11a56:	e7b8      	b.n	119ca <__register_exitproc+0x12>
   11a58:	0001591c 	.word	0x0001591c
   11a5c:	0000f1e1 	.word	0x0000f1e1

00011a60 <register_fini>:
   11a60:	4b02      	ldr	r3, [pc, #8]	; (11a6c <register_fini+0xc>)
   11a62:	b113      	cbz	r3, 11a6a <register_fini+0xa>
   11a64:	4802      	ldr	r0, [pc, #8]	; (11a70 <register_fini+0x10>)
   11a66:	f000 b805 	b.w	11a74 <atexit>
   11a6a:	4770      	bx	lr
   11a6c:	00000000 	.word	0x00000000
   11a70:	00012c71 	.word	0x00012c71

00011a74 <atexit>:
   11a74:	4601      	mov	r1, r0
   11a76:	2000      	movs	r0, #0
   11a78:	4602      	mov	r2, r0
   11a7a:	4603      	mov	r3, r0
   11a7c:	f7ff bf9c 	b.w	119b8 <__register_exitproc>

00011a80 <quorem>:
   11a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a84:	6903      	ldr	r3, [r0, #16]
   11a86:	690d      	ldr	r5, [r1, #16]
   11a88:	429d      	cmp	r5, r3
   11a8a:	b083      	sub	sp, #12
   11a8c:	4683      	mov	fp, r0
   11a8e:	f300 808b 	bgt.w	11ba8 <quorem+0x128>
   11a92:	3d01      	subs	r5, #1
   11a94:	f101 0414 	add.w	r4, r1, #20
   11a98:	f100 0a14 	add.w	sl, r0, #20
   11a9c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   11aa0:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   11aa4:	3201      	adds	r2, #1
   11aa6:	fbb3 f8f2 	udiv	r8, r3, r2
   11aaa:	00aa      	lsls	r2, r5, #2
   11aac:	4691      	mov	r9, r2
   11aae:	9200      	str	r2, [sp, #0]
   11ab0:	4452      	add	r2, sl
   11ab2:	44a1      	add	r9, r4
   11ab4:	9201      	str	r2, [sp, #4]
   11ab6:	f1b8 0f00 	cmp.w	r8, #0
   11aba:	d03d      	beq.n	11b38 <quorem+0xb8>
   11abc:	f04f 0e00 	mov.w	lr, #0
   11ac0:	4670      	mov	r0, lr
   11ac2:	4622      	mov	r2, r4
   11ac4:	4653      	mov	r3, sl
   11ac6:	468c      	mov	ip, r1
   11ac8:	f852 6b04 	ldr.w	r6, [r2], #4
   11acc:	6819      	ldr	r1, [r3, #0]
   11ace:	b2b7      	uxth	r7, r6
   11ad0:	0c36      	lsrs	r6, r6, #16
   11ad2:	fb07 ee08 	mla	lr, r7, r8, lr
   11ad6:	fb06 f608 	mul.w	r6, r6, r8
   11ada:	eb06 461e 	add.w	r6, r6, lr, lsr #16
   11ade:	fa1f f78e 	uxth.w	r7, lr
   11ae2:	1bc7      	subs	r7, r0, r7
   11ae4:	b2b0      	uxth	r0, r6
   11ae6:	fa17 f781 	uxtah	r7, r7, r1
   11aea:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
   11aee:	eb00 4027 	add.w	r0, r0, r7, asr #16
   11af2:	b2bf      	uxth	r7, r7
   11af4:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   11af8:	4591      	cmp	r9, r2
   11afa:	f843 7b04 	str.w	r7, [r3], #4
   11afe:	ea4f 4020 	mov.w	r0, r0, asr #16
   11b02:	ea4f 4e16 	mov.w	lr, r6, lsr #16
   11b06:	d2df      	bcs.n	11ac8 <quorem+0x48>
   11b08:	9a00      	ldr	r2, [sp, #0]
   11b0a:	f85a 3002 	ldr.w	r3, [sl, r2]
   11b0e:	4661      	mov	r1, ip
   11b10:	b993      	cbnz	r3, 11b38 <quorem+0xb8>
   11b12:	9a01      	ldr	r2, [sp, #4]
   11b14:	1f13      	subs	r3, r2, #4
   11b16:	459a      	cmp	sl, r3
   11b18:	d20c      	bcs.n	11b34 <quorem+0xb4>
   11b1a:	f852 3c04 	ldr.w	r3, [r2, #-4]
   11b1e:	b94b      	cbnz	r3, 11b34 <quorem+0xb4>
   11b20:	f1a2 0308 	sub.w	r3, r2, #8
   11b24:	e002      	b.n	11b2c <quorem+0xac>
   11b26:	681a      	ldr	r2, [r3, #0]
   11b28:	3b04      	subs	r3, #4
   11b2a:	b91a      	cbnz	r2, 11b34 <quorem+0xb4>
   11b2c:	459a      	cmp	sl, r3
   11b2e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   11b32:	d3f8      	bcc.n	11b26 <quorem+0xa6>
   11b34:	f8cb 5010 	str.w	r5, [fp, #16]
   11b38:	4658      	mov	r0, fp
   11b3a:	f001 fc85 	bl	13448 <__mcmp>
   11b3e:	2800      	cmp	r0, #0
   11b40:	db2e      	blt.n	11ba0 <quorem+0x120>
   11b42:	f108 0801 	add.w	r8, r8, #1
   11b46:	4653      	mov	r3, sl
   11b48:	2200      	movs	r2, #0
   11b4a:	f854 6b04 	ldr.w	r6, [r4], #4
   11b4e:	6818      	ldr	r0, [r3, #0]
   11b50:	b2b1      	uxth	r1, r6
   11b52:	1a52      	subs	r2, r2, r1
   11b54:	0c36      	lsrs	r6, r6, #16
   11b56:	fa12 f180 	uxtah	r1, r2, r0
   11b5a:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
   11b5e:	eb02 4221 	add.w	r2, r2, r1, asr #16
   11b62:	b289      	uxth	r1, r1
   11b64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   11b68:	45a1      	cmp	r9, r4
   11b6a:	f843 1b04 	str.w	r1, [r3], #4
   11b6e:	ea4f 4222 	mov.w	r2, r2, asr #16
   11b72:	d2ea      	bcs.n	11b4a <quorem+0xca>
   11b74:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   11b78:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
   11b7c:	b982      	cbnz	r2, 11ba0 <quorem+0x120>
   11b7e:	1f1a      	subs	r2, r3, #4
   11b80:	4592      	cmp	sl, r2
   11b82:	d20b      	bcs.n	11b9c <quorem+0x11c>
   11b84:	f853 2c04 	ldr.w	r2, [r3, #-4]
   11b88:	b942      	cbnz	r2, 11b9c <quorem+0x11c>
   11b8a:	3b08      	subs	r3, #8
   11b8c:	e002      	b.n	11b94 <quorem+0x114>
   11b8e:	681a      	ldr	r2, [r3, #0]
   11b90:	3b04      	subs	r3, #4
   11b92:	b91a      	cbnz	r2, 11b9c <quorem+0x11c>
   11b94:	459a      	cmp	sl, r3
   11b96:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   11b9a:	d3f8      	bcc.n	11b8e <quorem+0x10e>
   11b9c:	f8cb 5010 	str.w	r5, [fp, #16]
   11ba0:	4640      	mov	r0, r8
   11ba2:	b003      	add	sp, #12
   11ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba8:	2000      	movs	r0, #0
   11baa:	b003      	add	sp, #12
   11bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011bb0 <_dtoa_r>:
   11bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   11bb6:	b09b      	sub	sp, #108	; 0x6c
   11bb8:	4604      	mov	r4, r0
   11bba:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   11bbc:	4692      	mov	sl, r2
   11bbe:	469b      	mov	fp, r3
   11bc0:	b149      	cbz	r1, 11bd6 <_dtoa_r+0x26>
   11bc2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11bc4:	604b      	str	r3, [r1, #4]
   11bc6:	2201      	movs	r2, #1
   11bc8:	fa02 f303 	lsl.w	r3, r2, r3
   11bcc:	608b      	str	r3, [r1, #8]
   11bce:	f001 fa43 	bl	13058 <_Bfree>
   11bd2:	2300      	movs	r3, #0
   11bd4:	6423      	str	r3, [r4, #64]	; 0x40
   11bd6:	f1bb 0f00 	cmp.w	fp, #0
   11bda:	46d9      	mov	r9, fp
   11bdc:	db33      	blt.n	11c46 <_dtoa_r+0x96>
   11bde:	2300      	movs	r3, #0
   11be0:	602b      	str	r3, [r5, #0]
   11be2:	4ba5      	ldr	r3, [pc, #660]	; (11e78 <_dtoa_r+0x2c8>)
   11be4:	461a      	mov	r2, r3
   11be6:	ea09 0303 	and.w	r3, r9, r3
   11bea:	4293      	cmp	r3, r2
   11bec:	d014      	beq.n	11c18 <_dtoa_r+0x68>
   11bee:	4650      	mov	r0, sl
   11bf0:	4659      	mov	r1, fp
   11bf2:	2200      	movs	r2, #0
   11bf4:	2300      	movs	r3, #0
   11bf6:	f7fb fdb9 	bl	d76c <__aeabi_dcmpeq>
   11bfa:	4680      	mov	r8, r0
   11bfc:	b348      	cbz	r0, 11c52 <_dtoa_r+0xa2>
   11bfe:	9e26      	ldr	r6, [sp, #152]	; 0x98
   11c00:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   11c02:	2301      	movs	r3, #1
   11c04:	6033      	str	r3, [r6, #0]
   11c06:	2d00      	cmp	r5, #0
   11c08:	f000 80c9 	beq.w	11d9e <_dtoa_r+0x1ee>
   11c0c:	489b      	ldr	r0, [pc, #620]	; (11e7c <_dtoa_r+0x2cc>)
   11c0e:	6028      	str	r0, [r5, #0]
   11c10:	3801      	subs	r0, #1
   11c12:	b01b      	add	sp, #108	; 0x6c
   11c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c18:	9d26      	ldr	r5, [sp, #152]	; 0x98
   11c1a:	f242 730f 	movw	r3, #9999	; 0x270f
   11c1e:	602b      	str	r3, [r5, #0]
   11c20:	f1ba 0f00 	cmp.w	sl, #0
   11c24:	f000 80a4 	beq.w	11d70 <_dtoa_r+0x1c0>
   11c28:	4895      	ldr	r0, [pc, #596]	; (11e80 <_dtoa_r+0x2d0>)
   11c2a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   11c2c:	2e00      	cmp	r6, #0
   11c2e:	d0f0      	beq.n	11c12 <_dtoa_r+0x62>
   11c30:	78c3      	ldrb	r3, [r0, #3]
   11c32:	2b00      	cmp	r3, #0
   11c34:	f000 80b5 	beq.w	11da2 <_dtoa_r+0x1f2>
   11c38:	f100 0308 	add.w	r3, r0, #8
   11c3c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   11c3e:	602b      	str	r3, [r5, #0]
   11c40:	b01b      	add	sp, #108	; 0x6c
   11c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c46:	2301      	movs	r3, #1
   11c48:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
   11c4c:	602b      	str	r3, [r5, #0]
   11c4e:	46cb      	mov	fp, r9
   11c50:	e7c7      	b.n	11be2 <_dtoa_r+0x32>
   11c52:	aa19      	add	r2, sp, #100	; 0x64
   11c54:	ab18      	add	r3, sp, #96	; 0x60
   11c56:	e88d 000c 	stmia.w	sp, {r2, r3}
   11c5a:	4620      	mov	r0, r4
   11c5c:	4652      	mov	r2, sl
   11c5e:	465b      	mov	r3, fp
   11c60:	f001 fc80 	bl	13564 <__d2b>
   11c64:	ea5f 5519 	movs.w	r5, r9, lsr #20
   11c68:	900a      	str	r0, [sp, #40]	; 0x28
   11c6a:	f040 808a 	bne.w	11d82 <_dtoa_r+0x1d2>
   11c6e:	9f18      	ldr	r7, [sp, #96]	; 0x60
   11c70:	9d19      	ldr	r5, [sp, #100]	; 0x64
   11c72:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   11c76:	443d      	add	r5, r7
   11c78:	429d      	cmp	r5, r3
   11c7a:	f2c0 8294 	blt.w	121a6 <_dtoa_r+0x5f6>
   11c7e:	331f      	adds	r3, #31
   11c80:	f205 4212 	addw	r2, r5, #1042	; 0x412
   11c84:	1b5b      	subs	r3, r3, r5
   11c86:	fa09 f303 	lsl.w	r3, r9, r3
   11c8a:	fa2a f202 	lsr.w	r2, sl, r2
   11c8e:	ea43 0002 	orr.w	r0, r3, r2
   11c92:	f7fb fa8d 	bl	d1b0 <__aeabi_ui2d>
   11c96:	2601      	movs	r6, #1
   11c98:	3d01      	subs	r5, #1
   11c9a:	46b8      	mov	r8, r7
   11c9c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   11ca0:	9616      	str	r6, [sp, #88]	; 0x58
   11ca2:	2200      	movs	r2, #0
   11ca4:	4b77      	ldr	r3, [pc, #476]	; (11e84 <_dtoa_r+0x2d4>)
   11ca6:	f7fb f945 	bl	cf34 <__aeabi_dsub>
   11caa:	a36d      	add	r3, pc, #436	; (adr r3, 11e60 <_dtoa_r+0x2b0>)
   11cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cb0:	f7fb faf4 	bl	d29c <__aeabi_dmul>
   11cb4:	a36c      	add	r3, pc, #432	; (adr r3, 11e68 <_dtoa_r+0x2b8>)
   11cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cba:	f7fb f93d 	bl	cf38 <__adddf3>
   11cbe:	4606      	mov	r6, r0
   11cc0:	4628      	mov	r0, r5
   11cc2:	460f      	mov	r7, r1
   11cc4:	f7fb fa84 	bl	d1d0 <__aeabi_i2d>
   11cc8:	a369      	add	r3, pc, #420	; (adr r3, 11e70 <_dtoa_r+0x2c0>)
   11cca:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cce:	f7fb fae5 	bl	d29c <__aeabi_dmul>
   11cd2:	4602      	mov	r2, r0
   11cd4:	460b      	mov	r3, r1
   11cd6:	4630      	mov	r0, r6
   11cd8:	4639      	mov	r1, r7
   11cda:	f7fb f92d 	bl	cf38 <__adddf3>
   11cde:	4606      	mov	r6, r0
   11ce0:	460f      	mov	r7, r1
   11ce2:	f7fb fd75 	bl	d7d0 <__aeabi_d2iz>
   11ce6:	4639      	mov	r1, r7
   11ce8:	9007      	str	r0, [sp, #28]
   11cea:	2200      	movs	r2, #0
   11cec:	4630      	mov	r0, r6
   11cee:	2300      	movs	r3, #0
   11cf0:	f7fb fd46 	bl	d780 <__aeabi_dcmplt>
   11cf4:	2800      	cmp	r0, #0
   11cf6:	f040 8228 	bne.w	1214a <_dtoa_r+0x59a>
   11cfa:	9e07      	ldr	r6, [sp, #28]
   11cfc:	2e16      	cmp	r6, #22
   11cfe:	f200 8221 	bhi.w	12144 <_dtoa_r+0x594>
   11d02:	4b61      	ldr	r3, [pc, #388]	; (11e88 <_dtoa_r+0x2d8>)
   11d04:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   11d08:	e9d3 0100 	ldrd	r0, r1, [r3]
   11d0c:	4652      	mov	r2, sl
   11d0e:	465b      	mov	r3, fp
   11d10:	f7fb fd54 	bl	d7bc <__aeabi_dcmpgt>
   11d14:	2800      	cmp	r0, #0
   11d16:	f000 824b 	beq.w	121b0 <_dtoa_r+0x600>
   11d1a:	3e01      	subs	r6, #1
   11d1c:	9607      	str	r6, [sp, #28]
   11d1e:	2600      	movs	r6, #0
   11d20:	960e      	str	r6, [sp, #56]	; 0x38
   11d22:	ebc5 0508 	rsb	r5, r5, r8
   11d26:	3d01      	subs	r5, #1
   11d28:	9506      	str	r5, [sp, #24]
   11d2a:	f100 8225 	bmi.w	12178 <_dtoa_r+0x5c8>
   11d2e:	2500      	movs	r5, #0
   11d30:	9508      	str	r5, [sp, #32]
   11d32:	9e07      	ldr	r6, [sp, #28]
   11d34:	2e00      	cmp	r6, #0
   11d36:	f2c0 8216 	blt.w	12166 <_dtoa_r+0x5b6>
   11d3a:	9d06      	ldr	r5, [sp, #24]
   11d3c:	960d      	str	r6, [sp, #52]	; 0x34
   11d3e:	4435      	add	r5, r6
   11d40:	2600      	movs	r6, #0
   11d42:	9506      	str	r5, [sp, #24]
   11d44:	960c      	str	r6, [sp, #48]	; 0x30
   11d46:	9d24      	ldr	r5, [sp, #144]	; 0x90
   11d48:	2d09      	cmp	r5, #9
   11d4a:	d82c      	bhi.n	11da6 <_dtoa_r+0x1f6>
   11d4c:	2d05      	cmp	r5, #5
   11d4e:	bfc4      	itt	gt
   11d50:	3d04      	subgt	r5, #4
   11d52:	9524      	strgt	r5, [sp, #144]	; 0x90
   11d54:	9e24      	ldr	r6, [sp, #144]	; 0x90
   11d56:	f1a6 0302 	sub.w	r3, r6, #2
   11d5a:	bfcc      	ite	gt
   11d5c:	2500      	movgt	r5, #0
   11d5e:	2501      	movle	r5, #1
   11d60:	2b03      	cmp	r3, #3
   11d62:	d822      	bhi.n	11daa <_dtoa_r+0x1fa>
   11d64:	e8df f013 	tbh	[pc, r3, lsl #1]
   11d68:	029e03b7 	.word	0x029e03b7
   11d6c:	049a03c0 	.word	0x049a03c0
   11d70:	4a46      	ldr	r2, [pc, #280]	; (11e8c <_dtoa_r+0x2dc>)
   11d72:	4b43      	ldr	r3, [pc, #268]	; (11e80 <_dtoa_r+0x2d0>)
   11d74:	f3c9 0013 	ubfx	r0, r9, #0, #20
   11d78:	2800      	cmp	r0, #0
   11d7a:	bf0c      	ite	eq
   11d7c:	4610      	moveq	r0, r2
   11d7e:	4618      	movne	r0, r3
   11d80:	e753      	b.n	11c2a <_dtoa_r+0x7a>
   11d82:	f3cb 0313 	ubfx	r3, fp, #0, #20
   11d86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   11d8a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   11d8e:	4650      	mov	r0, sl
   11d90:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   11d94:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   11d98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   11d9c:	e781      	b.n	11ca2 <_dtoa_r+0xf2>
   11d9e:	483c      	ldr	r0, [pc, #240]	; (11e90 <_dtoa_r+0x2e0>)
   11da0:	e737      	b.n	11c12 <_dtoa_r+0x62>
   11da2:	1cc3      	adds	r3, r0, #3
   11da4:	e74a      	b.n	11c3c <_dtoa_r+0x8c>
   11da6:	2500      	movs	r5, #0
   11da8:	9524      	str	r5, [sp, #144]	; 0x90
   11daa:	2500      	movs	r5, #0
   11dac:	6465      	str	r5, [r4, #68]	; 0x44
   11dae:	4629      	mov	r1, r5
   11db0:	4620      	mov	r0, r4
   11db2:	f001 f92b 	bl	1300c <_Balloc>
   11db6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   11dba:	2601      	movs	r6, #1
   11dbc:	9009      	str	r0, [sp, #36]	; 0x24
   11dbe:	9525      	str	r5, [sp, #148]	; 0x94
   11dc0:	6420      	str	r0, [r4, #64]	; 0x40
   11dc2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   11dc6:	960b      	str	r6, [sp, #44]	; 0x2c
   11dc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11dca:	2b00      	cmp	r3, #0
   11dcc:	f2c0 80d2 	blt.w	11f74 <_dtoa_r+0x3c4>
   11dd0:	9e07      	ldr	r6, [sp, #28]
   11dd2:	2e0e      	cmp	r6, #14
   11dd4:	f300 80ce 	bgt.w	11f74 <_dtoa_r+0x3c4>
   11dd8:	4b2b      	ldr	r3, [pc, #172]	; (11e88 <_dtoa_r+0x2d8>)
   11dda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   11dde:	e9d3 0100 	ldrd	r0, r1, [r3]
   11de2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11de6:	9925      	ldr	r1, [sp, #148]	; 0x94
   11de8:	2900      	cmp	r1, #0
   11dea:	f2c0 8380 	blt.w	124ee <_dtoa_r+0x93e>
   11dee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11df2:	4659      	mov	r1, fp
   11df4:	4650      	mov	r0, sl
   11df6:	f7fb fb7b 	bl	d4f0 <__aeabi_ddiv>
   11dfa:	f7fb fce9 	bl	d7d0 <__aeabi_d2iz>
   11dfe:	4605      	mov	r5, r0
   11e00:	f7fb f9e6 	bl	d1d0 <__aeabi_i2d>
   11e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11e08:	f7fb fa48 	bl	d29c <__aeabi_dmul>
   11e0c:	4602      	mov	r2, r0
   11e0e:	460b      	mov	r3, r1
   11e10:	4650      	mov	r0, sl
   11e12:	4659      	mov	r1, fp
   11e14:	f7fb f88e 	bl	cf34 <__aeabi_dsub>
   11e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11e1a:	f105 0330 	add.w	r3, r5, #48	; 0x30
   11e1e:	f1b9 0f01 	cmp.w	r9, #1
   11e22:	4606      	mov	r6, r0
   11e24:	460f      	mov	r7, r1
   11e26:	7013      	strb	r3, [r2, #0]
   11e28:	f102 0b01 	add.w	fp, r2, #1
   11e2c:	d064      	beq.n	11ef8 <_dtoa_r+0x348>
   11e2e:	2200      	movs	r2, #0
   11e30:	4b18      	ldr	r3, [pc, #96]	; (11e94 <_dtoa_r+0x2e4>)
   11e32:	f7fb fa33 	bl	d29c <__aeabi_dmul>
   11e36:	2200      	movs	r2, #0
   11e38:	2300      	movs	r3, #0
   11e3a:	4606      	mov	r6, r0
   11e3c:	460f      	mov	r7, r1
   11e3e:	f7fb fc95 	bl	d76c <__aeabi_dcmpeq>
   11e42:	2800      	cmp	r0, #0
   11e44:	f040 8081 	bne.w	11f4a <_dtoa_r+0x39a>
   11e48:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   11e4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   11e4e:	9403      	str	r4, [sp, #12]
   11e50:	44c8      	add	r8, r9
   11e52:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   11e56:	f105 0902 	add.w	r9, r5, #2
   11e5a:	e028      	b.n	11eae <_dtoa_r+0x2fe>
   11e5c:	f3af 8000 	nop.w
   11e60:	636f4361 	.word	0x636f4361
   11e64:	3fd287a7 	.word	0x3fd287a7
   11e68:	8b60c8b3 	.word	0x8b60c8b3
   11e6c:	3fc68a28 	.word	0x3fc68a28
   11e70:	509f79fb 	.word	0x509f79fb
   11e74:	3fd34413 	.word	0x3fd34413
   11e78:	7ff00000 	.word	0x7ff00000
   11e7c:	00015971 	.word	0x00015971
   11e80:	00015990 	.word	0x00015990
   11e84:	3ff80000 	.word	0x3ff80000
   11e88:	000159a0 	.word	0x000159a0
   11e8c:	00015984 	.word	0x00015984
   11e90:	00015970 	.word	0x00015970
   11e94:	40240000 	.word	0x40240000
   11e98:	f7fb fa00 	bl	d29c <__aeabi_dmul>
   11e9c:	2200      	movs	r2, #0
   11e9e:	2300      	movs	r3, #0
   11ea0:	4606      	mov	r6, r0
   11ea2:	460f      	mov	r7, r1
   11ea4:	f7fb fc62 	bl	d76c <__aeabi_dcmpeq>
   11ea8:	2800      	cmp	r0, #0
   11eaa:	f040 83c1 	bne.w	12630 <_dtoa_r+0xa80>
   11eae:	4652      	mov	r2, sl
   11eb0:	465b      	mov	r3, fp
   11eb2:	4630      	mov	r0, r6
   11eb4:	4639      	mov	r1, r7
   11eb6:	f7fb fb1b 	bl	d4f0 <__aeabi_ddiv>
   11eba:	f7fb fc89 	bl	d7d0 <__aeabi_d2iz>
   11ebe:	4605      	mov	r5, r0
   11ec0:	f7fb f986 	bl	d1d0 <__aeabi_i2d>
   11ec4:	4652      	mov	r2, sl
   11ec6:	465b      	mov	r3, fp
   11ec8:	f7fb f9e8 	bl	d29c <__aeabi_dmul>
   11ecc:	4602      	mov	r2, r0
   11ece:	460b      	mov	r3, r1
   11ed0:	4630      	mov	r0, r6
   11ed2:	4639      	mov	r1, r7
   11ed4:	f7fb f82e 	bl	cf34 <__aeabi_dsub>
   11ed8:	f105 0e30 	add.w	lr, r5, #48	; 0x30
   11edc:	45c1      	cmp	r9, r8
   11ede:	f809 ec01 	strb.w	lr, [r9, #-1]
   11ee2:	464c      	mov	r4, r9
   11ee4:	4606      	mov	r6, r0
   11ee6:	460f      	mov	r7, r1
   11ee8:	f04f 0200 	mov.w	r2, #0
   11eec:	4ba7      	ldr	r3, [pc, #668]	; (1218c <_dtoa_r+0x5dc>)
   11eee:	f109 0901 	add.w	r9, r9, #1
   11ef2:	d1d1      	bne.n	11e98 <_dtoa_r+0x2e8>
   11ef4:	46a3      	mov	fp, r4
   11ef6:	9c03      	ldr	r4, [sp, #12]
   11ef8:	4632      	mov	r2, r6
   11efa:	463b      	mov	r3, r7
   11efc:	4630      	mov	r0, r6
   11efe:	4639      	mov	r1, r7
   11f00:	f7fb f81a 	bl	cf38 <__adddf3>
   11f04:	4606      	mov	r6, r0
   11f06:	460f      	mov	r7, r1
   11f08:	4632      	mov	r2, r6
   11f0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11f0e:	463b      	mov	r3, r7
   11f10:	f7fb fc36 	bl	d780 <__aeabi_dcmplt>
   11f14:	b940      	cbnz	r0, 11f28 <_dtoa_r+0x378>
   11f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11f1a:	4632      	mov	r2, r6
   11f1c:	463b      	mov	r3, r7
   11f1e:	f7fb fc25 	bl	d76c <__aeabi_dcmpeq>
   11f22:	b190      	cbz	r0, 11f4a <_dtoa_r+0x39a>
   11f24:	07eb      	lsls	r3, r5, #31
   11f26:	d510      	bpl.n	11f4a <_dtoa_r+0x39a>
   11f28:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   11f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11f2e:	e005      	b.n	11f3c <_dtoa_r+0x38c>
   11f30:	429a      	cmp	r2, r3
   11f32:	f000 8428 	beq.w	12786 <_dtoa_r+0xbd6>
   11f36:	f813 5c01 	ldrb.w	r5, [r3, #-1]
   11f3a:	469b      	mov	fp, r3
   11f3c:	2d39      	cmp	r5, #57	; 0x39
   11f3e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   11f42:	d0f5      	beq.n	11f30 <_dtoa_r+0x380>
   11f44:	1c6a      	adds	r2, r5, #1
   11f46:	b2d2      	uxtb	r2, r2
   11f48:	701a      	strb	r2, [r3, #0]
   11f4a:	4620      	mov	r0, r4
   11f4c:	990a      	ldr	r1, [sp, #40]	; 0x28
   11f4e:	f001 f883 	bl	13058 <_Bfree>
   11f52:	9e07      	ldr	r6, [sp, #28]
   11f54:	9d26      	ldr	r5, [sp, #152]	; 0x98
   11f56:	1c73      	adds	r3, r6, #1
   11f58:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   11f5a:	2200      	movs	r2, #0
   11f5c:	f88b 2000 	strb.w	r2, [fp]
   11f60:	602b      	str	r3, [r5, #0]
   11f62:	2e00      	cmp	r6, #0
   11f64:	f000 8325 	beq.w	125b2 <_dtoa_r+0xa02>
   11f68:	9809      	ldr	r0, [sp, #36]	; 0x24
   11f6a:	f8c6 b000 	str.w	fp, [r6]
   11f6e:	b01b      	add	sp, #108	; 0x6c
   11f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11f76:	2d00      	cmp	r5, #0
   11f78:	f000 8103 	beq.w	12182 <_dtoa_r+0x5d2>
   11f7c:	9e24      	ldr	r6, [sp, #144]	; 0x90
   11f7e:	2e01      	cmp	r6, #1
   11f80:	f340 82dc 	ble.w	1253c <_dtoa_r+0x98c>
   11f84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11f86:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
   11f8a:	42be      	cmp	r6, r7
   11f8c:	f2c0 8389 	blt.w	126a2 <_dtoa_r+0xaf2>
   11f90:	1bf7      	subs	r7, r6, r7
   11f92:	f1b9 0f00 	cmp.w	r9, #0
   11f96:	f2c0 8486 	blt.w	128a6 <_dtoa_r+0xcf6>
   11f9a:	9d08      	ldr	r5, [sp, #32]
   11f9c:	464b      	mov	r3, r9
   11f9e:	9e08      	ldr	r6, [sp, #32]
   11fa0:	441e      	add	r6, r3
   11fa2:	9608      	str	r6, [sp, #32]
   11fa4:	9e06      	ldr	r6, [sp, #24]
   11fa6:	4620      	mov	r0, r4
   11fa8:	441e      	add	r6, r3
   11faa:	2101      	movs	r1, #1
   11fac:	9606      	str	r6, [sp, #24]
   11fae:	f001 f8f7 	bl	131a0 <__i2b>
   11fb2:	4606      	mov	r6, r0
   11fb4:	b165      	cbz	r5, 11fd0 <_dtoa_r+0x420>
   11fb6:	9806      	ldr	r0, [sp, #24]
   11fb8:	2800      	cmp	r0, #0
   11fba:	dd09      	ble.n	11fd0 <_dtoa_r+0x420>
   11fbc:	4603      	mov	r3, r0
   11fbe:	9908      	ldr	r1, [sp, #32]
   11fc0:	42ab      	cmp	r3, r5
   11fc2:	bfa8      	it	ge
   11fc4:	462b      	movge	r3, r5
   11fc6:	1ac9      	subs	r1, r1, r3
   11fc8:	1ac0      	subs	r0, r0, r3
   11fca:	9108      	str	r1, [sp, #32]
   11fcc:	1aed      	subs	r5, r5, r3
   11fce:	9006      	str	r0, [sp, #24]
   11fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11fd2:	2a00      	cmp	r2, #0
   11fd4:	dd1d      	ble.n	12012 <_dtoa_r+0x462>
   11fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11fd8:	2b00      	cmp	r3, #0
   11fda:	f000 8358 	beq.w	1268e <_dtoa_r+0xade>
   11fde:	2f00      	cmp	r7, #0
   11fe0:	dd11      	ble.n	12006 <_dtoa_r+0x456>
   11fe2:	4631      	mov	r1, r6
   11fe4:	463a      	mov	r2, r7
   11fe6:	4620      	mov	r0, r4
   11fe8:	f001 f982 	bl	132f0 <__pow5mult>
   11fec:	4606      	mov	r6, r0
   11fee:	4631      	mov	r1, r6
   11ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11ff2:	4620      	mov	r0, r4
   11ff4:	f001 f8de 	bl	131b4 <__multiply>
   11ff8:	990a      	ldr	r1, [sp, #40]	; 0x28
   11ffa:	4680      	mov	r8, r0
   11ffc:	4620      	mov	r0, r4
   11ffe:	f001 f82b 	bl	13058 <_Bfree>
   12002:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   12006:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   1200a:	ebbe 0207 	subs.w	r2, lr, r7
   1200e:	f040 828f 	bne.w	12530 <_dtoa_r+0x980>
   12012:	4620      	mov	r0, r4
   12014:	2101      	movs	r1, #1
   12016:	f001 f8c3 	bl	131a0 <__i2b>
   1201a:	4680      	mov	r8, r0
   1201c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1201e:	2800      	cmp	r0, #0
   12020:	dd05      	ble.n	1202e <_dtoa_r+0x47e>
   12022:	4641      	mov	r1, r8
   12024:	4620      	mov	r0, r4
   12026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12028:	f001 f962 	bl	132f0 <__pow5mult>
   1202c:	4680      	mov	r8, r0
   1202e:	9924      	ldr	r1, [sp, #144]	; 0x90
   12030:	2901      	cmp	r1, #1
   12032:	f340 82c1 	ble.w	125b8 <_dtoa_r+0xa08>
   12036:	2700      	movs	r7, #0
   12038:	980d      	ldr	r0, [sp, #52]	; 0x34
   1203a:	2800      	cmp	r0, #0
   1203c:	f040 82af 	bne.w	1259e <_dtoa_r+0x9ee>
   12040:	2001      	movs	r0, #1
   12042:	9b06      	ldr	r3, [sp, #24]
   12044:	4403      	add	r3, r0
   12046:	f013 031f 	ands.w	r3, r3, #31
   1204a:	f000 80a1 	beq.w	12190 <_dtoa_r+0x5e0>
   1204e:	f1c3 0220 	rsb	r2, r3, #32
   12052:	2a04      	cmp	r2, #4
   12054:	f340 84b5 	ble.w	129c2 <_dtoa_r+0xe12>
   12058:	9908      	ldr	r1, [sp, #32]
   1205a:	9a06      	ldr	r2, [sp, #24]
   1205c:	f1c3 031c 	rsb	r3, r3, #28
   12060:	4419      	add	r1, r3
   12062:	441a      	add	r2, r3
   12064:	9108      	str	r1, [sp, #32]
   12066:	441d      	add	r5, r3
   12068:	9206      	str	r2, [sp, #24]
   1206a:	9908      	ldr	r1, [sp, #32]
   1206c:	2900      	cmp	r1, #0
   1206e:	dd05      	ble.n	1207c <_dtoa_r+0x4cc>
   12070:	990a      	ldr	r1, [sp, #40]	; 0x28
   12072:	9a08      	ldr	r2, [sp, #32]
   12074:	4620      	mov	r0, r4
   12076:	f001 f989 	bl	1338c <__lshift>
   1207a:	900a      	str	r0, [sp, #40]	; 0x28
   1207c:	9a06      	ldr	r2, [sp, #24]
   1207e:	2a00      	cmp	r2, #0
   12080:	dd04      	ble.n	1208c <_dtoa_r+0x4dc>
   12082:	4641      	mov	r1, r8
   12084:	4620      	mov	r0, r4
   12086:	f001 f981 	bl	1338c <__lshift>
   1208a:	4680      	mov	r8, r0
   1208c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1208e:	2b00      	cmp	r3, #0
   12090:	f040 826a 	bne.w	12568 <_dtoa_r+0x9b8>
   12094:	f1b9 0f00 	cmp.w	r9, #0
   12098:	f340 82a6 	ble.w	125e8 <_dtoa_r+0xa38>
   1209c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1209e:	2800      	cmp	r0, #0
   120a0:	f040 8088 	bne.w	121b4 <_dtoa_r+0x604>
   120a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   120a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   120a8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   120ac:	e006      	b.n	120bc <_dtoa_r+0x50c>
   120ae:	4639      	mov	r1, r7
   120b0:	4620      	mov	r0, r4
   120b2:	220a      	movs	r2, #10
   120b4:	2300      	movs	r3, #0
   120b6:	f000 ffd9 	bl	1306c <__multadd>
   120ba:	4607      	mov	r7, r0
   120bc:	4638      	mov	r0, r7
   120be:	4641      	mov	r1, r8
   120c0:	f7ff fcde 	bl	11a80 <quorem>
   120c4:	3030      	adds	r0, #48	; 0x30
   120c6:	f80b 0005 	strb.w	r0, [fp, r5]
   120ca:	3501      	adds	r5, #1
   120cc:	45a9      	cmp	r9, r5
   120ce:	dcee      	bgt.n	120ae <_dtoa_r+0x4fe>
   120d0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   120d4:	970a      	str	r7, [sp, #40]	; 0x28
   120d6:	4682      	mov	sl, r0
   120d8:	f1b9 0f01 	cmp.w	r9, #1
   120dc:	bfac      	ite	ge
   120de:	44cb      	addge	fp, r9
   120e0:	f10b 0b01 	addlt.w	fp, fp, #1
   120e4:	2500      	movs	r5, #0
   120e6:	990a      	ldr	r1, [sp, #40]	; 0x28
   120e8:	2201      	movs	r2, #1
   120ea:	4620      	mov	r0, r4
   120ec:	f001 f94e 	bl	1338c <__lshift>
   120f0:	4641      	mov	r1, r8
   120f2:	900a      	str	r0, [sp, #40]	; 0x28
   120f4:	f001 f9a8 	bl	13448 <__mcmp>
   120f8:	2800      	cmp	r0, #0
   120fa:	f340 8309 	ble.w	12710 <_dtoa_r+0xb60>
   120fe:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   12102:	9909      	ldr	r1, [sp, #36]	; 0x24
   12104:	e005      	b.n	12112 <_dtoa_r+0x562>
   12106:	4299      	cmp	r1, r3
   12108:	f000 828b 	beq.w	12622 <_dtoa_r+0xa72>
   1210c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   12110:	469b      	mov	fp, r3
   12112:	2a39      	cmp	r2, #57	; 0x39
   12114:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   12118:	d0f5      	beq.n	12106 <_dtoa_r+0x556>
   1211a:	3201      	adds	r2, #1
   1211c:	701a      	strb	r2, [r3, #0]
   1211e:	4641      	mov	r1, r8
   12120:	4620      	mov	r0, r4
   12122:	f000 ff99 	bl	13058 <_Bfree>
   12126:	2e00      	cmp	r6, #0
   12128:	f43f af0f 	beq.w	11f4a <_dtoa_r+0x39a>
   1212c:	b12d      	cbz	r5, 1213a <_dtoa_r+0x58a>
   1212e:	42b5      	cmp	r5, r6
   12130:	d003      	beq.n	1213a <_dtoa_r+0x58a>
   12132:	4629      	mov	r1, r5
   12134:	4620      	mov	r0, r4
   12136:	f000 ff8f 	bl	13058 <_Bfree>
   1213a:	4631      	mov	r1, r6
   1213c:	4620      	mov	r0, r4
   1213e:	f000 ff8b 	bl	13058 <_Bfree>
   12142:	e702      	b.n	11f4a <_dtoa_r+0x39a>
   12144:	2601      	movs	r6, #1
   12146:	960e      	str	r6, [sp, #56]	; 0x38
   12148:	e5eb      	b.n	11d22 <_dtoa_r+0x172>
   1214a:	9807      	ldr	r0, [sp, #28]
   1214c:	f7fb f840 	bl	d1d0 <__aeabi_i2d>
   12150:	4632      	mov	r2, r6
   12152:	463b      	mov	r3, r7
   12154:	f7fb fb0a 	bl	d76c <__aeabi_dcmpeq>
   12158:	2800      	cmp	r0, #0
   1215a:	f47f adce 	bne.w	11cfa <_dtoa_r+0x14a>
   1215e:	9e07      	ldr	r6, [sp, #28]
   12160:	3e01      	subs	r6, #1
   12162:	9607      	str	r6, [sp, #28]
   12164:	e5c9      	b.n	11cfa <_dtoa_r+0x14a>
   12166:	9e07      	ldr	r6, [sp, #28]
   12168:	9d08      	ldr	r5, [sp, #32]
   1216a:	1bad      	subs	r5, r5, r6
   1216c:	9508      	str	r5, [sp, #32]
   1216e:	4275      	negs	r5, r6
   12170:	2600      	movs	r6, #0
   12172:	950c      	str	r5, [sp, #48]	; 0x30
   12174:	960d      	str	r6, [sp, #52]	; 0x34
   12176:	e5e6      	b.n	11d46 <_dtoa_r+0x196>
   12178:	426d      	negs	r5, r5
   1217a:	2600      	movs	r6, #0
   1217c:	9508      	str	r5, [sp, #32]
   1217e:	9606      	str	r6, [sp, #24]
   12180:	e5d7      	b.n	11d32 <_dtoa_r+0x182>
   12182:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   12184:	9d08      	ldr	r5, [sp, #32]
   12186:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12188:	e714      	b.n	11fb4 <_dtoa_r+0x404>
   1218a:	bf00      	nop
   1218c:	40240000 	.word	0x40240000
   12190:	231c      	movs	r3, #28
   12192:	f8dd e020 	ldr.w	lr, [sp, #32]
   12196:	9806      	ldr	r0, [sp, #24]
   12198:	449e      	add	lr, r3
   1219a:	4418      	add	r0, r3
   1219c:	f8cd e020 	str.w	lr, [sp, #32]
   121a0:	441d      	add	r5, r3
   121a2:	9006      	str	r0, [sp, #24]
   121a4:	e761      	b.n	1206a <_dtoa_r+0x4ba>
   121a6:	48a7      	ldr	r0, [pc, #668]	; (12444 <_dtoa_r+0x894>)
   121a8:	1b40      	subs	r0, r0, r5
   121aa:	fa0a f000 	lsl.w	r0, sl, r0
   121ae:	e570      	b.n	11c92 <_dtoa_r+0xe2>
   121b0:	900e      	str	r0, [sp, #56]	; 0x38
   121b2:	e5b6      	b.n	11d22 <_dtoa_r+0x172>
   121b4:	2d00      	cmp	r5, #0
   121b6:	dd05      	ble.n	121c4 <_dtoa_r+0x614>
   121b8:	4631      	mov	r1, r6
   121ba:	462a      	mov	r2, r5
   121bc:	4620      	mov	r0, r4
   121be:	f001 f8e5 	bl	1338c <__lshift>
   121c2:	4606      	mov	r6, r0
   121c4:	2f00      	cmp	r7, #0
   121c6:	f040 82e8 	bne.w	1279a <_dtoa_r+0xbea>
   121ca:	4637      	mov	r7, r6
   121cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   121ce:	9809      	ldr	r0, [sp, #36]	; 0x24
   121d0:	444d      	add	r5, r9
   121d2:	9508      	str	r5, [sp, #32]
   121d4:	f00a 0501 	and.w	r5, sl, #1
   121d8:	950b      	str	r5, [sp, #44]	; 0x2c
   121da:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   121de:	1c45      	adds	r5, r0, #1
   121e0:	e00a      	b.n	121f8 <_dtoa_r+0x648>
   121e2:	f000 ff43 	bl	1306c <__multadd>
   121e6:	4639      	mov	r1, r7
   121e8:	4606      	mov	r6, r0
   121ea:	220a      	movs	r2, #10
   121ec:	4620      	mov	r0, r4
   121ee:	2300      	movs	r3, #0
   121f0:	f000 ff3c 	bl	1306c <__multadd>
   121f4:	4607      	mov	r7, r0
   121f6:	3501      	adds	r5, #1
   121f8:	4641      	mov	r1, r8
   121fa:	4648      	mov	r0, r9
   121fc:	f7ff fc40 	bl	11a80 <quorem>
   12200:	4631      	mov	r1, r6
   12202:	4683      	mov	fp, r0
   12204:	4648      	mov	r0, r9
   12206:	f001 f91f 	bl	13448 <__mcmp>
   1220a:	4641      	mov	r1, r8
   1220c:	9003      	str	r0, [sp, #12]
   1220e:	463a      	mov	r2, r7
   12210:	4620      	mov	r0, r4
   12212:	f001 f93d 	bl	13490 <__mdiff>
   12216:	68c2      	ldr	r2, [r0, #12]
   12218:	1e69      	subs	r1, r5, #1
   1221a:	4603      	mov	r3, r0
   1221c:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
   12220:	9106      	str	r1, [sp, #24]
   12222:	2a00      	cmp	r2, #0
   12224:	f040 8193 	bne.w	1254e <_dtoa_r+0x99e>
   12228:	4619      	mov	r1, r3
   1222a:	4648      	mov	r0, r9
   1222c:	9302      	str	r3, [sp, #8]
   1222e:	f001 f90b 	bl	13448 <__mcmp>
   12232:	9b02      	ldr	r3, [sp, #8]
   12234:	4602      	mov	r2, r0
   12236:	4619      	mov	r1, r3
   12238:	4620      	mov	r0, r4
   1223a:	9202      	str	r2, [sp, #8]
   1223c:	f000 ff0c 	bl	13058 <_Bfree>
   12240:	9a02      	ldr	r2, [sp, #8]
   12242:	b92a      	cbnz	r2, 12250 <_dtoa_r+0x6a0>
   12244:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12246:	b91b      	cbnz	r3, 12250 <_dtoa_r+0x6a0>
   12248:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1224a:	2800      	cmp	r0, #0
   1224c:	f000 8391 	beq.w	12972 <_dtoa_r+0xdc2>
   12250:	9b03      	ldr	r3, [sp, #12]
   12252:	2b00      	cmp	r3, #0
   12254:	f2c0 8234 	blt.w	126c0 <_dtoa_r+0xb10>
   12258:	d105      	bne.n	12266 <_dtoa_r+0x6b6>
   1225a:	9824      	ldr	r0, [sp, #144]	; 0x90
   1225c:	b918      	cbnz	r0, 12266 <_dtoa_r+0x6b6>
   1225e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12260:	2900      	cmp	r1, #0
   12262:	f000 822d 	beq.w	126c0 <_dtoa_r+0xb10>
   12266:	2a00      	cmp	r2, #0
   12268:	f300 82ab 	bgt.w	127c2 <_dtoa_r+0xc12>
   1226c:	f8dd e020 	ldr.w	lr, [sp, #32]
   12270:	f805 ac01 	strb.w	sl, [r5, #-1]
   12274:	4575      	cmp	r5, lr
   12276:	46ab      	mov	fp, r5
   12278:	f000 82b3 	beq.w	127e2 <_dtoa_r+0xc32>
   1227c:	4649      	mov	r1, r9
   1227e:	220a      	movs	r2, #10
   12280:	2300      	movs	r3, #0
   12282:	4620      	mov	r0, r4
   12284:	f000 fef2 	bl	1306c <__multadd>
   12288:	42be      	cmp	r6, r7
   1228a:	4681      	mov	r9, r0
   1228c:	4631      	mov	r1, r6
   1228e:	4620      	mov	r0, r4
   12290:	f04f 020a 	mov.w	r2, #10
   12294:	f04f 0300 	mov.w	r3, #0
   12298:	d1a3      	bne.n	121e2 <_dtoa_r+0x632>
   1229a:	f000 fee7 	bl	1306c <__multadd>
   1229e:	4606      	mov	r6, r0
   122a0:	4607      	mov	r7, r0
   122a2:	e7a8      	b.n	121f6 <_dtoa_r+0x646>
   122a4:	2600      	movs	r6, #0
   122a6:	960b      	str	r6, [sp, #44]	; 0x2c
   122a8:	9e07      	ldr	r6, [sp, #28]
   122aa:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
   122ae:	44b6      	add	lr, r6
   122b0:	f10e 0901 	add.w	r9, lr, #1
   122b4:	f1b9 0f00 	cmp.w	r9, #0
   122b8:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
   122bc:	464e      	mov	r6, r9
   122be:	f340 8150 	ble.w	12562 <_dtoa_r+0x9b2>
   122c2:	2100      	movs	r1, #0
   122c4:	2e17      	cmp	r6, #23
   122c6:	6461      	str	r1, [r4, #68]	; 0x44
   122c8:	d90a      	bls.n	122e0 <_dtoa_r+0x730>
   122ca:	2201      	movs	r2, #1
   122cc:	2304      	movs	r3, #4
   122ce:	005b      	lsls	r3, r3, #1
   122d0:	f103 0014 	add.w	r0, r3, #20
   122d4:	42b0      	cmp	r0, r6
   122d6:	4611      	mov	r1, r2
   122d8:	f102 0201 	add.w	r2, r2, #1
   122dc:	d9f7      	bls.n	122ce <_dtoa_r+0x71e>
   122de:	6461      	str	r1, [r4, #68]	; 0x44
   122e0:	4620      	mov	r0, r4
   122e2:	f000 fe93 	bl	1300c <_Balloc>
   122e6:	2e0e      	cmp	r6, #14
   122e8:	9009      	str	r0, [sp, #36]	; 0x24
   122ea:	6420      	str	r0, [r4, #64]	; 0x40
   122ec:	f63f ad6c 	bhi.w	11dc8 <_dtoa_r+0x218>
   122f0:	2d00      	cmp	r5, #0
   122f2:	f43f ad69 	beq.w	11dc8 <_dtoa_r+0x218>
   122f6:	9d07      	ldr	r5, [sp, #28]
   122f8:	2d00      	cmp	r5, #0
   122fa:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
   122fe:	f340 821b 	ble.w	12738 <_dtoa_r+0xb88>
   12302:	4b51      	ldr	r3, [pc, #324]	; (12448 <_dtoa_r+0x898>)
   12304:	f005 020f 	and.w	r2, r5, #15
   12308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1230c:	112d      	asrs	r5, r5, #4
   1230e:	e9d3 6700 	ldrd	r6, r7, [r3]
   12312:	06eb      	lsls	r3, r5, #27
   12314:	f140 81cd 	bpl.w	126b2 <_dtoa_r+0xb02>
   12318:	4b4c      	ldr	r3, [pc, #304]	; (1244c <_dtoa_r+0x89c>)
   1231a:	4650      	mov	r0, sl
   1231c:	4659      	mov	r1, fp
   1231e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   12322:	f7fb f8e5 	bl	d4f0 <__aeabi_ddiv>
   12326:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1232a:	f005 050f 	and.w	r5, r5, #15
   1232e:	f04f 0803 	mov.w	r8, #3
   12332:	b18d      	cbz	r5, 12358 <_dtoa_r+0x7a8>
   12334:	f8df a114 	ldr.w	sl, [pc, #276]	; 1244c <_dtoa_r+0x89c>
   12338:	4630      	mov	r0, r6
   1233a:	4639      	mov	r1, r7
   1233c:	07ee      	lsls	r6, r5, #31
   1233e:	d505      	bpl.n	1234c <_dtoa_r+0x79c>
   12340:	e9da 2300 	ldrd	r2, r3, [sl]
   12344:	f108 0801 	add.w	r8, r8, #1
   12348:	f7fa ffa8 	bl	d29c <__aeabi_dmul>
   1234c:	106d      	asrs	r5, r5, #1
   1234e:	f10a 0a08 	add.w	sl, sl, #8
   12352:	d1f3      	bne.n	1233c <_dtoa_r+0x78c>
   12354:	4606      	mov	r6, r0
   12356:	460f      	mov	r7, r1
   12358:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1235c:	4632      	mov	r2, r6
   1235e:	463b      	mov	r3, r7
   12360:	f7fb f8c6 	bl	d4f0 <__aeabi_ddiv>
   12364:	4682      	mov	sl, r0
   12366:	468b      	mov	fp, r1
   12368:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1236a:	b145      	cbz	r5, 1237e <_dtoa_r+0x7ce>
   1236c:	4650      	mov	r0, sl
   1236e:	4659      	mov	r1, fp
   12370:	2200      	movs	r2, #0
   12372:	4b37      	ldr	r3, [pc, #220]	; (12450 <_dtoa_r+0x8a0>)
   12374:	f7fb fa04 	bl	d780 <__aeabi_dcmplt>
   12378:	2800      	cmp	r0, #0
   1237a:	f040 82a9 	bne.w	128d0 <_dtoa_r+0xd20>
   1237e:	4640      	mov	r0, r8
   12380:	f7fa ff26 	bl	d1d0 <__aeabi_i2d>
   12384:	4652      	mov	r2, sl
   12386:	465b      	mov	r3, fp
   12388:	f7fa ff88 	bl	d29c <__aeabi_dmul>
   1238c:	2200      	movs	r2, #0
   1238e:	4b31      	ldr	r3, [pc, #196]	; (12454 <_dtoa_r+0x8a4>)
   12390:	f7fa fdd2 	bl	cf38 <__adddf3>
   12394:	4606      	mov	r6, r0
   12396:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   1239a:	f1b9 0f00 	cmp.w	r9, #0
   1239e:	f000 815a 	beq.w	12656 <_dtoa_r+0xaa6>
   123a2:	9d07      	ldr	r5, [sp, #28]
   123a4:	9517      	str	r5, [sp, #92]	; 0x5c
   123a6:	46c8      	mov	r8, r9
   123a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   123aa:	2d00      	cmp	r5, #0
   123ac:	f000 8222 	beq.w	127f4 <_dtoa_r+0xc44>
   123b0:	4b25      	ldr	r3, [pc, #148]	; (12448 <_dtoa_r+0x898>)
   123b2:	4929      	ldr	r1, [pc, #164]	; (12458 <_dtoa_r+0x8a8>)
   123b4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   123b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   123bc:	2000      	movs	r0, #0
   123be:	f7fb f897 	bl	d4f0 <__aeabi_ddiv>
   123c2:	4632      	mov	r2, r6
   123c4:	463b      	mov	r3, r7
   123c6:	f7fa fdb5 	bl	cf34 <__aeabi_dsub>
   123ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   123ce:	4659      	mov	r1, fp
   123d0:	4650      	mov	r0, sl
   123d2:	f7fb f9fd 	bl	d7d0 <__aeabi_d2iz>
   123d6:	4605      	mov	r5, r0
   123d8:	f7fa fefa 	bl	d1d0 <__aeabi_i2d>
   123dc:	4602      	mov	r2, r0
   123de:	460b      	mov	r3, r1
   123e0:	4650      	mov	r0, sl
   123e2:	4659      	mov	r1, fp
   123e4:	f7fa fda6 	bl	cf34 <__aeabi_dsub>
   123e8:	3530      	adds	r5, #48	; 0x30
   123ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
   123ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
   123f0:	b2ed      	uxtb	r5, r5
   123f2:	7035      	strb	r5, [r6, #0]
   123f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   123f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   123fc:	f106 0b01 	add.w	fp, r6, #1
   12400:	f7fb f9dc 	bl	d7bc <__aeabi_dcmpgt>
   12404:	2800      	cmp	r0, #0
   12406:	f040 82a9 	bne.w	1295c <_dtoa_r+0xdac>
   1240a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1240e:	2000      	movs	r0, #0
   12410:	490f      	ldr	r1, [pc, #60]	; (12450 <_dtoa_r+0x8a0>)
   12412:	f7fa fd8f 	bl	cf34 <__aeabi_dsub>
   12416:	4602      	mov	r2, r0
   12418:	460b      	mov	r3, r1
   1241a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1241e:	f7fb f9cd 	bl	d7bc <__aeabi_dcmpgt>
   12422:	2800      	cmp	r0, #0
   12424:	f040 82a0 	bne.w	12968 <_dtoa_r+0xdb8>
   12428:	f1b8 0f01 	cmp.w	r8, #1
   1242c:	f340 8180 	ble.w	12730 <_dtoa_r+0xb80>
   12430:	44b0      	add	r8, r6
   12432:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   12436:	46a2      	mov	sl, r4
   12438:	46c1      	mov	r9, r8
   1243a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1243e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   12442:	e019      	b.n	12478 <_dtoa_r+0x8c8>
   12444:	fffffbee 	.word	0xfffffbee
   12448:	000159a0 	.word	0x000159a0
   1244c:	00015a68 	.word	0x00015a68
   12450:	3ff00000 	.word	0x3ff00000
   12454:	401c0000 	.word	0x401c0000
   12458:	3fe00000 	.word	0x3fe00000
   1245c:	2000      	movs	r0, #0
   1245e:	49a8      	ldr	r1, [pc, #672]	; (12700 <_dtoa_r+0xb50>)
   12460:	f7fa fd68 	bl	cf34 <__aeabi_dsub>
   12464:	4622      	mov	r2, r4
   12466:	462b      	mov	r3, r5
   12468:	f7fb f98a 	bl	d780 <__aeabi_dcmplt>
   1246c:	2800      	cmp	r0, #0
   1246e:	f040 8279 	bne.w	12964 <_dtoa_r+0xdb4>
   12472:	45cb      	cmp	fp, r9
   12474:	f000 8159 	beq.w	1272a <_dtoa_r+0xb7a>
   12478:	4620      	mov	r0, r4
   1247a:	4629      	mov	r1, r5
   1247c:	2200      	movs	r2, #0
   1247e:	4ba1      	ldr	r3, [pc, #644]	; (12704 <_dtoa_r+0xb54>)
   12480:	f7fa ff0c 	bl	d29c <__aeabi_dmul>
   12484:	2200      	movs	r2, #0
   12486:	4b9f      	ldr	r3, [pc, #636]	; (12704 <_dtoa_r+0xb54>)
   12488:	4604      	mov	r4, r0
   1248a:	460d      	mov	r5, r1
   1248c:	4630      	mov	r0, r6
   1248e:	4639      	mov	r1, r7
   12490:	f7fa ff04 	bl	d29c <__aeabi_dmul>
   12494:	460f      	mov	r7, r1
   12496:	4606      	mov	r6, r0
   12498:	f7fb f99a 	bl	d7d0 <__aeabi_d2iz>
   1249c:	4680      	mov	r8, r0
   1249e:	f7fa fe97 	bl	d1d0 <__aeabi_i2d>
   124a2:	4602      	mov	r2, r0
   124a4:	460b      	mov	r3, r1
   124a6:	4630      	mov	r0, r6
   124a8:	4639      	mov	r1, r7
   124aa:	f7fa fd43 	bl	cf34 <__aeabi_dsub>
   124ae:	f108 0830 	add.w	r8, r8, #48	; 0x30
   124b2:	fa5f f888 	uxtb.w	r8, r8
   124b6:	4622      	mov	r2, r4
   124b8:	462b      	mov	r3, r5
   124ba:	f80b 8b01 	strb.w	r8, [fp], #1
   124be:	4606      	mov	r6, r0
   124c0:	460f      	mov	r7, r1
   124c2:	f7fb f95d 	bl	d780 <__aeabi_dcmplt>
   124c6:	4632      	mov	r2, r6
   124c8:	463b      	mov	r3, r7
   124ca:	2800      	cmp	r0, #0
   124cc:	d0c6      	beq.n	1245c <_dtoa_r+0x8ac>
   124ce:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   124d0:	9607      	str	r6, [sp, #28]
   124d2:	4654      	mov	r4, sl
   124d4:	e539      	b.n	11f4a <_dtoa_r+0x39a>
   124d6:	2600      	movs	r6, #0
   124d8:	960b      	str	r6, [sp, #44]	; 0x2c
   124da:	9825      	ldr	r0, [sp, #148]	; 0x94
   124dc:	2800      	cmp	r0, #0
   124de:	dd3c      	ble.n	1255a <_dtoa_r+0x9aa>
   124e0:	4606      	mov	r6, r0
   124e2:	900f      	str	r0, [sp, #60]	; 0x3c
   124e4:	4681      	mov	r9, r0
   124e6:	e6ec      	b.n	122c2 <_dtoa_r+0x712>
   124e8:	2601      	movs	r6, #1
   124ea:	960b      	str	r6, [sp, #44]	; 0x2c
   124ec:	e7f5      	b.n	124da <_dtoa_r+0x92a>
   124ee:	f1b9 0f00 	cmp.w	r9, #0
   124f2:	f73f ac7c 	bgt.w	11dee <_dtoa_r+0x23e>
   124f6:	f040 80c6 	bne.w	12686 <_dtoa_r+0xad6>
   124fa:	2200      	movs	r2, #0
   124fc:	4b82      	ldr	r3, [pc, #520]	; (12708 <_dtoa_r+0xb58>)
   124fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   12502:	f7fa fecb 	bl	d29c <__aeabi_dmul>
   12506:	4652      	mov	r2, sl
   12508:	465b      	mov	r3, fp
   1250a:	f7fb f94d 	bl	d7a8 <__aeabi_dcmpge>
   1250e:	46c8      	mov	r8, r9
   12510:	464e      	mov	r6, r9
   12512:	2800      	cmp	r0, #0
   12514:	d07c      	beq.n	12610 <_dtoa_r+0xa60>
   12516:	9d25      	ldr	r5, [sp, #148]	; 0x94
   12518:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   1251c:	43ed      	mvns	r5, r5
   1251e:	9507      	str	r5, [sp, #28]
   12520:	4641      	mov	r1, r8
   12522:	4620      	mov	r0, r4
   12524:	f000 fd98 	bl	13058 <_Bfree>
   12528:	2e00      	cmp	r6, #0
   1252a:	f47f ae06 	bne.w	1213a <_dtoa_r+0x58a>
   1252e:	e50c      	b.n	11f4a <_dtoa_r+0x39a>
   12530:	990a      	ldr	r1, [sp, #40]	; 0x28
   12532:	4620      	mov	r0, r4
   12534:	f000 fedc 	bl	132f0 <__pow5mult>
   12538:	900a      	str	r0, [sp, #40]	; 0x28
   1253a:	e56a      	b.n	12012 <_dtoa_r+0x462>
   1253c:	9d16      	ldr	r5, [sp, #88]	; 0x58
   1253e:	2d00      	cmp	r5, #0
   12540:	f000 81b7 	beq.w	128b2 <_dtoa_r+0xd02>
   12544:	f203 4333 	addw	r3, r3, #1075	; 0x433
   12548:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1254a:	9d08      	ldr	r5, [sp, #32]
   1254c:	e527      	b.n	11f9e <_dtoa_r+0x3ee>
   1254e:	4601      	mov	r1, r0
   12550:	4620      	mov	r0, r4
   12552:	f000 fd81 	bl	13058 <_Bfree>
   12556:	2201      	movs	r2, #1
   12558:	e67a      	b.n	12250 <_dtoa_r+0x6a0>
   1255a:	2601      	movs	r6, #1
   1255c:	9625      	str	r6, [sp, #148]	; 0x94
   1255e:	960f      	str	r6, [sp, #60]	; 0x3c
   12560:	46b1      	mov	r9, r6
   12562:	2100      	movs	r1, #0
   12564:	6461      	str	r1, [r4, #68]	; 0x44
   12566:	e6bb      	b.n	122e0 <_dtoa_r+0x730>
   12568:	980a      	ldr	r0, [sp, #40]	; 0x28
   1256a:	4641      	mov	r1, r8
   1256c:	f000 ff6c 	bl	13448 <__mcmp>
   12570:	2800      	cmp	r0, #0
   12572:	f6bf ad8f 	bge.w	12094 <_dtoa_r+0x4e4>
   12576:	f8dd e01c 	ldr.w	lr, [sp, #28]
   1257a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1257c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   12580:	4620      	mov	r0, r4
   12582:	220a      	movs	r2, #10
   12584:	2300      	movs	r3, #0
   12586:	f8cd e01c 	str.w	lr, [sp, #28]
   1258a:	f000 fd6f 	bl	1306c <__multadd>
   1258e:	900a      	str	r0, [sp, #40]	; 0x28
   12590:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12592:	2800      	cmp	r0, #0
   12594:	f040 8207 	bne.w	129a6 <_dtoa_r+0xdf6>
   12598:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1259c:	e57a      	b.n	12094 <_dtoa_r+0x4e4>
   1259e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   125a2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   125a6:	6918      	ldr	r0, [r3, #16]
   125a8:	f000 fdac 	bl	13104 <__hi0bits>
   125ac:	f1c0 0020 	rsb	r0, r0, #32
   125b0:	e547      	b.n	12042 <_dtoa_r+0x492>
   125b2:	9809      	ldr	r0, [sp, #36]	; 0x24
   125b4:	f7ff bb2d 	b.w	11c12 <_dtoa_r+0x62>
   125b8:	f1ba 0f00 	cmp.w	sl, #0
   125bc:	f47f ad3b 	bne.w	12036 <_dtoa_r+0x486>
   125c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   125c4:	2b00      	cmp	r3, #0
   125c6:	f040 817b 	bne.w	128c0 <_dtoa_r+0xd10>
   125ca:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   125ce:	0d3f      	lsrs	r7, r7, #20
   125d0:	053f      	lsls	r7, r7, #20
   125d2:	2f00      	cmp	r7, #0
   125d4:	f43f ad30 	beq.w	12038 <_dtoa_r+0x488>
   125d8:	9a08      	ldr	r2, [sp, #32]
   125da:	9b06      	ldr	r3, [sp, #24]
   125dc:	3201      	adds	r2, #1
   125de:	3301      	adds	r3, #1
   125e0:	9208      	str	r2, [sp, #32]
   125e2:	9306      	str	r3, [sp, #24]
   125e4:	2701      	movs	r7, #1
   125e6:	e527      	b.n	12038 <_dtoa_r+0x488>
   125e8:	9924      	ldr	r1, [sp, #144]	; 0x90
   125ea:	2902      	cmp	r1, #2
   125ec:	f77f ad56 	ble.w	1209c <_dtoa_r+0x4ec>
   125f0:	f1b9 0f00 	cmp.w	r9, #0
   125f4:	d18f      	bne.n	12516 <_dtoa_r+0x966>
   125f6:	4641      	mov	r1, r8
   125f8:	464b      	mov	r3, r9
   125fa:	2205      	movs	r2, #5
   125fc:	4620      	mov	r0, r4
   125fe:	f000 fd35 	bl	1306c <__multadd>
   12602:	4680      	mov	r8, r0
   12604:	4641      	mov	r1, r8
   12606:	980a      	ldr	r0, [sp, #40]	; 0x28
   12608:	f000 ff1e 	bl	13448 <__mcmp>
   1260c:	2800      	cmp	r0, #0
   1260e:	dd82      	ble.n	12516 <_dtoa_r+0x966>
   12610:	9d07      	ldr	r5, [sp, #28]
   12612:	3501      	adds	r5, #1
   12614:	9507      	str	r5, [sp, #28]
   12616:	9d09      	ldr	r5, [sp, #36]	; 0x24
   12618:	2331      	movs	r3, #49	; 0x31
   1261a:	702b      	strb	r3, [r5, #0]
   1261c:	f105 0b01 	add.w	fp, r5, #1
   12620:	e77e      	b.n	12520 <_dtoa_r+0x970>
   12622:	9807      	ldr	r0, [sp, #28]
   12624:	9909      	ldr	r1, [sp, #36]	; 0x24
   12626:	2331      	movs	r3, #49	; 0x31
   12628:	3001      	adds	r0, #1
   1262a:	9007      	str	r0, [sp, #28]
   1262c:	700b      	strb	r3, [r1, #0]
   1262e:	e576      	b.n	1211e <_dtoa_r+0x56e>
   12630:	46a3      	mov	fp, r4
   12632:	9c03      	ldr	r4, [sp, #12]
   12634:	e489      	b.n	11f4a <_dtoa_r+0x39a>
   12636:	4640      	mov	r0, r8
   12638:	f7fa fdca 	bl	d1d0 <__aeabi_i2d>
   1263c:	4602      	mov	r2, r0
   1263e:	460b      	mov	r3, r1
   12640:	4650      	mov	r0, sl
   12642:	4659      	mov	r1, fp
   12644:	f7fa fe2a 	bl	d29c <__aeabi_dmul>
   12648:	2200      	movs	r2, #0
   1264a:	4b30      	ldr	r3, [pc, #192]	; (1270c <_dtoa_r+0xb5c>)
   1264c:	f7fa fc74 	bl	cf38 <__adddf3>
   12650:	4606      	mov	r6, r0
   12652:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   12656:	4650      	mov	r0, sl
   12658:	4659      	mov	r1, fp
   1265a:	2200      	movs	r2, #0
   1265c:	4b2a      	ldr	r3, [pc, #168]	; (12708 <_dtoa_r+0xb58>)
   1265e:	f7fa fc69 	bl	cf34 <__aeabi_dsub>
   12662:	4632      	mov	r2, r6
   12664:	463b      	mov	r3, r7
   12666:	4682      	mov	sl, r0
   12668:	468b      	mov	fp, r1
   1266a:	f7fb f8a7 	bl	d7bc <__aeabi_dcmpgt>
   1266e:	2800      	cmp	r0, #0
   12670:	f040 80bc 	bne.w	127ec <_dtoa_r+0xc3c>
   12674:	4632      	mov	r2, r6
   12676:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1267a:	4650      	mov	r0, sl
   1267c:	4659      	mov	r1, fp
   1267e:	f7fb f87f 	bl	d780 <__aeabi_dcmplt>
   12682:	2800      	cmp	r0, #0
   12684:	d054      	beq.n	12730 <_dtoa_r+0xb80>
   12686:	f04f 0800 	mov.w	r8, #0
   1268a:	4646      	mov	r6, r8
   1268c:	e743      	b.n	12516 <_dtoa_r+0x966>
   1268e:	990a      	ldr	r1, [sp, #40]	; 0x28
   12690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12692:	4620      	mov	r0, r4
   12694:	f000 fe2c 	bl	132f0 <__pow5mult>
   12698:	900a      	str	r0, [sp, #40]	; 0x28
   1269a:	e4ba      	b.n	12012 <_dtoa_r+0x462>
   1269c:	2601      	movs	r6, #1
   1269e:	960b      	str	r6, [sp, #44]	; 0x2c
   126a0:	e602      	b.n	122a8 <_dtoa_r+0x6f8>
   126a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   126a4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   126a6:	970c      	str	r7, [sp, #48]	; 0x30
   126a8:	1b7b      	subs	r3, r7, r5
   126aa:	441e      	add	r6, r3
   126ac:	960d      	str	r6, [sp, #52]	; 0x34
   126ae:	2700      	movs	r7, #0
   126b0:	e46f      	b.n	11f92 <_dtoa_r+0x3e2>
   126b2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   126b6:	f04f 0802 	mov.w	r8, #2
   126ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   126be:	e638      	b.n	12332 <_dtoa_r+0x782>
   126c0:	2a00      	cmp	r2, #0
   126c2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   126c6:	46d9      	mov	r9, fp
   126c8:	dd11      	ble.n	126ee <_dtoa_r+0xb3e>
   126ca:	990a      	ldr	r1, [sp, #40]	; 0x28
   126cc:	2201      	movs	r2, #1
   126ce:	4620      	mov	r0, r4
   126d0:	f000 fe5c 	bl	1338c <__lshift>
   126d4:	4641      	mov	r1, r8
   126d6:	900a      	str	r0, [sp, #40]	; 0x28
   126d8:	f000 feb6 	bl	13448 <__mcmp>
   126dc:	2800      	cmp	r0, #0
   126de:	f340 815b 	ble.w	12998 <_dtoa_r+0xde8>
   126e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   126e6:	f000 811a 	beq.w	1291e <_dtoa_r+0xd6e>
   126ea:	f109 0a31 	add.w	sl, r9, #49	; 0x31
   126ee:	9b06      	ldr	r3, [sp, #24]
   126f0:	4635      	mov	r5, r6
   126f2:	f883 a000 	strb.w	sl, [r3]
   126f6:	f103 0b01 	add.w	fp, r3, #1
   126fa:	463e      	mov	r6, r7
   126fc:	e50f      	b.n	1211e <_dtoa_r+0x56e>
   126fe:	bf00      	nop
   12700:	3ff00000 	.word	0x3ff00000
   12704:	40240000 	.word	0x40240000
   12708:	40140000 	.word	0x40140000
   1270c:	401c0000 	.word	0x401c0000
   12710:	d103      	bne.n	1271a <_dtoa_r+0xb6a>
   12712:	f01a 0f01 	tst.w	sl, #1
   12716:	f47f acf2 	bne.w	120fe <_dtoa_r+0x54e>
   1271a:	465b      	mov	r3, fp
   1271c:	469b      	mov	fp, r3
   1271e:	3b01      	subs	r3, #1
   12720:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   12724:	2a30      	cmp	r2, #48	; 0x30
   12726:	d0f9      	beq.n	1271c <_dtoa_r+0xb6c>
   12728:	e4f9      	b.n	1211e <_dtoa_r+0x56e>
   1272a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   1272e:	4654      	mov	r4, sl
   12730:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   12734:	f7ff bb48 	b.w	11dc8 <_dtoa_r+0x218>
   12738:	9e07      	ldr	r6, [sp, #28]
   1273a:	4275      	negs	r5, r6
   1273c:	2d00      	cmp	r5, #0
   1273e:	f000 80c2 	beq.w	128c6 <_dtoa_r+0xd16>
   12742:	4ba3      	ldr	r3, [pc, #652]	; (129d0 <_dtoa_r+0xe20>)
   12744:	f005 020f 	and.w	r2, r5, #15
   12748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1274c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12750:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   12754:	f7fa fda2 	bl	d29c <__aeabi_dmul>
   12758:	112d      	asrs	r5, r5, #4
   1275a:	4682      	mov	sl, r0
   1275c:	468b      	mov	fp, r1
   1275e:	f000 812d 	beq.w	129bc <_dtoa_r+0xe0c>
   12762:	4e9c      	ldr	r6, [pc, #624]	; (129d4 <_dtoa_r+0xe24>)
   12764:	f04f 0802 	mov.w	r8, #2
   12768:	07ea      	lsls	r2, r5, #31
   1276a:	d505      	bpl.n	12778 <_dtoa_r+0xbc8>
   1276c:	e9d6 2300 	ldrd	r2, r3, [r6]
   12770:	f108 0801 	add.w	r8, r8, #1
   12774:	f7fa fd92 	bl	d29c <__aeabi_dmul>
   12778:	106d      	asrs	r5, r5, #1
   1277a:	f106 0608 	add.w	r6, r6, #8
   1277e:	d1f3      	bne.n	12768 <_dtoa_r+0xbb8>
   12780:	4682      	mov	sl, r0
   12782:	468b      	mov	fp, r1
   12784:	e5f0      	b.n	12368 <_dtoa_r+0x7b8>
   12786:	9e07      	ldr	r6, [sp, #28]
   12788:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1278a:	2230      	movs	r2, #48	; 0x30
   1278c:	702a      	strb	r2, [r5, #0]
   1278e:	3601      	adds	r6, #1
   12790:	2231      	movs	r2, #49	; 0x31
   12792:	9607      	str	r6, [sp, #28]
   12794:	701a      	strb	r2, [r3, #0]
   12796:	f7ff bbd8 	b.w	11f4a <_dtoa_r+0x39a>
   1279a:	6871      	ldr	r1, [r6, #4]
   1279c:	4620      	mov	r0, r4
   1279e:	f000 fc35 	bl	1300c <_Balloc>
   127a2:	6933      	ldr	r3, [r6, #16]
   127a4:	1c9a      	adds	r2, r3, #2
   127a6:	4605      	mov	r5, r0
   127a8:	0092      	lsls	r2, r2, #2
   127aa:	f106 010c 	add.w	r1, r6, #12
   127ae:	300c      	adds	r0, #12
   127b0:	f7fd f83e 	bl	f830 <memcpy>
   127b4:	4620      	mov	r0, r4
   127b6:	4629      	mov	r1, r5
   127b8:	2201      	movs	r2, #1
   127ba:	f000 fde7 	bl	1338c <__lshift>
   127be:	4607      	mov	r7, r0
   127c0:	e504      	b.n	121cc <_dtoa_r+0x61c>
   127c2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   127c6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   127ca:	f000 80a8 	beq.w	1291e <_dtoa_r+0xd6e>
   127ce:	9d06      	ldr	r5, [sp, #24]
   127d0:	f10a 0301 	add.w	r3, sl, #1
   127d4:	702b      	strb	r3, [r5, #0]
   127d6:	4635      	mov	r5, r6
   127d8:	9e06      	ldr	r6, [sp, #24]
   127da:	f106 0b01 	add.w	fp, r6, #1
   127de:	463e      	mov	r6, r7
   127e0:	e49d      	b.n	1211e <_dtoa_r+0x56e>
   127e2:	4635      	mov	r5, r6
   127e4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   127e8:	463e      	mov	r6, r7
   127ea:	e47c      	b.n	120e6 <_dtoa_r+0x536>
   127ec:	f04f 0800 	mov.w	r8, #0
   127f0:	4646      	mov	r6, r8
   127f2:	e70d      	b.n	12610 <_dtoa_r+0xa60>
   127f4:	4976      	ldr	r1, [pc, #472]	; (129d0 <_dtoa_r+0xe20>)
   127f6:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   127fa:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   127fe:	4632      	mov	r2, r6
   12800:	463b      	mov	r3, r7
   12802:	e9d1 0100 	ldrd	r0, r1, [r1]
   12806:	9510      	str	r5, [sp, #64]	; 0x40
   12808:	f7fa fd48 	bl	d29c <__aeabi_dmul>
   1280c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   12810:	4659      	mov	r1, fp
   12812:	4650      	mov	r0, sl
   12814:	f7fa ffdc 	bl	d7d0 <__aeabi_d2iz>
   12818:	4605      	mov	r5, r0
   1281a:	f7fa fcd9 	bl	d1d0 <__aeabi_i2d>
   1281e:	4602      	mov	r2, r0
   12820:	460b      	mov	r3, r1
   12822:	4650      	mov	r0, sl
   12824:	4659      	mov	r1, fp
   12826:	f7fa fb85 	bl	cf34 <__aeabi_dsub>
   1282a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1282e:	3530      	adds	r5, #48	; 0x30
   12830:	f1b8 0f01 	cmp.w	r8, #1
   12834:	4606      	mov	r6, r0
   12836:	460f      	mov	r7, r1
   12838:	f88e 5000 	strb.w	r5, [lr]
   1283c:	f10e 0b01 	add.w	fp, lr, #1
   12840:	d01e      	beq.n	12880 <_dtoa_r+0xcd0>
   12842:	9d09      	ldr	r5, [sp, #36]	; 0x24
   12844:	1e6b      	subs	r3, r5, #1
   12846:	eb03 0a08 	add.w	sl, r3, r8
   1284a:	2200      	movs	r2, #0
   1284c:	4b62      	ldr	r3, [pc, #392]	; (129d8 <_dtoa_r+0xe28>)
   1284e:	f7fa fd25 	bl	d29c <__aeabi_dmul>
   12852:	460f      	mov	r7, r1
   12854:	4606      	mov	r6, r0
   12856:	f7fa ffbb 	bl	d7d0 <__aeabi_d2iz>
   1285a:	4680      	mov	r8, r0
   1285c:	f7fa fcb8 	bl	d1d0 <__aeabi_i2d>
   12860:	f108 0830 	add.w	r8, r8, #48	; 0x30
   12864:	4602      	mov	r2, r0
   12866:	460b      	mov	r3, r1
   12868:	4630      	mov	r0, r6
   1286a:	4639      	mov	r1, r7
   1286c:	f7fa fb62 	bl	cf34 <__aeabi_dsub>
   12870:	f805 8f01 	strb.w	r8, [r5, #1]!
   12874:	4555      	cmp	r5, sl
   12876:	d1e8      	bne.n	1284a <_dtoa_r+0xc9a>
   12878:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1287a:	4606      	mov	r6, r0
   1287c:	460f      	mov	r7, r1
   1287e:	44ab      	add	fp, r5
   12880:	2200      	movs	r2, #0
   12882:	4b56      	ldr	r3, [pc, #344]	; (129dc <_dtoa_r+0xe2c>)
   12884:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   12888:	f7fa fb56 	bl	cf38 <__adddf3>
   1288c:	4632      	mov	r2, r6
   1288e:	463b      	mov	r3, r7
   12890:	f7fa ff76 	bl	d780 <__aeabi_dcmplt>
   12894:	2800      	cmp	r0, #0
   12896:	d04d      	beq.n	12934 <_dtoa_r+0xd84>
   12898:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1289a:	9607      	str	r6, [sp, #28]
   1289c:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   128a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   128a2:	f7ff bb4b 	b.w	11f3c <_dtoa_r+0x38c>
   128a6:	9e08      	ldr	r6, [sp, #32]
   128a8:	2300      	movs	r3, #0
   128aa:	ebc9 0506 	rsb	r5, r9, r6
   128ae:	f7ff bb76 	b.w	11f9e <_dtoa_r+0x3ee>
   128b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   128b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   128b6:	9d08      	ldr	r5, [sp, #32]
   128b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   128bc:	f7ff bb6f 	b.w	11f9e <_dtoa_r+0x3ee>
   128c0:	4657      	mov	r7, sl
   128c2:	f7ff bbb9 	b.w	12038 <_dtoa_r+0x488>
   128c6:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   128ca:	f04f 0802 	mov.w	r8, #2
   128ce:	e54b      	b.n	12368 <_dtoa_r+0x7b8>
   128d0:	f1b9 0f00 	cmp.w	r9, #0
   128d4:	f43f aeaf 	beq.w	12636 <_dtoa_r+0xa86>
   128d8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   128da:	2e00      	cmp	r6, #0
   128dc:	f77f af28 	ble.w	12730 <_dtoa_r+0xb80>
   128e0:	2200      	movs	r2, #0
   128e2:	4b3d      	ldr	r3, [pc, #244]	; (129d8 <_dtoa_r+0xe28>)
   128e4:	4650      	mov	r0, sl
   128e6:	4659      	mov	r1, fp
   128e8:	f7fa fcd8 	bl	d29c <__aeabi_dmul>
   128ec:	4682      	mov	sl, r0
   128ee:	f108 0001 	add.w	r0, r8, #1
   128f2:	468b      	mov	fp, r1
   128f4:	f7fa fc6c 	bl	d1d0 <__aeabi_i2d>
   128f8:	4602      	mov	r2, r0
   128fa:	460b      	mov	r3, r1
   128fc:	4650      	mov	r0, sl
   128fe:	4659      	mov	r1, fp
   12900:	f7fa fccc 	bl	d29c <__aeabi_dmul>
   12904:	2200      	movs	r2, #0
   12906:	4b36      	ldr	r3, [pc, #216]	; (129e0 <_dtoa_r+0xe30>)
   12908:	f7fa fb16 	bl	cf38 <__adddf3>
   1290c:	9d07      	ldr	r5, [sp, #28]
   1290e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   12912:	3d01      	subs	r5, #1
   12914:	4606      	mov	r6, r0
   12916:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   1291a:	9517      	str	r5, [sp, #92]	; 0x5c
   1291c:	e544      	b.n	123a8 <_dtoa_r+0x7f8>
   1291e:	4635      	mov	r5, r6
   12920:	9b06      	ldr	r3, [sp, #24]
   12922:	9e06      	ldr	r6, [sp, #24]
   12924:	9909      	ldr	r1, [sp, #36]	; 0x24
   12926:	2239      	movs	r2, #57	; 0x39
   12928:	7032      	strb	r2, [r6, #0]
   1292a:	f103 0b01 	add.w	fp, r3, #1
   1292e:	463e      	mov	r6, r7
   12930:	f7ff bbef 	b.w	12112 <_dtoa_r+0x562>
   12934:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   12938:	2000      	movs	r0, #0
   1293a:	4928      	ldr	r1, [pc, #160]	; (129dc <_dtoa_r+0xe2c>)
   1293c:	f7fa fafa 	bl	cf34 <__aeabi_dsub>
   12940:	4632      	mov	r2, r6
   12942:	463b      	mov	r3, r7
   12944:	f7fa ff3a 	bl	d7bc <__aeabi_dcmpgt>
   12948:	2800      	cmp	r0, #0
   1294a:	f43f aef1 	beq.w	12730 <_dtoa_r+0xb80>
   1294e:	465b      	mov	r3, fp
   12950:	469b      	mov	fp, r3
   12952:	3b01      	subs	r3, #1
   12954:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   12958:	2a30      	cmp	r2, #48	; 0x30
   1295a:	d0f9      	beq.n	12950 <_dtoa_r+0xda0>
   1295c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   1295e:	9507      	str	r5, [sp, #28]
   12960:	f7ff baf3 	b.w	11f4a <_dtoa_r+0x39a>
   12964:	4645      	mov	r5, r8
   12966:	4654      	mov	r4, sl
   12968:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1296a:	9607      	str	r6, [sp, #28]
   1296c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1296e:	f7ff bae5 	b.w	11f3c <_dtoa_r+0x38c>
   12972:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   12976:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1297a:	d0d0      	beq.n	1291e <_dtoa_r+0xd6e>
   1297c:	9b03      	ldr	r3, [sp, #12]
   1297e:	4635      	mov	r5, r6
   12980:	2b00      	cmp	r3, #0
   12982:	9e06      	ldr	r6, [sp, #24]
   12984:	bfc8      	it	gt
   12986:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
   1298a:	f886 a000 	strb.w	sl, [r6]
   1298e:	f106 0b01 	add.w	fp, r6, #1
   12992:	463e      	mov	r6, r7
   12994:	f7ff bbc3 	b.w	1211e <_dtoa_r+0x56e>
   12998:	f47f aea9 	bne.w	126ee <_dtoa_r+0xb3e>
   1299c:	f01a 0f01 	tst.w	sl, #1
   129a0:	f43f aea5 	beq.w	126ee <_dtoa_r+0xb3e>
   129a4:	e69d      	b.n	126e2 <_dtoa_r+0xb32>
   129a6:	4631      	mov	r1, r6
   129a8:	4620      	mov	r0, r4
   129aa:	220a      	movs	r2, #10
   129ac:	2300      	movs	r3, #0
   129ae:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   129b2:	f000 fb5b 	bl	1306c <__multadd>
   129b6:	4606      	mov	r6, r0
   129b8:	f7ff bb6c 	b.w	12094 <_dtoa_r+0x4e4>
   129bc:	f04f 0802 	mov.w	r8, #2
   129c0:	e4d2      	b.n	12368 <_dtoa_r+0x7b8>
   129c2:	f43f ab52 	beq.w	1206a <_dtoa_r+0x4ba>
   129c6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   129ca:	f7ff bbe2 	b.w	12192 <_dtoa_r+0x5e2>
   129ce:	bf00      	nop
   129d0:	000159a0 	.word	0x000159a0
   129d4:	00015a68 	.word	0x00015a68
   129d8:	40240000 	.word	0x40240000
   129dc:	3fe00000 	.word	0x3fe00000
   129e0:	401c0000 	.word	0x401c0000
   129e4:	f3af 8000 	nop.w

000129e8 <__sflush_r>:
   129e8:	898b      	ldrh	r3, [r1, #12]
   129ea:	b29a      	uxth	r2, r3
   129ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129f0:	460d      	mov	r5, r1
   129f2:	0711      	lsls	r1, r2, #28
   129f4:	4680      	mov	r8, r0
   129f6:	d43c      	bmi.n	12a72 <__sflush_r+0x8a>
   129f8:	686a      	ldr	r2, [r5, #4]
   129fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   129fe:	2a00      	cmp	r2, #0
   12a00:	81ab      	strh	r3, [r5, #12]
   12a02:	dd59      	ble.n	12ab8 <__sflush_r+0xd0>
   12a04:	6aac      	ldr	r4, [r5, #40]	; 0x28
   12a06:	2c00      	cmp	r4, #0
   12a08:	d04b      	beq.n	12aa2 <__sflush_r+0xba>
   12a0a:	b29b      	uxth	r3, r3
   12a0c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   12a10:	2100      	movs	r1, #0
   12a12:	b292      	uxth	r2, r2
   12a14:	f8d8 6000 	ldr.w	r6, [r8]
   12a18:	f8c8 1000 	str.w	r1, [r8]
   12a1c:	2a00      	cmp	r2, #0
   12a1e:	d04f      	beq.n	12ac0 <__sflush_r+0xd8>
   12a20:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   12a22:	075f      	lsls	r7, r3, #29
   12a24:	d505      	bpl.n	12a32 <__sflush_r+0x4a>
   12a26:	6869      	ldr	r1, [r5, #4]
   12a28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   12a2a:	1a52      	subs	r2, r2, r1
   12a2c:	b10b      	cbz	r3, 12a32 <__sflush_r+0x4a>
   12a2e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   12a30:	1ad2      	subs	r2, r2, r3
   12a32:	4640      	mov	r0, r8
   12a34:	69e9      	ldr	r1, [r5, #28]
   12a36:	2300      	movs	r3, #0
   12a38:	47a0      	blx	r4
   12a3a:	1c44      	adds	r4, r0, #1
   12a3c:	d04a      	beq.n	12ad4 <__sflush_r+0xec>
   12a3e:	89aa      	ldrh	r2, [r5, #12]
   12a40:	692b      	ldr	r3, [r5, #16]
   12a42:	602b      	str	r3, [r5, #0]
   12a44:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2200      	movs	r2, #0
   12a4c:	606a      	str	r2, [r5, #4]
   12a4e:	04da      	lsls	r2, r3, #19
   12a50:	81ab      	strh	r3, [r5, #12]
   12a52:	d44c      	bmi.n	12aee <__sflush_r+0x106>
   12a54:	6b29      	ldr	r1, [r5, #48]	; 0x30
   12a56:	f8c8 6000 	str.w	r6, [r8]
   12a5a:	b311      	cbz	r1, 12aa2 <__sflush_r+0xba>
   12a5c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12a60:	4299      	cmp	r1, r3
   12a62:	d002      	beq.n	12a6a <__sflush_r+0x82>
   12a64:	4640      	mov	r0, r8
   12a66:	f000 f969 	bl	12d3c <_free_r>
   12a6a:	2000      	movs	r0, #0
   12a6c:	6328      	str	r0, [r5, #48]	; 0x30
   12a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a72:	692e      	ldr	r6, [r5, #16]
   12a74:	b1ae      	cbz	r6, 12aa2 <__sflush_r+0xba>
   12a76:	682c      	ldr	r4, [r5, #0]
   12a78:	602e      	str	r6, [r5, #0]
   12a7a:	0791      	lsls	r1, r2, #30
   12a7c:	bf0c      	ite	eq
   12a7e:	696b      	ldreq	r3, [r5, #20]
   12a80:	2300      	movne	r3, #0
   12a82:	1ba4      	subs	r4, r4, r6
   12a84:	60ab      	str	r3, [r5, #8]
   12a86:	e00a      	b.n	12a9e <__sflush_r+0xb6>
   12a88:	4632      	mov	r2, r6
   12a8a:	4623      	mov	r3, r4
   12a8c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   12a8e:	69e9      	ldr	r1, [r5, #28]
   12a90:	4640      	mov	r0, r8
   12a92:	47b8      	blx	r7
   12a94:	2800      	cmp	r0, #0
   12a96:	ebc0 0404 	rsb	r4, r0, r4
   12a9a:	4406      	add	r6, r0
   12a9c:	dd04      	ble.n	12aa8 <__sflush_r+0xc0>
   12a9e:	2c00      	cmp	r4, #0
   12aa0:	dcf2      	bgt.n	12a88 <__sflush_r+0xa0>
   12aa2:	2000      	movs	r0, #0
   12aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12aa8:	89ab      	ldrh	r3, [r5, #12]
   12aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12aae:	81ab      	strh	r3, [r5, #12]
   12ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ab8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   12aba:	2a00      	cmp	r2, #0
   12abc:	dca2      	bgt.n	12a04 <__sflush_r+0x1c>
   12abe:	e7f0      	b.n	12aa2 <__sflush_r+0xba>
   12ac0:	2301      	movs	r3, #1
   12ac2:	4640      	mov	r0, r8
   12ac4:	69e9      	ldr	r1, [r5, #28]
   12ac6:	47a0      	blx	r4
   12ac8:	1c43      	adds	r3, r0, #1
   12aca:	4602      	mov	r2, r0
   12acc:	d01e      	beq.n	12b0c <__sflush_r+0x124>
   12ace:	89ab      	ldrh	r3, [r5, #12]
   12ad0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   12ad2:	e7a6      	b.n	12a22 <__sflush_r+0x3a>
   12ad4:	f8d8 3000 	ldr.w	r3, [r8]
   12ad8:	b95b      	cbnz	r3, 12af2 <__sflush_r+0x10a>
   12ada:	89a9      	ldrh	r1, [r5, #12]
   12adc:	606b      	str	r3, [r5, #4]
   12ade:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
   12ae2:	b29b      	uxth	r3, r3
   12ae4:	692a      	ldr	r2, [r5, #16]
   12ae6:	81ab      	strh	r3, [r5, #12]
   12ae8:	04db      	lsls	r3, r3, #19
   12aea:	602a      	str	r2, [r5, #0]
   12aec:	d5b2      	bpl.n	12a54 <__sflush_r+0x6c>
   12aee:	6528      	str	r0, [r5, #80]	; 0x50
   12af0:	e7b0      	b.n	12a54 <__sflush_r+0x6c>
   12af2:	2b1d      	cmp	r3, #29
   12af4:	d001      	beq.n	12afa <__sflush_r+0x112>
   12af6:	2b16      	cmp	r3, #22
   12af8:	d119      	bne.n	12b2e <__sflush_r+0x146>
   12afa:	89aa      	ldrh	r2, [r5, #12]
   12afc:	692b      	ldr	r3, [r5, #16]
   12afe:	602b      	str	r3, [r5, #0]
   12b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   12b04:	2300      	movs	r3, #0
   12b06:	81aa      	strh	r2, [r5, #12]
   12b08:	606b      	str	r3, [r5, #4]
   12b0a:	e7a3      	b.n	12a54 <__sflush_r+0x6c>
   12b0c:	f8d8 3000 	ldr.w	r3, [r8]
   12b10:	2b00      	cmp	r3, #0
   12b12:	d0dc      	beq.n	12ace <__sflush_r+0xe6>
   12b14:	2b1d      	cmp	r3, #29
   12b16:	d007      	beq.n	12b28 <__sflush_r+0x140>
   12b18:	2b16      	cmp	r3, #22
   12b1a:	d005      	beq.n	12b28 <__sflush_r+0x140>
   12b1c:	89ab      	ldrh	r3, [r5, #12]
   12b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12b22:	81ab      	strh	r3, [r5, #12]
   12b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b28:	f8c8 6000 	str.w	r6, [r8]
   12b2c:	e7b9      	b.n	12aa2 <__sflush_r+0xba>
   12b2e:	89ab      	ldrh	r3, [r5, #12]
   12b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12b34:	81ab      	strh	r3, [r5, #12]
   12b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b3a:	bf00      	nop

00012b3c <_fflush_r>:
   12b3c:	b510      	push	{r4, lr}
   12b3e:	4604      	mov	r4, r0
   12b40:	b082      	sub	sp, #8
   12b42:	b108      	cbz	r0, 12b48 <_fflush_r+0xc>
   12b44:	6b83      	ldr	r3, [r0, #56]	; 0x38
   12b46:	b153      	cbz	r3, 12b5e <_fflush_r+0x22>
   12b48:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   12b4c:	b908      	cbnz	r0, 12b52 <_fflush_r+0x16>
   12b4e:	b002      	add	sp, #8
   12b50:	bd10      	pop	{r4, pc}
   12b52:	4620      	mov	r0, r4
   12b54:	b002      	add	sp, #8
   12b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12b5a:	f7ff bf45 	b.w	129e8 <__sflush_r>
   12b5e:	9101      	str	r1, [sp, #4]
   12b60:	f000 f808 	bl	12b74 <__sinit>
   12b64:	9901      	ldr	r1, [sp, #4]
   12b66:	e7ef      	b.n	12b48 <_fflush_r+0xc>

00012b68 <_cleanup_r>:
   12b68:	4901      	ldr	r1, [pc, #4]	; (12b70 <_cleanup_r+0x8>)
   12b6a:	f000 b9b5 	b.w	12ed8 <_fwalk>
   12b6e:	bf00      	nop
   12b70:	00013909 	.word	0x00013909

00012b74 <__sinit>:
   12b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b78:	6b84      	ldr	r4, [r0, #56]	; 0x38
   12b7a:	b083      	sub	sp, #12
   12b7c:	4607      	mov	r7, r0
   12b7e:	2c00      	cmp	r4, #0
   12b80:	d165      	bne.n	12c4e <__sinit+0xda>
   12b82:	6845      	ldr	r5, [r0, #4]
   12b84:	4833      	ldr	r0, [pc, #204]	; (12c54 <__sinit+0xe0>)
   12b86:	63f8      	str	r0, [r7, #60]	; 0x3c
   12b88:	2304      	movs	r3, #4
   12b8a:	2103      	movs	r1, #3
   12b8c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   12b90:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   12b94:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   12b98:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   12b9c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   12ba0:	81ab      	strh	r3, [r5, #12]
   12ba2:	602c      	str	r4, [r5, #0]
   12ba4:	606c      	str	r4, [r5, #4]
   12ba6:	60ac      	str	r4, [r5, #8]
   12ba8:	666c      	str	r4, [r5, #100]	; 0x64
   12baa:	81ec      	strh	r4, [r5, #14]
   12bac:	612c      	str	r4, [r5, #16]
   12bae:	616c      	str	r4, [r5, #20]
   12bb0:	61ac      	str	r4, [r5, #24]
   12bb2:	4621      	mov	r1, r4
   12bb4:	2208      	movs	r2, #8
   12bb6:	f7fc ff35 	bl	fa24 <memset>
   12bba:	68be      	ldr	r6, [r7, #8]
   12bbc:	f8df b098 	ldr.w	fp, [pc, #152]	; 12c58 <__sinit+0xe4>
   12bc0:	f8df a098 	ldr.w	sl, [pc, #152]	; 12c5c <__sinit+0xe8>
   12bc4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 12c60 <__sinit+0xec>
   12bc8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 12c64 <__sinit+0xf0>
   12bcc:	61ed      	str	r5, [r5, #28]
   12bce:	2301      	movs	r3, #1
   12bd0:	2209      	movs	r2, #9
   12bd2:	f8c5 b020 	str.w	fp, [r5, #32]
   12bd6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   12bda:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   12bde:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   12be2:	4621      	mov	r1, r4
   12be4:	81f3      	strh	r3, [r6, #14]
   12be6:	81b2      	strh	r2, [r6, #12]
   12be8:	6034      	str	r4, [r6, #0]
   12bea:	6074      	str	r4, [r6, #4]
   12bec:	60b4      	str	r4, [r6, #8]
   12bee:	6674      	str	r4, [r6, #100]	; 0x64
   12bf0:	6134      	str	r4, [r6, #16]
   12bf2:	6174      	str	r4, [r6, #20]
   12bf4:	61b4      	str	r4, [r6, #24]
   12bf6:	2208      	movs	r2, #8
   12bf8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   12bfc:	9301      	str	r3, [sp, #4]
   12bfe:	f7fc ff11 	bl	fa24 <memset>
   12c02:	68fd      	ldr	r5, [r7, #12]
   12c04:	61f6      	str	r6, [r6, #28]
   12c06:	2012      	movs	r0, #18
   12c08:	2202      	movs	r2, #2
   12c0a:	f8c6 b020 	str.w	fp, [r6, #32]
   12c0e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   12c12:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   12c16:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   12c1a:	4621      	mov	r1, r4
   12c1c:	81a8      	strh	r0, [r5, #12]
   12c1e:	81ea      	strh	r2, [r5, #14]
   12c20:	602c      	str	r4, [r5, #0]
   12c22:	606c      	str	r4, [r5, #4]
   12c24:	60ac      	str	r4, [r5, #8]
   12c26:	666c      	str	r4, [r5, #100]	; 0x64
   12c28:	612c      	str	r4, [r5, #16]
   12c2a:	616c      	str	r4, [r5, #20]
   12c2c:	61ac      	str	r4, [r5, #24]
   12c2e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   12c32:	2208      	movs	r2, #8
   12c34:	f7fc fef6 	bl	fa24 <memset>
   12c38:	9b01      	ldr	r3, [sp, #4]
   12c3a:	61ed      	str	r5, [r5, #28]
   12c3c:	f8c5 b020 	str.w	fp, [r5, #32]
   12c40:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   12c44:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   12c48:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   12c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   12c4e:	b003      	add	sp, #12
   12c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c54:	00012b69 	.word	0x00012b69
   12c58:	00013621 	.word	0x00013621
   12c5c:	00013645 	.word	0x00013645
   12c60:	0001367d 	.word	0x0001367d
   12c64:	0001369d 	.word	0x0001369d

00012c68 <__sfp_lock_acquire>:
   12c68:	4770      	bx	lr
   12c6a:	bf00      	nop

00012c6c <__sfp_lock_release>:
   12c6c:	4770      	bx	lr
   12c6e:	bf00      	nop

00012c70 <__libc_fini_array>:
   12c70:	b538      	push	{r3, r4, r5, lr}
   12c72:	4d09      	ldr	r5, [pc, #36]	; (12c98 <__libc_fini_array+0x28>)
   12c74:	4c09      	ldr	r4, [pc, #36]	; (12c9c <__libc_fini_array+0x2c>)
   12c76:	1b64      	subs	r4, r4, r5
   12c78:	10a4      	asrs	r4, r4, #2
   12c7a:	bf18      	it	ne
   12c7c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   12c80:	d005      	beq.n	12c8e <__libc_fini_array+0x1e>
   12c82:	3c01      	subs	r4, #1
   12c84:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   12c88:	4798      	blx	r3
   12c8a:	2c00      	cmp	r4, #0
   12c8c:	d1f9      	bne.n	12c82 <__libc_fini_array+0x12>
   12c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12c92:	f002 bf1d 	b.w	15ad0 <__init_array_end>
   12c96:	bf00      	nop
	...

00012ca0 <_malloc_trim_r>:
   12ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ca2:	4d23      	ldr	r5, [pc, #140]	; (12d30 <_malloc_trim_r+0x90>)
   12ca4:	460f      	mov	r7, r1
   12ca6:	4604      	mov	r4, r0
   12ca8:	f7fc ff06 	bl	fab8 <__malloc_lock>
   12cac:	68ab      	ldr	r3, [r5, #8]
   12cae:	685e      	ldr	r6, [r3, #4]
   12cb0:	f026 0603 	bic.w	r6, r6, #3
   12cb4:	1bf1      	subs	r1, r6, r7
   12cb6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   12cba:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   12cbe:	f021 010f 	bic.w	r1, r1, #15
   12cc2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   12cc6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   12cca:	db07      	blt.n	12cdc <_malloc_trim_r+0x3c>
   12ccc:	4620      	mov	r0, r4
   12cce:	2100      	movs	r1, #0
   12cd0:	f7fd f910 	bl	fef4 <_sbrk_r>
   12cd4:	68ab      	ldr	r3, [r5, #8]
   12cd6:	4433      	add	r3, r6
   12cd8:	4298      	cmp	r0, r3
   12cda:	d004      	beq.n	12ce6 <_malloc_trim_r+0x46>
   12cdc:	4620      	mov	r0, r4
   12cde:	f7fc feed 	bl	fabc <__malloc_unlock>
   12ce2:	2000      	movs	r0, #0
   12ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ce6:	4620      	mov	r0, r4
   12ce8:	4279      	negs	r1, r7
   12cea:	f7fd f903 	bl	fef4 <_sbrk_r>
   12cee:	3001      	adds	r0, #1
   12cf0:	d00d      	beq.n	12d0e <_malloc_trim_r+0x6e>
   12cf2:	4b10      	ldr	r3, [pc, #64]	; (12d34 <_malloc_trim_r+0x94>)
   12cf4:	68aa      	ldr	r2, [r5, #8]
   12cf6:	6819      	ldr	r1, [r3, #0]
   12cf8:	1bf6      	subs	r6, r6, r7
   12cfa:	f046 0601 	orr.w	r6, r6, #1
   12cfe:	4620      	mov	r0, r4
   12d00:	1bc9      	subs	r1, r1, r7
   12d02:	6056      	str	r6, [r2, #4]
   12d04:	6019      	str	r1, [r3, #0]
   12d06:	f7fc fed9 	bl	fabc <__malloc_unlock>
   12d0a:	2001      	movs	r0, #1
   12d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d0e:	4620      	mov	r0, r4
   12d10:	2100      	movs	r1, #0
   12d12:	f7fd f8ef 	bl	fef4 <_sbrk_r>
   12d16:	68ab      	ldr	r3, [r5, #8]
   12d18:	1ac2      	subs	r2, r0, r3
   12d1a:	2a0f      	cmp	r2, #15
   12d1c:	ddde      	ble.n	12cdc <_malloc_trim_r+0x3c>
   12d1e:	4d06      	ldr	r5, [pc, #24]	; (12d38 <_malloc_trim_r+0x98>)
   12d20:	4904      	ldr	r1, [pc, #16]	; (12d34 <_malloc_trim_r+0x94>)
   12d22:	682d      	ldr	r5, [r5, #0]
   12d24:	f042 0201 	orr.w	r2, r2, #1
   12d28:	1b40      	subs	r0, r0, r5
   12d2a:	605a      	str	r2, [r3, #4]
   12d2c:	6008      	str	r0, [r1, #0]
   12d2e:	e7d5      	b.n	12cdc <_malloc_trim_r+0x3c>
   12d30:	1fff88f4 	.word	0x1fff88f4
   12d34:	1fff9c58 	.word	0x1fff9c58
   12d38:	1fff8d00 	.word	0x1fff8d00

00012d3c <_free_r>:
   12d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d40:	460d      	mov	r5, r1
   12d42:	4606      	mov	r6, r0
   12d44:	2900      	cmp	r1, #0
   12d46:	d055      	beq.n	12df4 <_free_r+0xb8>
   12d48:	f7fc feb6 	bl	fab8 <__malloc_lock>
   12d4c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   12d50:	f8df c174 	ldr.w	ip, [pc, #372]	; 12ec8 <_free_r+0x18c>
   12d54:	f021 0301 	bic.w	r3, r1, #1
   12d58:	f1a5 0408 	sub.w	r4, r5, #8
   12d5c:	18e2      	adds	r2, r4, r3
   12d5e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   12d62:	6857      	ldr	r7, [r2, #4]
   12d64:	4290      	cmp	r0, r2
   12d66:	f027 0703 	bic.w	r7, r7, #3
   12d6a:	d069      	beq.n	12e40 <_free_r+0x104>
   12d6c:	f011 0101 	ands.w	r1, r1, #1
   12d70:	6057      	str	r7, [r2, #4]
   12d72:	d032      	beq.n	12dda <_free_r+0x9e>
   12d74:	2100      	movs	r1, #0
   12d76:	19d0      	adds	r0, r2, r7
   12d78:	6840      	ldr	r0, [r0, #4]
   12d7a:	07c0      	lsls	r0, r0, #31
   12d7c:	d406      	bmi.n	12d8c <_free_r+0x50>
   12d7e:	443b      	add	r3, r7
   12d80:	6890      	ldr	r0, [r2, #8]
   12d82:	2900      	cmp	r1, #0
   12d84:	d04e      	beq.n	12e24 <_free_r+0xe8>
   12d86:	68d2      	ldr	r2, [r2, #12]
   12d88:	60c2      	str	r2, [r0, #12]
   12d8a:	6090      	str	r0, [r2, #8]
   12d8c:	f043 0201 	orr.w	r2, r3, #1
   12d90:	6062      	str	r2, [r4, #4]
   12d92:	50e3      	str	r3, [r4, r3]
   12d94:	b9e1      	cbnz	r1, 12dd0 <_free_r+0x94>
   12d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   12d9a:	d32d      	bcc.n	12df8 <_free_r+0xbc>
   12d9c:	0a5a      	lsrs	r2, r3, #9
   12d9e:	2a04      	cmp	r2, #4
   12da0:	d86a      	bhi.n	12e78 <_free_r+0x13c>
   12da2:	0998      	lsrs	r0, r3, #6
   12da4:	3038      	adds	r0, #56	; 0x38
   12da6:	0041      	lsls	r1, r0, #1
   12da8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   12dac:	4946      	ldr	r1, [pc, #280]	; (12ec8 <_free_r+0x18c>)
   12dae:	f8dc 2008 	ldr.w	r2, [ip, #8]
   12db2:	4562      	cmp	r2, ip
   12db4:	d066      	beq.n	12e84 <_free_r+0x148>
   12db6:	6851      	ldr	r1, [r2, #4]
   12db8:	f021 0103 	bic.w	r1, r1, #3
   12dbc:	428b      	cmp	r3, r1
   12dbe:	d202      	bcs.n	12dc6 <_free_r+0x8a>
   12dc0:	6892      	ldr	r2, [r2, #8]
   12dc2:	4594      	cmp	ip, r2
   12dc4:	d1f7      	bne.n	12db6 <_free_r+0x7a>
   12dc6:	68d3      	ldr	r3, [r2, #12]
   12dc8:	60e3      	str	r3, [r4, #12]
   12dca:	60a2      	str	r2, [r4, #8]
   12dcc:	609c      	str	r4, [r3, #8]
   12dce:	60d4      	str	r4, [r2, #12]
   12dd0:	4630      	mov	r0, r6
   12dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12dd6:	f7fc be71 	b.w	fabc <__malloc_unlock>
   12dda:	f855 5c08 	ldr.w	r5, [r5, #-8]
   12dde:	1b64      	subs	r4, r4, r5
   12de0:	f10c 0808 	add.w	r8, ip, #8
   12de4:	68a0      	ldr	r0, [r4, #8]
   12de6:	4540      	cmp	r0, r8
   12de8:	442b      	add	r3, r5
   12dea:	d043      	beq.n	12e74 <_free_r+0x138>
   12dec:	68e5      	ldr	r5, [r4, #12]
   12dee:	60c5      	str	r5, [r0, #12]
   12df0:	60a8      	str	r0, [r5, #8]
   12df2:	e7c0      	b.n	12d76 <_free_r+0x3a>
   12df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12df8:	08db      	lsrs	r3, r3, #3
   12dfa:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   12dfe:	2501      	movs	r5, #1
   12e00:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12e04:	6891      	ldr	r1, [r2, #8]
   12e06:	60a1      	str	r1, [r4, #8]
   12e08:	109b      	asrs	r3, r3, #2
   12e0a:	fa05 f303 	lsl.w	r3, r5, r3
   12e0e:	4318      	orrs	r0, r3
   12e10:	60e2      	str	r2, [r4, #12]
   12e12:	f8cc 0004 	str.w	r0, [ip, #4]
   12e16:	6094      	str	r4, [r2, #8]
   12e18:	4630      	mov	r0, r6
   12e1a:	60cc      	str	r4, [r1, #12]
   12e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12e20:	f7fc be4c 	b.w	fabc <__malloc_unlock>
   12e24:	4d29      	ldr	r5, [pc, #164]	; (12ecc <_free_r+0x190>)
   12e26:	42a8      	cmp	r0, r5
   12e28:	d1ad      	bne.n	12d86 <_free_r+0x4a>
   12e2a:	f043 0201 	orr.w	r2, r3, #1
   12e2e:	f8cc 4014 	str.w	r4, [ip, #20]
   12e32:	f8cc 4010 	str.w	r4, [ip, #16]
   12e36:	60e0      	str	r0, [r4, #12]
   12e38:	60a0      	str	r0, [r4, #8]
   12e3a:	6062      	str	r2, [r4, #4]
   12e3c:	50e3      	str	r3, [r4, r3]
   12e3e:	e7c7      	b.n	12dd0 <_free_r+0x94>
   12e40:	441f      	add	r7, r3
   12e42:	07cb      	lsls	r3, r1, #31
   12e44:	d407      	bmi.n	12e56 <_free_r+0x11a>
   12e46:	f855 3c08 	ldr.w	r3, [r5, #-8]
   12e4a:	1ae4      	subs	r4, r4, r3
   12e4c:	441f      	add	r7, r3
   12e4e:	68a2      	ldr	r2, [r4, #8]
   12e50:	68e3      	ldr	r3, [r4, #12]
   12e52:	60d3      	str	r3, [r2, #12]
   12e54:	609a      	str	r2, [r3, #8]
   12e56:	4b1e      	ldr	r3, [pc, #120]	; (12ed0 <_free_r+0x194>)
   12e58:	681b      	ldr	r3, [r3, #0]
   12e5a:	f047 0201 	orr.w	r2, r7, #1
   12e5e:	429f      	cmp	r7, r3
   12e60:	6062      	str	r2, [r4, #4]
   12e62:	f8cc 4008 	str.w	r4, [ip, #8]
   12e66:	d3b3      	bcc.n	12dd0 <_free_r+0x94>
   12e68:	4b1a      	ldr	r3, [pc, #104]	; (12ed4 <_free_r+0x198>)
   12e6a:	4630      	mov	r0, r6
   12e6c:	6819      	ldr	r1, [r3, #0]
   12e6e:	f7ff ff17 	bl	12ca0 <_malloc_trim_r>
   12e72:	e7ad      	b.n	12dd0 <_free_r+0x94>
   12e74:	2101      	movs	r1, #1
   12e76:	e77e      	b.n	12d76 <_free_r+0x3a>
   12e78:	2a14      	cmp	r2, #20
   12e7a:	d80c      	bhi.n	12e96 <_free_r+0x15a>
   12e7c:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   12e80:	0041      	lsls	r1, r0, #1
   12e82:	e791      	b.n	12da8 <_free_r+0x6c>
   12e84:	684b      	ldr	r3, [r1, #4]
   12e86:	1080      	asrs	r0, r0, #2
   12e88:	2501      	movs	r5, #1
   12e8a:	fa05 f000 	lsl.w	r0, r5, r0
   12e8e:	4303      	orrs	r3, r0
   12e90:	604b      	str	r3, [r1, #4]
   12e92:	4613      	mov	r3, r2
   12e94:	e798      	b.n	12dc8 <_free_r+0x8c>
   12e96:	2a54      	cmp	r2, #84	; 0x54
   12e98:	d803      	bhi.n	12ea2 <_free_r+0x166>
   12e9a:	0b18      	lsrs	r0, r3, #12
   12e9c:	306e      	adds	r0, #110	; 0x6e
   12e9e:	0041      	lsls	r1, r0, #1
   12ea0:	e782      	b.n	12da8 <_free_r+0x6c>
   12ea2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   12ea6:	d803      	bhi.n	12eb0 <_free_r+0x174>
   12ea8:	0bd8      	lsrs	r0, r3, #15
   12eaa:	3077      	adds	r0, #119	; 0x77
   12eac:	0041      	lsls	r1, r0, #1
   12eae:	e77b      	b.n	12da8 <_free_r+0x6c>
   12eb0:	f240 5154 	movw	r1, #1364	; 0x554
   12eb4:	428a      	cmp	r2, r1
   12eb6:	d803      	bhi.n	12ec0 <_free_r+0x184>
   12eb8:	0c98      	lsrs	r0, r3, #18
   12eba:	307c      	adds	r0, #124	; 0x7c
   12ebc:	0041      	lsls	r1, r0, #1
   12ebe:	e773      	b.n	12da8 <_free_r+0x6c>
   12ec0:	21fc      	movs	r1, #252	; 0xfc
   12ec2:	207e      	movs	r0, #126	; 0x7e
   12ec4:	e770      	b.n	12da8 <_free_r+0x6c>
   12ec6:	bf00      	nop
   12ec8:	1fff88f4 	.word	0x1fff88f4
   12ecc:	1fff88fc 	.word	0x1fff88fc
   12ed0:	1fff8cfc 	.word	0x1fff8cfc
   12ed4:	1fff9c54 	.word	0x1fff9c54

00012ed8 <_fwalk>:
   12ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12edc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   12ee0:	4688      	mov	r8, r1
   12ee2:	d01a      	beq.n	12f1a <_fwalk+0x42>
   12ee4:	2600      	movs	r6, #0
   12ee6:	687d      	ldr	r5, [r7, #4]
   12ee8:	68bc      	ldr	r4, [r7, #8]
   12eea:	3d01      	subs	r5, #1
   12eec:	d40f      	bmi.n	12f0e <_fwalk+0x36>
   12eee:	89a3      	ldrh	r3, [r4, #12]
   12ef0:	2b01      	cmp	r3, #1
   12ef2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   12ef6:	d906      	bls.n	12f06 <_fwalk+0x2e>
   12ef8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   12efc:	3301      	adds	r3, #1
   12efe:	4620      	mov	r0, r4
   12f00:	d001      	beq.n	12f06 <_fwalk+0x2e>
   12f02:	47c0      	blx	r8
   12f04:	4306      	orrs	r6, r0
   12f06:	1c6b      	adds	r3, r5, #1
   12f08:	f104 0468 	add.w	r4, r4, #104	; 0x68
   12f0c:	d1ef      	bne.n	12eee <_fwalk+0x16>
   12f0e:	683f      	ldr	r7, [r7, #0]
   12f10:	2f00      	cmp	r7, #0
   12f12:	d1e8      	bne.n	12ee6 <_fwalk+0xe>
   12f14:	4630      	mov	r0, r6
   12f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f1a:	463e      	mov	r6, r7
   12f1c:	4630      	mov	r0, r6
   12f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f22:	bf00      	nop

00012f24 <_localeconv_r>:
   12f24:	4800      	ldr	r0, [pc, #0]	; (12f28 <_localeconv_r+0x4>)
   12f26:	4770      	bx	lr
   12f28:	1fff8d04 	.word	0x1fff8d04

00012f2c <__smakebuf_r>:
   12f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f2e:	898b      	ldrh	r3, [r1, #12]
   12f30:	b29a      	uxth	r2, r3
   12f32:	0796      	lsls	r6, r2, #30
   12f34:	b091      	sub	sp, #68	; 0x44
   12f36:	460c      	mov	r4, r1
   12f38:	4605      	mov	r5, r0
   12f3a:	d437      	bmi.n	12fac <__smakebuf_r+0x80>
   12f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12f40:	2900      	cmp	r1, #0
   12f42:	db17      	blt.n	12f74 <__smakebuf_r+0x48>
   12f44:	aa01      	add	r2, sp, #4
   12f46:	f000 fce7 	bl	13918 <_fstat_r>
   12f4a:	2800      	cmp	r0, #0
   12f4c:	db10      	blt.n	12f70 <__smakebuf_r+0x44>
   12f4e:	9b02      	ldr	r3, [sp, #8]
   12f50:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   12f54:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   12f58:	424f      	negs	r7, r1
   12f5a:	414f      	adcs	r7, r1
   12f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12f60:	d02c      	beq.n	12fbc <__smakebuf_r+0x90>
   12f62:	89a3      	ldrh	r3, [r4, #12]
   12f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   12f68:	81a3      	strh	r3, [r4, #12]
   12f6a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   12f6e:	e00b      	b.n	12f88 <__smakebuf_r+0x5c>
   12f70:	89a3      	ldrh	r3, [r4, #12]
   12f72:	b29a      	uxth	r2, r3
   12f74:	f012 0f80 	tst.w	r2, #128	; 0x80
   12f78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   12f7c:	81a3      	strh	r3, [r4, #12]
   12f7e:	bf14      	ite	ne
   12f80:	2640      	movne	r6, #64	; 0x40
   12f82:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   12f86:	2700      	movs	r7, #0
   12f88:	4628      	mov	r0, r5
   12f8a:	4631      	mov	r1, r6
   12f8c:	f7fc f938 	bl	f200 <_malloc_r>
   12f90:	89a3      	ldrh	r3, [r4, #12]
   12f92:	2800      	cmp	r0, #0
   12f94:	d029      	beq.n	12fea <__smakebuf_r+0xbe>
   12f96:	4a1b      	ldr	r2, [pc, #108]	; (13004 <__smakebuf_r+0xd8>)
   12f98:	63ea      	str	r2, [r5, #60]	; 0x3c
   12f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12f9e:	81a3      	strh	r3, [r4, #12]
   12fa0:	6020      	str	r0, [r4, #0]
   12fa2:	6120      	str	r0, [r4, #16]
   12fa4:	6166      	str	r6, [r4, #20]
   12fa6:	b9a7      	cbnz	r7, 12fd2 <__smakebuf_r+0xa6>
   12fa8:	b011      	add	sp, #68	; 0x44
   12faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fac:	f101 0343 	add.w	r3, r1, #67	; 0x43
   12fb0:	2201      	movs	r2, #1
   12fb2:	600b      	str	r3, [r1, #0]
   12fb4:	610b      	str	r3, [r1, #16]
   12fb6:	614a      	str	r2, [r1, #20]
   12fb8:	b011      	add	sp, #68	; 0x44
   12fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fbc:	4a12      	ldr	r2, [pc, #72]	; (13008 <__smakebuf_r+0xdc>)
   12fbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12fc0:	4293      	cmp	r3, r2
   12fc2:	d1ce      	bne.n	12f62 <__smakebuf_r+0x36>
   12fc4:	89a3      	ldrh	r3, [r4, #12]
   12fc6:	f44f 6680 	mov.w	r6, #1024	; 0x400
   12fca:	4333      	orrs	r3, r6
   12fcc:	81a3      	strh	r3, [r4, #12]
   12fce:	64e6      	str	r6, [r4, #76]	; 0x4c
   12fd0:	e7da      	b.n	12f88 <__smakebuf_r+0x5c>
   12fd2:	4628      	mov	r0, r5
   12fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12fd8:	f000 fcb2 	bl	13940 <_isatty_r>
   12fdc:	2800      	cmp	r0, #0
   12fde:	d0e3      	beq.n	12fa8 <__smakebuf_r+0x7c>
   12fe0:	89a3      	ldrh	r3, [r4, #12]
   12fe2:	f043 0301 	orr.w	r3, r3, #1
   12fe6:	81a3      	strh	r3, [r4, #12]
   12fe8:	e7de      	b.n	12fa8 <__smakebuf_r+0x7c>
   12fea:	059a      	lsls	r2, r3, #22
   12fec:	d4dc      	bmi.n	12fa8 <__smakebuf_r+0x7c>
   12fee:	f104 0243 	add.w	r2, r4, #67	; 0x43
   12ff2:	f043 0302 	orr.w	r3, r3, #2
   12ff6:	2101      	movs	r1, #1
   12ff8:	81a3      	strh	r3, [r4, #12]
   12ffa:	6022      	str	r2, [r4, #0]
   12ffc:	6122      	str	r2, [r4, #16]
   12ffe:	6161      	str	r1, [r4, #20]
   13000:	e7d2      	b.n	12fa8 <__smakebuf_r+0x7c>
   13002:	bf00      	nop
   13004:	00012b69 	.word	0x00012b69
   13008:	0001367d 	.word	0x0001367d

0001300c <_Balloc>:
   1300c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   1300e:	b570      	push	{r4, r5, r6, lr}
   13010:	4605      	mov	r5, r0
   13012:	460c      	mov	r4, r1
   13014:	b14a      	cbz	r2, 1302a <_Balloc+0x1e>
   13016:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   1301a:	b180      	cbz	r0, 1303e <_Balloc+0x32>
   1301c:	6801      	ldr	r1, [r0, #0]
   1301e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   13022:	2200      	movs	r2, #0
   13024:	6102      	str	r2, [r0, #16]
   13026:	60c2      	str	r2, [r0, #12]
   13028:	bd70      	pop	{r4, r5, r6, pc}
   1302a:	2221      	movs	r2, #33	; 0x21
   1302c:	2104      	movs	r1, #4
   1302e:	f000 fbe9 	bl	13804 <_calloc_r>
   13032:	64e8      	str	r0, [r5, #76]	; 0x4c
   13034:	4602      	mov	r2, r0
   13036:	2800      	cmp	r0, #0
   13038:	d1ed      	bne.n	13016 <_Balloc+0xa>
   1303a:	2000      	movs	r0, #0
   1303c:	bd70      	pop	{r4, r5, r6, pc}
   1303e:	2101      	movs	r1, #1
   13040:	fa01 f604 	lsl.w	r6, r1, r4
   13044:	1d72      	adds	r2, r6, #5
   13046:	4628      	mov	r0, r5
   13048:	0092      	lsls	r2, r2, #2
   1304a:	f000 fbdb 	bl	13804 <_calloc_r>
   1304e:	2800      	cmp	r0, #0
   13050:	d0f3      	beq.n	1303a <_Balloc+0x2e>
   13052:	6044      	str	r4, [r0, #4]
   13054:	6086      	str	r6, [r0, #8]
   13056:	e7e4      	b.n	13022 <_Balloc+0x16>

00013058 <_Bfree>:
   13058:	b131      	cbz	r1, 13068 <_Bfree+0x10>
   1305a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1305c:	684a      	ldr	r2, [r1, #4]
   1305e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13062:	6008      	str	r0, [r1, #0]
   13064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   13068:	4770      	bx	lr
   1306a:	bf00      	nop

0001306c <__multadd>:
   1306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13070:	f8d1 8010 	ldr.w	r8, [r1, #16]
   13074:	b082      	sub	sp, #8
   13076:	4689      	mov	r9, r1
   13078:	4682      	mov	sl, r0
   1307a:	f101 0514 	add.w	r5, r1, #20
   1307e:	2400      	movs	r4, #0
   13080:	682f      	ldr	r7, [r5, #0]
   13082:	b2be      	uxth	r6, r7
   13084:	0c3f      	lsrs	r7, r7, #16
   13086:	fb02 3606 	mla	r6, r2, r6, r3
   1308a:	fb02 f307 	mul.w	r3, r2, r7
   1308e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   13092:	3401      	adds	r4, #1
   13094:	b2b6      	uxth	r6, r6
   13096:	eb06 4603 	add.w	r6, r6, r3, lsl #16
   1309a:	45a0      	cmp	r8, r4
   1309c:	f845 6b04 	str.w	r6, [r5], #4
   130a0:	ea4f 4313 	mov.w	r3, r3, lsr #16
   130a4:	dcec      	bgt.n	13080 <__multadd+0x14>
   130a6:	b153      	cbz	r3, 130be <__multadd+0x52>
   130a8:	f8d9 2008 	ldr.w	r2, [r9, #8]
   130ac:	4590      	cmp	r8, r2
   130ae:	da0a      	bge.n	130c6 <__multadd+0x5a>
   130b0:	eb09 0188 	add.w	r1, r9, r8, lsl #2
   130b4:	f108 0201 	add.w	r2, r8, #1
   130b8:	614b      	str	r3, [r1, #20]
   130ba:	f8c9 2010 	str.w	r2, [r9, #16]
   130be:	4648      	mov	r0, r9
   130c0:	b002      	add	sp, #8
   130c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   130c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   130ca:	9301      	str	r3, [sp, #4]
   130cc:	3101      	adds	r1, #1
   130ce:	4650      	mov	r0, sl
   130d0:	f7ff ff9c 	bl	1300c <_Balloc>
   130d4:	f8d9 2010 	ldr.w	r2, [r9, #16]
   130d8:	3202      	adds	r2, #2
   130da:	f109 010c 	add.w	r1, r9, #12
   130de:	4604      	mov	r4, r0
   130e0:	0092      	lsls	r2, r2, #2
   130e2:	300c      	adds	r0, #12
   130e4:	f7fc fba4 	bl	f830 <memcpy>
   130e8:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
   130ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
   130f0:	9b01      	ldr	r3, [sp, #4]
   130f2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   130f6:	f8c9 0000 	str.w	r0, [r9]
   130fa:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
   130fe:	46a1      	mov	r9, r4
   13100:	e7d6      	b.n	130b0 <__multadd+0x44>
   13102:	bf00      	nop

00013104 <__hi0bits>:
   13104:	0c03      	lsrs	r3, r0, #16
   13106:	041b      	lsls	r3, r3, #16
   13108:	b9b3      	cbnz	r3, 13138 <__hi0bits+0x34>
   1310a:	0400      	lsls	r0, r0, #16
   1310c:	2310      	movs	r3, #16
   1310e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   13112:	bf04      	itt	eq
   13114:	0200      	lsleq	r0, r0, #8
   13116:	3308      	addeq	r3, #8
   13118:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   1311c:	bf04      	itt	eq
   1311e:	0100      	lsleq	r0, r0, #4
   13120:	3304      	addeq	r3, #4
   13122:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   13126:	bf04      	itt	eq
   13128:	0080      	lsleq	r0, r0, #2
   1312a:	3302      	addeq	r3, #2
   1312c:	2800      	cmp	r0, #0
   1312e:	db07      	blt.n	13140 <__hi0bits+0x3c>
   13130:	0042      	lsls	r2, r0, #1
   13132:	d403      	bmi.n	1313c <__hi0bits+0x38>
   13134:	2020      	movs	r0, #32
   13136:	4770      	bx	lr
   13138:	2300      	movs	r3, #0
   1313a:	e7e8      	b.n	1310e <__hi0bits+0xa>
   1313c:	1c58      	adds	r0, r3, #1
   1313e:	4770      	bx	lr
   13140:	4618      	mov	r0, r3
   13142:	4770      	bx	lr

00013144 <__lo0bits>:
   13144:	6803      	ldr	r3, [r0, #0]
   13146:	f013 0207 	ands.w	r2, r3, #7
   1314a:	d007      	beq.n	1315c <__lo0bits+0x18>
   1314c:	07d9      	lsls	r1, r3, #31
   1314e:	d420      	bmi.n	13192 <__lo0bits+0x4e>
   13150:	079a      	lsls	r2, r3, #30
   13152:	d420      	bmi.n	13196 <__lo0bits+0x52>
   13154:	089b      	lsrs	r3, r3, #2
   13156:	6003      	str	r3, [r0, #0]
   13158:	2002      	movs	r0, #2
   1315a:	4770      	bx	lr
   1315c:	b299      	uxth	r1, r3
   1315e:	b909      	cbnz	r1, 13164 <__lo0bits+0x20>
   13160:	0c1b      	lsrs	r3, r3, #16
   13162:	2210      	movs	r2, #16
   13164:	f013 0fff 	tst.w	r3, #255	; 0xff
   13168:	bf04      	itt	eq
   1316a:	0a1b      	lsreq	r3, r3, #8
   1316c:	3208      	addeq	r2, #8
   1316e:	0719      	lsls	r1, r3, #28
   13170:	bf04      	itt	eq
   13172:	091b      	lsreq	r3, r3, #4
   13174:	3204      	addeq	r2, #4
   13176:	0799      	lsls	r1, r3, #30
   13178:	bf04      	itt	eq
   1317a:	089b      	lsreq	r3, r3, #2
   1317c:	3202      	addeq	r2, #2
   1317e:	07d9      	lsls	r1, r3, #31
   13180:	d404      	bmi.n	1318c <__lo0bits+0x48>
   13182:	085b      	lsrs	r3, r3, #1
   13184:	d101      	bne.n	1318a <__lo0bits+0x46>
   13186:	2020      	movs	r0, #32
   13188:	4770      	bx	lr
   1318a:	3201      	adds	r2, #1
   1318c:	6003      	str	r3, [r0, #0]
   1318e:	4610      	mov	r0, r2
   13190:	4770      	bx	lr
   13192:	2000      	movs	r0, #0
   13194:	4770      	bx	lr
   13196:	085b      	lsrs	r3, r3, #1
   13198:	6003      	str	r3, [r0, #0]
   1319a:	2001      	movs	r0, #1
   1319c:	4770      	bx	lr
   1319e:	bf00      	nop

000131a0 <__i2b>:
   131a0:	b510      	push	{r4, lr}
   131a2:	460c      	mov	r4, r1
   131a4:	2101      	movs	r1, #1
   131a6:	f7ff ff31 	bl	1300c <_Balloc>
   131aa:	2201      	movs	r2, #1
   131ac:	6144      	str	r4, [r0, #20]
   131ae:	6102      	str	r2, [r0, #16]
   131b0:	bd10      	pop	{r4, pc}
   131b2:	bf00      	nop

000131b4 <__multiply>:
   131b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131b8:	690d      	ldr	r5, [r1, #16]
   131ba:	f8d2 9010 	ldr.w	r9, [r2, #16]
   131be:	454d      	cmp	r5, r9
   131c0:	b085      	sub	sp, #20
   131c2:	460c      	mov	r4, r1
   131c4:	4692      	mov	sl, r2
   131c6:	da04      	bge.n	131d2 <__multiply+0x1e>
   131c8:	462a      	mov	r2, r5
   131ca:	4654      	mov	r4, sl
   131cc:	464d      	mov	r5, r9
   131ce:	468a      	mov	sl, r1
   131d0:	4691      	mov	r9, r2
   131d2:	68a3      	ldr	r3, [r4, #8]
   131d4:	6861      	ldr	r1, [r4, #4]
   131d6:	eb05 0709 	add.w	r7, r5, r9
   131da:	429f      	cmp	r7, r3
   131dc:	bfc8      	it	gt
   131de:	3101      	addgt	r1, #1
   131e0:	f7ff ff14 	bl	1300c <_Balloc>
   131e4:	f100 0614 	add.w	r6, r0, #20
   131e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
   131ec:	4546      	cmp	r6, r8
   131ee:	9001      	str	r0, [sp, #4]
   131f0:	d205      	bcs.n	131fe <__multiply+0x4a>
   131f2:	4633      	mov	r3, r6
   131f4:	2000      	movs	r0, #0
   131f6:	f843 0b04 	str.w	r0, [r3], #4
   131fa:	4598      	cmp	r8, r3
   131fc:	d8fb      	bhi.n	131f6 <__multiply+0x42>
   131fe:	f10a 0c14 	add.w	ip, sl, #20
   13202:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
   13206:	3414      	adds	r4, #20
   13208:	45cc      	cmp	ip, r9
   1320a:	9400      	str	r4, [sp, #0]
   1320c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   13210:	d25b      	bcs.n	132ca <__multiply+0x116>
   13212:	f8cd 8008 	str.w	r8, [sp, #8]
   13216:	9703      	str	r7, [sp, #12]
   13218:	46c8      	mov	r8, r9
   1321a:	f85c 3b04 	ldr.w	r3, [ip], #4
   1321e:	b29c      	uxth	r4, r3
   13220:	b324      	cbz	r4, 1326c <__multiply+0xb8>
   13222:	9a00      	ldr	r2, [sp, #0]
   13224:	4633      	mov	r3, r6
   13226:	f04f 0900 	mov.w	r9, #0
   1322a:	e000      	b.n	1322e <__multiply+0x7a>
   1322c:	460b      	mov	r3, r1
   1322e:	f852 7b04 	ldr.w	r7, [r2], #4
   13232:	6819      	ldr	r1, [r3, #0]
   13234:	fa1f fb87 	uxth.w	fp, r7
   13238:	fa1f fa81 	uxth.w	sl, r1
   1323c:	0c38      	lsrs	r0, r7, #16
   1323e:	0c09      	lsrs	r1, r1, #16
   13240:	fb04 a70b 	mla	r7, r4, fp, sl
   13244:	44b9      	add	r9, r7
   13246:	fb04 1000 	mla	r0, r4, r0, r1
   1324a:	eb00 4019 	add.w	r0, r0, r9, lsr #16
   1324e:	4619      	mov	r1, r3
   13250:	fa1f f989 	uxth.w	r9, r9
   13254:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
   13258:	4295      	cmp	r5, r2
   1325a:	ea4f 4910 	mov.w	r9, r0, lsr #16
   1325e:	f841 7b04 	str.w	r7, [r1], #4
   13262:	d8e3      	bhi.n	1322c <__multiply+0x78>
   13264:	f8c3 9004 	str.w	r9, [r3, #4]
   13268:	f85c 3c04 	ldr.w	r3, [ip, #-4]
   1326c:	ea5f 4913 	movs.w	r9, r3, lsr #16
   13270:	d024      	beq.n	132bc <__multiply+0x108>
   13272:	f8d6 a000 	ldr.w	sl, [r6]
   13276:	9b00      	ldr	r3, [sp, #0]
   13278:	4650      	mov	r0, sl
   1327a:	4631      	mov	r1, r6
   1327c:	f04f 0b00 	mov.w	fp, #0
   13280:	e000      	b.n	13284 <__multiply+0xd0>
   13282:	4611      	mov	r1, r2
   13284:	881a      	ldrh	r2, [r3, #0]
   13286:	0c00      	lsrs	r0, r0, #16
   13288:	fb09 0002 	mla	r0, r9, r2, r0
   1328c:	4483      	add	fp, r0
   1328e:	fa1f fa8a 	uxth.w	sl, sl
   13292:	460a      	mov	r2, r1
   13294:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
   13298:	f842 0b04 	str.w	r0, [r2], #4
   1329c:	f853 7b04 	ldr.w	r7, [r3], #4
   132a0:	6848      	ldr	r0, [r1, #4]
   132a2:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   132a6:	b284      	uxth	r4, r0
   132a8:	fb09 4a0a 	mla	sl, r9, sl, r4
   132ac:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
   132b0:	429d      	cmp	r5, r3
   132b2:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
   132b6:	d8e4      	bhi.n	13282 <__multiply+0xce>
   132b8:	f8c1 a004 	str.w	sl, [r1, #4]
   132bc:	45e0      	cmp	r8, ip
   132be:	f106 0604 	add.w	r6, r6, #4
   132c2:	d8aa      	bhi.n	1321a <__multiply+0x66>
   132c4:	f8dd 8008 	ldr.w	r8, [sp, #8]
   132c8:	9f03      	ldr	r7, [sp, #12]
   132ca:	2f00      	cmp	r7, #0
   132cc:	dd0a      	ble.n	132e4 <__multiply+0x130>
   132ce:	f858 3c04 	ldr.w	r3, [r8, #-4]
   132d2:	f1a8 0804 	sub.w	r8, r8, #4
   132d6:	b11b      	cbz	r3, 132e0 <__multiply+0x12c>
   132d8:	e004      	b.n	132e4 <__multiply+0x130>
   132da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   132de:	b90b      	cbnz	r3, 132e4 <__multiply+0x130>
   132e0:	3f01      	subs	r7, #1
   132e2:	d1fa      	bne.n	132da <__multiply+0x126>
   132e4:	9b01      	ldr	r3, [sp, #4]
   132e6:	4618      	mov	r0, r3
   132e8:	611f      	str	r7, [r3, #16]
   132ea:	b005      	add	sp, #20
   132ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000132f0 <__pow5mult>:
   132f0:	f012 0303 	ands.w	r3, r2, #3
   132f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   132f8:	4614      	mov	r4, r2
   132fa:	4607      	mov	r7, r0
   132fc:	460e      	mov	r6, r1
   132fe:	d12c      	bne.n	1335a <__pow5mult+0x6a>
   13300:	10a4      	asrs	r4, r4, #2
   13302:	d01c      	beq.n	1333e <__pow5mult+0x4e>
   13304:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   13306:	2d00      	cmp	r5, #0
   13308:	d030      	beq.n	1336c <__pow5mult+0x7c>
   1330a:	f04f 0800 	mov.w	r8, #0
   1330e:	e004      	b.n	1331a <__pow5mult+0x2a>
   13310:	1064      	asrs	r4, r4, #1
   13312:	d014      	beq.n	1333e <__pow5mult+0x4e>
   13314:	6828      	ldr	r0, [r5, #0]
   13316:	b1a8      	cbz	r0, 13344 <__pow5mult+0x54>
   13318:	4605      	mov	r5, r0
   1331a:	07e3      	lsls	r3, r4, #31
   1331c:	d5f8      	bpl.n	13310 <__pow5mult+0x20>
   1331e:	4638      	mov	r0, r7
   13320:	4631      	mov	r1, r6
   13322:	462a      	mov	r2, r5
   13324:	f7ff ff46 	bl	131b4 <__multiply>
   13328:	b1ae      	cbz	r6, 13356 <__pow5mult+0x66>
   1332a:	6872      	ldr	r2, [r6, #4]
   1332c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1332e:	1064      	asrs	r4, r4, #1
   13330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13334:	6031      	str	r1, [r6, #0]
   13336:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   1333a:	4606      	mov	r6, r0
   1333c:	d1ea      	bne.n	13314 <__pow5mult+0x24>
   1333e:	4630      	mov	r0, r6
   13340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13344:	4638      	mov	r0, r7
   13346:	4629      	mov	r1, r5
   13348:	462a      	mov	r2, r5
   1334a:	f7ff ff33 	bl	131b4 <__multiply>
   1334e:	6028      	str	r0, [r5, #0]
   13350:	f8c0 8000 	str.w	r8, [r0]
   13354:	e7e0      	b.n	13318 <__pow5mult+0x28>
   13356:	4606      	mov	r6, r0
   13358:	e7da      	b.n	13310 <__pow5mult+0x20>
   1335a:	1e5d      	subs	r5, r3, #1
   1335c:	4a0a      	ldr	r2, [pc, #40]	; (13388 <__pow5mult+0x98>)
   1335e:	2300      	movs	r3, #0
   13360:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   13364:	f7ff fe82 	bl	1306c <__multadd>
   13368:	4606      	mov	r6, r0
   1336a:	e7c9      	b.n	13300 <__pow5mult+0x10>
   1336c:	2101      	movs	r1, #1
   1336e:	4638      	mov	r0, r7
   13370:	f7ff fe4c 	bl	1300c <_Balloc>
   13374:	f240 2171 	movw	r1, #625	; 0x271
   13378:	2201      	movs	r2, #1
   1337a:	2300      	movs	r3, #0
   1337c:	6141      	str	r1, [r0, #20]
   1337e:	6102      	str	r2, [r0, #16]
   13380:	4605      	mov	r5, r0
   13382:	64b8      	str	r0, [r7, #72]	; 0x48
   13384:	6003      	str	r3, [r0, #0]
   13386:	e7c0      	b.n	1330a <__pow5mult+0x1a>
   13388:	00015a90 	.word	0x00015a90

0001338c <__lshift>:
   1338c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13390:	4693      	mov	fp, r2
   13392:	690a      	ldr	r2, [r1, #16]
   13394:	688b      	ldr	r3, [r1, #8]
   13396:	ea4f 1a6b 	mov.w	sl, fp, asr #5
   1339a:	eb0a 0902 	add.w	r9, sl, r2
   1339e:	f109 0601 	add.w	r6, r9, #1
   133a2:	429e      	cmp	r6, r3
   133a4:	460f      	mov	r7, r1
   133a6:	4680      	mov	r8, r0
   133a8:	6849      	ldr	r1, [r1, #4]
   133aa:	dd04      	ble.n	133b6 <__lshift+0x2a>
   133ac:	005b      	lsls	r3, r3, #1
   133ae:	429e      	cmp	r6, r3
   133b0:	f101 0101 	add.w	r1, r1, #1
   133b4:	dcfa      	bgt.n	133ac <__lshift+0x20>
   133b6:	4640      	mov	r0, r8
   133b8:	f7ff fe28 	bl	1300c <_Balloc>
   133bc:	f1ba 0f00 	cmp.w	sl, #0
   133c0:	f100 0414 	add.w	r4, r0, #20
   133c4:	dd09      	ble.n	133da <__lshift+0x4e>
   133c6:	2300      	movs	r3, #0
   133c8:	461a      	mov	r2, r3
   133ca:	4625      	mov	r5, r4
   133cc:	3301      	adds	r3, #1
   133ce:	4553      	cmp	r3, sl
   133d0:	f845 2b04 	str.w	r2, [r5], #4
   133d4:	d1fa      	bne.n	133cc <__lshift+0x40>
   133d6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   133da:	693a      	ldr	r2, [r7, #16]
   133dc:	f107 0314 	add.w	r3, r7, #20
   133e0:	f01b 0b1f 	ands.w	fp, fp, #31
   133e4:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   133e8:	d021      	beq.n	1342e <__lshift+0xa2>
   133ea:	f1cb 0a20 	rsb	sl, fp, #32
   133ee:	2200      	movs	r2, #0
   133f0:	e000      	b.n	133f4 <__lshift+0x68>
   133f2:	462c      	mov	r4, r5
   133f4:	6819      	ldr	r1, [r3, #0]
   133f6:	4625      	mov	r5, r4
   133f8:	fa01 f10b 	lsl.w	r1, r1, fp
   133fc:	430a      	orrs	r2, r1
   133fe:	f845 2b04 	str.w	r2, [r5], #4
   13402:	f853 2b04 	ldr.w	r2, [r3], #4
   13406:	4563      	cmp	r3, ip
   13408:	fa22 f20a 	lsr.w	r2, r2, sl
   1340c:	d3f1      	bcc.n	133f2 <__lshift+0x66>
   1340e:	6062      	str	r2, [r4, #4]
   13410:	b10a      	cbz	r2, 13416 <__lshift+0x8a>
   13412:	f109 0602 	add.w	r6, r9, #2
   13416:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   1341a:	687a      	ldr	r2, [r7, #4]
   1341c:	3e01      	subs	r6, #1
   1341e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13422:	6106      	str	r6, [r0, #16]
   13424:	6039      	str	r1, [r7, #0]
   13426:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1342a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1342e:	f853 2b04 	ldr.w	r2, [r3], #4
   13432:	f844 2b04 	str.w	r2, [r4], #4
   13436:	459c      	cmp	ip, r3
   13438:	d9ed      	bls.n	13416 <__lshift+0x8a>
   1343a:	f853 2b04 	ldr.w	r2, [r3], #4
   1343e:	f844 2b04 	str.w	r2, [r4], #4
   13442:	459c      	cmp	ip, r3
   13444:	d8f3      	bhi.n	1342e <__lshift+0xa2>
   13446:	e7e6      	b.n	13416 <__lshift+0x8a>

00013448 <__mcmp>:
   13448:	6902      	ldr	r2, [r0, #16]
   1344a:	690b      	ldr	r3, [r1, #16]
   1344c:	1ad2      	subs	r2, r2, r3
   1344e:	b410      	push	{r4}
   13450:	d115      	bne.n	1347e <__mcmp+0x36>
   13452:	009b      	lsls	r3, r3, #2
   13454:	3014      	adds	r0, #20
   13456:	3114      	adds	r1, #20
   13458:	4419      	add	r1, r3
   1345a:	4403      	add	r3, r0
   1345c:	e001      	b.n	13462 <__mcmp+0x1a>
   1345e:	4298      	cmp	r0, r3
   13460:	d211      	bcs.n	13486 <__mcmp+0x3e>
   13462:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   13466:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   1346a:	42a2      	cmp	r2, r4
   1346c:	d0f7      	beq.n	1345e <__mcmp+0x16>
   1346e:	4294      	cmp	r4, r2
   13470:	bf94      	ite	ls
   13472:	2001      	movls	r0, #1
   13474:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   13478:	f85d 4b04 	ldr.w	r4, [sp], #4
   1347c:	4770      	bx	lr
   1347e:	4610      	mov	r0, r2
   13480:	f85d 4b04 	ldr.w	r4, [sp], #4
   13484:	4770      	bx	lr
   13486:	2000      	movs	r0, #0
   13488:	f85d 4b04 	ldr.w	r4, [sp], #4
   1348c:	4770      	bx	lr
   1348e:	bf00      	nop

00013490 <__mdiff>:
   13490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13494:	460d      	mov	r5, r1
   13496:	4604      	mov	r4, r0
   13498:	4611      	mov	r1, r2
   1349a:	4628      	mov	r0, r5
   1349c:	4616      	mov	r6, r2
   1349e:	f7ff ffd3 	bl	13448 <__mcmp>
   134a2:	1e07      	subs	r7, r0, #0
   134a4:	d055      	beq.n	13552 <__mdiff+0xc2>
   134a6:	db4e      	blt.n	13546 <__mdiff+0xb6>
   134a8:	f04f 0800 	mov.w	r8, #0
   134ac:	6869      	ldr	r1, [r5, #4]
   134ae:	4620      	mov	r0, r4
   134b0:	f7ff fdac 	bl	1300c <_Balloc>
   134b4:	692f      	ldr	r7, [r5, #16]
   134b6:	6932      	ldr	r2, [r6, #16]
   134b8:	f8c0 800c 	str.w	r8, [r0, #12]
   134bc:	3514      	adds	r5, #20
   134be:	3614      	adds	r6, #20
   134c0:	f100 0314 	add.w	r3, r0, #20
   134c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   134c8:	eb06 0882 	add.w	r8, r6, r2, lsl #2
   134cc:	2100      	movs	r1, #0
   134ce:	f856 2b04 	ldr.w	r2, [r6], #4
   134d2:	f855 4b04 	ldr.w	r4, [r5], #4
   134d6:	fa1f f982 	uxth.w	r9, r2
   134da:	fa11 fa84 	uxtah	sl, r1, r4
   134de:	0c11      	lsrs	r1, r2, #16
   134e0:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
   134e4:	ebc9 020a 	rsb	r2, r9, sl
   134e8:	eb01 4122 	add.w	r1, r1, r2, asr #16
   134ec:	b292      	uxth	r2, r2
   134ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   134f2:	45b0      	cmp	r8, r6
   134f4:	f843 2b04 	str.w	r2, [r3], #4
   134f8:	ea4f 4121 	mov.w	r1, r1, asr #16
   134fc:	462c      	mov	r4, r5
   134fe:	d8e6      	bhi.n	134ce <__mdiff+0x3e>
   13500:	45ac      	cmp	ip, r5
   13502:	4698      	mov	r8, r3
   13504:	d915      	bls.n	13532 <__mdiff+0xa2>
   13506:	f854 6b04 	ldr.w	r6, [r4], #4
   1350a:	fa11 f186 	uxtah	r1, r1, r6
   1350e:	0c36      	lsrs	r6, r6, #16
   13510:	eb06 4621 	add.w	r6, r6, r1, asr #16
   13514:	b289      	uxth	r1, r1
   13516:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   1351a:	45a4      	cmp	ip, r4
   1351c:	f843 2b04 	str.w	r2, [r3], #4
   13520:	ea4f 4126 	mov.w	r1, r6, asr #16
   13524:	d8ef      	bhi.n	13506 <__mdiff+0x76>
   13526:	43eb      	mvns	r3, r5
   13528:	4463      	add	r3, ip
   1352a:	f023 0303 	bic.w	r3, r3, #3
   1352e:	3304      	adds	r3, #4
   13530:	4443      	add	r3, r8
   13532:	3b04      	subs	r3, #4
   13534:	b922      	cbnz	r2, 13540 <__mdiff+0xb0>
   13536:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1353a:	3f01      	subs	r7, #1
   1353c:	2a00      	cmp	r2, #0
   1353e:	d0fa      	beq.n	13536 <__mdiff+0xa6>
   13540:	6107      	str	r7, [r0, #16]
   13542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13546:	462b      	mov	r3, r5
   13548:	f04f 0801 	mov.w	r8, #1
   1354c:	4635      	mov	r5, r6
   1354e:	461e      	mov	r6, r3
   13550:	e7ac      	b.n	134ac <__mdiff+0x1c>
   13552:	4620      	mov	r0, r4
   13554:	4639      	mov	r1, r7
   13556:	f7ff fd59 	bl	1300c <_Balloc>
   1355a:	2301      	movs	r3, #1
   1355c:	6147      	str	r7, [r0, #20]
   1355e:	6103      	str	r3, [r0, #16]
   13560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00013564 <__d2b>:
   13564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13568:	b083      	sub	sp, #12
   1356a:	2101      	movs	r1, #1
   1356c:	461d      	mov	r5, r3
   1356e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   13572:	4614      	mov	r4, r2
   13574:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   13576:	f7ff fd49 	bl	1300c <_Balloc>
   1357a:	f3c5 0313 	ubfx	r3, r5, #0, #20
   1357e:	4680      	mov	r8, r0
   13580:	b10e      	cbz	r6, 13586 <__d2b+0x22>
   13582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13586:	9301      	str	r3, [sp, #4]
   13588:	b324      	cbz	r4, 135d4 <__d2b+0x70>
   1358a:	a802      	add	r0, sp, #8
   1358c:	f840 4d08 	str.w	r4, [r0, #-8]!
   13590:	4668      	mov	r0, sp
   13592:	f7ff fdd7 	bl	13144 <__lo0bits>
   13596:	2800      	cmp	r0, #0
   13598:	d135      	bne.n	13606 <__d2b+0xa2>
   1359a:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1359e:	f8c8 2014 	str.w	r2, [r8, #20]
   135a2:	2b00      	cmp	r3, #0
   135a4:	bf0c      	ite	eq
   135a6:	2401      	moveq	r4, #1
   135a8:	2402      	movne	r4, #2
   135aa:	f8c8 3018 	str.w	r3, [r8, #24]
   135ae:	f8c8 4010 	str.w	r4, [r8, #16]
   135b2:	b9de      	cbnz	r6, 135ec <__d2b+0x88>
   135b4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   135b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   135bc:	6038      	str	r0, [r7, #0]
   135be:	6918      	ldr	r0, [r3, #16]
   135c0:	f7ff fda0 	bl	13104 <__hi0bits>
   135c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   135c6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   135ca:	6018      	str	r0, [r3, #0]
   135cc:	4640      	mov	r0, r8
   135ce:	b003      	add	sp, #12
   135d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   135d4:	a801      	add	r0, sp, #4
   135d6:	f7ff fdb5 	bl	13144 <__lo0bits>
   135da:	2401      	movs	r4, #1
   135dc:	9b01      	ldr	r3, [sp, #4]
   135de:	f8c8 3014 	str.w	r3, [r8, #20]
   135e2:	3020      	adds	r0, #32
   135e4:	f8c8 4010 	str.w	r4, [r8, #16]
   135e8:	2e00      	cmp	r6, #0
   135ea:	d0e3      	beq.n	135b4 <__d2b+0x50>
   135ec:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
   135f0:	eb09 0300 	add.w	r3, r9, r0
   135f4:	603b      	str	r3, [r7, #0]
   135f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   135f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   135fc:	6018      	str	r0, [r3, #0]
   135fe:	4640      	mov	r0, r8
   13600:	b003      	add	sp, #12
   13602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13606:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1360a:	f1c0 0120 	rsb	r1, r0, #32
   1360e:	fa03 f101 	lsl.w	r1, r3, r1
   13612:	430a      	orrs	r2, r1
   13614:	40c3      	lsrs	r3, r0
   13616:	9301      	str	r3, [sp, #4]
   13618:	f8c8 2014 	str.w	r2, [r8, #20]
   1361c:	e7c1      	b.n	135a2 <__d2b+0x3e>
   1361e:	bf00      	nop

00013620 <__sread>:
   13620:	b510      	push	{r4, lr}
   13622:	460c      	mov	r4, r1
   13624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   13628:	f000 f9b0 	bl	1398c <_read_r>
   1362c:	2800      	cmp	r0, #0
   1362e:	db03      	blt.n	13638 <__sread+0x18>
   13630:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13632:	4403      	add	r3, r0
   13634:	6523      	str	r3, [r4, #80]	; 0x50
   13636:	bd10      	pop	{r4, pc}
   13638:	89a3      	ldrh	r3, [r4, #12]
   1363a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1363e:	81a3      	strh	r3, [r4, #12]
   13640:	bd10      	pop	{r4, pc}
   13642:	bf00      	nop

00013644 <__swrite>:
   13644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13648:	460c      	mov	r4, r1
   1364a:	8989      	ldrh	r1, [r1, #12]
   1364c:	461d      	mov	r5, r3
   1364e:	05cb      	lsls	r3, r1, #23
   13650:	4616      	mov	r6, r2
   13652:	4607      	mov	r7, r0
   13654:	d506      	bpl.n	13664 <__swrite+0x20>
   13656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1365a:	2200      	movs	r2, #0
   1365c:	2302      	movs	r3, #2
   1365e:	f000 f981 	bl	13964 <_lseek_r>
   13662:	89a1      	ldrh	r1, [r4, #12]
   13664:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   13668:	81a1      	strh	r1, [r4, #12]
   1366a:	4638      	mov	r0, r7
   1366c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13670:	4632      	mov	r2, r6
   13672:	462b      	mov	r3, r5
   13674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13678:	f7fe b928 	b.w	118cc <_write_r>

0001367c <__sseek>:
   1367c:	b510      	push	{r4, lr}
   1367e:	460c      	mov	r4, r1
   13680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   13684:	f000 f96e 	bl	13964 <_lseek_r>
   13688:	89a3      	ldrh	r3, [r4, #12]
   1368a:	1c42      	adds	r2, r0, #1
   1368c:	bf0e      	itee	eq
   1368e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   13692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   13696:	6520      	strne	r0, [r4, #80]	; 0x50
   13698:	81a3      	strh	r3, [r4, #12]
   1369a:	bd10      	pop	{r4, pc}

0001369c <__sclose>:
   1369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   136a0:	f000 b8e0 	b.w	13864 <_close_r>

000136a4 <__ssprint_r>:
   136a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136a8:	6894      	ldr	r4, [r2, #8]
   136aa:	6816      	ldr	r6, [r2, #0]
   136ac:	b083      	sub	sp, #12
   136ae:	4692      	mov	sl, r2
   136b0:	4680      	mov	r8, r0
   136b2:	460d      	mov	r5, r1
   136b4:	2c00      	cmp	r4, #0
   136b6:	d06f      	beq.n	13798 <__ssprint_r+0xf4>
   136b8:	f04f 0b00 	mov.w	fp, #0
   136bc:	6808      	ldr	r0, [r1, #0]
   136be:	688b      	ldr	r3, [r1, #8]
   136c0:	465c      	mov	r4, fp
   136c2:	2c00      	cmp	r4, #0
   136c4:	d043      	beq.n	1374e <__ssprint_r+0xaa>
   136c6:	429c      	cmp	r4, r3
   136c8:	461f      	mov	r7, r3
   136ca:	d345      	bcc.n	13758 <__ssprint_r+0xb4>
   136cc:	89ab      	ldrh	r3, [r5, #12]
   136ce:	f413 6f90 	tst.w	r3, #1152	; 0x480
   136d2:	d044      	beq.n	1375e <__ssprint_r+0xba>
   136d4:	696f      	ldr	r7, [r5, #20]
   136d6:	6929      	ldr	r1, [r5, #16]
   136d8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   136dc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   136e0:	ebc1 0900 	rsb	r9, r1, r0
   136e4:	1c62      	adds	r2, r4, #1
   136e6:	107f      	asrs	r7, r7, #1
   136e8:	444a      	add	r2, r9
   136ea:	4297      	cmp	r7, r2
   136ec:	bf34      	ite	cc
   136ee:	4617      	movcc	r7, r2
   136f0:	463a      	movcs	r2, r7
   136f2:	055b      	lsls	r3, r3, #21
   136f4:	d535      	bpl.n	13762 <__ssprint_r+0xbe>
   136f6:	4611      	mov	r1, r2
   136f8:	4640      	mov	r0, r8
   136fa:	f7fb fd81 	bl	f200 <_malloc_r>
   136fe:	2800      	cmp	r0, #0
   13700:	d039      	beq.n	13776 <__ssprint_r+0xd2>
   13702:	6929      	ldr	r1, [r5, #16]
   13704:	9001      	str	r0, [sp, #4]
   13706:	464a      	mov	r2, r9
   13708:	f7fc f892 	bl	f830 <memcpy>
   1370c:	89aa      	ldrh	r2, [r5, #12]
   1370e:	9b01      	ldr	r3, [sp, #4]
   13710:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13718:	81aa      	strh	r2, [r5, #12]
   1371a:	ebc9 0207 	rsb	r2, r9, r7
   1371e:	eb03 0009 	add.w	r0, r3, r9
   13722:	616f      	str	r7, [r5, #20]
   13724:	612b      	str	r3, [r5, #16]
   13726:	6028      	str	r0, [r5, #0]
   13728:	60aa      	str	r2, [r5, #8]
   1372a:	4627      	mov	r7, r4
   1372c:	46a1      	mov	r9, r4
   1372e:	464a      	mov	r2, r9
   13730:	4659      	mov	r1, fp
   13732:	f7fc f917 	bl	f964 <memmove>
   13736:	f8da 2008 	ldr.w	r2, [sl, #8]
   1373a:	68ab      	ldr	r3, [r5, #8]
   1373c:	6828      	ldr	r0, [r5, #0]
   1373e:	1bdb      	subs	r3, r3, r7
   13740:	4448      	add	r0, r9
   13742:	1b14      	subs	r4, r2, r4
   13744:	60ab      	str	r3, [r5, #8]
   13746:	6028      	str	r0, [r5, #0]
   13748:	f8ca 4008 	str.w	r4, [sl, #8]
   1374c:	b324      	cbz	r4, 13798 <__ssprint_r+0xf4>
   1374e:	f8d6 b000 	ldr.w	fp, [r6]
   13752:	6874      	ldr	r4, [r6, #4]
   13754:	3608      	adds	r6, #8
   13756:	e7b4      	b.n	136c2 <__ssprint_r+0x1e>
   13758:	4627      	mov	r7, r4
   1375a:	46a1      	mov	r9, r4
   1375c:	e7e7      	b.n	1372e <__ssprint_r+0x8a>
   1375e:	46b9      	mov	r9, r7
   13760:	e7e5      	b.n	1372e <__ssprint_r+0x8a>
   13762:	4640      	mov	r0, r8
   13764:	f7fc f9e0 	bl	fb28 <_realloc_r>
   13768:	4603      	mov	r3, r0
   1376a:	2800      	cmp	r0, #0
   1376c:	d1d5      	bne.n	1371a <__ssprint_r+0x76>
   1376e:	4640      	mov	r0, r8
   13770:	6929      	ldr	r1, [r5, #16]
   13772:	f7ff fae3 	bl	12d3c <_free_r>
   13776:	89aa      	ldrh	r2, [r5, #12]
   13778:	230c      	movs	r3, #12
   1377a:	f8c8 3000 	str.w	r3, [r8]
   1377e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13782:	2300      	movs	r3, #0
   13784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13788:	81aa      	strh	r2, [r5, #12]
   1378a:	f8ca 3008 	str.w	r3, [sl, #8]
   1378e:	f8ca 3004 	str.w	r3, [sl, #4]
   13792:	b003      	add	sp, #12
   13794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13798:	4620      	mov	r0, r4
   1379a:	f8ca 4004 	str.w	r4, [sl, #4]
   1379e:	b003      	add	sp, #12
   137a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000137a4 <_vasnprintf_r>:
   137a4:	b570      	push	{r4, r5, r6, lr}
   137a6:	4614      	mov	r4, r2
   137a8:	b09a      	sub	sp, #104	; 0x68
   137aa:	6815      	ldr	r5, [r2, #0]
   137ac:	b109      	cbz	r1, 137b2 <_vasnprintf_r+0xe>
   137ae:	2d00      	cmp	r5, #0
   137b0:	d11a      	bne.n	137e8 <_vasnprintf_r+0x44>
   137b2:	2500      	movs	r5, #0
   137b4:	f44f 7222 	mov.w	r2, #648	; 0x288
   137b8:	f8ad 200c 	strh.w	r2, [sp, #12]
   137bc:	9500      	str	r5, [sp, #0]
   137be:	9504      	str	r5, [sp, #16]
   137c0:	461a      	mov	r2, r3
   137c2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   137c6:	4669      	mov	r1, sp
   137c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   137ca:	9502      	str	r5, [sp, #8]
   137cc:	9505      	str	r5, [sp, #20]
   137ce:	f8ad 600e 	strh.w	r6, [sp, #14]
   137d2:	f7fc fd79 	bl	102c8 <_svfprintf_r>
   137d6:	2800      	cmp	r0, #0
   137d8:	db11      	blt.n	137fe <_vasnprintf_r+0x5a>
   137da:	9b00      	ldr	r3, [sp, #0]
   137dc:	6020      	str	r0, [r4, #0]
   137de:	2200      	movs	r2, #0
   137e0:	701a      	strb	r2, [r3, #0]
   137e2:	9804      	ldr	r0, [sp, #16]
   137e4:	b01a      	add	sp, #104	; 0x68
   137e6:	bd70      	pop	{r4, r5, r6, pc}
   137e8:	f44f 62c1 	mov.w	r2, #1544	; 0x608
   137ec:	9100      	str	r1, [sp, #0]
   137ee:	9104      	str	r1, [sp, #16]
   137f0:	f8ad 200c 	strh.w	r2, [sp, #12]
   137f4:	dae4      	bge.n	137c0 <_vasnprintf_r+0x1c>
   137f6:	238b      	movs	r3, #139	; 0x8b
   137f8:	6003      	str	r3, [r0, #0]
   137fa:	2000      	movs	r0, #0
   137fc:	e7f2      	b.n	137e4 <_vasnprintf_r+0x40>
   137fe:	2000      	movs	r0, #0
   13800:	e7f0      	b.n	137e4 <_vasnprintf_r+0x40>
   13802:	bf00      	nop

00013804 <_calloc_r>:
   13804:	b510      	push	{r4, lr}
   13806:	fb02 f101 	mul.w	r1, r2, r1
   1380a:	f7fb fcf9 	bl	f200 <_malloc_r>
   1380e:	4604      	mov	r4, r0
   13810:	b168      	cbz	r0, 1382e <_calloc_r+0x2a>
   13812:	f850 2c04 	ldr.w	r2, [r0, #-4]
   13816:	f022 0203 	bic.w	r2, r2, #3
   1381a:	3a04      	subs	r2, #4
   1381c:	2a24      	cmp	r2, #36	; 0x24
   1381e:	d818      	bhi.n	13852 <_calloc_r+0x4e>
   13820:	2a13      	cmp	r2, #19
   13822:	d806      	bhi.n	13832 <_calloc_r+0x2e>
   13824:	4603      	mov	r3, r0
   13826:	2200      	movs	r2, #0
   13828:	601a      	str	r2, [r3, #0]
   1382a:	605a      	str	r2, [r3, #4]
   1382c:	609a      	str	r2, [r3, #8]
   1382e:	4620      	mov	r0, r4
   13830:	bd10      	pop	{r4, pc}
   13832:	2300      	movs	r3, #0
   13834:	2a1b      	cmp	r2, #27
   13836:	6003      	str	r3, [r0, #0]
   13838:	6043      	str	r3, [r0, #4]
   1383a:	d90f      	bls.n	1385c <_calloc_r+0x58>
   1383c:	2a24      	cmp	r2, #36	; 0x24
   1383e:	6083      	str	r3, [r0, #8]
   13840:	60c3      	str	r3, [r0, #12]
   13842:	bf05      	ittet	eq
   13844:	6103      	streq	r3, [r0, #16]
   13846:	6143      	streq	r3, [r0, #20]
   13848:	f100 0310 	addne.w	r3, r0, #16
   1384c:	f100 0318 	addeq.w	r3, r0, #24
   13850:	e7e9      	b.n	13826 <_calloc_r+0x22>
   13852:	2100      	movs	r1, #0
   13854:	f7fc f8e6 	bl	fa24 <memset>
   13858:	4620      	mov	r0, r4
   1385a:	bd10      	pop	{r4, pc}
   1385c:	f100 0308 	add.w	r3, r0, #8
   13860:	e7e1      	b.n	13826 <_calloc_r+0x22>
   13862:	bf00      	nop

00013864 <_close_r>:
   13864:	b538      	push	{r3, r4, r5, lr}
   13866:	4c07      	ldr	r4, [pc, #28]	; (13884 <_close_r+0x20>)
   13868:	2300      	movs	r3, #0
   1386a:	4605      	mov	r5, r0
   1386c:	4608      	mov	r0, r1
   1386e:	6023      	str	r3, [r4, #0]
   13870:	f7ef ff19 	bl	36a6 <_close>
   13874:	1c43      	adds	r3, r0, #1
   13876:	d000      	beq.n	1387a <_close_r+0x16>
   13878:	bd38      	pop	{r3, r4, r5, pc}
   1387a:	6823      	ldr	r3, [r4, #0]
   1387c:	2b00      	cmp	r3, #0
   1387e:	d0fb      	beq.n	13878 <_close_r+0x14>
   13880:	602b      	str	r3, [r5, #0]
   13882:	bd38      	pop	{r3, r4, r5, pc}
   13884:	1fff9c90 	.word	0x1fff9c90

00013888 <_fclose_r>:
   13888:	b570      	push	{r4, r5, r6, lr}
   1388a:	460c      	mov	r4, r1
   1388c:	4605      	mov	r5, r0
   1388e:	b131      	cbz	r1, 1389e <_fclose_r+0x16>
   13890:	b110      	cbz	r0, 13898 <_fclose_r+0x10>
   13892:	6b83      	ldr	r3, [r0, #56]	; 0x38
   13894:	2b00      	cmp	r3, #0
   13896:	d02f      	beq.n	138f8 <_fclose_r+0x70>
   13898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1389c:	b90b      	cbnz	r3, 138a2 <_fclose_r+0x1a>
   1389e:	2000      	movs	r0, #0
   138a0:	bd70      	pop	{r4, r5, r6, pc}
   138a2:	4628      	mov	r0, r5
   138a4:	4621      	mov	r1, r4
   138a6:	f7ff f949 	bl	12b3c <_fflush_r>
   138aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   138ac:	4606      	mov	r6, r0
   138ae:	b133      	cbz	r3, 138be <_fclose_r+0x36>
   138b0:	4628      	mov	r0, r5
   138b2:	69e1      	ldr	r1, [r4, #28]
   138b4:	4798      	blx	r3
   138b6:	2800      	cmp	r0, #0
   138b8:	bfb8      	it	lt
   138ba:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
   138be:	89a3      	ldrh	r3, [r4, #12]
   138c0:	061b      	lsls	r3, r3, #24
   138c2:	d41c      	bmi.n	138fe <_fclose_r+0x76>
   138c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   138c6:	b141      	cbz	r1, 138da <_fclose_r+0x52>
   138c8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   138cc:	4299      	cmp	r1, r3
   138ce:	d002      	beq.n	138d6 <_fclose_r+0x4e>
   138d0:	4628      	mov	r0, r5
   138d2:	f7ff fa33 	bl	12d3c <_free_r>
   138d6:	2300      	movs	r3, #0
   138d8:	6323      	str	r3, [r4, #48]	; 0x30
   138da:	6c61      	ldr	r1, [r4, #68]	; 0x44
   138dc:	b121      	cbz	r1, 138e8 <_fclose_r+0x60>
   138de:	4628      	mov	r0, r5
   138e0:	f7ff fa2c 	bl	12d3c <_free_r>
   138e4:	2300      	movs	r3, #0
   138e6:	6463      	str	r3, [r4, #68]	; 0x44
   138e8:	f7ff f9be 	bl	12c68 <__sfp_lock_acquire>
   138ec:	2300      	movs	r3, #0
   138ee:	81a3      	strh	r3, [r4, #12]
   138f0:	f7ff f9bc 	bl	12c6c <__sfp_lock_release>
   138f4:	4630      	mov	r0, r6
   138f6:	bd70      	pop	{r4, r5, r6, pc}
   138f8:	f7ff f93c 	bl	12b74 <__sinit>
   138fc:	e7cc      	b.n	13898 <_fclose_r+0x10>
   138fe:	4628      	mov	r0, r5
   13900:	6921      	ldr	r1, [r4, #16]
   13902:	f7ff fa1b 	bl	12d3c <_free_r>
   13906:	e7dd      	b.n	138c4 <_fclose_r+0x3c>

00013908 <fclose>:
   13908:	4b02      	ldr	r3, [pc, #8]	; (13914 <fclose+0xc>)
   1390a:	4601      	mov	r1, r0
   1390c:	6818      	ldr	r0, [r3, #0]
   1390e:	f7ff bfbb 	b.w	13888 <_fclose_r>
   13912:	bf00      	nop
   13914:	1fff88f0 	.word	0x1fff88f0

00013918 <_fstat_r>:
   13918:	b538      	push	{r3, r4, r5, lr}
   1391a:	4c08      	ldr	r4, [pc, #32]	; (1393c <_fstat_r+0x24>)
   1391c:	2300      	movs	r3, #0
   1391e:	4605      	mov	r5, r0
   13920:	4608      	mov	r0, r1
   13922:	4611      	mov	r1, r2
   13924:	6023      	str	r3, [r4, #0]
   13926:	f7ef fec1 	bl	36ac <_fstat>
   1392a:	1c43      	adds	r3, r0, #1
   1392c:	d000      	beq.n	13930 <_fstat_r+0x18>
   1392e:	bd38      	pop	{r3, r4, r5, pc}
   13930:	6823      	ldr	r3, [r4, #0]
   13932:	2b00      	cmp	r3, #0
   13934:	d0fb      	beq.n	1392e <_fstat_r+0x16>
   13936:	602b      	str	r3, [r5, #0]
   13938:	bd38      	pop	{r3, r4, r5, pc}
   1393a:	bf00      	nop
   1393c:	1fff9c90 	.word	0x1fff9c90

00013940 <_isatty_r>:
   13940:	b538      	push	{r3, r4, r5, lr}
   13942:	4c07      	ldr	r4, [pc, #28]	; (13960 <_isatty_r+0x20>)
   13944:	2300      	movs	r3, #0
   13946:	4605      	mov	r5, r0
   13948:	4608      	mov	r0, r1
   1394a:	6023      	str	r3, [r4, #0]
   1394c:	f7ef feb3 	bl	36b6 <_isatty>
   13950:	1c43      	adds	r3, r0, #1
   13952:	d000      	beq.n	13956 <_isatty_r+0x16>
   13954:	bd38      	pop	{r3, r4, r5, pc}
   13956:	6823      	ldr	r3, [r4, #0]
   13958:	2b00      	cmp	r3, #0
   1395a:	d0fb      	beq.n	13954 <_isatty_r+0x14>
   1395c:	602b      	str	r3, [r5, #0]
   1395e:	bd38      	pop	{r3, r4, r5, pc}
   13960:	1fff9c90 	.word	0x1fff9c90

00013964 <_lseek_r>:
   13964:	b570      	push	{r4, r5, r6, lr}
   13966:	4c08      	ldr	r4, [pc, #32]	; (13988 <_lseek_r+0x24>)
   13968:	4606      	mov	r6, r0
   1396a:	2500      	movs	r5, #0
   1396c:	4608      	mov	r0, r1
   1396e:	4611      	mov	r1, r2
   13970:	461a      	mov	r2, r3
   13972:	6025      	str	r5, [r4, #0]
   13974:	f7ef fea1 	bl	36ba <_lseek>
   13978:	1c43      	adds	r3, r0, #1
   1397a:	d000      	beq.n	1397e <_lseek_r+0x1a>
   1397c:	bd70      	pop	{r4, r5, r6, pc}
   1397e:	6823      	ldr	r3, [r4, #0]
   13980:	2b00      	cmp	r3, #0
   13982:	d0fb      	beq.n	1397c <_lseek_r+0x18>
   13984:	6033      	str	r3, [r6, #0]
   13986:	bd70      	pop	{r4, r5, r6, pc}
   13988:	1fff9c90 	.word	0x1fff9c90

0001398c <_read_r>:
   1398c:	b570      	push	{r4, r5, r6, lr}
   1398e:	4c08      	ldr	r4, [pc, #32]	; (139b0 <_read_r+0x24>)
   13990:	4606      	mov	r6, r0
   13992:	2500      	movs	r5, #0
   13994:	4608      	mov	r0, r1
   13996:	4611      	mov	r1, r2
   13998:	461a      	mov	r2, r3
   1399a:	6025      	str	r5, [r4, #0]
   1399c:	f7ef fe81 	bl	36a2 <_read>
   139a0:	1c43      	adds	r3, r0, #1
   139a2:	d000      	beq.n	139a6 <_read_r+0x1a>
   139a4:	bd70      	pop	{r4, r5, r6, pc}
   139a6:	6823      	ldr	r3, [r4, #0]
   139a8:	2b00      	cmp	r3, #0
   139aa:	d0fb      	beq.n	139a4 <_read_r+0x18>
   139ac:	6033      	str	r3, [r6, #0]
   139ae:	bd70      	pop	{r4, r5, r6, pc}
   139b0:	1fff9c90 	.word	0x1fff9c90

000139b4 <__aeabi_uldivmod>:
   139b4:	b94b      	cbnz	r3, 139ca <__aeabi_uldivmod+0x16>
   139b6:	b942      	cbnz	r2, 139ca <__aeabi_uldivmod+0x16>
   139b8:	2900      	cmp	r1, #0
   139ba:	bf08      	it	eq
   139bc:	2800      	cmpeq	r0, #0
   139be:	d002      	beq.n	139c6 <__aeabi_uldivmod+0x12>
   139c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   139c4:	4608      	mov	r0, r1
   139c6:	f000 b83b 	b.w	13a40 <__aeabi_idiv0>
   139ca:	b082      	sub	sp, #8
   139cc:	46ec      	mov	ip, sp
   139ce:	e92d 5000 	stmdb	sp!, {ip, lr}
   139d2:	f000 f81d 	bl	13a10 <__gnu_uldivmod_helper>
   139d6:	f8dd e004 	ldr.w	lr, [sp, #4]
   139da:	b002      	add	sp, #8
   139dc:	bc0c      	pop	{r2, r3}
   139de:	4770      	bx	lr

000139e0 <__gnu_ldivmod_helper>:
   139e0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   139e4:	9e06      	ldr	r6, [sp, #24]
   139e6:	4614      	mov	r4, r2
   139e8:	461d      	mov	r5, r3
   139ea:	4680      	mov	r8, r0
   139ec:	4689      	mov	r9, r1
   139ee:	f000 f829 	bl	13a44 <__divdi3>
   139f2:	fb04 f301 	mul.w	r3, r4, r1
   139f6:	fb00 3305 	mla	r3, r0, r5, r3
   139fa:	fba4 4500 	umull	r4, r5, r4, r0
   139fe:	441d      	add	r5, r3
   13a00:	ebb8 0404 	subs.w	r4, r8, r4
   13a04:	eb69 0505 	sbc.w	r5, r9, r5
   13a08:	e9c6 4500 	strd	r4, r5, [r6]
   13a0c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00013a10 <__gnu_uldivmod_helper>:
   13a10:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   13a14:	9e06      	ldr	r6, [sp, #24]
   13a16:	4614      	mov	r4, r2
   13a18:	4680      	mov	r8, r0
   13a1a:	4689      	mov	r9, r1
   13a1c:	461d      	mov	r5, r3
   13a1e:	f000 f95d 	bl	13cdc <__udivdi3>
   13a22:	fb00 f505 	mul.w	r5, r0, r5
   13a26:	fb04 5301 	mla	r3, r4, r1, r5
   13a2a:	fba0 4504 	umull	r4, r5, r0, r4
   13a2e:	441d      	add	r5, r3
   13a30:	ebb8 0404 	subs.w	r4, r8, r4
   13a34:	eb69 0505 	sbc.w	r5, r9, r5
   13a38:	e9c6 4500 	strd	r4, r5, [r6]
   13a3c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00013a40 <__aeabi_idiv0>:
   13a40:	4770      	bx	lr
   13a42:	bf00      	nop

00013a44 <__divdi3>:
   13a44:	2900      	cmp	r1, #0
   13a46:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13a4a:	f2c0 809f 	blt.w	13b8c <__divdi3+0x148>
   13a4e:	2400      	movs	r4, #0
   13a50:	2b00      	cmp	r3, #0
   13a52:	f2c0 8096 	blt.w	13b82 <__divdi3+0x13e>
   13a56:	4615      	mov	r5, r2
   13a58:	4606      	mov	r6, r0
   13a5a:	460f      	mov	r7, r1
   13a5c:	2b00      	cmp	r3, #0
   13a5e:	d13e      	bne.n	13ade <__divdi3+0x9a>
   13a60:	428a      	cmp	r2, r1
   13a62:	d957      	bls.n	13b14 <__divdi3+0xd0>
   13a64:	fab2 f382 	clz	r3, r2
   13a68:	b14b      	cbz	r3, 13a7e <__divdi3+0x3a>
   13a6a:	f1c3 0220 	rsb	r2, r3, #32
   13a6e:	fa01 f703 	lsl.w	r7, r1, r3
   13a72:	fa20 f202 	lsr.w	r2, r0, r2
   13a76:	409d      	lsls	r5, r3
   13a78:	4317      	orrs	r7, r2
   13a7a:	fa00 f603 	lsl.w	r6, r0, r3
   13a7e:	0c29      	lsrs	r1, r5, #16
   13a80:	fbb7 f2f1 	udiv	r2, r7, r1
   13a84:	0c33      	lsrs	r3, r6, #16
   13a86:	fb01 7c12 	mls	ip, r1, r2, r7
   13a8a:	b2a8      	uxth	r0, r5
   13a8c:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
   13a90:	fb00 f302 	mul.w	r3, r0, r2
   13a94:	42bb      	cmp	r3, r7
   13a96:	d909      	bls.n	13aac <__divdi3+0x68>
   13a98:	197f      	adds	r7, r7, r5
   13a9a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   13a9e:	f080 8101 	bcs.w	13ca4 <__divdi3+0x260>
   13aa2:	42bb      	cmp	r3, r7
   13aa4:	f240 80fe 	bls.w	13ca4 <__divdi3+0x260>
   13aa8:	3a02      	subs	r2, #2
   13aaa:	442f      	add	r7, r5
   13aac:	1aff      	subs	r7, r7, r3
   13aae:	fbb7 f3f1 	udiv	r3, r7, r1
   13ab2:	b2b6      	uxth	r6, r6
   13ab4:	fb01 7113 	mls	r1, r1, r3, r7
   13ab8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   13abc:	fb00 f003 	mul.w	r0, r0, r3
   13ac0:	4288      	cmp	r0, r1
   13ac2:	d908      	bls.n	13ad6 <__divdi3+0x92>
   13ac4:	1949      	adds	r1, r1, r5
   13ac6:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
   13aca:	f080 80ed 	bcs.w	13ca8 <__divdi3+0x264>
   13ace:	4288      	cmp	r0, r1
   13ad0:	f240 80ea 	bls.w	13ca8 <__divdi3+0x264>
   13ad4:	3b02      	subs	r3, #2
   13ad6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   13ada:	2300      	movs	r3, #0
   13adc:	e003      	b.n	13ae6 <__divdi3+0xa2>
   13ade:	428b      	cmp	r3, r1
   13ae0:	d90a      	bls.n	13af8 <__divdi3+0xb4>
   13ae2:	2300      	movs	r3, #0
   13ae4:	461a      	mov	r2, r3
   13ae6:	4610      	mov	r0, r2
   13ae8:	4619      	mov	r1, r3
   13aea:	b114      	cbz	r4, 13af2 <__divdi3+0xae>
   13aec:	4240      	negs	r0, r0
   13aee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13af2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13af6:	4770      	bx	lr
   13af8:	fab3 f883 	clz	r8, r3
   13afc:	f1b8 0f00 	cmp.w	r8, #0
   13b00:	f040 8084 	bne.w	13c0c <__divdi3+0x1c8>
   13b04:	428b      	cmp	r3, r1
   13b06:	d302      	bcc.n	13b0e <__divdi3+0xca>
   13b08:	4282      	cmp	r2, r0
   13b0a:	f200 80de 	bhi.w	13cca <__divdi3+0x286>
   13b0e:	2300      	movs	r3, #0
   13b10:	2201      	movs	r2, #1
   13b12:	e7e8      	b.n	13ae6 <__divdi3+0xa2>
   13b14:	b912      	cbnz	r2, 13b1c <__divdi3+0xd8>
   13b16:	2301      	movs	r3, #1
   13b18:	fbb3 f5f2 	udiv	r5, r3, r2
   13b1c:	fab5 f285 	clz	r2, r5
   13b20:	2a00      	cmp	r2, #0
   13b22:	d139      	bne.n	13b98 <__divdi3+0x154>
   13b24:	1b7f      	subs	r7, r7, r5
   13b26:	0c28      	lsrs	r0, r5, #16
   13b28:	fa1f fc85 	uxth.w	ip, r5
   13b2c:	2301      	movs	r3, #1
   13b2e:	fbb7 f1f0 	udiv	r1, r7, r0
   13b32:	0c32      	lsrs	r2, r6, #16
   13b34:	fb00 7711 	mls	r7, r0, r1, r7
   13b38:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
   13b3c:	fb0c f201 	mul.w	r2, ip, r1
   13b40:	42ba      	cmp	r2, r7
   13b42:	d907      	bls.n	13b54 <__divdi3+0x110>
   13b44:	197f      	adds	r7, r7, r5
   13b46:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   13b4a:	d202      	bcs.n	13b52 <__divdi3+0x10e>
   13b4c:	42ba      	cmp	r2, r7
   13b4e:	f200 80c1 	bhi.w	13cd4 <__divdi3+0x290>
   13b52:	4641      	mov	r1, r8
   13b54:	1abf      	subs	r7, r7, r2
   13b56:	fbb7 f2f0 	udiv	r2, r7, r0
   13b5a:	b2b6      	uxth	r6, r6
   13b5c:	fb00 7012 	mls	r0, r0, r2, r7
   13b60:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   13b64:	fb0c fc02 	mul.w	ip, ip, r2
   13b68:	4584      	cmp	ip, r0
   13b6a:	d907      	bls.n	13b7c <__divdi3+0x138>
   13b6c:	1940      	adds	r0, r0, r5
   13b6e:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   13b72:	d202      	bcs.n	13b7a <__divdi3+0x136>
   13b74:	4584      	cmp	ip, r0
   13b76:	f200 80ab 	bhi.w	13cd0 <__divdi3+0x28c>
   13b7a:	463a      	mov	r2, r7
   13b7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   13b80:	e7b1      	b.n	13ae6 <__divdi3+0xa2>
   13b82:	43e4      	mvns	r4, r4
   13b84:	4252      	negs	r2, r2
   13b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13b8a:	e764      	b.n	13a56 <__divdi3+0x12>
   13b8c:	4240      	negs	r0, r0
   13b8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13b92:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13b96:	e75b      	b.n	13a50 <__divdi3+0xc>
   13b98:	4095      	lsls	r5, r2
   13b9a:	f1c2 0320 	rsb	r3, r2, #32
   13b9e:	fa27 f103 	lsr.w	r1, r7, r3
   13ba2:	0c28      	lsrs	r0, r5, #16
   13ba4:	fa26 f303 	lsr.w	r3, r6, r3
   13ba8:	4097      	lsls	r7, r2
   13baa:	fbb1 f8f0 	udiv	r8, r1, r0
   13bae:	431f      	orrs	r7, r3
   13bb0:	0c3b      	lsrs	r3, r7, #16
   13bb2:	fb00 1118 	mls	r1, r0, r8, r1
   13bb6:	fa1f fc85 	uxth.w	ip, r5
   13bba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   13bbe:	fb0c f308 	mul.w	r3, ip, r8
   13bc2:	428b      	cmp	r3, r1
   13bc4:	fa06 f602 	lsl.w	r6, r6, r2
   13bc8:	d908      	bls.n	13bdc <__divdi3+0x198>
   13bca:	1949      	adds	r1, r1, r5
   13bcc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   13bd0:	d279      	bcs.n	13cc6 <__divdi3+0x282>
   13bd2:	428b      	cmp	r3, r1
   13bd4:	d977      	bls.n	13cc6 <__divdi3+0x282>
   13bd6:	f1a8 0802 	sub.w	r8, r8, #2
   13bda:	4429      	add	r1, r5
   13bdc:	1ac9      	subs	r1, r1, r3
   13bde:	fbb1 f3f0 	udiv	r3, r1, r0
   13be2:	b2bf      	uxth	r7, r7
   13be4:	fb00 1113 	mls	r1, r0, r3, r1
   13be8:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   13bec:	fb0c f203 	mul.w	r2, ip, r3
   13bf0:	42ba      	cmp	r2, r7
   13bf2:	d907      	bls.n	13c04 <__divdi3+0x1c0>
   13bf4:	197f      	adds	r7, r7, r5
   13bf6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
   13bfa:	d260      	bcs.n	13cbe <__divdi3+0x27a>
   13bfc:	42ba      	cmp	r2, r7
   13bfe:	d95e      	bls.n	13cbe <__divdi3+0x27a>
   13c00:	3b02      	subs	r3, #2
   13c02:	442f      	add	r7, r5
   13c04:	1abf      	subs	r7, r7, r2
   13c06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   13c0a:	e790      	b.n	13b2e <__divdi3+0xea>
   13c0c:	f1c8 0220 	rsb	r2, r8, #32
   13c10:	fa03 fc08 	lsl.w	ip, r3, r8
   13c14:	fa25 f302 	lsr.w	r3, r5, r2
   13c18:	ea43 0c0c 	orr.w	ip, r3, ip
   13c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
   13c20:	fa21 f302 	lsr.w	r3, r1, r2
   13c24:	fa01 f708 	lsl.w	r7, r1, r8
   13c28:	fa20 f202 	lsr.w	r2, r0, r2
   13c2c:	fbb3 f1f9 	udiv	r1, r3, r9
   13c30:	4317      	orrs	r7, r2
   13c32:	fb09 3311 	mls	r3, r9, r1, r3
   13c36:	0c3a      	lsrs	r2, r7, #16
   13c38:	fa1f fb8c 	uxth.w	fp, ip
   13c3c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   13c40:	fb0b fa01 	mul.w	sl, fp, r1
   13c44:	459a      	cmp	sl, r3
   13c46:	fa05 f008 	lsl.w	r0, r5, r8
   13c4a:	d908      	bls.n	13c5e <__divdi3+0x21a>
   13c4c:	eb13 030c 	adds.w	r3, r3, ip
   13c50:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   13c54:	d235      	bcs.n	13cc2 <__divdi3+0x27e>
   13c56:	459a      	cmp	sl, r3
   13c58:	d933      	bls.n	13cc2 <__divdi3+0x27e>
   13c5a:	3902      	subs	r1, #2
   13c5c:	4463      	add	r3, ip
   13c5e:	ebca 0303 	rsb	r3, sl, r3
   13c62:	fbb3 f2f9 	udiv	r2, r3, r9
   13c66:	fb09 3312 	mls	r3, r9, r2, r3
   13c6a:	b2bf      	uxth	r7, r7
   13c6c:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   13c70:	fb0b f902 	mul.w	r9, fp, r2
   13c74:	45b9      	cmp	r9, r7
   13c76:	d908      	bls.n	13c8a <__divdi3+0x246>
   13c78:	eb17 070c 	adds.w	r7, r7, ip
   13c7c:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   13c80:	d21b      	bcs.n	13cba <__divdi3+0x276>
   13c82:	45b9      	cmp	r9, r7
   13c84:	d919      	bls.n	13cba <__divdi3+0x276>
   13c86:	3a02      	subs	r2, #2
   13c88:	4467      	add	r7, ip
   13c8a:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   13c8e:	fba5 0100 	umull	r0, r1, r5, r0
   13c92:	ebc9 0707 	rsb	r7, r9, r7
   13c96:	428f      	cmp	r7, r1
   13c98:	f04f 0300 	mov.w	r3, #0
   13c9c:	d30a      	bcc.n	13cb4 <__divdi3+0x270>
   13c9e:	d005      	beq.n	13cac <__divdi3+0x268>
   13ca0:	462a      	mov	r2, r5
   13ca2:	e720      	b.n	13ae6 <__divdi3+0xa2>
   13ca4:	4662      	mov	r2, ip
   13ca6:	e701      	b.n	13aac <__divdi3+0x68>
   13ca8:	463b      	mov	r3, r7
   13caa:	e714      	b.n	13ad6 <__divdi3+0x92>
   13cac:	fa06 f608 	lsl.w	r6, r6, r8
   13cb0:	4286      	cmp	r6, r0
   13cb2:	d2f5      	bcs.n	13ca0 <__divdi3+0x25c>
   13cb4:	1e6a      	subs	r2, r5, #1
   13cb6:	2300      	movs	r3, #0
   13cb8:	e715      	b.n	13ae6 <__divdi3+0xa2>
   13cba:	461a      	mov	r2, r3
   13cbc:	e7e5      	b.n	13c8a <__divdi3+0x246>
   13cbe:	460b      	mov	r3, r1
   13cc0:	e7a0      	b.n	13c04 <__divdi3+0x1c0>
   13cc2:	4611      	mov	r1, r2
   13cc4:	e7cb      	b.n	13c5e <__divdi3+0x21a>
   13cc6:	4690      	mov	r8, r2
   13cc8:	e788      	b.n	13bdc <__divdi3+0x198>
   13cca:	4643      	mov	r3, r8
   13ccc:	4642      	mov	r2, r8
   13cce:	e70a      	b.n	13ae6 <__divdi3+0xa2>
   13cd0:	3a02      	subs	r2, #2
   13cd2:	e753      	b.n	13b7c <__divdi3+0x138>
   13cd4:	3902      	subs	r1, #2
   13cd6:	442f      	add	r7, r5
   13cd8:	e73c      	b.n	13b54 <__divdi3+0x110>
   13cda:	bf00      	nop

00013cdc <__udivdi3>:
   13cdc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13ce0:	4614      	mov	r4, r2
   13ce2:	4605      	mov	r5, r0
   13ce4:	460e      	mov	r6, r1
   13ce6:	2b00      	cmp	r3, #0
   13ce8:	d143      	bne.n	13d72 <__udivdi3+0x96>
   13cea:	428a      	cmp	r2, r1
   13cec:	d953      	bls.n	13d96 <__udivdi3+0xba>
   13cee:	fab2 f782 	clz	r7, r2
   13cf2:	b157      	cbz	r7, 13d0a <__udivdi3+0x2e>
   13cf4:	f1c7 0620 	rsb	r6, r7, #32
   13cf8:	fa20 f606 	lsr.w	r6, r0, r6
   13cfc:	fa01 f307 	lsl.w	r3, r1, r7
   13d00:	fa02 f407 	lsl.w	r4, r2, r7
   13d04:	431e      	orrs	r6, r3
   13d06:	fa00 f507 	lsl.w	r5, r0, r7
   13d0a:	0c21      	lsrs	r1, r4, #16
   13d0c:	fbb6 f2f1 	udiv	r2, r6, r1
   13d10:	0c2b      	lsrs	r3, r5, #16
   13d12:	fb01 6712 	mls	r7, r1, r2, r6
   13d16:	b2a0      	uxth	r0, r4
   13d18:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
   13d1c:	fb00 f302 	mul.w	r3, r0, r2
   13d20:	42b3      	cmp	r3, r6
   13d22:	d909      	bls.n	13d38 <__udivdi3+0x5c>
   13d24:	1936      	adds	r6, r6, r4
   13d26:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   13d2a:	f080 80f6 	bcs.w	13f1a <__udivdi3+0x23e>
   13d2e:	42b3      	cmp	r3, r6
   13d30:	f240 80f3 	bls.w	13f1a <__udivdi3+0x23e>
   13d34:	3a02      	subs	r2, #2
   13d36:	4426      	add	r6, r4
   13d38:	1af6      	subs	r6, r6, r3
   13d3a:	fbb6 f3f1 	udiv	r3, r6, r1
   13d3e:	b2ad      	uxth	r5, r5
   13d40:	fb01 6113 	mls	r1, r1, r3, r6
   13d44:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   13d48:	fb00 f003 	mul.w	r0, r0, r3
   13d4c:	4288      	cmp	r0, r1
   13d4e:	d908      	bls.n	13d62 <__udivdi3+0x86>
   13d50:	1909      	adds	r1, r1, r4
   13d52:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
   13d56:	f080 80e2 	bcs.w	13f1e <__udivdi3+0x242>
   13d5a:	4288      	cmp	r0, r1
   13d5c:	f240 80df 	bls.w	13f1e <__udivdi3+0x242>
   13d60:	3b02      	subs	r3, #2
   13d62:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   13d66:	2300      	movs	r3, #0
   13d68:	4610      	mov	r0, r2
   13d6a:	4619      	mov	r1, r3
   13d6c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13d70:	4770      	bx	lr
   13d72:	428b      	cmp	r3, r1
   13d74:	d84a      	bhi.n	13e0c <__udivdi3+0x130>
   13d76:	fab3 f683 	clz	r6, r3
   13d7a:	2e00      	cmp	r6, #0
   13d7c:	d14d      	bne.n	13e1a <__udivdi3+0x13e>
   13d7e:	428b      	cmp	r3, r1
   13d80:	d302      	bcc.n	13d88 <__udivdi3+0xac>
   13d82:	4282      	cmp	r2, r0
   13d84:	f200 80d6 	bhi.w	13f34 <__udivdi3+0x258>
   13d88:	2300      	movs	r3, #0
   13d8a:	2201      	movs	r2, #1
   13d8c:	4610      	mov	r0, r2
   13d8e:	4619      	mov	r1, r3
   13d90:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13d94:	4770      	bx	lr
   13d96:	b912      	cbnz	r2, 13d9e <__udivdi3+0xc2>
   13d98:	2401      	movs	r4, #1
   13d9a:	fbb4 f4f2 	udiv	r4, r4, r2
   13d9e:	fab4 f284 	clz	r2, r4
   13da2:	2a00      	cmp	r2, #0
   13da4:	d17c      	bne.n	13ea0 <__udivdi3+0x1c4>
   13da6:	1b09      	subs	r1, r1, r4
   13da8:	0c26      	lsrs	r6, r4, #16
   13daa:	b2a7      	uxth	r7, r4
   13dac:	2301      	movs	r3, #1
   13dae:	fbb1 f0f6 	udiv	r0, r1, r6
   13db2:	0c2a      	lsrs	r2, r5, #16
   13db4:	fb06 1110 	mls	r1, r6, r0, r1
   13db8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   13dbc:	fb07 f200 	mul.w	r2, r7, r0
   13dc0:	428a      	cmp	r2, r1
   13dc2:	d907      	bls.n	13dd4 <__udivdi3+0xf8>
   13dc4:	1909      	adds	r1, r1, r4
   13dc6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   13dca:	d202      	bcs.n	13dd2 <__udivdi3+0xf6>
   13dcc:	428a      	cmp	r2, r1
   13dce:	f200 80c3 	bhi.w	13f58 <__udivdi3+0x27c>
   13dd2:	4660      	mov	r0, ip
   13dd4:	1a89      	subs	r1, r1, r2
   13dd6:	fbb1 f2f6 	udiv	r2, r1, r6
   13dda:	b2ad      	uxth	r5, r5
   13ddc:	fb06 1112 	mls	r1, r6, r2, r1
   13de0:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   13de4:	fb07 f702 	mul.w	r7, r7, r2
   13de8:	42af      	cmp	r7, r5
   13dea:	d908      	bls.n	13dfe <__udivdi3+0x122>
   13dec:	192c      	adds	r4, r5, r4
   13dee:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
   13df2:	f080 8096 	bcs.w	13f22 <__udivdi3+0x246>
   13df6:	42a7      	cmp	r7, r4
   13df8:	f240 8093 	bls.w	13f22 <__udivdi3+0x246>
   13dfc:	3a02      	subs	r2, #2
   13dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   13e02:	4610      	mov	r0, r2
   13e04:	4619      	mov	r1, r3
   13e06:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13e0a:	4770      	bx	lr
   13e0c:	2300      	movs	r3, #0
   13e0e:	461a      	mov	r2, r3
   13e10:	4610      	mov	r0, r2
   13e12:	4619      	mov	r1, r3
   13e14:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13e18:	4770      	bx	lr
   13e1a:	f1c6 0520 	rsb	r5, r6, #32
   13e1e:	fa22 f405 	lsr.w	r4, r2, r5
   13e22:	40b3      	lsls	r3, r6
   13e24:	431c      	orrs	r4, r3
   13e26:	ea4f 4814 	mov.w	r8, r4, lsr #16
   13e2a:	fa21 f305 	lsr.w	r3, r1, r5
   13e2e:	fa01 f706 	lsl.w	r7, r1, r6
   13e32:	fa20 f505 	lsr.w	r5, r0, r5
   13e36:	fbb3 fcf8 	udiv	ip, r3, r8
   13e3a:	432f      	orrs	r7, r5
   13e3c:	fb08 331c 	mls	r3, r8, ip, r3
   13e40:	0c3d      	lsrs	r5, r7, #16
   13e42:	fa1f fa84 	uxth.w	sl, r4
   13e46:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   13e4a:	fb0a f90c 	mul.w	r9, sl, ip
   13e4e:	4599      	cmp	r9, r3
   13e50:	fa02 fb06 	lsl.w	fp, r2, r6
   13e54:	d904      	bls.n	13e60 <__udivdi3+0x184>
   13e56:	191b      	adds	r3, r3, r4
   13e58:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   13e5c:	d36d      	bcc.n	13f3a <__udivdi3+0x25e>
   13e5e:	4694      	mov	ip, r2
   13e60:	ebc9 0303 	rsb	r3, r9, r3
   13e64:	fbb3 f5f8 	udiv	r5, r3, r8
   13e68:	fb08 3315 	mls	r3, r8, r5, r3
   13e6c:	b2bf      	uxth	r7, r7
   13e6e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   13e72:	fb0a f805 	mul.w	r8, sl, r5
   13e76:	45b8      	cmp	r8, r7
   13e78:	d904      	bls.n	13e84 <__udivdi3+0x1a8>
   13e7a:	193f      	adds	r7, r7, r4
   13e7c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
   13e80:	d361      	bcc.n	13f46 <__udivdi3+0x26a>
   13e82:	461d      	mov	r5, r3
   13e84:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   13e88:	fbac 230b 	umull	r2, r3, ip, fp
   13e8c:	ebc8 0707 	rsb	r7, r8, r7
   13e90:	429f      	cmp	r7, r3
   13e92:	f04f 0500 	mov.w	r5, #0
   13e96:	d349      	bcc.n	13f2c <__udivdi3+0x250>
   13e98:	d045      	beq.n	13f26 <__udivdi3+0x24a>
   13e9a:	4662      	mov	r2, ip
   13e9c:	462b      	mov	r3, r5
   13e9e:	e763      	b.n	13d68 <__udivdi3+0x8c>
   13ea0:	4094      	lsls	r4, r2
   13ea2:	f1c2 0320 	rsb	r3, r2, #32
   13ea6:	fa21 fc03 	lsr.w	ip, r1, r3
   13eaa:	0c26      	lsrs	r6, r4, #16
   13eac:	fa20 f303 	lsr.w	r3, r0, r3
   13eb0:	fa01 f502 	lsl.w	r5, r1, r2
   13eb4:	fbbc f8f6 	udiv	r8, ip, r6
   13eb8:	ea43 0105 	orr.w	r1, r3, r5
   13ebc:	0c0b      	lsrs	r3, r1, #16
   13ebe:	fb06 cc18 	mls	ip, r6, r8, ip
   13ec2:	b2a7      	uxth	r7, r4
   13ec4:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
   13ec8:	fb07 f308 	mul.w	r3, r7, r8
   13ecc:	4563      	cmp	r3, ip
   13ece:	fa00 f502 	lsl.w	r5, r0, r2
   13ed2:	d909      	bls.n	13ee8 <__udivdi3+0x20c>
   13ed4:	eb1c 0c04 	adds.w	ip, ip, r4
   13ed8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   13edc:	d23a      	bcs.n	13f54 <__udivdi3+0x278>
   13ede:	4563      	cmp	r3, ip
   13ee0:	d938      	bls.n	13f54 <__udivdi3+0x278>
   13ee2:	f1a8 0802 	sub.w	r8, r8, #2
   13ee6:	44a4      	add	ip, r4
   13ee8:	ebc3 0c0c 	rsb	ip, r3, ip
   13eec:	fbbc f3f6 	udiv	r3, ip, r6
   13ef0:	b289      	uxth	r1, r1
   13ef2:	fb06 cc13 	mls	ip, r6, r3, ip
   13ef6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
   13efa:	fb07 f203 	mul.w	r2, r7, r3
   13efe:	428a      	cmp	r2, r1
   13f00:	d907      	bls.n	13f12 <__udivdi3+0x236>
   13f02:	1909      	adds	r1, r1, r4
   13f04:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   13f08:	d222      	bcs.n	13f50 <__udivdi3+0x274>
   13f0a:	428a      	cmp	r2, r1
   13f0c:	d920      	bls.n	13f50 <__udivdi3+0x274>
   13f0e:	3b02      	subs	r3, #2
   13f10:	4421      	add	r1, r4
   13f12:	1a89      	subs	r1, r1, r2
   13f14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   13f18:	e749      	b.n	13dae <__udivdi3+0xd2>
   13f1a:	463a      	mov	r2, r7
   13f1c:	e70c      	b.n	13d38 <__udivdi3+0x5c>
   13f1e:	4633      	mov	r3, r6
   13f20:	e71f      	b.n	13d62 <__udivdi3+0x86>
   13f22:	460a      	mov	r2, r1
   13f24:	e76b      	b.n	13dfe <__udivdi3+0x122>
   13f26:	40b0      	lsls	r0, r6
   13f28:	4290      	cmp	r0, r2
   13f2a:	d2b6      	bcs.n	13e9a <__udivdi3+0x1be>
   13f2c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   13f30:	2300      	movs	r3, #0
   13f32:	e719      	b.n	13d68 <__udivdi3+0x8c>
   13f34:	4633      	mov	r3, r6
   13f36:	4632      	mov	r2, r6
   13f38:	e716      	b.n	13d68 <__udivdi3+0x8c>
   13f3a:	4599      	cmp	r9, r3
   13f3c:	d98f      	bls.n	13e5e <__udivdi3+0x182>
   13f3e:	f1ac 0c02 	sub.w	ip, ip, #2
   13f42:	4423      	add	r3, r4
   13f44:	e78c      	b.n	13e60 <__udivdi3+0x184>
   13f46:	45b8      	cmp	r8, r7
   13f48:	d99b      	bls.n	13e82 <__udivdi3+0x1a6>
   13f4a:	3d02      	subs	r5, #2
   13f4c:	4427      	add	r7, r4
   13f4e:	e799      	b.n	13e84 <__udivdi3+0x1a8>
   13f50:	4603      	mov	r3, r0
   13f52:	e7de      	b.n	13f12 <__udivdi3+0x236>
   13f54:	4690      	mov	r8, r2
   13f56:	e7c7      	b.n	13ee8 <__udivdi3+0x20c>
   13f58:	3802      	subs	r0, #2
   13f5a:	4421      	add	r1, r4
   13f5c:	e73a      	b.n	13dd4 <__udivdi3+0xf8>
   13f5e:	bf00      	nop

00013f60 <FastLED>:
   13f60:	8d5c 1fff                                   \...

00013f64 <_ZL1p>:
   13f64:	a097 5b89 0f5a 0d83 5fc9 3560 e9c2 e107     ...[Z...._`5....
   13f74:	248c 1e67 8e45 6308 f025 0a15 be17 9406     .$g.E..c%.......
   13f84:	78f7 4bea 1a00 3ec5 fc5e cbdb 2375 200b     .x.K...>^...u#. 
   13f94:	b139 5821 95ed 5738 14ae 887d a8ab af44     9.!X..8W..}...D.
   13fa4:	a54a 8647 308b a61b 924d e79e 6f53 7ae5     J.G..0..M...So.z
   13fb4:	d33c e685 69dc 295c 2e37 28f5 66f4 368f     <....i\)7..(.f.6
   13fc4:	1941 a13f d801 4950 4cd1 bb84 59d0 a912     A.?...PI.L...Y..
   13fd4:	c4c8 8287 bc74 569f 64a4 c66d baad 4003     ....t..V.dm....@
   13fe4:	d934 fae2 7b7c ca05 9326 7e76 52ff d455     4...|{..&.v~.RU.
   13ff4:	cecf e33b 102f 113a bdb6 2a1c b7df d5aa     ..;./.:....*....
   14004:	f877 0298 9a2c 46a3 99dd 9b65 2ba7 09ac     w...,..F..e..+..
   14014:	1681 fd27 6213 6e6c 714f e8e0 b9b2 6870     ..'..blnOq....ph
   14024:	f6da e461 22fb c1f2 d2ee 0c90 b3bf f1a2     ..a.."..........
   14034:	3351 eb91 0ef9 6bef c031 1fd6 c7b5 9d6a     Q3.....k1.....j.
   14044:	54b8 b0cc 7973 2d32 047f fe96 ec8a 5dcd     .T..sy2-.......]
   14054:	72de 1d43 4818 8df3 c380 424e 3dd7 b49c     .rC..H....NB.=..
   14064:	ffff ffff                                   ....

00014068 <_ZTV7Perlins>:
	...
   14070:	06a5 0000 06b1 0000                         ........

00014078 <_ZTV14CLEDController>:
	...
   14080:	36c3 0000 36c3 0000 36c3 0000 36c3 0000     .6...6...6...6..

00014090 <_ZTV15P9813ControllerILh6ELh7EL6EOrder10ELh4EE>:
	...
   14098:	18d1 0000 15c9 0000 123d 0000 0ae5 0000     ........=.......

000140a8 <_ZTV15P9813ControllerILh8ELh9EL6EOrder10ELh4EE>:
	...
   140b0:	17e7 0000 14cd 0000 111d 0000 0ab9 0000     ................

000140c0 <_ZTV15P9813ControllerILh10ELh11EL6EOrder10ELh4EE>:
	...
   140c8:	16fd 0000 13d1 0000 1005 0000 0a8d 0000     ................
   140d8:	6572 0064 7570 7072 656c 6f00 6172 676e     red.purple.orang
   140e8:	0065 6877 7469 0065 6f6d 6564 4920 646e     e.white.mode Ind
   140f8:	7865 203a 6425 6320 7275 6572 746e 6d20     ex: %d current m
   14108:	646f 3a65 2520 0a73 6100 2074 6162 6b63     ode: %s..at back
   14118:	202c 7473 7261 6974 676e 6f20 6576 0072     , starting over.

00014128 <_ZTV8BaseMode>:
	...
   14130:	19d9 0000 19e5 0000 36c3 0000 36c3 0000     .........6...6..

00014140 <_ZTV15CloseEncounters>:
	...
   14148:	1a65 0000 1aa1 0000 24e9 0000 1a61 0000     e........$..a...
   14158:	6c63 736f 4565 636e 756f 746e 7265 0073     closeEncounters.
   14168:	6564 656c 6974 676e 6220 7261 7720 202f     deleting bar w/ 
   14178:	696c 6566 654c 676e 6874 2520 0d64 000a     lifeLength %d...
   14188:	6425 2509 0d64 000a 7263 6165 6574 2064     %d.%d...created 
   14198:	6162 2072 2f77 7720 6469 6874 203a 6425     bar w/ width: %d
   141a8:	6c20 6669 4c65 6e65 7467 3a68 2520 0d64      lifeLength: %d.
   141b8:	000a 6863 6365 696b 676e 7600 6c61 3e20     ..checking.val >
   141c8:	203d 3532 3a30 2520 0d64 000a 6564 656c     = 250: %d...dele
   141d8:	6974 676e 6420 746f 7300 6275 7274 6361     ting dot.subtrac
   141e8:	6974 676e 2520 2064 6f74 7620 6c61 6f20     ting %d to val o
   141f8:	2066 6425 3d20 0020 6461 6964 676e 2520     f %d = .adding %
   14208:	2064 6f74 7620 6c61 6f20 2066 6425 3d20     d to val of %d =
   14218:	0020 ffff ffff ffff                          .......

00014220 <_ZTV9ColorMode>:
	...
   14228:	2505 0000 2519 0000 252d 0000 2501 0000     .%...%..-%...%..
   14238:	656d 746c ff00 ffff                         melt....

00014240 <_ZTV8MeltMode>:
	...
   14248:	262d 0000 264d 0000 2661 0000 2625 0000     -&..M&..a&..%&..
   14258:	6f6d 6e6f ff00 ffff                         moon....

00014260 <_ZTV4Moon>:
	...
   14268:	2a41 0000 2a55 0000 2c71 0000 2a3d 0000     A*..U*..q,..=*..
   14278:	6172 6e69 6f62 0077                         rainbow.

00014280 <_ZTV7Rainbow>:
	...
   14288:	2c89 0000 2c9d 0000 2cb1 0000 2c83 0000     .,...,...,...,..

00014298 <channel2sc1a>:
   14298:	0e05 0908 0c0d 0706 040f 1300 9303 921a     ................
   142a8:	c517 8485 8786 ffc4 f06f 037f 7003 7803     ........o....p.x
   142b8:	f013 0f80 d0fb 4770                         ......pG

000142c0 <_ZTV14HardwareSerial>:
	...
   142c8:	330f 0000 3327 0000 32fb 0000 3303 0000     .3..'3...2...3..
   142d8:	32ff 0000 3307 0000 32bd 0000 32d1 0000     .2...3...2...2..
   142e8:	32f1 0000 32f5 0000 330b 0000 328d 0000     .2...2...3...2..
   142f8:	3299 0000 32a5 0000 32b1 0000 3337 0000     .2...2...2..73..
   14308:	331b 0000 0000 0000                         .3......

00014310 <_ZTV15HardwareSerial2>:
	...
   14318:	33e9 0000 3401 0000 33d5 0000 33dd 0000     .3...4...3...3..
   14328:	33d9 0000 33e1 0000 339d 0000 33b1 0000     .3...3...3...3..
   14338:	33d1 0000 32f5 0000 33e5 0000 336d 0000     .3...2...3..m3..
   14348:	3379 0000 3385 0000 3391 0000 3411 0000     y3...3...3...4..
   14358:	33f5 0000 0000 0000                         .3......

00014360 <_ZTV15HardwareSerial3>:
	...
   14368:	34c1 0000 34d9 0000 34ad 0000 34b5 0000     .4...4...4...4..
   14378:	34b1 0000 34b9 0000 3475 0000 3489 0000     .4...4..u4...4..
   14388:	34a9 0000 32f5 0000 34bd 0000 3445 0000     .4...2...4..E4..
   14398:	3451 0000 345d 0000 3469 0000 34e9 0000     Q4..]4..i4...4..
   143a8:	34cd 0000 0000 0000                         .4......

000143b0 <_ZTV9IPAddress>:
	...
   143b8:	35eb 0000 0000 0000                         .5......

000143c0 <digital_pin_to_info_PGM>:
   143c0:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
   143d0:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
   143e0:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
   143f0:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
   14400:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
   14410:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
   14420:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
   14430:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
   14440:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
   14450:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
   14460:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
   14470:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
   14480:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
   14490:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
   144a0:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
   144b0:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
   144c0:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
   144d0:	0a0d                                        ..

000144d2 <usb_endpoint_config_table>:
   144d2:	1500 1519 ffff                              ......

000144d8 <usb_descriptor_list>:
   144d8:	0100 0000 841c 1fff 0012 0000 0200 0000     ................
   144e8:	8446 1fff 0043 0000 0300 0000 84a0 1fff     F...C...........
   144f8:	0000 0000 0301 0409 842e 1fff 0000 0000     ................
   14508:	0302 0409 848a 1fff 0000 0000 0303 0409     ................
   14518:	84a4 1fff 0000 0000 0000 0000 0000 0000     ................
   14528:	0000 0000 ffff ffff                         ........

00014530 <_ZTV16usb_serial_class>:
	...
   14538:	5075 0000 507b 0000 5065 0000 5069 0000     uP..{P..eP..iP..
   14548:	506d 0000 5071 0000                         mP..qP..

00014550 <_ZTVSt9bad_alloc>:
   14550:	0000 0000 4568 0001 5451 0000 5465 0000     ....hE..QT..eT..
   14560:	5449 0000 0000 0000                         IT......

00014568 <_ZTISt9bad_alloc>:
   14568:	4688 0001 4584 0001 45b8 0001 7473 3a64     .F...E...E..std:
   14578:	623a 6461 615f 6c6c 636f ff00               :bad_alloc..

00014584 <_ZTSSt9bad_alloc>:
   14584:	7453 6239 6461 615f 6c6c 636f 0000 0000     St9bad_alloc....
   14594:	ffff ffff                                   ....

00014598 <_ZTVSt9exception>:
   14598:	0000 0000 45b8 0001 58e5 0000 590d 0000     .....E...X...Y..
   145a8:	58fd 0000 0000 0000                         .X......

000145b0 <_ZTIN10__cxxabiv115__forced_unwindE>:
   145b0:	4728 0001 4650 0001                         (G..PF..

000145b8 <_ZTISt9exception>:
   145b8:	4728 0001 4640 0001                         (G..@F..

000145c0 <_ZTSSt13bad_exception>:
   145c0:	7453 3331 6162 5f64 7865 6563 7470 6f69     St13bad_exceptio
   145d0:	006e 0000 7473 3a64 653a 6378 7065 6974     n...std::excepti
   145e0:	6e6f 0000 7473 3a64 623a 6461 655f 6378     on..std::bad_exc
   145f0:	7065 6974 6e6f ff00                         eption..

000145f8 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   145f8:	314e 5f30 635f 7878 6261 7669 3131 5f39     N10__cxxabiv119_
   14608:	665f 726f 6965 6e67 655f 6378 7065 6974     _foreign_excepti
   14618:	6e6f 0045                                   onE.

0001461c <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   1461c:	4728 0001 45f8 0001 ffff ffff               (G...E......

00014628 <_ZTVSt13bad_exception>:
   14628:	0000 0000 4670 0001 58f1 0000 5921 0000     ....pF...X..!Y..
   14638:	5905 0000 0000 0000                         .Y......

00014640 <_ZTSSt9exception>:
   14640:	7453 6539 6378 7065 6974 6e6f 0000 0000     St9exception....

00014650 <_ZTSN10__cxxabiv115__forced_unwindE>:
   14650:	314e 5f30 635f 7878 6261 7669 3131 5f35     N10__cxxabiv115_
   14660:	665f 726f 6563 5f64 6e75 6977 646e 0045     _forced_unwindE.

00014670 <_ZTISt13bad_exception>:
   14670:	4688 0001 45c0 0001 45b8 0001 ffff ffff     .F...E...E......

00014680 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   14680:	0000 0000 46b0 0001 60a9 0000 60bd 0000     .....F...`...`..
   14690:	61d1 0000 61d5 0000 62b1 0000 6225 0000     .a...a...b..%b..
   146a0:	61a5 0000 610d 0000 60d9 0000 0000 0000     .a...a...`......

000146b0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   146b0:	4688 0001 46bc 0001 4750 0001               .F...F..PG..

000146bc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   146bc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   146cc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   146dc:	666e 456f 0000 0000                         nfoE....

000146e4 <_ZTISt9type_info>:
   146e4:	4728 0001 46ec 0001                         (G...F..

000146ec <_ZTSSt9type_info>:
   146ec:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   146fc:	ffff ffff                                   ....

00014700 <_ZTVSt9type_info>:
   14700:	0000 0000 46e4 0001 61c5 0000 61dd 0000     .....F...a...a..
   14710:	61d1 0000 61d5 0000 6221 0000 61d9 0000     .a...a..!b...a..

00014720 <_ZTVN10__cxxabiv117__class_type_infoE>:
   14720:	0000 0000 4750 0001 6269 0000 627d 0000     ....PG..ib..}b..
   14730:	61d1 0000 61d5 0000 62b1 0000 6225 0000     .a...a...b..%b..
   14740:	6299 0000 62d5 0000 625d 0000 0000 0000     .b...b..]b......

00014750 <_ZTIN10__cxxabiv117__class_type_infoE>:
   14750:	4688 0001 475c 0001 46e4 0001               .F..\G...F..

0001475c <_ZTSN10__cxxabiv117__class_type_infoE>:
   1475c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   1476c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   1477c:	0045 0000 6574 6d72 6e69 7461 2065 6163     E...terminate ca
   1478c:	6c6c 6465 7220 6365 7275 6973 6576 796c     lled recursively
   1479c:	000a 0000 6574 6d72 6e69 7461 2065 6163     ....terminate ca
   147ac:	6c6c 6465 6120 7466 7265 7420 7268 776f     lled after throw
   147bc:	6e69 2067 6e61 6920 736e 6174 636e 2065     ing an instance 
   147cc:	666f 2720 0000 0000 0a27 0000 6574 6d72     of '....'...term
   147dc:	6e69 7461 2065 6163 6c6c 6465 7720 7469     inate called wit
   147ec:	6f68 7475 6120 206e 6361 6974 6576 6520     hout an active e
   147fc:	6378 7065 6974 6e6f 000a 0000 2020 6877     xception....  wh
   1480c:	7461 2928 203a 0020                         at():  .

00014814 <standard_subs>:
   14814:	0074 0000 4f80 0001 0003 0000 4f80 0001     t....O.......O..
   14824:	0003 0000 0000 0000 0000 0000 0061 0000     ............a...
   14834:	526c 0001 000e 0000 526c 0001 000e 0000     lR......lR......
   14844:	527c 0001 0009 0000 0062 0000 5288 0001     |R......b....R..
   14854:	0011 0000 5288 0001 0011 0000 529c 0001     .....R.......R..
   14864:	000c 0000 0073 0000 52ac 0001 000b 0000     ....s....R......
   14874:	52b8 0001 0046 0000 529c 0001 000c 0000     .R..F....R......
   14884:	0069 0000 5300 0001 000c 0000 5310 0001     i....S.......S..
   14894:	0031 0000 5344 0001 000d 0000 006f 0000     1...DS......o...
   148a4:	5354 0001 000c 0000 5364 0001 0031 0000     TS......dS..1...
   148b4:	5398 0001 000d 0000 0064 0000 53a8 0001     .S......d....S..
   148c4:	000d 0000 53b8 0001 0032 0000 53ec 0001     .....S..2....S..
   148d4:	000e 0000                                   ....

000148d8 <cplus_demangle_builtin_types>:
   148d8:	55e4 0001 000b 0000 55e4 0001 000b 0000     .U.......U......
   148e8:	0000 0000 55f0 0001 0004 0000 55f8 0001     .....U.......U..
   148f8:	0007 0000 0007 0000 5600 0001 0004 0000     .........V......
   14908:	5608 0001 0004 0000 0000 0000 5610 0001     .V...........V..
   14918:	0006 0000 5610 0001 0006 0000 0008 0000     .....V..........
   14928:	5618 0001 000b 0000 5618 0001 000b 0000     .V.......V......
   14938:	0008 0000 5624 0001 0005 0000 5624 0001     ....$V......$V..
   14948:	0005 0000 0008 0000 562c 0001 000a 0000     ........,V......
   14958:	562c 0001 000a 0000 0008 0000 5638 0001     ,V..........8V..
   14968:	000d 0000 5638 0001 000d 0000 0000 0000     ....8V..........
   14978:	5648 0001 0003 0000 5648 0001 0003 0000     HV......HV......
   14988:	0001 0000 564c 0001 000c 0000 565c 0001     ....LV......\V..
   14998:	0008 0000 0002 0000 0000 0000 0000 0000     ................
	...
   149b4:	5668 0001 0004 0000 5668 0001 0004 0000     hV......hV......
   149c4:	0003 0000 5670 0001 000d 0000 5670 0001     ....pV......pV..
   149d4:	000d 0000 0004 0000 5680 0001 0008 0000     .........V......
   149e4:	5680 0001 0008 0000 0000 0000 568c 0001     .V...........V..
   149f4:	0011 0000 568c 0001 0011 0000 0000 0000     .....V..........
	...
   14a40:	56a0 0001 0005 0000 56a0 0001 0005 0000     .V.......V......
   14a50:	0000 0000 56a8 0001 000e 0000 56a8 0001     .....V.......V..
   14a60:	000e 0000 0000 0000 0000 0000 0000 0000     ................
	...
   14a7c:	56b8 0001 0004 0000 56b8 0001 0004 0000     .V.......V......
   14a8c:	0009 0000 56c0 0001 0007 0000 5600 0001     .....V.......V..
   14a9c:	0004 0000 0000 0000 56c8 0001 0009 0000     .........V......
   14aac:	5668 0001 0004 0000 0005 0000 56d4 0001     hV...........V..
   14abc:	0012 0000 56d4 0001 0012 0000 0006 0000     .....V..........
   14acc:	519c 0001 0003 0000 519c 0001 0003 0000     .Q.......Q......
   14adc:	0000 0000 56e8 0001 0009 0000 56e8 0001     .....V.......V..
   14aec:	0009 0000 0000 0000 56f4 0001 0009 0000     .........V......
   14afc:	56f4 0001 0009 0000 0000 0000 5700 0001     .V...........W..
   14b0c:	000a 0000 5700 0001 000a 0000 0000 0000     .....W..........
   14b1c:	570c 0001 0004 0000 570c 0001 0004 0000     .W.......W......
   14b2c:	0008 0000 5714 0001 0008 0000 5714 0001     .....W.......W..
   14b3c:	0008 0000 0000 0000 5720 0001 0008 0000     ........ W......
   14b4c:	5720 0001 0008 0000 0000 0000 572c 0001      W..........,W..
   14b5c:	0011 0000 572c 0001 0011 0000 0000 0000     ....,W..........

00014b6c <cplus_demangle_operators>:
   14b6c:	53fc 0001 5400 0001 0002 0000 0002 0000     .S...T..........
   14b7c:	5404 0001 5408 0001 0001 0000 0002 0000     .T...T..........
   14b8c:	540c 0001 5240 0001 0002 0000 0002 0000     .T..@R..........
   14b9c:	514c 0001 5410 0001 0001 0000 0001 0000     LQ...T..........
   14bac:	5414 0001 5410 0001 0001 0000 0002 0000     .T...T..........
   14bbc:	5418 0001 541c 0001 0008 0000 0001 0000     .T...T..........
   14bcc:	5428 0001 541c 0001 0008 0000 0001 0000     (T...T..........
   14bdc:	542c 0001 5430 0001 000a 0000 0002 0000     ,T..0T..........
   14bec:	4f90 0001 543c 0001 0002 0000 0002 0000     .O..<T..........
   14bfc:	5440 0001 5444 0001 0001 0000 0002 0000     @T..DT..........
   14c0c:	5448 0001 544c 0001 0001 0000 0001 0000     HT..LT..........
   14c1c:	5450 0001 5454 0001 0002 0000 0002 0000     PT..TT..........
   14c2c:	5458 0001 545c 0001 0009 0000 0001 0000     XT..\T..........
   14c3c:	5468 0001 546c 0001 000c 0000 0002 0000     hT..lT..........
   14c4c:	547c 0001 5480 0001 0001 0000 0001 0000     |T...T..........
   14c5c:	5484 0001 5488 0001 0007 0000 0001 0000     .T...T..........
   14c6c:	5490 0001 5494 0001 0002 0000 0002 0000     .T...T..........
   14c7c:	4f94 0001 5498 0001 0001 0000 0002 0000     .O...T..........
   14c8c:	549c 0001 54a0 0001 0001 0000 0002 0000     .T...T..........
   14c9c:	54a4 0001 54a8 0001 0002 0000 0002 0000     .T...T..........
   14cac:	54ac 0001 54b0 0001 0001 0000 0002 0000     .T...T..........
   14cbc:	54b4 0001 54b8 0001 0002 0000 0002 0000     .T...T..........
   14ccc:	54bc 0001 54c0 0001 0002 0000 0002 0000     .T...T..........
   14cdc:	5150 0001 4fa8 0001 0002 0000 0001 0000     PQ...O..........
   14cec:	54c4 0001 5340 0001 0001 0000 0002 0000     .T..@S..........
   14cfc:	5154 0001 4fcc 0001 0002 0000 0002 0000     TQ...O..........
   14d0c:	54c8 0001 54cc 0001 0003 0000 0002 0000     .T...T..........
   14d1c:	5614 0001 54d0 0001 0002 0000 0002 0000     .V...T..........
   14d2c:	4f8c 0001 54d4 0001 000b 0000 0001 0000     .O...T..........
   14d3c:	54e0 0001 54e4 0001 0002 0000 0002 0000     .T...T..........
   14d4c:	54e8 0001 54ec 0001 0001 0000 0002 0000     .T...T..........
   14d5c:	54f0 0001 54f4 0001 0002 0000 0002 0000     .T...T..........
   14d6c:	54f8 0001 54fc 0001 0002 0000 0002 0000     .T...T..........
   14d7c:	5500 0001 5504 0001 0001 0000 0002 0000     .U...U..........
   14d8c:	5508 0001 5480 0001 0001 0000 0002 0000     .U...T..........
   14d9c:	550c 0001 5510 0001 0002 0000 0001 0000     .U...U..........
   14dac:	5514 0001 5518 0001 0005 0000 0003 0000     .U...U..........
   14dbc:	5520 0001 5524 0001 0002 0000 0002 0000      U..$U..........
   14dcc:	56e4 0001 5504 0001 0001 0000 0001 0000     .V...U..........
   14ddc:	5528 0001 552c 0001 0001 0000 0001 0000     (U..,U..........
   14dec:	5530 0001 5534 0001 0003 0000 0003 0000     0U..4U..........
   14dfc:	5538 0001 553c 0001 0002 0000 0002 0000     8U..<U..........
   14e0c:	5540 0001 5544 0001 0002 0000 0002 0000     @U..DU..........
   14e1c:	5278 0001 5548 0001 0001 0000 0002 0000     xR..HU..........
   14e2c:	554c 0001 5550 0001 0002 0000 0002 0000     LU..PU..........
   14e3c:	5554 0001 5558 0001 0001 0000 0002 0000     TU..XU..........
   14e4c:	555c 0001 5560 0001 0003 0000 0002 0000     \U..`U..........
   14e5c:	5564 0001 5568 0001 0002 0000 0001 0000     dU..hU..........
   14e6c:	556c 0001 5558 0001 0001 0000 0001 0000     lU..XU..........
   14e7c:	4f98 0001 5570 0001 0002 0000 0002 0000     .O..pU..........
   14e8c:	4f9c 0001 5574 0001 0001 0000 0003 0000     .O..tU..........
   14e9c:	5578 0001 557c 0001 0002 0000 0002 0000     xU..|U..........
   14eac:	5580 0001 5584 0001 0003 0000 0002 0000     .U...U..........
   14ebc:	5588 0001 558c 0001 0010 0000 0002 0000     .U...U..........
   14ecc:	55a0 0001 55a4 0001 0001 0000 0002 0000     .U...U..........
   14edc:	55a8 0001 55ac 0001 0002 0000 0002 0000     .U...U..........
   14eec:	55b0 0001 55b4 0001 000b 0000 0002 0000     .U...U..........
   14efc:	5438 0001 55c0 0001 0007 0000 0001 0000     8T...U..........
   14f0c:	55c8 0001 55c0 0001 0007 0000 0001 0000     .U...U..........
   14f1c:	55cc 0001 55d0 0001 0005 0000 0000 0000     .U...U..........
   14f2c:	55d8 0001 55dc 0001 0006 0000 0001 0000     .U...U..........
	...
   14f4c:	475f 4f4c 4142 5f4c 0000 0000 6128 6f6e     _GLOBAL_....(ano
   14f5c:	796e 6f6d 7375 6e20 6d61 7365 6170 6563     nymous namespace
   14f6c:	0029 0000 7473 6972 676e 6c20 7469 7265     )...string liter
   14f7c:	6c61 0000 7473 0064 7561 6f74 0000 0000     al..std.auto....
   14f8c:	696c 0000 6c63 0000 7464 0000 7470 0000     li..cl..dt..pt..
   14f9c:	7571 0000 615b 6962 003a 0000 3a3a 0000     qu..[abi:...::..
   14fac:	647b 6665 7561 746c 6120 6772 0023 0000     {default arg#...
   14fbc:	6c25 0064 3a7d 003a 414a 7272 7961 0000     %ld.}::.JArray..
   14fcc:	5d5b 0000 7476 6261 656c 6620 726f 0020     []..vtable for .
   14fdc:	5456 2054 6f66 2072 0000 0000 6f63 736e     VTT for ....cons
   14fec:	7274 6375 6974 6e6f 7620 6174 6c62 2065     truction vtable 
   14ffc:	6f66 2072 0000 0000 692d 2d6e 0000 0000     for ....-in-....
   1500c:	7974 6570 6e69 6f66 6620 726f 0020 0000     typeinfo for ...
   1501c:	7974 6570 6e69 6f66 6e20 6d61 2065 6f66     typeinfo name fo
   1502c:	2072 0000 7974 6570 6e69 6f66 6620 206e     r ..typeinfo fn 
   1503c:	6f66 2072 0000 0000 6f6e 2d6e 6976 7472     for ....non-virt
   1504c:	6175 206c 6874 6e75 206b 6f74 0020 0000     ual thunk to ...
   1505c:	6f63 6176 6972 6e61 2074 6572 7574 6e72     covariant return
   1506c:	7420 7568 6b6e 7420 206f 0000 616a 6176      thunk to ..java
   1507c:	4320 616c 7373 6620 726f 0020 7567 7261      Class for .guar
   1508c:	2064 6176 6972 6261 656c 6620 726f 0020     d variable for .
   1509c:	4c54 2053 6e69 7469 6620 6e75 7463 6f69     TLS init functio
   150ac:	206e 6f66 2072 0000 4c54 2053 7277 7061     n for ..TLS wrap
   150bc:	6570 2072 7566 636e 6974 6e6f 6620 726f     per function for
   150cc:	0020 0000 6572 6566 6572 636e 2065 6574      ...reference te
   150dc:	706d 726f 7261 2079 0023 0000 6968 6464     mporary #...hidd
   150ec:	6e65 6120 696c 7361 6620 726f 0020 0000     en alias for ...
   150fc:	6f6e 2d6e 7274 6e61 6173 7463 6f69 206e     non-transaction 
   1510c:	6c63 6e6f 2065 6f66 2072 0000 535f 7461     clone for .._Sat
   1511c:	0020 0000 415f 6363 6d75 0000 465f 6172      ..._Accum.._Fra
   1512c:	7463 0000 202c 0000 706f 7265 7461 726f     ct.., ..operator
   1513c:	0000 0000 706f 7265 7461 726f 0020 0000     ....operator ...
   1514c:	6461 0000 7367 0000 7869 0000 3a20 0020     ad..gs..ix.. : .
   1515c:	656e 2077 0000 0000 6c75 0000 6c6c 0000     new ....ul..ll..
   1516c:	6c75 006c 6166 736c 0065 0000 7274 6575     ull.false...true
   1517c:	0000 0000 616a 6176 7220 7365 756f 6372     ....java resourc
   1518c:	2065 0000 6564 6c63 7974 6570 2820 0000     e ..decltype (..
   1519c:	2e2e 002e 6874 7369 0000 0000 707b 7261     ....this....{par
   151ac:	236d 0000 6c67 626f 6c61 6320 6e6f 7473     m#..global const
   151bc:	7572 7463 726f 2073 656b 6579 2064 6f74     ructors keyed to
   151cc:	0020 0000 6c67 626f 6c61 6420 7365 7274      ...global destr
   151dc:	6375 6f74 7372 6b20 7965 6465 7420 206f     uctors keyed to 
   151ec:	0000 0000 6c7b 6d61 6462 2861 0000 0000     ....{lambda(....
   151fc:	2329 0000 757b 6e6e 6d61 6465 7420 7079     )#..{unnamed typ
   1520c:	2365 0000 5b20 6c63 6e6f 2065 0000 0000     e#.. [clone ....
   1521c:	283e 0000 7220 7365 7274 6369 0074 0000     >(.. restrict...
   1522c:	7620 6c6f 7461 6c69 0065 0000 6320 6e6f      volatile... con
   1523c:	7473 0000 2626 0000 6f63 706d 656c 2078     st..&&..complex 
   1524c:	0000 0000 6d69 6761 6e69 7261 2079 0000     ....imaginary ..
   1525c:	3a3a 002a 5f20 765f 6365 6f74 2872 0000     ::*. __vector(..
   1526c:	7473 3a64 613a 6c6c 636f 7461 726f 0000     std::allocator..
   1527c:	6c61 6f6c 6163 6f74 0072 0000 7473 3a64     allocator...std:
   1528c:	623a 7361 6369 735f 7274 6e69 0067 0000     :basic_string...
   1529c:	6162 6973 5f63 7473 6972 676e 0000 0000     basic_string....
   152ac:	7473 3a64 733a 7274 6e69 0067 7473 3a64     std::string.std:
   152bc:	623a 7361 6369 735f 7274 6e69 3c67 6863     :basic_string<ch
   152cc:	7261 202c 7473 3a64 633a 6168 5f72 7274     ar, std::char_tr
   152dc:	6961 7374 633c 6168 3e72 202c 7473 3a64     aits<char>, std:
   152ec:	613a 6c6c 636f 7461 726f 633c 6168 3e72     :allocator<char>
   152fc:	3e20 0000 7473 3a64 693a 7473 6572 6d61      >..std::istream
   1530c:	0000 0000 7473 3a64 623a 7361 6369 695f     ....std::basic_i
   1531c:	7473 6572 6d61 633c 6168 2c72 7320 6474     stream<char, std
   1532c:	3a3a 6863 7261 745f 6172 7469 3c73 6863     ::char_traits<ch
   1533c:	7261 203e 003e 0000 6162 6973 5f63 7369     ar> >...basic_is
   1534c:	7274 6165 006d 0000 7473 3a64 6f3a 7473     tream...std::ost
   1535c:	6572 6d61 0000 0000 7473 3a64 623a 7361     ream....std::bas
   1536c:	6369 6f5f 7473 6572 6d61 633c 6168 2c72     ic_ostream<char,
   1537c:	7320 6474 3a3a 6863 7261 745f 6172 7469      std::char_trait
   1538c:	3c73 6863 7261 203e 003e 0000 6162 6973     s<char> >...basi
   1539c:	5f63 736f 7274 6165 006d 0000 7473 3a64     c_ostream...std:
   153ac:	693a 736f 7274 6165 006d 0000 7473 3a64     :iostream...std:
   153bc:	623a 7361 6369 695f 736f 7274 6165 3c6d     :basic_iostream<
   153cc:	6863 7261 202c 7473 3a64 633a 6168 5f72     char, std::char_
   153dc:	7274 6961 7374 633c 6168 3e72 3e20 0000     traits<char> >..
   153ec:	6162 6973 5f63 6f69 7473 6572 6d61 0000     basic_iostream..
   153fc:	4e61 0000 3d26 0000 5361 0000 003d 0000     aN..&=..aS..=...
   1540c:	6161 0000 0026 0000 6e61 0000 7461 0000     aa..&...an..at..
   1541c:	6c61 6769 6f6e 2066 0000 0000 7a61 0000     alignof ....az..
   1542c:	6363 0000 6f63 736e 5f74 6163 7473 0000     cc..const_cast..
   1543c:	2928 0000 6d63 0000 002c 0000 6f63 0000     ()..cm..,...co..
   1544c:	007e 0000 5664 0000 3d2f 0000 6164 0000     ~...dV../=..da..
   1545c:	6564 656c 6574 5d5b 0020 0000 6364 0000     delete[] ...dc..
   1546c:	7964 616e 696d 5f63 6163 7473 0000 0000     dynamic_cast....
   1547c:	6564 0000 002a 0000 6c64 0000 6564 656c     de..*...dl..dele
   1548c:	6574 0020 7364 0000 2a2e 0000 002e 0000     te .ds...*......
   1549c:	7664 0000 002f 0000 4f65 0000 3d5e 0000     dv../...eO..^=..
   154ac:	6f65 0000 005e 0000 7165 0000 3d3d 0000     eo..^...eq..==..
   154bc:	6567 0000 3d3e 0000 7467 0000 536c 0000     ge..>=..gt..lS..
   154cc:	3c3c 003d 3d3c 0000 706f 7265 7461 726f     <<=.<=..operator
   154dc:	2222 0020 736c 0000 3c3c 0000 746c 0000     "" .ls..<<..lt..
   154ec:	003c 0000 496d 0000 3d2d 0000 4c6d 0000     <...mI..-=..mL..
   154fc:	3d2a 0000 696d 0000 002d 0000 6c6d 0000     *=..mi..-...ml..
   1550c:	6d6d 0000 2d2d 0000 616e 0000 656e 5b77     mm..--..na..new[
   1551c:	005d 0000 656e 0000 3d21 0000 746e 0000     ]...ne..!=..nt..
   1552c:	0021 0000 776e 0000 656e 0077 526f 0000     !...nw..new.oR..
   1553c:	3d7c 0000 6f6f 0000 7c7c 0000 007c 0000     |=..oo..||..|...
   1554c:	4c70 0000 3d2b 0000 6c70 0000 002b 0000     pL..+=..pl..+...
   1555c:	6d70 0000 3e2d 002a 7070 0000 2b2b 0000     pm..->*.pp..++..
   1556c:	7370 0000 3e2d 0000 003f 0000 4d72 0000     ps..->..?...rM..
   1557c:	3d25 0000 5372 0000 3e3e 003d 6372 0000     %=..rS..>>=.rc..
   1558c:	6572 6e69 6574 7072 6572 5f74 6163 7473     reinterpret_cast
   1559c:	0000 0000 6d72 0000 0025 0000 7372 0000     ....rm..%...rs..
   155ac:	3e3e 0000 6373 0000 7473 7461 6369 635f     >>..sc..static_c
   155bc:	7361 0074 6973 657a 666f 0020 7a73 0000     ast.sizeof .sz..
   155cc:	7274 0000 6874 6f72 0077 0000 7774 0000     tr..throw...tw..
   155dc:	6874 6f72 2077 0000 6973 6e67 6465 6320     throw ..signed c
   155ec:	6168 0072 6f62 6c6f 0000 0000 6f62 6c6f     har.bool....bool
   155fc:	6165 006e 6863 7261 0000 0000 7962 6574     ean.char....byte
   1560c:	0000 0000 6f64 6275 656c 0000 6f6c 676e     ....double..long
   1561c:	6420 756f 6c62 0065 6c66 616f 0074 0000      double.float...
   1562c:	5f5f 6c66 616f 3174 3832 0000 6e75 6973     __float128..unsi
   1563c:	6e67 6465 6320 6168 0072 0000 6e69 0074     gned char...int.
   1564c:	6e75 6973 6e67 6465 6920 746e 0000 0000     unsigned int....
   1565c:	6e75 6973 6e67 6465 0000 0000 6f6c 676e     unsigned....long
   1566c:	0000 0000 6e75 6973 6e67 6465 6c20 6e6f     ....unsigned lon
   1567c:	0067 0000 5f5f 6e69 3174 3832 0000 0000     g...__int128....
   1568c:	6e75 6973 6e67 6465 5f20 695f 746e 3231     unsigned __int12
   1569c:	0038 0000 6873 726f 0074 0000 6e75 6973     8...short...unsi
   156ac:	6e67 6465 7320 6f68 7472 0000 6f76 6469     gned short..void
   156bc:	0000 0000 6377 6168 5f72 0074 6f6c 676e     ....wchar_t.long
   156cc:	6c20 6e6f 0067 0000 6e75 6973 6e67 6465      long...unsigned
   156dc:	6c20 6e6f 2067 6f6c 676e 0000 6564 6963      long long..deci
   156ec:	616d 336c 0032 0000 6564 6963 616d 366c     mal32...decimal6
   156fc:	0034 0000 6564 6963 616d 316c 3832 0000     4...decimal128..
   1570c:	6168 666c 0000 0000 6863 7261 3631 745f     half....char16_t
   1571c:	0000 0000 6863 7261 3233 745f 0000 0000     ....char32_t....
   1572c:	6564 6c63 7974 6570 6e28 6c75 706c 7274     decltype(nullptr
   1573c:	0029 ffff                                   )...

00015740 <npio2_hw>:
   15740:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   15750:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   15760:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   15770:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   15780:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   15790:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   157a0:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   157b0:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000157c0 <two_over_pi>:
   157c0:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   157d0:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   157e0:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   157f0:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   15800:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   15810:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   15820:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   15830:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   15840:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   15850:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   15860:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   15870:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   15880:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   15890:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   158a0:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   158b0:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   158c0:	e27b 0060 8c6b 00c0                         {.`.k...

000158c8 <init_jk>:
   158c8:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000158d8 <PIo2>:
   158d8:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   158e8:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   158f8:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   15908:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5
   15918:	0043 ffff                                   C...

0001591c <_global_impure_ptr>:
   1591c:	84c8 1fff                                   ....

00015920 <zeroes.6763>:
   15920:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   15930:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
   15940:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   15950:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   15960:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
   15970:	0030 ffff                                   0...

00015974 <blanks.6762>:
   15974:	2020 2020 2020 2020 2020 2020 2020 2020                     
   15984:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   15994:	4f50 4953 0058 0000 ffff ffff               POSIX.......

000159a0 <__mprec_tens>:
   159a0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   159b0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   159c0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   159d0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   159e0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   159f0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   15a00:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   15a10:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   15a20:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   15a30:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   15a40:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   15a50:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   15a60:	9db4 79d9 7843 44ea                         ...yCx.D

00015a68 <__mprec_bigtens>:
   15a68:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   15a78:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   15a88:	bf3c 7f73 4fdd 7515                         <.s..O.u

00015a90 <p05.5269>:
   15a90:	0005 0000 0019 0000 007d 0000               ........}...

00015a9c <_init>:
   15a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a9e:	bf00      	nop
   15aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   15aa2:	bc08      	pop	{r3}
   15aa4:	469e      	mov	lr, r3
   15aa6:	4770      	bx	lr

00015aa8 <__init_array_start>:
   15aa8:	00011a61 	.word	0x00011a61

00015aac <__frame_dummy_init_array_entry>:
   15aac:	00000435 000004f1 000019bd 00003351     5...........Q3..
   15abc:	00003429 00003501 0000362d 000047b9     )4...5..-6...G..
   15acc:	00005085                                .P..

Disassembly of section .fini:

00015ad0 <_fini>:
   15ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ad2:	bf00      	nop
