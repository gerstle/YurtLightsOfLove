
main.elf:     file format elf32-littlearm
main.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
0x70000001 off    0x0001c44c vaddr 0x0001444c paddr 0x0001444c align 2**2
         filesz 0x000001b8 memsz 0x000001b8 flags r--
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x00014734 memsz 0x00014734 flags r-x
    LOAD off    0x00020400 vaddr 0x1fff8400 paddr 0x00014734 align 2**15
         filesz 0x0000093c memsz 0x0000093c flags rw-
    LOAD off    0x00020d40 vaddr 0x1fff8d40 paddr 0x00015078 align 2**15
         filesz 0x00000000 memsz 0x00000f54 flags rw-
    LOAD off    0x00028000 vaddr 0x1fff8000 paddr 0x1fff8000 align 2**15
         filesz 0x00000000 memsz 0x00000400 flags rw-
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014448  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fini         00000004  00014448  00014448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    000001b8  0001444c  0001444c  0001c44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000130  00014604  00014604  0001c604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .usbdescriptortable 000000a0  1fff8000  1fff8000  00028000  2**2
                  ALLOC
  5 .usbbuffers   00000360  1fff80a0  1fff80a0  00028000  2**0
                  ALLOC
  6 .data         0000093c  1fff8400  00014734  00020400  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f54  1fff8d40  00015078  00020d40  2**3
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020d3c  2**0
                  CONTENTS, READONLY
  9 .comment      00000070  00000000  00000000  00020d66  2**0
                  CONTENTS, READONLY
 10 .debug_info   000283f4  00000000  00000000  00020dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006594  00000000  00000000  000491ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009865  00000000  00000000  0004f75e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e30  00000000  00000000  00058fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c38  00000000  00000000  00059df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006708  00000000  00000000  0005ba2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000e024  00000000  00000000  00062133  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000042e8  00000000  00000000  00070158  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00014448 l    d  .fini	00000000 .fini
0001444c l    d  .ARM.exidx	00000000 .ARM.exidx
00014604 l    d  .ARM.extab	00000000 .ARM.extab
1fff8000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff80a0 l    d  .usbbuffers	00000000 .usbbuffers
1fff8400 l    d  .data	00000000 .data
1fff8d40 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00002740 l     F .text	0000000c startup_default_early_hook
0000274c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff8d40 l       .bss	00000000 completed.7863
00000434 l     F .text	00000000 frame_dummy
1fff8d44 l       .bss	00000000 object.7868
00014424 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 FastLED.cpp
000004f0 l     F .text	0000000c _GLOBAL__sub_I_LEDS
00000000 l    df *ABS*	00000000 hsv2rgb.cpp
000004fc l     F .text	0000003a _ZL15nscale8x3_videoRhS_S_h
00000000 l    df *ABS*	00000000 Perlins.cpp
000129fc l     O .text	00000100 _ZL1p
00000000 l    df *ABS*	00000000 main.cpp
00001074 l     F .text	0000001c _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27
00001194 l     F .text	0000001c _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30
000012ac l     F .text	0000001c _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32
0000194c l     F .text	0000001c _GLOBAL__sub_I_modeChange
1fff90b8 l     O .bss	00000001 _ZZ4mainE6reboot
00000000 l    df *ABS*	00000000 BaseMode.cpp
00000000 l    df *ABS*	00000000 ColorMode.cpp
00000000 l    df *ABS*	00000000 MeltMode.cpp
00001a9c l     F .text	0000001c _ZL8random16v
00000000 l    df *ABS*	00000000 analog.c
00001ed4 l     F .text	000000e4 wait_for_cal
00012c10 l     O .text	00000017 channel2sc1a
1fff90c1 l     O .bss	00000001 analog_right_shift
1fff90c2 l     O .bss	00000001 calibrating
1fff8414 l     O .data	00000001 analog_config_bits
1fff90c3 l     O .bss	00000001 analogReadBusyADC1
1fff90c4 l     O .bss	00000001 analogReadBusyADC0
1fff90c5 l     O .bss	00000001 analog_reference_internal
1fff8415 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 eeprom.c
00002260 l     F .text	00000010 flexram_wait
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
000023fc l     F .text	0000001c _GLOBAL__sub_I_Serial1
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
000024d4 l     F .text	0000001c _GLOBAL__sub_I_Serial2
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
000025ac l     F .text	0000001c _GLOBAL__sub_I_Serial3
00000000 l    df *ABS*	00000000 IntervalTimer.cpp
00000000 l    df *ABS*	00000000 IPAddress.cpp
000026d8 l     F .text	0000001c _GLOBAL__sub_I__ZN9IPAddressC2Ev
1fff9118 l     O .bss	00000008 _ZL11INADDR_NONE
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pins_teensy.c
1fff9120 l     O .bss	00000088 intFunc
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 serial1.c
1fff91ac l     O .bss	00000001 transmitting
1fff91ad l     O .bss	00000001 rx_buffer_tail
1fff91ae l     O .bss	00000040 tx_buffer
1fff91ee l     O .bss	00000040 rx_buffer
1fff922e l     O .bss	00000001 rx_buffer_head
1fff922f l     O .bss	00000001 tx_buffer_tail
1fff9230 l     O .bss	00000004 transmit_pin
1fff9234 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff9235 l     O .bss	00000001 transmitting
1fff9236 l     O .bss	00000001 rx_buffer_tail
1fff9237 l     O .bss	00000028 tx_buffer
1fff925f l     O .bss	00000040 rx_buffer
1fff929f l     O .bss	00000001 rx_buffer_head
1fff92a0 l     O .bss	00000001 tx_buffer_tail
1fff92a1 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial3.c
1fff92a2 l     O .bss	00000001 transmitting
1fff92a3 l     O .bss	00000001 rx_buffer_tail
1fff92a4 l     O .bss	00000028 tx_buffer
1fff92cc l     O .bss	00000040 rx_buffer
1fff930c l     O .bss	00000001 rx_buffer_head
1fff930d l     O .bss	00000001 tx_buffer_tail
1fff930e l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 Tone.cpp
00003864 l     F .text	0000001c _GLOBAL__sub_I_tone_timer
00000000 l    df *ABS*	00000000 usb_desc.c
1fff841c l     O .data	00000012 device_descriptor
1fff8446 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 usb_dev.c
000038f0 l     F .text	00000040 endpoint0_transmit
1fff9324 l     O .bss	00000004 ep0_tx_ptr
1fff9328 l     O .bss	00000010 rx_last
1fff9338 l     O .bss	00000004 tx_state
1fff933c l     O .bss	00000040 ep0_rx0_buf
1fff937c l     O .bss	00000010 rx_first
1fff938c l     O .bss	00000001 ep0_tx_bdt_bank
1fff9390 l     O .bss	00000040 ep0_rx1_buf
1fff93d0 l     O .bss	00000010 tx_first
1fff8000 l     O .usbdescriptortable	000000a0 table
1fff93e0 l     O .bss	00000010 tx_last
1fff93f0 l     O .bss	00000008 setup
1fff93f8 l     O .bss	00000002 ep0_tx_len
1fff93fb l     O .bss	00000008 reply_buffer
1fff9404 l     O .bss	00000001 ep0_tx_data_toggle
00000000 l    df *ABS*	00000000 usb_inst.cpp
00004130 l     F .text	0000001c _GLOBAL__sub_I_Serial
00000000 l    df *ABS*	00000000 usb_mem.c
1fff84bc l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_serial.c
1fff9419 l     O .bss	00000001 tx_noautoflush
1fff941c l     O .bss	00000004 tx_packet
1fff9420 l     O .bss	00000001 transmit_previous_timeout
1fff9424 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 WMath.cpp
1fff942c l     O .bss	00000004 _ZL4seed
00000000 l    df *ABS*	00000000 yield.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
1fff9430 l     O .bss	00000004 _ZL14emergency_used
1fff9438 l     O .bss	00000800 _ZL16emergency_buffer
00000000 l    df *ABS*	00000000 eh_arm.cc
00000000 l    df *ABS*	00000000 eh_call.cc
0000471c l     F .text	0000003a _ZN10__cxxabiv1L24__is_gxx_exception_classEPc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
1fff9c38 l     O .bss	0000000c _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_personality.cc
000049c8 l     F .text	00000032 _ZL12read_sleb128PKhPl
000049fc l     F .text	000000b0 _ZL28read_encoded_value_with_basehjPKhPj
00004aac l     F .text	0000004a _ZL21base_of_encoded_valuehP15_Unwind_Context
00004af8 l     F .text	00000096 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00004fe8 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 vterminate.cc
1fff9c48 l     O .bss	00000001 _ZZN9__gnu_cxx27__verbose_terminate_handlerEvE11terminating
00000000 l    df *ABS*	00000000 cp-demangle.c
000054ac l     F .text	00000096 d_make_comp
00005544 l     F .text	00000032 d_make_name
00005578 l     F .text	000000b2 d_cv_qualifiers
0000562c l     F .text	00000038 d_ref_qualifier
00005664 l     F .text	00000086 d_clone_suffix
000056ec l     F .text	00000154 d_substitution
00005840 l     F .text	00000046 d_append_char
00005888 l     F .text	0000004c d_number.isra.0
000058d4 l     F .text	00000038 d_number_component
0000590c l     F .text	00000030 d_compact_number
0000593c l     F .text	00000044 d_template_param
00005980 l     F .text	0000001e d_discriminator
000059a0 l     F .text	00000084 d_source_name
00005a24 l     F .text	00000054 d_call_offset
00005a78 l     F .text	00000044 d_lookup_template_argument.isra.6
00005abc l     F .text	00000086 d_find_pack
00005b44 l     F .text	0000007c d_growable_string_callback_adapter
00005bc0 l     F .text	000000cc d_expr_primary
000067d4 l     F .text	0000065e d_encoding
00006008 l     F .text	00000708 d_type
00005c8c l     F .text	000000bc d_template_args
000071ac l     F .text	000003bc d_expression
00005d48 l     F .text	000002c0 d_name
00006f30 l     F .text	0000027c d_unqualified_name
00006798 l     F .text	0000003c d_bare_function_type
00006710 l     F .text	00000088 d_parmlist
00006e34 l     F .text	000000fc d_operator_name
00007568 l     F .text	00000064 d_exprlist
000075cc l     F .text	00000068 d_append_string
00007634 l     F .text	0000252c d_print_comp.part.10
00009b60 l     F .text	00000016 d_print_comp
00009b78 l     F .text	00000546 d_print_mod
0000a824 l     F .text	00000074 d_print_expr_op
0000a898 l     F .text	000000aa d_print_subexpr
0000a324 l     F .text	000001a0 d_print_array_type.isra.9
0000a4c4 l     F .text	000001d8 d_print_function_type.isra.11
0000a69c l     F .text	00000186 d_print_cast.isra.12
0000a0c0 l     F .text	00000264 d_print_mod_list
0000a944 l     F .text	0000020c d_demangle_callback.constprop.16
0001318c l     O .text	000000c4 standard_subs
00013250 l     O .text	00000294 cplus_demangle_builtin_types
000134e4 l     O .text	000003e0 cplus_demangle_operators
00000000 l    df *ABS*	00000000 eh_type.cc
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
000140b8 l     O .text	00000080 npio2_hw
00014138 l     O .text	00000108 two_over_pi
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00014240 l     O .text	00000010 init_jk
00014250 l     O .text	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 unwind-arm.c
0000c8e0 l     F .text	00000012 selfrel_offset31
0000c8f4 l     F .text	00000072 search_EIT_table
0000c968 l     F .text	00000028 __gnu_unwind_get_pr_addr
0000c990 l     F .text	000000ac get_eit_entry
0000ca3c l     F .text	00000058 restore_non_core_regs
0000ca94 l     F .text	0000000c _Unwind_decode_typeinfo_ptr.isra.0
0000caa0 l     F .text	00000004 __gnu_unwind_24bit.isra.1
0000caa4 l     F .text	00000002 _Unwind_DebugHook
0000caa8 l     F .text	0000003e unwind_phase2
0000cae8 l     F .text	000000da unwind_phase2_forced
0000ccd8 l     F .text	0000001a _Unwind_GetGR
0000cd28 l     F .text	0000001c _Unwind_SetGR
0000cdb4 l     F .text	000002e4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
0000d4a8 l     F .text	00000032 next_unwind_byte
0000d4dc l     F .text	0000001a _Unwind_GetGR.constprop.0
0000d4f8 l     F .text	00000004 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014298 l     O .text	00000010 zeroes.6763
000142ec l     O .text	00000010 blanks.6762
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000104f8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00010518 l     F .text	00000130 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
1fff8d04 l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mprec.c
00014408 l     O .text	0000000c p05.5269
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
1fff84c8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 /Applications/Arduino.app/Contents/Java/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/crti.o
00000000 l    df *ABS*	00000000 /Applications/Arduino.app/Contents/Java/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/crtn.o
00000000 l    df *ABS*	00000000 lib8tion.cpp
00000000 l    df *ABS*	00000000 leds.cpp
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000455c g     F .text	00000034 __cxa_free_exception
0000d460 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
0000cbc8 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00002738  w    F .text	00000006 adc0_isr
00001ae0 g     F .text	00000012 _ZN8MeltModeD0Ev
00005258 g     F .text	00000004 _ZNKSt9type_info15__is_function_pEv
00004250 g     F .text	0000001c usb_serial_available
00004fd8 g     F .text	00000010 _ZSt10unexpectedv
000123d8 g     F .text	00000024 _isatty_r
0000c814 g     F .text	00000012 .hidden __aeabi_dcmple
000023e2  w    F .text	00000018 _ZN14HardwareSerial5writeEPKc
000124a8 g     F .text	00000030 .hidden __gnu_uldivmod_helper
000027d4 g     F .text	00000004 _getpid
00003858  w    F .text	0000000c _ZN13IntervalTimerD2Ev
00012b40  w    O .text	00000018 _ZTV15P9813ControllerILh8ELh9EL6EOrder10ELh4EE
00001a60 g     F .text	0000003c _ZN9ColorModeC1EPKc4CHSVl
0000c750 g     F .text	0000007a .hidden __cmpdf2
0000be28 g     F .text	00000006 fabs
000123fc g     F .text	00000028 _lseek_r
0000445c  w    F .text	00000002 yield
00012b58  w    O .text	00000018 _ZTV15P9813ControllerILh10ELh11EL6EOrder10ELh4EE
0000145c  w    F .text	000000fc _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_
0000ab50 g     F .text	000000c4 __cxa_demangle
0000256c  w    F .text	0000000c _ZN15HardwareSerial35writeEh
0000c750 g     F .text	0000007a .hidden __eqdf2
000124dc g     F .text	00000296 .hidden __divdi3
000050bc g     F .text	00000070 __cxa_rethrow
1fff842e g     O .data	00000002 usb_string_manufacturer_name_default
00003034 g     F .text	00000020 serial_available
000023a0  w    F .text	00000006 _ZN14HardwareSerial17transmitterEnableEh
0000c2c0 g     F .text	0000005a .hidden __floatdidf
00002738  w    F .text	00000006 hard_fault_isr
00002520  w    F .text	00000014 _ZN15HardwareSerial35beginEm
00002738  w    F .text	00000006 dma_ch6_isr
0000ea18 g     F .text	00000028 _kill_r
00001968 g     F .text	0000000c _ZN8BaseModeD1Ev
000044d4 g     F .text	00000014 _ZNSt9bad_allocD2Ev
00004590 g     F .text	00000000 __cxa_end_cleanup
000020b8 g     F .text	00000054 analogReadAveraging
0000109e  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv
00003660 g     F .text	00000090 serial3_putchar
00002c80 g     F .text	00000020 _ZN5Print7printlnEv
000033e8 g     F .text	00000020 serial2_available
00012114 g     F .text	00000020 __sseek
0001160c g     F .text	000000f4 __sinit
00002738  w    F .text	00000006 uart0_lon_isr
0000398c g     F .text	00000078 usb_rx_memory
00001ac0 g     F .text	00000020 _ZN8MeltModeD2Ev
000102bc g     F .text	000000a8 __swbuf_r
0000512c g     F .text	00000014 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00013034 g     O .text	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00002738  w    F .text	00000006 dma_ch8_isr
0000e554 g     F .text	00000002 __malloc_unlock
000011be  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv
00002514  w    F .text	0000000c _ZN15HardwareSerial35writeEi
000032d4 g     F .text	00000058 serial2_end
00001fb8 g     F .text	000000b8 analog_init
00003a04 g     F .text	00000080 usb_tx
00010258 g     F .text	0000004a _vdprintf_r
00002270 g     F .text	0000006c eeprom_initialize
00001974 g     F .text	00000014 _ZN8BaseModeD0Ev
1fff9056  w    O .bss	00000001 _ZZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEvE1R
00002568  w    F .text	00000004 _ZN15HardwareSerial35clearEv
0000e3fc g     F .text	000000c0 memmove
0000d31c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00004968 g     F .text	0000000c _ZNSt9exceptionD2Ev
0000d43c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
000023aa  w    F .text	00000004 _ZN14HardwareSerial4peekEv
00002824 g     F .text	00000028 init_pin_interrupts
00011aa4 g     F .text	0000004c _Balloc
1fff90c0 g     O .bss	00000001 modeChange
00014604 g       .ARM.exidx	00000000 __exidx_end
00002738  w    F .text	00000006 dma_error_isr
00012b28  w    O .text	00000018 _ZTV15P9813ControllerILh6ELh7EL6EOrder10ELh4EE
00002738  w    F .text	00000006 i2c0_isr
0000d098 g     F .text	00000006 .hidden __aeabi_unwind_cpp_pr0
0000c740 g     F .text	0000008a .hidden __gtdf2
00012fa0 g     O .text	00000014 _ZTVSt13bad_exception
00002594  w    F .text	00000018 _ZN15HardwareSerial35writeEPKc
00002a34 g     F .text	00000084 portd_isr
000030b8 g     F .text	00000040 serial_clear
0000247c  w    F .text	00000004 _ZN15HardwareSerial23endEv
0000d7b4 g     F .text	0000000a .hidden _Unwind_GetRegionStart
1fff90d0 g     O .bss	00000010 Serial1
0000d43c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00004126  w    F .text	00000008 _ZN16usb_serial_class5writeEPKhj
000123b0 g     F .text	00000028 _fstat_r
00012d38 g     O .text	00000110 digital_pin_to_info_PGM
1fff9c90 g     O .bss	00000004 errno
0000acc0 g     F .text	00000120 floor
00014734 g       .ARM.extab	00000000 _etext
000011ec  w    F .text	000000c0 _ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh
1fff8d40 g       .bss	00000000 _sbss
0000d484 g     F .text	00000022 .hidden _Unwind_Backtrace
0000c7dc g     F .text	00000010 .hidden __aeabi_cdcmple
00002338  w    F .text	0000000c _ZN14HardwareSerial5writeEm
000023a6  w    F .text	00000004 _ZN14HardwareSerial9availableEv
00002b48 g     F .text	0000001c digitalRead
00004648 g     F .text	00000064 __cxa_begin_cleanup
00002ab8 g     F .text	00000030 porte_isr
000028f0 g     F .text	00000088 portb_isr
00001ab8  w    F .text	00000008 _ZN8MeltMode4nameEv
0000d2fc g     F .text	00000018 .hidden __restore_core_regs
0000d33c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00002738  w    F .text	00000006 spi1_isr
00004778 g     F .text	000000d8 __cxa_call_unexpected
00002738  w    F .text	00000006 uart3_status_isr
00002738  w    F .text	00000006 mcm_isr
0000243c  w    F .text	0000000c _ZN15HardwareSerial25writeEi
00001a60 g     F .text	0000003c _ZN9ColorModeC2EPKc4CHSVl
00002696 g     F .text	00000042 _ZNK9IPAddress7printToER5Print
000023ba  w    F .text	0000000c _ZN14HardwareSerial5writeEh
0000ae78 g     F .text	0000043c __ieee754_rem_pio2
00001af8 g     F .text	00000388 _ZN8MeltMode5frameEv
00003480 g     F .text	000000a4 uart1_status_isr
0000cbc4 g     F .text	00000004 .hidden _Unwind_GetCFA
0000e2c8 g     F .text	00000134 memcpy
0000346c g     F .text	00000014 serial2_clear
0000c7cc g     F .text	00000020 .hidden __aeabi_cdrcmple
000004b8 g     F .text	00000038 _ZN8CFastLED4showEh
0000ccf4 g     F .text	00000034 .hidden _Unwind_VRS_Set
00011600 g     F .text	0000000c _cleanup_r
000052e0 g     F .text	0000000c _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0000ed60 g     F .text	000014f8 _svfprintf_r
0000c250 g     F .text	00000022 .hidden __floatsidf
1fff91a8 g     O .bss	00000004 systick_millis_count
0000c748 g     F .text	00000082 .hidden __ltdf2
00002738  w    F .text	00000006 bus_fault_isr
00000b4c  w    F .text	00000040 _ZN14CLEDControllerC2Ev
00002738  w    F .text	00000006 watchdog_isr
000052ec g     F .text	00000014 _ZN10__cxxabiv117__class_type_infoD1Ev
0001244c g     F .text	00000000 .hidden __aeabi_uldivmod
00002784 g     F .text	0000003c nvic_execution_priority
00002738  w    F .text	00000006 i2c1_isr
1fff9310 g     O .bss	00000014 tone_timer
1fff9403 g     O .bss	00000001 usb_configuration
00002738  w    F .text	00000006 dma_ch11_isr
00001e80 g     F .text	00000054 _ZN8MeltModeC1Ev
000024a0  w    F .text	0000000c _ZN15HardwareSerial29write9bitEm
00000000  w      *UND*	00000000 __fini_array_end
00002430  w    F .text	0000000c _ZN15HardwareSerial25writeEj
0000be30 g     F .text	00000050 __fpclassifyd
00002738  w    F .text	00000006 i2c2_isr
1fff842e  w    O .data	00000002 usb_string_manufacturer_name
1fff9c80 g     O .bss	00000008 usb_rx_byte_count_data
000025e0 g     F .text	00000018 pit1_isr
0000dc78 g     F .text	00000010 malloc
00000f86  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv
00002738  w    F .text	00000006 dma_ch4_isr
000021ec g     F .text	00000074 software_isr
0000e9b0 g     F .text	00000056 _raise_r
00002758  w    F .text	0000000a _fstat
00002738  w    F .text	00000006 dma_ch7_isr
00014318 g     O .text	000000c8 __mprec_tens
00004070 g     F .text	000000a0 usb_init
1fff9090  w    O .bss	0000001c _ZZN8CFastLED7addLedsIL12ESPIChipsets4ELh6ELh7EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
0000b2b8 g     F .text	00000250 __kernel_cos
00003608 g     F .text	00000058 serial3_end
0000c8a0 g     F .text	00000040 .hidden __fixunsdfsi
00002738  w    F .text	00000006 lptmr_isr
1fff9c54 g     O .bss	00000004 __malloc_top_pad
00002ae8 g     F .text	00000020 rtc_set
1fff9104 g     O .bss	00000001 _ZN13IntervalTimer11PIT_enabledE
0000ea40 g     F .text	00000004 _getpid_r
1fff90b0  w    O .bss	00000004 _ZGVZN8CFastLED7addLedsIL12ESPIChipsets4ELh8ELh9EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
0000cd44 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
1fff8404 g     O .data	00000002 rand16seed
1fff8400 g     O .data	00000000 .hidden __dso_handle
0000c230 g     F .text	0000001e .hidden __aeabi_ui2d
000119bc g     F .text	00000008 _localeconv_r
00003278 g     F .text	0000005c serial2_format
000046ac g     F .text	00000070 __gnu_end_cleanup
00011c38 g     F .text	00000012 __i2b
0000d88c g     F .text	00000318 __sfvwrite_r
00005334 g     F .text	00000024 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00012c88  w    O .text	0000004c _ZTV15HardwareSerial2
0000373c g     F .text	00000034 serial3_getchar
00002344  w    F .text	0000000c _ZN14HardwareSerial5writeEl
1fff8400 g       .data	00000000 _sdata
0000bfac g     F .text	00000000 .hidden __aeabi_drsub
0000e98c g     F .text	00000024 _sbrk_r
00003020 g     F .text	00000014 serial_flush
000001bc g     F .text	00000188 ResetHandler
000041cc g     F .text	0000004c usb_serial_getchar
0000d32c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00013078 g     O .text	00000020 _ZTVSt9type_info
00002738  w    F .text	00000006 ftm2_isr
000011b0  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv
1fff9c88 g     O .bss	00000008 usb_cdc_line_coding
00002b08 g     F .text	00000040 digitalWrite
00002738  w    F .text	00000006 uart5_status_isr
1fff9058  w    O .bss	0000001c _ZZN8CFastLED7addLedsIL12ESPIChipsets4ELh10ELh11EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
00012424 g     F .text	00000028 _read_r
00004980 g     F .text	00000008 _ZNKSt9exception4whatEv
00012e4a g     O .text	00000004 usb_endpoint_config_table
00002738  w    F .text	00000006 dma_ch9_isr
00002368  w    F .text	00000014 _ZN14HardwareSerial5beginEm
00001e80 g     F .text	00000054 _ZN8MeltModeC2Ev
000006a4 g     F .text	0000000c _ZN7PerlinsD1Ev
000025f8 g     F .text	00000018 pit2_isr
000031f0 g     F .text	00000088 serial2_begin
0000c800 g     F .text	00000012 .hidden __aeabi_dcmplt
0000371c g     F .text	00000020 serial3_available
0000d0b0 g     F .text	0000024a .hidden _Unwind_VRS_Pop
00012320 g     F .text	00000080 _fclose_r
00000f78  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv
0000d0a8  w    F .text	00000006 .hidden __aeabi_unwind_cpp_pr2
00012ee0 g     O .text	0000000c _ZTISt9bad_alloc
1fff9c50 g     O .bss	00000004 __malloc_max_sbrked_mem
00000fb4  w    F .text	000000c0 _ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh
00002490  w    F .text	00000004 _ZN15HardwareSerial25clearEv
000010cc  w    F .text	000000c8 _ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh
0000d484 g     F .text	00000022 .hidden ___Unwind_Backtrace
00002b64 g     F .text	00000038 pinMode
00004188 g     F .text	00000044 usb_free
0000bcb8 g     F .text	0000016c __kernel_sin
0000c274 g     F .text	0000003a .hidden __extendsfdf2
00001328  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h
0000c570 g     F .text	000001d0 .hidden __aeabi_ddiv
000129f8 g     O .text	00000004 FastLED
0000bfb8 g     F .text	00000276 .hidden __adddf3
0000332c g     F .text	00000090 serial2_putchar
1fff8408 g     O .data	00000004 leds_three
00012ff8 g     O .text	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00002480  w    F .text	00000004 _ZN15HardwareSerial29availableEv
00003408 g     F .text	00000034 serial2_getchar
1fff8d64 g     O .bss	00000004 _ZN14CLEDController7m_pTailE
0001444c g       .ARM.exidx	00000000 __exidx_start
0000c31c g     F .text	00000254 .hidden __aeabi_dmul
000025c8 g     F .text	00000018 pit0_isr
00002584  w    F .text	00000010 _ZN15HardwareSerial35writeEPKhj
00001ac0 g     F .text	00000020 _ZN8MeltModeD1Ev
00001998 g     F .text	00000014 _ZN9ColorModeD1Ev
00002762  w    F .text	00000004 _isatty
0000531c g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0000446c g     F .text	00000008 _ZdlPv
00014294 g     O .text	00000004 _global_impure_ptr
000024f0  w    F .text	0000000c _ZN15HardwareSerial35writeEm
0000e5c0 g     F .text	000003cc _realloc_r
0000dc28 g     F .text	00000050 __libc_init_array
00002738  w    F .text	00000006 can0_wakeup_isr
00012774 g     F .text	00000282 .hidden __udivdi3
0000d3f4 g     F .text	00000022 .hidden ___Unwind_RaiseException
000024bc  w    F .text	00000018 _ZN15HardwareSerial25writeEPKc
00002738  w    F .text	00000006 flash_cmd_isr
000024ac  w    F .text	00000010 _ZN15HardwareSerial25writeEPKhj
00003524 g     F .text	00000088 serial3_begin
000143e0 g     O .text	00000028 __mprec_bigtens
0000d7e4 g     F .text	0000000e abort
0000d418 g     F .text	00000022 .hidden ___Unwind_Resume
0000c230 g     F .text	0000001e .hidden __floatunsidf
000037b4 g     F .text	000000a4 uart2_status_isr
000027c0 g     F .text	00000010 _sbrk
1fff9074  w    O .bss	0000001c _ZZN8CFastLED7addLedsIL12ESPIChipsets4ELh8ELh9EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
00011ee0 g     F .text	00000046 __mcmp
0000284c g     F .text	00000054 attachInterrupt
1fff8418 g     O .data	00000004 __brkval
000048dc g     F .text	0000008c __cxa_end_catch
1fff9428 g     O .bss	00000001 usb_cdc_line_rtsdtr
000043b0 g     F .text	00000048 usb_serial_flush_callback
00004974 g     F .text	0000000c _ZNSt13bad_exceptionD2Ev
0000245c  w    F .text	00000020 _ZN15HardwareSerial25beginEmm
0000168c  w    F .text	000000ea _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_
00014414 g     F .text	00000000 _init
00012bc0 g     O .text	00000018 _ZTV8BaseMode
000036f0 g     F .text	00000016 serial3_write
00002738  w    F .text	00000006 svcall_isr
000006d0 g     F .text	0000005c _ZN7Perlins4fadeEd
00002304 g     F .text	00000034 eeprom_write_byte
00002738  w    F .text	00000006 dma_ch15_isr
00004fc0 g     F .text	00000010 _ZSt9terminatev
00002d38 g     F .text	0000009c serial_begin
0000d344 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
0000237c  w    F .text	00000020 _ZN14HardwareSerial5beginEmm
00001090  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv
0000b508 g     F .text	000007ae __kernel_rem_pio2
000019ac g     F .text	00000012 _ZN9ColorModeD0Ev
00002738  w    F .text	00000006 uart1_error_isr
00011708 g     F .text	00000030 __libc_fini_array
1fff9c94 g       .bss	00000000 _ebss
1fff90f0 g     O .bss	00000010 Serial3
00002554  w    F .text	00000004 _ZN15HardwareSerial33endEv
000130d4 g     O .text	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00000a8c  w    F .text	0000002c _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9clearLedsEi
00011b9c g     F .text	00000040 __hi0bits
1fff90bc g     O .bss	00000004 lastActionTime
00004b90 g     F .text	00000406 __gxx_personality_v0
00012f30 g     O .text	00000008 _ZTISt9exception
0000c850 g     F .text	0000004e .hidden __fixdfsi
00002738 g     F .text	00000006 unused_isr
00002738  w    F .text	00000006 spi0_isr
000006c4 g     F .text	0000000c _ZN7PerlinsC1Ev
00002560  w    F .text	00000004 _ZN15HardwareSerial34readEv
00002738  w    F .text	00000006 dma_ch3_isr
00005248 g     F .text	0000000c _ZNSt9type_infoD1Ev
1fff9c44 g     O .bss	00000004 __new_handler
0000e558 g     F .text	00000058 _putc_r
000023c6  w    F .text	0000000c _ZN14HardwareSerial9write9bitEm
00005260 g     F .text	00000014 _ZNSt9type_infoD0Ev
00000bfe  w    F .text	00000020 _ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_
00002738  w    F .text	00000006 flash_error_isr
000023b6  w    F .text	00000004 _ZN14HardwareSerial5clearEv
0000bfb8 g     F .text	00000276 .hidden __aeabi_dadd
0000c748 g     F .text	00000082 .hidden __ledf2
000023b2  w    F .text	00000004 _ZN14HardwareSerial5flushEv
00002ec0 g     F .text	0000009c serial_putchar
00002738  w    F .text	00000006 uart5_error_isr
00002738  w    F .text	00000006 rtc_seconds_isr
00002738  w    F .text	00000006 pdb_isr
00011d88 g     F .text	0000009c __pow5mult
0000c2b0 g     F .text	0000006a .hidden __aeabi_ul2d
00002738  w    F .text	00000006 usage_fault_isr
0000525c g     F .text	00000004 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000d314 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00002738  w    F .text	00000006 dac1_isr
00002738  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff8d68 g     O .bss	000002ee leds
000026f4  w    F .text	00000010 systick_isr
00003708 g     F .text	00000014 serial3_flush
1fff90ac  w    O .bss	00000004 _ZGVZN8CFastLED7addLedsIL12ESPIChipsets4ELh10ELh11EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
00002738  w    F .text	00000006 rtc_alarm_isr
0000d418 g     F .text	00000022 .hidden _Unwind_Resume
1fff90c8 g     O .bss	00000004 _ZN11AudioStream12first_updateE
00002738  w    F .text	00000006 dma_ch2_isr
1fff9408 g     O .bss	00000010 Serial
0000cc94 g     F .text	0000000e .hidden _Unwind_DeleteException
0000cc90 g     F .text	00000002 .hidden _Unwind_Complete
00002738  w    F .text	00000006 ftm1_isr
00012c38  w    O .text	0000004c _ZTV14HardwareSerial
00004120  w    F .text	00000006 _ZN16usb_serial_class5writeEh
00002740  w    F .text	0000000c startup_early_hook
00002738  w    F .text	00000006 dma_ch13_isr
0000248c  w    F .text	00000004 _ZN15HardwareSerial25flushEv
00005358 g     F .text	0000003e _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00002738  w    F .text	00000006 uart2_error_isr
0000c83c g     F .text	00000012 .hidden __aeabi_dcmpgt
00004218 g     F .text	00000038 usb_serial_peekchar
000052a8 g     F .text	00000036 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0000ac4c g     F .text	00000074 cos
00011700 g     F .text	00000002 __sfp_lock_acquire
00012f38 g     O .text	00000012 _ZTSSt13bad_exception
0000e1d0 g     F .text	00000090 memchr
1fff84a4 g     O .data	00000002 usb_string_serial_number_default
00002704 g     F .text	00000034 fault_isr
000117d4 g     F .text	0000019c _free_r
0000072c g     F .text	00000052 _ZN7Perlins4gradEiddd
0000c828 g     F .text	00000012 .hidden __aeabi_dcmpge
00002738  w    F .text	00000006 usb_charge_isr
0000411c  w    F .text	00000004 _ZN16usb_serial_class5flushEv
00002738  w    F .text	00000006 cmt_isr
0000bfb4 g     F .text	0000027a .hidden __aeabi_dsub
00001998 g     F .text	00000014 _ZN9ColorModeD2Ev
1fff8d00 g     O .data	00000004 __malloc_sbrk_base
00004114  w    F .text	00000004 _ZN16usb_serial_class4readEv
00002738  w    F .text	00000006 ftm3_isr
00002738  w    F .text	00000006 tsi0_isr
00013064 g     O .text	0000000d _ZTSSt9type_info
0000239c  w    F .text	00000004 _ZN14HardwareSerial3endEv
0000ade0 g     F .text	00000094 sin
0000c2b0 g     F .text	0000006a .hidden __floatundidf
000044cc g     F .text	00000008 _ZNKSt9bad_alloc4whatEv
00002766  w    F .text	00000006 _lseek
0000276e  w    F .text	00000002 __cxa_pure_virtual
00011e24 g     F .text	000000bc __lshift
00012ec8 g     O .text	00000014 _ZTVSt9bad_alloc
00002738  w    F .text	00000006 spi2_isr
0001213c g     F .text	00000100 __ssprint_r
0000d4fc g     F .text	0000028c .hidden __gnu_unwind_execute
0001223c g     F .text	0000005e _vasnprintf_r
00012d28 g     O .text	0000000c _ZTV9IPAddress
00001654  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h
1fff938d g     O .bss	00000001 usb_reboot_timer
00010450 g     F .text	000000a8 __register_exitproc
00012efc g     O .text	0000000d _ZTSSt9bad_alloc
000022dc g     F .text	00000028 eeprom_read_byte
0000ecac g     F .text	000000b4 strncmp
00005190 g     F .text	00000096 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000d324 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00001776  w    F .text	000000ea _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_
00002070 g     F .text	00000048 analogReference
00011c4c g     F .text	0000013c __multiply
00000ab8  w    F .text	0000002c _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9clearLedsEi
0000433c g     F .text	00000016 usb_serial_putchar
00000490 g     F .text	00000026 _ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii
1fff9c58 g     O .bss	00000028 __malloc_current_mallinfo
00011ffc g     F .text	000000ba __d2b
00005248 g     F .text	0000000c _ZNSt9type_infoD2Ev
0000459c g     F .text	000000ac __cxa_type_match
00002738  w    F .text	00000006 can0_bus_off_isr
000033bc g     F .text	00000016 serial2_write
00002494  w    F .text	0000000c _ZN15HardwareSerial25writeEh
00005228 g     F .text	00000020 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00002418  w    F .text	0000000c _ZN15HardwareSerial25writeEm
0000e5b0 g     F .text	00000010 realloc
000010ac  w    F .text	0000001e _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4initEv
1fff93fa g     O .bss	00000001 usb_rx_memory_needed
0000cc3c g     F .text	00000044 .hidden __gnu_Unwind_Resume
00003a84 g     F .text	000005ec usb_isr
0000d7f4 g     F .text	00000014 __cxa_atexit
00012f94 g     O .text	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
000122fc g     F .text	00000024 _close_r
0000c250 g     F .text	00000022 .hidden __aeabi_i2d
0000d334 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
0000e260 g     F .text	00000066 memcmp
00012ea8  w    O .text	00000020 _ZTV16usb_serial_class
00002738  w    F .text	00000006 uart3_error_isr
0000dba4 g     F .text	00000062 _fwrite_r
000044e8 g     F .text	0000001c _ZNSt9bad_allocD0Ev
00001968 g     F .text	0000000c _ZN8BaseModeD2Ev
0000512c g     F .text	00000014 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00000b8c  w    F .text	00000072 _ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_
00002dd4 g     F .text	0000005c serial_format
00004404 g     F .text	00000044 _Z6randomv
0001038c g     F .text	000000c4 __swsetup_r
0000d3f4 g     F .text	00000022 .hidden _Unwind_RaiseException
000124d8  w    F .text	00000002 .hidden __aeabi_ldiv0
000028a0 g     F .text	00000050 porta_isr
0000c570 g     F .text	000001d0 .hidden __divdf3
00005254 g     F .text	00000004 _ZNKSt9type_info14__is_pointer_pEv
1fff80a0 g     O .usbbuffers	00000360 usb_buffer_memory
00002738  w    F .text	00000006 low_voltage_isr
1fff88f4 g     O .data	00000408 __malloc_av_
00002738  w    F .text	00000006 can0_error_isr
00002f5c g     F .text	000000c4 serial_write
00002c04 g     F .text	0000007c _init_Teensyduino_internal_
0000c31c g     F .text	00000254 .hidden __muldf3
000120b8 g     F .text	00000022 __sread
00012f10 g     O .text	00000014 _ZTVSt9exception
000037a0 g     F .text	00000014 serial3_clear
00004354 g     F .text	0000005c usb_serial_flush_output
00002738  w    F .text	00000006 dma_ch12_isr
0000e550 g     F .text	00000002 __malloc_lock
00000780 g     F .text	0000030a _ZN7Perlins6pnoiseEddd
00000000  w      *UND*	00000000 __fini_array_start
00013098 g     O .text	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000502c g     F .text	00000090 __cxa_throw
000115d4 g     F .text	0000002c _fflush_r
0001229c g     F .text	0000005e _calloc_r
00002448  w    F .text	00000014 _ZN15HardwareSerial25beginEm
00002610 g     F .text	00000018 pit3_isr
00002978 g     F .text	000000bc portc_isr
0000e4bc g     F .text	00000094 memset
00000c20 g     F .text	00000358 main
1fff9c4c g     O .bss	00000004 __malloc_max_total_mem
00012bd8 g     O .text	00000018 _ZTV9ColorMode
1fff8d5c g     O .bss	00000001 LEDS
0000343c g     F .text	00000030 serial2_peek
000049b8 g     F .text	00000008 __cxa_get_globals_fast
00000bfe  w    F .text	00000020 _ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIJS1_EEEvDpOT_
00002738  w    F .text	00000006 memmanage_fault_isr
00012134 g     F .text	00000008 __sclose
00003880 g     F .text	00000070 usb_init_serialnumber
000123a0 g     F .text	00000010 fclose
00014448 g       .text	00000000 __init_array_end
00010648 g     F .text	00000e34 _dtoa_r
0000dc98 g     F .text	00000538 _malloc_r
00002738  w    F .text	00000006 debugmonitor_isr
00000f94  w    F .text	0000001e _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4initEv
00004988 g     F .text	00000008 _ZNKSt13bad_exception4whatEv
0000c2c0 g     F .text	0000005a .hidden __aeabi_l2d
000130c8 g     O .text	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00002578  w    F .text	0000000c _ZN15HardwareSerial39write9bitEm
00011970 g     F .text	0000004a _fwalk
00002b9c g     F .text	00000040 micros
00000000  w      *UND*	00000000 __libc_fini
00004974 g     F .text	0000000c _ZNSt13bad_exceptionD1Ev
00002738  w    F .text	00000006 cmp1_isr
00002738  w    F .text	00000006 ftm0_isr
00011738 g     F .text	0000009c _malloc_trim_r
0000cc28 g     F .text	00000014 .hidden __gnu_Unwind_ForcedUnwind
0000426c g     F .text	000000d0 usb_serial_write
1fff84a0 g     O .data	00000002 string0
0000274c  w    F .text	00000002 startup_late_hook
0000255c  w    F .text	00000004 _ZN15HardwareSerial34peekEv
00004110  w    F .text	00000004 _ZN16usb_serial_class9availableEv
0000ea90 g     F .text	00000000 strcmp
00002508  w    F .text	0000000c _ZN15HardwareSerial35writeEj
00002534  w    F .text	00000020 _ZN15HardwareSerial35beginEmm
0000cc80 g     F .text	00000010 .hidden __gnu_Unwind_Resume_or_Rethrow
000024fc  w    F .text	0000000c _ZN15HardwareSerial35writeEl
1fff848a  w    O .data	00000002 usb_string_product_name
00000000  w      *UND*	00000000 __gnu_Unwind_Find_exidx
0000bf98 g     F .text	00000012 copysign
00002e30 g     F .text	00000058 serial_end
00002bdc g     F .text	00000028 delay
0000c750 g     F .text	0000007a .hidden __nedf2
00014448 g     F .fini	00000000 _fini
00002350  w    F .text	0000000c _ZN14HardwareSerial5writeEj
0000d2fc g     F .text	00000018 .hidden restore_core_regs
0000d3e0 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00005140 g     F .text	0000001c _ZN10__cxxabiv120__si_class_type_infoD0Ev
000006b0 g     F .text	00000014 _ZN7PerlinsD0Ev
0000ea44 g     F .text	0000004c sprintf
00002cac g     F .text	0000001a _ZN5Print6printfEPKcz
00002738  w    F .text	00000006 i2s0_rx_isr
00002738  w    F .text	00000006 uart4_error_isr
0000264c g     F .text	00000038 _ZN13IntervalTimer8stop_PITEv
0001050c g     F .text	0000000c atexit
0000277c  w    F .text	00000006 __cxa_guard_release
00010364 g     F .text	00000028 _write_r
0000d7dc g     F .text	00000006 .hidden _Unwind_GetTextRelBase
00004758 g     F .text	0000001e __cxa_call_terminate
00000b4c  w    F .text	00000040 _ZN14CLEDControllerC1Ev
00001360  w    F .text	000000fc _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_
00002738  w    F .text	00000006 can0_message_isr
1fff88f0 g     O .data	00000004 _impure_ptr
00012f28 g     O .text	00000008 _ZTIN10__cxxabiv115__forced_unwindE
1fff8410 g     O .data	00000004 leds_one
00011480 g     F .text	00000152 __sflush_r
0000be80 g     F .text	00000114 scalbn
00002738  w    F .text	00000006 nmi_isr
00002484  w    F .text	00000004 _ZN15HardwareSerial24peekEv
00002684 g     F .text	00000012 _ZN13IntervalTimer3endEv
00014420 g       .text	00000000 __preinit_array_end
000006a4 g     F .text	0000000c _ZN7PerlinsD2Ev
000043f8 g     F .text	0000000c _Z10randomSeedm
00002738  w    F .text	00000006 sdhc_isr
00012cd8  w    O .text	0000004c _ZTV15HardwareSerial3
00002564  w    F .text	00000004 _ZN15HardwareSerial35flushEv
0000d808 g     F .text	00000028 fputc
00000464  w    F .text	0000002c _ZN14CLEDController13getAdjustmentEh
00003930 g     F .text	00000038 usb_rx
00012e50 g     O .text	00000054 usb_descriptor_list
00012f70 g     O .text	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00002738  w    F .text	00000006 dma_ch10_isr
00002628 g     F .text	00000024 _ZN13IntervalTimer11disable_PITEv
0000235c  w    F .text	0000000c _ZN14HardwareSerial5writeEi
0000d7c0 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00012b00 g     O .text	00000010 _ZTV7Perlins
0000c8a0 g     F .text	00000040 .hidden __aeabi_d2uiz
00002738  w    F .text	00000006 uart0_error_isr
00004850 g     F .text	0000008c __cxa_begin_catch
000052ec g     F .text	00000014 _ZN10__cxxabiv117__class_type_infoD2Ev
00004fd0 g     F .text	00000008 _ZN10__cxxabiv112__unexpectedEPFvvE
00001860  w    F .text	000000ea _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_
0000414c g     F .text	0000003c usb_malloc
00001558  w    F .text	000000fc _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_
1fff9108 g     O .bss	00000010 _ZN13IntervalTimer7PIT_ISRE
00001328  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC2EPK4CRGBiRS2_h
0000cca4 g     F .text	00000034 .hidden _Unwind_VRS_Get
20008000 g       *ABS*	00000000 _estack
000049a4 g     F .text	00000014 _ZNSt13bad_exceptionD0Ev
1fff84c4 g     O .data	00000004 _ZN10__cxxabiv119__terminate_handlerE
0000d3cc g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
0000ac14 g     F .text	0000001c __gcclibcxx_demangle_callback
0000c7ec g     F .text	00000012 .hidden __aeabi_dcmpeq
00004504 g     F .text	00000058 __cxa_allocate_exception
0000dc08 g     F .text	00000020 fwrite
00013028 g     O .text	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00002ca0  w    F .text	0000000c _write
0000d788 g     F .text	0000002a .hidden __gnu_unwind_frame
0000d460 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
1fff8d3c g       .data	00000000 _edata
00002738  w    F .text	00000006 i2s0_tx_isr
00002738  w    F .text	00000006 adc1_isr
00000b10 g     F .text	0000003c _Z16modeButtonChangev
0000d830 g     F .text	0000004c _fputs_r
00002738  w    F .text	00000006 cmp0_isr
000027e6 g     F .text	0000003c ultoa
00001654  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC2ERK4CRGBiRS2_h
00004968 g     F .text	0000000c _ZNSt9exceptionD1Ev
1fff840c g     O .data	00000004 leds_two
000120dc g     F .text	00000038 __swrite
00004474 g     F .text	00000058 _Znwj
1fff8cfc g     O .data	00000004 __malloc_trim_threshold
00004118  w    F .text	00000004 _ZN16usb_serial_class4peekEv
000012c8  w    F .text	00000060 _ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv
00012b10  w    O .text	00000018 _ZTV14CLEDController
000026f4 g     F .text	00000010 systick_default_isr
0000515c g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00011f28 g     F .text	000000d4 __mdiff
0000c850 g     F .text	0000004e .hidden __aeabi_d2iz
00004f98 g     F .text	00000026 _ZN10__cxxabiv111__terminateEPFvvE
0000d388 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
000023ae  w    F .text	00000004 _ZN14HardwareSerial4readEv
00002488  w    F .text	00000004 _ZN15HardwareSerial24readEv
1fff9418 g     O .bss	00000001 usb_cdc_transmit_flush_timer
000027d0 g     F .text	00000004 _kill
000044d4 g     F .text	00000014 _ZNSt9bad_allocD1Ev
00014604 g       .ARM.extab	00000000 __extab_start
1fff90ce g     O .bss	00000002 _ZN11AudioStream16cpu_cycles_totalE
000019c0 g     F .text	000000a0 _ZN9ColorMode5frameEv
00004448 g     F .text	00000014 _Z3maplllll
00011704 g     F .text	00000002 __sfp_lock_release
00012fe8 g     O .text	0000000c _ZTISt13bad_exception
00001994  w    F .text	00000004 _ZN9ColorMode4nameEv
00002738  w    F .text	00000006 dac0_isr
000011cc  w    F .text	0000001e _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4initEv
000033d4 g     F .text	00000014 serial2_flush
00000b8c  w    F .text	00000072 _ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIJS1_EEEvDpOT_
0000274e  w    F .text	00000004 _read
000124d8  w    F .text	00000002 .hidden __aeabi_idiv0
00014420 g       .text	00000000 __init_array_start
000006c4 g     F .text	0000000c _ZN7PerlinsC2Ev
1fff8d60 g     O .bss	00000004 _ZN14CLEDController7m_pHeadE
0000210c g     F .text	000000e0 analogRead
00012bf8 g     O .text	00000018 _ZTV8MeltMode
000030f8 g     F .text	000000f8 uart0_status_isr
0000276c  w    F .text	00000002 _exit
00002738  w    F .text	00000006 mcg_isr
00003770 g     F .text	00000030 serial3_peek
000049c0 g     F .text	00000008 __cxa_get_globals
00000400 g     O .text	00000010 flashconfigbytes
000119c4 g     F .text	000000e0 __smakebuf_r
1fff84c0 g     O .data	00000004 _ZN10__cxxabiv120__unexpected_handlerE
000027d8 g     F .text	0000000e strlen
0001305c g     O .text	00000008 _ZTISt9type_info
0000d0a0  w    F .text	00000006 .hidden __aeabi_unwind_cpp_pr1
0000c7dc g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000c740 g     F .text	0000008a .hidden __gedf2
00003858  w    F .text	0000000c _ZN13IntervalTimerD1Ev
00012fb8 g     O .text	0000000d _ZTSSt9exception
1fff848a g     O .data	00000002 usb_string_product_name_default
1fff90b4  w    O .bss	00000004 _ZGVZN8CFastLED7addLedsIL12ESPIChipsets4ELh6ELh7EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
000023d2  w    F .text	00000010 _ZN14HardwareSerial5writeEPKhj
000102a4 g     F .text	00000018 vdprintf
00002738  w    F .text	00000006 dma_ch1_isr
0000ac30 g     F .text	0000001a __cxa_current_exception_type
00012478 g     F .text	00000030 .hidden __gnu_ldivmod_helper
00004990 g     F .text	00000014 _ZNSt9exceptionD0Ev
00014734 g       .ARM.extab	00000000 __extab_end
00001988 g     F .text	0000000c _ZN8BaseModeC2Ev
00003968 g     F .text	00000024 usb_tx_packet_count
00002424  w    F .text	0000000c _ZN15HardwareSerial25writeEl
0000c274 g     F .text	0000003a .hidden __aeabi_f2d
00002738  w    F .text	00000006 dma_ch5_isr
0000d87c g     F .text	00000010 fputs
0000d7d4 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00002738  w    F .text	00000006 can0_rx_warn_isr
1fff9100 g     O .bss	00000004 _ZN13IntervalTimer8PIT_usedE
00003054 g     F .text	00000034 serial_getchar
00000ae4  w    F .text	0000002c _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9clearLedsEi
00002558  w    F .text	00000004 _ZN15HardwareSerial39availableEv
00002738  w    F .text	00000006 can0_tx_warn_isr
00002738  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1fff90cc g     O .bss	00000002 _ZN11AudioStream20cpu_cycles_total_maxE
0000bfb4 g     F .text	0000027a .hidden __subdf3
00014420 g       .text	00000000 __preinit_array_start
00011bdc g     F .text	0000005a __lo0bits
00003088 g     F .text	00000030 serial_peek
00004460 g     F .text	0000000a __aeabi_atexit
00005274 g     F .text	0000002e _ZNKSt9type_infoeqERKS_
00002770  w    F .text	0000000c __cxa_guard_acquire
00000000  w      *UND*	00000000 __register_frame_info
00002e88 g     F .text	00000038 serial_set_transmit_pin
00002738  w    F .text	00000006 cmp2_isr
00002738  w    F .text	00000006 pendablesrvreq_isr
00002738  w    F .text	00000006 wakeup_isr
00012fc8 g     O .text	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00001988 g     F .text	0000000c _ZN8BaseModeC1Ev
000052a4 g     F .text	00000004 _ZNKSt9type_info10__do_catchEPKS_PPvj
00000000 g     O .text	000001bc gVectors
00002cc6 g     F .text	00000070 _ZN5Print11printNumberEmhh
000035ac g     F .text	0000005c serial3_format
0000ea08 g     F .text	00000010 raise
00002752  w    F .text	00000006 _close
0000dc88 g     F .text	00000010 free
00005398 g     F .text	00000114 _ZN9__gnu_cxx27__verbose_terminate_handlerEv
00011b04 g     F .text	00000096 __multadd
00005300 g     F .text	0000001c _ZN10__cxxabiv117__class_type_infoD0Ev
00011af0 g     F .text	00000012 _Bfree
1fff90e0 g     O .bss	00000010 Serial2
00000536 g     F .text	0000016e _Z15hsv2rgb_rainbowRK4CHSVR4CRGB
00002738  w    F .text	00000006 dma_ch0_isr
1fff84a4  w    O .data	00000002 usb_string_serial_number



Disassembly of section .text:

00000000 <gVectors>:
       0:	00 80 00 20 bd 01 00 00 39 27 00 00 39 27 00 00     ... ....9'..9'..
      10:	39 27 00 00 39 27 00 00 39 27 00 00 05 27 00 00     9'..9'..9'...'..
      20:	05 27 00 00 05 27 00 00 05 27 00 00 39 27 00 00     .'...'...'..9'..
      30:	39 27 00 00 05 27 00 00 39 27 00 00 f5 26 00 00     9'...'..9'...&..
      40:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      50:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      60:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      70:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      80:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      90:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      a0:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      b0:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      c0:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      d0:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      e0:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      f0:	39 27 00 00 f9 30 00 00 39 27 00 00 81 34 00 00     9'...0..9'...4..
     100:	39 27 00 00 b5 37 00 00 39 27 00 00 39 27 00 00     9'...7..9'..9'..
     110:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
     120:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
     130:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
     140:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
     150:	c9 25 00 00 e1 25 00 00 f9 25 00 00 11 26 00 00     .%...%...%...&..
     160:	39 27 00 00 85 3a 00 00 39 27 00 00 39 27 00 00     9'...:..9'..9'..
     170:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
     180:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
     190:	39 27 00 00 39 27 00 00 39 27 00 00 a1 28 00 00     9'..9'..9'...(..
     1a0:	f1 28 00 00 79 29 00 00 35 2a 00 00 b9 2a 00 00     .(..y)..5*...*..
     1b0:	39 27 00 00 39 27 00 00 ed 21 00 00                 9'..9'...!..

000001bc <ResetHandler>:
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));

__attribute__ ((section(".startup")))
void ResetHandler(void)
{
     1bc:	b508      	push	{r3, lr}
	unsigned int i;
#if F_CPU <= 2000000
	volatile int n;
#endif

	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1be:	4b49      	ldr	r3, [pc, #292]	; (2e4 <ResetHandler+0x128>)
     1c0:	f24c 5220 	movw	r2, #50464	; 0xc520
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f002 fab6 	bl	2740 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b44      	ldr	r3, [pc, #272]	; (2e8 <ResetHandler+0x12c>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a43      	ldr	r2, [pc, #268]	; (2ec <ResetHandler+0x130>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a43      	ldr	r2, [pc, #268]	; (2f0 <ResetHandler+0x134>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	f5a3 4330 	sub.w	r3, r3, #45056	; 0xb000
     1e8:	3b20      	subs	r3, #32
     1ea:	681a      	ldr	r2, [r3, #0]
     1ec:	f412 7280 	ands.w	r2, r2, #256	; 0x100
     1f0:	d104      	bne.n	1fc <ResetHandler+0x40>
		RTC_SR = 0;
     1f2:	4940      	ldr	r1, [pc, #256]	; (2f4 <ResetHandler+0x138>)
     1f4:	600a      	str	r2, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f6:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
     1fa:	601a      	str	r2, [r3, #0]
	}

	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1fc:	4b3e      	ldr	r3, [pc, #248]	; (2f8 <ResetHandler+0x13c>)
     1fe:	781a      	ldrb	r2, [r3, #0]
     200:	0711      	lsls	r1, r2, #28
     202:	d503      	bpl.n	20c <ResetHandler+0x50>
     204:	781a      	ldrb	r2, [r3, #0]
     206:	f042 0208 	orr.w	r2, r2, #8
     20a:	701a      	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	4b3b      	ldr	r3, [pc, #236]	; (2fc <ResetHandler+0x140>)
     20e:	222a      	movs	r2, #42	; 0x2a
     210:	701a      	strb	r2, [r3, #0]
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     212:	2300      	movs	r3, #0
     214:	4a3a      	ldr	r2, [pc, #232]	; (300 <ResetHandler+0x144>)
     216:	493b      	ldr	r1, [pc, #236]	; (304 <ResetHandler+0x148>)
     218:	1898      	adds	r0, r3, r2
     21a:	4288      	cmp	r0, r1
     21c:	d204      	bcs.n	228 <ResetHandler+0x6c>
     21e:	493a      	ldr	r1, [pc, #232]	; (308 <ResetHandler+0x14c>)
     220:	5859      	ldr	r1, [r3, r1]
     222:	5099      	str	r1, [r3, r2]
     224:	3304      	adds	r3, #4
     226:	e7f5      	b.n	214 <ResetHandler+0x58>
     228:	4b38      	ldr	r3, [pc, #224]	; (30c <ResetHandler+0x150>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     22a:	4a39      	ldr	r2, [pc, #228]	; (310 <ResetHandler+0x154>)
     22c:	4293      	cmp	r3, r2
     22e:	f04f 0200 	mov.w	r2, #0
     232:	d202      	bcs.n	23a <ResetHandler+0x7e>
     234:	f843 2b04 	str.w	r2, [r3], #4
     238:	e7f7      	b.n	22a <ResetHandler+0x6e>
	SCB_VTOR = 0;	// use vector table in flash
     23a:	4b36      	ldr	r3, [pc, #216]	; (314 <ResetHandler+0x158>)
     23c:	601a      	str	r2, [r3, #0]
     23e:	f6a3 1308 	subw	r3, r3, #2312	; 0x908

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     242:	2280      	movs	r2, #128	; 0x80
     244:	f803 2b01 	strb.w	r2, [r3], #1
     248:	4a33      	ldr	r2, [pc, #204]	; (318 <ResetHandler+0x15c>)
     24a:	4293      	cmp	r3, r2
     24c:	d1f9      	bne.n	242 <ResetHandler+0x86>
	//  C1[IREFS] bit is written to 1
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
     24e:	4b33      	ldr	r3, [pc, #204]	; (31c <ResetHandler+0x160>)
     250:	220a      	movs	r2, #10
     252:	701a      	strb	r2, [r3, #0]
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     254:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
     258:	2224      	movs	r2, #36	; 0x24
     25a:	701a      	strb	r2, [r3, #0]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     25c:	22a0      	movs	r2, #160	; 0xa0
     25e:	f803 2c01 	strb.w	r2, [r3, #-1]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     262:	4b2f      	ldr	r3, [pc, #188]	; (320 <ResetHandler+0x164>)
     264:	781a      	ldrb	r2, [r3, #0]
     266:	0792      	lsls	r2, r2, #30
     268:	d5fb      	bpl.n	262 <ResetHandler+0xa6>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     26a:	781a      	ldrb	r2, [r3, #0]
     26c:	06d0      	lsls	r0, r2, #27
     26e:	d4fc      	bmi.n	26a <ResetHandler+0xae>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     270:	781a      	ldrb	r2, [r3, #0]
     272:	f002 020c 	and.w	r2, r2, #12
     276:	2a08      	cmp	r2, #8
     278:	d1fa      	bne.n	270 <ResetHandler+0xb4>
	//   C1[IREFS] bit is written to 0
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
     27a:	4b2a      	ldr	r3, [pc, #168]	; (324 <ResetHandler+0x168>)
     27c:	2205      	movs	r2, #5
     27e:	701a      	strb	r2, [r3, #0]
    #elif F_CPU == 144000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(12); // config PLL for 144 MHz output
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
     280:	2243      	movs	r2, #67	; 0x43
     282:	705a      	strb	r2, [r3, #1]
    #else
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
    #endif
	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     284:	4b26      	ldr	r3, [pc, #152]	; (320 <ResetHandler+0x164>)
     286:	781a      	ldrb	r2, [r3, #0]
     288:	0691      	lsls	r1, r2, #26
     28a:	d5fb      	bpl.n	284 <ResetHandler+0xc8>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     28c:	781a      	ldrb	r2, [r3, #0]
     28e:	0652      	lsls	r2, r2, #25
     290:	d5fc      	bpl.n	28c <ResetHandler+0xd0>
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) |	 SIM_CLKDIV1_OUTDIV4(3);
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash, USB = 72 * 2 / 3
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) |	 SIM_CLKDIV1_OUTDIV4(2);
     292:	4b25      	ldr	r3, [pc, #148]	; (328 <ResetHandler+0x16c>)
     294:	f04f 7281 	mov.w	r2, #16908288	; 0x1020000
     298:	601a      	str	r2, [r3, #0]
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(2) | SIM_CLKDIV2_USBFRAC;
     29a:	2205      	movs	r2, #5
     29c:	605a      	str	r2, [r3, #4]
#error "Error, F_CPU must be 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     29e:	4b23      	ldr	r3, [pc, #140]	; (32c <ResetHandler+0x170>)
     2a0:	2220      	movs	r2, #32
     2a2:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	781b      	ldrb	r3, [r3, #0]
     2a8:	f003 030c 	and.w	r3, r3, #12
     2ac:	2b0c      	cmp	r3, #12
     2ae:	d1f9      	bne.n	2a4 <ResetHandler+0xe8>
	// now we're in PEE mode
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b0:	4b1f      	ldr	r3, [pc, #124]	; (330 <ResetHandler+0x174>)
     2b2:	4a20      	ldr	r2, [pc, #128]	; (334 <ResetHandler+0x178>)
     2b4:	601a      	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2b6:	4b20      	ldr	r3, [pc, #128]	; (338 <ResetHandler+0x17c>)
     2b8:	4a20      	ldr	r2, [pc, #128]	; (33c <ResetHandler+0x180>)
     2ba:	601a      	str	r2, [r3, #0]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2bc:	2207      	movs	r2, #7
     2be:	f843 2c04 	str.w	r2, [r3, #-4]

	//init_pins();
	__enable_irq();
     2c2:	b662      	cpsie	i
	__libc_init_array();
     2c4:	f00d fcb0 	bl	dc28 <__libc_init_array>

	_init_Teensyduino_internal_();
     2c8:	f002 fc9c 	bl	2c04 <_init_Teensyduino_internal_>
	if (RTC_SR & RTC_SR_TIF) {
     2cc:	4b09      	ldr	r3, [pc, #36]	; (2f4 <ResetHandler+0x138>)
     2ce:	681b      	ldr	r3, [r3, #0]
     2d0:	07db      	lsls	r3, r3, #31
     2d2:	d502      	bpl.n	2da <ResetHandler+0x11e>
		// TODO: this should probably set the time more agressively, if
		// we could reliably detect the first reboot after programming.
		rtc_set(TIME_T);
     2d4:	481a      	ldr	r0, [pc, #104]	; (340 <ResetHandler+0x184>)
     2d6:	f002 fc07 	bl	2ae8 <rtc_set>
	}

	startup_late_hook();
     2da:	f002 fa37 	bl	274c <startup_late_hook>
	main();
     2de:	f000 fc9f 	bl	c20 <main>
     2e2:	e7fe      	b.n	2e2 <ResetHandler+0x126>
     2e4:	4005200e 	.word	0x4005200e
     2e8:	40048030 	.word	0x40048030
     2ec:	00043f82 	.word	0x00043f82
     2f0:	2b000001 	.word	0x2b000001
     2f4:	4003d014 	.word	0x4003d014
     2f8:	4007d002 	.word	0x4007d002
     2fc:	4007e000 	.word	0x4007e000
     300:	1fff8400 	.word	0x1fff8400
     304:	1fff8d3c 	.word	0x1fff8d3c
     308:	00014734 	.word	0x00014734
     30c:	1fff8d40 	.word	0x1fff8d40
     310:	1fff9c94 	.word	0x1fff9c94
     314:	e000ed08 	.word	0xe000ed08
     318:	e000e45f 	.word	0xe000e45f
     31c:	40065000 	.word	0x40065000
     320:	40064006 	.word	0x40064006
     324:	40064004 	.word	0x40064004
     328:	40048044 	.word	0x40048044
     32c:	40064000 	.word	0x40064000
     330:	40048004 	.word	0x40048004
     334:	000510c0 	.word	0x000510c0
     338:	e000e014 	.word	0xe000e014
     33c:	0001193f 	.word	0x0001193f
     340:	5068dd00 	.word	0x5068dd00
     344:	ffffffff 	.word	0xffffffff
     348:	ffffffff 	.word	0xffffffff
     34c:	ffffffff 	.word	0xffffffff
     350:	ffffffff 	.word	0xffffffff
     354:	ffffffff 	.word	0xffffffff
     358:	ffffffff 	.word	0xffffffff
     35c:	ffffffff 	.word	0xffffffff
     360:	ffffffff 	.word	0xffffffff
     364:	ffffffff 	.word	0xffffffff
     368:	ffffffff 	.word	0xffffffff
     36c:	ffffffff 	.word	0xffffffff
     370:	ffffffff 	.word	0xffffffff
     374:	ffffffff 	.word	0xffffffff
     378:	ffffffff 	.word	0xffffffff
     37c:	ffffffff 	.word	0xffffffff
     380:	ffffffff 	.word	0xffffffff
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffffffe     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8d40 	.word	0x1fff8d40
     42c:	00000000 	.word	0x00000000
     430:	00014734 	.word	0x00014734

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b06      	ldr	r3, [pc, #24]	; (450 <frame_dummy+0x1c>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4806      	ldr	r0, [pc, #24]	; (454 <frame_dummy+0x20>)
     43c:	4906      	ldr	r1, [pc, #24]	; (458 <frame_dummy+0x24>)
     43e:	f3af 8000 	nop.w
     442:	4806      	ldr	r0, [pc, #24]	; (45c <frame_dummy+0x28>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b113      	cbz	r3, 44e <frame_dummy+0x1a>
     448:	4b05      	ldr	r3, [pc, #20]	; (460 <frame_dummy+0x2c>)
     44a:	b103      	cbz	r3, 44e <frame_dummy+0x1a>
     44c:	4798      	blx	r3
     44e:	bd08      	pop	{r3, pc}
     450:	00000000 	.word	0x00000000
     454:	00014734 	.word	0x00014734
     458:	1fff8d44 	.word	0x1fff8d44
     45c:	1fff8d3c 	.word	0x1fff8d3c
     460:	00000000 	.word	0x00000000

00000464 <_ZN14CLEDController13getAdjustmentEh>:
    {
    }

    // allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     464:	2300      	movs	r3, #0

    CLEDController & setTemperature(CRGB temperature) { m_ColorTemperature = temperature; return *this; }
    CLEDController & setTemperature(ColorTemperature temperature) { m_ColorTemperature = temperature; return *this; }
    CRGB getTemperature() { return m_ColorTemperature; }

    CRGB getAdjustment(uint8_t scale) {
     466:	b530      	push	{r4, r5, lr}
     468:	7003      	strb	r3, [r0, #0]
     46a:	7043      	strb	r3, [r0, #1]
     46c:	7083      	strb	r3, [r0, #2]
#if defined(NO_CORRECTION) && (NO_CORRECTION==1)
        return CRGB(scale,scale,scale);
#else
        CRGB adj(0,0,0);

        if(scale > 0) {
     46e:	b172      	cbz	r2, 48e <_ZN14CLEDController13getAdjustmentEh+0x2a>
            for(uint8_t i = 0; i < 3; i++) {
                uint8_t cc = m_ColorCorrection.raw[i];
     470:	7b0d      	ldrb	r5, [r1, #12]
                uint8_t ct = m_ColorTemperature.raw[i];
     472:	7bcc      	ldrb	r4, [r1, #15]
                if(cc > 0 && ct > 0) {
     474:	b135      	cbz	r5, 484 <_ZN14CLEDController13getAdjustmentEh+0x20>
     476:	b12c      	cbz	r4, 484 <_ZN14CLEDController13getAdjustmentEh+0x20>
                    uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
     478:	3401      	adds	r4, #1
     47a:	fb05 4404 	mla	r4, r5, r4, r4
     47e:	4354      	muls	r4, r2
                    work /= 0x10000L;
     480:	0c24      	lsrs	r4, r4, #16
                    adj.raw[i] = work & 0xFF;
     482:	54c4      	strb	r4, [r0, r3]
     484:	3301      	adds	r3, #1
        return CRGB(scale,scale,scale);
#else
        CRGB adj(0,0,0);

        if(scale > 0) {
            for(uint8_t i = 0; i < 3; i++) {
     486:	2b03      	cmp	r3, #3
     488:	f101 0101 	add.w	r1, r1, #1
     48c:	d1f0      	bne.n	470 <_ZN14CLEDController13getAdjustmentEh+0xc>
            }
        }

        return adj;
#endif
    }
     48e:	bd30      	pop	{r4, r5, pc}

00000490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>:
	m_Scale = 255;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
     490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
     492:	1e1e      	subs	r6, r3, #0
	m_Scale = 255;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
     494:	4615      	mov	r5, r2
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
     496:	6803      	ldr	r3, [r0, #0]
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
     498:	bfd8      	it	le
     49a:	2500      	movle	r5, #0
	m_Scale = 255;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
     49c:	4604      	mov	r4, r0
     49e:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
     4a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
     4a4:	bfd8      	it	le
     4a6:	4616      	movle	r6, r2

	pLed->init();
     4a8:	689b      	ldr	r3, [r3, #8]
	pLed->setLeds(data + nOffset, nLeds);
     4aa:	442f      	add	r7, r5
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
     4ac:	4798      	blx	r3
        show(data, nLeds, getAdjustment(brightness))
    }
#endif

    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
     4ae:	6067      	str	r7, [r4, #4]
        m_nLeds = nLeds;
     4b0:	6166      	str	r6, [r4, #20]
	pLed->setLeds(data + nOffset, nLeds);
	return *pLed;
}
     4b2:	4620      	mov	r0, r4
     4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4b6:	ffff 4b0c 	vtbl.8	d20, {d15-d18}, d12

000004b8 <_ZN8CFastLED4showEh>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    // navigating the list of controllers
    static CLEDController *head() { return m_pHead; }
     4b8:	4b0c      	ldr	r3, [pc, #48]	; (4ec <_ZN8CFastLED4showEh+0x34>)

void CFastLED::show(uint8_t scale) {
     4ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
     4be:	681c      	ldr	r4, [r3, #0]
     4c0:	460e      	mov	r6, r1
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
     4c2:	b184      	cbz	r4, 4e6 <_ZN8CFastLED4showEh+0x2e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    // show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
     4c4:	6823      	ldr	r3, [r4, #0]
     4c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
     4ca:	6967      	ldr	r7, [r4, #20]
     4cc:	685d      	ldr	r5, [r3, #4]
     4ce:	4621      	mov	r1, r4
     4d0:	a801      	add	r0, sp, #4
     4d2:	4632      	mov	r2, r6
     4d4:	f7ff ffc6 	bl	464 <_ZN14CLEDController13getAdjustmentEh>
     4d8:	4620      	mov	r0, r4
     4da:	4641      	mov	r1, r8
     4dc:	463a      	mov	r2, r7
     4de:	ab01      	add	r3, sp, #4
     4e0:	47a8      	blx	r5
	pLed->setLeds(data + nOffset, nLeds);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	CLEDController *pCur = CLEDController::head();
     4e2:	68a4      	ldr	r4, [r4, #8]
     4e4:	e7ed      	b.n	4c2 <_ZN8CFastLED4showEh+0xa>
	while(pCur) {
		pCur->showLeds(scale);
		pCur = pCur->next();
	}
}
     4e6:	b002      	add	sp, #8
     4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4ec:	1fff8d60 	.word	0x1fff8d60

000004f0 <_GLOBAL__sub_I_LEDS>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
     4f0:	4b01      	ldr	r3, [pc, #4]	; (4f8 <_GLOBAL__sub_I_LEDS+0x8>)
     4f2:	22ff      	movs	r2, #255	; 0xff
     4f4:	701a      	strb	r2, [r3, #0]
     4f6:	4770      	bx	lr
     4f8:	1fff8d5c 	.word	0x1fff8d5c

000004fc <_ZL15nscale8x3_videoRhS_S_h>:
#endif
}


LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
     4fc:	b530      	push	{r4, r5, lr}
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
     4fe:	7805      	ldrb	r5, [r0, #0]


LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
     500:	1c1c      	adds	r4, r3, #0
     502:	bf18      	it	ne
     504:	2401      	movne	r4, #1
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
     506:	b125      	cbz	r5, 512 <_ZL15nscale8x3_videoRhS_S_h+0x16>
     508:	fb15 f503 	smulbb	r5, r5, r3
     50c:	eb04 2515 	add.w	r5, r4, r5, lsr #8
     510:	b2ed      	uxtb	r5, r5
     512:	7005      	strb	r5, [r0, #0]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
     514:	7808      	ldrb	r0, [r1, #0]
     516:	b120      	cbz	r0, 522 <_ZL15nscale8x3_videoRhS_S_h+0x26>
     518:	fb10 f003 	smulbb	r0, r0, r3
     51c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
     520:	b2c0      	uxtb	r0, r0
     522:	7008      	strb	r0, [r1, #0]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
     524:	7811      	ldrb	r1, [r2, #0]
     526:	b121      	cbz	r1, 532 <_ZL15nscale8x3_videoRhS_S_h+0x36>
     528:	fb11 f103 	smulbb	r1, r1, r3
     52c:	eb04 2111 	add.w	r1, r4, r1, lsr #8
     530:	b2c9      	uxtb	r1, r1
     532:	7011      	strb	r1, [r2, #0]
     534:	bd30      	pop	{r4, r5, pc}

00000536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>:
#define K255 255
#define K171 171
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
     536:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;

    
    uint8_t hue = hsv.hue;
     53a:	7807      	ldrb	r7, [r0, #0]
    uint8_t sat = hsv.sat;
     53c:	f890 9001 	ldrb.w	r9, [r0, #1]
    uint8_t val = hsv.val;
     540:	7884      	ldrb	r4, [r0, #2]
        
    uint8_t offset = hue & 0x1F; // 0..31
     542:	f007 051f 	and.w	r5, r7, #31
#define K255 255
#define K171 171
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
     546:	4688      	mov	r8, r1
    uint8_t offset = hue & 0x1F; // 0..31
    
    // offset8 = offset * 8
    uint8_t offset8 = offset;
    {
        offset8 <<= 1;
     548:	006d      	lsls	r5, r5, #1
        asm volatile("");
        offset8 <<= 1;
     54a:	006d      	lsls	r5, r5, #1
        asm volatile("");
        offset8 <<= 1;
     54c:	006d      	lsls	r5, r5, #1
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
     54e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
     552:	eb02 1202 	add.w	r2, r2, r2, lsl #4
     556:	f007 0640 	and.w	r6, r7, #64	; 0x40
    
    uint8_t third = scale8( offset8, (256 / 3));
        
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
     55a:	f017 0f80 	tst.w	r7, #128	; 0x80
     55e:	f3c2 2207 	ubfx	r2, r2, #8, #8
     562:	f007 0020 	and.w	r0, r7, #32
        // 0XX
        if( ! (hue & 0x40) ) {
     566:	f006 03ff 	and.w	r3, r6, #255	; 0xff
    
    uint8_t third = scale8( offset8, (256 / 3));
        
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
     56a:	d128      	bne.n	5be <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x88>
        // 0XX
        if( ! (hue & 0x40) ) {
     56c:	b97e      	cbnz	r6, 58e <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x58>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
     56e:	f000 01ff 	and.w	r1, r0, #255	; 0xff
     572:	b938      	cbnz	r0, 584 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x4e>
                // 000
                //case 0: // R -> O
                r = K255 - third;
     574:	43d3      	mvns	r3, r2
     576:	f88d 3005 	strb.w	r3, [sp, #5]
                g = third;
     57a:	f88d 2006 	strb.w	r2, [sp, #6]
                b = 0;
     57e:	f88d 1007 	strb.w	r1, [sp, #7]
                FORCE_REFERENCE(b);
     582:	e04b      	b.n	61c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe6>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
     584:	21ab      	movs	r1, #171	; 0xab
     586:	f88d 1005 	strb.w	r1, [sp, #5]
                    g = K85 + third ;
     58a:	3255      	adds	r2, #85	; 0x55
     58c:	e00b      	b.n	5a6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x70>
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
     58e:	f000 03ff 	and.w	r3, r0, #255	; 0xff
     592:	b968      	cbnz	r0, 5b0 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x7a>
     594:	21aa      	movs	r1, #170	; 0xaa
     596:	fb15 f501 	smulbb	r5, r5, r1
     59a:	122d      	asrs	r5, r5, #8
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3));
                    r = K171 - twothirds;
     59c:	f1c5 05ab 	rsb	r5, r5, #171	; 0xab
     5a0:	f88d 5005 	strb.w	r5, [sp, #5]
                    g = K171 + third;
     5a4:	3a55      	subs	r2, #85	; 0x55
     5a6:	f88d 2006 	strb.w	r2, [sp, #6]
                    b = 0;
     5aa:	f88d 3007 	strb.w	r3, [sp, #7]
                    FORCE_REFERENCE(b);
     5ae:	e035      	b.n	61c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe6>
                    FORCE_REFERENCE(b);
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
     5b0:	2300      	movs	r3, #0
     5b2:	f88d 3005 	strb.w	r3, [sp, #5]
                FORCE_REFERENCE(r);
                g = K255 - third;
     5b6:	43d3      	mvns	r3, r2
     5b8:	f88d 3006 	strb.w	r3, [sp, #6]
     5bc:	e02c      	b.n	618 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe2>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
     5be:	b9b6      	cbnz	r6, 5ee <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xb8>
            // 10X
            if( ! ( hue & 0x20) ) {
     5c0:	f000 01ff 	and.w	r1, r0, #255	; 0xff
     5c4:	b968      	cbnz	r0, 5e2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xac>
                // 100
                //case 4: // A -> B
                r = 0;
     5c6:	f88d 1005 	strb.w	r1, [sp, #5]
     5ca:	23aa      	movs	r3, #170	; 0xaa
     5cc:	fb15 f503 	smulbb	r5, r5, r3
     5d0:	0a2d      	lsrs	r5, r5, #8
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3));
                g = K171 - twothirds;
     5d2:	f1c5 03ab 	rsb	r3, r5, #171	; 0xab
                b = K85  + twothirds;
     5d6:	3555      	adds	r5, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3));
                g = K171 - twothirds;
     5d8:	f88d 3006 	strb.w	r3, [sp, #6]
                b = K85  + twothirds;
     5dc:	f88d 5007 	strb.w	r5, [sp, #7]
     5e0:	e01c      	b.n	61c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe6>

            } else {
                // 101
                //case 5: // B -> P
                r = third;
     5e2:	f88d 2005 	strb.w	r2, [sp, #5]
                g = 0;
     5e6:	f88d 3006 	strb.w	r3, [sp, #6]
                FORCE_REFERENCE(g);
                b = K255 - third;
     5ea:	43d2      	mvns	r2, r2
     5ec:	e014      	b.n	618 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe2>

            }
        } else {
            if( !  (hue & 0x20)  ) {
     5ee:	f000 03ff 	and.w	r3, r0, #255	; 0xff
     5f2:	b940      	cbnz	r0, 606 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xd0>
                // 110
                //case 6: // P -- K
                r = K85 + third;
     5f4:	f102 0155 	add.w	r1, r2, #85	; 0x55
     5f8:	f88d 1005 	strb.w	r1, [sp, #5]
                g = 0;
     5fc:	f88d 3006 	strb.w	r3, [sp, #6]
                FORCE_REFERENCE(g);
                b = K171 - third;
     600:	f1c2 02ab 	rsb	r2, r2, #171	; 0xab
     604:	e008      	b.n	618 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe2>

            } else {
                // 111
                //case 7: // K -> R
                r = K171 + third;
     606:	f1a2 0355 	sub.w	r3, r2, #85	; 0x55
     60a:	f88d 3005 	strb.w	r3, [sp, #5]
                g = 0;
     60e:	2300      	movs	r3, #0
     610:	f88d 3006 	strb.w	r3, [sp, #6]
                FORCE_REFERENCE(g);
                b = K85 - third;
     614:	f1c2 0255 	rsb	r2, r2, #85	; 0x55
     618:	f88d 2007 	strb.w	r2, [sp, #7]
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
     61c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
     620:	d01f      	beq.n	662 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x12c>

        nscale8x3_video( r, g, b, sat);
     622:	464b      	mov	r3, r9

        uint8_t desat = 255 - sat;
     624:	ea6f 0909 	mvn.w	r9, r9
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {

        nscale8x3_video( r, g, b, sat);
     628:	f10d 0005 	add.w	r0, sp, #5
     62c:	f10d 0106 	add.w	r1, sp, #6
     630:	f10d 0207 	add.w	r2, sp, #7

        uint8_t desat = 255 - sat;
     634:	fa5f f989 	uxtb.w	r9, r9
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {

        nscale8x3_video( r, g, b, sat);
     638:	f7ff ff60 	bl	4fc <_ZL15nscale8x3_videoRhS_S_h>
     63c:	fb19 f909 	smulbb	r9, r9, r9

        uint8_t desat = 255 - sat;
        desat = scale8( desat, desat);
        
        uint8_t brightness_floor = desat;
        r += brightness_floor;
     640:	f89d 3005 	ldrb.w	r3, [sp, #5]
     644:	ea4f 2919 	mov.w	r9, r9, lsr #8
     648:	444b      	add	r3, r9
     64a:	f88d 3005 	strb.w	r3, [sp, #5]
        g += brightness_floor;
     64e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     652:	444b      	add	r3, r9
     654:	f88d 3006 	strb.w	r3, [sp, #6]
        b += brightness_floor;
     658:	f89d 3007 	ldrb.w	r3, [sp, #7]
     65c:	4499      	add	r9, r3
     65e:	f88d 9007 	strb.w	r9, [sp, #7]
    }

    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
     662:	2cff      	cmp	r4, #255	; 0xff
     664:	d00f      	beq.n	686 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x150>


LIB8STATIC uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
     666:	fb14 f304 	smulbb	r3, r4, r4
     66a:	3400      	adds	r4, #0
     66c:	bf18      	it	ne
     66e:	2401      	movne	r4, #1
     670:	eb04 2313 	add.w	r3, r4, r3, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        nscale8x3_video( r, g, b, val);
     674:	f10d 0005 	add.w	r0, sp, #5
     678:	f10d 0106 	add.w	r1, sp, #6
     67c:	f10d 0207 	add.w	r2, sp, #7
     680:	b2db      	uxtb	r3, r3
     682:	f7ff ff3b 	bl	4fc <_ZL15nscale8x3_videoRhS_S_h>
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
     686:	f89d 3005 	ldrb.w	r3, [sp, #5]
     68a:	f888 3000 	strb.w	r3, [r8]
    rgb.g = g;
     68e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     692:	f888 3001 	strb.w	r3, [r8, #1]
    rgb.b = b;
     696:	f89d 3007 	ldrb.w	r3, [sp, #7]
     69a:	f888 3002 	strb.w	r3, [r8, #2]
}
     69e:	b003      	add	sp, #12
     6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000006a4 <_ZN7PerlinsD1Ev>:
};

Perlins::Perlins() {
}

Perlins::~Perlins() {
     6a4:	4b01      	ldr	r3, [pc, #4]	; (6ac <_ZN7PerlinsD1Ev+0x8>)
     6a6:	6003      	str	r3, [r0, #0]
}
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	00012b08 	.word	0x00012b08

000006b0 <_ZN7PerlinsD0Ev>:
};

Perlins::Perlins() {
}

Perlins::~Perlins() {
     6b0:	b510      	push	{r4, lr}
     6b2:	4b03      	ldr	r3, [pc, #12]	; (6c0 <_ZN7PerlinsD0Ev+0x10>)
     6b4:	6003      	str	r3, [r0, #0]
     6b6:	4604      	mov	r4, r0
}
     6b8:	f003 fed8 	bl	446c <_ZdlPv>
     6bc:	4620      	mov	r0, r4
     6be:	bd10      	pop	{r4, pc}
     6c0:	00012b08 	.word	0x00012b08

000006c4 <_ZN7PerlinsC1Ev>:
49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,
150,254,138,236,205, 93,222,114, 67,29,24, 72,243,141,128,195,78,66,
215,61,156,180
};

Perlins::Perlins() {
     6c4:	4b01      	ldr	r3, [pc, #4]	; (6cc <_ZN7PerlinsC1Ev+0x8>)
     6c6:	6003      	str	r3, [r0, #0]
}
     6c8:	4770      	bx	lr
     6ca:	bf00      	nop
     6cc:	00012b08 	.word	0x00012b08

000006d0 <_ZN7Perlins4fadeEd>:
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
     6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6d2:	4610      	mov	r0, r2
     6d4:	4614      	mov	r4, r2
     6d6:	461d      	mov	r5, r3
     6d8:	4619      	mov	r1, r3
     6da:	f00b fe1f 	bl	c31c <__aeabi_dmul>
     6de:	4622      	mov	r2, r4
     6e0:	462b      	mov	r3, r5
     6e2:	f00b fe1b 	bl	c31c <__aeabi_dmul>
     6e6:	2200      	movs	r2, #0
     6e8:	4606      	mov	r6, r0
     6ea:	460f      	mov	r7, r1
     6ec:	4620      	mov	r0, r4
     6ee:	4629      	mov	r1, r5
     6f0:	4b0b      	ldr	r3, [pc, #44]	; (720 <_ZN7Perlins4fadeEd+0x50>)
     6f2:	f00b fe13 	bl	c31c <__aeabi_dmul>
     6f6:	2200      	movs	r2, #0
     6f8:	4b0a      	ldr	r3, [pc, #40]	; (724 <_ZN7Perlins4fadeEd+0x54>)
     6fa:	f00b fc5b 	bl	bfb4 <__aeabi_dsub>
     6fe:	4602      	mov	r2, r0
     700:	460b      	mov	r3, r1
     702:	4620      	mov	r0, r4
     704:	4629      	mov	r1, r5
     706:	f00b fe09 	bl	c31c <__aeabi_dmul>
     70a:	2200      	movs	r2, #0
     70c:	4b06      	ldr	r3, [pc, #24]	; (728 <_ZN7Perlins4fadeEd+0x58>)
     70e:	f00b fc53 	bl	bfb8 <__adddf3>
     712:	4602      	mov	r2, r0
     714:	460b      	mov	r3, r1
     716:	4630      	mov	r0, r6
     718:	4639      	mov	r1, r7
     71a:	f00b fdff 	bl	c31c <__aeabi_dmul>
     71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     720:	40180000 	.word	0x40180000
     724:	402e0000 	.word	0x402e0000
     728:	40240000 	.word	0x40240000

0000072c <_ZN7Perlins4gradEiddd>:
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
     72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     72e:	468e      	mov	lr, r1
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
     730:	f001 010f 	and.w	r1, r1, #15
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     734:	2907      	cmp	r1, #7
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
     736:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     73a:	dc04      	bgt.n	746 <_ZN7Perlins4gradEiddd+0x1a>
    		v = h < 4 ? y : h==12||h==14 ? x : z;
     73c:	2903      	cmp	r1, #3
double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     73e:	4616      	mov	r6, r2
     740:	461f      	mov	r7, r3
    		v = h < 4 ? y : h==12||h==14 ? x : z;
     742:	dd0b      	ble.n	75c <_ZN7Perlins4gradEiddd+0x30>
     744:	e001      	b.n	74a <_ZN7Perlins4gradEiddd+0x1e>
double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     746:	4626      	mov	r6, r4
     748:	462f      	mov	r7, r5
    		v = h < 4 ? y : h==12||h==14 ? x : z;
     74a:	f00e 010d 	and.w	r1, lr, #13
     74e:	290c      	cmp	r1, #12
     750:	d002      	beq.n	758 <_ZN7Perlins4gradEiddd+0x2c>
     752:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
     756:	e001      	b.n	75c <_ZN7Perlins4gradEiddd+0x30>
     758:	4614      	mov	r4, r2
     75a:	461d      	mov	r5, r3
    return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
     75c:	f01e 0f01 	tst.w	lr, #1
     760:	bf14      	ite	ne
     762:	f107 4100 	addne.w	r1, r7, #2147483648	; 0x80000000
     766:	4639      	moveq	r1, r7
     768:	f01e 0f02 	tst.w	lr, #2
     76c:	4630      	mov	r0, r6
     76e:	4622      	mov	r2, r4
     770:	bf14      	ite	ne
     772:	f105 4300 	addne.w	r3, r5, #2147483648	; 0x80000000
     776:	462b      	moveq	r3, r5
     778:	f00b fc1e 	bl	bfb8 <__adddf3>
}
     77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     77e:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00000780 <_ZN7Perlins6pnoiseEddd>:

Perlins::~Perlins() {
}

double Perlins::pnoise(double x, double y, double z)
{
     780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
     784:	4619      	mov	r1, r3

Perlins::~Perlins() {
}

double Perlins::pnoise(double x, double y, double z)
{
     786:	b099      	sub	sp, #100	; 0x64
     788:	4680      	mov	r8, r0
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
     78a:	4610      	mov	r0, r2

Perlins::~Perlins() {
}

double Perlins::pnoise(double x, double y, double z)
{
     78c:	4614      	mov	r4, r2
     78e:	461d      	mov	r5, r3
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
     790:	f00a fa96 	bl	acc0 <floor>
     794:	9104      	str	r1, [sp, #16]
     796:	9005      	str	r0, [sp, #20]
     798:	f00c f85a 	bl	c850 <__aeabi_d2iz>
     79c:	fa5f fb80 	uxtb.w	fp, r0
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
     7a0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
     7a4:	f00a fa8c 	bl	acc0 <floor>
     7a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
     7ac:	f00c f850 	bl	c850 <__aeabi_d2iz>
     7b0:	fa5f fa80 	uxtb.w	sl, r0
          Z = (int)floor(z) & 255;
     7b4:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
     7b8:	f00a fa82 	bl	acc0 <floor>
     7bc:	460f      	mov	r7, r1
     7be:	4606      	mov	r6, r0
     7c0:	f00c f846 	bl	c850 <__aeabi_d2iz>
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
     7c4:	9a05      	ldr	r2, [sp, #20]
     7c6:	9b04      	ldr	r3, [sp, #16]

double Perlins::pnoise(double x, double y, double z)
{
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
     7c8:	fa5f f980 	uxtb.w	r9, r0
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
     7cc:	4629      	mov	r1, r5
     7ce:	4620      	mov	r0, r4
     7d0:	f00b fbf0 	bl	bfb4 <__aeabi_dsub>
    y -= floor(y);                             /* OF POINT IN CUBE.   */
     7d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
double Perlins::pnoise(double x, double y, double z)
{
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
     7d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    y -= floor(y);                             /* OF POINT IN CUBE.   */
     7dc:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
     7e0:	f00b fbe8 	bl	bfb4 <__aeabi_dsub>
    z -= floor(z);
     7e4:	4632      	mov	r2, r6
{
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
     7e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    z -= floor(z);
     7ea:	463b      	mov	r3, r7
     7ec:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
     7f0:	f00b fbe0 	bl	bfb4 <__aeabi_dsub>

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
     7f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);
     7f8:	e9cd 0108 	strd	r0, r1, [sp, #32]

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
     7fc:	4640      	mov	r0, r8
     7fe:	f7ff ff67 	bl	6d0 <_ZN7Perlins4fadeEd>
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
     802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
     806:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
     80a:	4640      	mov	r0, r8
     80c:	f7ff ff60 	bl	6d0 <_ZN7Perlins4fadeEd>
            w = fade(z);

    int  A = P(X)+Y,
     810:	4c98      	ldr	r4, [pc, #608]	; (a74 <_ZN7Perlins6pnoiseEddd+0x2f4>)
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);
     812:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
     816:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
            w = fade(z);
     81a:	4640      	mov	r0, r8
     81c:	f7ff ff58 	bl	6d0 <_ZN7Perlins4fadeEd>

    int  A = P(X)+Y,
     820:	f814 300b 	ldrb.w	r3, [r4, fp]
     824:	4453      	add	r3, sl
         AA = P(A)+Z,
     826:	b2da      	uxtb	r2, r3
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
     828:	3301      	adds	r3, #1
     82a:	b2db      	uxtb	r3, r3
         B = P(X+1)+Y,
     82c:	f10b 0b01 	add.w	fp, fp, #1
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
     830:	5ce3      	ldrb	r3, [r4, r3]
    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
     832:	5ca7      	ldrb	r7, [r4, r2]
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
         B = P(X+1)+Y,
     834:	fa5f fb8b 	uxtb.w	fp, fp
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
     838:	eb03 0509 	add.w	r5, r3, r9
         B = P(X+1)+Y,
     83c:	f814 300b 	ldrb.w	r3, [r4, fp]
     840:	449a      	add	sl, r3
         BA = P(B)+Z,
     842:	fa5f f38a 	uxtb.w	r3, sl
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */
     846:	f10a 0a01 	add.w	sl, sl, #1
     84a:	fa5f fa8a 	uxtb.w	sl, sl

    int  A = P(X)+Y,
         AA = P(A)+Z,
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
         B = P(X+1)+Y,
         BA = P(B)+Z,
     84e:	5ce6      	ldrb	r6, [r4, r3]
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */
     850:	f814 300a 	ldrb.w	r3, [r4, sl]
    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
     854:	444f      	add	r7, r9
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
         B = P(X+1)+Y,
         BA = P(B)+Z,
     856:	444e      	add	r6, r9
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */
     858:	4499      	add	r9, r3

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
     85a:	b2fb      	uxtb	r3, r7
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);
     85c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     860:	5ce1      	ldrb	r1, [r4, r3]
     862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     866:	e9cd 2300 	strd	r2, r3, [sp]
     86a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     86e:	4640      	mov	r0, r8
     870:	e9cd 2302 	strd	r2, r3, [sp, #8]
     874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     878:	f7ff ff58 	bl	72c <_ZN7Perlins4gradEiddd>
     87c:	2200      	movs	r2, #0
     87e:	4682      	mov	sl, r0
     880:	468b      	mov	fp, r1
     882:	4b7d      	ldr	r3, [pc, #500]	; (a78 <_ZN7Perlins6pnoiseEddd+0x2f8>)
     884:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     888:	f00b fb94 	bl	bfb4 <__aeabi_dsub>
         B = P(X+1)+Y,
         BA = P(B)+Z,
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
     88c:	b2f3      	uxtb	r3, r6
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     88e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
     892:	5ce1      	ldrb	r1, [r4, r3]
     894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     898:	e9cd 2300 	strd	r2, r3, [sp]
     89c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     8a0:	4640      	mov	r0, r8
     8a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
     8a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     8aa:	f7ff ff3f 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     8ae:	4652      	mov	r2, sl
     8b0:	465b      	mov	r3, fp
     8b2:	f00b fb7f 	bl	bfb4 <__aeabi_dsub>
     8b6:	4602      	mov	r2, r0
     8b8:	460b      	mov	r3, r1
     8ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     8be:	f00b fd2d 	bl	c31c <__aeabi_dmul>
     8c2:	4602      	mov	r2, r0
     8c4:	460b      	mov	r3, r1
     8c6:	4650      	mov	r0, sl
     8c8:	4659      	mov	r1, fp
     8ca:	f00b fb75 	bl	bfb8 <__adddf3>
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     8ce:	2200      	movs	r2, #0
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     8d0:	4682      	mov	sl, r0
     8d2:	468b      	mov	fp, r1
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     8d4:	4b68      	ldr	r3, [pc, #416]	; (a78 <_ZN7Perlins6pnoiseEddd+0x2f8>)
     8d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     8da:	f00b fb6b 	bl	bfb4 <__aeabi_dsub>
         BA = P(B)+Z,
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
     8de:	b2eb      	uxtb	r3, r5
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     8e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
     8e4:	5ce1      	ldrb	r1, [r4, r3]
     8e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     8ea:	e9cd 2300 	strd	r2, r3, [sp]
     8ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     8f2:	4640      	mov	r0, r8
     8f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
     8f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     8fc:	f7ff ff16 	bl	72c <_ZN7Perlins4gradEiddd>
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
     900:	fa5f f389 	uxtb.w	r3, r9
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     904:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
     908:	5ce1      	ldrb	r1, [r4, r3]
     90a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     90e:	e9cd 2300 	strd	r2, r3, [sp]
     912:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     916:	4640      	mov	r0, r8
     918:	e9cd 2302 	strd	r2, r3, [sp, #8]
     91c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     920:	f7ff ff04 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     924:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
     928:	f00b fb44 	bl	bfb4 <__aeabi_dsub>
     92c:	4602      	mov	r2, r0
     92e:	460b      	mov	r3, r1
     930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     934:	f00b fcf2 	bl	c31c <__aeabi_dmul>
     938:	4602      	mov	r2, r0
     93a:	460b      	mov	r3, r1
     93c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     940:	f00b fb3a 	bl	bfb8 <__adddf3>
     944:	4652      	mov	r2, sl
     946:	465b      	mov	r3, fp
     948:	f00b fb34 	bl	bfb4 <__aeabi_dsub>
     94c:	4602      	mov	r2, r0
     94e:	460b      	mov	r3, r1
     950:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
     954:	f00b fce2 	bl	c31c <__aeabi_dmul>
     958:	4602      	mov	r2, r0
     95a:	460b      	mov	r3, r1
     95c:	4650      	mov	r0, sl
     95e:	4659      	mov	r1, fp
     960:	f00b fb2a 	bl	bfb8 <__adddf3>
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     964:	2200      	movs	r2, #0
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     966:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     96a:	4b43      	ldr	r3, [pc, #268]	; (a78 <_ZN7Perlins6pnoiseEddd+0x2f8>)
     96c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
     970:	f00b fb20 	bl	bfb4 <__aeabi_dsub>

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
     974:	3701      	adds	r7, #1
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     976:	e9dd 2306 	ldrd	r2, r3, [sp, #24]

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
     97a:	b2ff      	uxtb	r7, r7
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     97c:	4682      	mov	sl, r0
     97e:	468b      	mov	fp, r1
     980:	e9cd 2300 	strd	r2, r3, [sp]
     984:	5de1      	ldrb	r1, [r4, r7]
     986:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     98a:	e9cd ab02 	strd	sl, fp, [sp, #8]
     98e:	4640      	mov	r0, r8
     990:	f7ff fecc 	bl	72c <_ZN7Perlins4gradEiddd>
    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
     994:	3601      	adds	r6, #1
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     996:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
     99a:	b2f6      	uxtb	r6, r6
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     99c:	e9cd 0108 	strd	r0, r1, [sp, #32]
     9a0:	e9cd 2300 	strd	r2, r3, [sp]
     9a4:	5da1      	ldrb	r1, [r4, r6]
     9a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     9aa:	e9cd ab02 	strd	sl, fp, [sp, #8]
     9ae:	4640      	mov	r0, r8
     9b0:	f7ff febc 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     9b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     9b8:	f00b fafc 	bl	bfb4 <__aeabi_dsub>
     9bc:	4602      	mov	r2, r0
     9be:	460b      	mov	r3, r1
     9c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     9c4:	f00b fcaa 	bl	c31c <__aeabi_dmul>
     9c8:	4602      	mov	r2, r0
     9ca:	460b      	mov	r3, r1
     9cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
     9d0:	f00b faf2 	bl	bfb8 <__adddf3>
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
     9d4:	1c6b      	adds	r3, r5, #1
     9d6:	b2db      	uxtb	r3, r3
                       grad(P(BB+1), x-1, y-1, z-1))));
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     9d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     9dc:	5ce1      	ldrb	r1, [r4, r3]
     9de:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     9e2:	e9cd ab02 	strd	sl, fp, [sp, #8]
     9e6:	e9cd 2300 	strd	r2, r3, [sp]
     9ea:	4640      	mov	r0, r8
     9ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     9f0:	f7ff fe9c 	bl	72c <_ZN7Perlins4gradEiddd>
     9f4:	f109 0901 	add.w	r9, r9, #1
     9f8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     9fc:	fa5f f989 	uxtb.w	r9, r9
     a00:	4606      	mov	r6, r0
     a02:	460f      	mov	r7, r1
     a04:	e9cd 2300 	strd	r2, r3, [sp]
     a08:	f814 1009 	ldrb.w	r1, [r4, r9]
     a0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     a10:	e9cd ab02 	strd	sl, fp, [sp, #8]
     a14:	4640      	mov	r0, r8
     a16:	f7ff fe89 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     a1a:	4632      	mov	r2, r6
     a1c:	463b      	mov	r3, r7
     a1e:	f00b fac9 	bl	bfb4 <__aeabi_dsub>
     a22:	4602      	mov	r2, r0
     a24:	460b      	mov	r3, r1
     a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     a2a:	f00b fc77 	bl	c31c <__aeabi_dmul>
     a2e:	4602      	mov	r2, r0
     a30:	460b      	mov	r3, r1
     a32:	4630      	mov	r0, r6
     a34:	4639      	mov	r1, r7
     a36:	f00b fabf 	bl	bfb8 <__adddf3>
     a3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     a3e:	f00b fab9 	bl	bfb4 <__aeabi_dsub>
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
     a4a:	f00b fc67 	bl	c31c <__aeabi_dmul>
     a4e:	4602      	mov	r2, r0
     a50:	460b      	mov	r3, r1
     a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     a56:	f00b faaf 	bl	bfb8 <__adddf3>
     a5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
     a5e:	f00b faa9 	bl	bfb4 <__aeabi_dsub>
     a62:	4602      	mov	r2, r0
     a64:	460b      	mov	r3, r1
     a66:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
     a6a:	f00b fc57 	bl	c31c <__aeabi_dmul>
     a6e:	4602      	mov	r2, r0
     a70:	460b      	mov	r3, r1
     a72:	e003      	b.n	a7c <_ZN7Perlins6pnoiseEddd+0x2fc>
     a74:	000129fc 	.word	0x000129fc
     a78:	3ff00000 	.word	0x3ff00000
     a7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     a80:	f00b fa9a 	bl	bfb8 <__adddf3>
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
}
     a84:	b019      	add	sp, #100	; 0x64
     a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a8a:	bf00      	nop

00000a8c <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9clearLedsEi>:

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     a8c:	b513      	push	{r0, r1, r4, lr}
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     a8e:	6803      	ldr	r3, [r0, #0]
     a90:	681c      	ldr	r4, [r3, #0]
     a92:	2300      	movs	r3, #0

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     a94:	460a      	mov	r2, r1
     a96:	f88d 3000 	strb.w	r3, [sp]
     a9a:	f88d 3001 	strb.w	r3, [sp, #1]
     a9e:	f88d 3002 	strb.w	r3, [sp, #2]
     aa2:	f88d 3004 	strb.w	r3, [sp, #4]
     aa6:	f88d 3005 	strb.w	r3, [sp, #5]
     aaa:	f88d 3006 	strb.w	r3, [sp, #6]
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     aae:	4669      	mov	r1, sp
     ab0:	ab01      	add	r3, sp, #4
     ab2:	47a0      	blx	r4
	}
     ab4:	b002      	add	sp, #8
     ab6:	bd10      	pop	{r4, pc}

00000ab8 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9clearLedsEi>:

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     ab8:	b513      	push	{r0, r1, r4, lr}
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     aba:	6803      	ldr	r3, [r0, #0]
     abc:	681c      	ldr	r4, [r3, #0]
     abe:	2300      	movs	r3, #0

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     ac0:	460a      	mov	r2, r1
     ac2:	f88d 3000 	strb.w	r3, [sp]
     ac6:	f88d 3001 	strb.w	r3, [sp, #1]
     aca:	f88d 3002 	strb.w	r3, [sp, #2]
     ace:	f88d 3004 	strb.w	r3, [sp, #4]
     ad2:	f88d 3005 	strb.w	r3, [sp, #5]
     ad6:	f88d 3006 	strb.w	r3, [sp, #6]
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     ada:	4669      	mov	r1, sp
     adc:	ab01      	add	r3, sp, #4
     ade:	47a0      	blx	r4
	}
     ae0:	b002      	add	sp, #8
     ae2:	bd10      	pop	{r4, pc}

00000ae4 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9clearLedsEi>:

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     ae4:	b513      	push	{r0, r1, r4, lr}
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     ae6:	6803      	ldr	r3, [r0, #0]
     ae8:	681c      	ldr	r4, [r3, #0]
     aea:	2300      	movs	r3, #0

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     aec:	460a      	mov	r2, r1
     aee:	f88d 3000 	strb.w	r3, [sp]
     af2:	f88d 3001 	strb.w	r3, [sp, #1]
     af6:	f88d 3002 	strb.w	r3, [sp, #2]
     afa:	f88d 3004 	strb.w	r3, [sp, #4]
     afe:	f88d 3005 	strb.w	r3, [sp, #5]
     b02:	f88d 3006 	strb.w	r3, [sp, #6]
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     b06:	4669      	mov	r1, sp
     b08:	ab01      	add	r3, sp, #4
     b0a:	47a0      	blx	r4
	}
     b0c:	b002      	add	sp, #8
     b0e:	bd10      	pop	{r4, pc}

00000b10 <_Z16modeButtonChangev>:

#define EEPROM_ADDRESS 0

bool modeChange = false;
unsigned long lastActionTime = millis();
void modeButtonChange() {
     b10:	b513      	push	{r0, r1, r4, lr}
    if ((digitalRead(MODE_PIN) == HIGH) && (millis() >= lastActionTime + 200)) {
     b12:	2000      	movs	r0, #0
     b14:	f002 f818 	bl	2b48 <digitalRead>
     b18:	2801      	cmp	r0, #1
     b1a:	d10e      	bne.n	b3a <_Z16modeButtonChangev+0x2a>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
     b1c:	4a08      	ldr	r2, [pc, #32]	; (b40 <_Z16modeButtonChangev+0x30>)
     b1e:	6813      	ldr	r3, [r2, #0]
     b20:	9300      	str	r3, [sp, #0]
     b22:	4b08      	ldr	r3, [pc, #32]	; (b44 <_Z16modeButtonChangev+0x34>)
	return ret;
     b24:	9c00      	ldr	r4, [sp, #0]
     b26:	6819      	ldr	r1, [r3, #0]
     b28:	31c8      	adds	r1, #200	; 0xc8
     b2a:	428c      	cmp	r4, r1
     b2c:	d305      	bcc.n	b3a <_Z16modeButtonChangev+0x2a>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
     b2e:	6812      	ldr	r2, [r2, #0]
        modeChange = true;
     b30:	4905      	ldr	r1, [pc, #20]	; (b48 <_Z16modeButtonChangev+0x38>)
     b32:	9201      	str	r2, [sp, #4]
	return ret;
     b34:	9a01      	ldr	r2, [sp, #4]
     b36:	7008      	strb	r0, [r1, #0]
        lastActionTime = millis();
     b38:	601a      	str	r2, [r3, #0]
    }
}
     b3a:	b002      	add	sp, #8
     b3c:	bd10      	pop	{r4, pc}
     b3e:	bf00      	nop
     b40:	1fff91a8 	.word	0x1fff91a8
     b44:	1fff90bc 	.word	0x1fff90bc
     b48:	1fff90c0 	.word	0x1fff90c0

00000b4c <_ZN14CLEDControllerC1Ev>:
#ifdef SUPPORT_ARGB
    // as above, but every 4th uint8_t is assumed to be alpha channel data, and will be skipped
    virtual void show(const struct CARGB *data, int nLeds, CRGB scale) = 0;
#endif
public:
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     b4c:	4b0c      	ldr	r3, [pc, #48]	; (b80 <_ZN14CLEDControllerC1Ev+0x34>)
     b4e:	6003      	str	r3, [r0, #0]
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    {
    }

    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b50:	23ff      	movs	r3, #255	; 0xff
     b52:	7303      	strb	r3, [r0, #12]
     b54:	7343      	strb	r3, [r0, #13]
     b56:	7383      	strb	r3, [r0, #14]
    {

    }

    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b58:	73c3      	strb	r3, [r0, #15]
     b5a:	7403      	strb	r3, [r0, #16]
     b5c:	7443      	strb	r3, [r0, #17]
     b5e:	2301      	movs	r3, #1
     b60:	7483      	strb	r3, [r0, #18]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     b62:	4b08      	ldr	r3, [pc, #32]	; (b84 <_ZN14CLEDControllerC1Ev+0x38>)
#ifdef SUPPORT_ARGB
    // as above, but every 4th uint8_t is assumed to be alpha channel data, and will be skipped
    virtual void show(const struct CARGB *data, int nLeds, CRGB scale) = 0;
#endif
public:
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     b64:	2200      	movs	r2, #0
     b66:	6042      	str	r2, [r0, #4]
     b68:	6142      	str	r2, [r0, #20]
        m_pNext = NULL;
     b6a:	6082      	str	r2, [r0, #8]
        if(m_pHead==NULL) { m_pHead = this; }
     b6c:	681a      	ldr	r2, [r3, #0]
     b6e:	b902      	cbnz	r2, b72 <_ZN14CLEDControllerC1Ev+0x26>
     b70:	6018      	str	r0, [r3, #0]
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     b72:	4a05      	ldr	r2, [pc, #20]	; (b88 <_ZN14CLEDControllerC1Ev+0x3c>)
     b74:	6813      	ldr	r3, [r2, #0]
     b76:	b103      	cbz	r3, b7a <_ZN14CLEDControllerC1Ev+0x2e>
     b78:	6098      	str	r0, [r3, #8]
        m_pTail = this;
     b7a:	6010      	str	r0, [r2, #0]
    }
     b7c:	4770      	bx	lr
     b7e:	bf00      	nop
     b80:	00012b18 	.word	0x00012b18
     b84:	1fff8d60 	.word	0x1fff8d60
     b88:	1fff8d64 	.word	0x1fff8d64

00000b8c <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
     b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     b8e:	e890 0048 	ldmia.w	r0, {r3, r6}
     b92:	1af6      	subs	r6, r6, r3
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
     b94:	10b6      	asrs	r6, r6, #2
     b96:	bf14      	ite	ne
     b98:	4633      	movne	r3, r6
     b9a:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
     b9c:	199b      	adds	r3, r3, r6
     b9e:	4604      	mov	r4, r0
     ba0:	460f      	mov	r7, r1
     ba2:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
     ba6:	d203      	bcs.n	bb0 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x24>
     ba8:	42b3      	cmp	r3, r6
     baa:	bf38      	it	cc
     bac:	461e      	movcc	r6, r3
    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
     bae:	b126      	cbz	r6, bba <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x2e>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
     bb0:	00b0      	lsls	r0, r6, #2
     bb2:	f003 fc5f 	bl	4474 <_Znwj>
     bb6:	4605      	mov	r5, r0
     bb8:	e000      	b.n	bbc <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x30>
     bba:	4635      	mov	r5, r6

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     bbc:	6862      	ldr	r2, [r4, #4]
     bbe:	6823      	ldr	r3, [r4, #0]
     bc0:	1ad3      	subs	r3, r2, r3
     bc2:	109b      	asrs	r3, r3, #2
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
     bc4:	eb05 0183 	add.w	r1, r5, r3, lsl #2

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     bc8:	683a      	ldr	r2, [r7, #0]
     bca:	b109      	cbz	r1, bd0 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x44>
     bcc:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
	  const ptrdiff_t _Num = __last - __first;
     bd0:	e894 0082 	ldmia.w	r4, {r1, r7}
     bd4:	1a7f      	subs	r7, r7, r1
	  if (_Num)
     bd6:	10bf      	asrs	r7, r7, #2
     bd8:	ea4f 0787 	mov.w	r7, r7, lsl #2
     bdc:	d003      	beq.n	be6 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
     bde:	4628      	mov	r0, r5
     be0:	463a      	mov	r2, r7
     be2:	f00d fc0b 	bl	e3fc <memmove>
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
     be6:	6820      	ldr	r0, [r4, #0]
	  return __result + _Num;
     be8:	442f      	add	r7, r5
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
     bea:	3704      	adds	r7, #4
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
     bec:	b108      	cbz	r0, bf2 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x66>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
     bee:	f003 fc3d 	bl	446c <_ZdlPv>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
     bf2:	e884 00a0 	stmia.w	r4, {r5, r7}
	this->_M_impl._M_end_of_storage = __new_start + __len;
     bf6:	eb05 0586 	add.w	r5, r5, r6, lsl #2
     bfa:	60a5      	str	r5, [r4, #8]
     bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
     bfe:	b538      	push	{r3, r4, r5, lr}
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     c00:	6842      	ldr	r2, [r0, #4]
     c02:	6884      	ldr	r4, [r0, #8]
     c04:	42a2      	cmp	r2, r4

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
     c06:	4603      	mov	r3, r0
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     c08:	d006      	beq.n	c18 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_+0x1a>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     c0a:	6809      	ldr	r1, [r1, #0]
     c0c:	b102      	cbz	r2, c10 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_+0x12>
     c0e:	6011      	str	r1, [r2, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
     c10:	685a      	ldr	r2, [r3, #4]
     c12:	3204      	adds	r2, #4
     c14:	605a      	str	r2, [r3, #4]
     c16:	bd38      	pop	{r3, r4, r5, pc}
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
     c18:	f7ff ffb8 	bl	b8c <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_>
     c1c:	bd38      	pop	{r3, r4, r5, pc}
     c1e:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00000c20 <main>:

extern "C" int main(void)
{
     c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Serial.begin(9600);
	static bool reboot = false;
	int brightness = LED_DEFAULT_BRIGHTNESS;

	analogReference(DEFAULT);
     c24:	2000      	movs	r0, #0
        lastActionTime = millis();
    }
}

extern "C" int main(void)
{
     c26:	b088      	sub	sp, #32
    Serial.begin(9600);
	static bool reboot = false;
	int brightness = LED_DEFAULT_BRIGHTNESS;

	analogReference(DEFAULT);
     c28:	f001 fa22 	bl	2070 <analogReference>
	analogReadAveraging(4);
     c2c:	2004      	movs	r0, #4
     c2e:	f001 fa43 	bl	20b8 <analogReadAveraging>

    pinMode(RANDOM_PIN, INPUT);
     c32:	2100      	movs	r1, #0
     c34:	2003      	movs	r0, #3
     c36:	f001 ff95 	bl	2b64 <pinMode>
    randomSeed(analogRead(RANDOM_PIN));
     c3a:	2003      	movs	r0, #3
     c3c:	f001 fa66 	bl	210c <analogRead>
     c40:	f003 fbda 	bl	43f8 <_Z10randomSeedm>
    random16_add_entropy(random());
     c44:	f003 fbde 	bl	4404 <_Z6randomv>
    return rand16seed;
}

LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
     c48:	4bb3      	ldr	r3, [pc, #716]	; (f18 <main+0x2f8>)
     c4a:	881a      	ldrh	r2, [r3, #0]
     c4c:	4410      	add	r0, r2
     c4e:	8018      	strh	r0, [r3, #0]

	pinMode(LED_PIN, OUTPUT);
     c50:	2101      	movs	r1, #1
     c52:	200d      	movs	r0, #13
     c54:	f001 ff86 	bl	2b64 <pinMode>
    pinMode(MODE_PIN, INPUT);
     c58:	2000      	movs	r0, #0
     c5a:	4601      	mov	r1, r0
     c5c:	f001 ff82 	bl	2b64 <pinMode>
    attachInterrupt(MODE_PIN, modeButtonChange, RISING);
     c60:	2000      	movs	r0, #0
     c62:	49ae      	ldr	r1, [pc, #696]	; (f1c <main+0x2fc>)
     c64:	2203      	movs	r2, #3
     c66:	f001 fdf1 	bl	284c <attachInterrupt>

	begin:

	FastLED.setBrightness(LED_DEFAULT_BRIGHTNESS);
     c6a:	4bad      	ldr	r3, [pc, #692]	; (f20 <main+0x300>)
     c6c:	681d      	ldr	r5, [r3, #0]
			case WS2811_PORTC: return addLeds(new BlockClocklessController<NUM_LANES, NS(350), NS(350), NS(550)>(), data, nLedsOrOffset, nLedsIfOffset);
		}
	}
#endif

	void setBrightness(uint8_t scale) { m_Scale = scale; }
     c6e:	2364      	movs	r3, #100	; 0x64
     c70:	702b      	strb	r3, [r5, #0]
     c72:	2400      	movs	r4, #0
     c74:	f8df 82fc 	ldr.w	r8, [pc, #764]	; f74 <main+0x354>
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     c78:	2300      	movs	r3, #0
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     c7a:	eb08 0104 	add.w	r1, r8, r4
     c7e:	a804      	add	r0, sp, #16
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     c80:	f88d 3010 	strb.w	r3, [sp, #16]
     c84:	f88d 3011 	strb.w	r3, [sp, #17]
     c88:	f88d 3012 	strb.w	r3, [sp, #18]
     c8c:	3403      	adds	r4, #3
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     c8e:	f7ff fc52 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
	for (uint8_t i = 0; i < nLEDS; i++)
     c92:	f240 23ee 	movw	r3, #750	; 0x2ee
     c96:	429c      	cmp	r4, r3
     c98:	4647      	mov	r7, r8
     c9a:	d1eb      	bne.n	c74 <main+0x54>
	    leds[i] = CHSV(0, 0, 0);
	led_init();
     c9c:	4ba1      	ldr	r3, [pc, #644]	; (f24 <main+0x304>)
		switch(CHIPSET) {
			case LPD8806: { static LPD8806Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     c9e:	4ca2      	ldr	r4, [pc, #648]	; (f28 <main+0x308>)
     ca0:	f8d3 9000 	ldr.w	r9, [r3]
     ca4:	6823      	ldr	r3, [r4, #0]
     ca6:	f013 0a01 	ands.w	sl, r3, #1
     caa:	d10e      	bne.n	cca <main+0xaa>
     cac:	4620      	mov	r0, r4
     cae:	f001 fd5f 	bl	2770 <__cxa_guard_acquire>
     cb2:	b150      	cbz	r0, cca <main+0xaa>
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
	}

public:
	P9813Controller() {}
     cb4:	4e9d      	ldr	r6, [pc, #628]	; (f2c <main+0x30c>)
     cb6:	4630      	mov	r0, r6
     cb8:	f7ff ff48 	bl	b4c <_ZN14CLEDControllerC1Ev>
     cbc:	4b9c      	ldr	r3, [pc, #624]	; (f30 <main+0x310>)
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
     cbe:	f8c6 a018 	str.w	sl, [r6, #24]
     cc2:	4620      	mov	r0, r4
     cc4:	6033      	str	r3, [r6, #0]
     cc6:	f001 fd59 	bl	277c <__cxa_guard_release>
     cca:	4649      	mov	r1, r9
     ccc:	2300      	movs	r3, #0
     cce:	4897      	ldr	r0, [pc, #604]	; (f2c <main+0x30c>)
     cd0:	4c98      	ldr	r4, [pc, #608]	; (f34 <main+0x314>)
     cd2:	2264      	movs	r2, #100	; 0x64
     cd4:	f7ff fbdc 	bl	490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
     cd8:	4b97      	ldr	r3, [pc, #604]	; (f38 <main+0x318>)
     cda:	f8d3 9000 	ldr.w	r9, [r3]
     cde:	6823      	ldr	r3, [r4, #0]
     ce0:	f013 0a01 	ands.w	sl, r3, #1
     ce4:	d10e      	bne.n	d04 <main+0xe4>
     ce6:	4620      	mov	r0, r4
     ce8:	f001 fd42 	bl	2770 <__cxa_guard_acquire>
     cec:	b150      	cbz	r0, d04 <main+0xe4>
     cee:	4e93      	ldr	r6, [pc, #588]	; (f3c <main+0x31c>)
     cf0:	4630      	mov	r0, r6
     cf2:	f7ff ff2b 	bl	b4c <_ZN14CLEDControllerC1Ev>
     cf6:	4b92      	ldr	r3, [pc, #584]	; (f40 <main+0x320>)
     cf8:	f8c6 a018 	str.w	sl, [r6, #24]
     cfc:	4620      	mov	r0, r4
     cfe:	6033      	str	r3, [r6, #0]
     d00:	f001 fd3c 	bl	277c <__cxa_guard_release>
     d04:	4649      	mov	r1, r9
     d06:	2300      	movs	r3, #0
     d08:	488c      	ldr	r0, [pc, #560]	; (f3c <main+0x31c>)
     d0a:	4c8e      	ldr	r4, [pc, #568]	; (f44 <main+0x324>)
     d0c:	2264      	movs	r2, #100	; 0x64
     d0e:	f7ff fbbf 	bl	490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
     d12:	4b8d      	ldr	r3, [pc, #564]	; (f48 <main+0x328>)
     d14:	f8d3 9000 	ldr.w	r9, [r3]
     d18:	6823      	ldr	r3, [r4, #0]
     d1a:	f013 0a01 	ands.w	sl, r3, #1
     d1e:	d10e      	bne.n	d3e <main+0x11e>
     d20:	4620      	mov	r0, r4
     d22:	f001 fd25 	bl	2770 <__cxa_guard_acquire>
     d26:	b150      	cbz	r0, d3e <main+0x11e>
     d28:	4e88      	ldr	r6, [pc, #544]	; (f4c <main+0x32c>)
     d2a:	4630      	mov	r0, r6
     d2c:	f7ff ff0e 	bl	b4c <_ZN14CLEDControllerC1Ev>
     d30:	4b87      	ldr	r3, [pc, #540]	; (f50 <main+0x330>)
     d32:	f8c6 a018 	str.w	sl, [r6, #24]
     d36:	4620      	mov	r0, r4
     d38:	6033      	str	r3, [r6, #0]
     d3a:	f001 fd1f 	bl	277c <__cxa_guard_release>
     d3e:	2232      	movs	r2, #50	; 0x32
     d40:	4649      	mov	r1, r9
     d42:	2300      	movs	r3, #0
     d44:	4881      	ldr	r0, [pc, #516]	; (f4c <main+0x32c>)
     d46:	f7ff fba3 	bl	490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
     d4a:	2600      	movs	r6, #0

    std::vector<BaseMode*> modes;
    modes.push_back(new MeltMode());
     d4c:	2030      	movs	r0, #48	; 0x30
     d4e:	9605      	str	r6, [sp, #20]
     d50:	9606      	str	r6, [sp, #24]
     d52:	9607      	str	r6, [sp, #28]
     d54:	f003 fb8e 	bl	4474 <_Znwj>
     d58:	4604      	mov	r4, r0
     d5a:	f001 f891 	bl	1e80 <_ZN8MeltModeC1Ev>
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }
     d5e:	a904      	add	r1, sp, #16
     d60:	a805      	add	r0, sp, #20
     d62:	9404      	str	r4, [sp, #16]
     d64:	f7ff ff4b 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     d68:	24ff      	movs	r4, #255	; 0xff
     d6a:	23c0      	movs	r3, #192	; 0xc0
    modes.push_back(new ColorMode("purple", CHSV(192, 255, 255), 125));
     d6c:	2014      	movs	r0, #20
     d6e:	f88d 300c 	strb.w	r3, [sp, #12]
     d72:	f88d 400d 	strb.w	r4, [sp, #13]
     d76:	f88d 400e 	strb.w	r4, [sp, #14]
     d7a:	f003 fb7b 	bl	4474 <_Znwj>
     d7e:	aa03      	add	r2, sp, #12
     d80:	237d      	movs	r3, #125	; 0x7d
     d82:	4974      	ldr	r1, [pc, #464]	; (f54 <main+0x334>)
     d84:	4681      	mov	r9, r0
     d86:	f000 fe6b 	bl	1a60 <_ZN9ColorModeC1EPKc4CHSVl>
     d8a:	a904      	add	r1, sp, #16
     d8c:	a805      	add	r0, sp, #20
     d8e:	f8cd 9010 	str.w	r9, [sp, #16]
     d92:	f7ff ff34 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
     d96:	2320      	movs	r3, #32
    modes.push_back(new ColorMode("orange", CHSV(32, 255, 255), 125));
     d98:	2014      	movs	r0, #20
     d9a:	f88d 300c 	strb.w	r3, [sp, #12]
     d9e:	f88d 400d 	strb.w	r4, [sp, #13]
     da2:	f88d 400e 	strb.w	r4, [sp, #14]
     da6:	f003 fb65 	bl	4474 <_Znwj>
     daa:	aa03      	add	r2, sp, #12
     dac:	237d      	movs	r3, #125	; 0x7d
     dae:	496a      	ldr	r1, [pc, #424]	; (f58 <main+0x338>)
     db0:	4681      	mov	r9, r0
     db2:	f000 fe55 	bl	1a60 <_ZN9ColorModeC1EPKc4CHSVl>
     db6:	a904      	add	r1, sp, #16
     db8:	a805      	add	r0, sp, #20
     dba:	f8cd 9010 	str.w	r9, [sp, #16]
     dbe:	f7ff ff1e 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
    modes.push_back(new ColorMode("white", CHSV(0, 0, 255), 0));
     dc2:	2014      	movs	r0, #20
     dc4:	f88d 600c 	strb.w	r6, [sp, #12]
     dc8:	f88d 600d 	strb.w	r6, [sp, #13]
     dcc:	f88d 400e 	strb.w	r4, [sp, #14]
     dd0:	f003 fb50 	bl	4474 <_Znwj>
     dd4:	4633      	mov	r3, r6
     dd6:	aa03      	add	r2, sp, #12
     dd8:	4960      	ldr	r1, [pc, #384]	; (f5c <main+0x33c>)
     dda:	4604      	mov	r4, r0
     ddc:	f000 fe40 	bl	1a60 <_ZN9ColorModeC1EPKc4CHSVl>
     de0:	a904      	add	r1, sp, #16
     de2:	a805      	add	r0, sp, #20
     de4:	9404      	str	r4, [sp, #16]
     de6:	f7ff ff0a 	bl	bfe <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
     dea:	9c05      	ldr	r4, [sp, #20]
    std::vector<BaseMode*>::iterator modeIterator = modes.begin();

    // <cgerstle> eeprom seems to fuck my usb connection sometimes, comment out to use serial
    eeprom_initialize();
     dec:	f001 fa40 	bl	2270 <eeprom_initialize>
    byte modeIndex = eeprom_read_byte(EEPROM_ADDRESS);
     df0:	4630      	mov	r0, r6
     df2:	f001 fa73 	bl	22dc <eeprom_read_byte>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     df6:	9a06      	ldr	r2, [sp, #24]
     df8:	9b05      	ldr	r3, [sp, #20]
     dfa:	1ad3      	subs	r3, r2, r3
    if (modeIndex < modes.size())
     dfc:	ebb0 0fa3 	cmp.w	r0, r3, asr #2
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }
     e00:	bf3c      	itt	cc
     e02:	b203      	sxthcc	r3, r0
     e04:	eb04 0483 	addcc.w	r4, r4, r3, lsl #2
    modes.push_back(new ColorMode("white", CHSV(0, 0, 255), 0));
    std::vector<BaseMode*>::iterator modeIterator = modes.begin();

    // <cgerstle> eeprom seems to fuck my usb connection sometimes, comment out to use serial
    eeprom_initialize();
    byte modeIndex = eeprom_read_byte(EEPROM_ADDRESS);
     e08:	4606      	mov	r6, r0
    if (modeIndex < modes.size())
            modeIterator += modeIndex;
    Serial.printf("mode Index: %d current mode: %s\n", modeIndex, (*modeIterator)->name());
     e0a:	6820      	ldr	r0, [r4, #0]
     e0c:	6803      	ldr	r3, [r0, #0]
     e0e:	68db      	ldr	r3, [r3, #12]
     e10:	4798      	blx	r3
     e12:	4632      	mov	r2, r6
     e14:	4603      	mov	r3, r0
     e16:	4952      	ldr	r1, [pc, #328]	; (f60 <main+0x340>)
     e18:	4852      	ldr	r0, [pc, #328]	; (f64 <main+0x344>)
     e1a:	f001 ff47 	bl	2cac <_ZN5Print6printfEPKcz>
     e1e:	2600      	movs	r6, #0
     e20:	2300      	movs	r3, #0
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     e22:	eb08 0106 	add.w	r1, r8, r6
     e26:	a804      	add	r0, sp, #16
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     e28:	f88d 3010 	strb.w	r3, [sp, #16]
     e2c:	f88d 3011 	strb.w	r3, [sp, #17]
     e30:	f88d 3012 	strb.w	r3, [sp, #18]
     e34:	3603      	adds	r6, #3
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     e36:	f7ff fb7e 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>

	for (uint8_t i = 0; i < nLEDS; i++)
     e3a:	f240 23ee 	movw	r3, #750	; 0x2ee
     e3e:	429e      	cmp	r6, r3
     e40:	d1ee      	bne.n	e20 <main+0x200>

	/// Update all our controllers with the current led colors, using the passed in brightness
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     e42:	4628      	mov	r0, r5
     e44:	7829      	ldrb	r1, [r5, #0]
     e46:	f7ff fb37 	bl	4b8 <_ZN8CFastLED4showEh>
	    leds[i] = CHSV(0, 0, 0);
	led_show();

	while (1) {
		if (reboot)
     e4a:	4b47      	ldr	r3, [pc, #284]	; (f68 <main+0x348>)
     e4c:	781e      	ldrb	r6, [r3, #0]
     e4e:	2e00      	cmp	r6, #0
     e50:	d13b      	bne.n	eca <main+0x2aa>
			goto reboot;

		brightness = analogRead(BRIGHTNESS_PIN);
     e52:	2001      	movs	r0, #1
     e54:	f001 f95a 	bl	210c <analogRead>
//		Serial.print(brightness); Serial.print("\t");
		brightness = map(brightness, 500, 1023, 0, 255);
     e58:	23ff      	movs	r3, #255	; 0xff
     e5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
     e5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     e62:	9300      	str	r3, [sp, #0]
     e64:	4633      	mov	r3, r6
     e66:	f003 faef 	bl	4448 <_Z3maplllll>
		if (brightness < 10)
		    brightness = 0;
     e6a:	2809      	cmp	r0, #9
     e6c:	bfd8      	it	le
     e6e:	2000      	movle	r0, #0
//		Serial.println(brightness);
		FastLED.setBrightness(brightness);
     e70:	7028      	strb	r0, [r5, #0]

		(*modeIterator)->frame();
     e72:	6820      	ldr	r0, [r4, #0]
     e74:	6803      	ldr	r3, [r0, #0]
     e76:	689b      	ldr	r3, [r3, #8]
     e78:	4798      	blx	r3
     e7a:	4628      	mov	r0, r5
     e7c:	7829      	ldrb	r1, [r5, #0]
     e7e:	f7ff fb1b 	bl	4b8 <_ZN8CFastLED4showEh>
		led_show();

		if (modeChange)
     e82:	4b3a      	ldr	r3, [pc, #232]	; (f6c <main+0x34c>)
     e84:	781a      	ldrb	r2, [r3, #0]
     e86:	2a00      	cmp	r2, #0
     e88:	d0df      	beq.n	e4a <main+0x22a>
		{
		    modeChange = false;
		    digitalWrite(LED_PIN, HIGH);   // set the LED on
     e8a:	200d      	movs	r0, #13
     e8c:	2101      	movs	r1, #1
		(*modeIterator)->frame();
		led_show();

		if (modeChange)
		{
		    modeChange = false;
     e8e:	701e      	strb	r6, [r3, #0]
		    digitalWrite(LED_PIN, HIGH);   // set the LED on
     e90:	f001 fe3a 	bl	2b08 <digitalWrite>

		    modeIterator++;
		    if (modeIterator == modes.end())
     e94:	9b06      	ldr	r3, [sp, #24]
	return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }
     e96:	3404      	adds	r4, #4
     e98:	429c      	cmp	r4, r3
     e9a:	d10a      	bne.n	eb2 <main+0x292>
class Print
{
  public:
	Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     e9c:	4c31      	ldr	r4, [pc, #196]	; (f64 <main+0x344>)
     e9e:	4934      	ldr	r1, [pc, #208]	; (f70 <main+0x350>)
     ea0:	6823      	ldr	r3, [r4, #0]
     ea2:	4620      	mov	r0, r4
     ea4:	685b      	ldr	r3, [r3, #4]
     ea6:	2216      	movs	r2, #22
     ea8:	4798      	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     eaa:	4620      	mov	r0, r4
     eac:	f001 fee8 	bl	2c80 <_ZN5Print7printlnEv>
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
     eb0:	9c05      	ldr	r4, [sp, #20]

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }
     eb2:	9905      	ldr	r1, [sp, #20]
     eb4:	1a61      	subs	r1, r4, r1
		        modeIterator = modes.begin();
		    }

//		    Serial.println((*modeIterator)->name());
//		    Serial.printf("new index: %d\r\n", modeIterator - modes.begin());
		    eeprom_write_byte(EEPROM_ADDRESS, modeIterator - modes.begin());
     eb6:	2000      	movs	r0, #0
     eb8:	f3c1 0187 	ubfx	r1, r1, #2, #8
     ebc:	f001 fa22 	bl	2304 <eeprom_write_byte>
		    digitalWrite(LED_PIN, LOW);    // set the LED off
     ec0:	200d      	movs	r0, #13
     ec2:	2100      	movs	r1, #0
     ec4:	f001 fe20 	bl	2b08 <digitalWrite>
     ec8:	e7bf      	b.n	e4a <main+0x22a>
	}

	reboot:

	// Attempt teardown
	reboot = false;
     eca:	2200      	movs	r2, #0
     ecc:	9c05      	ldr	r4, [sp, #20]
     ece:	701a      	strb	r2, [r3, #0]
	for(std::vector<BaseMode*>::iterator i = modes.begin(); i != modes.end(); ++i )
     ed0:	9b06      	ldr	r3, [sp, #24]
     ed2:	429c      	cmp	r4, r3
     ed4:	d007      	beq.n	ee6 <main+0x2c6>
	{
    	delete *i;
     ed6:	f854 0b04 	ldr.w	r0, [r4], #4
     eda:	2800      	cmp	r0, #0
     edc:	d0f8      	beq.n	ed0 <main+0x2b0>
     ede:	6803      	ldr	r3, [r0, #0]
     ee0:	685b      	ldr	r3, [r3, #4]
     ee2:	4798      	blx	r3
     ee4:	e7f4      	b.n	ed0 <main+0x2b0>
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos)
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
     ee6:	9b05      	ldr	r3, [sp, #20]
     ee8:	9306      	str	r3, [sp, #24]
     eea:	2300      	movs	r3, #0
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     eec:	18f9      	adds	r1, r7, r3
     eee:	2200      	movs	r2, #0
     ef0:	54fa      	strb	r2, [r7, r3]
        g = (colorcode >>  8) & 0xFF;
     ef2:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
     ef4:	708a      	strb	r2, [r1, #2]
     ef6:	3303      	adds	r3, #3
	}
	modes.clear();

    for (int i = 0; i < nLEDS; i++)
     ef8:	f240 22ee 	movw	r2, #750	; 0x2ee
     efc:	4293      	cmp	r3, r2
     efe:	d1f5      	bne.n	eec <main+0x2cc>
     f00:	4628      	mov	r0, r5
     f02:	7829      	ldrb	r1, [r5, #0]
     f04:	f7ff fad8 	bl	4b8 <_ZN8CFastLED4showEh>
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
     f08:	9805      	ldr	r0, [sp, #20]
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
     f0a:	2800      	cmp	r0, #0
     f0c:	f43f aead 	beq.w	c6a <main+0x4a>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
     f10:	f003 faac 	bl	446c <_ZdlPv>
     f14:	e6a9      	b.n	c6a <main+0x4a>
     f16:	bf00      	nop
     f18:	1fff8404 	.word	0x1fff8404
     f1c:	00000b11 	.word	0x00000b11
     f20:	000129f8 	.word	0x000129f8
     f24:	1fff8410 	.word	0x1fff8410
     f28:	1fff90b4 	.word	0x1fff90b4
     f2c:	1fff9090 	.word	0x1fff9090
     f30:	00012b30 	.word	0x00012b30
     f34:	1fff90b0 	.word	0x1fff90b0
     f38:	1fff840c 	.word	0x1fff840c
     f3c:	1fff9074 	.word	0x1fff9074
     f40:	00012b48 	.word	0x00012b48
     f44:	1fff90ac 	.word	0x1fff90ac
     f48:	1fff8408 	.word	0x1fff8408
     f4c:	1fff9058 	.word	0x1fff9058
     f50:	00012b60 	.word	0x00012b60
     f54:	00012b70 	.word	0x00012b70
     f58:	00012b77 	.word	0x00012b77
     f5c:	00012b7e 	.word	0x00012b7e
     f60:	00012b84 	.word	0x00012b84
     f64:	1fff9408 	.word	0x1fff9408
     f68:	1fff90b8 	.word	0x1fff90b8
     f6c:	1fff90c0 	.word	0x1fff90c0
     f70:	00012ba5 	.word	0x00012ba5
     f74:	1fff8d68 	.word	0x1fff8d68

00000f78 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     f78:	6800      	ldr	r0, [r0, #0]
     f7a:	b508      	push	{r3, lr}
     f7c:	b110      	cbz	r0, f84 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv+0xc>
     f7e:	6803      	ldr	r3, [r0, #0]
     f80:	681b      	ldr	r3, [r3, #0]
     f82:	4798      	blx	r3
     f84:	bd08      	pop	{r3, pc}

00000f86 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>:

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     f86:	6800      	ldr	r0, [r0, #0]
     f88:	b508      	push	{r3, lr}
     f8a:	b110      	cbz	r0, f92 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv+0xc>
     f8c:	6803      	ldr	r3, [r0, #0]
     f8e:	685b      	ldr	r3, [r3, #4]
     f90:	4798      	blx	r3
     f92:	bd08      	pop	{r3, pc}

00000f94 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4initEv>:

	virtual void init() {
     f94:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN { 
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     f96:	2101      	movs	r1, #1
     f98:	4604      	mov	r4, r0
     f9a:	200a      	movs	r0, #10
     f9c:	f001 fde2 	bl	2b64 <pinMode>
     fa0:	200b      	movs	r0, #11
     fa2:	2101      	movs	r1, #1
     fa4:	f001 fdde 	bl	2b64 <pinMode>
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
     fa8:	f104 0018 	add.w	r0, r4, #24
     fac:	f7ff ffeb 	bl	f86 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>
     fb0:	bd10      	pop	{r4, pc}
     fb2:	ffff 4a2d 	vtbl.8	d20, {d15-d17}, d29

00000fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
     fb4:	4a2d      	ldr	r2, [pc, #180]	; (106c <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh+0xb8>)
     fb6:	4b2e      	ldr	r3, [pc, #184]	; (1070 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh+0xbc>)
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
     fb8:	f010 0f80 	tst.w	r0, #128	; 0x80
     fbc:	f04f 0110 	mov.w	r1, #16
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     fc0:	bf14      	ite	ne
     fc2:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     fc4:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     fc6:	2140      	movs	r1, #64	; 0x40
     fc8:	6011      	str	r1, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {NOP;}
     fca:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     fcc:	6019      	str	r1, [r3, #0]
     fce:	bf00      	nop
     fd0:	2110      	movs	r1, #16
     fd2:	f010 0f40 	tst.w	r0, #64	; 0x40
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     fd6:	bf14      	ite	ne
     fd8:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     fda:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     fdc:	2140      	movs	r1, #64	; 0x40
     fde:	6011      	str	r1, [r2, #0]
     fe0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     fe2:	6019      	str	r1, [r3, #0]
     fe4:	bf00      	nop
     fe6:	2110      	movs	r1, #16
     fe8:	f010 0f20 	tst.w	r0, #32
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     fec:	bf14      	ite	ne
     fee:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ff0:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ff2:	2140      	movs	r1, #64	; 0x40
     ff4:	6011      	str	r1, [r2, #0]
     ff6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ff8:	6019      	str	r1, [r3, #0]
     ffa:	bf00      	nop
     ffc:	2110      	movs	r1, #16
     ffe:	f010 0f10 	tst.w	r0, #16
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1002:	bf14      	ite	ne
    1004:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1006:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1008:	2140      	movs	r1, #64	; 0x40
    100a:	6011      	str	r1, [r2, #0]
    100c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    100e:	6019      	str	r1, [r3, #0]
    1010:	bf00      	nop
    1012:	2110      	movs	r1, #16
    1014:	f010 0f08 	tst.w	r0, #8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1018:	bf14      	ite	ne
    101a:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    101c:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    101e:	2140      	movs	r1, #64	; 0x40
    1020:	6011      	str	r1, [r2, #0]
    1022:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1024:	6019      	str	r1, [r3, #0]
    1026:	bf00      	nop
    1028:	2110      	movs	r1, #16
    102a:	f010 0f04 	tst.w	r0, #4
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    102e:	bf14      	ite	ne
    1030:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1032:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1034:	2140      	movs	r1, #64	; 0x40
    1036:	6011      	str	r1, [r2, #0]
    1038:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    103a:	6019      	str	r1, [r3, #0]
    103c:	bf00      	nop
    103e:	2110      	movs	r1, #16
    1040:	f010 0f02 	tst.w	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1044:	bf14      	ite	ne
    1046:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1048:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    104a:	2140      	movs	r1, #64	; 0x40
    104c:	6011      	str	r1, [r2, #0]
    104e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1050:	6019      	str	r1, [r3, #0]
    1052:	bf00      	nop
    1054:	2110      	movs	r1, #16
    1056:	f010 0f01 	tst.w	r0, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    105a:	bf14      	ite	ne
    105c:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    105e:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1060:	2140      	movs	r1, #64	; 0x40
    1062:	6011      	str	r1, [r2, #0]
    1064:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1066:	6019      	str	r1, [r3, #0]
    1068:	bf00      	nop
    106a:	4770      	bx	lr
    106c:	400ff084 	.word	0x400ff084
    1070:	400ff088 	.word	0x400ff088

00001074 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(15)>
class P9813Controller : public CLEDController {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
    1074:	b508      	push	{r3, lr}
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    1076:	2000      	movs	r0, #0
    1078:	f7ff ff9c 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    107c:	2000      	movs	r0, #0
    107e:	f7ff ff99 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1082:	2000      	movs	r0, #0
    1084:	f7ff ff96 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1088:	2000      	movs	r0, #0
    108a:	f7ff ff93 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    108e:	bd08      	pop	{r3, pc}

00001090 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    1090:	6800      	ldr	r0, [r0, #0]
    1092:	b508      	push	{r3, lr}
    1094:	b110      	cbz	r0, 109c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv+0xc>
    1096:	6803      	ldr	r3, [r0, #0]
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	4798      	blx	r3
    109c:	bd08      	pop	{r3, pc}

0000109e <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>:

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    109e:	6800      	ldr	r0, [r0, #0]
    10a0:	b508      	push	{r3, lr}
    10a2:	b110      	cbz	r0, 10aa <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv+0xc>
    10a4:	6803      	ldr	r3, [r0, #0]
    10a6:	685b      	ldr	r3, [r3, #4]
    10a8:	4798      	blx	r3
    10aa:	bd08      	pop	{r3, pc}

000010ac <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4initEv>:
	}

public:
	P9813Controller() {}

	virtual void init() {
    10ac:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN { 
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
    10ae:	2101      	movs	r1, #1
    10b0:	4604      	mov	r4, r0
    10b2:	2008      	movs	r0, #8
    10b4:	f001 fd56 	bl	2b64 <pinMode>
    10b8:	2009      	movs	r0, #9
    10ba:	2101      	movs	r1, #1
    10bc:	f001 fd52 	bl	2b64 <pinMode>
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
    10c0:	f104 0018 	add.w	r0, r4, #24
    10c4:	f7ff ffeb 	bl	109e <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>
    10c8:	bd10      	pop	{r4, pc}
    10ca:	ffff f010 	vshr.u32	d31, d0, #1

000010cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>:
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    10cc:	f010 0f80 	tst.w	r0, #128	; 0x80
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    10d0:	b510      	push	{r4, lr}
    10d2:	4a2c      	ldr	r2, [pc, #176]	; (1184 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xb8>)
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10d4:	bf14      	ite	ne
    10d6:	4c2c      	ldrne	r4, [pc, #176]	; (1188 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10d8:	4c2c      	ldreq	r4, [pc, #176]	; (118c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    10da:	4b2d      	ldr	r3, [pc, #180]	; (1190 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc4>)
    10dc:	2108      	movs	r1, #8
    10de:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10e0:	6011      	str	r1, [r2, #0]
    10e2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10e4:	6019      	str	r1, [r3, #0]
    10e6:	bf00      	nop
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    10e8:	f010 0f40 	tst.w	r0, #64	; 0x40
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10ec:	bf14      	ite	ne
    10ee:	4c26      	ldrne	r4, [pc, #152]	; (1188 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10f0:	4c26      	ldreq	r4, [pc, #152]	; (118c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    10f2:	2108      	movs	r1, #8
    10f4:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10f6:	6011      	str	r1, [r2, #0]
    10f8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10fa:	6019      	str	r1, [r3, #0]
    10fc:	bf00      	nop
    10fe:	f010 0f20 	tst.w	r0, #32
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1102:	bf14      	ite	ne
    1104:	4c20      	ldrne	r4, [pc, #128]	; (1188 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1106:	4c21      	ldreq	r4, [pc, #132]	; (118c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1108:	2108      	movs	r1, #8
    110a:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    110c:	6011      	str	r1, [r2, #0]
    110e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1110:	6019      	str	r1, [r3, #0]
    1112:	bf00      	nop
    1114:	f010 0f10 	tst.w	r0, #16
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1118:	bf14      	ite	ne
    111a:	4c1b      	ldrne	r4, [pc, #108]	; (1188 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    111c:	4c1b      	ldreq	r4, [pc, #108]	; (118c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    111e:	2108      	movs	r1, #8
    1120:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1122:	6011      	str	r1, [r2, #0]
    1124:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1126:	6019      	str	r1, [r3, #0]
    1128:	bf00      	nop
    112a:	f010 0f08 	tst.w	r0, #8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    112e:	bf14      	ite	ne
    1130:	4c15      	ldrne	r4, [pc, #84]	; (1188 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1132:	4c16      	ldreq	r4, [pc, #88]	; (118c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1134:	2108      	movs	r1, #8
    1136:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1138:	6011      	str	r1, [r2, #0]
    113a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    113c:	6019      	str	r1, [r3, #0]
    113e:	bf00      	nop
    1140:	f010 0f04 	tst.w	r0, #4
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1144:	bf14      	ite	ne
    1146:	4c10      	ldrne	r4, [pc, #64]	; (1188 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1148:	4c10      	ldreq	r4, [pc, #64]	; (118c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    114a:	2108      	movs	r1, #8
    114c:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    114e:	6011      	str	r1, [r2, #0]
    1150:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1152:	6019      	str	r1, [r3, #0]
    1154:	bf00      	nop
    1156:	f010 0f02 	tst.w	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    115a:	bf14      	ite	ne
    115c:	4c0a      	ldrne	r4, [pc, #40]	; (1188 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    115e:	4c0b      	ldreq	r4, [pc, #44]	; (118c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1160:	2108      	movs	r1, #8
    1162:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1164:	6011      	str	r1, [r2, #0]
    1166:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1168:	6019      	str	r1, [r3, #0]
    116a:	bf00      	nop
    116c:	f010 0f01 	tst.w	r0, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1170:	bf14      	ite	ne
    1172:	4805      	ldrne	r0, [pc, #20]	; (1188 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1174:	4805      	ldreq	r0, [pc, #20]	; (118c <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1176:	2108      	movs	r1, #8
    1178:	6001      	str	r1, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    117a:	6011      	str	r1, [r2, #0]
    117c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    117e:	6019      	str	r1, [r3, #0]
    1180:	bf00      	nop
    1182:	bd10      	pop	{r4, pc}
    1184:	400ff084 	.word	0x400ff084
    1188:	400ff0c4 	.word	0x400ff0c4
    118c:	400ff0c8 	.word	0x400ff0c8
    1190:	400ff088 	.word	0x400ff088

00001194 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(15)>
class P9813Controller : public CLEDController {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
    1194:	b508      	push	{r3, lr}
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    1196:	2000      	movs	r0, #0
    1198:	f7ff ff98 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    119c:	2000      	movs	r0, #0
    119e:	f7ff ff95 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    11a2:	2000      	movs	r0, #0
    11a4:	f7ff ff92 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    11a8:	2000      	movs	r0, #0
    11aa:	f7ff ff8f 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    11ae:	bd08      	pop	{r3, pc}

000011b0 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    11b0:	6800      	ldr	r0, [r0, #0]
    11b2:	b508      	push	{r3, lr}
    11b4:	b110      	cbz	r0, 11bc <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv+0xc>
    11b6:	6803      	ldr	r3, [r0, #0]
    11b8:	681b      	ldr	r3, [r3, #0]
    11ba:	4798      	blx	r3
    11bc:	bd08      	pop	{r3, pc}

000011be <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>:

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    11be:	6800      	ldr	r0, [r0, #0]
    11c0:	b508      	push	{r3, lr}
    11c2:	b110      	cbz	r0, 11ca <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv+0xc>
    11c4:	6803      	ldr	r3, [r0, #0]
    11c6:	685b      	ldr	r3, [r3, #4]
    11c8:	4798      	blx	r3
    11ca:	bd08      	pop	{r3, pc}

000011cc <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4initEv>:
	}

public:
	P9813Controller() {}

	virtual void init() {
    11cc:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN { 
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
    11ce:	2101      	movs	r1, #1
    11d0:	4604      	mov	r4, r0
    11d2:	2006      	movs	r0, #6
    11d4:	f001 fcc6 	bl	2b64 <pinMode>
    11d8:	2007      	movs	r0, #7
    11da:	2101      	movs	r1, #1
    11dc:	f001 fcc2 	bl	2b64 <pinMode>
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
    11e0:	f104 0018 	add.w	r0, r4, #24
    11e4:	f7ff ffeb 	bl	11be <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>
    11e8:	bd10      	pop	{r4, pc}
    11ea:	ffff 4a2d 	vtbl.8	d20, {d15-d17}, d29

000011ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    11ec:	4a2d      	ldr	r2, [pc, #180]	; (12a4 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh+0xb8>)
    11ee:	4b2e      	ldr	r3, [pc, #184]	; (12a8 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh+0xbc>)
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    11f0:	f010 0f80 	tst.w	r0, #128	; 0x80
    11f4:	f04f 0110 	mov.w	r1, #16
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    11f8:	bf14      	ite	ne
    11fa:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    11fc:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    11fe:	2104      	movs	r1, #4
    1200:	6011      	str	r1, [r2, #0]
    1202:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1204:	6019      	str	r1, [r3, #0]
    1206:	bf00      	nop
    1208:	2110      	movs	r1, #16
    120a:	f010 0f40 	tst.w	r0, #64	; 0x40
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    120e:	bf14      	ite	ne
    1210:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1212:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1214:	2104      	movs	r1, #4
    1216:	6011      	str	r1, [r2, #0]
    1218:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    121a:	6019      	str	r1, [r3, #0]
    121c:	bf00      	nop
    121e:	2110      	movs	r1, #16
    1220:	f010 0f20 	tst.w	r0, #32
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1224:	bf14      	ite	ne
    1226:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1228:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    122a:	2104      	movs	r1, #4
    122c:	6011      	str	r1, [r2, #0]
    122e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1230:	6019      	str	r1, [r3, #0]
    1232:	bf00      	nop
    1234:	2110      	movs	r1, #16
    1236:	f010 0f10 	tst.w	r0, #16
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    123a:	bf14      	ite	ne
    123c:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    123e:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1240:	2104      	movs	r1, #4
    1242:	6011      	str	r1, [r2, #0]
    1244:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1246:	6019      	str	r1, [r3, #0]
    1248:	bf00      	nop
    124a:	2110      	movs	r1, #16
    124c:	f010 0f08 	tst.w	r0, #8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1250:	bf14      	ite	ne
    1252:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1254:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1256:	2104      	movs	r1, #4
    1258:	6011      	str	r1, [r2, #0]
    125a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    125c:	6019      	str	r1, [r3, #0]
    125e:	bf00      	nop
    1260:	2110      	movs	r1, #16
    1262:	f010 0f04 	tst.w	r0, #4
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1266:	bf14      	ite	ne
    1268:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    126a:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    126c:	2104      	movs	r1, #4
    126e:	6011      	str	r1, [r2, #0]
    1270:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1272:	6019      	str	r1, [r3, #0]
    1274:	bf00      	nop
    1276:	2110      	movs	r1, #16
    1278:	f010 0f02 	tst.w	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    127c:	bf14      	ite	ne
    127e:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1280:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1282:	2104      	movs	r1, #4
    1284:	6011      	str	r1, [r2, #0]
    1286:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1288:	6019      	str	r1, [r3, #0]
    128a:	bf00      	nop
    128c:	2110      	movs	r1, #16
    128e:	f010 0f01 	tst.w	r0, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1292:	bf14      	ite	ne
    1294:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1296:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1298:	2104      	movs	r1, #4
    129a:	6011      	str	r1, [r2, #0]
    129c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    129e:	6019      	str	r1, [r3, #0]
    12a0:	bf00      	nop
    12a2:	4770      	bx	lr
    12a4:	400ff0c4 	.word	0x400ff0c4
    12a8:	400ff0c8 	.word	0x400ff0c8

000012ac <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(15)>
class P9813Controller : public CLEDController {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
    12ac:	b508      	push	{r3, lr}
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    12ae:	2000      	movs	r0, #0
    12b0:	f7ff ff9c 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    12b4:	2000      	movs	r0, #0
    12b6:	f7ff ff99 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    12ba:	2000      	movs	r0, #0
    12bc:	f7ff ff96 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    12c0:	2000      	movs	r0, #0
    12c2:	f7ff ff93 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    12c6:	bd08      	pop	{r3, pc}

000012c8 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv>:
            mData += 1;
            mAdvance = 4;
        }
#endif

        void init_binary_dithering() {
    12c8:	b510      	push	{r4, lr}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>64) + \
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS
            // R is the digther signal 'counter'.
            static byte R = 0;
            R++;
    12ca:	4b16      	ldr	r3, [pc, #88]	; (1324 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x5c>)
    12cc:	781a      	ldrb	r2, [r3, #0]
    12ce:	3201      	adds	r2, #1

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    12d0:	f002 0207 	and.w	r2, r2, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
    12d4:	f012 0f01 	tst.w	r2, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    12d8:	701a      	strb	r2, [r3, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
    12da:	bf14      	ite	ne
    12dc:	2380      	movne	r3, #128	; 0x80
    12de:	2300      	moveq	r3, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    12e0:	0791      	lsls	r1, r2, #30
    12e2:	bf44      	itt	mi
    12e4:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
    12e8:	b2db      	uxtbmi	r3, r3
                if(R & 0x04) { Q |= 0x20; }
    12ea:	0752      	lsls	r2, r2, #29
    12ec:	bf48      	it	mi
    12ee:	f043 0320 	orrmi.w	r3, r3, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    12f2:	3310      	adds	r3, #16
    12f4:	b2d9      	uxtb	r1, r3
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    12f6:	2200      	movs	r2, #0
                    byte s = mScale.raw[i];
    12f8:	7b83      	ldrb	r3, [r0, #14]
                    e[i] = s ? (256/s) + 1 : 0;
    12fa:	b12b      	cbz	r3, 1308 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x40>
    12fc:	f44f 7480 	mov.w	r4, #256	; 0x100
    1300:	fb94 f3f3 	sdiv	r3, r4, r3
    1304:	3301      	adds	r3, #1
    1306:	b2db      	uxtb	r3, r3
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1308:	fb11 f403 	smulbb	r4, r1, r3
    130c:	1224      	asrs	r4, r4, #8
    130e:	72c3      	strb	r3, [r0, #11]
    1310:	7204      	strb	r4, [r0, #8]
                    d[i] = scale8(Q, e[i]);
                    if(e[i]) e[i]--;
    1312:	b10b      	cbz	r3, 1318 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x50>
    1314:	3b01      	subs	r3, #1
    1316:	72c3      	strb	r3, [r0, #11]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1318:	3201      	adds	r2, #1
    131a:	2a03      	cmp	r2, #3
    131c:	f100 0001 	add.w	r0, r0, #1
    1320:	d1ea      	bne.n	12f8 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x30>
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
                    if(e[i]) e[i]--;
            }
#endif
        }
    1322:	bd10      	pop	{r4, pc}
    1324:	1fff9056 	.word	0x1fff9056

00001328 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>:
            enable_dithering(dither);
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
    1328:	b510      	push	{r4, lr}
    132a:	e880 0006 	stmia.w	r0, {r1, r2}
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    132e:	781a      	ldrb	r2, [r3, #0]
    1330:	7382      	strb	r2, [r0, #14]
        g = rhs.g;
    1332:	785a      	ldrb	r2, [r3, #1]
        b = rhs.b;
    1334:	789b      	ldrb	r3, [r3, #2]
    1336:	7403      	strb	r3, [r0, #16]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1338:	f89d 3008 	ldrb.w	r3, [sp, #8]

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    133c:	73c2      	strb	r2, [r0, #15]
    133e:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
    1340:	4604      	mov	r4, r0
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1342:	d102      	bne.n	134a <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h+0x22>
                case BINARY_DITHER: init_binary_dithering(); break;
    1344:	f7ff ffc0 	bl	12c8 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv>
    1348:	e006      	b.n	1358 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h+0x30>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    134a:	2300      	movs	r3, #0
    134c:	7343      	strb	r3, [r0, #13]
    134e:	7303      	strb	r3, [r0, #12]
    1350:	72c3      	strb	r3, [r0, #11]
    1352:	7283      	strb	r3, [r0, #10]
    1354:	7243      	strb	r3, [r0, #9]
    1356:	7203      	strb	r3, [r0, #8]
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    1358:	2303      	movs	r3, #3
    135a:	7463      	strb	r3, [r4, #17]
        }
    135c:	4620      	mov	r0, r4
    135e:	bd10      	pop	{r4, pc}

00001360 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_>:

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    1360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1364:	b089      	sub	sp, #36	; 0x24
    1366:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1368:	7c80      	ldrb	r0, [r0, #18]
    136a:	9000      	str	r0, [sp, #0]

		mSPI.select();
    136c:	3518      	adds	r5, #24
		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    136e:	a803      	add	r0, sp, #12

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    1370:	4616      	mov	r6, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1372:	f7ff ffd9 	bl	1328 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>

		mSPI.select();
    1376:	4628      	mov	r0, r5
    1378:	f7ff fdfe 	bl	f78 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv>

		writeBoundary();
    137c:	f7ff fe7a 	bl	1074 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>
		for(int i = 0; i < nLeds; i++) {
    1380:	2400      	movs	r4, #0
    1382:	42b4      	cmp	r4, r6
    1384:	da62      	bge.n	144c <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0xec>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1386:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1388:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    138a:	b122      	cbz	r2, 1396 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x36>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    138c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1390:	fa82 f251 	uqadd8	r2, r2, r1
    1394:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1396:	f89d 101a 	ldrb.w	r1, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    139a:	fb12 f201 	smulbb	r2, r2, r1
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    139e:	7859      	ldrb	r1, [r3, #1]
    13a0:	1212      	asrs	r2, r2, #8
    13a2:	fa5f f882 	uxtb.w	r8, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    13a6:	b121      	cbz	r1, 13b2 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x52>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    13a8:	f89d 0015 	ldrb.w	r0, [sp, #21]
    13ac:	fa81 f150 	uqadd8	r1, r1, r0
    13b0:	b2c9      	uxtb	r1, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    13b2:	f89d 001b 	ldrb.w	r0, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    13b6:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    13b8:	fb11 f100 	smulbb	r1, r1, r0
    13bc:	1209      	asrs	r1, r1, #8
    13be:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    13c2:	b123      	cbz	r3, 13ce <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x6e>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    13c4:	f89d 0016 	ldrb.w	r0, [sp, #22]
    13c8:	fa83 f350 	uqadd8	r3, r3, r0
    13cc:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    13ce:	f89d 701c 	ldrb.w	r7, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    13d2:	43d2      	mvns	r2, r2
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    13d4:	fb13 f307 	smulbb	r3, r3, r7
    13d8:	121f      	asrs	r7, r3, #8
    13da:	f3c2 1281 	ubfx	r2, r2, #6, #2
    13de:	43c9      	mvns	r1, r1
    13e0:	f062 023f 	orn	r2, r2, #63	; 0x3f
    13e4:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    13e8:	43f8      	mvns	r0, r7
    13ea:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
    13ee:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    13f2:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    13f6:	b2c0      	uxtb	r0, r0
    13f8:	f7ff fddc 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    13fc:	4638      	mov	r0, r7
    13fe:	f7ff fdd9 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1402:	4648      	mov	r0, r9
    1404:	f7ff fdd6 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1408:	4640      	mov	r0, r8
    140a:	f7ff fdd3 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    140e:	f89d 201d 	ldrb.w	r2, [sp, #29]
    1412:	9b03      	ldr	r3, [sp, #12]
    1414:	4413      	add	r3, r2
    1416:	9303      	str	r3, [sp, #12]
    1418:	9b04      	ldr	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    141a:	f89d 2017 	ldrb.w	r2, [sp, #23]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    141e:	3b01      	subs	r3, #1
    1420:	9304      	str	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1422:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1426:	1ad3      	subs	r3, r2, r3
    1428:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    142c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1430:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1434:	1ad3      	subs	r3, r2, r3
    1436:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    143a:	f89d 2019 	ldrb.w	r2, [sp, #25]
    143e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1442:	1ad3      	subs	r3, r2, r3
    1444:	f88d 3016 	strb.w	r3, [sp, #22]
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());

		mSPI.select();

		writeBoundary();
		for(int i = 0; i < nLeds; i++) {
    1448:	3401      	adds	r4, #1
    144a:	e79a      	b.n	1382 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x22>
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.advanceData();
			pixels.stepDithering();
		}
		writeBoundary();
    144c:	f7ff fe12 	bl	1074 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>

		mSPI.release();
    1450:	4628      	mov	r0, r5
    1452:	f7ff fd98 	bl	f86 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>
	}
    1456:	b009      	add	sp, #36	; 0x24
    1458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000145c <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_>:

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    145c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1460:	b089      	sub	sp, #36	; 0x24
    1462:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1464:	7c80      	ldrb	r0, [r0, #18]
    1466:	9000      	str	r0, [sp, #0]

		mSPI.select();
    1468:	3518      	adds	r5, #24
		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    146a:	a803      	add	r0, sp, #12

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    146c:	4616      	mov	r6, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    146e:	f7ff ff5b 	bl	1328 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>

		mSPI.select();
    1472:	4628      	mov	r0, r5
    1474:	f7ff fe0c 	bl	1090 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv>

		writeBoundary();
    1478:	f7ff fe8c 	bl	1194 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>
		for(int i = 0; i < nLeds; i++) {
    147c:	2400      	movs	r4, #0
    147e:	42b4      	cmp	r4, r6
    1480:	da62      	bge.n	1548 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0xec>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1482:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1484:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1486:	b122      	cbz	r2, 1492 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x36>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1488:	f89d 1014 	ldrb.w	r1, [sp, #20]
    148c:	fa82 f251 	uqadd8	r2, r2, r1
    1490:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1492:	f89d 101a 	ldrb.w	r1, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1496:	fb12 f201 	smulbb	r2, r2, r1
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    149a:	7859      	ldrb	r1, [r3, #1]
    149c:	1212      	asrs	r2, r2, #8
    149e:	fa5f f882 	uxtb.w	r8, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    14a2:	b121      	cbz	r1, 14ae <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x52>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    14a4:	f89d 0015 	ldrb.w	r0, [sp, #21]
    14a8:	fa81 f150 	uqadd8	r1, r1, r0
    14ac:	b2c9      	uxtb	r1, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    14ae:	f89d 001b 	ldrb.w	r0, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    14b2:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    14b4:	fb11 f100 	smulbb	r1, r1, r0
    14b8:	1209      	asrs	r1, r1, #8
    14ba:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    14be:	b123      	cbz	r3, 14ca <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x6e>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    14c0:	f89d 0016 	ldrb.w	r0, [sp, #22]
    14c4:	fa83 f350 	uqadd8	r3, r3, r0
    14c8:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    14ca:	f89d 701c 	ldrb.w	r7, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    14ce:	43d2      	mvns	r2, r2
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    14d0:	fb13 f307 	smulbb	r3, r3, r7
    14d4:	121f      	asrs	r7, r3, #8
    14d6:	f3c2 1281 	ubfx	r2, r2, #6, #2
    14da:	43c9      	mvns	r1, r1
    14dc:	f062 023f 	orn	r2, r2, #63	; 0x3f
    14e0:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    14e4:	43f8      	mvns	r0, r7
    14e6:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
    14ea:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    14ee:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    14f2:	b2c0      	uxtb	r0, r0
    14f4:	f7ff fdea 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    14f8:	4638      	mov	r0, r7
    14fa:	f7ff fde7 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    14fe:	4648      	mov	r0, r9
    1500:	f7ff fde4 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1504:	4640      	mov	r0, r8
    1506:	f7ff fde1 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    150a:	f89d 201d 	ldrb.w	r2, [sp, #29]
    150e:	9b03      	ldr	r3, [sp, #12]
    1510:	4413      	add	r3, r2
    1512:	9303      	str	r3, [sp, #12]
    1514:	9b04      	ldr	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1516:	f89d 2017 	ldrb.w	r2, [sp, #23]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    151a:	3b01      	subs	r3, #1
    151c:	9304      	str	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    151e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1522:	1ad3      	subs	r3, r2, r3
    1524:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    1528:	f89d 2018 	ldrb.w	r2, [sp, #24]
    152c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1530:	1ad3      	subs	r3, r2, r3
    1532:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    1536:	f89d 2019 	ldrb.w	r2, [sp, #25]
    153a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    153e:	1ad3      	subs	r3, r2, r3
    1540:	f88d 3016 	strb.w	r3, [sp, #22]
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());

		mSPI.select();

		writeBoundary();
		for(int i = 0; i < nLeds; i++) {
    1544:	3401      	adds	r4, #1
    1546:	e79a      	b.n	147e <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x22>
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.advanceData();
			pixels.stepDithering();
		}
		writeBoundary();
    1548:	f7ff fe24 	bl	1194 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>

		mSPI.release();
    154c:	4628      	mov	r0, r5
    154e:	f7ff fda6 	bl	109e <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>
	}
    1552:	b009      	add	sp, #36	; 0x24
    1554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001558 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_>:

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    1558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    155c:	b089      	sub	sp, #36	; 0x24
    155e:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1560:	7c80      	ldrb	r0, [r0, #18]
    1562:	9000      	str	r0, [sp, #0]

		mSPI.select();
    1564:	3518      	adds	r5, #24
		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1566:	a803      	add	r0, sp, #12

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    1568:	4616      	mov	r6, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    156a:	f7ff fedd 	bl	1328 <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>

		mSPI.select();
    156e:	4628      	mov	r0, r5
    1570:	f7ff fe1e 	bl	11b0 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv>

		writeBoundary();
    1574:	f7ff fe9a 	bl	12ac <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>
		for(int i = 0; i < nLeds; i++) {
    1578:	2400      	movs	r4, #0
    157a:	42b4      	cmp	r4, r6
    157c:	da62      	bge.n	1644 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0xec>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    157e:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1580:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1582:	b122      	cbz	r2, 158e <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x36>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1584:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1588:	fa82 f251 	uqadd8	r2, r2, r1
    158c:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    158e:	f89d 101a 	ldrb.w	r1, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1592:	fb12 f201 	smulbb	r2, r2, r1
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1596:	7859      	ldrb	r1, [r3, #1]
    1598:	1212      	asrs	r2, r2, #8
    159a:	fa5f f882 	uxtb.w	r8, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    159e:	b121      	cbz	r1, 15aa <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x52>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    15a0:	f89d 0015 	ldrb.w	r0, [sp, #21]
    15a4:	fa81 f150 	uqadd8	r1, r1, r0
    15a8:	b2c9      	uxtb	r1, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    15aa:	f89d 001b 	ldrb.w	r0, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    15ae:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    15b0:	fb11 f100 	smulbb	r1, r1, r0
    15b4:	1209      	asrs	r1, r1, #8
    15b6:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    15ba:	b123      	cbz	r3, 15c6 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x6e>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    15bc:	f89d 0016 	ldrb.w	r0, [sp, #22]
    15c0:	fa83 f350 	uqadd8	r3, r3, r0
    15c4:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    15c6:	f89d 701c 	ldrb.w	r7, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    15ca:	43d2      	mvns	r2, r2
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    15cc:	fb13 f307 	smulbb	r3, r3, r7
    15d0:	121f      	asrs	r7, r3, #8
    15d2:	f3c2 1281 	ubfx	r2, r2, #6, #2
    15d6:	43c9      	mvns	r1, r1
    15d8:	f062 023f 	orn	r2, r2, #63	; 0x3f
    15dc:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    15e0:	43f8      	mvns	r0, r7
    15e2:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
    15e6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    15ea:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    15ee:	b2c0      	uxtb	r0, r0
    15f0:	f7ff fdfc 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    15f4:	4638      	mov	r0, r7
    15f6:	f7ff fdf9 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    15fa:	4648      	mov	r0, r9
    15fc:	f7ff fdf6 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1600:	4640      	mov	r0, r8
    1602:	f7ff fdf3 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    1606:	f89d 201d 	ldrb.w	r2, [sp, #29]
    160a:	9b03      	ldr	r3, [sp, #12]
    160c:	4413      	add	r3, r2
    160e:	9303      	str	r3, [sp, #12]
    1610:	9b04      	ldr	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1612:	f89d 2017 	ldrb.w	r2, [sp, #23]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    1616:	3b01      	subs	r3, #1
    1618:	9304      	str	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    161a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    161e:	1ad3      	subs	r3, r2, r3
    1620:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    1624:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1628:	f89d 3015 	ldrb.w	r3, [sp, #21]
    162c:	1ad3      	subs	r3, r2, r3
    162e:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    1632:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1636:	f89d 3016 	ldrb.w	r3, [sp, #22]
    163a:	1ad3      	subs	r3, r2, r3
    163c:	f88d 3016 	strb.w	r3, [sp, #22]
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());

		mSPI.select();

		writeBoundary();
		for(int i = 0; i < nLeds; i++) {
    1640:	3401      	adds	r4, #1
    1642:	e79a      	b.n	157a <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x22>
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.advanceData();
			pixels.stepDithering();
		}
		writeBoundary();
    1644:	f7ff fe32 	bl	12ac <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>

		mSPI.release();
    1648:	4628      	mov	r0, r5
    164a:	f7ff fdb8 	bl	11be <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>
	}
    164e:	b009      	add	sp, #36	; 0x24
    1650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001654 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>:
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
    1654:	b510      	push	{r4, lr}
    1656:	e880 0006 	stmia.w	r0, {r1, r2}
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    165a:	781a      	ldrb	r2, [r3, #0]
    165c:	7382      	strb	r2, [r0, #14]
        g = rhs.g;
    165e:	785a      	ldrb	r2, [r3, #1]
        b = rhs.b;
    1660:	789b      	ldrb	r3, [r3, #2]
    1662:	7403      	strb	r3, [r0, #16]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1664:	f89d 3008 	ldrb.w	r3, [sp, #8]

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1668:	73c2      	strb	r2, [r0, #15]
    166a:	2b01      	cmp	r3, #1
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
    166c:	4604      	mov	r4, r0
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    166e:	d102      	bne.n	1676 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h+0x22>
                case BINARY_DITHER: init_binary_dithering(); break;
    1670:	f7ff fe2a 	bl	12c8 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv>
    1674:	e006      	b.n	1684 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h+0x30>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    1676:	2300      	movs	r3, #0
    1678:	7343      	strb	r3, [r0, #13]
    167a:	7303      	strb	r3, [r0, #12]
    167c:	72c3      	strb	r3, [r0, #11]
    167e:	7283      	strb	r3, [r0, #10]
    1680:	7243      	strb	r3, [r0, #9]
    1682:	7203      	strb	r3, [r0, #8]
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1684:	2300      	movs	r3, #0
    1686:	7463      	strb	r3, [r4, #17]
        }
    1688:	4620      	mov	r0, r4
    168a:	bd10      	pop	{r4, pc}

0000168c <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_>:

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    168c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1690:	b089      	sub	sp, #36	; 0x24
    1692:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1694:	7c80      	ldrb	r0, [r0, #18]
    1696:	9000      	str	r0, [sp, #0]

		mSPI.select();
    1698:	3518      	adds	r5, #24
	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    169a:	a803      	add	r0, sp, #12

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    169c:	4614      	mov	r4, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    169e:	f7ff ffd9 	bl	1654 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>

		mSPI.select();
    16a2:	4628      	mov	r0, r5
    16a4:	f7ff fc68 	bl	f78 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv>

		writeBoundary();
    16a8:	f7ff fce4 	bl	1074 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>
		while(nLeds--) {
    16ac:	2c00      	cmp	r4, #0
    16ae:	d05a      	beq.n	1766 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0xda>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    16b0:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    16b2:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    16b4:	b122      	cbz	r2, 16c0 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x34>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    16b6:	f89d 1014 	ldrb.w	r1, [sp, #20]
    16ba:	fa82 f251 	uqadd8	r2, r2, r1
    16be:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    16c0:	f89d 701a 	ldrb.w	r7, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    16c4:	fb12 f207 	smulbb	r2, r2, r7
    16c8:	1217      	asrs	r7, r2, #8
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    16ca:	785a      	ldrb	r2, [r3, #1]
    16cc:	fa5f f887 	uxtb.w	r8, r7
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    16d0:	b122      	cbz	r2, 16dc <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x50>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    16d2:	f89d 1015 	ldrb.w	r1, [sp, #21]
    16d6:	fa82 f251 	uqadd8	r2, r2, r1
    16da:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    16dc:	f89d 101b 	ldrb.w	r1, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    16e0:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    16e2:	fb12 f201 	smulbb	r2, r2, r1
    16e6:	1211      	asrs	r1, r2, #8
    16e8:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    16ec:	b123      	cbz	r3, 16f8 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x6c>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    16ee:	f89d 2016 	ldrb.w	r2, [sp, #22]
    16f2:	fa83 f352 	uqadd8	r3, r3, r2
    16f6:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    16f8:	f89d 601c 	ldrb.w	r6, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    16fc:	43ff      	mvns	r7, r7
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    16fe:	fb13 f306 	smulbb	r3, r3, r6
    1702:	121e      	asrs	r6, r3, #8
    1704:	f3c7 1781 	ubfx	r7, r7, #6, #2
    1708:	43c9      	mvns	r1, r1
    170a:	f067 073f 	orn	r7, r7, #63	; 0x3f
    170e:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    1712:	43f0      	mvns	r0, r6
    1714:	ea47 1111 	orr.w	r1, r7, r1, lsr #4
    1718:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    171c:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    1720:	b2c0      	uxtb	r0, r0
    1722:	f7ff fc47 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1726:	4630      	mov	r0, r6
    1728:	f7ff fc44 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    172c:	4648      	mov	r0, r9
    172e:	f7ff fc41 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1732:	4640      	mov	r0, r8
    1734:	f7ff fc3e 	bl	fb4 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1738:	f89d 2017 	ldrb.w	r2, [sp, #23]
    173c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1740:	1ad3      	subs	r3, r2, r3
    1742:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    1746:	f89d 2018 	ldrb.w	r2, [sp, #24]
    174a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    174e:	1ad3      	subs	r3, r2, r3
    1750:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    1754:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1758:	f89d 3016 	ldrb.w	r3, [sp, #22]
    175c:	1ad3      	subs	r3, r2, r3
    175e:	f88d 3016 	strb.w	r3, [sp, #22]
    1762:	3c01      	subs	r4, #1
    1764:	e7a2      	b.n	16ac <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x20>
		writeBoundary();
		while(nLeds--) {
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.stepDithering();
		}
		writeBoundary();
    1766:	f7ff fc85 	bl	1074 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.27>

		mSPI.waitFully();
		mSPI.release();
    176a:	4628      	mov	r0, r5
    176c:	f7ff fc0b 	bl	f86 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>
	}
    1770:	b009      	add	sp, #36	; 0x24
    1772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001776 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_>:

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    177a:	b089      	sub	sp, #36	; 0x24
    177c:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    177e:	7c80      	ldrb	r0, [r0, #18]
    1780:	9000      	str	r0, [sp, #0]

		mSPI.select();
    1782:	3518      	adds	r5, #24
	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1784:	a803      	add	r0, sp, #12

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1786:	4614      	mov	r4, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1788:	f7ff ff64 	bl	1654 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>

		mSPI.select();
    178c:	4628      	mov	r0, r5
    178e:	f7ff fc7f 	bl	1090 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv>

		writeBoundary();
    1792:	f7ff fcff 	bl	1194 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>
		while(nLeds--) {
    1796:	2c00      	cmp	r4, #0
    1798:	d05a      	beq.n	1850 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0xda>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    179a:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    179c:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    179e:	b122      	cbz	r2, 17aa <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x34>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    17a0:	f89d 1014 	ldrb.w	r1, [sp, #20]
    17a4:	fa82 f251 	uqadd8	r2, r2, r1
    17a8:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    17aa:	f89d 701a 	ldrb.w	r7, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    17ae:	fb12 f207 	smulbb	r2, r2, r7
    17b2:	1217      	asrs	r7, r2, #8
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    17b4:	785a      	ldrb	r2, [r3, #1]
    17b6:	fa5f f887 	uxtb.w	r8, r7
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    17ba:	b122      	cbz	r2, 17c6 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x50>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    17bc:	f89d 1015 	ldrb.w	r1, [sp, #21]
    17c0:	fa82 f251 	uqadd8	r2, r2, r1
    17c4:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    17c6:	f89d 101b 	ldrb.w	r1, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    17ca:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    17cc:	fb12 f201 	smulbb	r2, r2, r1
    17d0:	1211      	asrs	r1, r2, #8
    17d2:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    17d6:	b123      	cbz	r3, 17e2 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x6c>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    17d8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    17dc:	fa83 f352 	uqadd8	r3, r3, r2
    17e0:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    17e2:	f89d 601c 	ldrb.w	r6, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    17e6:	43ff      	mvns	r7, r7
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    17e8:	fb13 f306 	smulbb	r3, r3, r6
    17ec:	121e      	asrs	r6, r3, #8
    17ee:	f3c7 1781 	ubfx	r7, r7, #6, #2
    17f2:	43c9      	mvns	r1, r1
    17f4:	f067 073f 	orn	r7, r7, #63	; 0x3f
    17f8:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    17fc:	43f0      	mvns	r0, r6
    17fe:	ea47 1111 	orr.w	r1, r7, r1, lsr #4
    1802:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    1806:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    180a:	b2c0      	uxtb	r0, r0
    180c:	f7ff fc5e 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1810:	4630      	mov	r0, r6
    1812:	f7ff fc5b 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1816:	4648      	mov	r0, r9
    1818:	f7ff fc58 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    181c:	4640      	mov	r0, r8
    181e:	f7ff fc55 	bl	10cc <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1822:	f89d 2017 	ldrb.w	r2, [sp, #23]
    1826:	f89d 3014 	ldrb.w	r3, [sp, #20]
    182a:	1ad3      	subs	r3, r2, r3
    182c:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    1830:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1834:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1838:	1ad3      	subs	r3, r2, r3
    183a:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    183e:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1842:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1846:	1ad3      	subs	r3, r2, r3
    1848:	f88d 3016 	strb.w	r3, [sp, #22]
    184c:	3c01      	subs	r4, #1
    184e:	e7a2      	b.n	1796 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x20>
		writeBoundary();
		while(nLeds--) {
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.stepDithering();
		}
		writeBoundary();
    1850:	f7ff fca0 	bl	1194 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.30>

		mSPI.waitFully();
		mSPI.release();
    1854:	4628      	mov	r0, r5
    1856:	f7ff fc22 	bl	109e <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>
	}
    185a:	b009      	add	sp, #36	; 0x24
    185c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001860 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_>:

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1864:	b089      	sub	sp, #36	; 0x24
    1866:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1868:	7c80      	ldrb	r0, [r0, #18]
    186a:	9000      	str	r0, [sp, #0]

		mSPI.select();
    186c:	3518      	adds	r5, #24
	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    186e:	a803      	add	r0, sp, #12

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1870:	4614      	mov	r4, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1872:	f7ff feef 	bl	1654 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>

		mSPI.select();
    1876:	4628      	mov	r0, r5
    1878:	f7ff fc9a 	bl	11b0 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv>

		writeBoundary();
    187c:	f7ff fd16 	bl	12ac <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>
		while(nLeds--) {
    1880:	2c00      	cmp	r4, #0
    1882:	d05a      	beq.n	193a <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0xda>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1884:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1886:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1888:	b122      	cbz	r2, 1894 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x34>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    188a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    188e:	fa82 f251 	uqadd8	r2, r2, r1
    1892:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1894:	f89d 701a 	ldrb.w	r7, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1898:	fb12 f207 	smulbb	r2, r2, r7
    189c:	1217      	asrs	r7, r2, #8
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    189e:	785a      	ldrb	r2, [r3, #1]
    18a0:	fa5f f887 	uxtb.w	r8, r7
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    18a4:	b122      	cbz	r2, 18b0 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x50>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    18a6:	f89d 1015 	ldrb.w	r1, [sp, #21]
    18aa:	fa82 f251 	uqadd8	r2, r2, r1
    18ae:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    18b0:	f89d 101b 	ldrb.w	r1, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    18b4:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    18b6:	fb12 f201 	smulbb	r2, r2, r1
    18ba:	1211      	asrs	r1, r2, #8
    18bc:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    18c0:	b123      	cbz	r3, 18cc <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x6c>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    18c2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    18c6:	fa83 f352 	uqadd8	r3, r3, r2
    18ca:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    18cc:	f89d 601c 	ldrb.w	r6, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    18d0:	43ff      	mvns	r7, r7
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    18d2:	fb13 f306 	smulbb	r3, r3, r6
    18d6:	121e      	asrs	r6, r3, #8
    18d8:	f3c7 1781 	ubfx	r7, r7, #6, #2
    18dc:	43c9      	mvns	r1, r1
    18de:	f067 073f 	orn	r7, r7, #63	; 0x3f
    18e2:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    18e6:	43f0      	mvns	r0, r6
    18e8:	ea47 1111 	orr.w	r1, r7, r1, lsr #4
    18ec:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    18f0:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    18f4:	b2c0      	uxtb	r0, r0
    18f6:	f7ff fc79 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    18fa:	4630      	mov	r0, r6
    18fc:	f7ff fc76 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1900:	4648      	mov	r0, r9
    1902:	f7ff fc73 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1906:	4640      	mov	r0, r8
    1908:	f7ff fc70 	bl	11ec <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    190c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    1910:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1914:	1ad3      	subs	r3, r2, r3
    1916:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    191a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    191e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1922:	1ad3      	subs	r3, r2, r3
    1924:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    1928:	f89d 2019 	ldrb.w	r2, [sp, #25]
    192c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1930:	1ad3      	subs	r3, r2, r3
    1932:	f88d 3016 	strb.w	r3, [sp, #22]
    1936:	3c01      	subs	r4, #1
    1938:	e7a2      	b.n	1880 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x20>
		writeBoundary();
		while(nLeds--) {
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.stepDithering();
		}
		writeBoundary();
    193a:	f7ff fcb7 	bl	12ac <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.32>

		mSPI.waitFully();
		mSPI.release();
    193e:	4628      	mov	r0, r5
    1940:	f7ff fc3d 	bl	11be <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>
	}
    1944:	b009      	add	sp, #36	; 0x24
    1946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    194a:	ffff 4b04 	vtbl.8	d20, {d15-d18}, d4

0000194c <_GLOBAL__sub_I_modeChange>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    194c:	4b04      	ldr	r3, [pc, #16]	; (1960 <_GLOBAL__sub_I_modeChange+0x14>)
        leds[i] = 0;
	led_show();

    goto begin;
}
    194e:	b082      	sub	sp, #8
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	9301      	str	r3, [sp, #4]
	return ret;
    1954:	9a01      	ldr	r2, [sp, #4]
#define RANDOM_PIN 3

#define EEPROM_ADDRESS 0

bool modeChange = false;
unsigned long lastActionTime = millis();
    1956:	4b03      	ldr	r3, [pc, #12]	; (1964 <_GLOBAL__sub_I_modeChange+0x18>)
    1958:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < nLEDS; i++)
        leds[i] = 0;
	led_show();

    goto begin;
}
    195a:	b002      	add	sp, #8
    195c:	4770      	bx	lr
    195e:	bf00      	nop
    1960:	1fff91a8 	.word	0x1fff91a8
    1964:	1fff90bc 	.word	0x1fff90bc

00001968 <_ZN8BaseModeD1Ev>:
#include "BaseMode.h"

BaseMode::BaseMode() {
}

BaseMode::~BaseMode() {
    1968:	4b01      	ldr	r3, [pc, #4]	; (1970 <_ZN8BaseModeD1Ev+0x8>)
    196a:	6003      	str	r3, [r0, #0]
}
    196c:	4770      	bx	lr
    196e:	bf00      	nop
    1970:	00012bc8 	.word	0x00012bc8

00001974 <_ZN8BaseModeD0Ev>:
#include "BaseMode.h"

BaseMode::BaseMode() {
}

BaseMode::~BaseMode() {
    1974:	b510      	push	{r4, lr}
    1976:	4b03      	ldr	r3, [pc, #12]	; (1984 <_ZN8BaseModeD0Ev+0x10>)
    1978:	6003      	str	r3, [r0, #0]
    197a:	4604      	mov	r4, r0
}
    197c:	f002 fd76 	bl	446c <_ZdlPv>
    1980:	4620      	mov	r0, r4
    1982:	bd10      	pop	{r4, pc}
    1984:	00012bc8 	.word	0x00012bc8

00001988 <_ZN8BaseModeC1Ev>:
#include "BaseMode.h"

BaseMode::BaseMode() {
    1988:	4b01      	ldr	r3, [pc, #4]	; (1990 <_ZN8BaseModeC1Ev+0x8>)
    198a:	6003      	str	r3, [r0, #0]
}
    198c:	4770      	bx	lr
    198e:	bf00      	nop
    1990:	00012bc8 	.word	0x00012bc8

00001994 <_ZN9ColorMode4nameEv>:
    ColorMode(const char *name, CHSV color, long delay);
    virtual ~ColorMode();

public:
    virtual void frame();
    virtual const char* name() { return _name; }
    1994:	6840      	ldr	r0, [r0, #4]
    1996:	4770      	bx	lr

00001998 <_ZN9ColorModeD1Ev>:
    _color = color;
    _lastChange = millis();
    _delay = delay;
}

ColorMode::~ColorMode() {
    1998:	b510      	push	{r4, lr}
    199a:	4b03      	ldr	r3, [pc, #12]	; (19a8 <_ZN9ColorModeD1Ev+0x10>)
    199c:	6003      	str	r3, [r0, #0]
    199e:	4604      	mov	r4, r0
}
    19a0:	f7ff ffe2 	bl	1968 <_ZN8BaseModeD1Ev>
    19a4:	4620      	mov	r0, r4
    19a6:	bd10      	pop	{r4, pc}
    19a8:	00012be0 	.word	0x00012be0

000019ac <_ZN9ColorModeD0Ev>:
    _color = color;
    _lastChange = millis();
    _delay = delay;
}

ColorMode::~ColorMode() {
    19ac:	b510      	push	{r4, lr}
    19ae:	4604      	mov	r4, r0
}
    19b0:	f7ff fff2 	bl	1998 <_ZN9ColorModeD1Ev>
    19b4:	4620      	mov	r0, r4
    19b6:	f002 fd59 	bl	446c <_ZdlPv>
    19ba:	4620      	mov	r0, r4
    19bc:	bd10      	pop	{r4, pc}
    19be:	ffff b573 	vsli.32	<illegal reg q13.5>, <illegal reg q9.5>, #31

000019c0 <_ZN9ColorMode5frameEv>:

void ColorMode::frame() {
    19c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    19c2:	4b24      	ldr	r3, [pc, #144]	; (1a54 <_ZN9ColorMode5frameEv+0x94>)
    unsigned long currentTime = millis();
    if (currentTime <= _lastChange + _delay)
    19c4:	6901      	ldr	r1, [r0, #16]
    19c6:	681b      	ldr	r3, [r3, #0]
    19c8:	9301      	str	r3, [sp, #4]
    19ca:	68c2      	ldr	r2, [r0, #12]
	return ret;
    19cc:	9b01      	ldr	r3, [sp, #4]
    19ce:	440a      	add	r2, r1
    19d0:	4293      	cmp	r3, r2
}

ColorMode::~ColorMode() {
}

void ColorMode::frame() {
    19d2:	4604      	mov	r4, r0
    unsigned long currentTime = millis();
    if (currentTime <= _lastChange + _delay)
    19d4:	d93c      	bls.n	1a50 <_ZN9ColorMode5frameEv+0x90>
        return;

    _lastChange = currentTime;
    19d6:	60c3      	str	r3, [r0, #12]
    19d8:	2500      	movs	r5, #0
extern uint16_t rand16seed;// = RAND16_SEED;


LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * RAND16_2053) + RAND16_13849;
    19da:	4a1f      	ldr	r2, [pc, #124]	; (1a58 <_ZN9ColorMode5frameEv+0x98>)
    19dc:	8813      	ldrh	r3, [r2, #0]
    19de:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    19e2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    19e6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    19ea:	3319      	adds	r3, #25
    19ec:	b29b      	uxth	r3, r3

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS; i++) {
	    dice = random8();
    19ee:	b2d9      	uxtb	r1, r3

	    if ((dice <= 10) && (_delay > 0))
    19f0:	290a      	cmp	r1, #10
    19f2:	8013      	strh	r3, [r2, #0]
    19f4:	dc19      	bgt.n	1a2a <_ZN9ColorMode5frameEv+0x6a>
    19f6:	6921      	ldr	r1, [r4, #16]
    19f8:	2900      	cmp	r1, #0
    19fa:	dd16      	ble.n	1a2a <_ZN9ColorMode5frameEv+0x6a>
    19fc:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    1a00:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    1a04:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1a08:	3319      	adds	r3, #25
    1a0a:	b29b      	uxth	r3, r3
    1a0c:	8013      	strh	r3, [r2, #0]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1a0e:	b2db      	uxtb	r3, r3
    1a10:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    1a14:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
            tmp = CHSV(_color.hue, _color.sat, random8(200, 255));
    1a18:	7a20      	ldrb	r0, [r4, #8]
    1a1a:	7a61      	ldrb	r1, [r4, #9]
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1a1c:	f88d 0000 	strb.w	r0, [sp]
    1a20:	121b      	asrs	r3, r3, #8
        s = rhs.s;
    1a22:	f88d 1001 	strb.w	r1, [sp, #1]
}

LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1a26:	3b38      	subs	r3, #56	; 0x38
    1a28:	e006      	b.n	1a38 <_ZN9ColorMode5frameEv+0x78>
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1a2a:	7a23      	ldrb	r3, [r4, #8]
    1a2c:	f88d 3000 	strb.w	r3, [sp]
        s = rhs.s;
    1a30:	7a63      	ldrb	r3, [r4, #9]
    1a32:	f88d 3001 	strb.w	r3, [sp, #1]
        v = rhs.v;
    1a36:	7aa3      	ldrb	r3, [r4, #10]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1a38:	4908      	ldr	r1, [pc, #32]	; (1a5c <_ZN9ColorMode5frameEv+0x9c>)

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
        s = rhs.s;
        v = rhs.v;
    1a3a:	f88d 3002 	strb.w	r3, [sp, #2]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1a3e:	4429      	add	r1, r5
    1a40:	4668      	mov	r0, sp
    1a42:	f7fe fd78 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    1a46:	3503      	adds	r5, #3

    _lastChange = currentTime;

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS; i++) {
    1a48:	f240 23ee 	movw	r3, #750	; 0x2ee
    1a4c:	429d      	cmp	r5, r3
    1a4e:	d1c4      	bne.n	19da <_ZN9ColorMode5frameEv+0x1a>
            tmp = CHSV(_color.hue, _color.sat, random8(200, 255));
	    else
	        tmp = _color;
	    leds[i] = tmp;
	}
}
    1a50:	b002      	add	sp, #8
    1a52:	bd70      	pop	{r4, r5, r6, pc}
    1a54:	1fff91a8 	.word	0x1fff91a8
    1a58:	1fff8404 	.word	0x1fff8404
    1a5c:	1fff8d68 	.word	0x1fff8d68

00001a60 <_ZN9ColorModeC1EPKc4CHSVl>:
#include "ColorMode.h"

ColorMode::ColorMode(const char *name, CHSV color, long delay) {
    1a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a62:	4604      	mov	r4, r0
    1a64:	4615      	mov	r5, r2
    1a66:	461f      	mov	r7, r3
    1a68:	460e      	mov	r6, r1
    1a6a:	f7ff ff8d 	bl	1988 <_ZN8BaseModeC1Ev>
    1a6e:	4b09      	ldr	r3, [pc, #36]	; (1a94 <_ZN9ColorModeC1EPKc4CHSVl+0x34>)
    _name = name;
    1a70:	e884 0048 	stmia.w	r4, {r3, r6}
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1a74:	782b      	ldrb	r3, [r5, #0]
    1a76:	7223      	strb	r3, [r4, #8]
        s = rhs.s;
    1a78:	786b      	ldrb	r3, [r5, #1]
    1a7a:	7263      	strb	r3, [r4, #9]
        v = rhs.v;
    1a7c:	78ab      	ldrb	r3, [r5, #2]
    1a7e:	72a3      	strb	r3, [r4, #10]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    1a80:	4b05      	ldr	r3, [pc, #20]	; (1a98 <_ZN9ColorModeC1EPKc4CHSVl+0x38>)
    _color = color;
    _lastChange = millis();
    _delay = delay;
    1a82:	6127      	str	r7, [r4, #16]
    1a84:	681b      	ldr	r3, [r3, #0]
    1a86:	9301      	str	r3, [sp, #4]
	return ret;
    1a88:	9a01      	ldr	r2, [sp, #4]
#include "ColorMode.h"

ColorMode::ColorMode(const char *name, CHSV color, long delay) {
    _name = name;
    _color = color;
    _lastChange = millis();
    1a8a:	60e2      	str	r2, [r4, #12]
    _delay = delay;
}
    1a8c:	4620      	mov	r0, r4
    1a8e:	b003      	add	sp, #12
    1a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a92:	bf00      	nop
    1a94:	00012be0 	.word	0x00012be0
    1a98:	1fff91a8 	.word	0x1fff91a8

00001a9c <_ZL8random16v>:
    return rand16seed;
}

LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * RAND16_2053) + RAND16_13849;
    1a9c:	4a05      	ldr	r2, [pc, #20]	; (1ab4 <_ZL8random16v+0x18>)
    1a9e:	8813      	ldrh	r3, [r2, #0]
    1aa0:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    1aa4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1aa8:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1aac:	3019      	adds	r0, #25
    1aae:	b280      	uxth	r0, r0
    1ab0:	8010      	strh	r0, [r2, #0]
    return rand16seed;
}
    1ab2:	4770      	bx	lr
    1ab4:	1fff8404 	.word	0x1fff8404

00001ab8 <_ZN8MeltMode4nameEv>:
    MeltMode();
    virtual ~MeltMode();

public:
    virtual void frame();
    virtual const char* name() { return "melt"; }
    1ab8:	4800      	ldr	r0, [pc, #0]	; (1abc <_ZN8MeltMode4nameEv+0x4>)
    1aba:	4770      	bx	lr
    1abc:	00012bf0 	.word	0x00012bf0

00001ac0 <_ZN8MeltModeD1Ev>:
    threeValueTracker = random16();

    perlins = new Perlins();
}

MeltMode::~MeltMode() {
    1ac0:	4b06      	ldr	r3, [pc, #24]	; (1adc <_ZN8MeltModeD1Ev+0x1c>)
    1ac2:	b510      	push	{r4, lr}
    1ac4:	4604      	mov	r4, r0
    1ac6:	6003      	str	r3, [r0, #0]
    delete perlins;
    1ac8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1aca:	b110      	cbz	r0, 1ad2 <_ZN8MeltModeD1Ev+0x12>
    1acc:	6803      	ldr	r3, [r0, #0]
    1ace:	685b      	ldr	r3, [r3, #4]
    1ad0:	4798      	blx	r3
}
    1ad2:	4620      	mov	r0, r4
    1ad4:	f7ff ff48 	bl	1968 <_ZN8BaseModeD1Ev>
    1ad8:	4620      	mov	r0, r4
    1ada:	bd10      	pop	{r4, pc}
    1adc:	00012c00 	.word	0x00012c00

00001ae0 <_ZN8MeltModeD0Ev>:
    threeValueTracker = random16();

    perlins = new Perlins();
}

MeltMode::~MeltMode() {
    1ae0:	b510      	push	{r4, lr}
    1ae2:	4604      	mov	r4, r0
    delete perlins;
}
    1ae4:	f7ff ffec 	bl	1ac0 <_ZN8MeltModeD1Ev>
    1ae8:	4620      	mov	r0, r4
    1aea:	f002 fcbf 	bl	446c <_ZdlPv>
    1aee:	4620      	mov	r0, r4
    1af0:	bd10      	pop	{r4, pc}
    1af2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    1af6:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00001af8 <_ZN8MeltMode5frameEv>:

void MeltMode::frame() {
    1af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    1afc:	a3a6      	add	r3, pc, #664	; (adr r3, 1d98 <_ZN8MeltMode5frameEv+0x2a0>)
    1afe:	e9d3 2300 	ldrd	r2, r3, [r3]

MeltMode::~MeltMode() {
    delete perlins;
}

void MeltMode::frame() {
    1b02:	4682      	mov	sl, r0
    1b04:	b08b      	sub	sp, #44	; 0x2c
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    1b06:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    1b0a:	f00a fa55 	bl	bfb8 <__adddf3>
    valueTracker += 0.001;
    1b0e:	a3a2      	add	r3, pc, #648	; (adr r3, 1d98 <_ZN8MeltMode5frameEv+0x2a0>)
    1b10:	e9d3 2300 	ldrd	r2, r3, [r3]
}

void MeltMode::frame() {
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    1b14:	e9ca 0102 	strd	r0, r1, [sl, #8]
    valueTracker += 0.001;
    1b18:	e9da 0104 	ldrd	r0, r1, [sl, #16]
    1b1c:	f00a fa4c 	bl	bfb8 <__adddf3>
    1b20:	e9ca 0104 	strd	r0, r1, [sl, #16]
    for (j = 0; j < nLEDS_ONE; j++)
    1b24:	f04f 0b00 	mov.w	fp, #0
    {
        valueTracker += 0.0001;
    1b28:	e9da 0104 	ldrd	r0, r1, [sl, #16]
    1b2c:	a39c      	add	r3, pc, #624	; (adr r3, 1da0 <_ZN8MeltMode5frameEv+0x2a8>)
    1b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b32:	f00a fa41 	bl	bfb8 <__adddf3>
    1b36:	4604      	mov	r4, r0
    1b38:	460d      	mov	r5, r1
        hueTracker += 0.00001;
    1b3a:	a39b      	add	r3, pc, #620	; (adr r3, 1da8 <_ZN8MeltMode5frameEv+0x2b0>)
    1b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    int j = 0;
    hueTracker += 0.001;
    valueTracker += 0.001;
    for (j = 0; j < nLEDS_ONE; j++)
    {
        valueTracker += 0.0001;
    1b40:	e9ca 4504 	strd	r4, r5, [sl, #16]
        hueTracker += 0.00001;
    1b44:	e9da 0102 	ldrd	r0, r1, [sl, #8]
    1b48:	f00a fa36 	bl	bfb8 <__adddf3>
    1b4c:	e9ca 0102 	strd	r0, r1, [sl, #8]

        value = perlins->pnoise(valueTracker + sin((j + valueTracker) / 2) , cos(valueTracker), valueTracker);
    1b50:	4658      	mov	r0, fp
    1b52:	f00a fb7d 	bl	c250 <__aeabi_i2d>
    1b56:	4622      	mov	r2, r4
    1b58:	462b      	mov	r3, r5
    1b5a:	4606      	mov	r6, r0
    1b5c:	460f      	mov	r7, r1
    1b5e:	f00a fa2b 	bl	bfb8 <__adddf3>
    1b62:	2200      	movs	r2, #0
    1b64:	4b98      	ldr	r3, [pc, #608]	; (1dc8 <_ZN8MeltMode5frameEv+0x2d0>)
    1b66:	f00a fbd9 	bl	c31c <__aeabi_dmul>
    1b6a:	f009 f939 	bl	ade0 <sin>
    1b6e:	4680      	mov	r8, r0
    1b70:	4689      	mov	r9, r1
    1b72:	4620      	mov	r0, r4
    1b74:	4629      	mov	r1, r5
    1b76:	f009 f869 	bl	ac4c <cos>
    1b7a:	4642      	mov	r2, r8
    1b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1b80:	464b      	mov	r3, r9
    1b82:	4620      	mov	r0, r4
    1b84:	4629      	mov	r1, r5
    1b86:	f00a fa17 	bl	bfb8 <__adddf3>
    1b8a:	4602      	mov	r2, r0
    1b8c:	460b      	mov	r3, r1
    1b8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b92:	e9cd 4502 	strd	r4, r5, [sp, #8]
    1b96:	e9cd 0100 	strd	r0, r1, [sp]
    1b9a:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    1b9e:	f7fe fdef 	bl	780 <_ZN7Perlins6pnoiseEddd>
        hue = perlins->pnoise(cos(hueTracker / 2.0) + sin((j + hueTracker) / 10.0) , cos(hueTracker / 5.0), hueTracker);
    1ba2:	e9da 8902 	ldrd	r8, r9, [sl, #8]
    for (j = 0; j < nLEDS_ONE; j++)
    {
        valueTracker += 0.0001;
        hueTracker += 0.00001;

        value = perlins->pnoise(valueTracker + sin((j + valueTracker) / 2) , cos(valueTracker), valueTracker);
    1ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
        hue = perlins->pnoise(cos(hueTracker / 2.0) + sin((j + hueTracker) / 10.0) , cos(hueTracker / 5.0), hueTracker);
    1baa:	2200      	movs	r2, #0
    1bac:	4b86      	ldr	r3, [pc, #536]	; (1dc8 <_ZN8MeltMode5frameEv+0x2d0>)
    1bae:	4640      	mov	r0, r8
    1bb0:	4649      	mov	r1, r9
    1bb2:	f00a fbb3 	bl	c31c <__aeabi_dmul>
    1bb6:	f009 f849 	bl	ac4c <cos>
    1bba:	4642      	mov	r2, r8
    1bbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1bc0:	464b      	mov	r3, r9
    1bc2:	4630      	mov	r0, r6
    1bc4:	4639      	mov	r1, r7
    1bc6:	f00a f9f7 	bl	bfb8 <__adddf3>
    1bca:	2200      	movs	r2, #0
    1bcc:	4b7f      	ldr	r3, [pc, #508]	; (1dcc <_ZN8MeltMode5frameEv+0x2d4>)
    1bce:	f00a fccf 	bl	c570 <__aeabi_ddiv>
    1bd2:	f009 f905 	bl	ade0 <sin>
    1bd6:	2200      	movs	r2, #0
    1bd8:	4606      	mov	r6, r0
    1bda:	460f      	mov	r7, r1
    1bdc:	4b7c      	ldr	r3, [pc, #496]	; (1dd0 <_ZN8MeltMode5frameEv+0x2d8>)
    1bde:	4640      	mov	r0, r8
    1be0:	4649      	mov	r1, r9
    1be2:	f00a fcc5 	bl	c570 <__aeabi_ddiv>
    1be6:	f009 f831 	bl	ac4c <cos>
    1bea:	4632      	mov	r2, r6
    1bec:	4604      	mov	r4, r0
    1bee:	460d      	mov	r5, r1
    1bf0:	463b      	mov	r3, r7
    1bf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1bf6:	f00a f9df 	bl	bfb8 <__adddf3>
    1bfa:	e9cd 4500 	strd	r4, r5, [sp]
    1bfe:	4602      	mov	r2, r0
    1c00:	e9cd 8902 	strd	r8, r9, [sp, #8]
    1c04:	460b      	mov	r3, r1
    1c06:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    1c0a:	f7fe fdb9 	bl	780 <_ZN7Perlins6pnoiseEddd>

        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1c0e:	4b71      	ldr	r3, [pc, #452]	; (1dd4 <_ZN8MeltMode5frameEv+0x2dc>)
    1c10:	681b      	ldr	r3, [r3, #0]
    1c12:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
    {
        valueTracker += 0.0001;
        hueTracker += 0.00001;

        value = perlins->pnoise(valueTracker + sin((j + valueTracker) / 2) , cos(valueTracker), valueTracker);
        hue = perlins->pnoise(cos(hueTracker / 2.0) + sin((j + hueTracker) / 10.0) , cos(hueTracker / 5.0), hueTracker);
    1c16:	4604      	mov	r4, r0
    1c18:	460d      	mov	r5, r1

        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1c1a:	eb03 0806 	add.w	r8, r3, r6
    1c1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1c22:	a363      	add	r3, pc, #396	; (adr r3, 1db0 <_ZN8MeltMode5frameEv+0x2b8>)
    1c24:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c28:	f00a fb78 	bl	c31c <__aeabi_dmul>
    1c2c:	2200      	movs	r2, #0
    1c2e:	4b6a      	ldr	r3, [pc, #424]	; (1dd8 <_ZN8MeltMode5frameEv+0x2e0>)
    1c30:	f00a f9c2 	bl	bfb8 <__adddf3>
    1c34:	27ff      	movs	r7, #255	; 0xff
    1c36:	f00a fe0b 	bl	c850 <__aeabi_d2iz>
    1c3a:	2100      	movs	r1, #0
    1c3c:	463a      	mov	r2, r7
    1c3e:	2364      	movs	r3, #100	; 0x64
    1c40:	9700      	str	r7, [sp, #0]
    1c42:	f002 fc01 	bl	4448 <_Z3maplllll>
    1c46:	a35a      	add	r3, pc, #360	; (adr r3, 1db0 <_ZN8MeltMode5frameEv+0x2b8>)
    1c48:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c4c:	4681      	mov	r9, r0
    1c4e:	4629      	mov	r1, r5
    1c50:	4620      	mov	r0, r4
    1c52:	f00a fb63 	bl	c31c <__aeabi_dmul>
    1c56:	2200      	movs	r2, #0
    1c58:	4b5f      	ldr	r3, [pc, #380]	; (1dd8 <_ZN8MeltMode5frameEv+0x2e0>)
    1c5a:	f00a f9ad 	bl	bfb8 <__adddf3>
    1c5e:	f00a fe1f 	bl	c8a0 <__aeabi_d2uiz>
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1c62:	4641      	mov	r1, r8
    1c64:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    1c68:	a809      	add	r0, sp, #36	; 0x24
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1c6a:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    1c6e:	f88d 9026 	strb.w	r9, [sp, #38]	; 0x26
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1c72:	f7fe fc60 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
        if (j < nLEDS_TWO)
            leds_two[j] = leds[j];
    1c76:	4b59      	ldr	r3, [pc, #356]	; (1ddc <_ZN8MeltMode5frameEv+0x2e4>)
    }

    // allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c78:	4859      	ldr	r0, [pc, #356]	; (1de0 <_ZN8MeltMode5frameEv+0x2e8>)
    1c7a:	6819      	ldr	r1, [r3, #0]
    1c7c:	1832      	adds	r2, r6, r0
    1c7e:	5c30      	ldrb	r0, [r6, r0]
    1c80:	5588      	strb	r0, [r1, r6]
    1c82:	198b      	adds	r3, r1, r6
        g = rhs.g;
    1c84:	7851      	ldrb	r1, [r2, #1]
    1c86:	7059      	strb	r1, [r3, #1]
void MeltMode::frame() {
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    valueTracker += 0.001;
    for (j = 0; j < nLEDS_ONE; j++)
    1c88:	f10b 0b01 	add.w	fp, fp, #1
        b = rhs.b;
    1c8c:	7892      	ldrb	r2, [r2, #2]
    1c8e:	709a      	strb	r2, [r3, #2]
    1c90:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
    1c94:	f47f af48 	bne.w	1b28 <_ZN8MeltMode5frameEv+0x30>
        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
        if (j < nLEDS_TWO)
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    1c98:	e9da 0106 	ldrd	r0, r1, [sl, #24]
    1c9c:	a346      	add	r3, pc, #280	; (adr r3, 1db8 <_ZN8MeltMode5frameEv+0x2c0>)
    1c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ca2:	f00a f989 	bl	bfb8 <__adddf3>
    threeValueTracker += 0.008;
    1ca6:	a346      	add	r3, pc, #280	; (adr r3, 1dc0 <_ZN8MeltMode5frameEv+0x2c8>)
    1ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
        if (j < nLEDS_TWO)
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    1cac:	e9ca 0106 	strd	r0, r1, [sl, #24]
    threeValueTracker += 0.008;
    1cb0:	e9da 0108 	ldrd	r0, r1, [sl, #32]
    1cb4:	f00a f980 	bl	bfb8 <__adddf3>
    1cb8:	e9ca 0108 	strd	r0, r1, [sl, #32]
    for (j = 0; j < nLEDS_THREE; j++)
    1cbc:	f04f 0b00 	mov.w	fp, #0
    {
        threeValueTracker += 0.001;
    1cc0:	e9da 0108 	ldrd	r0, r1, [sl, #32]
    1cc4:	a334      	add	r3, pc, #208	; (adr r3, 1d98 <_ZN8MeltMode5frameEv+0x2a0>)
    1cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cca:	f00a f975 	bl	bfb8 <__adddf3>
    1cce:	4604      	mov	r4, r0
    1cd0:	460d      	mov	r5, r1
        threeHueTracker += 0.0001;
    1cd2:	a333      	add	r3, pc, #204	; (adr r3, 1da0 <_ZN8MeltMode5frameEv+0x2a8>)
    1cd4:	e9d3 2300 	ldrd	r2, r3, [r3]

    threeHueTracker += 0.01;
    threeValueTracker += 0.008;
    for (j = 0; j < nLEDS_THREE; j++)
    {
        threeValueTracker += 0.001;
    1cd8:	e9ca 4508 	strd	r4, r5, [sl, #32]
        threeHueTracker += 0.0001;
    1cdc:	e9da 0106 	ldrd	r0, r1, [sl, #24]
    1ce0:	f00a f96a 	bl	bfb8 <__adddf3>
    1ce4:	e9ca 0106 	strd	r0, r1, [sl, #24]

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
    1ce8:	4658      	mov	r0, fp
    1cea:	f00a fab1 	bl	c250 <__aeabi_i2d>
    1cee:	4622      	mov	r2, r4
    1cf0:	462b      	mov	r3, r5
    1cf2:	4606      	mov	r6, r0
    1cf4:	460f      	mov	r7, r1
    1cf6:	f00a f95f 	bl	bfb8 <__adddf3>
    1cfa:	2200      	movs	r2, #0
    1cfc:	4b32      	ldr	r3, [pc, #200]	; (1dc8 <_ZN8MeltMode5frameEv+0x2d0>)
    1cfe:	f00a fb0d 	bl	c31c <__aeabi_dmul>
    1d02:	f009 f86d 	bl	ade0 <sin>
    1d06:	4680      	mov	r8, r0
    1d08:	4689      	mov	r9, r1
    1d0a:	4620      	mov	r0, r4
    1d0c:	4629      	mov	r1, r5
    1d0e:	f008 ff9d 	bl	ac4c <cos>
    1d12:	4642      	mov	r2, r8
    1d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1d18:	464b      	mov	r3, r9
    1d1a:	4620      	mov	r0, r4
    1d1c:	4629      	mov	r1, r5
    1d1e:	f00a f94b 	bl	bfb8 <__adddf3>
    1d22:	4602      	mov	r2, r0
    1d24:	460b      	mov	r3, r1
    1d26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1d2a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    1d2e:	e9cd 0100 	strd	r0, r1, [sp]
    1d32:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    1d36:	f7fe fd23 	bl	780 <_ZN7Perlins6pnoiseEddd>
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);
    1d3a:	e9da 8906 	ldrd	r8, r9, [sl, #24]
    for (j = 0; j < nLEDS_THREE; j++)
    {
        threeValueTracker += 0.001;
        threeHueTracker += 0.0001;

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
    1d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);
    1d42:	2200      	movs	r2, #0
    1d44:	4b20      	ldr	r3, [pc, #128]	; (1dc8 <_ZN8MeltMode5frameEv+0x2d0>)
    1d46:	4640      	mov	r0, r8
    1d48:	4649      	mov	r1, r9
    1d4a:	f00a fae7 	bl	c31c <__aeabi_dmul>
    1d4e:	f008 ff7d 	bl	ac4c <cos>
    1d52:	4642      	mov	r2, r8
    1d54:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1d58:	464b      	mov	r3, r9
    1d5a:	4630      	mov	r0, r6
    1d5c:	4639      	mov	r1, r7
    1d5e:	f00a f92b 	bl	bfb8 <__adddf3>
    1d62:	2200      	movs	r2, #0
    1d64:	4b19      	ldr	r3, [pc, #100]	; (1dcc <_ZN8MeltMode5frameEv+0x2d4>)
    1d66:	f00a fc03 	bl	c570 <__aeabi_ddiv>
    1d6a:	f009 f839 	bl	ade0 <sin>
    1d6e:	2200      	movs	r2, #0
    1d70:	4606      	mov	r6, r0
    1d72:	460f      	mov	r7, r1
    1d74:	4b16      	ldr	r3, [pc, #88]	; (1dd0 <_ZN8MeltMode5frameEv+0x2d8>)
    1d76:	4640      	mov	r0, r8
    1d78:	4649      	mov	r1, r9
    1d7a:	f00a fbf9 	bl	c570 <__aeabi_ddiv>
    1d7e:	f008 ff65 	bl	ac4c <cos>
    1d82:	4632      	mov	r2, r6
    1d84:	4604      	mov	r4, r0
    1d86:	460d      	mov	r5, r1
    1d88:	463b      	mov	r3, r7
    1d8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1d8e:	f00a f913 	bl	bfb8 <__adddf3>
    1d92:	e027      	b.n	1de4 <_ZN8MeltMode5frameEv+0x2ec>
    1d94:	f3af 8000 	nop.w
    1d98:	d2f1a9fc 	.word	0xd2f1a9fc
    1d9c:	3f50624d 	.word	0x3f50624d
    1da0:	eb1c432d 	.word	0xeb1c432d
    1da4:	3f1a36e2 	.word	0x3f1a36e2
    1da8:	88e368f1 	.word	0x88e368f1
    1dac:	3ee4f8b5 	.word	0x3ee4f8b5
    1db0:	00000000 	.word	0x00000000
    1db4:	405fc000 	.word	0x405fc000
    1db8:	47ae147b 	.word	0x47ae147b
    1dbc:	3f847ae1 	.word	0x3f847ae1
    1dc0:	d2f1a9fc 	.word	0xd2f1a9fc
    1dc4:	3f80624d 	.word	0x3f80624d
    1dc8:	3fe00000 	.word	0x3fe00000
    1dcc:	40240000 	.word	0x40240000
    1dd0:	40140000 	.word	0x40140000
    1dd4:	1fff8410 	.word	0x1fff8410
    1dd8:	40600000 	.word	0x40600000
    1ddc:	1fff840c 	.word	0x1fff840c
    1de0:	1fff8d68 	.word	0x1fff8d68
    1de4:	e9cd 4500 	strd	r4, r5, [sp]
    1de8:	4602      	mov	r2, r0
    1dea:	460b      	mov	r3, r1
    1dec:	e9cd 8902 	strd	r8, r9, [sp, #8]
    1df0:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    1df4:	f7fe fcc4 	bl	780 <_ZN7Perlins6pnoiseEddd>

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1df8:	4a1f      	ldr	r2, [pc, #124]	; (1e78 <_ZN8MeltMode5frameEv+0x380>)
    1dfa:	6817      	ldr	r7, [r2, #0]
    1dfc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    {
        threeValueTracker += 0.001;
        threeHueTracker += 0.0001;

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);
    1e00:	4604      	mov	r4, r0
    1e02:	460d      	mov	r5, r1

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1e04:	441f      	add	r7, r3
    1e06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e0a:	a319      	add	r3, pc, #100	; (adr r3, 1e70 <_ZN8MeltMode5frameEv+0x378>)
    1e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e10:	f00a fa84 	bl	c31c <__aeabi_dmul>
    1e14:	2200      	movs	r2, #0
    1e16:	4b19      	ldr	r3, [pc, #100]	; (1e7c <_ZN8MeltMode5frameEv+0x384>)
    1e18:	f00a f8ce 	bl	bfb8 <__adddf3>
    1e1c:	26ff      	movs	r6, #255	; 0xff
    1e1e:	f00a fd17 	bl	c850 <__aeabi_d2iz>
    1e22:	2100      	movs	r1, #0
    1e24:	4632      	mov	r2, r6
    1e26:	2364      	movs	r3, #100	; 0x64
    1e28:	9600      	str	r6, [sp, #0]
    1e2a:	f002 fb0d 	bl	4448 <_Z3maplllll>
    1e2e:	a310      	add	r3, pc, #64	; (adr r3, 1e70 <_ZN8MeltMode5frameEv+0x378>)
    1e30:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e34:	4680      	mov	r8, r0
    1e36:	4629      	mov	r1, r5
    1e38:	4620      	mov	r0, r4
    1e3a:	f00a fa6f 	bl	c31c <__aeabi_dmul>
    1e3e:	2200      	movs	r2, #0
    1e40:	4b0e      	ldr	r3, [pc, #56]	; (1e7c <_ZN8MeltMode5frameEv+0x384>)
    1e42:	f00a f8b9 	bl	bfb8 <__adddf3>
    1e46:	f00a fd2b 	bl	c8a0 <__aeabi_d2uiz>
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    threeValueTracker += 0.008;
    for (j = 0; j < nLEDS_THREE; j++)
    1e4a:	f10b 0b01 	add.w	fp, fp, #1
        threeHueTracker += 0.0001;

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1e4e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1e52:	4639      	mov	r1, r7
    1e54:	a809      	add	r0, sp, #36	; 0x24
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1e56:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
    1e5a:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1e5e:	f7fe fb6a 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    threeValueTracker += 0.008;
    for (j = 0; j < nLEDS_THREE; j++)
    1e62:	f1bb 0f32 	cmp.w	fp, #50	; 0x32
    1e66:	f47f af2b 	bne.w	1cc0 <_ZN8MeltMode5frameEv+0x1c8>
        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    }
}
    1e6a:	b00b      	add	sp, #44	; 0x2c
    1e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e70:	00000000 	.word	0x00000000
    1e74:	405fc000 	.word	0x405fc000
    1e78:	1fff8408 	.word	0x1fff8408
    1e7c:	40600000 	.word	0x40600000

00001e80 <_ZN8MeltModeC1Ev>:
#include "MeltMode.h"

MeltMode::MeltMode() {
    1e80:	b538      	push	{r3, r4, r5, lr}
    1e82:	4604      	mov	r4, r0
    1e84:	f7ff fd80 	bl	1988 <_ZN8BaseModeC1Ev>
    1e88:	4b11      	ldr	r3, [pc, #68]	; (1ed0 <_ZN8MeltModeC1Ev+0x50>)
    1e8a:	6023      	str	r3, [r4, #0]
    hueTracker = random16();
    1e8c:	f7ff fe06 	bl	1a9c <_ZL8random16v>
    1e90:	f00a f9ce 	bl	c230 <__aeabi_ui2d>
    1e94:	e9c4 0102 	strd	r0, r1, [r4, #8]
    valueTracker = random16();
    1e98:	f7ff fe00 	bl	1a9c <_ZL8random16v>
    1e9c:	f00a f9c8 	bl	c230 <__aeabi_ui2d>
    1ea0:	e9c4 0104 	strd	r0, r1, [r4, #16]

    threeHueTracker = random16();
    1ea4:	f7ff fdfa 	bl	1a9c <_ZL8random16v>
    1ea8:	f00a f9c2 	bl	c230 <__aeabi_ui2d>
    1eac:	e9c4 0106 	strd	r0, r1, [r4, #24]
    threeValueTracker = random16();
    1eb0:	f7ff fdf4 	bl	1a9c <_ZL8random16v>
    1eb4:	f00a f9bc 	bl	c230 <__aeabi_ui2d>
    1eb8:	e9c4 0108 	strd	r0, r1, [r4, #32]

    perlins = new Perlins();
    1ebc:	2004      	movs	r0, #4
    1ebe:	f002 fad9 	bl	4474 <_Znwj>
    1ec2:	4605      	mov	r5, r0
    1ec4:	f7fe fbfe 	bl	6c4 <_ZN7PerlinsC1Ev>
    1ec8:	62a5      	str	r5, [r4, #40]	; 0x28
}
    1eca:	4620      	mov	r0, r4
    1ecc:	bd38      	pop	{r3, r4, r5, pc}
    1ece:	bf00      	nop
    1ed0:	00012c00 	.word	0x00012c00

00001ed4 <wait_for_cal>:
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(__MK20DX128__)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#elif defined(__MK20DX256__)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1ed6:	4b30      	ldr	r3, [pc, #192]	; (1f98 <wait_for_cal+0xc4>)
    1ed8:	681b      	ldr	r3, [r3, #0]
    1eda:	061b      	lsls	r3, r3, #24
    1edc:	d4fb      	bmi.n	1ed6 <wait_for_cal+0x2>
    1ede:	4b2f      	ldr	r3, [pc, #188]	; (1f9c <wait_for_cal+0xc8>)
    1ee0:	681b      	ldr	r3, [r3, #0]
    1ee2:	f013 0280 	ands.w	r2, r3, #128	; 0x80
    1ee6:	d1f6      	bne.n	1ed6 <wait_for_cal+0x2>
		// wait
	}
#endif
	__disable_irq();
    1ee8:	b672      	cpsid	i
	if (calibrating) {
    1eea:	4b2d      	ldr	r3, [pc, #180]	; (1fa0 <wait_for_cal+0xcc>)
    1eec:	7819      	ldrb	r1, [r3, #0]
    1eee:	2900      	cmp	r1, #0
    1ef0:	d050      	beq.n	1f94 <wait_for_cal+0xc0>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ef2:	492c      	ldr	r1, [pc, #176]	; (1fa4 <wait_for_cal+0xd0>)
    1ef4:	6808      	ldr	r0, [r1, #0]
    1ef6:	684f      	ldr	r7, [r1, #4]
    1ef8:	688e      	ldr	r6, [r1, #8]
    1efa:	68cd      	ldr	r5, [r1, #12]
    1efc:	690c      	ldr	r4, [r1, #16]
    1efe:	4438      	add	r0, r7
    1f00:	3114      	adds	r1, #20
    1f02:	4430      	add	r0, r6
    1f04:	6809      	ldr	r1, [r1, #0]
    1f06:	4428      	add	r0, r5
    1f08:	4420      	add	r0, r4
    1f0a:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    1f0c:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC0_PG = sum;
    1f10:	4925      	ldr	r1, [pc, #148]	; (1fa8 <wait_for_cal+0xd4>)
    1f12:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    1f16:	6008      	str	r0, [r1, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1f18:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    1f1a:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    1f1c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    1f1e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
    1f20:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    1f22:	4438      	add	r0, r7
    1f24:	3140      	adds	r1, #64	; 0x40
    1f26:	4430      	add	r0, r6
    1f28:	6809      	ldr	r1, [r1, #0]
    1f2a:	4428      	add	r0, r5
    1f2c:	4420      	add	r0, r4
    1f2e:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    1f30:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC0_MG = sum;
    1f34:	491d      	ldr	r1, [pc, #116]	; (1fac <wait_for_cal+0xd8>)
    1f36:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    1f3a:	6008      	str	r0, [r1, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#if defined(__MK20DX256__)
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f3c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
    1f40:	3114      	adds	r1, #20
    1f42:	f851 0c14 	ldr.w	r0, [r1, #-20]
    1f46:	f851 7c10 	ldr.w	r7, [r1, #-16]
    1f4a:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    1f4e:	f851 5c08 	ldr.w	r5, [r1, #-8]
    1f52:	f851 4c04 	ldr.w	r4, [r1, #-4]
    1f56:	6809      	ldr	r1, [r1, #0]
    1f58:	4438      	add	r0, r7
    1f5a:	4430      	add	r0, r6
    1f5c:	4428      	add	r0, r5
    1f5e:	4420      	add	r0, r4
    1f60:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    1f62:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC1_PG = sum;
    1f66:	4912      	ldr	r1, [pc, #72]	; (1fb0 <wait_for_cal+0xdc>)
    1f68:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    1f6c:	6008      	str	r0, [r1, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f6e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    1f70:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    1f72:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    1f74:	6b8d      	ldr	r5, [r1, #56]	; 0x38
    1f76:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    1f78:	4438      	add	r0, r7
    1f7a:	3140      	adds	r1, #64	; 0x40
    1f7c:	4430      	add	r0, r6
    1f7e:	6809      	ldr	r1, [r1, #0]
    1f80:	4428      	add	r0, r5
    1f82:	4420      	add	r0, r4
    1f84:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    1f86:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC1_MG = sum;
    1f8a:	490a      	ldr	r1, [pc, #40]	; (1fb4 <wait_for_cal+0xe0>)
    1f8c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    1f90:	6008      	str	r0, [r1, #0]
#endif
		calibrating = 0;
    1f92:	701a      	strb	r2, [r3, #0]
	}
	__enable_irq();
    1f94:	b662      	cpsie	i
    1f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f98:	4003b024 	.word	0x4003b024
    1f9c:	400bb024 	.word	0x400bb024
    1fa0:	1fff90c2 	.word	0x1fff90c2
    1fa4:	4003b038 	.word	0x4003b038
    1fa8:	4003b02c 	.word	0x4003b02c
    1fac:	4003b030 	.word	0x4003b030
    1fb0:	400bb02c 	.word	0x400bb02c
    1fb4:	400bb030 	.word	0x400bb030

00001fb8 <analog_init>:
#else
#error "F_BUS must be 60, 56, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1fb8:	b510      	push	{r4, lr}
	uint32_t num;

	VREF_TRM = 0x60;
    1fba:	4b20      	ldr	r3, [pc, #128]	; (203c <analog_init+0x84>)
    1fbc:	4820      	ldr	r0, [pc, #128]	; (2040 <analog_init+0x88>)
    1fbe:	4921      	ldr	r1, [pc, #132]	; (2044 <analog_init+0x8c>)
    1fc0:	2260      	movs	r2, #96	; 0x60
    1fc2:	701a      	strb	r2, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1fc4:	22e1      	movs	r2, #225	; 0xe1
    1fc6:	705a      	strb	r2, [r3, #1]

	if (analog_config_bits == 8) {
    1fc8:	4b1f      	ldr	r3, [pc, #124]	; (2048 <analog_init+0x90>)
    1fca:	4a20      	ldr	r2, [pc, #128]	; (204c <analog_init+0x94>)
    1fcc:	781c      	ldrb	r4, [r3, #0]
    1fce:	4b20      	ldr	r3, [pc, #128]	; (2050 <analog_init+0x98>)
    1fd0:	2c08      	cmp	r4, #8
    1fd2:	d101      	bne.n	1fd8 <analog_init+0x20>
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1fd4:	2401      	movs	r4, #1
    1fd6:	e002      	b.n	1fde <analog_init+0x26>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1fd8:	2c0a      	cmp	r4, #10
    1fda:	d103      	bne.n	1fe4 <analog_init+0x2c>
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1fdc:	2419      	movs	r4, #25
    1fde:	6004      	str	r4, [r0, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1fe0:	2013      	movs	r0, #19
    1fe2:	e005      	b.n	1ff0 <analog_init+0x38>
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1fe4:	2c0c      	cmp	r4, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1fe6:	bf0c      	ite	eq
    1fe8:	2415      	moveq	r4, #21
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1fea:	243d      	movne	r4, #61	; 0x3d
    1fec:	6004      	str	r4, [r0, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1fee:	2012      	movs	r0, #18
    1ff0:	6008      	str	r0, [r1, #0]
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1ff2:	6014      	str	r4, [r2, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1ff4:	6018      	str	r0, [r3, #0]
		#endif
	}

	if (analog_reference_internal) {
    1ff6:	4b17      	ldr	r3, [pc, #92]	; (2054 <analog_init+0x9c>)
    1ff8:	4917      	ldr	r1, [pc, #92]	; (2058 <analog_init+0xa0>)
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	4a17      	ldr	r2, [pc, #92]	; (205c <analog_init+0xa4>)
    1ffe:	b103      	cbz	r3, 2002 <analog_init+0x4a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2000:	2301      	movs	r3, #1
		#if defined(__MK20DX256__)
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		#endif
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2002:	600b      	str	r3, [r1, #0]
		#if defined(__MK20DX256__)
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2004:	6013      	str	r3, [r2, #0]
		#endif
	}

	num = analog_num_average;
    2006:	4b16      	ldr	r3, [pc, #88]	; (2060 <analog_init+0xa8>)
    2008:	4a16      	ldr	r2, [pc, #88]	; (2064 <analog_init+0xac>)
    200a:	7819      	ldrb	r1, [r3, #0]
    200c:	4b16      	ldr	r3, [pc, #88]	; (2068 <analog_init+0xb0>)
	if (num <= 1) {
    200e:	2901      	cmp	r1, #1
    2010:	d801      	bhi.n	2016 <analog_init+0x5e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2012:	2180      	movs	r1, #128	; 0x80
    2014:	e00b      	b.n	202e <analog_init+0x76>
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2016:	2904      	cmp	r1, #4
    2018:	d801      	bhi.n	201e <analog_init+0x66>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    201a:	2184      	movs	r1, #132	; 0x84
    201c:	e007      	b.n	202e <analog_init+0x76>
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    201e:	2908      	cmp	r1, #8
    2020:	d801      	bhi.n	2026 <analog_init+0x6e>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2022:	2185      	movs	r1, #133	; 0x85
    2024:	e003      	b.n	202e <analog_init+0x76>
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2026:	2910      	cmp	r1, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2028:	bf94      	ite	ls
    202a:	2186      	movls	r1, #134	; 0x86
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    202c:	2187      	movhi	r1, #135	; 0x87
    202e:	6011      	str	r1, [r2, #0]
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2030:	6019      	str	r1, [r3, #0]
		#endif
	}
	calibrating = 1;
    2032:	4b0e      	ldr	r3, [pc, #56]	; (206c <analog_init+0xb4>)
    2034:	2201      	movs	r2, #1
    2036:	701a      	strb	r2, [r3, #0]
    2038:	bd10      	pop	{r4, pc}
    203a:	bf00      	nop
    203c:	40074000 	.word	0x40074000
    2040:	4003b008 	.word	0x4003b008
    2044:	4003b00c 	.word	0x4003b00c
    2048:	1fff8414 	.word	0x1fff8414
    204c:	400bb008 	.word	0x400bb008
    2050:	400bb00c 	.word	0x400bb00c
    2054:	1fff90c5 	.word	0x1fff90c5
    2058:	4003b020 	.word	0x4003b020
    205c:	400bb020 	.word	0x400bb020
    2060:	1fff8415 	.word	0x1fff8415
    2064:	4003b024 	.word	0x4003b024
    2068:	400bb024 	.word	0x400bb024
    206c:	1fff90c2 	.word	0x1fff90c2

00002070 <analogReference>:
#define INTERNAL1V2     2
#define INTERNAL1V1     2
#define EXTERNAL        0

void analogReference(uint8_t type)
{
    2070:	4b0e      	ldr	r3, [pc, #56]	; (20ac <analogReference+0x3c>)
	if (type) {
		// internal reference requested
		if (!analog_reference_internal) {
    2072:	781a      	ldrb	r2, [r3, #0]
#define INTERNAL1V1     2
#define EXTERNAL        0

void analogReference(uint8_t type)
{
	if (type) {
    2074:	b160      	cbz	r0, 2090 <analogReference+0x20>
		// internal reference requested
		if (!analog_reference_internal) {
    2076:	b9ba      	cbnz	r2, 20a8 <analogReference+0x38>
			analog_reference_internal = 1;
    2078:	2101      	movs	r1, #1
    207a:	7019      	strb	r1, [r3, #0]
			if (calibrating) {
    207c:	4b0c      	ldr	r3, [pc, #48]	; (20b0 <analogReference+0x40>)
    207e:	781b      	ldrb	r3, [r3, #0]
    2080:	b123      	cbz	r3, 208c <analogReference+0x1c>
				ADC0_SC3 = 0; // cancel cal
    2082:	4b0c      	ldr	r3, [pc, #48]	; (20b4 <analogReference+0x44>)
    2084:	601a      	str	r2, [r3, #0]
#if defined(__MK20DX256__)
				ADC1_SC3 = 0; // cancel cal
    2086:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    208a:	601a      	str	r2, [r3, #0]
#endif
			}
			analog_init();
    208c:	f7ff bf94 	b.w	1fb8 <analog_init>
		}
	} else {
		// vcc or external reference requested
		if (analog_reference_internal) {
    2090:	b152      	cbz	r2, 20a8 <analogReference+0x38>
			analog_reference_internal = 0;
    2092:	7018      	strb	r0, [r3, #0]
			if (calibrating) {
    2094:	4b06      	ldr	r3, [pc, #24]	; (20b0 <analogReference+0x40>)
    2096:	781b      	ldrb	r3, [r3, #0]
    2098:	2b00      	cmp	r3, #0
    209a:	d0f7      	beq.n	208c <analogReference+0x1c>
				ADC0_SC3 = 0; // cancel cal
    209c:	4b05      	ldr	r3, [pc, #20]	; (20b4 <analogReference+0x44>)
    209e:	6018      	str	r0, [r3, #0]
#if defined(__MK20DX256__)
				ADC1_SC3 = 0; // cancel cal
    20a0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    20a4:	6018      	str	r0, [r3, #0]
    20a6:	e7f1      	b.n	208c <analogReference+0x1c>
    20a8:	4770      	bx	lr
    20aa:	bf00      	nop
    20ac:	1fff90c5 	.word	0x1fff90c5
    20b0:	1fff90c2 	.word	0x1fff90c2
    20b4:	4003b024 	.word	0x4003b024

000020b8 <analogReadAveraging>:
		analog_init();
	}
}

void analogReadAveraging(unsigned int num)
{
    20b8:	b510      	push	{r4, lr}

	if (calibrating) wait_for_cal();
    20ba:	4b11      	ldr	r3, [pc, #68]	; (2100 <analogReadAveraging+0x48>)
    20bc:	781b      	ldrb	r3, [r3, #0]
		analog_init();
	}
}

void analogReadAveraging(unsigned int num)
{
    20be:	4604      	mov	r4, r0

	if (calibrating) wait_for_cal();
    20c0:	b10b      	cbz	r3, 20c6 <analogReadAveraging+0xe>
    20c2:	f7ff ff07 	bl	1ed4 <wait_for_cal>
	if (num <= 1) {
    20c6:	2c01      	cmp	r4, #1
    20c8:	4a0e      	ldr	r2, [pc, #56]	; (2104 <analogReadAveraging+0x4c>)
    20ca:	d801      	bhi.n	20d0 <analogReadAveraging+0x18>
		num = 0;
		ADC0_SC3 = 0;
    20cc:	2300      	movs	r3, #0
    20ce:	e002      	b.n	20d6 <analogReadAveraging+0x1e>
	} else if (num <= 4) {
    20d0:	2c04      	cmp	r4, #4
    20d2:	d802      	bhi.n	20da <analogReadAveraging+0x22>
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    20d4:	2304      	movs	r3, #4
    20d6:	6013      	str	r3, [r2, #0]
    20d8:	e00e      	b.n	20f8 <analogReadAveraging+0x40>
	} else if (num <= 8) {
    20da:	2c08      	cmp	r4, #8
    20dc:	d803      	bhi.n	20e6 <analogReadAveraging+0x2e>
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    20de:	2305      	movs	r3, #5
    20e0:	6013      	str	r3, [r2, #0]
		ADC0_SC3 = 0;
	} else if (num <= 4) {
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
	} else if (num <= 8) {
		num = 8;
    20e2:	2308      	movs	r3, #8
    20e4:	e008      	b.n	20f8 <analogReadAveraging+0x40>
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
	} else if (num <= 16) {
    20e6:	2c10      	cmp	r4, #16
    20e8:	d803      	bhi.n	20f2 <analogReadAveraging+0x3a>
		num = 16;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    20ea:	2306      	movs	r3, #6
    20ec:	6013      	str	r3, [r2, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
	} else if (num <= 8) {
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
	} else if (num <= 16) {
		num = 16;
    20ee:	2310      	movs	r3, #16
    20f0:	e002      	b.n	20f8 <analogReadAveraging+0x40>
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
	} else {
		num = 32;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    20f2:	2307      	movs	r3, #7
    20f4:	6013      	str	r3, [r2, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
	} else if (num <= 16) {
		num = 16;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
	} else {
		num = 32;
    20f6:	2320      	movs	r3, #32
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
	}
	analog_num_average = num;
    20f8:	4a03      	ldr	r2, [pc, #12]	; (2108 <analogReadAveraging+0x50>)
    20fa:	7013      	strb	r3, [r2, #0]
    20fc:	bd10      	pop	{r4, pc}
    20fe:	bf00      	nop
    2100:	1fff90c2 	.word	0x1fff90c2
    2104:	4003b024 	.word	0x4003b024
    2108:	1fff8415 	.word	0x1fff8415

0000210c <analogRead>:
	uint8_t index, channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin <= 13) {
    210c:	280d      	cmp	r0, #13
#if defined(__MK20DX256__)
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    210e:	b538      	push	{r3, r4, r5, lr}
	uint8_t index, channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin <= 13) {
    2110:	d90f      	bls.n	2132 <analogRead+0x26>
		index = pin;      // 0-13 refer to A0-A13
	} else if (pin <= 23) {
    2112:	2817      	cmp	r0, #23
    2114:	d801      	bhi.n	211a <analogRead+0xe>
		index = pin - 14; // 14-23 are A0-A9
    2116:	380e      	subs	r0, #14
    2118:	e00a      	b.n	2130 <analogRead+0x24>
#if defined(__MK20DX256__)
	} else if (pin >= 26 && pin <= 31) {
    211a:	f1a0 031a 	sub.w	r3, r0, #26
    211e:	2b05      	cmp	r3, #5
    2120:	d801      	bhi.n	2126 <analogRead+0x1a>
		index = pin - 9;  // 26-31 are A15-A20
    2122:	3809      	subs	r0, #9
    2124:	e004      	b.n	2130 <analogRead+0x24>
#endif
	} else if (pin >= 34 && pin <= 40) {
    2126:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    212a:	2b06      	cmp	r3, #6
    212c:	d847      	bhi.n	21be <analogRead+0xb2>
		index = pin - 24;  // 34-37 are A10-A13, 38 is temp sensor,
    212e:	3818      	subs	r0, #24
    2130:	b2c0      	uxtb	r0, r0
	}

	//serial_phex(index);
	//serial_print(" ");

	channel = channel2sc1a[index];
    2132:	4b24      	ldr	r3, [pc, #144]	; (21c4 <analogRead+0xb8>)
    2134:	5c1c      	ldrb	r4, [r3, r0]
	//serial_phex(channel);
	//serial_print(" ");

	//serial_print("analogRead");
	//return 0;
	if (calibrating) wait_for_cal();
    2136:	4b24      	ldr	r3, [pc, #144]	; (21c8 <analogRead+0xbc>)
    2138:	781b      	ldrb	r3, [r3, #0]
    213a:	b10b      	cbz	r3, 2140 <analogRead+0x34>
    213c:	f7ff feca 	bl	1ed4 <wait_for_cal>
	//pin = 5; // PTD1/SE5b, pin 14, analog 0

#if defined(__MK20DX256__)
	if (channel & 0x80) goto beginADC1;
    2140:	0621      	lsls	r1, r4, #24
    2142:	d414      	bmi.n	216e <analogRead+0x62>
#endif

	__disable_irq();
    2144:	b672      	cpsid	i
startADC0:
	//serial_print("startADC0\n");
	ADC0_SC1A = channel;
    2146:	4b21      	ldr	r3, [pc, #132]	; (21cc <analogRead+0xc0>)
	analogReadBusyADC0 = 1;
    2148:	4d21      	ldr	r5, [pc, #132]	; (21d0 <analogRead+0xc4>)
#endif

	__disable_irq();
startADC0:
	//serial_print("startADC0\n");
	ADC0_SC1A = channel;
    214a:	601c      	str	r4, [r3, #0]
	analogReadBusyADC0 = 1;
    214c:	2301      	movs	r3, #1
    214e:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    2150:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    2152:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2154:	4b1d      	ldr	r3, [pc, #116]	; (21cc <analogRead+0xc0>)
    2156:	681b      	ldr	r3, [r3, #0]
    2158:	061a      	lsls	r2, r3, #24
    215a:	d501      	bpl.n	2160 <analogRead+0x54>
			result = ADC0_RA;
    215c:	4b1d      	ldr	r3, [pc, #116]	; (21d4 <analogRead+0xc8>)
    215e:	e01f      	b.n	21a0 <analogRead+0x94>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2160:	782b      	ldrb	r3, [r5, #0]
    2162:	2b00      	cmp	r3, #0
    2164:	d0ef      	beq.n	2146 <analogRead+0x3a>
		__enable_irq();
    2166:	b662      	cpsie	i
		yield();
    2168:	f002 f978 	bl	445c <yield>
	}
    216c:	e7f1      	b.n	2152 <analogRead+0x46>

#if defined(__MK20DX256__)
beginADC1:
	__disable_irq();
    216e:	b672      	cpsid	i
    2170:	4b19      	ldr	r3, [pc, #100]	; (21d8 <analogRead+0xcc>)
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2172:	4d1a      	ldr	r5, [pc, #104]	; (21dc <analogRead+0xd0>)
	__disable_irq();
startADC1:
	//serial_print("startADC0\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2174:	681a      	ldr	r2, [r3, #0]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC0\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2176:	f014 0f40 	tst.w	r4, #64	; 0x40
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    217a:	bf14      	ite	ne
    217c:	f022 0210 	bicne.w	r2, r2, #16
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2180:	f042 0210 	orreq.w	r2, r2, #16
    2184:	601a      	str	r2, [r3, #0]
	}
	ADC1_SC1A = channel & 0x3F;
    2186:	4b16      	ldr	r3, [pc, #88]	; (21e0 <analogRead+0xd4>)
    2188:	f004 023f 	and.w	r2, r4, #63	; 0x3f
    218c:	601a      	str	r2, [r3, #0]
	analogReadBusyADC1 = 1;
    218e:	2301      	movs	r3, #1
    2190:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    2192:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    2194:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2196:	4b12      	ldr	r3, [pc, #72]	; (21e0 <analogRead+0xd4>)
    2198:	681b      	ldr	r3, [r3, #0]
    219a:	061b      	lsls	r3, r3, #24
    219c:	d508      	bpl.n	21b0 <analogRead+0xa4>
			result = ADC1_RA;
    219e:	4b11      	ldr	r3, [pc, #68]	; (21e4 <analogRead+0xd8>)
    21a0:	6818      	ldr	r0, [r3, #0]
			analogReadBusyADC1 = 0;
    21a2:	2300      	movs	r3, #0
    21a4:	702b      	strb	r3, [r5, #0]
			__enable_irq();
    21a6:	b662      	cpsie	i
			result >>= analog_right_shift;
    21a8:	4b0f      	ldr	r3, [pc, #60]	; (21e8 <analogRead+0xdc>)
    21aa:	781b      	ldrb	r3, [r3, #0]
    21ac:	4118      	asrs	r0, r3
			return result;
    21ae:	bd38      	pop	{r3, r4, r5, pc}
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    21b0:	782b      	ldrb	r3, [r5, #0]
    21b2:	2b00      	cmp	r3, #0
    21b4:	d0dc      	beq.n	2170 <analogRead+0x64>
		__enable_irq();
    21b6:	b662      	cpsie	i
		yield();
    21b8:	f002 f950 	bl	445c <yield>
	}
    21bc:	e7ea      	b.n	2194 <analogRead+0x88>
#endif
	} else if (pin >= 34 && pin <= 40) {
		index = pin - 24;  // 34-37 are A10-A13, 38 is temp sensor,
			    // 39 is vref, 40 is unused (A14 on Teensy 3.1)
	} else {
		return 0;   // all others are invalid
    21be:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    21c0:	bd38      	pop	{r3, r4, r5, pc}
    21c2:	bf00      	nop
    21c4:	00012c10 	.word	0x00012c10
    21c8:	1fff90c2 	.word	0x1fff90c2
    21cc:	4003b000 	.word	0x4003b000
    21d0:	1fff90c4 	.word	0x1fff90c4
    21d4:	4003b010 	.word	0x4003b010
    21d8:	400bb00c 	.word	0x400bb00c
    21dc:	1fff90c3 	.word	0x1fff90c3
    21e0:	400bb000 	.word	0x400bb000
    21e4:	400bb010 	.word	0x400bb010
    21e8:	1fff90c1 	.word	0x1fff90c1

000021ec <software_isr>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    21ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    21ee:	4b16      	ldr	r3, [pc, #88]	; (2248 <software_isr+0x5c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    21f0:	4d16      	ldr	r5, [pc, #88]	; (224c <software_isr+0x60>)

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    21f2:	681a      	ldr	r2, [r3, #0]
    21f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    21f8:	601a      	str	r2, [r3, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    21fa:	4b15      	ldr	r3, [pc, #84]	; (2250 <software_isr+0x64>)
    21fc:	681a      	ldr	r2, [r3, #0]
    21fe:	f042 0201 	orr.w	r2, r2, #1
    2202:	601a      	str	r2, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    2204:	4b13      	ldr	r3, [pc, #76]	; (2254 <software_isr+0x68>)
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    2206:	682e      	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    2208:	681c      	ldr	r4, [r3, #0]
    220a:	b18c      	cbz	r4, 2230 <software_isr+0x44>
		if (p->active) {
    220c:	7a23      	ldrb	r3, [r4, #8]
    220e:	b16b      	cbz	r3, 222c <software_isr+0x40>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    2210:	6823      	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    2212:	682f      	ldr	r7, [r5, #0]
			p->update();
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	4620      	mov	r0, r4
    2218:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    221a:	682a      	ldr	r2, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    221c:	88e1      	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    221e:	1bd2      	subs	r2, r2, r7
    2220:	0912      	lsrs	r2, r2, #4
			p->cpu_cycles = cycles;
    2222:	b293      	uxth	r3, r2
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    2224:	428a      	cmp	r2, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    2226:	80a3      	strh	r3, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    2228:	bf88      	it	hi
    222a:	80e3      	strhhi	r3, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    222c:	6964      	ldr	r4, [r4, #20]
    222e:	e7ec      	b.n	220a <software_isr+0x1e>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    2230:	6829      	ldr	r1, [r5, #0]
	AudioStream::cpu_cycles_total = totalcycles;
    2232:	4b09      	ldr	r3, [pc, #36]	; (2258 <software_isr+0x6c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    2234:	1b89      	subs	r1, r1, r6
    2236:	0909      	lsrs	r1, r1, #4
	AudioStream::cpu_cycles_total = totalcycles;
    2238:	b28a      	uxth	r2, r1
    223a:	801a      	strh	r2, [r3, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    223c:	4b07      	ldr	r3, [pc, #28]	; (225c <software_isr+0x70>)
    223e:	8818      	ldrh	r0, [r3, #0]
    2240:	4281      	cmp	r1, r0
		AudioStream::cpu_cycles_total_max = totalcycles;
    2242:	bf88      	it	hi
    2244:	801a      	strhhi	r2, [r3, #0]
    2246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2248:	e000edfc 	.word	0xe000edfc
    224c:	e0001004 	.word	0xe0001004
    2250:	e0001000 	.word	0xe0001000
    2254:	1fff90c8 	.word	0x1fff90c8
    2258:	1fff90ce 	.word	0x1fff90ce
    225c:	1fff90cc 	.word	0x1fff90cc

00002260 <flexram_wait>:
	return (FTFL_FCNFG & FTFL_FCNFG_EEERDY) ? 1 : 0;
}

static void flexram_wait(void)
{
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    2260:	4b02      	ldr	r3, [pc, #8]	; (226c <flexram_wait+0xc>)
    2262:	781b      	ldrb	r3, [r3, #0]
    2264:	07db      	lsls	r3, r3, #31
    2266:	d5fb      	bpl.n	2260 <flexram_wait>
		// TODO: timeout
	}
}
    2268:	4770      	bx	lr
    226a:	bf00      	nop
    226c:	40020001 	.word	0x40020001

00002270 <eeprom_initialize>:
#elif (EEPROM_SIZE == 32)	// 2555000 writes/byte or 5110000 writes/word
  #define EEESIZE 0x39
#endif

void eeprom_initialize(void)
{
    2270:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    2272:	4b17      	ldr	r3, [pc, #92]	; (22d0 <eeprom_initialize+0x60>)
    2274:	466a      	mov	r2, sp
    2276:	f103 0510 	add.w	r5, r3, #16
    227a:	466e      	mov	r6, sp
    227c:	6818      	ldr	r0, [r3, #0]
    227e:	6859      	ldr	r1, [r3, #4]
    2280:	4614      	mov	r4, r2
    2282:	c403      	stmia	r4!, {r0, r1}
    2284:	3308      	adds	r3, #8
    2286:	42ab      	cmp	r3, r5
    2288:	4622      	mov	r2, r4
    228a:	d1f7      	bne.n	227c <eeprom_initialize+0xc>
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    228c:	4b11      	ldr	r3, [pc, #68]	; (22d4 <eeprom_initialize+0x64>)
    228e:	781a      	ldrb	r2, [r3, #0]
    2290:	f012 0f02 	tst.w	r2, #2
    2294:	461d      	mov	r5, r3
    2296:	d012      	beq.n	22be <eeprom_initialize+0x4e>
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    2298:	2280      	movs	r2, #128	; 0x80
    229a:	719a      	strb	r2, [r3, #6]
		FTFL_FCCOB4 = EEESIZE; // EEPROM Size
    229c:	2234      	movs	r2, #52	; 0x34
    229e:	729a      	strb	r2, [r3, #10]
		FTFL_FCCOB5 = 0x03; // 0K for Dataflash, 32K for EEPROM backup
    22a0:	2203      	movs	r2, #3
    22a2:	725a      	strb	r2, [r3, #9]
		__disable_irq();
    22a4:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    22a6:	4c0c      	ldr	r4, [pc, #48]	; (22d8 <eeprom_initialize+0x68>)
    22a8:	f046 0601 	orr.w	r6, r6, #1
    22ac:	4620      	mov	r0, r4
    22ae:	47b0      	blx	r6
		__enable_irq();
    22b0:	b662      	cpsie	i
		status = FTFL_FSTAT;
    22b2:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    22b4:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    22b8:	d001      	beq.n	22be <eeprom_initialize+0x4e>
			FTFL_FSTAT = (status & 0x70);
    22ba:	7023      	strb	r3, [r4, #0]
    22bc:	e006      	b.n	22cc <eeprom_initialize+0x5c>
#elif (EEPROM_SIZE == 32)	// 2555000 writes/byte or 5110000 writes/word
  #define EEESIZE 0x39
#endif

void eeprom_initialize(void)
{
    22be:	f644 6321 	movw	r3, #20001	; 0x4e21
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    22c2:	782a      	ldrb	r2, [r5, #0]
    22c4:	07d2      	lsls	r2, r2, #31
    22c6:	d401      	bmi.n	22cc <eeprom_initialize+0x5c>
		if (++count > 20000) break;
    22c8:	3b01      	subs	r3, #1
    22ca:	d1fa      	bne.n	22c2 <eeprom_initialize+0x52>
	}
}
    22cc:	b004      	add	sp, #16
    22ce:	bd70      	pop	{r4, r5, r6, pc}
    22d0:	00012c28 	.word	0x00012c28
    22d4:	40020001 	.word	0x40020001
    22d8:	40020000 	.word	0x40020000

000022dc <eeprom_read_byte>:
#define FlexRAM ((uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    22dc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
}

#define FlexRAM ((uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
    22e0:	b510      	push	{r4, lr}
    22e2:	4604      	mov	r4, r0
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    22e4:	d209      	bcs.n	22fa <eeprom_read_byte+0x1e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    22e6:	4b06      	ldr	r3, [pc, #24]	; (2300 <eeprom_read_byte+0x24>)
    22e8:	781b      	ldrb	r3, [r3, #0]
    22ea:	07db      	lsls	r3, r3, #31
    22ec:	d401      	bmi.n	22f2 <eeprom_read_byte+0x16>
    22ee:	f7ff ffbf 	bl	2270 <eeprom_initialize>
	return FlexRAM[offset];
    22f2:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    22f6:	7820      	ldrb	r0, [r4, #0]
    22f8:	bd10      	pop	{r4, pc}
#define FlexRAM ((uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    22fa:	2000      	movs	r0, #0
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
	return FlexRAM[offset];
}
    22fc:	bd10      	pop	{r4, pc}
    22fe:	bf00      	nop
    2300:	40020001 	.word	0x40020001

00002304 <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    2304:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
		// TODO: timeout
	}
}

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
    2308:	b538      	push	{r3, r4, r5, lr}
    230a:	4604      	mov	r4, r0
    230c:	460d      	mov	r5, r1
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    230e:	d20f      	bcs.n	2330 <eeprom_write_byte+0x2c>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    2310:	4b08      	ldr	r3, [pc, #32]	; (2334 <eeprom_write_byte+0x30>)
    2312:	781b      	ldrb	r3, [r3, #0]
    2314:	07db      	lsls	r3, r3, #31
    2316:	d401      	bmi.n	231c <eeprom_write_byte+0x18>
    2318:	f7ff ffaa 	bl	2270 <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    231c:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    2320:	7823      	ldrb	r3, [r4, #0]
    2322:	42ab      	cmp	r3, r5
    2324:	d004      	beq.n	2330 <eeprom_write_byte+0x2c>
		FlexRAM[offset] = value;
    2326:	7025      	strb	r5, [r4, #0]
		flexram_wait();
	}
}
    2328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	if (offset >= EEPROM_SIZE) return;
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
	if (FlexRAM[offset] != value) {
		FlexRAM[offset] = value;
		flexram_wait();
    232c:	f7ff bf98 	b.w	2260 <flexram_wait>
    2330:	bd38      	pop	{r3, r4, r5, pc}
    2332:	bf00      	nop
    2334:	40020001 	.word	0x40020001

00002338 <_ZN14HardwareSerial5writeEm>:
	virtual int peek(void)          { return serial_peek(); }
	virtual int read(void)          { return serial_getchar(); }
	virtual void flush(void)        { serial_flush(); }
	virtual void clear(void)	{ serial_clear(); }
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    2338:	b508      	push	{r3, lr}
    233a:	6803      	ldr	r3, [r0, #0]
    233c:	b2c9      	uxtb	r1, r1
    233e:	681b      	ldr	r3, [r3, #0]
    2340:	4798      	blx	r3
    2342:	bd08      	pop	{r3, pc}

00002344 <_ZN14HardwareSerial5writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    2344:	b508      	push	{r3, lr}
    2346:	6803      	ldr	r3, [r0, #0]
    2348:	b2c9      	uxtb	r1, r1
    234a:	681b      	ldr	r3, [r3, #0]
    234c:	4798      	blx	r3
    234e:	bd08      	pop	{r3, pc}

00002350 <_ZN14HardwareSerial5writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    2350:	b508      	push	{r3, lr}
    2352:	6803      	ldr	r3, [r0, #0]
    2354:	b2c9      	uxtb	r1, r1
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	4798      	blx	r3
    235a:	bd08      	pop	{r3, pc}

0000235c <_ZN14HardwareSerial5writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    235c:	b508      	push	{r3, lr}
    235e:	6803      	ldr	r3, [r0, #0]
    2360:	b2c9      	uxtb	r1, r1
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	4798      	blx	r3
    2366:	bd08      	pop	{r3, pc}

00002368 <_ZN14HardwareSerial5beginEm>:
#ifdef __cplusplus
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
    2368:	4803      	ldr	r0, [pc, #12]	; (2378 <_ZN14HardwareSerial5beginEm+0x10>)
    236a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    236e:	fbb0 f0f1 	udiv	r0, r0, r1
    2372:	f000 bce1 	b.w	2d38 <serial_begin>
    2376:	bf00      	nop
    2378:	08954400 	.word	0x08954400

0000237c <_ZN14HardwareSerial5beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    237c:	b510      	push	{r4, lr}
					  serial_begin(BAUD2DIV(baud));
    237e:	4806      	ldr	r0, [pc, #24]	; (2398 <_ZN14HardwareSerial5beginEmm+0x1c>)
    2380:	eb00 0051 	add.w	r0, r0, r1, lsr #1
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    2384:	4614      	mov	r4, r2
					  serial_begin(BAUD2DIV(baud));
    2386:	fbb0 f0f1 	udiv	r0, r0, r1
    238a:	f000 fcd5 	bl	2d38 <serial_begin>
					  serial_format(format); }
    238e:	4620      	mov	r0, r4
    2390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2394:	f000 bd1e 	b.w	2dd4 <serial_format>
    2398:	08954400 	.word	0x08954400

0000239c <_ZN14HardwareSerial3endEv>:
	virtual void end(void)		{ serial_end(); }
    239c:	f000 bd48 	b.w	2e30 <serial_end>

000023a0 <_ZN14HardwareSerial17transmitterEnableEh>:
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
    23a0:	4608      	mov	r0, r1
    23a2:	f000 bd71 	b.w	2e88 <serial_set_transmit_pin>

000023a6 <_ZN14HardwareSerial9availableEv>:
	virtual int available(void)     { return serial_available(); }
    23a6:	f000 be45 	b.w	3034 <serial_available>

000023aa <_ZN14HardwareSerial4peekEv>:
	virtual int peek(void)          { return serial_peek(); }
    23aa:	f000 be6d 	b.w	3088 <serial_peek>

000023ae <_ZN14HardwareSerial4readEv>:
	virtual int read(void)          { return serial_getchar(); }
    23ae:	f000 be51 	b.w	3054 <serial_getchar>

000023b2 <_ZN14HardwareSerial5flushEv>:
	virtual void flush(void)        { serial_flush(); }
    23b2:	f000 be35 	b.w	3020 <serial_flush>

000023b6 <_ZN14HardwareSerial5clearEv>:
	virtual void clear(void)	{ serial_clear(); }
    23b6:	f000 be7f 	b.w	30b8 <serial_clear>

000023ba <_ZN14HardwareSerial5writeEh>:
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
    23ba:	b508      	push	{r3, lr}
    23bc:	4608      	mov	r0, r1
    23be:	f000 fd7f 	bl	2ec0 <serial_putchar>
    23c2:	2001      	movs	r0, #1
    23c4:	bd08      	pop	{r3, pc}

000023c6 <_ZN14HardwareSerial9write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
    23c6:	b508      	push	{r3, lr}
    23c8:	4608      	mov	r0, r1
    23ca:	f000 fd79 	bl	2ec0 <serial_putchar>
    23ce:	2001      	movs	r0, #1
    23d0:	bd08      	pop	{r3, pc}

000023d2 <_ZN14HardwareSerial5writeEPKhj>:
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    23d2:	b510      	push	{r4, lr}
					{ serial_write(buffer, size); return size; }
    23d4:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    23d6:	4614      	mov	r4, r2
					{ serial_write(buffer, size); return size; }
    23d8:	4611      	mov	r1, r2
    23da:	f000 fdbf 	bl	2f5c <serial_write>
    23de:	4620      	mov	r0, r4
    23e0:	bd10      	pop	{r4, pc}

000023e2 <_ZN14HardwareSerial5writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    23e2:	b538      	push	{r3, r4, r5, lr}
    23e4:	4608      	mov	r0, r1
    23e6:	460d      	mov	r5, r1
    23e8:	f000 f9f6 	bl	27d8 <strlen>
    23ec:	4604      	mov	r4, r0
					  serial_write((const uint8_t *)str, len);
    23ee:	4621      	mov	r1, r4
    23f0:	4628      	mov	r0, r5
    23f2:	f000 fdb3 	bl	2f5c <serial_write>
					  return len; }
    23f6:	4620      	mov	r0, r4
    23f8:	bd38      	pop	{r3, r4, r5, pc}
    23fa:	ffff 4b04 	vtbl.8	d20, {d15-d18}, d4

000023fc <_GLOBAL__sub_I_Serial1>:
class __FlashStringHelper;

class Print
{
  public:
	Print() : write_error(0) {}
    23fc:	4b04      	ldr	r3, [pc, #16]	; (2410 <_GLOBAL__sub_I_Serial1+0x14>)
    23fe:	2200      	movs	r2, #0
    2400:	711a      	strb	r2, [r3, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    2402:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2406:	731a      	strb	r2, [r3, #12]

// C++ interface
//
#ifdef __cplusplus
#include "Stream.h"
class HardwareSerial : public Stream
    2408:	4a02      	ldr	r2, [pc, #8]	; (2414 <_GLOBAL__sub_I_Serial1+0x18>)
    240a:	6099      	str	r1, [r3, #8]
    240c:	601a      	str	r2, [r3, #0]
    240e:	4770      	bx	lr
    2410:	1fff90d0 	.word	0x1fff90d0
    2414:	00012c40 	.word	0x00012c40

00002418 <_ZN15HardwareSerial25writeEm>:
	virtual int peek(void)          { return serial2_peek(); }
	virtual int read(void)          { return serial2_getchar(); }
	virtual void flush(void)        { serial2_flush(); }
	virtual void clear(void)	{ serial2_clear(); }
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    2418:	b508      	push	{r3, lr}
    241a:	6803      	ldr	r3, [r0, #0]
    241c:	b2c9      	uxtb	r1, r1
    241e:	681b      	ldr	r3, [r3, #0]
    2420:	4798      	blx	r3
    2422:	bd08      	pop	{r3, pc}

00002424 <_ZN15HardwareSerial25writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    2424:	b508      	push	{r3, lr}
    2426:	6803      	ldr	r3, [r0, #0]
    2428:	b2c9      	uxtb	r1, r1
    242a:	681b      	ldr	r3, [r3, #0]
    242c:	4798      	blx	r3
    242e:	bd08      	pop	{r3, pc}

00002430 <_ZN15HardwareSerial25writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    2430:	b508      	push	{r3, lr}
    2432:	6803      	ldr	r3, [r0, #0]
    2434:	b2c9      	uxtb	r1, r1
    2436:	681b      	ldr	r3, [r3, #0]
    2438:	4798      	blx	r3
    243a:	bd08      	pop	{r3, pc}

0000243c <_ZN15HardwareSerial25writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    243c:	b508      	push	{r3, lr}
    243e:	6803      	ldr	r3, [r0, #0]
    2440:	b2c9      	uxtb	r1, r1
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	4798      	blx	r3
    2446:	bd08      	pop	{r3, pc}

00002448 <_ZN15HardwareSerial25beginEm>:
extern HardwareSerial Serial1;

class HardwareSerial2 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial2_begin(BAUD2DIV(baud)); }
    2448:	4803      	ldr	r0, [pc, #12]	; (2458 <_ZN15HardwareSerial25beginEm+0x10>)
    244a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    244e:	fbb0 f0f1 	udiv	r0, r0, r1
    2452:	f000 becd 	b.w	31f0 <serial2_begin>
    2456:	bf00      	nop
    2458:	08954400 	.word	0x08954400

0000245c <_ZN15HardwareSerial25beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    245c:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV(baud));
    245e:	4806      	ldr	r0, [pc, #24]	; (2478 <_ZN15HardwareSerial25beginEmm+0x1c>)
    2460:	eb00 0051 	add.w	r0, r0, r1, lsr #1

class HardwareSerial2 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial2_begin(BAUD2DIV(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    2464:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV(baud));
    2466:	fbb0 f0f1 	udiv	r0, r0, r1
    246a:	f000 fec1 	bl	31f0 <serial2_begin>
					  serial2_format(format); }
    246e:	4620      	mov	r0, r4
    2470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2474:	f000 bf00 	b.w	3278 <serial2_format>
    2478:	08954400 	.word	0x08954400

0000247c <_ZN15HardwareSerial23endEv>:
	virtual void end(void)		{ serial2_end(); }
    247c:	f000 bf2a 	b.w	32d4 <serial2_end>

00002480 <_ZN15HardwareSerial29availableEv>:
	virtual int available(void)     { return serial2_available(); }
    2480:	f000 bfb2 	b.w	33e8 <serial2_available>

00002484 <_ZN15HardwareSerial24peekEv>:
	virtual int peek(void)          { return serial2_peek(); }
    2484:	f000 bfda 	b.w	343c <serial2_peek>

00002488 <_ZN15HardwareSerial24readEv>:
	virtual int read(void)          { return serial2_getchar(); }
    2488:	f000 bfbe 	b.w	3408 <serial2_getchar>

0000248c <_ZN15HardwareSerial25flushEv>:
	virtual void flush(void)        { serial2_flush(); }
    248c:	f000 bfa2 	b.w	33d4 <serial2_flush>

00002490 <_ZN15HardwareSerial25clearEv>:
	virtual void clear(void)	{ serial2_clear(); }
    2490:	f000 bfec 	b.w	346c <serial2_clear>

00002494 <_ZN15HardwareSerial25writeEh>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    2494:	b508      	push	{r3, lr}
    2496:	4608      	mov	r0, r1
    2498:	f000 ff48 	bl	332c <serial2_putchar>
    249c:	2001      	movs	r0, #1
    249e:	bd08      	pop	{r3, pc}

000024a0 <_ZN15HardwareSerial29write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    24a0:	b508      	push	{r3, lr}
    24a2:	4608      	mov	r0, r1
    24a4:	f000 ff42 	bl	332c <serial2_putchar>
    24a8:	2001      	movs	r0, #1
    24aa:	bd08      	pop	{r3, pc}

000024ac <_ZN15HardwareSerial25writeEPKhj>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    24ac:	b510      	push	{r4, lr}
					{ serial2_write(buffer, size); return size; }
    24ae:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    24b0:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    24b2:	4611      	mov	r1, r2
    24b4:	f000 ff82 	bl	33bc <serial2_write>
    24b8:	4620      	mov	r0, r4
    24ba:	bd10      	pop	{r4, pc}

000024bc <_ZN15HardwareSerial25writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    24bc:	b538      	push	{r3, r4, r5, lr}
    24be:	4608      	mov	r0, r1
    24c0:	460d      	mov	r5, r1
    24c2:	f000 f989 	bl	27d8 <strlen>
    24c6:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    24c8:	4621      	mov	r1, r4
    24ca:	4628      	mov	r0, r5
    24cc:	f000 ff76 	bl	33bc <serial2_write>
					  return len; }
    24d0:	4620      	mov	r0, r4
    24d2:	bd38      	pop	{r3, r4, r5, pc}

000024d4 <_GLOBAL__sub_I_Serial2>:
    24d4:	4b04      	ldr	r3, [pc, #16]	; (24e8 <_GLOBAL__sub_I_Serial2+0x14>)
    24d6:	2200      	movs	r2, #0
    24d8:	711a      	strb	r2, [r3, #4]
    24da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    24de:	731a      	strb	r2, [r3, #12]
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
};
extern HardwareSerial Serial1;

class HardwareSerial2 : public HardwareSerial
    24e0:	4a02      	ldr	r2, [pc, #8]	; (24ec <_GLOBAL__sub_I_Serial2+0x18>)
    24e2:	6099      	str	r1, [r3, #8]
    24e4:	601a      	str	r2, [r3, #0]
    24e6:	4770      	bx	lr
    24e8:	1fff90e0 	.word	0x1fff90e0
    24ec:	00012c90 	.word	0x00012c90

000024f0 <_ZN15HardwareSerial35writeEm>:
	virtual int peek(void)          { return serial3_peek(); }
	virtual int read(void)          { return serial3_getchar(); }
	virtual void flush(void)        { serial3_flush(); }
	virtual void clear(void)	{ serial3_clear(); }
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    24f0:	b508      	push	{r3, lr}
    24f2:	6803      	ldr	r3, [r0, #0]
    24f4:	b2c9      	uxtb	r1, r1
    24f6:	681b      	ldr	r3, [r3, #0]
    24f8:	4798      	blx	r3
    24fa:	bd08      	pop	{r3, pc}

000024fc <_ZN15HardwareSerial35writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    24fc:	b508      	push	{r3, lr}
    24fe:	6803      	ldr	r3, [r0, #0]
    2500:	b2c9      	uxtb	r1, r1
    2502:	681b      	ldr	r3, [r3, #0]
    2504:	4798      	blx	r3
    2506:	bd08      	pop	{r3, pc}

00002508 <_ZN15HardwareSerial35writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    2508:	b508      	push	{r3, lr}
    250a:	6803      	ldr	r3, [r0, #0]
    250c:	b2c9      	uxtb	r1, r1
    250e:	681b      	ldr	r3, [r3, #0]
    2510:	4798      	blx	r3
    2512:	bd08      	pop	{r3, pc}

00002514 <_ZN15HardwareSerial35writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    2514:	b508      	push	{r3, lr}
    2516:	6803      	ldr	r3, [r0, #0]
    2518:	b2c9      	uxtb	r1, r1
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	4798      	blx	r3
    251e:	bd08      	pop	{r3, pc}

00002520 <_ZN15HardwareSerial35beginEm>:
extern HardwareSerial2 Serial2;

class HardwareSerial3 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
    2520:	4803      	ldr	r0, [pc, #12]	; (2530 <_ZN15HardwareSerial35beginEm+0x10>)
    2522:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    2526:	fbb0 f0f1 	udiv	r0, r0, r1
    252a:	f000 bffb 	b.w	3524 <serial3_begin>
    252e:	bf00      	nop
    2530:	044aa200 	.word	0x044aa200

00002534 <_ZN15HardwareSerial35beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    2534:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    2536:	4806      	ldr	r0, [pc, #24]	; (2550 <_ZN15HardwareSerial35beginEmm+0x1c>)
    2538:	eb00 0051 	add.w	r0, r0, r1, lsr #1

class HardwareSerial3 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    253c:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    253e:	fbb0 f0f1 	udiv	r0, r0, r1
    2542:	f000 ffef 	bl	3524 <serial3_begin>
					  serial3_format(format); }
    2546:	4620      	mov	r0, r4
    2548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    254c:	f001 b82e 	b.w	35ac <serial3_format>
    2550:	044aa200 	.word	0x044aa200

00002554 <_ZN15HardwareSerial33endEv>:
	virtual void end(void)          { serial3_end(); }
    2554:	f001 b858 	b.w	3608 <serial3_end>

00002558 <_ZN15HardwareSerial39availableEv>:
	virtual int available(void)     { return serial3_available(); }
    2558:	f001 b8e0 	b.w	371c <serial3_available>

0000255c <_ZN15HardwareSerial34peekEv>:
	virtual int peek(void)          { return serial3_peek(); }
    255c:	f001 b908 	b.w	3770 <serial3_peek>

00002560 <_ZN15HardwareSerial34readEv>:
	virtual int read(void)          { return serial3_getchar(); }
    2560:	f001 b8ec 	b.w	373c <serial3_getchar>

00002564 <_ZN15HardwareSerial35flushEv>:
	virtual void flush(void)        { serial3_flush(); }
    2564:	f001 b8d0 	b.w	3708 <serial3_flush>

00002568 <_ZN15HardwareSerial35clearEv>:
	virtual void clear(void)	{ serial3_clear(); }
    2568:	f001 b91a 	b.w	37a0 <serial3_clear>

0000256c <_ZN15HardwareSerial35writeEh>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    256c:	b508      	push	{r3, lr}
    256e:	4608      	mov	r0, r1
    2570:	f001 f876 	bl	3660 <serial3_putchar>
    2574:	2001      	movs	r0, #1
    2576:	bd08      	pop	{r3, pc}

00002578 <_ZN15HardwareSerial39write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    2578:	b508      	push	{r3, lr}
    257a:	4608      	mov	r0, r1
    257c:	f001 f870 	bl	3660 <serial3_putchar>
    2580:	2001      	movs	r0, #1
    2582:	bd08      	pop	{r3, pc}

00002584 <_ZN15HardwareSerial35writeEPKhj>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    2584:	b510      	push	{r4, lr}
					{ serial3_write(buffer, size); return size; }
    2586:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    2588:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    258a:	4611      	mov	r1, r2
    258c:	f001 f8b0 	bl	36f0 <serial3_write>
    2590:	4620      	mov	r0, r4
    2592:	bd10      	pop	{r4, pc}

00002594 <_ZN15HardwareSerial35writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    2594:	b538      	push	{r3, r4, r5, lr}
    2596:	4608      	mov	r0, r1
    2598:	460d      	mov	r5, r1
    259a:	f000 f91d 	bl	27d8 <strlen>
    259e:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    25a0:	4621      	mov	r1, r4
    25a2:	4628      	mov	r0, r5
    25a4:	f001 f8a4 	bl	36f0 <serial3_write>
					  return len; }
    25a8:	4620      	mov	r0, r4
    25aa:	bd38      	pop	{r3, r4, r5, pc}

000025ac <_GLOBAL__sub_I_Serial3>:
    25ac:	4b04      	ldr	r3, [pc, #16]	; (25c0 <_GLOBAL__sub_I_Serial3+0x14>)
    25ae:	2200      	movs	r2, #0
    25b0:	711a      	strb	r2, [r3, #4]
    25b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    25b6:	731a      	strb	r2, [r3, #12]
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
};
extern HardwareSerial2 Serial2;

class HardwareSerial3 : public HardwareSerial
    25b8:	4a02      	ldr	r2, [pc, #8]	; (25c4 <_GLOBAL__sub_I_Serial3+0x18>)
    25ba:	6099      	str	r1, [r3, #8]
    25bc:	601a      	str	r2, [r3, #0]
    25be:	4770      	bx	lr
    25c0:	1fff90f0 	.word	0x1fff90f0
    25c4:	00012ce0 	.word	0x00012ce0

000025c8 <pit0_isr>:
// these are the ISRs (Interrupt Service Routines) that get
// called by each PIT timer when it fires. they're defined here
// so that they can auto-clear themselves and so the user can
// specify a custom ISR and reassign it as needed
// ------------------------------------------------------------
void pit0_isr() { PIT_TFLG0 = 1; IntervalTimer::PIT_ISR[0](); }
    25c8:	b508      	push	{r3, lr}
    25ca:	4b03      	ldr	r3, [pc, #12]	; (25d8 <pit0_isr+0x10>)
    25cc:	2201      	movs	r2, #1
    25ce:	601a      	str	r2, [r3, #0]
    25d0:	4b02      	ldr	r3, [pc, #8]	; (25dc <pit0_isr+0x14>)
    25d2:	681b      	ldr	r3, [r3, #0]
    25d4:	4798      	blx	r3
    25d6:	bd08      	pop	{r3, pc}
    25d8:	4003710c 	.word	0x4003710c
    25dc:	1fff9108 	.word	0x1fff9108

000025e0 <pit1_isr>:
void pit1_isr() { PIT_TFLG1 = 1; IntervalTimer::PIT_ISR[1](); }
    25e0:	b508      	push	{r3, lr}
    25e2:	4b03      	ldr	r3, [pc, #12]	; (25f0 <pit1_isr+0x10>)
    25e4:	2201      	movs	r2, #1
    25e6:	601a      	str	r2, [r3, #0]
    25e8:	4b02      	ldr	r3, [pc, #8]	; (25f4 <pit1_isr+0x14>)
    25ea:	685b      	ldr	r3, [r3, #4]
    25ec:	4798      	blx	r3
    25ee:	bd08      	pop	{r3, pc}
    25f0:	4003711c 	.word	0x4003711c
    25f4:	1fff9108 	.word	0x1fff9108

000025f8 <pit2_isr>:
void pit2_isr() { PIT_TFLG2 = 1; IntervalTimer::PIT_ISR[2](); }
    25f8:	b508      	push	{r3, lr}
    25fa:	4b03      	ldr	r3, [pc, #12]	; (2608 <pit2_isr+0x10>)
    25fc:	2201      	movs	r2, #1
    25fe:	601a      	str	r2, [r3, #0]
    2600:	4b02      	ldr	r3, [pc, #8]	; (260c <pit2_isr+0x14>)
    2602:	689b      	ldr	r3, [r3, #8]
    2604:	4798      	blx	r3
    2606:	bd08      	pop	{r3, pc}
    2608:	4003712c 	.word	0x4003712c
    260c:	1fff9108 	.word	0x1fff9108

00002610 <pit3_isr>:
void pit3_isr() { PIT_TFLG3 = 1; IntervalTimer::PIT_ISR[3](); }
    2610:	b508      	push	{r3, lr}
    2612:	4b03      	ldr	r3, [pc, #12]	; (2620 <pit3_isr+0x10>)
    2614:	2201      	movs	r2, #1
    2616:	601a      	str	r2, [r3, #0]
    2618:	4b02      	ldr	r3, [pc, #8]	; (2624 <pit3_isr+0x14>)
    261a:	68db      	ldr	r3, [r3, #12]
    261c:	4798      	blx	r3
    261e:	bd08      	pop	{r3, pc}
    2620:	4003713c 	.word	0x4003713c
    2624:	1fff9108 	.word	0x1fff9108

00002628 <_ZN13IntervalTimer11disable_PITEv>:

// ------------------------------------------------------------
// disables the master PIT reg, the PIT clock bit, and unsets flag
// ------------------------------------------------------------
void IntervalTimer::disable_PIT() {
  PIT_MCR = 1;
    2628:	4b06      	ldr	r3, [pc, #24]	; (2644 <_ZN13IntervalTimer11disable_PITEv+0x1c>)
    262a:	2201      	movs	r2, #1
    262c:	601a      	str	r2, [r3, #0]
  SIM_SCGC6 &= ~SIM_SCGC6_PIT;
    262e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2632:	333c      	adds	r3, #60	; 0x3c
    2634:	681a      	ldr	r2, [r3, #0]
    2636:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    263a:	601a      	str	r2, [r3, #0]
  PIT_enabled = false;
    263c:	4b02      	ldr	r3, [pc, #8]	; (2648 <_ZN13IntervalTimer11disable_PITEv+0x20>)
    263e:	2200      	movs	r2, #0
    2640:	701a      	strb	r2, [r3, #0]
    2642:	4770      	bx	lr
    2644:	40037000 	.word	0x40037000
    2648:	1fff9104 	.word	0x1fff9104

0000264c <_ZN13IntervalTimer8stop_PITEv>:
// also, if no PITs remain in use, disables the core PIT clock
// ------------------------------------------------------------
void IntervalTimer::stop_PIT() {
  
  // disable interrupt and PIT
  NVIC_DISABLE_IRQ(IRQ_PIT_CH);
    264c:	7b03      	ldrb	r3, [r0, #12]
    264e:	2201      	movs	r2, #1
    2650:	1159      	asrs	r1, r3, #5
    2652:	f003 031f 	and.w	r3, r3, #31
    2656:	fa02 f303 	lsl.w	r3, r2, r3
    265a:	4a08      	ldr	r2, [pc, #32]	; (267c <_ZN13IntervalTimer8stop_PITEv+0x30>)
    265c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  *PIT_TCTRL = 0;
    2660:	6882      	ldr	r2, [r0, #8]
    2662:	2300      	movs	r3, #0
    2664:	6013      	str	r3, [r2, #0]
  
  // free PIT for future use
  PIT_used[PIT_id] = false;
    2666:	7841      	ldrb	r1, [r0, #1]
    2668:	4a05      	ldr	r2, [pc, #20]	; (2680 <_ZN13IntervalTimer8stop_PITEv+0x34>)
    266a:	5453      	strb	r3, [r2, r1]
  
  // check if we're still using any PIT
  for (uint8_t id = 0; id < NUM_PIT; id++) {
    if (PIT_used[id]) return;
    266c:	5cd1      	ldrb	r1, [r2, r3]
    266e:	b921      	cbnz	r1, 267a <_ZN13IntervalTimer8stop_PITEv+0x2e>
    2670:	3301      	adds	r3, #1
  
  // free PIT for future use
  PIT_used[PIT_id] = false;
  
  // check if we're still using any PIT
  for (uint8_t id = 0; id < NUM_PIT; id++) {
    2672:	2b04      	cmp	r3, #4
    2674:	d1fa      	bne.n	266c <_ZN13IntervalTimer8stop_PITEv+0x20>
    if (PIT_used[id]) return;
  }
  
  // none used, disable PIT clock
  disable_PIT();
    2676:	f7ff bfd7 	b.w	2628 <_ZN13IntervalTimer11disable_PITEv>
    267a:	4770      	bx	lr
    267c:	e000e180 	.word	0xe000e180
    2680:	1fff9100 	.word	0x1fff9100

00002684 <_ZN13IntervalTimer3endEv>:
// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
  if (status == TIMER_PIT) stop_PIT();
    2684:	7803      	ldrb	r3, [r0, #0]

// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
    2686:	b510      	push	{r4, lr}
    2688:	4604      	mov	r4, r0
  if (status == TIMER_PIT) stop_PIT();
    268a:	b10b      	cbz	r3, 2690 <_ZN13IntervalTimer3endEv+0xc>
    268c:	f7ff ffde 	bl	264c <_ZN13IntervalTimer8stop_PITEv>
  status = TIMER_OFF;
    2690:	2300      	movs	r3, #0
    2692:	7023      	strb	r3, [r4, #0]
    2694:	bd10      	pop	{r4, pc}

00002696 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    2696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t n = 0;
    for (int i =0; i < 3; i++)
    269a:	2400      	movs	r4, #0
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    269c:	4607      	mov	r7, r0
    269e:	460d      	mov	r5, r1
    size_t n = 0;
    26a0:	4626      	mov	r6, r4
    26a2:	193b      	adds	r3, r7, r4
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    26a4:	220a      	movs	r2, #10
    26a6:	7919      	ldrb	r1, [r3, #4]
    26a8:	4628      	mov	r0, r5
    26aa:	2300      	movs	r3, #0
    26ac:	f000 fb0b 	bl	2cc6 <_ZN5Print11printNumberEmhh>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
    26b0:	682b      	ldr	r3, [r5, #0]
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    26b2:	4680      	mov	r8, r0
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
    26b4:	681b      	ldr	r3, [r3, #0]
    26b6:	4628      	mov	r0, r5
    26b8:	212e      	movs	r1, #46	; 0x2e
    26ba:	4798      	blx	r3
    for (int i =0; i < 3; i++)
    26bc:	3401      	adds	r4, #1
    {
        n += p.print(_address[i], DEC);
    26be:	4440      	add	r0, r8
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    26c0:	2c03      	cmp	r4, #3
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    26c2:	4406      	add	r6, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    26c4:	d1ed      	bne.n	26a2 <_ZNK9IPAddress7printToER5Print+0xc>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    26c6:	4628      	mov	r0, r5
    26c8:	79f9      	ldrb	r1, [r7, #7]
    26ca:	220a      	movs	r2, #10
    26cc:	2300      	movs	r3, #0
    26ce:	f000 fafa 	bl	2cc6 <_ZN5Print11printNumberEmhh>
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    26d2:	4430      	add	r0, r6
    26d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000026d8 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    26d8:	4b04      	ldr	r3, [pc, #16]	; (26ec <_GLOBAL__sub_I__ZN9IPAddressC2Ev+0x14>)
    26da:	4a05      	ldr	r2, [pc, #20]	; (26f0 <_GLOBAL__sub_I__ZN9IPAddressC2Ev+0x18>)
    26dc:	601a      	str	r2, [r3, #0]
{
    _address[0] = first_octet;
    26de:	2200      	movs	r2, #0
    26e0:	711a      	strb	r2, [r3, #4]
    _address[1] = second_octet;
    26e2:	715a      	strb	r2, [r3, #5]
    _address[2] = third_octet;
    26e4:	719a      	strb	r2, [r3, #6]
    _address[3] = fourth_octet;
    26e6:	71da      	strb	r2, [r3, #7]
    26e8:	4770      	bx	lr
    26ea:	bf00      	nop
    26ec:	1fff9118 	.word	0x1fff9118
    26f0:	00012d30 	.word	0x00012d30

000026f4 <systick_default_isr>:
}

extern volatile uint32_t systick_millis_count;
void systick_default_isr(void)
{
	systick_millis_count++;
    26f4:	4b02      	ldr	r3, [pc, #8]	; (2700 <systick_default_isr+0xc>)
    26f6:	681a      	ldr	r2, [r3, #0]
    26f8:	3201      	adds	r2, #1
    26fa:	601a      	str	r2, [r3, #0]
    26fc:	4770      	bx	lr
    26fe:	bf00      	nop
    2700:	1fff91a8 	.word	0x1fff91a8

00002704 <fault_isr>:
void _init_Teensyduino_internal_(void);
void __libc_init_array(void);


void fault_isr(void)
{
    2704:	b508      	push	{r3, lr}
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2706:	4c0b      	ldr	r4, [pc, #44]	; (2734 <fault_isr+0x30>)
    2708:	6823      	ldr	r3, [r4, #0]
    270a:	0358      	lsls	r0, r3, #13
    270c:	d501      	bpl.n	2712 <fault_isr+0xe>
    270e:	f001 f9b9 	bl	3a84 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2712:	6823      	ldr	r3, [r4, #0]
    2714:	0559      	lsls	r1, r3, #21
    2716:	d501      	bpl.n	271c <fault_isr+0x18>
    2718:	f000 fcee 	bl	30f8 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    271c:	6823      	ldr	r3, [r4, #0]
    271e:	051a      	lsls	r2, r3, #20
    2720:	d501      	bpl.n	2726 <fault_isr+0x22>
    2722:	f000 fead 	bl	3480 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2726:	6823      	ldr	r3, [r4, #0]
    2728:	04db      	lsls	r3, r3, #19
    272a:	d5ec      	bpl.n	2706 <fault_isr+0x2>
    272c:	f001 f842 	bl	37b4 <uart2_status_isr>
    2730:	e7e9      	b.n	2706 <fault_isr+0x2>
    2732:	bf00      	nop
    2734:	40048034 	.word	0x40048034

00002738 <unused_isr>:
	}
}

void unused_isr(void)
{
    2738:	b508      	push	{r3, lr}
	fault_isr();
    273a:	f7ff ffe3 	bl	2704 <fault_isr>
    273e:	ffff 4b01 	vtbl.8	d20, {d15-d18}, d1

00002740 <startup_early_hook>:
#define TIME_T 1349049600 // default 1 Oct 2012 (never used, Arduino sets this)
#endif
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) { WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE; }
    2740:	4b01      	ldr	r3, [pc, #4]	; (2748 <startup_early_hook+0x8>)
    2742:	2210      	movs	r2, #16
    2744:	801a      	strh	r2, [r3, #0]
    2746:	4770      	bx	lr
    2748:	40052000 	.word	0x40052000

0000274c <startup_late_hook>:
static void startup_default_late_hook(void) {}
    274c:	4770      	bx	lr

0000274e <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    274e:	2000      	movs	r0, #0
    2750:	4770      	bx	lr

00002752 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    2752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2756:	4770      	bx	lr

00002758 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    275c:	604b      	str	r3, [r1, #4]
	return 0;
}
    275e:	2000      	movs	r0, #0
    2760:	4770      	bx	lr

00002762 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    2762:	2001      	movs	r0, #1
    2764:	4770      	bx	lr

00002766 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    2766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    276a:	4770      	bx	lr

0000276c <_exit>:

__attribute__((weak)) 
void _exit(int status)
{
    276c:	e7fe      	b.n	276c <_exit>

0000276e <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    276e:	e7fe      	b.n	276e <__cxa_pure_virtual>

00002770 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    2770:	7800      	ldrb	r0, [r0, #0]
}
    2772:	f1d0 0001 	rsbs	r0, r0, #1
    2776:	bf38      	it	cc
    2778:	2000      	movcc	r0, #0
    277a:	4770      	bx	lr

0000277c <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    277c:	2301      	movs	r3, #1
    277e:	7003      	strb	r3, [r0, #0]
    2780:	4770      	bx	lr
    2782:	ffff f3ef 			; <UNDEFINED> instruction: 0xfffff3ef

00002784 <nvic_execution_priority>:
	int priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    2784:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    2788:	b99b      	cbnz	r3, 27b2 <nvic_execution_priority+0x2e>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    278a:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    278e:	b998      	cbnz	r0, 27b8 <nvic_execution_priority+0x34>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2790:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    2794:	b123      	cbz	r3, 27a0 <nvic_execution_priority+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    2796:	2b0f      	cmp	r3, #15
    2798:	d904      	bls.n	27a4 <nvic_execution_priority+0x20>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    279a:	4a08      	ldr	r2, [pc, #32]	; (27bc <nvic_execution_priority+0x38>)
    279c:	5c98      	ldrb	r0, [r3, r2]
    279e:	e001      	b.n	27a4 <nvic_execution_priority+0x20>
	*g = 1;
}

int nvic_execution_priority(void)
{
	int priority=256;
    27a0:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    27a4:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    27a8:	b13b      	cbz	r3, 27ba <nvic_execution_priority+0x36>
    27aa:	4283      	cmp	r3, r0
    27ac:	bf38      	it	cc
    27ae:	4618      	movcc	r0, r3
    27b0:	4770      	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    27b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    27b6:	4770      	bx	lr
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
    27b8:	4618      	mov	r0, r3
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
	if (basepri > 0 && basepri < priority) priority = basepri;
	return priority;
}
    27ba:	4770      	bx	lr
    27bc:	e000e3f0 	.word	0xe000e3f0

000027c0 <_sbrk>:
	return 0;
}

void * _sbrk(int incr)
{
	char *prev = __brkval;
    27c0:	4a02      	ldr	r2, [pc, #8]	; (27cc <_sbrk+0xc>)
    27c2:	6813      	ldr	r3, [r2, #0]
	__brkval += incr;
    27c4:	4418      	add	r0, r3
    27c6:	6010      	str	r0, [r2, #0]
	return prev;
}
    27c8:	4618      	mov	r0, r3
    27ca:	4770      	bx	lr
    27cc:	1fff8418 	.word	0x1fff8418

000027d0 <_kill>:

int _kill(int pid, int sig)
{
	// duuh.
	return 0;
}
    27d0:	2000      	movs	r0, #0
    27d2:	4770      	bx	lr

000027d4 <_getpid>:

int _getpid()
{
	return 0;
}
    27d4:	2000      	movs	r0, #0
    27d6:	4770      	bx	lr

000027d8 <strlen>:
#include <string.h>
#include <stdio.h>

size_t strlen(const char *s)
{
	size_t n=0;
    27d8:	2300      	movs	r3, #0

	while (*s++) n++;
    27da:	5cc2      	ldrb	r2, [r0, r3]
    27dc:	b10a      	cbz	r2, 27e2 <strlen+0xa>
    27de:	3301      	adds	r3, #1
    27e0:	e7fb      	b.n	27da <strlen+0x2>
	return n;
}
    27e2:	4618      	mov	r0, r3
    27e4:	4770      	bx	lr

000027e6 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix) 	
{
    27e6:	b510      	push	{r4, lr}
	unsigned digit;
	int i=0, j;
    27e8:	2300      	movs	r3, #0
	char t;

	while (1) {
		digit = val % radix;
    27ea:	fbb0 f4f2 	udiv	r4, r0, r2
    27ee:	fb02 0014 	mls	r0, r2, r4, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    27f2:	2809      	cmp	r0, #9
    27f4:	bf94      	ite	ls
    27f6:	3030      	addls	r0, #48	; 0x30
    27f8:	3037      	addhi	r0, #55	; 0x37
    27fa:	b2c0      	uxtb	r0, r0
    27fc:	54c8      	strb	r0, [r1, r3]
		val /= radix;
		if (val == 0) break;
    27fe:	4620      	mov	r0, r4
    2800:	b10c      	cbz	r4, 2806 <ultoa+0x20>
		i++;
    2802:	3301      	adds	r3, #1
	}
    2804:	e7f1      	b.n	27ea <ultoa+0x4>
	buf[i + 1] = 0;
    2806:	18ca      	adds	r2, r1, r3
    2808:	7054      	strb	r4, [r2, #1]
	for (j=0; j < i; j++, i--) {
    280a:	4622      	mov	r2, r4
    280c:	429a      	cmp	r2, r3
    280e:	da06      	bge.n	281e <ultoa+0x38>
		t = buf[j];
    2810:	5c88      	ldrb	r0, [r1, r2]
		buf[j] = buf[i];
    2812:	5ccc      	ldrb	r4, [r1, r3]
    2814:	548c      	strb	r4, [r1, r2]
		buf[i] = t;
    2816:	54c8      	strb	r0, [r1, r3]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2818:	3201      	adds	r2, #1
    281a:	3b01      	subs	r3, #1
    281c:	e7f6      	b.n	280c <ultoa+0x26>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    281e:	4608      	mov	r0, r1
    2820:	bd10      	pop	{r4, pc}
    2822:	ffff 4b08 	vtbl.8	d20, {d15-d18}, d8

00002824 <init_pin_interrupts>:
volatile static voidFuncPtr intFunc[CORE_NUM_DIGITAL];

void init_pin_interrupts(void)
{
	//SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2824:	4b08      	ldr	r3, [pc, #32]	; (2848 <init_pin_interrupts+0x24>)
    2826:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    282a:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    282c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2830:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2832:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    2836:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2838:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    283c:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    283e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    2842:	601a      	str	r2, [r3, #0]
    2844:	4770      	bx	lr
    2846:	bf00      	nop
    2848:	e000e108 	.word	0xe000e108

0000284c <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    284c:	2821      	cmp	r0, #33	; 0x21
	// so if the user puts lots of slow code on attachInterrupt
	// fast interrupts will still be serviced quickly?
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    284e:	b530      	push	{r4, r5, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    2850:	d821      	bhi.n	2896 <attachInterrupt+0x4a>
	switch (mode) {
    2852:	2a04      	cmp	r2, #4
    2854:	d81f      	bhi.n	2896 <attachInterrupt+0x4a>
    2856:	e8df f002 	tbb	[pc, r2]
    285a:	0907      	.short	0x0907
    285c:	0b05      	.short	0x0b05
    285e:	03          	.byte	0x03
    285f:	00          	.byte	0x00
	  case CHANGE:	mask = 0x0B; break;
    2860:	230b      	movs	r3, #11
    2862:	e006      	b.n	2872 <attachInterrupt+0x26>
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
    2864:	230a      	movs	r3, #10
    2866:	e004      	b.n	2872 <attachInterrupt+0x26>
	  case LOW:	mask = 0x08; break;
    2868:	2308      	movs	r3, #8
    286a:	e002      	b.n	2872 <attachInterrupt+0x26>
	  case HIGH:	mask = 0x0C; break;
    286c:	230c      	movs	r3, #12
    286e:	e000      	b.n	2872 <attachInterrupt+0x26>
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
    2870:	2309      	movs	r3, #9
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);
    2872:	4a09      	ldr	r2, [pc, #36]	; (2898 <attachInterrupt+0x4c>)
    2874:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    2878:	6852      	ldr	r2, [r2, #4]

	__disable_irq();
    287a:	b672      	cpsid	i
	cfg = *config;
    287c:	6814      	ldr	r4, [r2, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	intFunc[pin] = function;	// set the function pointer
    287e:	4d07      	ldr	r5, [pc, #28]	; (289c <attachInterrupt+0x50>)
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);

	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
    2880:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
	*config = cfg;
    2884:	6014      	str	r4, [r2, #0]
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
    2886:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	intFunc[pin] = function;	// set the function pointer
	cfg |= mask;
    288a:	ea44 4303 	orr.w	r3, r4, r3, lsl #16

	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	intFunc[pin] = function;	// set the function pointer
    288e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
    2892:	6013      	str	r3, [r2, #0]
	__enable_irq();
    2894:	b662      	cpsie	i
    2896:	bd30      	pop	{r4, r5, pc}
    2898:	00012d38 	.word	0x00012d38
    289c:	1fff9120 	.word	0x1fff9120

000028a0 <porta_isr>:
}


void porta_isr(void)
{
	uint32_t isfr = PORTA_ISFR;
    28a0:	4b11      	ldr	r3, [pc, #68]	; (28e8 <porta_isr+0x48>)
	__enable_irq();
}


void porta_isr(void)
{
    28a2:	b510      	push	{r4, lr}
	uint32_t isfr = PORTA_ISFR;
    28a4:	681c      	ldr	r4, [r3, #0]
	PORTA_ISFR = isfr;
    28a6:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN3_BITMASK) && intFunc[3]) intFunc[3]();
    28a8:	04e0      	lsls	r0, r4, #19
    28aa:	d504      	bpl.n	28b6 <porta_isr+0x16>
    28ac:	4b0f      	ldr	r3, [pc, #60]	; (28ec <porta_isr+0x4c>)
    28ae:	68da      	ldr	r2, [r3, #12]
    28b0:	b10a      	cbz	r2, 28b6 <porta_isr+0x16>
    28b2:	68db      	ldr	r3, [r3, #12]
    28b4:	4798      	blx	r3
	if ((isfr & CORE_PIN4_BITMASK) && intFunc[4]) intFunc[4]();
    28b6:	04a1      	lsls	r1, r4, #18
    28b8:	d504      	bpl.n	28c4 <porta_isr+0x24>
    28ba:	4b0c      	ldr	r3, [pc, #48]	; (28ec <porta_isr+0x4c>)
    28bc:	691a      	ldr	r2, [r3, #16]
    28be:	b10a      	cbz	r2, 28c4 <porta_isr+0x24>
    28c0:	691b      	ldr	r3, [r3, #16]
    28c2:	4798      	blx	r3
	if ((isfr & CORE_PIN24_BITMASK) && intFunc[24]) intFunc[24]();
    28c4:	06a2      	lsls	r2, r4, #26
    28c6:	d504      	bpl.n	28d2 <porta_isr+0x32>
    28c8:	4b08      	ldr	r3, [pc, #32]	; (28ec <porta_isr+0x4c>)
    28ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    28cc:	b10a      	cbz	r2, 28d2 <porta_isr+0x32>
    28ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    28d0:	4798      	blx	r3
	if ((isfr & CORE_PIN33_BITMASK) && intFunc[33]) intFunc[33]();
    28d2:	06e3      	lsls	r3, r4, #27
    28d4:	d506      	bpl.n	28e4 <porta_isr+0x44>
    28d6:	4b05      	ldr	r3, [pc, #20]	; (28ec <porta_isr+0x4c>)
    28d8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    28dc:	b112      	cbz	r2, 28e4 <porta_isr+0x44>
    28de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    28e2:	4798      	blx	r3
    28e4:	bd10      	pop	{r4, pc}
    28e6:	bf00      	nop
    28e8:	400490a0 	.word	0x400490a0
    28ec:	1fff9120 	.word	0x1fff9120

000028f0 <portb_isr>:
}

void portb_isr(void)
{
	uint32_t isfr = PORTB_ISFR;
    28f0:	4b1f      	ldr	r3, [pc, #124]	; (2970 <portb_isr+0x80>)
	if ((isfr & CORE_PIN24_BITMASK) && intFunc[24]) intFunc[24]();
	if ((isfr & CORE_PIN33_BITMASK) && intFunc[33]) intFunc[33]();
}

void portb_isr(void)
{
    28f2:	b510      	push	{r4, lr}
	uint32_t isfr = PORTB_ISFR;
    28f4:	681c      	ldr	r4, [r3, #0]
	PORTB_ISFR = isfr;
    28f6:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN0_BITMASK) && intFunc[0]) intFunc[0]();
    28f8:	03e0      	lsls	r0, r4, #15
    28fa:	d504      	bpl.n	2906 <portb_isr+0x16>
    28fc:	4b1d      	ldr	r3, [pc, #116]	; (2974 <portb_isr+0x84>)
    28fe:	681a      	ldr	r2, [r3, #0]
    2900:	b10a      	cbz	r2, 2906 <portb_isr+0x16>
    2902:	681b      	ldr	r3, [r3, #0]
    2904:	4798      	blx	r3
	if ((isfr & CORE_PIN1_BITMASK) && intFunc[1]) intFunc[1]();
    2906:	03a1      	lsls	r1, r4, #14
    2908:	d504      	bpl.n	2914 <portb_isr+0x24>
    290a:	4b1a      	ldr	r3, [pc, #104]	; (2974 <portb_isr+0x84>)
    290c:	685a      	ldr	r2, [r3, #4]
    290e:	b10a      	cbz	r2, 2914 <portb_isr+0x24>
    2910:	685b      	ldr	r3, [r3, #4]
    2912:	4798      	blx	r3
	if ((isfr & CORE_PIN16_BITMASK) && intFunc[16]) intFunc[16]();
    2914:	07e2      	lsls	r2, r4, #31
    2916:	d504      	bpl.n	2922 <portb_isr+0x32>
    2918:	4b16      	ldr	r3, [pc, #88]	; (2974 <portb_isr+0x84>)
    291a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    291c:	b10a      	cbz	r2, 2922 <portb_isr+0x32>
    291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2920:	4798      	blx	r3
	if ((isfr & CORE_PIN17_BITMASK) && intFunc[17]) intFunc[17]();
    2922:	07a3      	lsls	r3, r4, #30
    2924:	d504      	bpl.n	2930 <portb_isr+0x40>
    2926:	4b13      	ldr	r3, [pc, #76]	; (2974 <portb_isr+0x84>)
    2928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    292a:	b10a      	cbz	r2, 2930 <portb_isr+0x40>
    292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    292e:	4798      	blx	r3
	if ((isfr & CORE_PIN18_BITMASK) && intFunc[18]) intFunc[18]();
    2930:	0720      	lsls	r0, r4, #28
    2932:	d504      	bpl.n	293e <portb_isr+0x4e>
    2934:	4b0f      	ldr	r3, [pc, #60]	; (2974 <portb_isr+0x84>)
    2936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    2938:	b10a      	cbz	r2, 293e <portb_isr+0x4e>
    293a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    293c:	4798      	blx	r3
	if ((isfr & CORE_PIN19_BITMASK) && intFunc[19]) intFunc[19]();
    293e:	0761      	lsls	r1, r4, #29
    2940:	d504      	bpl.n	294c <portb_isr+0x5c>
    2942:	4b0c      	ldr	r3, [pc, #48]	; (2974 <portb_isr+0x84>)
    2944:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    2946:	b10a      	cbz	r2, 294c <portb_isr+0x5c>
    2948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    294a:	4798      	blx	r3
	if ((isfr & CORE_PIN25_BITMASK) && intFunc[25]) intFunc[25]();
    294c:	0322      	lsls	r2, r4, #12
    294e:	d504      	bpl.n	295a <portb_isr+0x6a>
    2950:	4b08      	ldr	r3, [pc, #32]	; (2974 <portb_isr+0x84>)
    2952:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    2954:	b10a      	cbz	r2, 295a <portb_isr+0x6a>
    2956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2958:	4798      	blx	r3
	if ((isfr & CORE_PIN32_BITMASK) && intFunc[32]) intFunc[32]();
    295a:	0363      	lsls	r3, r4, #13
    295c:	d506      	bpl.n	296c <portb_isr+0x7c>
    295e:	4b05      	ldr	r3, [pc, #20]	; (2974 <portb_isr+0x84>)
    2960:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    2964:	b112      	cbz	r2, 296c <portb_isr+0x7c>
    2966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    296a:	4798      	blx	r3
    296c:	bd10      	pop	{r4, pc}
    296e:	bf00      	nop
    2970:	4004a0a0 	.word	0x4004a0a0
    2974:	1fff9120 	.word	0x1fff9120

00002978 <portc_isr>:
}

void portc_isr(void)
{
	// TODO: these are inefficent.  Use CLZ somehow....
	uint32_t isfr = PORTC_ISFR;
    2978:	4b2c      	ldr	r3, [pc, #176]	; (2a2c <portc_isr+0xb4>)
	if ((isfr & CORE_PIN25_BITMASK) && intFunc[25]) intFunc[25]();
	if ((isfr & CORE_PIN32_BITMASK) && intFunc[32]) intFunc[32]();
}

void portc_isr(void)
{
    297a:	b510      	push	{r4, lr}
	// TODO: these are inefficent.  Use CLZ somehow....
	uint32_t isfr = PORTC_ISFR;
    297c:	681c      	ldr	r4, [r3, #0]
	PORTC_ISFR = isfr;
    297e:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN9_BITMASK) && intFunc[9]) intFunc[9]();
    2980:	0720      	lsls	r0, r4, #28
    2982:	d504      	bpl.n	298e <portc_isr+0x16>
    2984:	4b2a      	ldr	r3, [pc, #168]	; (2a30 <portc_isr+0xb8>)
    2986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2988:	b10a      	cbz	r2, 298e <portc_isr+0x16>
    298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    298c:	4798      	blx	r3
	if ((isfr & CORE_PIN10_BITMASK) && intFunc[10]) intFunc[10]();
    298e:	06e1      	lsls	r1, r4, #27
    2990:	d504      	bpl.n	299c <portc_isr+0x24>
    2992:	4b27      	ldr	r3, [pc, #156]	; (2a30 <portc_isr+0xb8>)
    2994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2996:	b10a      	cbz	r2, 299c <portc_isr+0x24>
    2998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    299a:	4798      	blx	r3
	if ((isfr & CORE_PIN11_BITMASK) && intFunc[11]) intFunc[11]();
    299c:	0662      	lsls	r2, r4, #25
    299e:	d504      	bpl.n	29aa <portc_isr+0x32>
    29a0:	4b23      	ldr	r3, [pc, #140]	; (2a30 <portc_isr+0xb8>)
    29a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29a4:	b10a      	cbz	r2, 29aa <portc_isr+0x32>
    29a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    29a8:	4798      	blx	r3
	if ((isfr & CORE_PIN12_BITMASK) && intFunc[12]) intFunc[12]();
    29aa:	0623      	lsls	r3, r4, #24
    29ac:	d504      	bpl.n	29b8 <portc_isr+0x40>
    29ae:	4b20      	ldr	r3, [pc, #128]	; (2a30 <portc_isr+0xb8>)
    29b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    29b2:	b10a      	cbz	r2, 29b8 <portc_isr+0x40>
    29b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    29b6:	4798      	blx	r3
	if ((isfr & CORE_PIN13_BITMASK) && intFunc[13]) intFunc[13]();
    29b8:	06a0      	lsls	r0, r4, #26
    29ba:	d504      	bpl.n	29c6 <portc_isr+0x4e>
    29bc:	4b1c      	ldr	r3, [pc, #112]	; (2a30 <portc_isr+0xb8>)
    29be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    29c0:	b10a      	cbz	r2, 29c6 <portc_isr+0x4e>
    29c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    29c4:	4798      	blx	r3
	if ((isfr & CORE_PIN15_BITMASK) && intFunc[15]) intFunc[15]();
    29c6:	07e1      	lsls	r1, r4, #31
    29c8:	d504      	bpl.n	29d4 <portc_isr+0x5c>
    29ca:	4b19      	ldr	r3, [pc, #100]	; (2a30 <portc_isr+0xb8>)
    29cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    29ce:	b10a      	cbz	r2, 29d4 <portc_isr+0x5c>
    29d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    29d2:	4798      	blx	r3
	if ((isfr & CORE_PIN22_BITMASK) && intFunc[22]) intFunc[22]();
    29d4:	07a2      	lsls	r2, r4, #30
    29d6:	d504      	bpl.n	29e2 <portc_isr+0x6a>
    29d8:	4b15      	ldr	r3, [pc, #84]	; (2a30 <portc_isr+0xb8>)
    29da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    29dc:	b10a      	cbz	r2, 29e2 <portc_isr+0x6a>
    29de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    29e0:	4798      	blx	r3
	if ((isfr & CORE_PIN23_BITMASK) && intFunc[23]) intFunc[23]();
    29e2:	0763      	lsls	r3, r4, #29
    29e4:	d504      	bpl.n	29f0 <portc_isr+0x78>
    29e6:	4b12      	ldr	r3, [pc, #72]	; (2a30 <portc_isr+0xb8>)
    29e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    29ea:	b10a      	cbz	r2, 29f0 <portc_isr+0x78>
    29ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    29ee:	4798      	blx	r3
	if ((isfr & CORE_PIN27_BITMASK) && intFunc[27]) intFunc[27]();
    29f0:	05a0      	lsls	r0, r4, #22
    29f2:	d504      	bpl.n	29fe <portc_isr+0x86>
    29f4:	4b0e      	ldr	r3, [pc, #56]	; (2a30 <portc_isr+0xb8>)
    29f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    29f8:	b10a      	cbz	r2, 29fe <portc_isr+0x86>
    29fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    29fc:	4798      	blx	r3
	if ((isfr & CORE_PIN28_BITMASK) && intFunc[28]) intFunc[28]();
    29fe:	05e1      	lsls	r1, r4, #23
    2a00:	d504      	bpl.n	2a0c <portc_isr+0x94>
    2a02:	4b0b      	ldr	r3, [pc, #44]	; (2a30 <portc_isr+0xb8>)
    2a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    2a06:	b10a      	cbz	r2, 2a0c <portc_isr+0x94>
    2a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2a0a:	4798      	blx	r3
	if ((isfr & CORE_PIN29_BITMASK) && intFunc[29]) intFunc[29]();
    2a0c:	0562      	lsls	r2, r4, #21
    2a0e:	d504      	bpl.n	2a1a <portc_isr+0xa2>
    2a10:	4b07      	ldr	r3, [pc, #28]	; (2a30 <portc_isr+0xb8>)
    2a12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    2a14:	b10a      	cbz	r2, 2a1a <portc_isr+0xa2>
    2a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    2a18:	4798      	blx	r3
	if ((isfr & CORE_PIN30_BITMASK) && intFunc[30]) intFunc[30]();
    2a1a:	0523      	lsls	r3, r4, #20
    2a1c:	d504      	bpl.n	2a28 <portc_isr+0xb0>
    2a1e:	4b04      	ldr	r3, [pc, #16]	; (2a30 <portc_isr+0xb8>)
    2a20:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    2a22:	b10a      	cbz	r2, 2a28 <portc_isr+0xb0>
    2a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    2a26:	4798      	blx	r3
    2a28:	bd10      	pop	{r4, pc}
    2a2a:	bf00      	nop
    2a2c:	4004b0a0 	.word	0x4004b0a0
    2a30:	1fff9120 	.word	0x1fff9120

00002a34 <portd_isr>:
}

void portd_isr(void)
{
	uint32_t isfr = PORTD_ISFR;
    2a34:	4b1e      	ldr	r3, [pc, #120]	; (2ab0 <portd_isr+0x7c>)
	if ((isfr & CORE_PIN29_BITMASK) && intFunc[29]) intFunc[29]();
	if ((isfr & CORE_PIN30_BITMASK) && intFunc[30]) intFunc[30]();
}

void portd_isr(void)
{
    2a36:	b510      	push	{r4, lr}
	uint32_t isfr = PORTD_ISFR;
    2a38:	681c      	ldr	r4, [r3, #0]
	PORTD_ISFR = isfr;
    2a3a:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN2_BITMASK) && intFunc[2]) intFunc[2]();
    2a3c:	07e0      	lsls	r0, r4, #31
    2a3e:	d504      	bpl.n	2a4a <portd_isr+0x16>
    2a40:	4b1c      	ldr	r3, [pc, #112]	; (2ab4 <portd_isr+0x80>)
    2a42:	689a      	ldr	r2, [r3, #8]
    2a44:	b10a      	cbz	r2, 2a4a <portd_isr+0x16>
    2a46:	689b      	ldr	r3, [r3, #8]
    2a48:	4798      	blx	r3
	if ((isfr & CORE_PIN5_BITMASK) && intFunc[5]) intFunc[5]();
    2a4a:	0621      	lsls	r1, r4, #24
    2a4c:	d504      	bpl.n	2a58 <portd_isr+0x24>
    2a4e:	4b19      	ldr	r3, [pc, #100]	; (2ab4 <portd_isr+0x80>)
    2a50:	695a      	ldr	r2, [r3, #20]
    2a52:	b10a      	cbz	r2, 2a58 <portd_isr+0x24>
    2a54:	695b      	ldr	r3, [r3, #20]
    2a56:	4798      	blx	r3
	if ((isfr & CORE_PIN6_BITMASK) && intFunc[6]) intFunc[6]();
    2a58:	06e2      	lsls	r2, r4, #27
    2a5a:	d504      	bpl.n	2a66 <portd_isr+0x32>
    2a5c:	4b15      	ldr	r3, [pc, #84]	; (2ab4 <portd_isr+0x80>)
    2a5e:	699a      	ldr	r2, [r3, #24]
    2a60:	b10a      	cbz	r2, 2a66 <portd_isr+0x32>
    2a62:	699b      	ldr	r3, [r3, #24]
    2a64:	4798      	blx	r3
	if ((isfr & CORE_PIN7_BITMASK) && intFunc[7]) intFunc[7]();
    2a66:	0763      	lsls	r3, r4, #29
    2a68:	d504      	bpl.n	2a74 <portd_isr+0x40>
    2a6a:	4b12      	ldr	r3, [pc, #72]	; (2ab4 <portd_isr+0x80>)
    2a6c:	69da      	ldr	r2, [r3, #28]
    2a6e:	b10a      	cbz	r2, 2a74 <portd_isr+0x40>
    2a70:	69db      	ldr	r3, [r3, #28]
    2a72:	4798      	blx	r3
	if ((isfr & CORE_PIN8_BITMASK) && intFunc[8]) intFunc[8]();
    2a74:	0720      	lsls	r0, r4, #28
    2a76:	d504      	bpl.n	2a82 <portd_isr+0x4e>
    2a78:	4b0e      	ldr	r3, [pc, #56]	; (2ab4 <portd_isr+0x80>)
    2a7a:	6a1a      	ldr	r2, [r3, #32]
    2a7c:	b10a      	cbz	r2, 2a82 <portd_isr+0x4e>
    2a7e:	6a1b      	ldr	r3, [r3, #32]
    2a80:	4798      	blx	r3
	if ((isfr & CORE_PIN14_BITMASK) && intFunc[14]) intFunc[14]();
    2a82:	07a1      	lsls	r1, r4, #30
    2a84:	d504      	bpl.n	2a90 <portd_isr+0x5c>
    2a86:	4b0b      	ldr	r3, [pc, #44]	; (2ab4 <portd_isr+0x80>)
    2a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2a8a:	b10a      	cbz	r2, 2a90 <portd_isr+0x5c>
    2a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2a8e:	4798      	blx	r3
	if ((isfr & CORE_PIN20_BITMASK) && intFunc[20]) intFunc[20]();
    2a90:	06a2      	lsls	r2, r4, #26
    2a92:	d504      	bpl.n	2a9e <portd_isr+0x6a>
    2a94:	4b07      	ldr	r3, [pc, #28]	; (2ab4 <portd_isr+0x80>)
    2a96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2a98:	b10a      	cbz	r2, 2a9e <portd_isr+0x6a>
    2a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2a9c:	4798      	blx	r3
	if ((isfr & CORE_PIN21_BITMASK) && intFunc[21]) intFunc[21]();
    2a9e:	0663      	lsls	r3, r4, #25
    2aa0:	d504      	bpl.n	2aac <portd_isr+0x78>
    2aa2:	4b04      	ldr	r3, [pc, #16]	; (2ab4 <portd_isr+0x80>)
    2aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    2aa6:	b10a      	cbz	r2, 2aac <portd_isr+0x78>
    2aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2aaa:	4798      	blx	r3
    2aac:	bd10      	pop	{r4, pc}
    2aae:	bf00      	nop
    2ab0:	4004c0a0 	.word	0x4004c0a0
    2ab4:	1fff9120 	.word	0x1fff9120

00002ab8 <porte_isr>:
}

void porte_isr(void)
{
	uint32_t isfr = PORTE_ISFR;
    2ab8:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <porte_isr+0x28>)
	if ((isfr & CORE_PIN20_BITMASK) && intFunc[20]) intFunc[20]();
	if ((isfr & CORE_PIN21_BITMASK) && intFunc[21]) intFunc[21]();
}

void porte_isr(void)
{
    2aba:	b510      	push	{r4, lr}
	uint32_t isfr = PORTE_ISFR;
    2abc:	681c      	ldr	r4, [r3, #0]
	PORTE_ISFR = isfr;
    2abe:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN26_BITMASK) && intFunc[26]) intFunc[26]();
    2ac0:	07a2      	lsls	r2, r4, #30
    2ac2:	d504      	bpl.n	2ace <porte_isr+0x16>
    2ac4:	4b07      	ldr	r3, [pc, #28]	; (2ae4 <porte_isr+0x2c>)
    2ac6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    2ac8:	b10a      	cbz	r2, 2ace <porte_isr+0x16>
    2aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2acc:	4798      	blx	r3
	if ((isfr & CORE_PIN31_BITMASK) && intFunc[31]) intFunc[31]();
    2ace:	07e3      	lsls	r3, r4, #31
    2ad0:	d504      	bpl.n	2adc <porte_isr+0x24>
    2ad2:	4b04      	ldr	r3, [pc, #16]	; (2ae4 <porte_isr+0x2c>)
    2ad4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    2ad6:	b10a      	cbz	r2, 2adc <porte_isr+0x24>
    2ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    2ada:	4798      	blx	r3
    2adc:	bd10      	pop	{r4, pc}
    2ade:	bf00      	nop
    2ae0:	4004d0a0 	.word	0x4004d0a0
    2ae4:	1fff9120 	.word	0x1fff9120

00002ae8 <rtc_set>:
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2ae8:	4b04      	ldr	r3, [pc, #16]	; (2afc <rtc_set+0x14>)
	RTC_TPR = 0;
    2aea:	4905      	ldr	r1, [pc, #20]	; (2b00 <rtc_set+0x18>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2aec:	2200      	movs	r2, #0
    2aee:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    2af0:	600a      	str	r2, [r1, #0]
	RTC_TSR = t;
    2af2:	4a04      	ldr	r2, [pc, #16]	; (2b04 <rtc_set+0x1c>)
    2af4:	6010      	str	r0, [r2, #0]
	RTC_SR = RTC_SR_TCE;
    2af6:	2210      	movs	r2, #16
    2af8:	601a      	str	r2, [r3, #0]
    2afa:	4770      	bx	lr
    2afc:	4003d014 	.word	0x4003d014
    2b00:	4003d004 	.word	0x4003d004
    2b04:	4003d000 	.word	0x4003d000

00002b08 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2b08:	2821      	cmp	r0, #33	; 0x21


// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
    2b0a:	b510      	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    2b0c:	d818      	bhi.n	2b40 <digitalWrite+0x38>
	if (*portModeRegister(pin)) {
    2b0e:	4a0d      	ldr	r2, [pc, #52]	; (2b44 <digitalWrite+0x3c>)
    2b10:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    2b14:	f893 4280 	ldrb.w	r4, [r3, #640]	; 0x280
    2b18:	b13c      	cbz	r4, 2b2a <digitalWrite+0x22>
    2b1a:	2201      	movs	r2, #1
		if (val) {
    2b1c:	b111      	cbz	r1, 2b24 <digitalWrite+0x1c>
			*portSetRegister(pin) = 1;
    2b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    2b22:	bd10      	pop	{r4, pc}
		} else {
			*portClearRegister(pin) = 1;
    2b24:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    2b28:	bd10      	pop	{r4, pc}
		}
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2b2a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    2b2e:	6843      	ldr	r3, [r0, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2b30:	681a      	ldr	r2, [r3, #0]
		} else {
			*portClearRegister(pin) = 1;
		}
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2b32:	b111      	cbz	r1, 2b3a <digitalWrite+0x32>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2b34:	f042 0203 	orr.w	r2, r2, #3
    2b38:	e001      	b.n	2b3e <digitalWrite+0x36>
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2b3a:	f022 0202 	bic.w	r2, r2, #2
    2b3e:	601a      	str	r2, [r3, #0]
    2b40:	bd10      	pop	{r4, pc}
    2b42:	bf00      	nop
    2b44:	00012d38 	.word	0x00012d38

00002b48 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2b48:	2821      	cmp	r0, #33	; 0x21
    2b4a:	d806      	bhi.n	2b5a <digitalRead+0x12>
	return *portInputRegister(pin);
    2b4c:	4b04      	ldr	r3, [pc, #16]	; (2b60 <digitalRead+0x18>)
    2b4e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    2b52:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    2b56:	b2c0      	uxtb	r0, r0
    2b58:	4770      	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2b5a:	2000      	movs	r0, #0
	return *portInputRegister(pin);
}
    2b5c:	4770      	bx	lr
    2b5e:	bf00      	nop
    2b60:	00012d38 	.word	0x00012d38

00002b64 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2b64:	2821      	cmp	r0, #33	; 0x21
    2b66:	d816      	bhi.n	2b96 <pinMode+0x32>
	config = portConfigRegister(pin);
    2b68:	4a0b      	ldr	r2, [pc, #44]	; (2b98 <pinMode+0x34>)
    2b6a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT) {
    2b6e:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2b70:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT) {
		*portModeRegister(pin) = 1;
    2b72:	f852 2030 	ldr.w	r2, [r2, r0, lsl #3]
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT) {
    2b76:	d104      	bne.n	2b82 <pinMode+0x1e>
		*portModeRegister(pin) = 1;
    2b78:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2b7c:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2b80:	e008      	b.n	2b94 <pinMode+0x30>
	} else {
		*portModeRegister(pin) = 0;
    2b82:	2000      	movs	r0, #0
    2b84:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		if (mode == INPUT) {
    2b88:	b911      	cbnz	r1, 2b90 <pinMode+0x2c>
			*config = PORT_PCR_MUX(1);
    2b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
    2b8e:	e001      	b.n	2b94 <pinMode+0x30>
		} else {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS; // pullup
    2b90:	f240 1203 	movw	r2, #259	; 0x103
    2b94:	601a      	str	r2, [r3, #0]
    2b96:	4770      	bx	lr
    2b98:	00012d38 	.word	0x00012d38

00002b9c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2b9c:	b672      	cpsid	i
	current = SYST_CVR;
    2b9e:	4b0c      	ldr	r3, [pc, #48]	; (2bd0 <micros+0x34>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2ba0:	490c      	ldr	r1, [pc, #48]	; (2bd4 <micros+0x38>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2ba2:	681a      	ldr	r2, [r3, #0]
	count = systick_millis_count;
    2ba4:	4b0c      	ldr	r3, [pc, #48]	; (2bd8 <micros+0x3c>)
    2ba6:	681b      	ldr	r3, [r3, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2ba8:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    2baa:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2bac:	0149      	lsls	r1, r1, #5
    2bae:	d502      	bpl.n	2bb6 <micros+0x1a>
    2bb0:	2a32      	cmp	r2, #50	; 0x32
    2bb2:	bf88      	it	hi
    2bb4:	3301      	addhi	r3, #1
	current = ((F_CPU / 1000) - 1) - current;
    2bb6:	f5c2 328c 	rsb	r2, r2, #71680	; 0x11800
	return count * 1000 + current / (F_CPU / 1000000);
    2bba:	2148      	movs	r1, #72	; 0x48
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
	current = ((F_CPU / 1000) - 1) - current;
    2bbc:	f202 123f 	addw	r2, r2, #319	; 0x13f
	return count * 1000 + current / (F_CPU / 1000000);
    2bc0:	fbb2 f2f1 	udiv	r2, r2, r1
}
    2bc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2bc8:	fb00 2003 	mla	r0, r0, r3, r2
    2bcc:	4770      	bx	lr
    2bce:	bf00      	nop
    2bd0:	e000e018 	.word	0xe000e018
    2bd4:	e000ed04 	.word	0xe000ed04
    2bd8:	1fff91a8 	.word	0x1fff91a8

00002bdc <delay>:

void delay(uint32_t ms)
{
    2bdc:	b538      	push	{r3, r4, r5, lr}
    2bde:	4604      	mov	r4, r0
	uint32_t start = micros();
    2be0:	f7ff ffdc 	bl	2b9c <micros>
    2be4:	4605      	mov	r5, r0

	if (ms > 0) {
    2be6:	b164      	cbz	r4, 2c02 <delay+0x26>
		while (1) {
			if ((micros() - start) >= 1000) {
    2be8:	f7ff ffd8 	bl	2b9c <micros>
    2bec:	1b40      	subs	r0, r0, r5
    2bee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    2bf2:	d303      	bcc.n	2bfc <delay+0x20>
				ms--;
				if (ms == 0) return;
    2bf4:	3c01      	subs	r4, #1
    2bf6:	d004      	beq.n	2c02 <delay+0x26>
				start += 1000;
    2bf8:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
			}
			yield();
    2bfc:	f001 fc2e 	bl	445c <yield>
		}
    2c00:	e7f2      	b.n	2be8 <delay+0xc>
    2c02:	bd38      	pop	{r3, r4, r5, pc}

00002c04 <_init_Teensyduino_internal_>:
#define DEFAULT_FTM_PRESCALE 0
#endif

//void init_pins(void)
void _init_Teensyduino_internal_(void)
{
    2c04:	b510      	push	{r4, lr}
	init_pin_interrupts();
    2c06:	f7ff fe0d 	bl	2824 <init_pin_interrupts>

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2c0a:	4b17      	ldr	r3, [pc, #92]	; (2c68 <_init_Teensyduino_internal_+0x64>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2c0c:	4a17      	ldr	r2, [pc, #92]	; (2c6c <_init_Teensyduino_internal_+0x68>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2c0e:	4c18      	ldr	r4, [pc, #96]	; (2c70 <_init_Teensyduino_internal_+0x6c>)
{
	init_pin_interrupts();

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2c10:	2000      	movs	r0, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    2c12:	f648 71ff 	movw	r1, #36863	; 0x8fff
{
	init_pin_interrupts();

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2c16:	6018      	str	r0, [r3, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
    2c18:	6059      	str	r1, [r3, #4]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2c1a:	2328      	movs	r3, #40	; 0x28
    2c1c:	6013      	str	r3, [r2, #0]
	FTM0_C1SC = 0x28;
    2c1e:	6093      	str	r3, [r2, #8]
	FTM0_C2SC = 0x28;
    2c20:	6113      	str	r3, [r2, #16]
	FTM0_C3SC = 0x28;
    2c22:	6193      	str	r3, [r2, #24]
	FTM0_C4SC = 0x28;
    2c24:	6213      	str	r3, [r2, #32]
	FTM0_C5SC = 0x28;
    2c26:	6293      	str	r3, [r2, #40]	; 0x28
	FTM0_C6SC = 0x28;
    2c28:	6313      	str	r3, [r2, #48]	; 0x30
	FTM0_C7SC = 0x28;
    2c2a:	6393      	str	r3, [r2, #56]	; 0x38
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2c2c:	2209      	movs	r2, #9
    2c2e:	6022      	str	r2, [r4, #0]
	FTM1_CNT = 0;
    2c30:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    2c34:	3404      	adds	r4, #4
    2c36:	6020      	str	r0, [r4, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2c38:	6061      	str	r1, [r4, #4]
	FTM1_C0SC = 0x28;
    2c3a:	60a3      	str	r3, [r4, #8]
	FTM1_C1SC = 0x28;
    2c3c:	6123      	str	r3, [r4, #16]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2c3e:	f844 2c04 	str.w	r2, [r4, #-4]
#if defined(__MK20DX256__)
	FTM2_CNT = 0;
    2c42:	f504 24fe 	add.w	r4, r4, #520192	; 0x7f000
    2c46:	6020      	str	r0, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2c48:	480a      	ldr	r0, [pc, #40]	; (2c74 <_init_Teensyduino_internal_+0x70>)
    2c4a:	6001      	str	r1, [r0, #0]
	FTM2_C0SC = 0x28;
    2c4c:	490a      	ldr	r1, [pc, #40]	; (2c78 <_init_Teensyduino_internal_+0x74>)
    2c4e:	600b      	str	r3, [r1, #0]
	FTM2_C1SC = 0x28;
    2c50:	608b      	str	r3, [r1, #8]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2c52:	4b0a      	ldr	r3, [pc, #40]	; (2c7c <_init_Teensyduino_internal_+0x78>)
    2c54:	601a      	str	r2, [r3, #0]
#endif

	analog_init();
    2c56:	f7ff f9af 	bl	1fb8 <analog_init>
	//delay(100); // TODO: this is not necessary, right?
	delay(4);
    2c5a:	2004      	movs	r0, #4
    2c5c:	f7ff ffbe 	bl	2bdc <delay>
	usb_init();
}
    2c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

	analog_init();
	//delay(100); // TODO: this is not necessary, right?
	delay(4);
	usb_init();
    2c64:	f001 ba04 	b.w	4070 <usb_init>
    2c68:	40038004 	.word	0x40038004
    2c6c:	4003800c 	.word	0x4003800c
    2c70:	40038000 	.word	0x40038000
    2c74:	400b8008 	.word	0x400b8008
    2c78:	400b800c 	.word	0x400b800c
    2c7c:	400b8000 	.word	0x400b8000

00002c80 <_ZN5Print7printlnEv>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2c80:	b507      	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    2c82:	4b06      	ldr	r3, [pc, #24]	; (2c9c <_ZN5Print7printlnEv+0x1c>)
    2c84:	881b      	ldrh	r3, [r3, #0]
    2c86:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    2c8a:	6803      	ldr	r3, [r0, #0]
    2c8c:	a901      	add	r1, sp, #4
    2c8e:	685b      	ldr	r3, [r3, #4]
    2c90:	2202      	movs	r2, #2
    2c92:	4798      	blx	r3
}
    2c94:	b003      	add	sp, #12
    2c96:	f85d fb04 	ldr.w	pc, [sp], #4
    2c9a:	bf00      	nop
    2c9c:	00012e48 	.word	0x00012e48

00002ca0 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    2ca0:	b508      	push	{r3, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    2ca2:	6803      	ldr	r3, [r0, #0]
    2ca4:	685b      	ldr	r3, [r3, #4]
    2ca6:	4798      	blx	r3
	return 0;
}
    2ca8:	2000      	movs	r0, #0
    2caa:	bd08      	pop	{r3, pc}

00002cac <_ZN5Print6printfEPKcz>:
}

int Print::printf(const char *format, ...)
{
    2cac:	b40e      	push	{r1, r2, r3}
    2cae:	b503      	push	{r0, r1, lr}
    2cb0:	aa03      	add	r2, sp, #12
    2cb2:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    2cb6:	9201      	str	r2, [sp, #4]
	return vdprintf((int)this, format, ap);
    2cb8:	f00d faf4 	bl	102a4 <vdprintf>
}
    2cbc:	b002      	add	sp, #8
    2cbe:	f85d eb04 	ldr.w	lr, [sp], #4
    2cc2:	b003      	add	sp, #12
    2cc4:	4770      	bx	lr

00002cc6 <_ZN5Print11printNumberEmhh>:
	return vdprintf((int)this, (const char *)format, ap);
}


size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2cc6:	b570      	push	{r4, r5, r6, lr}
    2cc8:	4605      	mov	r5, r0
    2cca:	b08a      	sub	sp, #40	; 0x28
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2ccc:	b922      	cbnz	r2, 2cd8 <_ZN5Print11printNumberEmhh+0x12>
		return write((uint8_t)n);
    2cce:	6803      	ldr	r3, [r0, #0]
    2cd0:	b2c9      	uxtb	r1, r1
    2cd2:	681b      	ldr	r3, [r3, #0]
    2cd4:	4798      	blx	r3
    2cd6:	e02c      	b.n	2d32 <_ZN5Print11printNumberEmhh+0x6c>
	} else if (base == 1) {
		base = 10;
    2cd8:	2a01      	cmp	r2, #1
    2cda:	bf08      	it	eq
    2cdc:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    2cde:	b921      	cbnz	r1, 2cea <_ZN5Print11printNumberEmhh+0x24>
		buf[sizeof(buf) - 1] = '0';
    2ce0:	2230      	movs	r2, #48	; 0x30
    2ce2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2ce6:	2421      	movs	r4, #33	; 0x21
    2ce8:	e013      	b.n	2d12 <_ZN5Print11printNumberEmhh+0x4c>
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    2cea:	2421      	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2cec:	fbb1 f0f2 	udiv	r0, r1, r2
    2cf0:	fb02 1110 	mls	r1, r2, r0, r1
    2cf4:	b2c9      	uxtb	r1, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2cf6:	2909      	cmp	r1, #9
    2cf8:	ae0a      	add	r6, sp, #40	; 0x28
    2cfa:	bf94      	ite	ls
    2cfc:	3130      	addls	r1, #48	; 0x30
    2cfe:	3137      	addhi	r1, #55	; 0x37
    2d00:	4426      	add	r6, r4
    2d02:	b2c9      	uxtb	r1, r1
    2d04:	f806 1c24 	strb.w	r1, [r6, #-36]
			n /= base;
			if (n == 0) break;
    2d08:	4601      	mov	r1, r0
    2d0a:	b110      	cbz	r0, 2d12 <_ZN5Print11printNumberEmhh+0x4c>
			i--;
    2d0c:	3c01      	subs	r4, #1
    2d0e:	b2e4      	uxtb	r4, r4
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    2d10:	e7ec      	b.n	2cec <_ZN5Print11printNumberEmhh+0x26>
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    2d12:	b133      	cbz	r3, 2d22 <_ZN5Print11printNumberEmhh+0x5c>
		i--;
    2d14:	3c01      	subs	r4, #1
    2d16:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    2d18:	ab0a      	add	r3, sp, #40	; 0x28
    2d1a:	4423      	add	r3, r4
    2d1c:	222d      	movs	r2, #45	; 0x2d
    2d1e:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2d22:	682b      	ldr	r3, [r5, #0]
    2d24:	a901      	add	r1, sp, #4
    2d26:	685b      	ldr	r3, [r3, #4]
    2d28:	4628      	mov	r0, r5
    2d2a:	4421      	add	r1, r4
    2d2c:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    2d30:	4798      	blx	r3
}
    2d32:	b00a      	add	sp, #40	; 0x28
    2d34:	bd70      	pop	{r4, r5, r6, pc}
    2d36:	ffff 4b1b 			; <UNDEFINED> instruction: 0xffff4b1b

00002d38 <serial_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    2d38:	4b1b      	ldr	r3, [pc, #108]	; (2da8 <serial_begin+0x70>)
    2d3a:	681a      	ldr	r2, [r3, #0]
    2d3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2d40:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
    2d42:	4a1a      	ldr	r2, [pc, #104]	; (2dac <serial_begin+0x74>)
    2d44:	2300      	movs	r3, #0
    2d46:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    2d48:	4a19      	ldr	r2, [pc, #100]	; (2db0 <serial_begin+0x78>)
    2d4a:	7013      	strb	r3, [r2, #0]
	tx_buffer_head = 0;
    2d4c:	4a19      	ldr	r2, [pc, #100]	; (2db4 <serial_begin+0x7c>)
    2d4e:	7013      	strb	r3, [r2, #0]
	tx_buffer_tail = 0;
    2d50:	4a19      	ldr	r2, [pc, #100]	; (2db8 <serial_begin+0x80>)
    2d52:	7013      	strb	r3, [r2, #0]
	transmitting = 0;
    2d54:	4a19      	ldr	r2, [pc, #100]	; (2dbc <serial_begin+0x84>)
    2d56:	7013      	strb	r3, [r2, #0]
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    2d58:	4b19      	ldr	r3, [pc, #100]	; (2dc0 <serial_begin+0x88>)
    2d5a:	f240 3213 	movw	r2, #787	; 0x313
    2d5e:	601a      	str	r2, [r3, #0]
	CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    2d60:	f44f 7251 	mov.w	r2, #836	; 0x344
    2d64:	605a      	str	r2, [r3, #4]
	UART0_BDH = (divisor >> 13) & 0x1F;
    2d66:	4b17      	ldr	r3, [pc, #92]	; (2dc4 <serial_begin+0x8c>)
    2d68:	f3c0 3244 	ubfx	r2, r0, #13, #5
    2d6c:	701a      	strb	r2, [r3, #0]
	UART0_BDL = (divisor >> 5) & 0xFF;
    2d6e:	f3c0 1247 	ubfx	r2, r0, #5, #8
    2d72:	705a      	strb	r2, [r3, #1]
	UART0_C4 = divisor & 0x1F;
    2d74:	f000 001f 	and.w	r0, r0, #31
	//UART0_C1 = 0;
	UART0_C1 = UART_C1_ILT;
    2d78:	4a13      	ldr	r2, [pc, #76]	; (2dc8 <serial_begin+0x90>)
	transmitting = 0;
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
    2d7a:	7298      	strb	r0, [r3, #10]
	//UART0_C1 = 0;
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    2d7c:	2102      	movs	r1, #2
	CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
	//UART0_C1 = 0;
	UART0_C1 = UART_C1_ILT;
    2d7e:	2304      	movs	r3, #4
    2d80:	7013      	strb	r3, [r2, #0]
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    2d82:	7451      	strb	r1, [r2, #17]
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    2d84:	74d3      	strb	r3, [r2, #19]
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    2d86:	4b11      	ldr	r3, [pc, #68]	; (2dcc <serial_begin+0x94>)
    2d88:	2288      	movs	r2, #136	; 0x88
    2d8a:	701a      	strb	r2, [r3, #0]
	UART0_C2 = C2_TX_INACTIVE;
    2d8c:	223c      	movs	r2, #60	; 0x3c
    2d8e:	f803 2c0d 	strb.w	r2, [r3, #-13]
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    2d92:	4b0f      	ldr	r3, [pc, #60]	; (2dd0 <serial_begin+0x98>)
    2d94:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    2d96:	f46f 714a 	mvn.w	r1, #808	; 0x328
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    2d9a:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    2d9c:	440b      	add	r3, r1
    2d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    2da2:	601a      	str	r2, [r3, #0]
    2da4:	4770      	bx	lr
    2da6:	bf00      	nop
    2da8:	40048034 	.word	0x40048034
    2dac:	1fff922e 	.word	0x1fff922e
    2db0:	1fff91ad 	.word	0x1fff91ad
    2db4:	1fff9234 	.word	0x1fff9234
    2db8:	1fff922f 	.word	0x1fff922f
    2dbc:	1fff91ac 	.word	0x1fff91ac
    2dc0:	4004a040 	.word	0x4004a040
    2dc4:	4006a000 	.word	0x4006a000
    2dc8:	4006a002 	.word	0x4006a002
    2dcc:	4006a010 	.word	0x4006a010
    2dd0:	e000e42d 	.word	0xe000e42d

00002dd4 <serial_format>:

void serial_format(uint32_t format)
{
        uint8_t c;

        c = UART0_C1;
    2dd4:	4a13      	ldr	r2, [pc, #76]	; (2e24 <serial_format+0x50>)
    2dd6:	7813      	ldrb	r3, [r2, #0]
        c = (c & ~0x13) | (format & 0x03);      // configure parity
    2dd8:	f000 0103 	and.w	r1, r0, #3
    2ddc:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    2de0:	430b      	orrs	r3, r1
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
    2de2:	0741      	lsls	r1, r0, #29
    2de4:	bf48      	it	mi
    2de6:	f043 0310 	orrmi.w	r3, r3, #16
        UART0_C1 = c;
    2dea:	7013      	strb	r3, [r2, #0]
        if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    2dec:	f000 030f 	and.w	r3, r0, #15
    2df0:	2b04      	cmp	r3, #4
    2df2:	4b0d      	ldr	r3, [pc, #52]	; (2e28 <serial_format+0x54>)
    2df4:	d103      	bne.n	2dfe <serial_format+0x2a>
    2df6:	781a      	ldrb	r2, [r3, #0]
    2df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2dfc:	701a      	strb	r2, [r3, #0]
        c = UART0_S2 & ~0x10;
    2dfe:	490b      	ldr	r1, [pc, #44]	; (2e2c <serial_format+0x58>)
    2e00:	780a      	ldrb	r2, [r1, #0]
        if (format & 0x10) c |= 0x10;           // rx invert
    2e02:	f010 0f10 	tst.w	r0, #16
        c = UART0_C1;
        c = (c & ~0x13) | (format & 0x03);      // configure parity
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
        UART0_C1 = c;
        if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART0_S2 & ~0x10;
    2e06:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x10) c |= 0x10;           // rx invert
    2e0a:	bf18      	it	ne
    2e0c:	f042 0210 	orrne.w	r2, r2, #16
        UART0_S2 = c;
    2e10:	700a      	strb	r2, [r1, #0]
        c = UART0_C3 & ~0x10;
    2e12:	781a      	ldrb	r2, [r3, #0]
        if (format & 0x20) c |= 0x10;           // tx invert
    2e14:	0681      	lsls	r1, r0, #26
        UART0_C1 = c;
        if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART0_S2 & ~0x10;
        if (format & 0x10) c |= 0x10;           // rx invert
        UART0_S2 = c;
        c = UART0_C3 & ~0x10;
    2e16:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x20) c |= 0x10;           // tx invert
    2e1a:	bf48      	it	mi
    2e1c:	f042 0210 	orrmi.w	r2, r2, #16
        UART0_C3 = c;
    2e20:	701a      	strb	r2, [r3, #0]
    2e22:	4770      	bx	lr
    2e24:	4006a002 	.word	0x4006a002
    2e28:	4006a006 	.word	0x4006a006
    2e2c:	4006a005 	.word	0x4006a005

00002e30 <serial_end>:
        use9Bits = format & 0x80;
#endif
}

void serial_end(void)
{
    2e30:	b508      	push	{r3, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2e32:	4b0e      	ldr	r3, [pc, #56]	; (2e6c <serial_end+0x3c>)
    2e34:	681b      	ldr	r3, [r3, #0]
    2e36:	055b      	lsls	r3, r3, #21
    2e38:	d400      	bmi.n	2e3c <serial_end+0xc>
    2e3a:	bd08      	pop	{r3, pc}
	while (transmitting) yield();  // wait for buffered data to send
    2e3c:	4b0c      	ldr	r3, [pc, #48]	; (2e70 <serial_end+0x40>)
    2e3e:	781a      	ldrb	r2, [r3, #0]
    2e40:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2e44:	b112      	cbz	r2, 2e4c <serial_end+0x1c>
    2e46:	f001 fb09 	bl	445c <yield>
    2e4a:	e7f7      	b.n	2e3c <serial_end+0xc>
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    2e4c:	4a09      	ldr	r2, [pc, #36]	; (2e74 <serial_end+0x44>)
    2e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    2e52:	6011      	str	r1, [r2, #0]
	UART0_C2 = 0;
    2e54:	4a08      	ldr	r2, [pc, #32]	; (2e78 <serial_end+0x48>)
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2e56:	4909      	ldr	r1, [pc, #36]	; (2e7c <serial_end+0x4c>)
void serial_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
	UART0_C2 = 0;
    2e58:	7013      	strb	r3, [r2, #0]
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2e5a:	f240 1203 	movw	r2, #259	; 0x103
    2e5e:	600a      	str	r2, [r1, #0]
	CORE_PIN1_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2e60:	604a      	str	r2, [r1, #4]
	rx_buffer_head = 0;
    2e62:	4a07      	ldr	r2, [pc, #28]	; (2e80 <serial_end+0x50>)
    2e64:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    2e66:	4a07      	ldr	r2, [pc, #28]	; (2e84 <serial_end+0x54>)
    2e68:	7013      	strb	r3, [r2, #0]
    2e6a:	bd08      	pop	{r3, pc}
    2e6c:	40048034 	.word	0x40048034
    2e70:	1fff91ac 	.word	0x1fff91ac
    2e74:	e000e184 	.word	0xe000e184
    2e78:	4006a003 	.word	0x4006a003
    2e7c:	4004a040 	.word	0x4004a040
    2e80:	1fff922e 	.word	0x1fff922e
    2e84:	1fff91ad 	.word	0x1fff91ad

00002e88 <serial_set_transmit_pin>:
}

void serial_set_transmit_pin(uint8_t pin)
{
    2e88:	b538      	push	{r3, r4, r5, lr}
    2e8a:	4604      	mov	r4, r0
	while (transmitting) ;
    2e8c:	4b09      	ldr	r3, [pc, #36]	; (2eb4 <serial_set_transmit_pin+0x2c>)
    2e8e:	781b      	ldrb	r3, [r3, #0]
    2e90:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    2e94:	2b00      	cmp	r3, #0
    2e96:	d1f9      	bne.n	2e8c <serial_set_transmit_pin+0x4>
	pinMode(pin, OUTPUT);
    2e98:	4620      	mov	r0, r4
    2e9a:	2101      	movs	r1, #1
    2e9c:	f7ff fe62 	bl	2b64 <pinMode>
	digitalWrite(pin, LOW);
    2ea0:	4620      	mov	r0, r4
    2ea2:	4629      	mov	r1, r5
    2ea4:	f7ff fe30 	bl	2b08 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    2ea8:	4b03      	ldr	r3, [pc, #12]	; (2eb8 <serial_set_transmit_pin+0x30>)
    2eaa:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    2eae:	4b03      	ldr	r3, [pc, #12]	; (2ebc <serial_set_transmit_pin+0x34>)
    2eb0:	601a      	str	r2, [r3, #0]
    2eb2:	bd38      	pop	{r3, r4, r5, pc}
    2eb4:	1fff91ac 	.word	0x1fff91ac
    2eb8:	00012d38 	.word	0x00012d38
    2ebc:	1fff9230 	.word	0x1fff9230

00002ec0 <serial_putchar>:
}

void serial_putchar(uint32_t c)
{
    2ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2ec2:	4b1d      	ldr	r3, [pc, #116]	; (2f38 <serial_putchar+0x78>)
    2ec4:	681b      	ldr	r3, [r3, #0]
    2ec6:	055a      	lsls	r2, r3, #21
	digitalWrite(pin, LOW);
	transmit_pin = portOutputRegister(pin);
}

void serial_putchar(uint32_t c)
{
    2ec8:	4607      	mov	r7, r0
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2eca:	d534      	bpl.n	2f36 <serial_putchar+0x76>
	if (transmit_pin) *transmit_pin = 1;
    2ecc:	4b1b      	ldr	r3, [pc, #108]	; (2f3c <serial_putchar+0x7c>)
    2ece:	681b      	ldr	r3, [r3, #0]
    2ed0:	b10b      	cbz	r3, 2ed6 <serial_putchar+0x16>
    2ed2:	2201      	movs	r2, #1
    2ed4:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    2ed6:	4b1a      	ldr	r3, [pc, #104]	; (2f40 <serial_putchar+0x80>)
    2ed8:	781c      	ldrb	r4, [r3, #0]
	if (++head >= TX_BUFFER_SIZE) head = 0;
    2eda:	3401      	adds	r4, #1
    2edc:	2c40      	cmp	r4, #64	; 0x40
    2ede:	461e      	mov	r6, r3
    2ee0:	bf28      	it	cs
    2ee2:	2400      	movcs	r4, #0
	while (tx_buffer_tail == head) {
    2ee4:	4d17      	ldr	r5, [pc, #92]	; (2f44 <serial_putchar+0x84>)
    2ee6:	782b      	ldrb	r3, [r5, #0]
    2ee8:	42a3      	cmp	r3, r4
    2eea:	d119      	bne.n	2f20 <serial_putchar+0x60>
		int priority = nvic_execution_priority();
    2eec:	f7ff fc4a 	bl	2784 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    2ef0:	2840      	cmp	r0, #64	; 0x40
    2ef2:	dc10      	bgt.n	2f16 <serial_putchar+0x56>
			if ((UART0_S1 & UART_S1_TDRE)) {
    2ef4:	4b14      	ldr	r3, [pc, #80]	; (2f48 <serial_putchar+0x88>)
    2ef6:	781b      	ldrb	r3, [r3, #0]
    2ef8:	061b      	lsls	r3, r3, #24
    2efa:	d5f3      	bpl.n	2ee4 <serial_putchar+0x24>
				uint32_t tail = tx_buffer_tail;
    2efc:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    2efe:	4a13      	ldr	r2, [pc, #76]	; (2f4c <serial_putchar+0x8c>)
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
    2f00:	3301      	adds	r3, #1
    2f02:	2b40      	cmp	r3, #64	; 0x40
    2f04:	bf28      	it	cs
    2f06:	2300      	movcs	r3, #0
				n = tx_buffer[tail];
    2f08:	5cd1      	ldrb	r1, [r2, r3]
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
    2f0a:	4a11      	ldr	r2, [pc, #68]	; (2f50 <serial_putchar+0x90>)
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    2f0c:	b2c9      	uxtb	r1, r1
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
				tx_buffer_tail = tail;
    2f0e:	b2db      	uxtb	r3, r3
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
    2f10:	7011      	strb	r1, [r2, #0]
				tx_buffer_tail = tail;
    2f12:	702b      	strb	r3, [r5, #0]
    2f14:	e7e6      	b.n	2ee4 <serial_putchar+0x24>
			}
		} else if (priority >= 256) {
    2f16:	28ff      	cmp	r0, #255	; 0xff
    2f18:	dde4      	ble.n	2ee4 <serial_putchar+0x24>
			yield();
    2f1a:	f001 fa9f 	bl	445c <yield>
    2f1e:	e7e1      	b.n	2ee4 <serial_putchar+0x24>
		}
	}
	tx_buffer[head] = c;
    2f20:	4b0a      	ldr	r3, [pc, #40]	; (2f4c <serial_putchar+0x8c>)
    2f22:	b2ff      	uxtb	r7, r7
    2f24:	551f      	strb	r7, [r3, r4]
	transmitting = 1;
    2f26:	4b0b      	ldr	r3, [pc, #44]	; (2f54 <serial_putchar+0x94>)
    2f28:	2201      	movs	r2, #1
    2f2a:	701a      	strb	r2, [r3, #0]
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
    2f2c:	4b0a      	ldr	r3, [pc, #40]	; (2f58 <serial_putchar+0x98>)
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    2f2e:	b2e4      	uxtb	r4, r4
	UART0_C2 = C2_TX_ACTIVE;
    2f30:	22bc      	movs	r2, #188	; 0xbc
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    2f32:	7034      	strb	r4, [r6, #0]
	UART0_C2 = C2_TX_ACTIVE;
    2f34:	701a      	strb	r2, [r3, #0]
    2f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f38:	40048034 	.word	0x40048034
    2f3c:	1fff9230 	.word	0x1fff9230
    2f40:	1fff9234 	.word	0x1fff9234
    2f44:	1fff922f 	.word	0x1fff922f
    2f48:	4006a004 	.word	0x4006a004
    2f4c:	1fff91ae 	.word	0x1fff91ae
    2f50:	4006a007 	.word	0x4006a007
    2f54:	1fff91ac 	.word	0x1fff91ac
    2f58:	4006a003 	.word	0x4006a003

00002f5c <serial_write>:
{
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2f5c:	4b27      	ldr	r3, [pc, #156]	; (2ffc <serial_write+0xa0>)
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	055a      	lsls	r2, r3, #21
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
}

void serial_write(const void *buf, unsigned int count)
{
    2f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f66:	4607      	mov	r7, r0
    2f68:	468a      	mov	sl, r1
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2f6a:	d545      	bpl.n	2ff8 <serial_write+0x9c>
	if (transmit_pin) *transmit_pin = 1;
    2f6c:	4b24      	ldr	r3, [pc, #144]	; (3000 <serial_write+0xa4>)
    2f6e:	681b      	ldr	r3, [r3, #0]
    2f70:	b10b      	cbz	r3, 2f76 <serial_write+0x1a>
    2f72:	2201      	movs	r2, #1
    2f74:	701a      	strb	r2, [r3, #0]
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
    2f76:	463d      	mov	r5, r7
}

void serial_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
    2f78:	eb07 030a 	add.w	r3, r7, sl
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) *transmit_pin = 1;
	while (p < end) {
    2f7c:	429d      	cmp	r5, r3
    2f7e:	d238      	bcs.n	2ff2 <serial_write+0x96>
        	head = tx_buffer_head;
    2f80:	f8df 8098 	ldr.w	r8, [pc, #152]	; 301c <serial_write+0xc0>
        	if (++head >= TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
    2f84:	4e1f      	ldr	r6, [pc, #124]	; (3004 <serial_write+0xa8>)
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) *transmit_pin = 1;
	while (p < end) {
        	head = tx_buffer_head;
    2f86:	f898 4000 	ldrb.w	r4, [r8]
        	if (++head >= TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
    2f8a:	f896 9000 	ldrb.w	r9, [r6]

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) *transmit_pin = 1;
	while (p < end) {
        	head = tx_buffer_head;
        	if (++head >= TX_BUFFER_SIZE) head = 0;
    2f8e:	3401      	adds	r4, #1
    2f90:	2c40      	cmp	r4, #64	; 0x40
    2f92:	bf28      	it	cs
    2f94:	2400      	movcs	r4, #0
		if (tx_buffer_tail == head) {
    2f96:	fa5f f989 	uxtb.w	r9, r9
    2f9a:	45a1      	cmp	r9, r4
    2f9c:	d11e      	bne.n	2fdc <serial_write+0x80>
        		UART0_C2 = C2_TX_ACTIVE;
    2f9e:	4b1a      	ldr	r3, [pc, #104]	; (3008 <serial_write+0xac>)
    2fa0:	22bc      	movs	r2, #188	; 0xbc
    2fa2:	701a      	strb	r2, [r3, #0]
			do {
				int priority = nvic_execution_priority();
    2fa4:	f7ff fbee 	bl	2784 <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    2fa8:	2840      	cmp	r0, #64	; 0x40
    2faa:	dc10      	bgt.n	2fce <serial_write+0x72>
					if ((UART0_S1 & UART_S1_TDRE)) {
    2fac:	4b17      	ldr	r3, [pc, #92]	; (300c <serial_write+0xb0>)
    2fae:	781b      	ldrb	r3, [r3, #0]
    2fb0:	061b      	lsls	r3, r3, #24
    2fb2:	d510      	bpl.n	2fd6 <serial_write+0x7a>
						uint32_t tail = tx_buffer_tail;
    2fb4:	7833      	ldrb	r3, [r6, #0]
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
    2fb6:	4a16      	ldr	r2, [pc, #88]	; (3010 <serial_write+0xb4>)
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
    2fb8:	3301      	adds	r3, #1
    2fba:	2b40      	cmp	r3, #64	; 0x40
    2fbc:	bf28      	it	cs
    2fbe:	2300      	movcs	r3, #0
						n = tx_buffer[tail];
    2fc0:	5cd1      	ldrb	r1, [r2, r3]
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
    2fc2:	4a14      	ldr	r2, [pc, #80]	; (3014 <serial_write+0xb8>)
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
    2fc4:	b2c9      	uxtb	r1, r1
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
						tx_buffer_tail = tail;
    2fc6:	b2db      	uxtb	r3, r3
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
    2fc8:	7011      	strb	r1, [r2, #0]
						tx_buffer_tail = tail;
    2fca:	7033      	strb	r3, [r6, #0]
    2fcc:	e003      	b.n	2fd6 <serial_write+0x7a>
					}
				} else if (priority >= 256) {
    2fce:	28ff      	cmp	r0, #255	; 0xff
    2fd0:	dd01      	ble.n	2fd6 <serial_write+0x7a>
					yield();
    2fd2:	f001 fa43 	bl	445c <yield>
				}
			} while (tx_buffer_tail == head);
    2fd6:	7833      	ldrb	r3, [r6, #0]
    2fd8:	454b      	cmp	r3, r9
    2fda:	d0e3      	beq.n	2fa4 <serial_write+0x48>
		}
        	tx_buffer[head] = *p++;
    2fdc:	4b0c      	ldr	r3, [pc, #48]	; (3010 <serial_write+0xb4>)
    2fde:	f815 2b01 	ldrb.w	r2, [r5], #1
    2fe2:	551a      	strb	r2, [r3, r4]
        	transmitting = 1;
    2fe4:	4b0c      	ldr	r3, [pc, #48]	; (3018 <serial_write+0xbc>)
    2fe6:	2201      	movs	r2, #1
        	tx_buffer_head = head;
    2fe8:	b2e4      	uxtb	r4, r4
					yield();
				}
			} while (tx_buffer_tail == head);
		}
        	tx_buffer[head] = *p++;
        	transmitting = 1;
    2fea:	701a      	strb	r2, [r3, #0]
        	tx_buffer_head = head;
    2fec:	f888 4000 	strb.w	r4, [r8]
    2ff0:	e7c2      	b.n	2f78 <serial_write+0x1c>
	}
        UART0_C2 = C2_TX_ACTIVE;
    2ff2:	4b05      	ldr	r3, [pc, #20]	; (3008 <serial_write+0xac>)
    2ff4:	22bc      	movs	r2, #188	; 0xbc
    2ff6:	701a      	strb	r2, [r3, #0]
    2ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ffc:	40048034 	.word	0x40048034
    3000:	1fff9230 	.word	0x1fff9230
    3004:	1fff922f 	.word	0x1fff922f
    3008:	4006a003 	.word	0x4006a003
    300c:	4006a004 	.word	0x4006a004
    3010:	1fff91ae 	.word	0x1fff91ae
    3014:	4006a007 	.word	0x4006a007
    3018:	1fff91ac 	.word	0x1fff91ac
    301c:	1fff9234 	.word	0x1fff9234

00003020 <serial_flush>:
}

void serial_flush(void)
{
    3020:	b508      	push	{r3, lr}
	while (transmitting) yield(); // wait
    3022:	4b03      	ldr	r3, [pc, #12]	; (3030 <serial_flush+0x10>)
    3024:	781b      	ldrb	r3, [r3, #0]
    3026:	b113      	cbz	r3, 302e <serial_flush+0xe>
    3028:	f001 fa18 	bl	445c <yield>
    302c:	e7f9      	b.n	3022 <serial_flush+0x2>
}
    302e:	bd08      	pop	{r3, pc}
    3030:	1fff91ac 	.word	0x1fff91ac

00003034 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3034:	4b05      	ldr	r3, [pc, #20]	; (304c <serial_available+0x18>)
    3036:	7818      	ldrb	r0, [r3, #0]
	tail = rx_buffer_tail;
    3038:	4b05      	ldr	r3, [pc, #20]	; (3050 <serial_available+0x1c>)
    303a:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    303c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    303e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3040:	4298      	cmp	r0, r3
	return RX_BUFFER_SIZE + head - tail;
    3042:	bf38      	it	cc
    3044:	3040      	addcc	r0, #64	; 0x40
    3046:	1ac0      	subs	r0, r0, r3
}
    3048:	4770      	bx	lr
    304a:	bf00      	nop
    304c:	1fff922e 	.word	0x1fff922e
    3050:	1fff91ad 	.word	0x1fff91ad

00003054 <serial_getchar>:
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    3054:	4b09      	ldr	r3, [pc, #36]	; (307c <serial_getchar+0x28>)
	tail = rx_buffer_tail;
    3056:	4a0a      	ldr	r2, [pc, #40]	; (3080 <serial_getchar+0x2c>)
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    3058:	7819      	ldrb	r1, [r3, #0]
	tail = rx_buffer_tail;
    305a:	7813      	ldrb	r3, [r2, #0]
    305c:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    305e:	4299      	cmp	r1, r3
    3060:	d008      	beq.n	3074 <serial_getchar+0x20>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    3062:	3301      	adds	r3, #1
    3064:	2b40      	cmp	r3, #64	; 0x40
    3066:	bf28      	it	cs
    3068:	2300      	movcs	r3, #0
	c = rx_buffer[tail];
    306a:	4906      	ldr	r1, [pc, #24]	; (3084 <serial_getchar+0x30>)
    306c:	5cc8      	ldrb	r0, [r1, r3]
	rx_buffer_tail = tail;
    306e:	b2db      	uxtb	r3, r3
    3070:	7013      	strb	r3, [r2, #0]
	return c;
    3072:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    3074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
	return c;
}
    3078:	4770      	bx	lr
    307a:	bf00      	nop
    307c:	1fff922e 	.word	0x1fff922e
    3080:	1fff91ad 	.word	0x1fff91ad
    3084:	1fff91ee 	.word	0x1fff91ee

00003088 <serial_peek>:

int serial_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3088:	4b08      	ldr	r3, [pc, #32]	; (30ac <serial_peek+0x24>)
    308a:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    308c:	4b08      	ldr	r3, [pc, #32]	; (30b0 <serial_peek+0x28>)
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    3092:	429a      	cmp	r2, r3
    3094:	d007      	beq.n	30a6 <serial_peek+0x1e>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    3096:	3301      	adds	r3, #1
    3098:	2b40      	cmp	r3, #64	; 0x40
    309a:	bf28      	it	cs
    309c:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    309e:	4a05      	ldr	r2, [pc, #20]	; (30b4 <serial_peek+0x2c>)
    30a0:	5cd0      	ldrb	r0, [r2, r3]
    30a2:	b2c0      	uxtb	r0, r0
    30a4:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    30a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    30aa:	4770      	bx	lr
    30ac:	1fff922e 	.word	0x1fff922e
    30b0:	1fff91ad 	.word	0x1fff91ad
    30b4:	1fff91ee 	.word	0x1fff91ee

000030b8 <serial_clear>:

void serial_clear(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    30b8:	4b0a      	ldr	r3, [pc, #40]	; (30e4 <serial_clear+0x2c>)
    30ba:	681b      	ldr	r3, [r3, #0]
    30bc:	055b      	lsls	r3, r3, #21
    30be:	d510      	bpl.n	30e2 <serial_clear+0x2a>
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    30c0:	4b09      	ldr	r3, [pc, #36]	; (30e8 <serial_clear+0x30>)
    30c2:	781a      	ldrb	r2, [r3, #0]
    30c4:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    30c8:	701a      	strb	r2, [r3, #0]
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
    30ca:	4a08      	ldr	r2, [pc, #32]	; (30ec <serial_clear+0x34>)
    30cc:	2140      	movs	r1, #64	; 0x40
    30ce:	7011      	strb	r1, [r2, #0]
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    30d0:	781a      	ldrb	r2, [r3, #0]
    30d2:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    30d6:	701a      	strb	r2, [r3, #0]
	rx_buffer_head = rx_buffer_tail;
    30d8:	4b05      	ldr	r3, [pc, #20]	; (30f0 <serial_clear+0x38>)
    30da:	781a      	ldrb	r2, [r3, #0]
    30dc:	4b05      	ldr	r3, [pc, #20]	; (30f4 <serial_clear+0x3c>)
    30de:	b2d2      	uxtb	r2, r2
    30e0:	701a      	strb	r2, [r3, #0]
    30e2:	4770      	bx	lr
    30e4:	40048034 	.word	0x40048034
    30e8:	4006a003 	.word	0x4006a003
    30ec:	4006a011 	.word	0x4006a011
    30f0:	1fff91ad 	.word	0x1fff91ad
    30f4:	1fff922e 	.word	0x1fff922e

000030f8 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect               UART_S2_LBKDIF
//   RxD pin active edge            UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    30f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t head, newhead, tail, n;
	uint8_t avail, c;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    30fa:	4a30      	ldr	r2, [pc, #192]	; (31bc <uart0_status_isr+0xc4>)
    30fc:	7813      	ldrb	r3, [r2, #0]
    30fe:	f013 0f30 	tst.w	r3, #48	; 0x30
    3102:	d025      	beq.n	3150 <uart0_status_isr+0x58>
		__disable_irq();
    3104:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    3106:	4b2e      	ldr	r3, [pc, #184]	; (31c0 <uart0_status_isr+0xc8>)
    3108:	4c2e      	ldr	r4, [pc, #184]	; (31c4 <uart0_status_isr+0xcc>)
    310a:	781b      	ldrb	r3, [r3, #0]
		if (avail == 0) {
    310c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    3110:	b92b      	cbnz	r3, 311e <uart0_status_isr+0x26>
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3112:	7823      	ldrb	r3, [r4, #0]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3114:	4b2c      	ldr	r3, [pc, #176]	; (31c8 <uart0_status_isr+0xd0>)
    3116:	2140      	movs	r1, #64	; 0x40
    3118:	7019      	strb	r1, [r3, #0]
			__enable_irq();
    311a:	b662      	cpsie	i
    311c:	e018      	b.n	3150 <uart0_status_isr+0x58>
		} else {
			__enable_irq();
    311e:	b662      	cpsie	i
			head = rx_buffer_head;
    3120:	4b2a      	ldr	r3, [pc, #168]	; (31cc <uart0_status_isr+0xd4>)
			tail = rx_buffer_tail;
    3122:	4d2b      	ldr	r5, [pc, #172]	; (31d0 <uart0_status_isr+0xd8>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3124:	7819      	ldrb	r1, [r3, #0]
			tail = rx_buffer_tail;
    3126:	782e      	ldrb	r6, [r5, #0]
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3128:	b2c9      	uxtb	r1, r1
			tail = rx_buffer_tail;
    312a:	b2f6      	uxtb	r6, r6
    312c:	461d      	mov	r5, r3
			do {
				n = UART0_D;
				if (use9Bits && (UART0_C3 & 0x80)) n |= 0x100;
				newhead = head + 1;
    312e:	1c4b      	adds	r3, r1, #1
				if (newhead >= RX_BUFFER_SIZE) newhead = 0;
    3130:	2b40      	cmp	r3, #64	; 0x40
		} else {
			__enable_irq();
			head = rx_buffer_head;
			tail = rx_buffer_tail;
			do {
				n = UART0_D;
    3132:	7827      	ldrb	r7, [r4, #0]
				if (use9Bits && (UART0_C3 & 0x80)) n |= 0x100;
				newhead = head + 1;
				if (newhead >= RX_BUFFER_SIZE) newhead = 0;
    3134:	bf28      	it	cs
    3136:	2300      	movcs	r3, #0
				if (newhead != tail) {
    3138:	42b3      	cmp	r3, r6
		} else {
			__enable_irq();
			head = rx_buffer_head;
			tail = rx_buffer_tail;
			do {
				n = UART0_D;
    313a:	b2ff      	uxtb	r7, r7
				if (use9Bits && (UART0_C3 & 0x80)) n |= 0x100;
				newhead = head + 1;
				if (newhead >= RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
    313c:	d002      	beq.n	3144 <uart0_status_isr+0x4c>
					head = newhead;
					rx_buffer[head] = n;
    313e:	4925      	ldr	r1, [pc, #148]	; (31d4 <uart0_status_isr+0xdc>)
    3140:	54cf      	strb	r7, [r1, r3]
    3142:	4619      	mov	r1, r3
				}
			} while (--avail > 0);
    3144:	1e43      	subs	r3, r0, #1
    3146:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
    314a:	d1f0      	bne.n	312e <uart0_status_isr+0x36>
			rx_buffer_head = head;
    314c:	b2c9      	uxtb	r1, r1
    314e:	7029      	strb	r1, [r5, #0]
		}
	}
	c = UART0_C2;
    3150:	4b21      	ldr	r3, [pc, #132]	; (31d8 <uart0_status_isr+0xe0>)
    3152:	7819      	ldrb	r1, [r3, #0]
    3154:	b2c9      	uxtb	r1, r1
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3156:	060d      	lsls	r5, r1, #24
    3158:	d520      	bpl.n	319c <uart0_status_isr+0xa4>
    315a:	7813      	ldrb	r3, [r2, #0]
    315c:	061c      	lsls	r4, r3, #24
    315e:	d51d      	bpl.n	319c <uart0_status_isr+0xa4>
		head = tx_buffer_head;
    3160:	4b1e      	ldr	r3, [pc, #120]	; (31dc <uart0_status_isr+0xe4>)
		tail = tx_buffer_tail;
    3162:	481f      	ldr	r0, [pc, #124]	; (31e0 <uart0_status_isr+0xe8>)
			rx_buffer_head = head;
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3164:	781e      	ldrb	r6, [r3, #0]
		tail = tx_buffer_tail;
    3166:	7803      	ldrb	r3, [r0, #0]
			rx_buffer_head = head;
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3168:	b2f6      	uxtb	r6, r6
		tail = tx_buffer_tail;
    316a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    316c:	42b3      	cmp	r3, r6
    316e:	d00d      	beq.n	318c <uart0_status_isr+0x94>
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3170:	3301      	adds	r3, #1
    3172:	2b40      	cmp	r3, #64	; 0x40
			avail = UART0_S1;
    3174:	7814      	ldrb	r4, [r2, #0]
			n = tx_buffer[tail];
    3176:	4c1b      	ldr	r4, [pc, #108]	; (31e4 <uart0_status_isr+0xec>)
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3178:	bf28      	it	cs
    317a:	2300      	movcs	r3, #0
			avail = UART0_S1;
			n = tx_buffer[tail];
    317c:	5ce5      	ldrb	r5, [r4, r3]
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    317e:	4c11      	ldr	r4, [pc, #68]	; (31c4 <uart0_status_isr+0xcc>)
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			avail = UART0_S1;
			n = tx_buffer[tail];
    3180:	b2ed      	uxtb	r5, r5
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3182:	7025      	strb	r5, [r4, #0]
		} while (UART0_TCFIFO < 8);
    3184:	340d      	adds	r4, #13
    3186:	7824      	ldrb	r4, [r4, #0]
    3188:	2c07      	cmp	r4, #7
    318a:	d9ef      	bls.n	316c <uart0_status_isr+0x74>
		tx_buffer_tail = tail;
    318c:	b2db      	uxtb	r3, r3
    318e:	7003      	strb	r3, [r0, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3190:	7813      	ldrb	r3, [r2, #0]
    3192:	0618      	lsls	r0, r3, #24
    3194:	d502      	bpl.n	319c <uart0_status_isr+0xa4>
    3196:	4b10      	ldr	r3, [pc, #64]	; (31d8 <uart0_status_isr+0xe0>)
    3198:	207c      	movs	r0, #124	; 0x7c
    319a:	7018      	strb	r0, [r3, #0]
	}
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    319c:	0649      	lsls	r1, r1, #25
    319e:	d50c      	bpl.n	31ba <uart0_status_isr+0xc2>
    31a0:	7813      	ldrb	r3, [r2, #0]
    31a2:	065b      	lsls	r3, r3, #25
    31a4:	d509      	bpl.n	31ba <uart0_status_isr+0xc2>
		transmitting = 0;
    31a6:	4b10      	ldr	r3, [pc, #64]	; (31e8 <uart0_status_isr+0xf0>)
    31a8:	2200      	movs	r2, #0
    31aa:	701a      	strb	r2, [r3, #0]
		if (transmit_pin) *transmit_pin = 0;
    31ac:	4b0f      	ldr	r3, [pc, #60]	; (31ec <uart0_status_isr+0xf4>)
    31ae:	681b      	ldr	r3, [r3, #0]
    31b0:	b103      	cbz	r3, 31b4 <uart0_status_isr+0xbc>
    31b2:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    31b4:	4b08      	ldr	r3, [pc, #32]	; (31d8 <uart0_status_isr+0xe0>)
    31b6:	223c      	movs	r2, #60	; 0x3c
    31b8:	701a      	strb	r2, [r3, #0]
    31ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31bc:	4006a004 	.word	0x4006a004
    31c0:	4006a016 	.word	0x4006a016
    31c4:	4006a007 	.word	0x4006a007
    31c8:	4006a011 	.word	0x4006a011
    31cc:	1fff922e 	.word	0x1fff922e
    31d0:	1fff91ad 	.word	0x1fff91ad
    31d4:	1fff91ee 	.word	0x1fff91ee
    31d8:	4006a003 	.word	0x4006a003
    31dc:	1fff9234 	.word	0x1fff9234
    31e0:	1fff922f 	.word	0x1fff922f
    31e4:	1fff91ae 	.word	0x1fff91ae
    31e8:	1fff91ac 	.word	0x1fff91ac
    31ec:	1fff9230 	.word	0x1fff9230

000031f0 <serial2_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    31f0:	4b17      	ldr	r3, [pc, #92]	; (3250 <serial2_begin+0x60>)
    31f2:	681a      	ldr	r2, [r3, #0]
    31f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    31f8:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
    31fa:	4a16      	ldr	r2, [pc, #88]	; (3254 <serial2_begin+0x64>)
    31fc:	2300      	movs	r3, #0
    31fe:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    3200:	4a15      	ldr	r2, [pc, #84]	; (3258 <serial2_begin+0x68>)
    3202:	7013      	strb	r3, [r2, #0]
	tx_buffer_head = 0;
    3204:	4a15      	ldr	r2, [pc, #84]	; (325c <serial2_begin+0x6c>)
    3206:	7013      	strb	r3, [r2, #0]
	tx_buffer_tail = 0;
    3208:	4a15      	ldr	r2, [pc, #84]	; (3260 <serial2_begin+0x70>)
    320a:	7013      	strb	r3, [r2, #0]
	transmitting = 0;
    320c:	4a15      	ldr	r2, [pc, #84]	; (3264 <serial2_begin+0x74>)
    320e:	7013      	strb	r3, [r2, #0]
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    3210:	4a15      	ldr	r2, [pc, #84]	; (3268 <serial2_begin+0x78>)
    3212:	f240 3113 	movw	r1, #787	; 0x313
    3216:	6011      	str	r1, [r2, #0]
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    3218:	f44f 7151 	mov.w	r1, #836	; 0x344
    321c:	6051      	str	r1, [r2, #4]
	UART1_BDH = (divisor >> 13) & 0x1F;
    321e:	4a13      	ldr	r2, [pc, #76]	; (326c <serial2_begin+0x7c>)
    3220:	f3c0 3144 	ubfx	r1, r0, #13, #5
    3224:	7011      	strb	r1, [r2, #0]
	UART1_BDL = (divisor >> 5) & 0xFF;
    3226:	f3c0 1147 	ubfx	r1, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    322a:	f000 001f 	and.w	r0, r0, #31
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART1_BDH = (divisor >> 13) & 0x1F;
	UART1_BDL = (divisor >> 5) & 0xFF;
    322e:	7051      	strb	r1, [r2, #1]
	UART1_C4 = divisor & 0x1F;
    3230:	7290      	strb	r0, [r2, #10]
	UART1_C1 = 0;
    3232:	7093      	strb	r3, [r2, #2]
	UART1_PFIFO = 0;
    3234:	7413      	strb	r3, [r2, #16]
	UART1_C2 = C2_TX_INACTIVE;
    3236:	4b0e      	ldr	r3, [pc, #56]	; (3270 <serial2_begin+0x80>)
    3238:	222c      	movs	r2, #44	; 0x2c
    323a:	701a      	strb	r2, [r3, #0]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    323c:	4b0d      	ldr	r3, [pc, #52]	; (3274 <serial2_begin+0x84>)
    323e:	2240      	movs	r2, #64	; 0x40
    3240:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    3242:	f2a3 332b 	subw	r3, r3, #811	; 0x32b
    3246:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    324a:	601a      	str	r2, [r3, #0]
    324c:	4770      	bx	lr
    324e:	bf00      	nop
    3250:	40048034 	.word	0x40048034
    3254:	1fff929f 	.word	0x1fff929f
    3258:	1fff9236 	.word	0x1fff9236
    325c:	1fff92a1 	.word	0x1fff92a1
    3260:	1fff92a0 	.word	0x1fff92a0
    3264:	1fff9235 	.word	0x1fff9235
    3268:	4004b00c 	.word	0x4004b00c
    326c:	4006b000 	.word	0x4006b000
    3270:	4006b003 	.word	0x4006b003
    3274:	e000e42f 	.word	0xe000e42f

00003278 <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    3278:	4a13      	ldr	r2, [pc, #76]	; (32c8 <serial2_format+0x50>)
    327a:	7813      	ldrb	r3, [r2, #0]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    327c:	f000 0103 	and.w	r1, r0, #3
    3280:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    3284:	430b      	orrs	r3, r1
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    3286:	0741      	lsls	r1, r0, #29
    3288:	bf48      	it	mi
    328a:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_C1 = c;
    328e:	7013      	strb	r3, [r2, #0]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    3290:	f000 030f 	and.w	r3, r0, #15
    3294:	2b04      	cmp	r3, #4
    3296:	4b0d      	ldr	r3, [pc, #52]	; (32cc <serial2_format+0x54>)
    3298:	d103      	bne.n	32a2 <serial2_format+0x2a>
    329a:	781a      	ldrb	r2, [r3, #0]
    329c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    32a0:	701a      	strb	r2, [r3, #0]
	c = UART1_S2 & ~0x10;
    32a2:	490b      	ldr	r1, [pc, #44]	; (32d0 <serial2_format+0x58>)
    32a4:	780a      	ldrb	r2, [r1, #0]
	if (format & 0x10) c |= 0x10;		// rx invert
    32a6:	f010 0f10 	tst.w	r0, #16
	c = UART1_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART1_S2 & ~0x10;
    32aa:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    32ae:	bf18      	it	ne
    32b0:	f042 0210 	orrne.w	r2, r2, #16
	UART1_S2 = c;
    32b4:	700a      	strb	r2, [r1, #0]
	c = UART1_C3 & ~0x10;
    32b6:	781a      	ldrb	r2, [r3, #0]
	if (format & 0x20) c |= 0x10;		// tx invert
    32b8:	0681      	lsls	r1, r0, #26
	UART1_C1 = c;
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART1_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
	c = UART1_C3 & ~0x10;
    32ba:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x20) c |= 0x10;		// tx invert
    32be:	bf48      	it	mi
    32c0:	f042 0210 	orrmi.w	r2, r2, #16
	UART1_C3 = c;
    32c4:	701a      	strb	r2, [r3, #0]
    32c6:	4770      	bx	lr
    32c8:	4006b002 	.word	0x4006b002
    32cc:	4006b006 	.word	0x4006b006
    32d0:	4006b005 	.word	0x4006b005

000032d4 <serial2_end>:
	// UART1_C3.4 = txinv, 0=normal, 1=inverted
	// UART1_S2.4 = rxinv, 0=normal, 1=inverted
}

void serial2_end(void)
{
    32d4:	b508      	push	{r3, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    32d6:	4b0e      	ldr	r3, [pc, #56]	; (3310 <serial2_end+0x3c>)
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	051b      	lsls	r3, r3, #20
    32dc:	d400      	bmi.n	32e0 <serial2_end+0xc>
    32de:	bd08      	pop	{r3, pc}
	while (transmitting) yield();  // wait for buffered data to send
    32e0:	4b0c      	ldr	r3, [pc, #48]	; (3314 <serial2_end+0x40>)
    32e2:	781a      	ldrb	r2, [r3, #0]
    32e4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    32e8:	b112      	cbz	r2, 32f0 <serial2_end+0x1c>
    32ea:	f001 f8b7 	bl	445c <yield>
    32ee:	e7f7      	b.n	32e0 <serial2_end+0xc>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    32f0:	4a09      	ldr	r2, [pc, #36]	; (3318 <serial2_end+0x44>)
    32f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    32f6:	6011      	str	r1, [r2, #0]
	UART1_C2 = 0;
    32f8:	4a08      	ldr	r2, [pc, #32]	; (331c <serial2_end+0x48>)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    32fa:	4909      	ldr	r1, [pc, #36]	; (3320 <serial2_end+0x4c>)
void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    32fc:	7013      	strb	r3, [r2, #0]
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    32fe:	f240 1203 	movw	r2, #259	; 0x103
    3302:	600a      	str	r2, [r1, #0]
	CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    3304:	604a      	str	r2, [r1, #4]
	rx_buffer_head = 0;
    3306:	4a07      	ldr	r2, [pc, #28]	; (3324 <serial2_end+0x50>)
    3308:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    330a:	4a07      	ldr	r2, [pc, #28]	; (3328 <serial2_end+0x54>)
    330c:	7013      	strb	r3, [r2, #0]
    330e:	bd08      	pop	{r3, pc}
    3310:	40048034 	.word	0x40048034
    3314:	1fff9235 	.word	0x1fff9235
    3318:	e000e184 	.word	0xe000e184
    331c:	4006b003 	.word	0x4006b003
    3320:	4004b00c 	.word	0x4004b00c
    3324:	1fff929f 	.word	0x1fff929f
    3328:	1fff9236 	.word	0x1fff9236

0000332c <serial2_putchar>:
}

void serial2_putchar(uint32_t c)
{
    332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    332e:	4b1b      	ldr	r3, [pc, #108]	; (339c <serial2_putchar+0x70>)
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	051a      	lsls	r2, r3, #20
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
}

void serial2_putchar(uint32_t c)
{
    3334:	4607      	mov	r7, r0
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    3336:	d52f      	bpl.n	3398 <serial2_putchar+0x6c>
	head = tx_buffer_head;
    3338:	4b19      	ldr	r3, [pc, #100]	; (33a0 <serial2_putchar+0x74>)
    333a:	781c      	ldrb	r4, [r3, #0]
	if (++head >= TX_BUFFER_SIZE) head = 0;
    333c:	3401      	adds	r4, #1
    333e:	2c28      	cmp	r4, #40	; 0x28
    3340:	461e      	mov	r6, r3
    3342:	bf28      	it	cs
    3344:	2400      	movcs	r4, #0
	while (tx_buffer_tail == head) {
    3346:	4d17      	ldr	r5, [pc, #92]	; (33a4 <serial2_putchar+0x78>)
    3348:	782b      	ldrb	r3, [r5, #0]
    334a:	42a3      	cmp	r3, r4
    334c:	d119      	bne.n	3382 <serial2_putchar+0x56>
		int priority = nvic_execution_priority();
    334e:	f7ff fa19 	bl	2784 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    3352:	2840      	cmp	r0, #64	; 0x40
    3354:	dc10      	bgt.n	3378 <serial2_putchar+0x4c>
			if ((UART1_S1 & UART_S1_TDRE)) {
    3356:	4b14      	ldr	r3, [pc, #80]	; (33a8 <serial2_putchar+0x7c>)
    3358:	781b      	ldrb	r3, [r3, #0]
    335a:	061b      	lsls	r3, r3, #24
    335c:	d5f3      	bpl.n	3346 <serial2_putchar+0x1a>
				uint32_t tail = tx_buffer_tail;
    335e:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART1_D = tx_buffer[tail];
    3360:	4a12      	ldr	r2, [pc, #72]	; (33ac <serial2_putchar+0x80>)
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART1_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3362:	3301      	adds	r3, #1
    3364:	2b28      	cmp	r3, #40	; 0x28
    3366:	bf28      	it	cs
    3368:	2300      	movcs	r3, #0
				UART1_D = tx_buffer[tail];
    336a:	5cd1      	ldrb	r1, [r2, r3]
    336c:	4a10      	ldr	r2, [pc, #64]	; (33b0 <serial2_putchar+0x84>)
    336e:	b2c9      	uxtb	r1, r1
				tx_buffer_tail = tail;
    3370:	b2db      	uxtb	r3, r3
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART1_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART1_D = tx_buffer[tail];
    3372:	7011      	strb	r1, [r2, #0]
				tx_buffer_tail = tail;
    3374:	702b      	strb	r3, [r5, #0]
    3376:	e7e6      	b.n	3346 <serial2_putchar+0x1a>
			}
		} else if (priority >= 256) {
    3378:	28ff      	cmp	r0, #255	; 0xff
    337a:	dde4      	ble.n	3346 <serial2_putchar+0x1a>
			yield(); // wait
    337c:	f001 f86e 	bl	445c <yield>
    3380:	e7e1      	b.n	3346 <serial2_putchar+0x1a>
		}
	}
	tx_buffer[head] = c;
    3382:	4b0a      	ldr	r3, [pc, #40]	; (33ac <serial2_putchar+0x80>)
    3384:	b2ff      	uxtb	r7, r7
    3386:	551f      	strb	r7, [r3, r4]
	transmitting = 1;
    3388:	4b0a      	ldr	r3, [pc, #40]	; (33b4 <serial2_putchar+0x88>)
    338a:	2201      	movs	r2, #1
    338c:	701a      	strb	r2, [r3, #0]
	tx_buffer_head = head;
	UART1_C2 = C2_TX_ACTIVE;
    338e:	4b0a      	ldr	r3, [pc, #40]	; (33b8 <serial2_putchar+0x8c>)
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    3390:	b2e4      	uxtb	r4, r4
	UART1_C2 = C2_TX_ACTIVE;
    3392:	22ac      	movs	r2, #172	; 0xac
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    3394:	7034      	strb	r4, [r6, #0]
	UART1_C2 = C2_TX_ACTIVE;
    3396:	701a      	strb	r2, [r3, #0]
    3398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    339a:	bf00      	nop
    339c:	40048034 	.word	0x40048034
    33a0:	1fff92a1 	.word	0x1fff92a1
    33a4:	1fff92a0 	.word	0x1fff92a0
    33a8:	4006b004 	.word	0x4006b004
    33ac:	1fff9237 	.word	0x1fff9237
    33b0:	4006b007 	.word	0x4006b007
    33b4:	1fff9235 	.word	0x1fff9235
    33b8:	4006b003 	.word	0x4006b003

000033bc <serial2_write>:
}

void serial2_write(const void *buf, unsigned int count)
{
    33bc:	b538      	push	{r3, r4, r5, lr}
    33be:	4604      	mov	r4, r0
    33c0:	1845      	adds	r5, r0, r1
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial2_putchar(*p++);
    33c2:	42ac      	cmp	r4, r5
    33c4:	d004      	beq.n	33d0 <serial2_write+0x14>
    33c6:	f814 0b01 	ldrb.w	r0, [r4], #1
    33ca:	f7ff ffaf 	bl	332c <serial2_putchar>
    33ce:	e7f8      	b.n	33c2 <serial2_write+0x6>
}
    33d0:	bd38      	pop	{r3, r4, r5, pc}
    33d2:	ffff b508 	vabal.u<illegal width 64>	<illegal reg q13.5>, d15, d8

000033d4 <serial2_flush>:

void serial2_flush(void)
{
    33d4:	b508      	push	{r3, lr}
	while (transmitting) yield(); // wait
    33d6:	4b03      	ldr	r3, [pc, #12]	; (33e4 <serial2_flush+0x10>)
    33d8:	781b      	ldrb	r3, [r3, #0]
    33da:	b113      	cbz	r3, 33e2 <serial2_flush+0xe>
    33dc:	f001 f83e 	bl	445c <yield>
    33e0:	e7f9      	b.n	33d6 <serial2_flush+0x2>
}
    33e2:	bd08      	pop	{r3, pc}
    33e4:	1fff9235 	.word	0x1fff9235

000033e8 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    33e8:	4b05      	ldr	r3, [pc, #20]	; (3400 <serial2_available+0x18>)
    33ea:	7818      	ldrb	r0, [r3, #0]
	tail = rx_buffer_tail;
    33ec:	4b05      	ldr	r3, [pc, #20]	; (3404 <serial2_available+0x1c>)
    33ee:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    33f0:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    33f2:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    33f4:	4298      	cmp	r0, r3
	return RX_BUFFER_SIZE + head - tail;
    33f6:	bf38      	it	cc
    33f8:	3040      	addcc	r0, #64	; 0x40
    33fa:	1ac0      	subs	r0, r0, r3
}
    33fc:	4770      	bx	lr
    33fe:	bf00      	nop
    3400:	1fff929f 	.word	0x1fff929f
    3404:	1fff9236 	.word	0x1fff9236

00003408 <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    3408:	4b09      	ldr	r3, [pc, #36]	; (3430 <serial2_getchar+0x28>)
	tail = rx_buffer_tail;
    340a:	4a0a      	ldr	r2, [pc, #40]	; (3434 <serial2_getchar+0x2c>)
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    340c:	7819      	ldrb	r1, [r3, #0]
	tail = rx_buffer_tail;
    340e:	7813      	ldrb	r3, [r2, #0]
    3410:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    3412:	4299      	cmp	r1, r3
    3414:	d008      	beq.n	3428 <serial2_getchar+0x20>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    3416:	3301      	adds	r3, #1
    3418:	2b40      	cmp	r3, #64	; 0x40
    341a:	bf28      	it	cs
    341c:	2300      	movcs	r3, #0
	c = rx_buffer[tail];
    341e:	4906      	ldr	r1, [pc, #24]	; (3438 <serial2_getchar+0x30>)
    3420:	5cc8      	ldrb	r0, [r1, r3]
	rx_buffer_tail = tail;
    3422:	b2db      	uxtb	r3, r3
    3424:	7013      	strb	r3, [r2, #0]
	return c;
    3426:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    3428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
	return c;
}
    342c:	4770      	bx	lr
    342e:	bf00      	nop
    3430:	1fff929f 	.word	0x1fff929f
    3434:	1fff9236 	.word	0x1fff9236
    3438:	1fff925f 	.word	0x1fff925f

0000343c <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    343c:	4b08      	ldr	r3, [pc, #32]	; (3460 <serial2_peek+0x24>)
    343e:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    3440:	4b08      	ldr	r3, [pc, #32]	; (3464 <serial2_peek+0x28>)
    3442:	781b      	ldrb	r3, [r3, #0]
    3444:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    3446:	429a      	cmp	r2, r3
    3448:	d007      	beq.n	345a <serial2_peek+0x1e>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    344a:	3301      	adds	r3, #1
    344c:	2b40      	cmp	r3, #64	; 0x40
    344e:	bf28      	it	cs
    3450:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    3452:	4a05      	ldr	r2, [pc, #20]	; (3468 <serial2_peek+0x2c>)
    3454:	5cd0      	ldrb	r0, [r2, r3]
    3456:	b2c0      	uxtb	r0, r0
    3458:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    345a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    345e:	4770      	bx	lr
    3460:	1fff929f 	.word	0x1fff929f
    3464:	1fff9236 	.word	0x1fff9236
    3468:	1fff925f 	.word	0x1fff925f

0000346c <serial2_clear>:

void serial2_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    346c:	4b02      	ldr	r3, [pc, #8]	; (3478 <serial2_clear+0xc>)
    346e:	781a      	ldrb	r2, [r3, #0]
    3470:	4b02      	ldr	r3, [pc, #8]	; (347c <serial2_clear+0x10>)
    3472:	b2d2      	uxtb	r2, r2
    3474:	701a      	strb	r2, [r3, #0]
    3476:	4770      	bx	lr
    3478:	1fff9236 	.word	0x1fff9236
    347c:	1fff929f 	.word	0x1fff929f

00003480 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect               UART_S2_LBKDIF
//   RxD pin active edge            UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3480:	b570      	push	{r4, r5, r6, lr}
	uint32_t head, tail, n;
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
    3482:	491e      	ldr	r1, [pc, #120]	; (34fc <uart1_status_isr+0x7c>)
    3484:	780b      	ldrb	r3, [r1, #0]
    3486:	069e      	lsls	r6, r3, #26
    3488:	d510      	bpl.n	34ac <uart1_status_isr+0x2c>
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
    348a:	4b1d      	ldr	r3, [pc, #116]	; (3500 <uart1_status_isr+0x80>)
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    348c:	4a1d      	ldr	r2, [pc, #116]	; (3504 <uart1_status_isr+0x84>)
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
    348e:	781c      	ldrb	r4, [r3, #0]
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    3490:	7813      	ldrb	r3, [r2, #0]
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3492:	481d      	ldr	r0, [pc, #116]	; (3508 <uart1_status_isr+0x88>)
	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    3494:	3301      	adds	r3, #1
		if (head >= RX_BUFFER_SIZE) head = 0;
    3496:	2b40      	cmp	r3, #64	; 0x40
		if (head != rx_buffer_tail) {
    3498:	7800      	ldrb	r0, [r0, #0]
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
    349a:	bf28      	it	cs
    349c:	2300      	movcs	r3, #0
		if (head != rx_buffer_tail) {
    349e:	4283      	cmp	r3, r0
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
    34a0:	b2e4      	uxtb	r4, r4
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    34a2:	d003      	beq.n	34ac <uart1_status_isr+0x2c>
			rx_buffer[head] = n;
    34a4:	4819      	ldr	r0, [pc, #100]	; (350c <uart1_status_isr+0x8c>)
    34a6:	54c4      	strb	r4, [r0, r3]
			rx_buffer_head = head; 
    34a8:	b2db      	uxtb	r3, r3
    34aa:	7013      	strb	r3, [r2, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	c = UART1_C2;
    34ac:	4a18      	ldr	r2, [pc, #96]	; (3510 <uart1_status_isr+0x90>)
    34ae:	7810      	ldrb	r0, [r2, #0]
    34b0:	b2c0      	uxtb	r0, r0
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    34b2:	0605      	lsls	r5, r0, #24
    34b4:	d517      	bpl.n	34e6 <uart1_status_isr+0x66>
    34b6:	780b      	ldrb	r3, [r1, #0]
    34b8:	061c      	lsls	r4, r3, #24
    34ba:	d514      	bpl.n	34e6 <uart1_status_isr+0x66>
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    34bc:	4b15      	ldr	r3, [pc, #84]	; (3514 <uart1_status_isr+0x94>)
		tail = tx_buffer_tail;
    34be:	4c16      	ldr	r4, [pc, #88]	; (3518 <uart1_status_isr+0x98>)
		//digitalWriteFast(5, LOW);
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    34c0:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    34c2:	7823      	ldrb	r3, [r4, #0]
    34c4:	b2db      	uxtb	r3, r3
		if (head == tail) {
    34c6:	429d      	cmp	r5, r3
    34c8:	d102      	bne.n	34d0 <uart1_status_isr+0x50>
			UART1_C2 = C2_TX_COMPLETING;
    34ca:	236c      	movs	r3, #108	; 0x6c
    34cc:	7013      	strb	r3, [r2, #0]
    34ce:	e00a      	b.n	34e6 <uart1_status_isr+0x66>
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    34d0:	3301      	adds	r3, #1
    34d2:	2b28      	cmp	r3, #40	; 0x28
    34d4:	bf28      	it	cs
    34d6:	2300      	movcs	r3, #0
			n = tx_buffer[tail];
    34d8:	4d10      	ldr	r5, [pc, #64]	; (351c <uart1_status_isr+0x9c>)
    34da:	5cee      	ldrb	r6, [r5, r3]
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    34dc:	4d08      	ldr	r5, [pc, #32]	; (3500 <uart1_status_isr+0x80>)
		tail = tx_buffer_tail;
		if (head == tail) {
			UART1_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    34de:	b2f6      	uxtb	r6, r6
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
			tx_buffer_tail = tail;
    34e0:	b2db      	uxtb	r3, r3
			UART1_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    34e2:	702e      	strb	r6, [r5, #0]
			tx_buffer_tail = tail;
    34e4:	7023      	strb	r3, [r4, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    34e6:	0640      	lsls	r0, r0, #25
    34e8:	d507      	bpl.n	34fa <uart1_status_isr+0x7a>
    34ea:	780b      	ldrb	r3, [r1, #0]
    34ec:	065b      	lsls	r3, r3, #25
    34ee:	d504      	bpl.n	34fa <uart1_status_isr+0x7a>
		transmitting = 0;
    34f0:	4b0b      	ldr	r3, [pc, #44]	; (3520 <uart1_status_isr+0xa0>)
    34f2:	2100      	movs	r1, #0
    34f4:	7019      	strb	r1, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    34f6:	232c      	movs	r3, #44	; 0x2c
    34f8:	7013      	strb	r3, [r2, #0]
    34fa:	bd70      	pop	{r4, r5, r6, pc}
    34fc:	4006b004 	.word	0x4006b004
    3500:	4006b007 	.word	0x4006b007
    3504:	1fff929f 	.word	0x1fff929f
    3508:	1fff9236 	.word	0x1fff9236
    350c:	1fff925f 	.word	0x1fff925f
    3510:	4006b003 	.word	0x4006b003
    3514:	1fff92a1 	.word	0x1fff92a1
    3518:	1fff92a0 	.word	0x1fff92a0
    351c:	1fff9237 	.word	0x1fff9237
    3520:	1fff9235 	.word	0x1fff9235

00003524 <serial3_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    3524:	4b17      	ldr	r3, [pc, #92]	; (3584 <serial3_begin+0x60>)
    3526:	681a      	ldr	r2, [r3, #0]
    3528:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    352c:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
    352e:	4a16      	ldr	r2, [pc, #88]	; (3588 <serial3_begin+0x64>)
    3530:	2300      	movs	r3, #0
    3532:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    3534:	4a15      	ldr	r2, [pc, #84]	; (358c <serial3_begin+0x68>)
    3536:	7013      	strb	r3, [r2, #0]
	tx_buffer_head = 0;
    3538:	4a15      	ldr	r2, [pc, #84]	; (3590 <serial3_begin+0x6c>)
    353a:	7013      	strb	r3, [r2, #0]
	tx_buffer_tail = 0;
    353c:	4a15      	ldr	r2, [pc, #84]	; (3594 <serial3_begin+0x70>)
    353e:	7013      	strb	r3, [r2, #0]
	transmitting = 0;
    3540:	4a15      	ldr	r2, [pc, #84]	; (3598 <serial3_begin+0x74>)
    3542:	7013      	strb	r3, [r2, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    3544:	4a15      	ldr	r2, [pc, #84]	; (359c <serial3_begin+0x78>)
    3546:	f240 3113 	movw	r1, #787	; 0x313
    354a:	6011      	str	r1, [r2, #0]
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    354c:	f44f 7151 	mov.w	r1, #836	; 0x344
    3550:	6051      	str	r1, [r2, #4]
	UART2_BDH = (divisor >> 13) & 0x1F;
    3552:	4a13      	ldr	r2, [pc, #76]	; (35a0 <serial3_begin+0x7c>)
    3554:	f3c0 3144 	ubfx	r1, r0, #13, #5
    3558:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    355a:	f3c0 1147 	ubfx	r1, r0, #5, #8
	UART2_C4 = divisor & 0x1F;
    355e:	f000 001f 	and.w	r0, r0, #31
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
    3562:	7051      	strb	r1, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    3564:	7290      	strb	r0, [r2, #10]
	UART2_C1 = 0;
    3566:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    3568:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    356a:	4b0e      	ldr	r3, [pc, #56]	; (35a4 <serial3_begin+0x80>)
    356c:	222c      	movs	r2, #44	; 0x2c
    356e:	701a      	strb	r2, [r3, #0]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    3570:	4b0d      	ldr	r3, [pc, #52]	; (35a8 <serial3_begin+0x84>)
    3572:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    3574:	f46f 714b 	mvn.w	r1, #812	; 0x32c
	UART2_BDL = (divisor >> 5) & 0xFF;
	UART2_C4 = divisor & 0x1F;
	UART2_C1 = 0;
	UART2_PFIFO = 0;
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    3578:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    357a:	440b      	add	r3, r1
    357c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3580:	601a      	str	r2, [r3, #0]
    3582:	4770      	bx	lr
    3584:	40048034 	.word	0x40048034
    3588:	1fff930c 	.word	0x1fff930c
    358c:	1fff92a3 	.word	0x1fff92a3
    3590:	1fff930e 	.word	0x1fff930e
    3594:	1fff930d 	.word	0x1fff930d
    3598:	1fff92a2 	.word	0x1fff92a2
    359c:	4004c008 	.word	0x4004c008
    35a0:	4006c000 	.word	0x4006c000
    35a4:	4006c003 	.word	0x4006c003
    35a8:	e000e431 	.word	0xe000e431

000035ac <serial3_format>:

void serial3_format(uint32_t format)
{
        uint8_t c;

        c = UART2_C1;
    35ac:	4a13      	ldr	r2, [pc, #76]	; (35fc <serial3_format+0x50>)
    35ae:	7813      	ldrb	r3, [r2, #0]
        c = (c & ~0x13) | (format & 0x03);      // configure parity
    35b0:	f000 0103 	and.w	r1, r0, #3
    35b4:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    35b8:	430b      	orrs	r3, r1
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
    35ba:	0741      	lsls	r1, r0, #29
    35bc:	bf48      	it	mi
    35be:	f043 0310 	orrmi.w	r3, r3, #16
        UART2_C1 = c;
    35c2:	7013      	strb	r3, [r2, #0]
        if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    35c4:	f000 030f 	and.w	r3, r0, #15
    35c8:	2b04      	cmp	r3, #4
    35ca:	4b0d      	ldr	r3, [pc, #52]	; (3600 <serial3_format+0x54>)
    35cc:	d103      	bne.n	35d6 <serial3_format+0x2a>
    35ce:	781a      	ldrb	r2, [r3, #0]
    35d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    35d4:	701a      	strb	r2, [r3, #0]
        c = UART2_S2 & ~0x10;
    35d6:	490b      	ldr	r1, [pc, #44]	; (3604 <serial3_format+0x58>)
    35d8:	780a      	ldrb	r2, [r1, #0]
        if (format & 0x10) c |= 0x10;           // rx invert
    35da:	f010 0f10 	tst.w	r0, #16
        c = UART2_C1;
        c = (c & ~0x13) | (format & 0x03);      // configure parity
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
        UART2_C1 = c;
        if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART2_S2 & ~0x10;
    35de:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x10) c |= 0x10;           // rx invert
    35e2:	bf18      	it	ne
    35e4:	f042 0210 	orrne.w	r2, r2, #16
        UART2_S2 = c;
    35e8:	700a      	strb	r2, [r1, #0]
        c = UART2_C3 & ~0x10;
    35ea:	781a      	ldrb	r2, [r3, #0]
        if (format & 0x20) c |= 0x10;           // tx invert
    35ec:	0681      	lsls	r1, r0, #26
        UART2_C1 = c;
        if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART2_S2 & ~0x10;
        if (format & 0x10) c |= 0x10;           // rx invert
        UART2_S2 = c;
        c = UART2_C3 & ~0x10;
    35ee:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x20) c |= 0x10;           // tx invert
    35f2:	bf48      	it	mi
    35f4:	f042 0210 	orrmi.w	r2, r2, #16
        UART2_C3 = c;
    35f8:	701a      	strb	r2, [r3, #0]
    35fa:	4770      	bx	lr
    35fc:	4006c002 	.word	0x4006c002
    3600:	4006c006 	.word	0x4006c006
    3604:	4006c005 	.word	0x4006c005

00003608 <serial3_end>:
        use9Bits = format & 0x80;
#endif
}

void serial3_end(void)
{
    3608:	b508      	push	{r3, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    360a:	4b0e      	ldr	r3, [pc, #56]	; (3644 <serial3_end+0x3c>)
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	04db      	lsls	r3, r3, #19
    3610:	d400      	bmi.n	3614 <serial3_end+0xc>
    3612:	bd08      	pop	{r3, pc}
	while (transmitting) yield();  // wait for buffered data to send
    3614:	4b0c      	ldr	r3, [pc, #48]	; (3648 <serial3_end+0x40>)
    3616:	781a      	ldrb	r2, [r3, #0]
    3618:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    361c:	b112      	cbz	r2, 3624 <serial3_end+0x1c>
    361e:	f000 ff1d 	bl	445c <yield>
    3622:	e7f7      	b.n	3614 <serial3_end+0xc>
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    3624:	4a09      	ldr	r2, [pc, #36]	; (364c <serial3_end+0x44>)
    3626:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    362a:	6011      	str	r1, [r2, #0]
	UART2_C2 = 0;
    362c:	4a08      	ldr	r2, [pc, #32]	; (3650 <serial3_end+0x48>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    362e:	4909      	ldr	r1, [pc, #36]	; (3654 <serial3_end+0x4c>)
void serial3_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
	UART2_C2 = 0;
    3630:	7013      	strb	r3, [r2, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    3632:	f240 1203 	movw	r2, #259	; 0x103
    3636:	600a      	str	r2, [r1, #0]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    3638:	604a      	str	r2, [r1, #4]
	rx_buffer_head = 0;
    363a:	4a07      	ldr	r2, [pc, #28]	; (3658 <serial3_end+0x50>)
    363c:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    363e:	4a07      	ldr	r2, [pc, #28]	; (365c <serial3_end+0x54>)
    3640:	7013      	strb	r3, [r2, #0]
    3642:	bd08      	pop	{r3, pc}
    3644:	40048034 	.word	0x40048034
    3648:	1fff92a2 	.word	0x1fff92a2
    364c:	e000e184 	.word	0xe000e184
    3650:	4006c003 	.word	0x4006c003
    3654:	4004c008 	.word	0x4004c008
    3658:	1fff930c 	.word	0x1fff930c
    365c:	1fff92a3 	.word	0x1fff92a3

00003660 <serial3_putchar>:
}

void serial3_putchar(uint32_t c)
{
    3660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    3662:	4b1b      	ldr	r3, [pc, #108]	; (36d0 <serial3_putchar+0x70>)
    3664:	681b      	ldr	r3, [r3, #0]
    3666:	04da      	lsls	r2, r3, #19
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
}

void serial3_putchar(uint32_t c)
{
    3668:	4607      	mov	r7, r0
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    366a:	d52f      	bpl.n	36cc <serial3_putchar+0x6c>
	head = tx_buffer_head;
    366c:	4b19      	ldr	r3, [pc, #100]	; (36d4 <serial3_putchar+0x74>)
    366e:	781c      	ldrb	r4, [r3, #0]
	if (++head >= TX_BUFFER_SIZE) head = 0;
    3670:	3401      	adds	r4, #1
    3672:	2c28      	cmp	r4, #40	; 0x28
    3674:	461e      	mov	r6, r3
    3676:	bf28      	it	cs
    3678:	2400      	movcs	r4, #0
	while (tx_buffer_tail == head) {
    367a:	4d17      	ldr	r5, [pc, #92]	; (36d8 <serial3_putchar+0x78>)
    367c:	782b      	ldrb	r3, [r5, #0]
    367e:	42a3      	cmp	r3, r4
    3680:	d119      	bne.n	36b6 <serial3_putchar+0x56>
		int priority = nvic_execution_priority();
    3682:	f7ff f87f 	bl	2784 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    3686:	2840      	cmp	r0, #64	; 0x40
    3688:	dc10      	bgt.n	36ac <serial3_putchar+0x4c>
			if ((UART2_S1 & UART_S1_TDRE)) {
    368a:	4b14      	ldr	r3, [pc, #80]	; (36dc <serial3_putchar+0x7c>)
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	061b      	lsls	r3, r3, #24
    3690:	d5f3      	bpl.n	367a <serial3_putchar+0x1a>
				uint32_t tail = tx_buffer_tail;
    3692:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART2_D = tx_buffer[tail];
    3694:	4a12      	ldr	r2, [pc, #72]	; (36e0 <serial3_putchar+0x80>)
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3696:	3301      	adds	r3, #1
    3698:	2b28      	cmp	r3, #40	; 0x28
    369a:	bf28      	it	cs
    369c:	2300      	movcs	r3, #0
				UART2_D = tx_buffer[tail];
    369e:	5cd1      	ldrb	r1, [r2, r3]
    36a0:	4a10      	ldr	r2, [pc, #64]	; (36e4 <serial3_putchar+0x84>)
    36a2:	b2c9      	uxtb	r1, r1
				tx_buffer_tail = tail;
    36a4:	b2db      	uxtb	r3, r3
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART2_D = tx_buffer[tail];
    36a6:	7011      	strb	r1, [r2, #0]
				tx_buffer_tail = tail;
    36a8:	702b      	strb	r3, [r5, #0]
    36aa:	e7e6      	b.n	367a <serial3_putchar+0x1a>
			}
		} else if (priority >= 256) {
    36ac:	28ff      	cmp	r0, #255	; 0xff
    36ae:	dde4      	ble.n	367a <serial3_putchar+0x1a>
			yield(); // wait
    36b0:	f000 fed4 	bl	445c <yield>
    36b4:	e7e1      	b.n	367a <serial3_putchar+0x1a>
		}
	}
	tx_buffer[head] = c;
    36b6:	4b0a      	ldr	r3, [pc, #40]	; (36e0 <serial3_putchar+0x80>)
    36b8:	b2ff      	uxtb	r7, r7
    36ba:	551f      	strb	r7, [r3, r4]
	transmitting = 1;
    36bc:	4b0a      	ldr	r3, [pc, #40]	; (36e8 <serial3_putchar+0x88>)
    36be:	2201      	movs	r2, #1
    36c0:	701a      	strb	r2, [r3, #0]
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    36c2:	4b0a      	ldr	r3, [pc, #40]	; (36ec <serial3_putchar+0x8c>)
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    36c4:	b2e4      	uxtb	r4, r4
	UART2_C2 = C2_TX_ACTIVE;
    36c6:	22ac      	movs	r2, #172	; 0xac
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    36c8:	7034      	strb	r4, [r6, #0]
	UART2_C2 = C2_TX_ACTIVE;
    36ca:	701a      	strb	r2, [r3, #0]
    36cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36ce:	bf00      	nop
    36d0:	40048034 	.word	0x40048034
    36d4:	1fff930e 	.word	0x1fff930e
    36d8:	1fff930d 	.word	0x1fff930d
    36dc:	4006c004 	.word	0x4006c004
    36e0:	1fff92a4 	.word	0x1fff92a4
    36e4:	4006c007 	.word	0x4006c007
    36e8:	1fff92a2 	.word	0x1fff92a2
    36ec:	4006c003 	.word	0x4006c003

000036f0 <serial3_write>:
}

void serial3_write(const void *buf, unsigned int count)
{
    36f0:	b538      	push	{r3, r4, r5, lr}
    36f2:	4604      	mov	r4, r0
    36f4:	1845      	adds	r5, r0, r1
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    36f6:	42ac      	cmp	r4, r5
    36f8:	d004      	beq.n	3704 <serial3_write+0x14>
    36fa:	f814 0b01 	ldrb.w	r0, [r4], #1
    36fe:	f7ff ffaf 	bl	3660 <serial3_putchar>
    3702:	e7f8      	b.n	36f6 <serial3_write+0x6>
}
    3704:	bd38      	pop	{r3, r4, r5, pc}
    3706:	ffff b508 	vabal.u<illegal width 64>	<illegal reg q13.5>, d15, d8

00003708 <serial3_flush>:

void serial3_flush(void)
{
    3708:	b508      	push	{r3, lr}
	while (transmitting) yield(); // wait
    370a:	4b03      	ldr	r3, [pc, #12]	; (3718 <serial3_flush+0x10>)
    370c:	781b      	ldrb	r3, [r3, #0]
    370e:	b113      	cbz	r3, 3716 <serial3_flush+0xe>
    3710:	f000 fea4 	bl	445c <yield>
    3714:	e7f9      	b.n	370a <serial3_flush+0x2>
}
    3716:	bd08      	pop	{r3, pc}
    3718:	1fff92a2 	.word	0x1fff92a2

0000371c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    371c:	4b05      	ldr	r3, [pc, #20]	; (3734 <serial3_available+0x18>)
    371e:	7818      	ldrb	r0, [r3, #0]
	tail = rx_buffer_tail;
    3720:	4b05      	ldr	r3, [pc, #20]	; (3738 <serial3_available+0x1c>)
    3722:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3724:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    3726:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3728:	4298      	cmp	r0, r3
	return RX_BUFFER_SIZE + head - tail;
    372a:	bf38      	it	cc
    372c:	3040      	addcc	r0, #64	; 0x40
    372e:	1ac0      	subs	r0, r0, r3
}
    3730:	4770      	bx	lr
    3732:	bf00      	nop
    3734:	1fff930c 	.word	0x1fff930c
    3738:	1fff92a3 	.word	0x1fff92a3

0000373c <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    373c:	4b09      	ldr	r3, [pc, #36]	; (3764 <serial3_getchar+0x28>)
	tail = rx_buffer_tail;
    373e:	4a0a      	ldr	r2, [pc, #40]	; (3768 <serial3_getchar+0x2c>)
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    3740:	7819      	ldrb	r1, [r3, #0]
	tail = rx_buffer_tail;
    3742:	7813      	ldrb	r3, [r2, #0]
    3744:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    3746:	4299      	cmp	r1, r3
    3748:	d008      	beq.n	375c <serial3_getchar+0x20>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    374a:	3301      	adds	r3, #1
    374c:	2b40      	cmp	r3, #64	; 0x40
    374e:	bf28      	it	cs
    3750:	2300      	movcs	r3, #0
	c = rx_buffer[tail];
    3752:	4906      	ldr	r1, [pc, #24]	; (376c <serial3_getchar+0x30>)
    3754:	5cc8      	ldrb	r0, [r1, r3]
	rx_buffer_tail = tail;
    3756:	b2db      	uxtb	r3, r3
    3758:	7013      	strb	r3, [r2, #0]
	return c;
    375a:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    375c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
	return c;
}
    3760:	4770      	bx	lr
    3762:	bf00      	nop
    3764:	1fff930c 	.word	0x1fff930c
    3768:	1fff92a3 	.word	0x1fff92a3
    376c:	1fff92cc 	.word	0x1fff92cc

00003770 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3770:	4b08      	ldr	r3, [pc, #32]	; (3794 <serial3_peek+0x24>)
    3772:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    3774:	4b08      	ldr	r3, [pc, #32]	; (3798 <serial3_peek+0x28>)
    3776:	781b      	ldrb	r3, [r3, #0]
    3778:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    377a:	429a      	cmp	r2, r3
    377c:	d007      	beq.n	378e <serial3_peek+0x1e>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    377e:	3301      	adds	r3, #1
    3780:	2b40      	cmp	r3, #64	; 0x40
    3782:	bf28      	it	cs
    3784:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    3786:	4a05      	ldr	r2, [pc, #20]	; (379c <serial3_peek+0x2c>)
    3788:	5cd0      	ldrb	r0, [r2, r3]
    378a:	b2c0      	uxtb	r0, r0
    378c:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    378e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    3792:	4770      	bx	lr
    3794:	1fff930c 	.word	0x1fff930c
    3798:	1fff92a3 	.word	0x1fff92a3
    379c:	1fff92cc 	.word	0x1fff92cc

000037a0 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    37a0:	4b02      	ldr	r3, [pc, #8]	; (37ac <serial3_clear+0xc>)
    37a2:	781a      	ldrb	r2, [r3, #0]
    37a4:	4b02      	ldr	r3, [pc, #8]	; (37b0 <serial3_clear+0x10>)
    37a6:	b2d2      	uxtb	r2, r2
    37a8:	701a      	strb	r2, [r3, #0]
    37aa:	4770      	bx	lr
    37ac:	1fff92a3 	.word	0x1fff92a3
    37b0:	1fff930c 	.word	0x1fff930c

000037b4 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect               UART_S2_LBKDIF
//   RxD pin active edge            UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    37b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t head, tail, n;
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
    37b6:	491e      	ldr	r1, [pc, #120]	; (3830 <uart2_status_isr+0x7c>)
    37b8:	780b      	ldrb	r3, [r1, #0]
    37ba:	069e      	lsls	r6, r3, #26
    37bc:	d510      	bpl.n	37e0 <uart2_status_isr+0x2c>
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
    37be:	4b1d      	ldr	r3, [pc, #116]	; (3834 <uart2_status_isr+0x80>)
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    37c0:	4a1d      	ldr	r2, [pc, #116]	; (3838 <uart2_status_isr+0x84>)
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
    37c2:	781c      	ldrb	r4, [r3, #0]
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    37c4:	7813      	ldrb	r3, [r2, #0]
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37c6:	481d      	ldr	r0, [pc, #116]	; (383c <uart2_status_isr+0x88>)
	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    37c8:	3301      	adds	r3, #1
		if (head >= RX_BUFFER_SIZE) head = 0;
    37ca:	2b40      	cmp	r3, #64	; 0x40
		if (head != rx_buffer_tail) {
    37cc:	7800      	ldrb	r0, [r0, #0]
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
    37ce:	bf28      	it	cs
    37d0:	2300      	movcs	r3, #0
		if (head != rx_buffer_tail) {
    37d2:	4283      	cmp	r3, r0
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
    37d4:	b2e4      	uxtb	r4, r4
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37d6:	d003      	beq.n	37e0 <uart2_status_isr+0x2c>
			rx_buffer[head] = n;
    37d8:	4819      	ldr	r0, [pc, #100]	; (3840 <uart2_status_isr+0x8c>)
    37da:	54c4      	strb	r4, [r0, r3]
			rx_buffer_head = head; 
    37dc:	b2db      	uxtb	r3, r3
    37de:	7013      	strb	r3, [r2, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	c = UART2_C2;
    37e0:	4a18      	ldr	r2, [pc, #96]	; (3844 <uart2_status_isr+0x90>)
    37e2:	7810      	ldrb	r0, [r2, #0]
    37e4:	b2c0      	uxtb	r0, r0
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    37e6:	0605      	lsls	r5, r0, #24
    37e8:	d517      	bpl.n	381a <uart2_status_isr+0x66>
    37ea:	780b      	ldrb	r3, [r1, #0]
    37ec:	061c      	lsls	r4, r3, #24
    37ee:	d514      	bpl.n	381a <uart2_status_isr+0x66>
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    37f0:	4b15      	ldr	r3, [pc, #84]	; (3848 <uart2_status_isr+0x94>)
		tail = tx_buffer_tail;
    37f2:	4c16      	ldr	r4, [pc, #88]	; (384c <uart2_status_isr+0x98>)
		//digitalWriteFast(5, LOW);
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    37f4:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    37f6:	7823      	ldrb	r3, [r4, #0]
    37f8:	b2db      	uxtb	r3, r3
		if (head == tail) {
    37fa:	429d      	cmp	r5, r3
    37fc:	d102      	bne.n	3804 <uart2_status_isr+0x50>
			UART2_C2 = C2_TX_COMPLETING;
    37fe:	236c      	movs	r3, #108	; 0x6c
    3800:	7013      	strb	r3, [r2, #0]
    3802:	e00a      	b.n	381a <uart2_status_isr+0x66>
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3804:	3301      	adds	r3, #1
    3806:	2b28      	cmp	r3, #40	; 0x28
    3808:	bf28      	it	cs
    380a:	2300      	movcs	r3, #0
			n = tx_buffer[tail];
    380c:	4d10      	ldr	r5, [pc, #64]	; (3850 <uart2_status_isr+0x9c>)
    380e:	5cee      	ldrb	r6, [r5, r3]
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3810:	4d08      	ldr	r5, [pc, #32]	; (3834 <uart2_status_isr+0x80>)
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3812:	b2f6      	uxtb	r6, r6
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
    3814:	b2db      	uxtb	r3, r3
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3816:	702e      	strb	r6, [r5, #0]
			tx_buffer_tail = tail;
    3818:	7023      	strb	r3, [r4, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    381a:	0640      	lsls	r0, r0, #25
    381c:	d507      	bpl.n	382e <uart2_status_isr+0x7a>
    381e:	780b      	ldrb	r3, [r1, #0]
    3820:	065b      	lsls	r3, r3, #25
    3822:	d504      	bpl.n	382e <uart2_status_isr+0x7a>
		transmitting = 0;
    3824:	4b0b      	ldr	r3, [pc, #44]	; (3854 <uart2_status_isr+0xa0>)
    3826:	2100      	movs	r1, #0
    3828:	7019      	strb	r1, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    382a:	232c      	movs	r3, #44	; 0x2c
    382c:	7013      	strb	r3, [r2, #0]
    382e:	bd70      	pop	{r4, r5, r6, pc}
    3830:	4006c004 	.word	0x4006c004
    3834:	4006c007 	.word	0x4006c007
    3838:	1fff930c 	.word	0x1fff930c
    383c:	1fff92a3 	.word	0x1fff92a3
    3840:	1fff92cc 	.word	0x1fff92cc
    3844:	4006c003 	.word	0x4006c003
    3848:	1fff930e 	.word	0x1fff930e
    384c:	1fff930d 	.word	0x1fff930d
    3850:	1fff92a4 	.word	0x1fff92a4
    3854:	1fff92a2 	.word	0x1fff92a2

00003858 <_ZN13IntervalTimerD1Ev>:
    uint8_t IRQ_PIT_CH;
    ISR myISR;
    bool beginCycles(ISR newISR, uint32_t cycles);
  public:
    IntervalTimer() { status = TIMER_OFF; }
    ~IntervalTimer() { end(); }
    3858:	b510      	push	{r4, lr}
    385a:	4604      	mov	r4, r0
    385c:	f7fe ff12 	bl	2684 <_ZN13IntervalTimer3endEv>
    3860:	4620      	mov	r0, r4
    3862:	bd10      	pop	{r4, pc}

00003864 <_GLOBAL__sub_I_tone_timer>:
    reg PIT_TCTRL;
    uint8_t IRQ_PIT_CH;
    ISR myISR;
    bool beginCycles(ISR newISR, uint32_t cycles);
  public:
    IntervalTimer() { status = TIMER_OFF; }
    3864:	4803      	ldr	r0, [pc, #12]	; (3874 <_GLOBAL__sub_I_tone_timer+0x10>)

static uint32_t tone_toggle_count;
static volatile uint8_t *tone_reg;
static uint8_t tone_pin=255;
static uint16_t tone_frequency=0;
IntervalTimer tone_timer;
    3866:	4904      	ldr	r1, [pc, #16]	; (3878 <_GLOBAL__sub_I_tone_timer+0x14>)
    3868:	4a04      	ldr	r2, [pc, #16]	; (387c <_GLOBAL__sub_I_tone_timer+0x18>)
    386a:	2300      	movs	r3, #0
    386c:	7003      	strb	r3, [r0, #0]
    386e:	f000 bdf7 	b.w	4460 <__aeabi_atexit>
    3872:	bf00      	nop
    3874:	1fff9310 	.word	0x1fff9310
    3878:	00003859 	.word	0x00003859
    387c:	1fff8400 	.word	0x1fff8400

00003880 <usb_init_serialnumber>:
        3,
        {0,0,0,0,0,0,0,0,0,0}
};

void usb_init_serialnumber(void)
{
    3880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3882:	b672      	cpsid	i
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3884:	4b15      	ldr	r3, [pc, #84]	; (38dc <usb_init_serialnumber+0x5c>)
    3886:	2270      	movs	r2, #112	; 0x70
    3888:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    388a:	4a15      	ldr	r2, [pc, #84]	; (38e0 <usb_init_serialnumber+0x60>)
    388c:	2141      	movs	r1, #65	; 0x41
    388e:	7011      	strb	r1, [r2, #0]
	FTFL_FCCOB1 = 15;
    3890:	210f      	movs	r1, #15
    3892:	f802 1c01 	strb.w	r1, [r2, #-1]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3896:	2280      	movs	r2, #128	; 0x80
    3898:	701a      	strb	r2, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    389a:	781a      	ldrb	r2, [r3, #0]
    389c:	0612      	lsls	r2, r2, #24
    389e:	d5fc      	bpl.n	389a <usb_init_serialnumber+0x1a>
	num = *(uint32_t *)&FTFL_FCCOB7;
    38a0:	4b10      	ldr	r3, [pc, #64]	; (38e4 <usb_init_serialnumber+0x64>)
    38a2:	6818      	ldr	r0, [r3, #0]
	__enable_irq();
    38a4:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    38a6:	4b10      	ldr	r3, [pc, #64]	; (38e8 <usb_init_serialnumber+0x68>)
    38a8:	4298      	cmp	r0, r3
    38aa:	bf98      	it	ls
    38ac:	230a      	movls	r3, #10
	ultoa(num, buf, 10);
    38ae:	ac01      	add	r4, sp, #4
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    38b0:	bf98      	it	ls
    38b2:	4358      	mulls	r0, r3
	ultoa(num, buf, 10);
    38b4:	4621      	mov	r1, r4
    38b6:	220a      	movs	r2, #10
    38b8:	f7fe ff95 	bl	27e6 <ultoa>
	for (i=0; i<10; i++) {
    38bc:	2300      	movs	r3, #0
		char c = buf[i];
    38be:	5ce1      	ldrb	r1, [r4, r3]
    38c0:	4a0a      	ldr	r2, [pc, #40]	; (38ec <usb_init_serialnumber+0x6c>)
		if (!c) break;
    38c2:	b129      	cbz	r1, 38d0 <usb_init_serialnumber+0x50>
    38c4:	eb02 0043 	add.w	r0, r2, r3, lsl #1
	num = *(uint32_t *)&FTFL_FCCOB7;
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    38c8:	3301      	adds	r3, #1
    38ca:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    38cc:	8041      	strh	r1, [r0, #2]
	num = *(uint32_t *)&FTFL_FCCOB7;
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    38ce:	d1f6      	bne.n	38be <usb_init_serialnumber+0x3e>
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    38d0:	3301      	adds	r3, #1
    38d2:	005b      	lsls	r3, r3, #1
    38d4:	7013      	strb	r3, [r2, #0]
}
    38d6:	b004      	add	sp, #16
    38d8:	bd10      	pop	{r4, pc}
    38da:	bf00      	nop
    38dc:	40020000 	.word	0x40020000
    38e0:	40020007 	.word	0x40020007
    38e4:	40020008 	.word	0x40020008
    38e8:	0098967f 	.word	0x0098967f
    38ec:	1fff84a4 	.word	0x1fff84a4

000038f0 <endpoint0_transmit>:
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}


static void endpoint0_transmit(const void *data, uint32_t len)
{
    38f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    38f2:	4b0c      	ldr	r3, [pc, #48]	; (3924 <endpoint0_transmit+0x34>)
    38f4:	4c0c      	ldr	r4, [pc, #48]	; (3928 <endpoint0_transmit+0x38>)
    38f6:	781a      	ldrb	r2, [r3, #0]
    38f8:	f042 0502 	orr.w	r5, r2, #2
    38fc:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3900:	f082 0201 	eor.w	r2, r2, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3904:	6070      	str	r0, [r6, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3906:	4809      	ldr	r0, [pc, #36]	; (392c <endpoint0_transmit+0x3c>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3908:	701a      	strb	r2, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    390a:	7806      	ldrb	r6, [r0, #0]
    390c:	2e00      	cmp	r6, #0
    390e:	bf0c      	ite	eq
    3910:	2788      	moveq	r7, #136	; 0x88
    3912:	27c8      	movne	r7, #200	; 0xc8
	ep0_tx_data_toggle ^= 1;
    3914:	f086 0601 	eor.w	r6, r6, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3918:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
	ep0_tx_data_toggle ^= 1;
    391c:	7006      	strb	r6, [r0, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    391e:	f844 1035 	str.w	r1, [r4, r5, lsl #3]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3922:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3924:	1fff938c 	.word	0x1fff938c
    3928:	1fff8000 	.word	0x1fff8000
    392c:	1fff9404 	.word	0x1fff9404

00003930 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    3930:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3932:	2b03      	cmp	r3, #3




usb_packet_t *usb_rx(uint32_t endpoint)
{
    3934:	b510      	push	{r4, lr}
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3936:	d810      	bhi.n	395a <usb_rx+0x2a>
	__disable_irq();
    3938:	b672      	cpsid	i
	ret = rx_first[endpoint];
    393a:	4a09      	ldr	r2, [pc, #36]	; (3960 <usb_rx+0x30>)
    393c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if (ret) {
    3940:	b148      	cbz	r0, 3956 <usb_rx+0x26>
		rx_first[endpoint] = ret->next;
    3942:	6841      	ldr	r1, [r0, #4]
    3944:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3948:	4a06      	ldr	r2, [pc, #24]	; (3964 <usb_rx+0x34>)
    394a:	8801      	ldrh	r1, [r0, #0]
    394c:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
    3950:	1a61      	subs	r1, r4, r1
    3952:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	__enable_irq();
    3956:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    3958:	bd10      	pop	{r4, pc}

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    395a:	2000      	movs	r0, #0
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    395c:	bd10      	pop	{r4, pc}
    395e:	bf00      	nop
    3960:	1fff937c 	.word	0x1fff937c
    3964:	1fff9c80 	.word	0x1fff9c80

00003968 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    3968:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    396a:	2803      	cmp	r0, #3
    396c:	d80a      	bhi.n	3984 <usb_tx_packet_count+0x1c>
	__disable_irq();
    396e:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3970:	4b05      	ldr	r3, [pc, #20]	; (3988 <usb_tx_packet_count+0x20>)
    3972:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    3976:	2000      	movs	r0, #0

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3978:	b113      	cbz	r3, 3980 <usb_tx_packet_count+0x18>
    397a:	3001      	adds	r0, #1
    397c:	685b      	ldr	r3, [r3, #4]
    397e:	e7fb      	b.n	3978 <usb_tx_packet_count+0x10>
	__enable_irq();
    3980:	b662      	cpsie	i
	return count;
    3982:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3984:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    3986:	4770      	bx	lr
    3988:	1fff93d0 	.word	0x1fff93d0

0000398c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    398c:	b510      	push	{r4, lr}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    398e:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    3990:	2301      	movs	r3, #1
    3992:	4a17      	ldr	r2, [pc, #92]	; (39f0 <usb_rx_memory+0x64>)
    3994:	441a      	add	r2, r3
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3996:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    399a:	0712      	lsls	r2, r2, #28
    399c:	d51c      	bpl.n	39d8 <usb_rx_memory+0x4c>
			if (table[index(i, RX, EVEN)].desc == 0) {
    399e:	0099      	lsls	r1, r3, #2
    39a0:	4a14      	ldr	r2, [pc, #80]	; (39f4 <usb_rx_memory+0x68>)
    39a2:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    39a6:	b92c      	cbnz	r4, 39b4 <usb_rx_memory+0x28>
				table[index(i, RX, EVEN)].addr = packet->buf;
    39a8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
    39ac:	3008      	adds	r0, #8
    39ae:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    39b0:	4b11      	ldr	r3, [pc, #68]	; (39f8 <usb_rx_memory+0x6c>)
    39b2:	e009      	b.n	39c8 <usb_rx_memory+0x3c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    39b4:	f041 0101 	orr.w	r1, r1, #1
    39b8:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    39bc:	b964      	cbnz	r4, 39d8 <usb_rx_memory+0x4c>
				table[index(i, RX, ODD)].addr = packet->buf;
    39be:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    39c2:	3008      	adds	r0, #8
    39c4:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    39c6:	4b0d      	ldr	r3, [pc, #52]	; (39fc <usb_rx_memory+0x70>)
    39c8:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
				usb_rx_memory_needed--;
    39cc:	4b0c      	ldr	r3, [pc, #48]	; (3a00 <usb_rx_memory+0x74>)
    39ce:	781a      	ldrb	r2, [r3, #0]
    39d0:	3a01      	subs	r2, #1
    39d2:	701a      	strb	r2, [r3, #0]
				__enable_irq();
    39d4:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    39d6:	bd10      	pop	{r4, pc}
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    39d8:	3301      	adds	r3, #1
    39da:	2b05      	cmp	r3, #5
    39dc:	d1d9      	bne.n	3992 <usb_rx_memory+0x6>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    39de:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    39e0:	4b07      	ldr	r3, [pc, #28]	; (3a00 <usb_rx_memory+0x74>)
    39e2:	2200      	movs	r2, #0
    39e4:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    39e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    39ea:	f000 bbcd 	b.w	4188 <usb_free>
    39ee:	bf00      	nop
    39f0:	00012e4a 	.word	0x00012e4a
    39f4:	1fff8000 	.word	0x1fff8000
    39f8:	00400088 	.word	0x00400088
    39fc:	004000c8 	.word	0x004000c8
    3a00:	1fff93fa 	.word	0x1fff93fa

00003a04 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3a04:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    3a06:	2b03      	cmp	r3, #3

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    3a08:	b530      	push	{r4, r5, lr}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
    3a0a:	d832      	bhi.n	3a72 <usb_tx+0x6e>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3a0c:	4a19      	ldr	r2, [pc, #100]	; (3a74 <usb_tx+0x70>)
    3a0e:	0140      	lsls	r0, r0, #5
    3a10:	f040 0010 	orr.w	r0, r0, #16
    3a14:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    3a16:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3a18:	4c17      	ldr	r4, [pc, #92]	; (3a78 <usb_tx+0x74>)
    3a1a:	5ce2      	ldrb	r2, [r4, r3]
    3a1c:	2a03      	cmp	r2, #3
    3a1e:	d809      	bhi.n	3a34 <usb_tx+0x30>
    3a20:	e8df f002 	tbb	[pc, r2]
    3a24:	05180216 	.word	0x05180216
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3a28:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    3a2a:	2202      	movs	r2, #2
		break;
    3a2c:	e013      	b.n	3a56 <usb_tx+0x52>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    3a2e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3a30:	2204      	movs	r2, #4
		break;
    3a32:	e010      	b.n	3a56 <usb_tx+0x52>
	  default:
		if (tx_first[endpoint] == NULL) {
    3a34:	4811      	ldr	r0, [pc, #68]	; (3a7c <usb_tx+0x78>)
    3a36:	4a12      	ldr	r2, [pc, #72]	; (3a80 <usb_tx+0x7c>)
    3a38:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    3a3c:	b914      	cbnz	r4, 3a44 <usb_tx+0x40>
			tx_first[endpoint] = packet;
    3a3e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    3a42:	e002      	b.n	3a4a <usb_tx+0x46>
		} else {
			tx_last[endpoint]->next = packet;
    3a44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    3a48:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3a4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    3a4e:	e00f      	b.n	3a70 <usb_tx+0x6c>
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3a50:	2203      	movs	r2, #3
    3a52:	e000      	b.n	3a56 <usb_tx+0x52>
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    3a54:	2205      	movs	r2, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3a56:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3a58:	f010 0f08 	tst.w	r0, #8
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3a5c:	f101 0308 	add.w	r3, r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3a60:	880a      	ldrh	r2, [r1, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3a62:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3a64:	bf0c      	ite	eq
    3a66:	2388      	moveq	r3, #136	; 0x88
    3a68:	23c8      	movne	r3, #200	; 0xc8
    3a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3a6e:	6003      	str	r3, [r0, #0]
	__enable_irq();
    3a70:	b662      	cpsie	i
    3a72:	bd30      	pop	{r4, r5, pc}
    3a74:	1fff8000 	.word	0x1fff8000
    3a78:	1fff9338 	.word	0x1fff9338
    3a7c:	1fff93d0 	.word	0x1fff93d0
    3a80:	1fff93e0 	.word	0x1fff93e0

00003a84 <usb_isr>:
}



void usb_isr(void)
{
    3a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3a88:	4fab      	ldr	r7, [pc, #684]	; (3d38 <usb_isr+0x2b4>)
    3a8a:	783c      	ldrb	r4, [r7, #0]
    3a8c:	b2e4      	uxtb	r4, r4

	if ((status & USB_INTEN_SOFTOKEN /* 04 */ )) {
    3a8e:	f014 0f04 	tst.w	r4, #4
    3a92:	463d      	mov	r5, r7
    3a94:	d019      	beq.n	3aca <usb_isr+0x46>
		if (usb_configuration) {
    3a96:	4ba9      	ldr	r3, [pc, #676]	; (3d3c <usb_isr+0x2b8>)
    3a98:	781b      	ldrb	r3, [r3, #0]
    3a9a:	b1a3      	cbz	r3, 3ac6 <usb_isr+0x42>
			t = usb_reboot_timer;
    3a9c:	4aa8      	ldr	r2, [pc, #672]	; (3d40 <usb_isr+0x2bc>)
    3a9e:	7811      	ldrb	r1, [r2, #0]
			if (t) {
    3aa0:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    3aa4:	b121      	cbz	r1, 3ab0 <usb_isr+0x2c>
				usb_reboot_timer = --t;
    3aa6:	3b01      	subs	r3, #1
    3aa8:	b2db      	uxtb	r3, r3
    3aaa:	7013      	strb	r3, [r2, #0]
				if (!t) _reboot_Teensyduino_();
    3aac:	b903      	cbnz	r3, 3ab0 <usb_isr+0x2c>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3aae:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3ab0:	4aa4      	ldr	r2, [pc, #656]	; (3d44 <usb_isr+0x2c0>)
    3ab2:	7811      	ldrb	r1, [r2, #0]
			if (t) {
    3ab4:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    3ab8:	b129      	cbz	r1, 3ac6 <usb_isr+0x42>
				usb_cdc_transmit_flush_timer = --t;
    3aba:	3b01      	subs	r3, #1
    3abc:	b2db      	uxtb	r3, r3
    3abe:	7013      	strb	r3, [r2, #0]
				if (t == 0) usb_serial_flush_callback();
    3ac0:	b90b      	cbnz	r3, 3ac6 <usb_isr+0x42>
    3ac2:	f000 fc75 	bl	43b0 <usb_serial_flush_callback>
#endif
#ifdef FLIGHTSIM_INTERFACE
			usb_flightsim_flush_callback();
#endif
		}
		USB0_ISTAT = USB_INTEN_SOFTOKEN;
    3ac6:	2304      	movs	r3, #4
    3ac8:	703b      	strb	r3, [r7, #0]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    3aca:	f004 0308 	and.w	r3, r4, #8
    3ace:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3ad2:	2b00      	cmp	r3, #0
    3ad4:	f000 8263 	beq.w	3f9e <usb_isr+0x51a>
		uint8_t endpoint;
		stat = USB0_STAT;
    3ad8:	4b9b      	ldr	r3, [pc, #620]	; (3d48 <usb_isr+0x2c4>)
    3ada:	4c9c      	ldr	r4, [pc, #624]	; (3d4c <usb_isr+0x2c8>)
    3adc:	781a      	ldrb	r2, [r3, #0]
    3ade:	b2d2      	uxtb	r2, r2
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    3ae0:	0915      	lsrs	r5, r2, #4
    3ae2:	ea4f 0892 	mov.w	r8, r2, lsr #2
    3ae6:	f040 81e0 	bne.w	3eaa <usb_isr+0x426>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3aea:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    3aee:	6859      	ldr	r1, [r3, #4]
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
    3af0:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
    3af4:	f3c3 0383 	ubfx	r3, r3, #2, #4
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3af8:	3b01      	subs	r3, #1
    3afa:	2b0c      	cmp	r3, #12
    3afc:	f200 81d2 	bhi.w	3ea4 <usb_isr+0x420>
    3b00:	e8df f013 	tbh	[pc, r3, lsl #1]
    3b04:	01910191 	.word	0x01910191
    3b08:	01d001d0 	.word	0x01d001d0
    3b0c:	01d001d0 	.word	0x01d001d0
    3b10:	01d001d0 	.word	0x01d001d0
    3b14:	01d001ac 	.word	0x01d001ac
    3b18:	01d001d0 	.word	0x01d001d0
    3b1c:	000d      	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3b1e:	4d8c      	ldr	r5, [pc, #560]	; (3d50 <usb_isr+0x2cc>)
    3b20:	680a      	ldr	r2, [r1, #0]
		setup.word2 = *(uint32_t *)(buf + 4);
    3b22:	684b      	ldr	r3, [r1, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3b24:	488b      	ldr	r0, [pc, #556]	; (3d54 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    3b26:	606b      	str	r3, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3b28:	2101      	movs	r1, #1
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3b2a:	4b8b      	ldr	r3, [pc, #556]	; (3d58 <usb_isr+0x2d4>)
    3b2c:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3b30:	602a      	str	r2, [r5, #0]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3b32:	f8df 8250 	ldr.w	r8, [pc, #592]	; 3d84 <usb_isr+0x300>
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3b36:	7001      	strb	r1, [r0, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3b38:	b292      	uxth	r2, r2
    3b3a:	f240 6081 	movw	r0, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3b3e:	2300      	movs	r3, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3b40:	4282      	cmp	r2, r0
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3b42:	f8c8 3000 	str.w	r3, [r8]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3b46:	6123      	str	r3, [r4, #16]
		table[index(0, TX, ODD)].desc = 0;
    3b48:	61a3      	str	r3, [r4, #24]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3b4a:	d817      	bhi.n	3b7c <usb_isr+0xf8>
    3b4c:	f5b2 6fd0 	cmp.w	r2, #1664	; 0x680
    3b50:	f080 811e 	bcs.w	3d90 <usb_isr+0x30c>
    3b54:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    3b58:	f000 80cf 	beq.w	3cfa <usb_isr+0x276>
    3b5c:	d806      	bhi.n	3b6c <usb_isr+0xe8>
    3b5e:	2a80      	cmp	r2, #128	; 0x80
    3b60:	f000 80ba 	beq.w	3cd8 <usb_isr+0x254>
    3b64:	2a82      	cmp	r2, #130	; 0x82
    3b66:	f000 80bb 	beq.w	3ce0 <usb_isr+0x25c>
    3b6a:	e12d      	b.n	3dc8 <usb_isr+0x344>
    3b6c:	f240 3302 	movw	r3, #770	; 0x302
    3b70:	429a      	cmp	r2, r3
    3b72:	f000 80d1 	beq.w	3d18 <usb_isr+0x294>
    3b76:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3b7a:	e01c      	b.n	3bb6 <usb_isr+0x132>
    3b7c:	f242 0021 	movw	r0, #8225	; 0x2021
    3b80:	4282      	cmp	r2, r0
    3b82:	f000 814d 	beq.w	3e20 <usb_isr+0x39c>
    3b86:	d80e      	bhi.n	3ba6 <usb_isr+0x122>
    3b88:	f5b2 6f08 	cmp.w	r2, #2176	; 0x880
    3b8c:	f000 809e 	beq.w	3ccc <usb_isr+0x248>
    3b90:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    3b94:	f040 8118 	bne.w	3dc8 <usb_isr+0x344>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3b98:	4b68      	ldr	r3, [pc, #416]	; (3d3c <usb_isr+0x2b8>)
    3b9a:	4e6c      	ldr	r6, [pc, #432]	; (3d4c <usb_isr+0x2c8>)
    3b9c:	78aa      	ldrb	r2, [r5, #2]
    3b9e:	701a      	strb	r2, [r3, #0]
    3ba0:	f106 0980 	add.w	r9, r6, #128	; 0x80
    3ba4:	e00a      	b.n	3bbc <usb_isr+0x138>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3ba6:	f242 2121 	movw	r1, #8737	; 0x2221
    3baa:	428a      	cmp	r2, r1
    3bac:	f000 8108 	beq.w	3dc0 <usb_isr+0x33c>
    3bb0:	f242 3321 	movw	r3, #8993	; 0x2321
    3bb4:	429a      	cmp	r2, r3
    3bb6:	f000 810b 	beq.w	3dd0 <usb_isr+0x34c>
    3bba:	e105      	b.n	3dc8 <usb_isr+0x344>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    3bbc:	6a33      	ldr	r3, [r6, #32]
    3bbe:	061b      	lsls	r3, r3, #24
    3bc0:	d503      	bpl.n	3bca <usb_isr+0x146>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3bc2:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3bc4:	3808      	subs	r0, #8
    3bc6:	f000 fadf 	bl	4188 <usb_free>
    3bca:	3608      	adds	r6, #8
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3bcc:	454e      	cmp	r6, r9
    3bce:	d1f5      	bne.n	3bbc <usb_isr+0x138>
    3bd0:	2600      	movs	r6, #0
    3bd2:	46b1      	mov	r9, r6
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3bd4:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 3d88 <usb_isr+0x304>
    3bd8:	f856 000a 	ldr.w	r0, [r6, sl]
			while (p) {
    3bdc:	b128      	cbz	r0, 3bea <usb_isr+0x166>
				n = p->next;
    3bde:	f8d0 b004 	ldr.w	fp, [r0, #4]
				usb_free(p);
    3be2:	f000 fad1 	bl	4188 <usb_free>
				p = n;
    3be6:	4658      	mov	r0, fp
    3be8:	e7f8      	b.n	3bdc <usb_isr+0x158>
			}
			rx_first[i] = NULL;
    3bea:	f84a 0006 	str.w	r0, [sl, r6]
			rx_last[i] = NULL;
    3bee:	4b5b      	ldr	r3, [pc, #364]	; (3d5c <usb_isr+0x2d8>)
			p = tx_first[i];
    3bf0:	f8df a198 	ldr.w	sl, [pc, #408]	; 3d8c <usb_isr+0x308>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3bf4:	50f0      	str	r0, [r6, r3]
			p = tx_first[i];
    3bf6:	f856 000a 	ldr.w	r0, [r6, sl]
			while (p) {
    3bfa:	b128      	cbz	r0, 3c08 <usb_isr+0x184>
				n = p->next;
    3bfc:	f8d0 b004 	ldr.w	fp, [r0, #4]
				usb_free(p);
    3c00:	f000 fac2 	bl	4188 <usb_free>
				p = n;
    3c04:	4658      	mov	r0, fp
    3c06:	e7f8      	b.n	3bfa <usb_isr+0x176>
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3c08:	4b55      	ldr	r3, [pc, #340]	; (3d60 <usb_isr+0x2dc>)
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3c0a:	f84a 0006 	str.w	r0, [sl, r6]
			tx_last[i] = NULL;
    3c0e:	50f0      	str	r0, [r6, r3]
			usb_rx_byte_count_data[i] = 0;
    3c10:	4b54      	ldr	r3, [pc, #336]	; (3d64 <usb_isr+0x2e0>)
    3c12:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
			switch (tx_state[i]) {
    3c16:	4b54      	ldr	r3, [pc, #336]	; (3d68 <usb_isr+0x2e4>)
    3c18:	f819 2003 	ldrb.w	r2, [r9, r3]
    3c1c:	3a02      	subs	r2, #2
    3c1e:	2a03      	cmp	r2, #3
    3c20:	d808      	bhi.n	3c34 <usb_isr+0x1b0>
    3c22:	e8df f002 	tbb	[pc, r2]
    3c26:	0402      	.short	0x0402
    3c28:	0402      	.short	0x0402
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3c2a:	2200      	movs	r2, #0
    3c2c:	e000      	b.n	3c30 <usb_isr+0x1ac>
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3c2e:	2201      	movs	r2, #1
    3c30:	f803 2009 	strb.w	r2, [r3, r9]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3c34:	f109 0901 	add.w	r9, r9, #1
    3c38:	f1b9 0f04 	cmp.w	r9, #4
    3c3c:	f106 0604 	add.w	r6, r6, #4
    3c40:	d1c8      	bne.n	3bd4 <usb_isr+0x150>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3c42:	4b4a      	ldr	r3, [pc, #296]	; (3d6c <usb_isr+0x2e8>)
    3c44:	2200      	movs	r2, #0
    3c46:	701a      	strb	r2, [r3, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3c48:	2601      	movs	r6, #1
    3c4a:	469a      	mov	sl, r3
    3c4c:	4a48      	ldr	r2, [pc, #288]	; (3d70 <usb_isr+0x2ec>)
    3c4e:	4b49      	ldr	r3, [pc, #292]	; (3d74 <usb_isr+0x2f0>)
    3c50:	4432      	add	r2, r6
    3c52:	4433      	add	r3, r6
			epconf = *cfg++;
    3c54:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    3c58:	009b      	lsls	r3, r3, #2
			*reg = epconf;
			reg += 4;
			if (epconf & USB_ENDPT_EPRXEN) {
    3c5a:	f012 0f08 	tst.w	r2, #8
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3c5e:	701a      	strb	r2, [r3, #0]
    3c60:	ea4f 0986 	mov.w	r9, r6, lsl #2
			reg += 4;
			if (epconf & USB_ENDPT_EPRXEN) {
    3c64:	d025      	beq.n	3cb2 <usb_isr+0x22e>
				usb_packet_t *p;
				p = usb_malloc();
    3c66:	f000 fa71 	bl	414c <usb_malloc>
				if (p) {
    3c6a:	b138      	cbz	r0, 3c7c <usb_isr+0x1f8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3c6c:	eb04 1346 	add.w	r3, r4, r6, lsl #5
    3c70:	3008      	adds	r0, #8
    3c72:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3c74:	4b40      	ldr	r3, [pc, #256]	; (3d78 <usb_isr+0x2f4>)
    3c76:	f844 3039 	str.w	r3, [r4, r9, lsl #3]
    3c7a:	e006      	b.n	3c8a <usb_isr+0x206>
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3c7c:	f89a 3000 	ldrb.w	r3, [sl]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3c80:	f844 0039 	str.w	r0, [r4, r9, lsl #3]
					usb_rx_memory_needed++;
    3c84:	3301      	adds	r3, #1
    3c86:	f88a 3000 	strb.w	r3, [sl]
				}
				p = usb_malloc();
    3c8a:	f000 fa5f 	bl	414c <usb_malloc>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3c8e:	f049 0301 	orr.w	r3, r9, #1
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
    3c92:	b138      	cbz	r0, 3ca4 <usb_isr+0x220>
					table[index(i, RX, ODD)].addr = p->buf;
    3c94:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3c98:	3008      	adds	r0, #8
    3c9a:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3c9c:	4a2e      	ldr	r2, [pc, #184]	; (3d58 <usb_isr+0x2d4>)
    3c9e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
    3ca2:	e006      	b.n	3cb2 <usb_isr+0x22e>
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3ca4:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
					usb_rx_memory_needed++;
    3ca8:	f89a 3000 	ldrb.w	r3, [sl]
    3cac:	3301      	adds	r3, #1
    3cae:	f88a 3000 	strb.w	r3, [sl]
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3cb2:	f049 0202 	orr.w	r2, r9, #2
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3cb6:	3601      	adds	r6, #1
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
			table[index(i, TX, ODD)].desc = 0;
    3cb8:	f049 0903 	orr.w	r9, r9, #3
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3cbc:	2300      	movs	r3, #0
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3cbe:	2e05      	cmp	r6, #5
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3cc0:	f844 3032 	str.w	r3, [r4, r2, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    3cc4:	f844 3039 	str.w	r3, [r4, r9, lsl #3]
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3cc8:	d1c0      	bne.n	3c4c <usb_isr+0x1c8>
    3cca:	e082      	b.n	3dd2 <usb_isr+0x34e>
			table[index(i, TX, EVEN)].desc = 0;
			table[index(i, TX, ODD)].desc = 0;
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3ccc:	4b1b      	ldr	r3, [pc, #108]	; (3d3c <usb_isr+0x2b8>)
    3cce:	4c2b      	ldr	r4, [pc, #172]	; (3d7c <usb_isr+0x2f8>)
    3cd0:	781b      	ldrb	r3, [r3, #0]
    3cd2:	7023      	strb	r3, [r4, #0]
		datalen = 1;
    3cd4:	460b      	mov	r3, r1
    3cd6:	e07f      	b.n	3dd8 <usb_isr+0x354>
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3cd8:	4c28      	ldr	r4, [pc, #160]	; (3d7c <usb_isr+0x2f8>)
    3cda:	7023      	strb	r3, [r4, #0]
		reply_buffer[1] = 0;
    3cdc:	7063      	strb	r3, [r4, #1]
    3cde:	e07a      	b.n	3dd6 <usb_isr+0x352>
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		if (setup.wIndex > NUM_ENDPOINTS) {
    3ce0:	88aa      	ldrh	r2, [r5, #4]
    3ce2:	2a04      	cmp	r2, #4
    3ce4:	d870      	bhi.n	3dc8 <usb_isr+0x344>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3ce6:	4c25      	ldr	r4, [pc, #148]	; (3d7c <usb_isr+0x2f8>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    3ce8:	0092      	lsls	r2, r2, #2
		if (setup.wIndex > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3cea:	7023      	strb	r3, [r4, #0]
		reply_buffer[1] = 0;
    3cec:	7063      	strb	r3, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    3cee:	4b24      	ldr	r3, [pc, #144]	; (3d80 <usb_isr+0x2fc>)
    3cf0:	5c9b      	ldrb	r3, [r3, r2]
    3cf2:	079e      	lsls	r6, r3, #30
    3cf4:	d56f      	bpl.n	3dd6 <usb_isr+0x352>
    3cf6:	7021      	strb	r1, [r4, #0]
    3cf8:	e06d      	b.n	3dd6 <usb_isr+0x352>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    3cfa:	88aa      	ldrh	r2, [r5, #4]
    3cfc:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3d00:	2b04      	cmp	r3, #4
    3d02:	dc61      	bgt.n	3dc8 <usb_isr+0x344>
    3d04:	886b      	ldrh	r3, [r5, #2]
    3d06:	2b00      	cmp	r3, #0
    3d08:	d15e      	bne.n	3dc8 <usb_isr+0x344>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
    3d0a:	0091      	lsls	r1, r2, #2
    3d0c:	4a1c      	ldr	r2, [pc, #112]	; (3d80 <usb_isr+0x2fc>)
    3d0e:	440a      	add	r2, r1
    3d10:	7811      	ldrb	r1, [r2, #0]
    3d12:	f021 0102 	bic.w	r1, r1, #2
    3d16:	e055      	b.n	3dc4 <usb_isr+0x340>
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    3d18:	88aa      	ldrh	r2, [r5, #4]
    3d1a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3d1e:	2b04      	cmp	r3, #4
    3d20:	dc52      	bgt.n	3dc8 <usb_isr+0x344>
    3d22:	886b      	ldrh	r3, [r5, #2]
    3d24:	2b00      	cmp	r3, #0
    3d26:	d14f      	bne.n	3dc8 <usb_isr+0x344>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) |= 0x02;
    3d28:	0091      	lsls	r1, r2, #2
    3d2a:	4a15      	ldr	r2, [pc, #84]	; (3d80 <usb_isr+0x2fc>)
    3d2c:	440a      	add	r2, r1
    3d2e:	7811      	ldrb	r1, [r2, #0]
    3d30:	f041 0102 	orr.w	r1, r1, #2
    3d34:	e046      	b.n	3dc4 <usb_isr+0x340>
    3d36:	bf00      	nop
    3d38:	40072080 	.word	0x40072080
    3d3c:	1fff9403 	.word	0x1fff9403
    3d40:	1fff938d 	.word	0x1fff938d
    3d44:	1fff9418 	.word	0x1fff9418
    3d48:	40072090 	.word	0x40072090
    3d4c:	1fff8000 	.word	0x1fff8000
    3d50:	1fff93f0 	.word	0x1fff93f0
    3d54:	1fff9404 	.word	0x1fff9404
    3d58:	004000c8 	.word	0x004000c8
    3d5c:	1fff9328 	.word	0x1fff9328
    3d60:	1fff93e0 	.word	0x1fff93e0
    3d64:	1fff9c80 	.word	0x1fff9c80
    3d68:	1fff9338 	.word	0x1fff9338
    3d6c:	1fff93fa 	.word	0x1fff93fa
    3d70:	00012e4a 	.word	0x00012e4a
    3d74:	1001c830 	.word	0x1001c830
    3d78:	00400088 	.word	0x00400088
    3d7c:	1fff93fb 	.word	0x1fff93fb
    3d80:	400720c0 	.word	0x400720c0
    3d84:	1fff9324 	.word	0x1fff9324
    3d88:	1fff937c 	.word	0x1fff937c
    3d8c:	1fff93d0 	.word	0x1fff93d0
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3d90:	886a      	ldrh	r2, [r5, #2]
    3d92:	88a9      	ldrh	r1, [r5, #4]
    3d94:	4b9d      	ldr	r3, [pc, #628]	; (400c <usb_isr+0x588>)
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3d96:	f853 4c08 	ldr.w	r4, [r3, #-8]
    3d9a:	f1a3 000c 	sub.w	r0, r3, #12
    3d9e:	b19c      	cbz	r4, 3dc8 <usb_isr+0x344>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3da0:	f833 6c0c 	ldrh.w	r6, [r3, #-12]
    3da4:	4296      	cmp	r6, r2
    3da6:	d109      	bne.n	3dbc <usb_isr+0x338>
    3da8:	f833 6c0a 	ldrh.w	r6, [r3, #-10]
    3dac:	428e      	cmp	r6, r1
    3dae:	d105      	bne.n	3dbc <usb_isr+0x338>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3db0:	0a12      	lsrs	r2, r2, #8
    3db2:	2a03      	cmp	r2, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3db4:	bf0c      	ite	eq
    3db6:	7823      	ldrbeq	r3, [r4, #0]
				} else {
					datalen = list->length;
    3db8:	8903      	ldrhne	r3, [r0, #8]
    3dba:	e00d      	b.n	3dd8 <usb_isr+0x354>
    3dbc:	330c      	adds	r3, #12
    3dbe:	e7ea      	b.n	3d96 <usb_isr+0x312>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr = setup.wValue;
    3dc0:	78a9      	ldrb	r1, [r5, #2]
    3dc2:	4a93      	ldr	r2, [pc, #588]	; (4010 <usb_isr+0x58c>)
    3dc4:	7011      	strb	r1, [r2, #0]
    3dc6:	e004      	b.n	3dd2 <usb_isr+0x34e>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3dc8:	4b92      	ldr	r3, [pc, #584]	; (4014 <usb_isr+0x590>)
    3dca:	220f      	movs	r2, #15
    3dcc:	701a      	strb	r2, [r3, #0]
    3dce:	e027      	b.n	3e20 <usb_isr+0x39c>
static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    3dd0:	2300      	movs	r3, #0

static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
    3dd2:	461c      	mov	r4, r3
    3dd4:	e000      	b.n	3dd8 <usb_isr+0x354>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3dd6:	2302      	movs	r3, #2
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3dd8:	88ee      	ldrh	r6, [r5, #6]
    3dda:	42b3      	cmp	r3, r6
    3ddc:	bf38      	it	cc
    3dde:	461e      	movcc	r6, r3
    3de0:	2e40      	cmp	r6, #64	; 0x40
    3de2:	bf34      	ite	cc
    3de4:	4635      	movcc	r5, r6
    3de6:	2540      	movcs	r5, #64	; 0x40
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    3de8:	4620      	mov	r0, r4
    3dea:	4629      	mov	r1, r5
    3dec:	f7ff fd80 	bl	38f0 <endpoint0_transmit>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3df0:	1b76      	subs	r6, r6, r5

	if (datalen > setup.wLength) datalen = setup.wLength;
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3df2:	442c      	add	r4, r5
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3df4:	d103      	bne.n	3dfe <usb_isr+0x37a>
    3df6:	2d40      	cmp	r5, #64	; 0x40
    3df8:	d112      	bne.n	3e20 <usb_isr+0x39c>
    3dfa:	4635      	mov	r5, r6
    3dfc:	e003      	b.n	3e06 <usb_isr+0x382>
    3dfe:	2e40      	cmp	r6, #64	; 0x40
    3e00:	bf34      	ite	cc
    3e02:	4635      	movcc	r5, r6
    3e04:	2540      	movcs	r5, #64	; 0x40

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    3e06:	4620      	mov	r0, r4
    3e08:	4629      	mov	r1, r5
    3e0a:	f7ff fd71 	bl	38f0 <endpoint0_transmit>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3e0e:	1b76      	subs	r6, r6, r5
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3e10:	442c      	add	r4, r5
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3e12:	d101      	bne.n	3e18 <usb_isr+0x394>
    3e14:	2d40      	cmp	r5, #64	; 0x40
    3e16:	d103      	bne.n	3e20 <usb_isr+0x39c>

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3e18:	4a7f      	ldr	r2, [pc, #508]	; (4018 <usb_isr+0x594>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3e1a:	f8c8 4000 	str.w	r4, [r8]
	ep0_tx_len = datalen;
    3e1e:	8016      	strh	r6, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3e20:	2201      	movs	r2, #1
    3e22:	4b7e      	ldr	r3, [pc, #504]	; (401c <usb_isr+0x598>)
    3e24:	e03d      	b.n	3ea2 <usb_isr+0x41e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3e26:	4b7e      	ldr	r3, [pc, #504]	; (4020 <usb_isr+0x59c>)
    3e28:	881a      	ldrh	r2, [r3, #0]
    3e2a:	f242 0321 	movw	r3, #8225	; 0x2021
    3e2e:	429a      	cmp	r2, r3
    3e30:	d110      	bne.n	3e54 <usb_isr+0x3d0>
    3e32:	2300      	movs	r3, #0
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3e34:	4a7b      	ldr	r2, [pc, #492]	; (4024 <usb_isr+0x5a0>)
    3e36:	5cc8      	ldrb	r0, [r1, r3]
    3e38:	5498      	strb	r0, [r3, r2]
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
    3e3a:	3301      	adds	r3, #1
    3e3c:	2b07      	cmp	r3, #7
    3e3e:	d1f9      	bne.n	3e34 <usb_isr+0x3b0>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3e40:	6813      	ldr	r3, [r2, #0]
    3e42:	2b86      	cmp	r3, #134	; 0x86
    3e44:	d102      	bne.n	3e4c <usb_isr+0x3c8>
    3e46:	4b78      	ldr	r3, [pc, #480]	; (4028 <usb_isr+0x5a4>)
    3e48:	220f      	movs	r2, #15
    3e4a:	701a      	strb	r2, [r3, #0]
			endpoint0_transmit(NULL, 0);
    3e4c:	2000      	movs	r0, #0
    3e4e:	4601      	mov	r1, r0
    3e50:	f7ff fd4e 	bl	38f0 <endpoint0_transmit>
			usb_reboot_timer = 5;
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3e54:	4b75      	ldr	r3, [pc, #468]	; (402c <usb_isr+0x5a8>)
    3e56:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
    3e5a:	e023      	b.n	3ea4 <usb_isr+0x420>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3e5c:	4e74      	ldr	r6, [pc, #464]	; (4030 <usb_isr+0x5ac>)
    3e5e:	6835      	ldr	r5, [r6, #0]
		if (data) {
    3e60:	b1b5      	cbz	r5, 3e90 <usb_isr+0x40c>
			size = ep0_tx_len;
    3e62:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 4018 <usb_isr+0x594>
    3e66:	f8b8 9000 	ldrh.w	r9, [r8]
    3e6a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
    3e6e:	bf34      	ite	cc
    3e70:	464c      	movcc	r4, r9
    3e72:	2440      	movcs	r4, #64	; 0x40
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
    3e74:	4628      	mov	r0, r5
    3e76:	4621      	mov	r1, r4
    3e78:	f7ff fd3a 	bl	38f0 <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    3e7c:	ebc4 0309 	rsb	r3, r4, r9
    3e80:	b29b      	uxth	r3, r3
    3e82:	f8a8 3000 	strh.w	r3, [r8]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3e86:	b90b      	cbnz	r3, 3e8c <usb_isr+0x408>
    3e88:	2c40      	cmp	r4, #64	; 0x40
    3e8a:	d100      	bne.n	3e8e <usb_isr+0x40a>
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3e8c:	192b      	adds	r3, r5, r4
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3e8e:	6033      	str	r3, [r6, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3e90:	4b63      	ldr	r3, [pc, #396]	; (4020 <usb_isr+0x59c>)
    3e92:	881a      	ldrh	r2, [r3, #0]
    3e94:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3e98:	d104      	bne.n	3ea4 <usb_isr+0x420>
			setup.bRequest = 0;
    3e9a:	2200      	movs	r2, #0
    3e9c:	705a      	strb	r2, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3e9e:	789a      	ldrb	r2, [r3, #2]
    3ea0:	4b64      	ldr	r3, [pc, #400]	; (4034 <usb_isr+0x5b0>)
    3ea2:	701a      	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3ea4:	2201      	movs	r2, #1
    3ea6:	4b5d      	ldr	r3, [pc, #372]	; (401c <usb_isr+0x598>)
    3ea8:	e06c      	b.n	3f84 <usb_isr+0x500>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3eaa:	eb04 06c8 	add.w	r6, r4, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3eae:	3d01      	subs	r5, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3eb0:	6873      	ldr	r3, [r6, #4]
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays

			if (stat & 0x08) { // transmit
    3eb2:	f002 0208 	and.w	r2, r2, #8
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3eb6:	f1a3 0008 	sub.w	r0, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3eba:	b2ed      	uxtb	r5, r5

			if (stat & 0x08) { // transmit
    3ebc:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    3ec0:	2a00      	cmp	r2, #0
    3ec2:	d036      	beq.n	3f32 <usb_isr+0x4ae>
				usb_free(packet);
    3ec4:	f000 f960 	bl	4188 <usb_free>
				packet = tx_first[endpoint];
    3ec8:	485b      	ldr	r0, [pc, #364]	; (4038 <usb_isr+0x5b4>)
    3eca:	4b5c      	ldr	r3, [pc, #368]	; (403c <usb_isr+0x5b8>)
    3ecc:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
				if (packet) {
    3ed0:	b1ea      	cbz	r2, 3f0e <usb_isr+0x48a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3ed2:	6851      	ldr	r1, [r2, #4]
    3ed4:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
					b->addr = packet->buf;
    3ed8:	f102 0108 	add.w	r1, r2, #8
    3edc:	6071      	str	r1, [r6, #4]
					switch (tx_state[endpoint]) {
    3ede:	5d59      	ldrb	r1, [r3, r5]
    3ee0:	2903      	cmp	r1, #3
    3ee2:	d80b      	bhi.n	3efc <usb_isr+0x478>
    3ee4:	e8df f001 	tbb	[pc, r1]
    3ee8:	08060402 	.word	0x08060402
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3eec:	2103      	movs	r1, #3
    3eee:	e004      	b.n	3efa <usb_isr+0x476>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    3ef0:	2102      	movs	r1, #2
    3ef2:	e002      	b.n	3efa <usb_isr+0x476>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3ef4:	2105      	movs	r1, #5
    3ef6:	e000      	b.n	3efa <usb_isr+0x476>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3ef8:	2104      	movs	r1, #4
    3efa:	5559      	strb	r1, [r3, r5]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3efc:	f016 0f08 	tst.w	r6, #8
    3f00:	8812      	ldrh	r2, [r2, #0]
    3f02:	bf0c      	ite	eq
    3f04:	2388      	moveq	r3, #136	; 0x88
    3f06:	23c8      	movne	r3, #200	; 0xc8
    3f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3f0c:	e042      	b.n	3f94 <usb_isr+0x510>
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3f0e:	5d5a      	ldrb	r2, [r3, r5]
    3f10:	2a03      	cmp	r2, #3
    3f12:	d807      	bhi.n	3f24 <usb_isr+0x4a0>
    3f14:	e8df f002 	tbb	[pc, r2]
    3f18:	04024040 	.word	0x04024040
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3f1c:	2200      	movs	r2, #0
    3f1e:	e006      	b.n	3f2e <usb_isr+0x4aa>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3f20:	2201      	movs	r2, #1
    3f22:	e004      	b.n	3f2e <usb_isr+0x4aa>
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3f24:	f016 0f08 	tst.w	r6, #8
    3f28:	bf0c      	ite	eq
    3f2a:	2202      	moveq	r2, #2
    3f2c:	2203      	movne	r2, #3
    3f2e:	555a      	strb	r2, [r3, r5]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3f30:	e032      	b.n	3f98 <usb_isr+0x514>
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    3f32:	f854 2038 	ldr.w	r2, [r4, r8, lsl #3]
    3f36:	0c12      	lsrs	r2, r2, #16
    3f38:	f823 2c08 	strh.w	r2, [r3, #-8]
				if (packet->len > 0) {
    3f3c:	b322      	cbz	r2, 3f88 <usb_isr+0x504>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3f3e:	f8df e12c 	ldr.w	lr, [pc, #300]	; 406c <usb_isr+0x5e8>
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3f42:	f823 1c06 	strh.w	r1, [r3, #-6]
					packet->next = NULL;
    3f46:	f843 1c04 	str.w	r1, [r3, #-4]
					if (rx_first[endpoint] == NULL) {
    3f4a:	f85e 3025 	ldr.w	r3, [lr, r5, lsl #2]
    3f4e:	493c      	ldr	r1, [pc, #240]	; (4040 <usb_isr+0x5bc>)
    3f50:	b913      	cbnz	r3, 3f58 <usb_isr+0x4d4>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3f52:	f84e 0025 	str.w	r0, [lr, r5, lsl #2]
    3f56:	e002      	b.n	3f5e <usb_isr+0x4da>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3f58:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    3f5c:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    3f5e:	4b39      	ldr	r3, [pc, #228]	; (4044 <usb_isr+0x5c0>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3f60:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3f64:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
    3f68:	440a      	add	r2, r1
    3f6a:	f823 2015 	strh.w	r2, [r3, r5, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated packets
					// so a flood of incoming data on 1 endpoint doesn't starve
					// the others if the user isn't reading it regularly
					packet = usb_malloc();
    3f6e:	f000 f8ed 	bl	414c <usb_malloc>
					if (packet) {
    3f72:	b110      	cbz	r0, 3f7a <usb_isr+0x4f6>
						b->addr = packet->buf;
    3f74:	3008      	adds	r0, #8
    3f76:	6070      	str	r0, [r6, #4]
    3f78:	e006      	b.n	3f88 <usb_isr+0x504>
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
						usb_rx_memory_needed++;
    3f7a:	4b33      	ldr	r3, [pc, #204]	; (4048 <usb_isr+0x5c4>)
						b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
    3f7c:	f844 0038 	str.w	r0, [r4, r8, lsl #3]
						usb_rx_memory_needed++;
    3f80:	781a      	ldrb	r2, [r3, #0]
    3f82:	3201      	adds	r2, #1
    3f84:	701a      	strb	r2, [r3, #0]
    3f86:	e007      	b.n	3f98 <usb_isr+0x514>
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3f88:	4b28      	ldr	r3, [pc, #160]	; (402c <usb_isr+0x5a8>)
    3f8a:	4a30      	ldr	r2, [pc, #192]	; (404c <usb_isr+0x5c8>)
    3f8c:	f016 0f08 	tst.w	r6, #8
    3f90:	bf08      	it	eq
    3f92:	4613      	moveq	r3, r2
    3f94:	f844 3038 	str.w	r3, [r4, r8, lsl #3]




		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3f98:	2308      	movs	r3, #8
    3f9a:	703b      	strb	r3, [r7, #0]
		goto restart;
    3f9c:	e574      	b.n	3a88 <usb_isr+0x4>
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3f9e:	07e0      	lsls	r0, r4, #31
    3fa0:	d51f      	bpl.n	3fe2 <usb_isr+0x55e>
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3fa2:	491e      	ldr	r1, [pc, #120]	; (401c <usb_isr+0x598>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3fa4:	4829      	ldr	r0, [pc, #164]	; (404c <usb_isr+0x5c8>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3fa6:	4c2a      	ldr	r4, [pc, #168]	; (4050 <usb_isr+0x5cc>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3fa8:	2302      	movs	r3, #2
    3faa:	700b      	strb	r3, [r1, #0]
		ep0_tx_bdt_bank = 0;
    3fac:	4b29      	ldr	r3, [pc, #164]	; (4054 <usb_isr+0x5d0>)
    3fae:	701a      	strb	r2, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3fb0:	4b29      	ldr	r3, [pc, #164]	; (4058 <usb_isr+0x5d4>)
    3fb2:	6018      	str	r0, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3fb4:	6098      	str	r0, [r3, #8]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3fb6:	4829      	ldr	r0, [pc, #164]	; (405c <usb_isr+0x5d8>)
    3fb8:	60d8      	str	r0, [r3, #12]
		table[index(0, TX, EVEN)].desc = 0;
    3fba:	611a      	str	r2, [r3, #16]
		table[index(0, TX, ODD)].desc = 0;
    3fbc:	619a      	str	r2, [r3, #24]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3fbe:	605c      	str	r4, [r3, #4]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3fc0:	4b14      	ldr	r3, [pc, #80]	; (4014 <usb_isr+0x590>)
    3fc2:	200d      	movs	r0, #13
    3fc4:	7018      	strb	r0, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3fc6:	4826      	ldr	r0, [pc, #152]	; (4060 <usb_isr+0x5dc>)
    3fc8:	23ff      	movs	r3, #255	; 0xff
    3fca:	7003      	strb	r3, [r0, #0]
		USB0_ISTAT = 0xFF;
    3fcc:	702b      	strb	r3, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3fce:	7402      	strb	r2, [r0, #16]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3fd0:	4a24      	ldr	r2, [pc, #144]	; (4064 <usb_isr+0x5e0>)
    3fd2:	7013      	strb	r3, [r2, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3fd4:	4b24      	ldr	r3, [pc, #144]	; (4068 <usb_isr+0x5e4>)
    3fd6:	229f      	movs	r2, #159	; 0x9f
    3fd8:	701a      	strb	r2, [r3, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3fda:	2301      	movs	r3, #1
    3fdc:	700b      	strb	r3, [r1, #0]
		return;
    3fde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3fe2:	0621      	lsls	r1, r4, #24
    3fe4:	d504      	bpl.n	3ff0 <usb_isr+0x56c>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3fe6:	4b0b      	ldr	r3, [pc, #44]	; (4014 <usb_isr+0x590>)
    3fe8:	220d      	movs	r2, #13
    3fea:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3fec:	2380      	movs	r3, #128	; 0x80
    3fee:	702b      	strb	r3, [r5, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3ff0:	07a2      	lsls	r2, r4, #30
    3ff2:	d505      	bpl.n	4000 <usb_isr+0x57c>
		uint8_t err = USB0_ERRSTAT;
    3ff4:	4b1a      	ldr	r3, [pc, #104]	; (4060 <usb_isr+0x5dc>)
    3ff6:	781a      	ldrb	r2, [r3, #0]
    3ff8:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    3ffa:	701a      	strb	r2, [r3, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3ffc:	2302      	movs	r3, #2
    3ffe:	702b      	strb	r3, [r5, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    4000:	06e3      	lsls	r3, r4, #27
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    4002:	bf44      	itt	mi
    4004:	2310      	movmi	r3, #16
    4006:	702b      	strbmi	r3, [r5, #0]
    4008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    400c:	00012e5c 	.word	0x00012e5c
    4010:	1fff9428 	.word	0x1fff9428
    4014:	400720c0 	.word	0x400720c0
    4018:	1fff93f8 	.word	0x1fff93f8
    401c:	40072094 	.word	0x40072094
    4020:	1fff93f0 	.word	0x1fff93f0
    4024:	1fff9c88 	.word	0x1fff9c88
    4028:	1fff938d 	.word	0x1fff938d
    402c:	004000c8 	.word	0x004000c8
    4030:	1fff9324 	.word	0x1fff9324
    4034:	40072098 	.word	0x40072098
    4038:	1fff93d0 	.word	0x1fff93d0
    403c:	1fff9338 	.word	0x1fff9338
    4040:	1fff9328 	.word	0x1fff9328
    4044:	1fff9c80 	.word	0x1fff9c80
    4048:	1fff93fa 	.word	0x1fff93fa
    404c:	00400088 	.word	0x00400088
    4050:	1fff933c 	.word	0x1fff933c
    4054:	1fff938c 	.word	0x1fff938c
    4058:	1fff8000 	.word	0x1fff8000
    405c:	1fff9390 	.word	0x1fff9390
    4060:	40072088 	.word	0x40072088
    4064:	4007208c 	.word	0x4007208c
    4068:	40072084 	.word	0x40072084
    406c:	1fff937c 	.word	0x1fff937c

00004070 <usb_init>:
}



void usb_init(void)
{
    4070:	b508      	push	{r3, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4072:	f7ff fc05 	bl	3880 <usb_init_serialnumber>
    4076:	2300      	movs	r3, #0

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4078:	4a1f      	ldr	r2, [pc, #124]	; (40f8 <usb_init+0x88>)
    407a:	2100      	movs	r1, #0
    407c:	5099      	str	r1, [r3, r2]
    407e:	18d0      	adds	r0, r2, r3
    4080:	3308      	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    4082:	2b88      	cmp	r3, #136	; 0x88
		table[i].desc = 0;
		table[i].addr = 0;
    4084:	6041      	str	r1, [r0, #4]
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    4086:	d1f7      	bne.n	4078 <usb_init+0x8>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4088:	4b1c      	ldr	r3, [pc, #112]	; (40fc <usb_init+0x8c>)
    408a:	6819      	ldr	r1, [r3, #0]
    408c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    4090:	6019      	str	r1, [r3, #0]

	// reset USB module
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
    4092:	f503 3328 	add.w	r3, r3, #172032	; 0x2a000
    4096:	33d8      	adds	r3, #216	; 0xd8
    4098:	2180      	movs	r1, #128	; 0x80
    409a:	7019      	strb	r1, [r3, #0]
	while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end
    409c:	7818      	ldrb	r0, [r3, #0]
    409e:	4918      	ldr	r1, [pc, #96]	; (4100 <usb_init+0x90>)
    40a0:	0600      	lsls	r0, r0, #24
    40a2:	d4fb      	bmi.n	409c <usb_init+0x2c>

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    40a4:	4b17      	ldr	r3, [pc, #92]	; (4104 <usb_init+0x94>)
    40a6:	f3c2 2007 	ubfx	r0, r2, #8, #8
    40aa:	7018      	strb	r0, [r3, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    40ac:	f3c2 4007 	ubfx	r0, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40b0:	0e12      	lsrs	r2, r2, #24
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
	while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    40b2:	7518      	strb	r0, [r3, #20]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40b4:	761a      	strb	r2, [r3, #24]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    40b6:	4a14      	ldr	r2, [pc, #80]	; (4108 <usb_init+0x98>)
    40b8:	23ff      	movs	r3, #255	; 0xff
    40ba:	7013      	strb	r3, [r2, #0]
	USB0_ERRSTAT = 0xFF;
    40bc:	7213      	strb	r3, [r2, #8]
	USB0_OTGISTAT = 0xFF;
    40be:	f802 3c70 	strb.w	r3, [r2, #-112]

	USB0_USBTRC0 |= 0x40; // undocumented bit
    40c2:	780b      	ldrb	r3, [r1, #0]
    40c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    40c8:	700b      	strb	r3, [r1, #0]

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    40ca:	2301      	movs	r3, #1
	USB0_USBCTRL = 0;
    40cc:	2100      	movs	r1, #0
	USB0_OTGISTAT = 0xFF;

	USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    40ce:	7513      	strb	r3, [r2, #20]
	USB0_USBCTRL = 0;
    40d0:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    40d4:	7113      	strb	r3, [r2, #4]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40d6:	4b0d      	ldr	r3, [pc, #52]	; (410c <usb_init+0x9c>)
    40d8:	2270      	movs	r2, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40da:	f46f 7150 	mvn.w	r1, #832	; 0x340

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40de:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40e0:	440b      	add	r3, r1
    40e2:	f44f 7200 	mov.w	r2, #512	; 0x200
    40e6:	601a      	str	r2, [r3, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    40e8:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
    40ec:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
    40f0:	2210      	movs	r2, #16
    40f2:	701a      	strb	r2, [r3, #0]
    40f4:	bd08      	pop	{r3, pc}
    40f6:	bf00      	nop
    40f8:	1fff8000 	.word	0x1fff8000
    40fc:	40048034 	.word	0x40048034
    4100:	4007210c 	.word	0x4007210c
    4104:	4007209c 	.word	0x4007209c
    4108:	40072080 	.word	0x40072080
    410c:	e000e449 	.word	0xe000e449

00004110 <_ZN16usb_serial_class9availableEv>:
class usb_serial_class : public Stream
{
public:
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4110:	f000 b89e 	b.w	4250 <usb_serial_available>

00004114 <_ZN16usb_serial_class4readEv>:
        virtual int read() { return usb_serial_getchar(); }
    4114:	f000 b85a 	b.w	41cc <usb_serial_getchar>

00004118 <_ZN16usb_serial_class4peekEv>:
        virtual int peek() { return usb_serial_peekchar(); }
    4118:	f000 b87e 	b.w	4218 <usb_serial_peekchar>

0000411c <_ZN16usb_serial_class5flushEv>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    411c:	f000 b91a 	b.w	4354 <usb_serial_flush_output>

00004120 <_ZN16usb_serial_class5writeEh>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4120:	4608      	mov	r0, r1
    4122:	f000 b90b 	b.w	433c <usb_serial_putchar>

00004126 <_ZN16usb_serial_class5writeEPKhj>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4126:	4608      	mov	r0, r1
    4128:	4611      	mov	r1, r2
    412a:	f000 b89f 	b.w	426c <usb_serial_write>
    412e:	ffff 4b04 	vtbl.8	d20, {d15-d18}, d4

00004130 <_GLOBAL__sub_I_Serial>:
class __FlashStringHelper;

class Print
{
  public:
	Print() : write_error(0) {}
    4130:	4b04      	ldr	r3, [pc, #16]	; (4144 <_GLOBAL__sub_I_Serial+0x14>)
    4132:	2200      	movs	r2, #0
    4134:	711a      	strb	r2, [r3, #4]
    4136:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    413a:	731a      	strb	r2, [r3, #12]
#define USB_SERIAL_RTS  0x02

// C++ interface
#ifdef __cplusplus
#include "Stream.h"
class usb_serial_class : public Stream
    413c:	4a02      	ldr	r2, [pc, #8]	; (4148 <_GLOBAL__sub_I_Serial+0x18>)
    413e:	6099      	str	r1, [r3, #8]
    4140:	601a      	str	r2, [r3, #0]
    4142:	4770      	bx	lr
    4144:	1fff9408 	.word	0x1fff9408
    4148:	00012eb0 	.word	0x00012eb0

0000414c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    414c:	b672      	cpsid	i
	avail = usb_buffer_available;
    414e:	4a0c      	ldr	r2, [pc, #48]	; (4180 <usb_malloc+0x34>)
    4150:	6811      	ldr	r1, [r2, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    4152:	fab1 f381 	clz	r3, r1
	if (n >= NUM_USB_BUFFERS) {
    4156:	2b0b      	cmp	r3, #11
    4158:	d902      	bls.n	4160 <usb_malloc+0x14>
		__enable_irq();
    415a:	b662      	cpsie	i
		return NULL;
    415c:	2000      	movs	r0, #0
    415e:	4770      	bx	lr
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    4160:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    4164:	40d8      	lsrs	r0, r3
    4166:	ea21 0100 	bic.w	r1, r1, r0
    416a:	6011      	str	r1, [r2, #0]
	__enable_irq();
    416c:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    416e:	4905      	ldr	r1, [pc, #20]	; (4184 <usb_malloc+0x38>)
    4170:	2248      	movs	r2, #72	; 0x48
    4172:	4353      	muls	r3, r2
    4174:	18c8      	adds	r0, r1, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    4176:	2200      	movs	r2, #0
    4178:	50ca      	str	r2, [r1, r3]
	*(uint32_t *)(p + 4) = 0;
    417a:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    417c:	4770      	bx	lr
    417e:	bf00      	nop
    4180:	1fff84bc 	.word	0x1fff84bc
    4184:	1fff80a0 	.word	0x1fff80a0

00004188 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    4188:	4b0c      	ldr	r3, [pc, #48]	; (41bc <usb_free+0x34>)
    418a:	2248      	movs	r2, #72	; 0x48
    418c:	1ac3      	subs	r3, r0, r3
    418e:	fbb3 f3f2 	udiv	r3, r3, r2
	if (n >= NUM_USB_BUFFERS) return;
    4192:	2b0b      	cmp	r3, #11
    4194:	d811      	bhi.n	41ba <usb_free+0x32>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    4196:	4a0a      	ldr	r2, [pc, #40]	; (41c0 <usb_free+0x38>)
    4198:	7812      	ldrb	r2, [r2, #0]
    419a:	b122      	cbz	r2, 41a6 <usb_free+0x1e>
    419c:	4a09      	ldr	r2, [pc, #36]	; (41c4 <usb_free+0x3c>)
    419e:	7812      	ldrb	r2, [r2, #0]
    41a0:	b10a      	cbz	r2, 41a6 <usb_free+0x1e>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    41a2:	f7ff bbf3 	b.w	398c <usb_rx_memory>
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    41a6:	b672      	cpsid	i
	usb_buffer_available |= mask;
    41a8:	4a07      	ldr	r2, [pc, #28]	; (41c8 <usb_free+0x40>)
		//serial_print("\n");
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
    41aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    41ae:	fa21 f303 	lsr.w	r3, r1, r3
	__disable_irq();
	usb_buffer_available |= mask;
    41b2:	6811      	ldr	r1, [r2, #0]
    41b4:	4319      	orrs	r1, r3
    41b6:	6011      	str	r1, [r2, #0]
	__enable_irq();
    41b8:	b662      	cpsie	i
    41ba:	4770      	bx	lr
    41bc:	1fff80a0 	.word	0x1fff80a0
    41c0:	1fff93fa 	.word	0x1fff93fa
    41c4:	1fff9403 	.word	0x1fff9403
    41c8:	1fff84bc 	.word	0x1fff84bc

000041cc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    41cc:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    41ce:	4c10      	ldr	r4, [pc, #64]	; (4210 <usb_serial_getchar+0x44>)
    41d0:	6823      	ldr	r3, [r4, #0]
    41d2:	b16b      	cbz	r3, 41f0 <usb_serial_getchar+0x24>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    41d4:	6820      	ldr	r0, [r4, #0]
    41d6:	8842      	ldrh	r2, [r0, #2]
	c = rx_packet->buf[i++];
    41d8:	1c53      	adds	r3, r2, #1
    41da:	4402      	add	r2, r0
    41dc:	7a14      	ldrb	r4, [r2, #8]
	if (i >= rx_packet->len) {
    41de:	8802      	ldrh	r2, [r0, #0]
    41e0:	4293      	cmp	r3, r2
    41e2:	d312      	bcc.n	420a <usb_serial_getchar+0x3e>
		usb_free(rx_packet);
    41e4:	f7ff ffd0 	bl	4188 <usb_free>
		rx_packet = NULL;
    41e8:	4b09      	ldr	r3, [pc, #36]	; (4210 <usb_serial_getchar+0x44>)
    41ea:	2200      	movs	r2, #0
    41ec:	601a      	str	r2, [r3, #0]
    41ee:	e00d      	b.n	420c <usb_serial_getchar+0x40>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    41f0:	4b08      	ldr	r3, [pc, #32]	; (4214 <usb_serial_getchar+0x48>)
    41f2:	781b      	ldrb	r3, [r3, #0]
    41f4:	b913      	cbnz	r3, 41fc <usb_serial_getchar+0x30>
    41f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    41fa:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    41fc:	2003      	movs	r0, #3
    41fe:	f7ff fb97 	bl	3930 <usb_rx>
    4202:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    4204:	2800      	cmp	r0, #0
    4206:	d1e5      	bne.n	41d4 <usb_serial_getchar+0x8>
    4208:	e7f5      	b.n	41f6 <usb_serial_getchar+0x2a>
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    420a:	8043      	strh	r3, [r0, #2]
	}
	return c;
    420c:	4620      	mov	r0, r4
}
    420e:	bd10      	pop	{r4, pc}
    4210:	1fff9424 	.word	0x1fff9424
    4214:	1fff9403 	.word	0x1fff9403

00004218 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    4218:	b510      	push	{r4, lr}
	if (!rx_packet) {
    421a:	4c0b      	ldr	r4, [pc, #44]	; (4248 <usb_serial_peekchar+0x30>)
    421c:	6823      	ldr	r3, [r4, #0]
    421e:	b113      	cbz	r3, 4226 <usb_serial_peekchar+0xe>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
    4220:	6823      	ldr	r3, [r4, #0]
    4222:	b96b      	cbnz	r3, 4240 <usb_serial_peekchar+0x28>
    4224:	e002      	b.n	422c <usb_serial_peekchar+0x14>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    4226:	4b09      	ldr	r3, [pc, #36]	; (424c <usb_serial_peekchar+0x34>)
    4228:	781b      	ldrb	r3, [r3, #0]
    422a:	b913      	cbnz	r3, 4232 <usb_serial_peekchar+0x1a>
    422c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4230:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    4232:	2003      	movs	r0, #3
    4234:	f7ff fb7c 	bl	3930 <usb_rx>
    4238:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    423a:	2800      	cmp	r0, #0
    423c:	d1f0      	bne.n	4220 <usb_serial_peekchar+0x8>
    423e:	e7f5      	b.n	422c <usb_serial_peekchar+0x14>
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    4240:	885a      	ldrh	r2, [r3, #2]
    4242:	4413      	add	r3, r2
    4244:	7a18      	ldrb	r0, [r3, #8]
}
    4246:	bd10      	pop	{r4, pc}
    4248:	1fff9424 	.word	0x1fff9424
    424c:	1fff9403 	.word	0x1fff9403

00004250 <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    4250:	4b04      	ldr	r3, [pc, #16]	; (4264 <usb_serial_available+0x14>)

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    4252:	8898      	ldrh	r0, [r3, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    4254:	4b04      	ldr	r3, [pc, #16]	; (4268 <usb_serial_available+0x18>)
    4256:	681b      	ldr	r3, [r3, #0]
    4258:	b11b      	cbz	r3, 4262 <usb_serial_available+0x12>
    425a:	881a      	ldrh	r2, [r3, #0]
    425c:	885b      	ldrh	r3, [r3, #2]
    425e:	1ad3      	subs	r3, r2, r3
    4260:	4418      	add	r0, r3
	return count;
}
    4262:	4770      	bx	lr
    4264:	1fff9c80 	.word	0x1fff9c80
    4268:	1fff9424 	.word	0x1fff9424

0000426c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    426c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    4270:	4e2d      	ldr	r6, [pc, #180]	; (4328 <usb_serial_write+0xbc>)
    4272:	2301      	movs	r3, #1
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    4274:	4607      	mov	r7, r0
    4276:	460c      	mov	r4, r1
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    4278:	7033      	strb	r3, [r6, #0]
	while (size > 0) {
    427a:	2c00      	cmp	r4, #0
    427c:	d04f      	beq.n	431e <usb_serial_write+0xb2>
		if (!tx_packet) {
    427e:	4d2b      	ldr	r5, [pc, #172]	; (432c <usb_serial_write+0xc0>)
    4280:	682b      	ldr	r3, [r5, #0]
    4282:	46a9      	mov	r9, r5
    4284:	bb2b      	cbnz	r3, 42d2 <usb_serial_write+0x66>
    4286:	f648 4801 	movw	r8, #35841	; 0x8c01
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    428a:	4b29      	ldr	r3, [pc, #164]	; (4330 <usb_serial_write+0xc4>)
    428c:	781b      	ldrb	r3, [r3, #0]
    428e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4292:	b90b      	cbnz	r3, 4298 <usb_serial_write+0x2c>
					tx_noautoflush = 0;
    4294:	7032      	strb	r2, [r6, #0]
    4296:	e015      	b.n	42c4 <usb_serial_write+0x58>
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    4298:	2004      	movs	r0, #4
    429a:	f7ff fb65 	bl	3968 <usb_tx_packet_count>
    429e:	2807      	cmp	r0, #7
    42a0:	d808      	bhi.n	42b4 <usb_serial_write+0x48>
					tx_noautoflush = 1;
    42a2:	2301      	movs	r3, #1
    42a4:	7033      	strb	r3, [r6, #0]
					tx_packet = usb_malloc();
    42a6:	f7ff ff51 	bl	414c <usb_malloc>
    42aa:	f8c9 0000 	str.w	r0, [r9]
					if (tx_packet) break;
    42ae:	b980      	cbnz	r0, 42d2 <usb_serial_write+0x66>
					tx_noautoflush = 0;
    42b0:	4b1d      	ldr	r3, [pc, #116]	; (4328 <usb_serial_write+0xbc>)
    42b2:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    42b4:	f1b8 0801 	subs.w	r8, r8, #1
    42b8:	4b1e      	ldr	r3, [pc, #120]	; (4334 <usb_serial_write+0xc8>)
    42ba:	d001      	beq.n	42c0 <usb_serial_write+0x54>
    42bc:	781a      	ldrb	r2, [r3, #0]
    42be:	b12a      	cbz	r2, 42cc <usb_serial_write+0x60>
					transmit_previous_timeout = 1;
    42c0:	2201      	movs	r2, #1
    42c2:	701a      	strb	r2, [r3, #0]
					return -1;
    42c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				yield();
    42cc:	f000 f8c6 	bl	445c <yield>
			}
    42d0:	e7db      	b.n	428a <usb_serial_write+0x1e>
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    42d2:	6829      	ldr	r1, [r5, #0]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    42d4:	4a17      	ldr	r2, [pc, #92]	; (4334 <usb_serial_write+0xc8>)
		len = CDC_TX_SIZE - tx_packet->index;
    42d6:	8848      	ldrh	r0, [r1, #2]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    42d8:	2300      	movs	r3, #0
    42da:	7013      	strb	r3, [r2, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    42dc:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    42e0:	4294      	cmp	r4, r2
    42e2:	bf38      	it	cc
    42e4:	4622      	movcc	r2, r4
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    42e6:	f100 0c08 	add.w	ip, r0, #8
		tx_packet->index += len;
    42ea:	4410      	add	r0, r2
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    42ec:	448c      	add	ip, r1
		tx_packet->index += len;
    42ee:	8048      	strh	r0, [r1, #2]
		size -= len;
    42f0:	1aa4      	subs	r4, r4, r2
		while (len-- > 0) *dest++ = *src++;
    42f2:	4293      	cmp	r3, r2
    42f4:	d004      	beq.n	4300 <usb_serial_write+0x94>
    42f6:	5cf8      	ldrb	r0, [r7, r3]
    42f8:	f80c 0003 	strb.w	r0, [ip, r3]
    42fc:	3301      	adds	r3, #1
    42fe:	e7f8      	b.n	42f2 <usb_serial_write+0x86>
    4300:	441f      	add	r7, r3
		if (tx_packet->index >= CDC_TX_SIZE) {
    4302:	884b      	ldrh	r3, [r1, #2]
    4304:	2b3f      	cmp	r3, #63	; 0x3f
    4306:	d906      	bls.n	4316 <usb_serial_write+0xaa>
			tx_packet->len = CDC_TX_SIZE;
    4308:	2340      	movs	r3, #64	; 0x40
    430a:	800b      	strh	r3, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    430c:	2004      	movs	r0, #4
    430e:	f7ff fb79 	bl	3a04 <usb_tx>
			tx_packet = NULL;
    4312:	2300      	movs	r3, #0
    4314:	602b      	str	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    4316:	4b08      	ldr	r3, [pc, #32]	; (4338 <usb_serial_write+0xcc>)
    4318:	2205      	movs	r2, #5
    431a:	701a      	strb	r2, [r3, #0]
    431c:	e7ad      	b.n	427a <usb_serial_write+0xe>
	}
	tx_noautoflush = 0;
    431e:	7034      	strb	r4, [r6, #0]
	return 0;
    4320:	4620      	mov	r0, r4
}
    4322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4326:	bf00      	nop
    4328:	1fff9419 	.word	0x1fff9419
    432c:	1fff941c 	.word	0x1fff941c
    4330:	1fff9403 	.word	0x1fff9403
    4334:	1fff9420 	.word	0x1fff9420
    4338:	1fff9418 	.word	0x1fff9418

0000433c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    433c:	b507      	push	{r0, r1, r2, lr}
    433e:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    4340:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4342:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    4346:	4618      	mov	r0, r3
    4348:	f7ff ff90 	bl	426c <usb_serial_write>
}
    434c:	b003      	add	sp, #12
    434e:	f85d fb04 	ldr.w	pc, [sp], #4
    4352:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00004354 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return 0;
}

void usb_serial_flush_output(void)
{
    4354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!usb_configuration) return;
    4358:	4b11      	ldr	r3, [pc, #68]	; (43a0 <usb_serial_flush_output+0x4c>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b1f3      	cbz	r3, 439c <usb_serial_flush_output+0x48>
	tx_noautoflush = 1;
	if (tx_packet) {
    435e:	4e11      	ldr	r6, [pc, #68]	; (43a4 <usb_serial_flush_output+0x50>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    4360:	4b11      	ldr	r3, [pc, #68]	; (43a8 <usb_serial_flush_output+0x54>)
	if (tx_packet) {
    4362:	6834      	ldr	r4, [r6, #0]
    4364:	4d11      	ldr	r5, [pc, #68]	; (43ac <usb_serial_flush_output+0x58>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    4366:	2701      	movs	r7, #1
    4368:	701f      	strb	r7, [r3, #0]
    436a:	4698      	mov	r8, r3
	if (tx_packet) {
    436c:	b14c      	cbz	r4, 4382 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    436e:	2700      	movs	r7, #0
		tx_packet->len = tx_packet->index;
    4370:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    4372:	702f      	strb	r7, [r5, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4374:	2004      	movs	r0, #4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    4376:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4378:	4621      	mov	r1, r4
    437a:	f7ff fb43 	bl	3a04 <usb_tx>
		tx_packet = NULL;
    437e:	6037      	str	r7, [r6, #0]
    4380:	e009      	b.n	4396 <usb_serial_flush_output+0x42>
	} else {
		usb_packet_t *tx = usb_malloc();
    4382:	f7ff fee3 	bl	414c <usb_malloc>
		if (tx) {
    4386:	4601      	mov	r1, r0
    4388:	b120      	cbz	r0, 4394 <usb_serial_flush_output+0x40>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    438a:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    438c:	702c      	strb	r4, [r5, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    438e:	f7ff fb39 	bl	3a04 <usb_tx>
    4392:	e000      	b.n	4396 <usb_serial_flush_output+0x42>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    4394:	702f      	strb	r7, [r5, #0]
		}
	}
	tx_noautoflush = 0;
    4396:	2300      	movs	r3, #0
    4398:	f888 3000 	strb.w	r3, [r8]
    439c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43a0:	1fff9403 	.word	0x1fff9403
    43a4:	1fff941c 	.word	0x1fff941c
    43a8:	1fff9419 	.word	0x1fff9419
    43ac:	1fff9418 	.word	0x1fff9418

000043b0 <usb_serial_flush_callback>:
}

void usb_serial_flush_callback(void)
{
    43b0:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    43b2:	4b0e      	ldr	r3, [pc, #56]	; (43ec <usb_serial_flush_callback+0x3c>)
    43b4:	781b      	ldrb	r3, [r3, #0]
    43b6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    43ba:	b9ab      	cbnz	r3, 43e8 <usb_serial_flush_callback+0x38>
	if (tx_packet) {
    43bc:	4c0c      	ldr	r4, [pc, #48]	; (43f0 <usb_serial_flush_callback+0x40>)
    43be:	6821      	ldr	r1, [r4, #0]
    43c0:	b131      	cbz	r1, 43d0 <usb_serial_flush_callback+0x20>
		tx_packet->len = tx_packet->index;
    43c2:	884b      	ldrh	r3, [r1, #2]
    43c4:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    43c6:	2004      	movs	r0, #4
    43c8:	f7ff fb1c 	bl	3a04 <usb_tx>
		tx_packet = NULL;
    43cc:	6025      	str	r5, [r4, #0]
    43ce:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    43d0:	f7ff febc 	bl	414c <usb_malloc>
		if (tx) {
    43d4:	4601      	mov	r1, r0
    43d6:	b120      	cbz	r0, 43e2 <usb_serial_flush_callback+0x32>
			usb_tx(CDC_TX_ENDPOINT, tx);
    43d8:	2004      	movs	r0, #4
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    43da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    43de:	f7ff bb11 	b.w	3a04 <usb_tx>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    43e2:	4b04      	ldr	r3, [pc, #16]	; (43f4 <usb_serial_flush_callback+0x44>)
    43e4:	2201      	movs	r2, #1
    43e6:	701a      	strb	r2, [r3, #0]
    43e8:	bd38      	pop	{r3, r4, r5, pc}
    43ea:	bf00      	nop
    43ec:	1fff9419 	.word	0x1fff9419
    43f0:	1fff941c 	.word	0x1fff941c
    43f4:	1fff9418 	.word	0x1fff9418

000043f8 <_Z10randomSeedm>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    43f8:	b108      	cbz	r0, 43fe <_Z10randomSeedm+0x6>
    43fa:	4b01      	ldr	r3, [pc, #4]	; (4400 <_Z10randomSeedm+0x8>)
    43fc:	6018      	str	r0, [r3, #0]
    43fe:	4770      	bx	lr
    4400:	1fff942c 	.word	0x1fff942c

00004404 <_Z6randomv>:
uint32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    4404:	4a0c      	ldr	r2, [pc, #48]	; (4438 <_Z6randomv+0x34>)
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
    4406:	480d      	ldr	r0, [pc, #52]	; (443c <_Z6randomv+0x38>)
uint32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    4408:	6813      	ldr	r3, [r2, #0]
    440a:	4611      	mov	r1, r2
	if (x == 0) x = 123459876;
    440c:	4a0c      	ldr	r2, [pc, #48]	; (4440 <_Z6randomv+0x3c>)
    440e:	2b00      	cmp	r3, #0
    4410:	bf08      	it	eq
    4412:	4613      	moveq	r3, r2
	hi = x / 127773;
	lo = x % 127773;
    4414:	fb93 f2f0 	sdiv	r2, r3, r0
    4418:	fb00 3312 	mls	r3, r0, r2, r3
	x = 16807 * lo - 2836 * hi;
    441c:	4809      	ldr	r0, [pc, #36]	; (4444 <_Z6randomv+0x40>)
    441e:	4342      	muls	r2, r0
    4420:	f244 10a7 	movw	r0, #16807	; 0x41a7
    4424:	fb00 2003 	mla	r0, r0, r3, r2
	if (x < 0) x += 0x7FFFFFFF;
    4428:	2800      	cmp	r0, #0
    442a:	bfbc      	itt	lt
    442c:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
    4430:	f100 30ff 	addlt.w	r0, r0, #4294967295	; 0xffffffff
	seed = x;
    4434:	6008      	str	r0, [r1, #0]
	return x;
}
    4436:	4770      	bx	lr
    4438:	1fff942c 	.word	0x1fff942c
    443c:	0001f31d 	.word	0x0001f31d
    4440:	075bd924 	.word	0x075bd924
    4444:	fffff4ec 	.word	0xfffff4ec

00004448 <_Z3maplllll>:
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    4448:	b510      	push	{r4, lr}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    444a:	9c02      	ldr	r4, [sp, #8]
    444c:	1a40      	subs	r0, r0, r1
    444e:	1ae4      	subs	r4, r4, r3
    4450:	4344      	muls	r4, r0
    4452:	1a52      	subs	r2, r2, r1
    4454:	fb94 f0f2 	sdiv	r0, r4, r2
}
    4458:	4418      	add	r0, r3
    445a:	bd10      	pop	{r4, pc}

0000445c <yield>:
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

void yield(void) __attribute__ ((weak));
void yield(void) {};
    445c:	4770      	bx	lr
    445e:	ffff 4603 	vcvt.f<illegal width 64>.s<illegal width 64>	d20, d3

00004460 <__aeabi_atexit>:
    4460:	4603      	mov	r3, r0
    4462:	4608      	mov	r0, r1
    4464:	4619      	mov	r1, r3
    4466:	f009 b9c5 	b.w	d7f4 <__cxa_atexit>
    446a:	bf00      	nop

0000446c <_ZdlPv>:
    446c:	b108      	cbz	r0, 4472 <_ZdlPv+0x6>
    446e:	f009 bc0b 	b.w	dc88 <free>
    4472:	4770      	bx	lr

00004474 <_Znwj>:
    4474:	b538      	push	{r3, r4, r5, lr}
    4476:	2800      	cmp	r0, #0
    4478:	bf14      	ite	ne
    447a:	4604      	movne	r4, r0
    447c:	2401      	moveq	r4, #1
    447e:	4620      	mov	r0, r4
    4480:	f009 fbfa 	bl	dc78 <malloc>
    4484:	b948      	cbnz	r0, 449a <_Znwj+0x26>
    4486:	4d0d      	ldr	r5, [pc, #52]	; (44bc <_Znwj+0x48>)
    4488:	682b      	ldr	r3, [r5, #0]
    448a:	b13b      	cbz	r3, 449c <_Znwj+0x28>
    448c:	4798      	blx	r3
    448e:	4620      	mov	r0, r4
    4490:	f009 fbf2 	bl	dc78 <malloc>
    4494:	2800      	cmp	r0, #0
    4496:	d0f7      	beq.n	4488 <_Znwj+0x14>
    4498:	bd38      	pop	{r3, r4, r5, pc}
    449a:	bd38      	pop	{r3, r4, r5, pc}
    449c:	2004      	movs	r0, #4
    449e:	f000 f831 	bl	4504 <__cxa_allocate_exception>
    44a2:	4b07      	ldr	r3, [pc, #28]	; (44c0 <_Znwj+0x4c>)
    44a4:	6003      	str	r3, [r0, #0]
    44a6:	4907      	ldr	r1, [pc, #28]	; (44c4 <_Znwj+0x50>)
    44a8:	4a07      	ldr	r2, [pc, #28]	; (44c8 <_Znwj+0x54>)
    44aa:	f000 fdbf 	bl	502c <__cxa_throw>
    44ae:	3101      	adds	r1, #1
    44b0:	d001      	beq.n	44b6 <_Znwj+0x42>
    44b2:	f000 f86d 	bl	4590 <__cxa_end_cleanup>
    44b6:	f000 f95f 	bl	4778 <__cxa_call_unexpected>
    44ba:	bf00      	nop
    44bc:	1fff9c44 	.word	0x1fff9c44
    44c0:	00012ed0 	.word	0x00012ed0
    44c4:	00012ee0 	.word	0x00012ee0
    44c8:	000044d5 	.word	0x000044d5

000044cc <_ZNKSt9bad_alloc4whatEv>:
    44cc:	4800      	ldr	r0, [pc, #0]	; (44d0 <_ZNKSt9bad_alloc4whatEv+0x4>)
    44ce:	4770      	bx	lr
    44d0:	00012eec 	.word	0x00012eec

000044d4 <_ZNSt9bad_allocD1Ev>:
    44d4:	b510      	push	{r4, lr}
    44d6:	4b03      	ldr	r3, [pc, #12]	; (44e4 <_ZNSt9bad_allocD1Ev+0x10>)
    44d8:	6003      	str	r3, [r0, #0]
    44da:	4604      	mov	r4, r0
    44dc:	f000 fa44 	bl	4968 <_ZNSt9exceptionD1Ev>
    44e0:	4620      	mov	r0, r4
    44e2:	bd10      	pop	{r4, pc}
    44e4:	00012ed0 	.word	0x00012ed0

000044e8 <_ZNSt9bad_allocD0Ev>:
    44e8:	b510      	push	{r4, lr}
    44ea:	4b05      	ldr	r3, [pc, #20]	; (4500 <_ZNSt9bad_allocD0Ev+0x18>)
    44ec:	6003      	str	r3, [r0, #0]
    44ee:	4604      	mov	r4, r0
    44f0:	f000 fa3a 	bl	4968 <_ZNSt9exceptionD1Ev>
    44f4:	4620      	mov	r0, r4
    44f6:	f7ff ffb9 	bl	446c <_ZdlPv>
    44fa:	4620      	mov	r0, r4
    44fc:	bd10      	pop	{r4, pc}
    44fe:	bf00      	nop
    4500:	00012ed0 	.word	0x00012ed0

00004504 <__cxa_allocate_exception>:
    4504:	b538      	push	{r3, r4, r5, lr}
    4506:	f100 0580 	add.w	r5, r0, #128	; 0x80
    450a:	4628      	mov	r0, r5
    450c:	f009 fbb4 	bl	dc78 <malloc>
    4510:	4604      	mov	r4, r0
    4512:	b138      	cbz	r0, 4524 <__cxa_allocate_exception+0x20>
    4514:	4620      	mov	r0, r4
    4516:	2100      	movs	r1, #0
    4518:	2280      	movs	r2, #128	; 0x80
    451a:	f009 ffcf 	bl	e4bc <memset>
    451e:	f104 0080 	add.w	r0, r4, #128	; 0x80
    4522:	bd38      	pop	{r3, r4, r5, pc}
    4524:	4a0b      	ldr	r2, [pc, #44]	; (4554 <__cxa_allocate_exception+0x50>)
    4526:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    452a:	6811      	ldr	r1, [r2, #0]
    452c:	d807      	bhi.n	453e <__cxa_allocate_exception+0x3a>
    452e:	460b      	mov	r3, r1
    4530:	07d8      	lsls	r0, r3, #31
    4532:	d506      	bpl.n	4542 <__cxa_allocate_exception+0x3e>
    4534:	3401      	adds	r4, #1
    4536:	2c04      	cmp	r4, #4
    4538:	ea4f 0353 	mov.w	r3, r3, lsr #1
    453c:	d1f8      	bne.n	4530 <__cxa_allocate_exception+0x2c>
    453e:	f000 fd3f 	bl	4fc0 <_ZSt9terminatev>
    4542:	2001      	movs	r0, #1
    4544:	40a0      	lsls	r0, r4
    4546:	4b04      	ldr	r3, [pc, #16]	; (4558 <__cxa_allocate_exception+0x54>)
    4548:	4301      	orrs	r1, r0
    454a:	6011      	str	r1, [r2, #0]
    454c:	eb03 2444 	add.w	r4, r3, r4, lsl #9
    4550:	e7e0      	b.n	4514 <__cxa_allocate_exception+0x10>
    4552:	bf00      	nop
    4554:	1fff9430 	.word	0x1fff9430
    4558:	1fff9438 	.word	0x1fff9438

0000455c <__cxa_free_exception>:
    455c:	4b0a      	ldr	r3, [pc, #40]	; (4588 <__cxa_free_exception+0x2c>)
    455e:	4298      	cmp	r0, r3
    4560:	d303      	bcc.n	456a <__cxa_free_exception+0xe>
    4562:	f503 6200 	add.w	r2, r3, #2048	; 0x800
    4566:	4290      	cmp	r0, r2
    4568:	d302      	bcc.n	4570 <__cxa_free_exception+0x14>
    456a:	3880      	subs	r0, #128	; 0x80
    456c:	f009 bb8c 	b.w	dc88 <free>
    4570:	4a06      	ldr	r2, [pc, #24]	; (458c <__cxa_free_exception+0x30>)
    4572:	1ac3      	subs	r3, r0, r3
    4574:	6811      	ldr	r1, [r2, #0]
    4576:	0a5b      	lsrs	r3, r3, #9
    4578:	2001      	movs	r0, #1
    457a:	fa00 f303 	lsl.w	r3, r0, r3
    457e:	ea21 0103 	bic.w	r1, r1, r3
    4582:	6011      	str	r1, [r2, #0]
    4584:	4770      	bx	lr
    4586:	bf00      	nop
    4588:	1fff9438 	.word	0x1fff9438
    458c:	1fff9430 	.word	0x1fff9430

00004590 <__cxa_end_cleanup>:
    4590:	b41e      	push	{r1, r2, r3, r4}
    4592:	f000 f88b 	bl	46ac <__gnu_end_cleanup>
    4596:	bc1e      	pop	{r1, r2, r3, r4}
    4598:	f008 ff3e 	bl	d418 <_Unwind_Resume>

0000459c <__cxa_type_match>:
    459c:	b5f0      	push	{r4, r5, r6, r7, lr}
    459e:	7802      	ldrb	r2, [r0, #0]
    45a0:	2a47      	cmp	r2, #71	; 0x47
    45a2:	b083      	sub	sp, #12
    45a4:	460d      	mov	r5, r1
    45a6:	461e      	mov	r6, r3
    45a8:	d01a      	beq.n	45e0 <__cxa_type_match+0x44>
    45aa:	2300      	movs	r3, #0
    45ac:	4c24      	ldr	r4, [pc, #144]	; (4640 <__cxa_type_match+0xa4>)
    45ae:	9301      	str	r3, [sp, #4]
    45b0:	6822      	ldr	r2, [r4, #0]
    45b2:	4620      	mov	r0, r4
    45b4:	6893      	ldr	r3, [r2, #8]
    45b6:	4798      	blx	r3
    45b8:	b180      	cbz	r0, 45dc <__cxa_type_match+0x40>
    45ba:	9b01      	ldr	r3, [sp, #4]
    45bc:	681b      	ldr	r3, [r3, #0]
    45be:	9301      	str	r3, [sp, #4]
    45c0:	2702      	movs	r7, #2
    45c2:	682a      	ldr	r2, [r5, #0]
    45c4:	4621      	mov	r1, r4
    45c6:	4628      	mov	r0, r5
    45c8:	6914      	ldr	r4, [r2, #16]
    45ca:	2301      	movs	r3, #1
    45cc:	aa01      	add	r2, sp, #4
    45ce:	47a0      	blx	r4
    45d0:	b110      	cbz	r0, 45d8 <__cxa_type_match+0x3c>
    45d2:	9b01      	ldr	r3, [sp, #4]
    45d4:	6033      	str	r3, [r6, #0]
    45d6:	4638      	mov	r0, r7
    45d8:	b003      	add	sp, #12
    45da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45dc:	2701      	movs	r7, #1
    45de:	e7f0      	b.n	45c2 <__cxa_type_match+0x26>
    45e0:	7843      	ldrb	r3, [r0, #1]
    45e2:	2b4e      	cmp	r3, #78	; 0x4e
    45e4:	d1e1      	bne.n	45aa <__cxa_type_match+0xe>
    45e6:	7883      	ldrb	r3, [r0, #2]
    45e8:	2b55      	cmp	r3, #85	; 0x55
    45ea:	d1de      	bne.n	45aa <__cxa_type_match+0xe>
    45ec:	78c3      	ldrb	r3, [r0, #3]
    45ee:	2b43      	cmp	r3, #67	; 0x43
    45f0:	d1db      	bne.n	45aa <__cxa_type_match+0xe>
    45f2:	7903      	ldrb	r3, [r0, #4]
    45f4:	2b46      	cmp	r3, #70	; 0x46
    45f6:	d016      	beq.n	4626 <__cxa_type_match+0x8a>
    45f8:	7903      	ldrb	r3, [r0, #4]
    45fa:	2b43      	cmp	r3, #67	; 0x43
    45fc:	d1d5      	bne.n	45aa <__cxa_type_match+0xe>
    45fe:	7943      	ldrb	r3, [r0, #5]
    4600:	2b2b      	cmp	r3, #43	; 0x2b
    4602:	d1d2      	bne.n	45aa <__cxa_type_match+0xe>
    4604:	7983      	ldrb	r3, [r0, #6]
    4606:	2b2b      	cmp	r3, #43	; 0x2b
    4608:	d1cf      	bne.n	45aa <__cxa_type_match+0xe>
    460a:	79c3      	ldrb	r3, [r0, #7]
    460c:	2b01      	cmp	r3, #1
    460e:	d8cc      	bhi.n	45aa <__cxa_type_match+0xe>
    4610:	d004      	beq.n	461c <__cxa_type_match+0x80>
    4612:	f850 4c20 	ldr.w	r4, [r0, #-32]
    4616:	3058      	adds	r0, #88	; 0x58
    4618:	9001      	str	r0, [sp, #4]
    461a:	e7c9      	b.n	45b0 <__cxa_type_match+0x14>
    461c:	f850 0c20 	ldr.w	r0, [r0, #-32]
    4620:	f850 4c78 	ldr.w	r4, [r0, #-120]
    4624:	e7f8      	b.n	4618 <__cxa_type_match+0x7c>
    4626:	7943      	ldrb	r3, [r0, #5]
    4628:	2b4f      	cmp	r3, #79	; 0x4f
    462a:	d1e5      	bne.n	45f8 <__cxa_type_match+0x5c>
    462c:	7983      	ldrb	r3, [r0, #6]
    462e:	2b52      	cmp	r3, #82	; 0x52
    4630:	d1e2      	bne.n	45f8 <__cxa_type_match+0x5c>
    4632:	79c3      	ldrb	r3, [r0, #7]
    4634:	2b00      	cmp	r3, #0
    4636:	d1df      	bne.n	45f8 <__cxa_type_match+0x5c>
    4638:	9301      	str	r3, [sp, #4]
    463a:	4c02      	ldr	r4, [pc, #8]	; (4644 <__cxa_type_match+0xa8>)
    463c:	e7b8      	b.n	45b0 <__cxa_type_match+0x14>
    463e:	bf00      	nop
    4640:	00012f94 	.word	0x00012f94
    4644:	00012f28 	.word	0x00012f28

00004648 <__cxa_begin_cleanup>:
    4648:	b510      	push	{r4, lr}
    464a:	4604      	mov	r4, r0
    464c:	f000 f9b8 	bl	49c0 <__cxa_get_globals>
    4650:	7823      	ldrb	r3, [r4, #0]
    4652:	2b47      	cmp	r3, #71	; 0x47
    4654:	f1a4 0220 	sub.w	r2, r4, #32
    4658:	d004      	beq.n	4664 <__cxa_begin_cleanup+0x1c>
    465a:	6883      	ldr	r3, [r0, #8]
    465c:	bb23      	cbnz	r3, 46a8 <__cxa_begin_cleanup+0x60>
    465e:	6082      	str	r2, [r0, #8]
    4660:	2001      	movs	r0, #1
    4662:	bd10      	pop	{r4, pc}
    4664:	7863      	ldrb	r3, [r4, #1]
    4666:	2b4e      	cmp	r3, #78	; 0x4e
    4668:	d1f7      	bne.n	465a <__cxa_begin_cleanup+0x12>
    466a:	78a3      	ldrb	r3, [r4, #2]
    466c:	2b55      	cmp	r3, #85	; 0x55
    466e:	d1f4      	bne.n	465a <__cxa_begin_cleanup+0x12>
    4670:	78e3      	ldrb	r3, [r4, #3]
    4672:	2b43      	cmp	r3, #67	; 0x43
    4674:	d1f1      	bne.n	465a <__cxa_begin_cleanup+0x12>
    4676:	7923      	ldrb	r3, [r4, #4]
    4678:	2b43      	cmp	r3, #67	; 0x43
    467a:	d1ee      	bne.n	465a <__cxa_begin_cleanup+0x12>
    467c:	7963      	ldrb	r3, [r4, #5]
    467e:	2b2b      	cmp	r3, #43	; 0x2b
    4680:	d1eb      	bne.n	465a <__cxa_begin_cleanup+0x12>
    4682:	79a3      	ldrb	r3, [r4, #6]
    4684:	2b2b      	cmp	r3, #43	; 0x2b
    4686:	d1e8      	bne.n	465a <__cxa_begin_cleanup+0x12>
    4688:	79e3      	ldrb	r3, [r4, #7]
    468a:	2b01      	cmp	r3, #1
    468c:	d8e5      	bhi.n	465a <__cxa_begin_cleanup+0x12>
    468e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4692:	3301      	adds	r3, #1
    4694:	2b01      	cmp	r3, #1
    4696:	f844 3c04 	str.w	r3, [r4, #-4]
    469a:	d1e1      	bne.n	4660 <__cxa_begin_cleanup+0x18>
    469c:	6883      	ldr	r3, [r0, #8]
    469e:	f844 3c08 	str.w	r3, [r4, #-8]
    46a2:	6082      	str	r2, [r0, #8]
    46a4:	2001      	movs	r0, #1
    46a6:	bd10      	pop	{r4, pc}
    46a8:	f000 fc8a 	bl	4fc0 <_ZSt9terminatev>

000046ac <__gnu_end_cleanup>:
    46ac:	b508      	push	{r3, lr}
    46ae:	f000 f987 	bl	49c0 <__cxa_get_globals>
    46b2:	6883      	ldr	r3, [r0, #8]
    46b4:	b383      	cbz	r3, 4718 <__gnu_end_cleanup+0x6c>
    46b6:	f893 2020 	ldrb.w	r2, [r3, #32]
    46ba:	2a47      	cmp	r2, #71	; 0x47
    46bc:	d004      	beq.n	46c8 <__gnu_end_cleanup+0x1c>
    46be:	2200      	movs	r2, #0
    46c0:	6082      	str	r2, [r0, #8]
    46c2:	f103 0020 	add.w	r0, r3, #32
    46c6:	bd08      	pop	{r3, pc}
    46c8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    46cc:	2a4e      	cmp	r2, #78	; 0x4e
    46ce:	d1f6      	bne.n	46be <__gnu_end_cleanup+0x12>
    46d0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    46d4:	2a55      	cmp	r2, #85	; 0x55
    46d6:	d1f2      	bne.n	46be <__gnu_end_cleanup+0x12>
    46d8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    46dc:	2a43      	cmp	r2, #67	; 0x43
    46de:	d1ee      	bne.n	46be <__gnu_end_cleanup+0x12>
    46e0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    46e4:	2a43      	cmp	r2, #67	; 0x43
    46e6:	d1ea      	bne.n	46be <__gnu_end_cleanup+0x12>
    46e8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    46ec:	2a2b      	cmp	r2, #43	; 0x2b
    46ee:	d1e6      	bne.n	46be <__gnu_end_cleanup+0x12>
    46f0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    46f4:	2a2b      	cmp	r2, #43	; 0x2b
    46f6:	d1e2      	bne.n	46be <__gnu_end_cleanup+0x12>
    46f8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    46fc:	2a01      	cmp	r2, #1
    46fe:	d8de      	bhi.n	46be <__gnu_end_cleanup+0x12>
    4700:	69da      	ldr	r2, [r3, #28]
    4702:	3a01      	subs	r2, #1
    4704:	61da      	str	r2, [r3, #28]
    4706:	2a00      	cmp	r2, #0
    4708:	d1db      	bne.n	46c2 <__gnu_end_cleanup+0x16>
    470a:	699a      	ldr	r2, [r3, #24]
    470c:	6082      	str	r2, [r0, #8]
    470e:	2200      	movs	r2, #0
    4710:	619a      	str	r2, [r3, #24]
    4712:	f103 0020 	add.w	r0, r3, #32
    4716:	bd08      	pop	{r3, pc}
    4718:	f000 fc52 	bl	4fc0 <_ZSt9terminatev>

0000471c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
    471c:	7803      	ldrb	r3, [r0, #0]
    471e:	2b47      	cmp	r3, #71	; 0x47
    4720:	d001      	beq.n	4726 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
    4722:	2000      	movs	r0, #0
    4724:	4770      	bx	lr
    4726:	7843      	ldrb	r3, [r0, #1]
    4728:	2b4e      	cmp	r3, #78	; 0x4e
    472a:	d1fa      	bne.n	4722 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    472c:	7883      	ldrb	r3, [r0, #2]
    472e:	2b55      	cmp	r3, #85	; 0x55
    4730:	d1f7      	bne.n	4722 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    4732:	78c3      	ldrb	r3, [r0, #3]
    4734:	2b43      	cmp	r3, #67	; 0x43
    4736:	d1f4      	bne.n	4722 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    4738:	7903      	ldrb	r3, [r0, #4]
    473a:	2b43      	cmp	r3, #67	; 0x43
    473c:	d1f1      	bne.n	4722 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    473e:	7943      	ldrb	r3, [r0, #5]
    4740:	2b2b      	cmp	r3, #43	; 0x2b
    4742:	d1ee      	bne.n	4722 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    4744:	7983      	ldrb	r3, [r0, #6]
    4746:	2b2b      	cmp	r3, #43	; 0x2b
    4748:	d1eb      	bne.n	4722 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    474a:	79c0      	ldrb	r0, [r0, #7]
    474c:	2801      	cmp	r0, #1
    474e:	bf8c      	ite	hi
    4750:	2000      	movhi	r0, #0
    4752:	2001      	movls	r0, #1
    4754:	4770      	bx	lr
    4756:	bf00      	nop

00004758 <__cxa_call_terminate>:
    4758:	b510      	push	{r4, lr}
    475a:	4604      	mov	r4, r0
    475c:	b128      	cbz	r0, 476a <__cxa_call_terminate+0x12>
    475e:	f000 f877 	bl	4850 <__cxa_begin_catch>
    4762:	4620      	mov	r0, r4
    4764:	f7ff ffda 	bl	471c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    4768:	b908      	cbnz	r0, 476e <__cxa_call_terminate+0x16>
    476a:	f000 fc29 	bl	4fc0 <_ZSt9terminatev>
    476e:	f854 0c14 	ldr.w	r0, [r4, #-20]
    4772:	f000 fc11 	bl	4f98 <_ZN10__cxxabiv111__terminateEPFvvE>
    4776:	bf00      	nop

00004778 <__cxa_call_unexpected>:
    4778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    477c:	b083      	sub	sp, #12
    477e:	4604      	mov	r4, r0
    4780:	f7ff ffcc 	bl	471c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    4784:	b170      	cbz	r0, 47a4 <__cxa_call_unexpected+0x2c>
    4786:	f854 5c18 	ldr.w	r5, [r4, #-24]
    478a:	f854 6c14 	ldr.w	r6, [r4, #-20]
    478e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    4790:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
    4794:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
    4798:	4620      	mov	r0, r4
    479a:	f000 f859 	bl	4850 <__cxa_begin_catch>
    479e:	4628      	mov	r0, r5
    47a0:	f000 fc16 	bl	4fd0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    47a4:	4620      	mov	r0, r4
    47a6:	f000 f853 	bl	4850 <__cxa_begin_catch>
    47aa:	f000 fc15 	bl	4fd8 <_ZSt10unexpectedv>
    47ae:	f000 f84f 	bl	4850 <__cxa_begin_catch>
    47b2:	f000 fc05 	bl	4fc0 <_ZSt9terminatev>
    47b6:	f000 f84b 	bl	4850 <__cxa_begin_catch>
    47ba:	f000 f8fd 	bl	49b8 <__cxa_get_globals_fast>
    47be:	6803      	ldr	r3, [r0, #0]
    47c0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    47c4:	2a01      	cmp	r2, #1
    47c6:	d030      	beq.n	482a <__cxa_call_unexpected+0xb2>
    47c8:	f103 0278 	add.w	r2, r3, #120	; 0x78
    47cc:	2400      	movs	r4, #0
    47ce:	9200      	str	r2, [sp, #0]
    47d0:	f028 0803 	bic.w	r8, r8, #3
    47d4:	f103 0b20 	add.w	fp, r3, #32
    47d8:	46a2      	mov	sl, r4
    47da:	45ba      	cmp	sl, r7
    47dc:	da1b      	bge.n	4816 <__cxa_call_unexpected+0x9e>
    47de:	f8d9 5000 	ldr.w	r5, [r9]
    47e2:	b105      	cbz	r5, 47e6 <__cxa_call_unexpected+0x6e>
    47e4:	444d      	add	r5, r9
    47e6:	4658      	mov	r0, fp
    47e8:	4629      	mov	r1, r5
    47ea:	2200      	movs	r2, #0
    47ec:	466b      	mov	r3, sp
    47ee:	f7ff fed5 	bl	459c <__cxa_type_match>
    47f2:	b9f8      	cbnz	r0, 4834 <__cxa_call_unexpected+0xbc>
    47f4:	682b      	ldr	r3, [r5, #0]
    47f6:	4913      	ldr	r1, [pc, #76]	; (4844 <__cxa_call_unexpected+0xcc>)
    47f8:	f8d3 c010 	ldr.w	ip, [r3, #16]
    47fc:	aa02      	add	r2, sp, #8
    47fe:	2301      	movs	r3, #1
    4800:	f842 0d04 	str.w	r0, [r2, #-4]!
    4804:	4628      	mov	r0, r5
    4806:	47e0      	blx	ip
    4808:	2800      	cmp	r0, #0
    480a:	bf18      	it	ne
    480c:	2401      	movne	r4, #1
    480e:	f10a 0a01 	add.w	sl, sl, #1
    4812:	44c1      	add	r9, r8
    4814:	e7e1      	b.n	47da <__cxa_call_unexpected+0x62>
    4816:	b154      	cbz	r4, 482e <__cxa_call_unexpected+0xb6>
    4818:	2004      	movs	r0, #4
    481a:	f7ff fe73 	bl	4504 <__cxa_allocate_exception>
    481e:	4b0a      	ldr	r3, [pc, #40]	; (4848 <__cxa_call_unexpected+0xd0>)
    4820:	6003      	str	r3, [r0, #0]
    4822:	4908      	ldr	r1, [pc, #32]	; (4844 <__cxa_call_unexpected+0xcc>)
    4824:	4a09      	ldr	r2, [pc, #36]	; (484c <__cxa_call_unexpected+0xd4>)
    4826:	f000 fc01 	bl	502c <__cxa_throw>
    482a:	681a      	ldr	r2, [r3, #0]
    482c:	e7ce      	b.n	47cc <__cxa_call_unexpected+0x54>
    482e:	4630      	mov	r0, r6
    4830:	f000 fbb2 	bl	4f98 <_ZN10__cxxabiv111__terminateEPFvvE>
    4834:	f000 fc42 	bl	50bc <__cxa_rethrow>
    4838:	f000 f850 	bl	48dc <__cxa_end_catch>
    483c:	f000 f84e 	bl	48dc <__cxa_end_catch>
    4840:	f7ff fea6 	bl	4590 <__cxa_end_cleanup>
    4844:	00012fe8 	.word	0x00012fe8
    4848:	00012fa8 	.word	0x00012fa8
    484c:	00004975 	.word	0x00004975

00004850 <__cxa_begin_catch>:
    4850:	b538      	push	{r3, r4, r5, lr}
    4852:	4604      	mov	r4, r0
    4854:	f000 f8b4 	bl	49c0 <__cxa_get_globals>
    4858:	7821      	ldrb	r1, [r4, #0]
    485a:	6803      	ldr	r3, [r0, #0]
    485c:	2947      	cmp	r1, #71	; 0x47
    485e:	f1a4 0220 	sub.w	r2, r4, #32
    4862:	d005      	beq.n	4870 <__cxa_begin_catch+0x20>
    4864:	2b00      	cmp	r3, #0
    4866:	d131      	bne.n	48cc <__cxa_begin_catch+0x7c>
    4868:	461c      	mov	r4, r3
    486a:	6002      	str	r2, [r0, #0]
    486c:	4620      	mov	r0, r4
    486e:	bd38      	pop	{r3, r4, r5, pc}
    4870:	7861      	ldrb	r1, [r4, #1]
    4872:	294e      	cmp	r1, #78	; 0x4e
    4874:	d1f6      	bne.n	4864 <__cxa_begin_catch+0x14>
    4876:	78a1      	ldrb	r1, [r4, #2]
    4878:	2955      	cmp	r1, #85	; 0x55
    487a:	d1f3      	bne.n	4864 <__cxa_begin_catch+0x14>
    487c:	78e1      	ldrb	r1, [r4, #3]
    487e:	2943      	cmp	r1, #67	; 0x43
    4880:	d1f0      	bne.n	4864 <__cxa_begin_catch+0x14>
    4882:	7921      	ldrb	r1, [r4, #4]
    4884:	2943      	cmp	r1, #67	; 0x43
    4886:	d1ed      	bne.n	4864 <__cxa_begin_catch+0x14>
    4888:	7961      	ldrb	r1, [r4, #5]
    488a:	292b      	cmp	r1, #43	; 0x2b
    488c:	d1ea      	bne.n	4864 <__cxa_begin_catch+0x14>
    488e:	79a1      	ldrb	r1, [r4, #6]
    4890:	292b      	cmp	r1, #43	; 0x2b
    4892:	d1e7      	bne.n	4864 <__cxa_begin_catch+0x14>
    4894:	79e1      	ldrb	r1, [r4, #7]
    4896:	2901      	cmp	r1, #1
    4898:	d8e4      	bhi.n	4864 <__cxa_begin_catch+0x14>
    489a:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    489e:	2d00      	cmp	r5, #0
    48a0:	db11      	blt.n	48c6 <__cxa_begin_catch+0x76>
    48a2:	3501      	adds	r5, #1
    48a4:	6841      	ldr	r1, [r0, #4]
    48a6:	f844 5c0c 	str.w	r5, [r4, #-12]
    48aa:	429a      	cmp	r2, r3
    48ac:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    48b0:	6041      	str	r1, [r0, #4]
    48b2:	bf1c      	itt	ne
    48b4:	f844 3c10 	strne.w	r3, [r4, #-16]
    48b8:	6002      	strne	r2, [r0, #0]
    48ba:	4620      	mov	r0, r4
    48bc:	6a64      	ldr	r4, [r4, #36]	; 0x24
    48be:	f008 f9e7 	bl	cc90 <_Unwind_Complete>
    48c2:	4620      	mov	r0, r4
    48c4:	bd38      	pop	{r3, r4, r5, pc}
    48c6:	f1c5 0501 	rsb	r5, r5, #1
    48ca:	e7eb      	b.n	48a4 <__cxa_begin_catch+0x54>
    48cc:	f000 fb78 	bl	4fc0 <_ZSt9terminatev>
    48d0:	3101      	adds	r1, #1
    48d2:	d001      	beq.n	48d8 <__cxa_begin_catch+0x88>
    48d4:	f7ff fe5c 	bl	4590 <__cxa_end_cleanup>
    48d8:	f7ff ff4e 	bl	4778 <__cxa_call_unexpected>

000048dc <__cxa_end_catch>:
    48dc:	b508      	push	{r3, lr}
    48de:	f000 f86b 	bl	49b8 <__cxa_get_globals_fast>
    48e2:	4602      	mov	r2, r0
    48e4:	6800      	ldr	r0, [r0, #0]
    48e6:	2800      	cmp	r0, #0
    48e8:	d03d      	beq.n	4966 <__cxa_end_catch+0x8a>
    48ea:	f890 1020 	ldrb.w	r1, [r0, #32]
    48ee:	2947      	cmp	r1, #71	; 0x47
    48f0:	d006      	beq.n	4900 <__cxa_end_catch+0x24>
    48f2:	2100      	movs	r1, #0
    48f4:	3020      	adds	r0, #32
    48f6:	6011      	str	r1, [r2, #0]
    48f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    48fc:	f008 b9ca 	b.w	cc94 <_Unwind_DeleteException>
    4900:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    4904:	294e      	cmp	r1, #78	; 0x4e
    4906:	d1f4      	bne.n	48f2 <__cxa_end_catch+0x16>
    4908:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    490c:	2955      	cmp	r1, #85	; 0x55
    490e:	d1f0      	bne.n	48f2 <__cxa_end_catch+0x16>
    4910:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
    4914:	2943      	cmp	r1, #67	; 0x43
    4916:	d1ec      	bne.n	48f2 <__cxa_end_catch+0x16>
    4918:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    491c:	2943      	cmp	r1, #67	; 0x43
    491e:	d1e8      	bne.n	48f2 <__cxa_end_catch+0x16>
    4920:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
    4924:	292b      	cmp	r1, #43	; 0x2b
    4926:	d1e4      	bne.n	48f2 <__cxa_end_catch+0x16>
    4928:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
    492c:	292b      	cmp	r1, #43	; 0x2b
    492e:	d1e0      	bne.n	48f2 <__cxa_end_catch+0x16>
    4930:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
    4934:	2901      	cmp	r1, #1
    4936:	d8dc      	bhi.n	48f2 <__cxa_end_catch+0x16>
    4938:	6941      	ldr	r1, [r0, #20]
    493a:	2900      	cmp	r1, #0
    493c:	db05      	blt.n	494a <__cxa_end_catch+0x6e>
    493e:	3901      	subs	r1, #1
    4940:	d008      	beq.n	4954 <__cxa_end_catch+0x78>
    4942:	1c4b      	adds	r3, r1, #1
    4944:	d00d      	beq.n	4962 <__cxa_end_catch+0x86>
    4946:	6141      	str	r1, [r0, #20]
    4948:	bd08      	pop	{r3, pc}
    494a:	3101      	adds	r1, #1
    494c:	d1fb      	bne.n	4946 <__cxa_end_catch+0x6a>
    494e:	6903      	ldr	r3, [r0, #16]
    4950:	6013      	str	r3, [r2, #0]
    4952:	e7f8      	b.n	4946 <__cxa_end_catch+0x6a>
    4954:	6901      	ldr	r1, [r0, #16]
    4956:	6011      	str	r1, [r2, #0]
    4958:	3020      	adds	r0, #32
    495a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    495e:	f008 b999 	b.w	cc94 <_Unwind_DeleteException>
    4962:	f000 fb2d 	bl	4fc0 <_ZSt9terminatev>
    4966:	bd08      	pop	{r3, pc}

00004968 <_ZNSt9exceptionD1Ev>:
    4968:	4b01      	ldr	r3, [pc, #4]	; (4970 <_ZNSt9exceptionD1Ev+0x8>)
    496a:	6003      	str	r3, [r0, #0]
    496c:	4770      	bx	lr
    496e:	bf00      	nop
    4970:	00012f18 	.word	0x00012f18

00004974 <_ZNSt13bad_exceptionD1Ev>:
    4974:	4b01      	ldr	r3, [pc, #4]	; (497c <_ZNSt13bad_exceptionD1Ev+0x8>)
    4976:	6003      	str	r3, [r0, #0]
    4978:	4770      	bx	lr
    497a:	bf00      	nop
    497c:	00012f18 	.word	0x00012f18

00004980 <_ZNKSt9exception4whatEv>:
    4980:	4800      	ldr	r0, [pc, #0]	; (4984 <_ZNKSt9exception4whatEv+0x4>)
    4982:	4770      	bx	lr
    4984:	00012f4c 	.word	0x00012f4c

00004988 <_ZNKSt13bad_exception4whatEv>:
    4988:	4800      	ldr	r0, [pc, #0]	; (498c <_ZNKSt13bad_exception4whatEv+0x4>)
    498a:	4770      	bx	lr
    498c:	00012f5c 	.word	0x00012f5c

00004990 <_ZNSt9exceptionD0Ev>:
    4990:	b510      	push	{r4, lr}
    4992:	4b03      	ldr	r3, [pc, #12]	; (49a0 <_ZNSt9exceptionD0Ev+0x10>)
    4994:	6003      	str	r3, [r0, #0]
    4996:	4604      	mov	r4, r0
    4998:	f7ff fd68 	bl	446c <_ZdlPv>
    499c:	4620      	mov	r0, r4
    499e:	bd10      	pop	{r4, pc}
    49a0:	00012f18 	.word	0x00012f18

000049a4 <_ZNSt13bad_exceptionD0Ev>:
    49a4:	b510      	push	{r4, lr}
    49a6:	4b03      	ldr	r3, [pc, #12]	; (49b4 <_ZNSt13bad_exceptionD0Ev+0x10>)
    49a8:	6003      	str	r3, [r0, #0]
    49aa:	4604      	mov	r4, r0
    49ac:	f7ff fd5e 	bl	446c <_ZdlPv>
    49b0:	4620      	mov	r0, r4
    49b2:	bd10      	pop	{r4, pc}
    49b4:	00012f18 	.word	0x00012f18

000049b8 <__cxa_get_globals_fast>:
    49b8:	4800      	ldr	r0, [pc, #0]	; (49bc <__cxa_get_globals_fast+0x4>)
    49ba:	4770      	bx	lr
    49bc:	1fff9c38 	.word	0x1fff9c38

000049c0 <__cxa_get_globals>:
    49c0:	4800      	ldr	r0, [pc, #0]	; (49c4 <__cxa_get_globals+0x4>)
    49c2:	4770      	bx	lr
    49c4:	1fff9c38 	.word	0x1fff9c38

000049c8 <_ZL12read_sleb128PKhPl>:
    49c8:	b430      	push	{r4, r5}
    49ca:	2400      	movs	r4, #0
    49cc:	4623      	mov	r3, r4
    49ce:	f810 2b01 	ldrb.w	r2, [r0], #1
    49d2:	f002 057f 	and.w	r5, r2, #127	; 0x7f
    49d6:	409d      	lsls	r5, r3
    49d8:	432c      	orrs	r4, r5
    49da:	0615      	lsls	r5, r2, #24
    49dc:	f103 0307 	add.w	r3, r3, #7
    49e0:	d4f5      	bmi.n	49ce <_ZL12read_sleb128PKhPl+0x6>
    49e2:	2b1f      	cmp	r3, #31
    49e4:	d806      	bhi.n	49f4 <_ZL12read_sleb128PKhPl+0x2c>
    49e6:	0652      	lsls	r2, r2, #25
    49e8:	d504      	bpl.n	49f4 <_ZL12read_sleb128PKhPl+0x2c>
    49ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    49ee:	fa02 f303 	lsl.w	r3, r2, r3
    49f2:	431c      	orrs	r4, r3
    49f4:	600c      	str	r4, [r1, #0]
    49f6:	bc30      	pop	{r4, r5}
    49f8:	4770      	bx	lr
    49fa:	bf00      	nop

000049fc <_ZL28read_encoded_value_with_basehjPKhPj>:
    49fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a00:	2850      	cmp	r0, #80	; 0x50
    4a02:	b084      	sub	sp, #16
    4a04:	4606      	mov	r6, r0
    4a06:	4688      	mov	r8, r1
    4a08:	d046      	beq.n	4a98 <_ZL28read_encoded_value_with_basehjPKhPj+0x9c>
    4a0a:	f000 010f 	and.w	r1, r0, #15
    4a0e:	290c      	cmp	r1, #12
    4a10:	d840      	bhi.n	4a94 <_ZL28read_encoded_value_with_basehjPKhPj+0x98>
    4a12:	e8df f001 	tbb	[pc, r1]
    4a16:	2c07      	.short	0x2c07
    4a18:	3f19073b 	.word	0x3f19073b
    4a1c:	213f3f3f 	.word	0x213f3f3f
    4a20:	071d      	.short	0x071d
    4a22:	19          	.byte	0x19
    4a23:	00          	.byte	0x00
    4a24:	4615      	mov	r5, r2
    4a26:	f855 4b04 	ldr.w	r4, [r5], #4
    4a2a:	b144      	cbz	r4, 4a3e <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
    4a2c:	f006 0170 	and.w	r1, r6, #112	; 0x70
    4a30:	2910      	cmp	r1, #16
    4a32:	bf08      	it	eq
    4a34:	4690      	moveq	r8, r2
    4a36:	4444      	add	r4, r8
    4a38:	0632      	lsls	r2, r6, #24
    4a3a:	bf48      	it	mi
    4a3c:	6824      	ldrmi	r4, [r4, #0]
    4a3e:	4628      	mov	r0, r5
    4a40:	601c      	str	r4, [r3, #0]
    4a42:	b004      	add	sp, #16
    4a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a48:	6814      	ldr	r4, [r2, #0]
    4a4a:	f102 0508 	add.w	r5, r2, #8
    4a4e:	e7ec      	b.n	4a2a <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    4a50:	4615      	mov	r5, r2
    4a52:	f935 4b02 	ldrsh.w	r4, [r5], #2
    4a56:	e7e8      	b.n	4a2a <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    4a58:	4610      	mov	r0, r2
    4a5a:	a903      	add	r1, sp, #12
    4a5c:	9201      	str	r2, [sp, #4]
    4a5e:	9300      	str	r3, [sp, #0]
    4a60:	f7ff ffb2 	bl	49c8 <_ZL12read_sleb128PKhPl>
    4a64:	9c03      	ldr	r4, [sp, #12]
    4a66:	9a01      	ldr	r2, [sp, #4]
    4a68:	9b00      	ldr	r3, [sp, #0]
    4a6a:	4605      	mov	r5, r0
    4a6c:	e7dd      	b.n	4a2a <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    4a6e:	2400      	movs	r4, #0
    4a70:	4627      	mov	r7, r4
    4a72:	4615      	mov	r5, r2
    4a74:	f815 1b01 	ldrb.w	r1, [r5], #1
    4a78:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    4a7c:	40b8      	lsls	r0, r7
    4a7e:	0609      	lsls	r1, r1, #24
    4a80:	ea44 0400 	orr.w	r4, r4, r0
    4a84:	f107 0707 	add.w	r7, r7, #7
    4a88:	d4f4      	bmi.n	4a74 <_ZL28read_encoded_value_with_basehjPKhPj+0x78>
    4a8a:	e7ce      	b.n	4a2a <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    4a8c:	4615      	mov	r5, r2
    4a8e:	f835 4b02 	ldrh.w	r4, [r5], #2
    4a92:	e7ca      	b.n	4a2a <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    4a94:	f008 fea6 	bl	d7e4 <abort>
    4a98:	1cd5      	adds	r5, r2, #3
    4a9a:	f025 0503 	bic.w	r5, r5, #3
    4a9e:	f855 4b04 	ldr.w	r4, [r5], #4
    4aa2:	601c      	str	r4, [r3, #0]
    4aa4:	4628      	mov	r0, r5
    4aa6:	b004      	add	sp, #16
    4aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004aac <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    4aac:	28ff      	cmp	r0, #255	; 0xff
    4aae:	b508      	push	{r3, lr}
    4ab0:	d00f      	beq.n	4ad2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    4ab2:	f000 0370 	and.w	r3, r0, #112	; 0x70
    4ab6:	2b20      	cmp	r3, #32
    4ab8:	d018      	beq.n	4aec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
    4aba:	d90c      	bls.n	4ad6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
    4abc:	2b40      	cmp	r3, #64	; 0x40
    4abe:	d010      	beq.n	4ae2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
    4ac0:	2b50      	cmp	r3, #80	; 0x50
    4ac2:	d006      	beq.n	4ad2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    4ac4:	2b30      	cmp	r3, #48	; 0x30
    4ac6:	d10a      	bne.n	4ade <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
    4ac8:	4608      	mov	r0, r1
    4aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4ace:	f008 be81 	b.w	d7d4 <_Unwind_GetDataRelBase>
    4ad2:	2000      	movs	r0, #0
    4ad4:	bd08      	pop	{r3, pc}
    4ad6:	2b00      	cmp	r3, #0
    4ad8:	d0fb      	beq.n	4ad2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    4ada:	2b10      	cmp	r3, #16
    4adc:	d0f9      	beq.n	4ad2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    4ade:	f008 fe81 	bl	d7e4 <abort>
    4ae2:	4608      	mov	r0, r1
    4ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4ae8:	f008 be64 	b.w	d7b4 <_Unwind_GetRegionStart>
    4aec:	4608      	mov	r0, r1
    4aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4af2:	f008 be73 	b.w	d7dc <_Unwind_GetTextRelBase>
    4af6:	bf00      	nop

00004af8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    4af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4afa:	460c      	mov	r4, r1
    4afc:	4616      	mov	r6, r2
    4afe:	4607      	mov	r7, r0
    4b00:	b108      	cbz	r0, 4b06 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
    4b02:	f008 fe57 	bl	d7b4 <_Unwind_GetRegionStart>
    4b06:	6030      	str	r0, [r6, #0]
    4b08:	7825      	ldrb	r5, [r4, #0]
    4b0a:	2dff      	cmp	r5, #255	; 0xff
    4b0c:	f104 0401 	add.w	r4, r4, #1
    4b10:	d033      	beq.n	4b7a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
    4b12:	4639      	mov	r1, r7
    4b14:	4628      	mov	r0, r5
    4b16:	f7ff ffc9 	bl	4aac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4b1a:	4622      	mov	r2, r4
    4b1c:	4601      	mov	r1, r0
    4b1e:	1d33      	adds	r3, r6, #4
    4b20:	4628      	mov	r0, r5
    4b22:	f7ff ff6b 	bl	49fc <_ZL28read_encoded_value_with_basehjPKhPj>
    4b26:	4604      	mov	r4, r0
    4b28:	1c60      	adds	r0, r4, #1
    4b2a:	7823      	ldrb	r3, [r4, #0]
    4b2c:	7533      	strb	r3, [r6, #20]
    4b2e:	2bff      	cmp	r3, #255	; 0xff
    4b30:	d02a      	beq.n	4b88 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
    4b32:	2310      	movs	r3, #16
    4b34:	2200      	movs	r2, #0
    4b36:	7533      	strb	r3, [r6, #20]
    4b38:	4613      	mov	r3, r2
    4b3a:	f810 1b01 	ldrb.w	r1, [r0], #1
    4b3e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    4b42:	409c      	lsls	r4, r3
    4b44:	0609      	lsls	r1, r1, #24
    4b46:	ea42 0204 	orr.w	r2, r2, r4
    4b4a:	f103 0307 	add.w	r3, r3, #7
    4b4e:	d4f4      	bmi.n	4b3a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x42>
    4b50:	4402      	add	r2, r0
    4b52:	60f2      	str	r2, [r6, #12]
    4b54:	7803      	ldrb	r3, [r0, #0]
    4b56:	7573      	strb	r3, [r6, #21]
    4b58:	2400      	movs	r4, #0
    4b5a:	3001      	adds	r0, #1
    4b5c:	4623      	mov	r3, r4
    4b5e:	f810 1b01 	ldrb.w	r1, [r0], #1
    4b62:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    4b66:	409d      	lsls	r5, r3
    4b68:	060a      	lsls	r2, r1, #24
    4b6a:	ea44 0405 	orr.w	r4, r4, r5
    4b6e:	f103 0307 	add.w	r3, r3, #7
    4b72:	d4f4      	bmi.n	4b5e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x66>
    4b74:	4404      	add	r4, r0
    4b76:	6134      	str	r4, [r6, #16]
    4b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b7a:	6070      	str	r0, [r6, #4]
    4b7c:	7823      	ldrb	r3, [r4, #0]
    4b7e:	7533      	strb	r3, [r6, #20]
    4b80:	2bff      	cmp	r3, #255	; 0xff
    4b82:	f104 0001 	add.w	r0, r4, #1
    4b86:	d1d4      	bne.n	4b32 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>
    4b88:	2300      	movs	r3, #0
    4b8a:	60f3      	str	r3, [r6, #12]
    4b8c:	e7e2      	b.n	4b54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
    4b8e:	bf00      	nop

00004b90 <__gxx_personality_v0>:
    4b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b94:	f000 0303 	and.w	r3, r0, #3
    4b98:	b093      	sub	sp, #76	; 0x4c
    4b9a:	2500      	movs	r5, #0
    4b9c:	2b01      	cmp	r3, #1
    4b9e:	460e      	mov	r6, r1
    4ba0:	4614      	mov	r4, r2
    4ba2:	9506      	str	r5, [sp, #24]
    4ba4:	f000 80a6 	beq.w	4cf4 <__gxx_personality_v0+0x164>
    4ba8:	d30e      	bcc.n	4bc8 <__gxx_personality_v0+0x38>
    4baa:	2b02      	cmp	r3, #2
    4bac:	d10a      	bne.n	4bc4 <__gxx_personality_v0+0x34>
    4bae:	4630      	mov	r0, r6
    4bb0:	4621      	mov	r1, r4
    4bb2:	f008 fde9 	bl	d788 <__gnu_unwind_frame>
    4bb6:	2800      	cmp	r0, #0
    4bb8:	f000 80a4 	beq.w	4d04 <__gxx_personality_v0+0x174>
    4bbc:	2009      	movs	r0, #9
    4bbe:	b013      	add	sp, #76	; 0x4c
    4bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bc4:	f008 fe0e 	bl	d7e4 <abort>
    4bc8:	f000 0008 	and.w	r0, r0, #8
    4bcc:	fa5f f880 	uxtb.w	r8, r0
    4bd0:	f04f 0901 	mov.w	r9, #1
    4bd4:	aa12      	add	r2, sp, #72	; 0x48
    4bd6:	2100      	movs	r1, #0
    4bd8:	f842 6d2c 	str.w	r6, [r2, #-44]!
    4bdc:	460b      	mov	r3, r1
    4bde:	9200      	str	r2, [sp, #0]
    4be0:	4620      	mov	r0, r4
    4be2:	220c      	movs	r2, #12
    4be4:	f008 f886 	bl	ccf4 <_Unwind_VRS_Set>
    4be8:	4620      	mov	r0, r4
    4bea:	f008 fde9 	bl	d7c0 <_Unwind_GetLanguageSpecificData>
    4bee:	4607      	mov	r7, r0
    4bf0:	2800      	cmp	r0, #0
    4bf2:	d0dc      	beq.n	4bae <__gxx_personality_v0+0x1e>
    4bf4:	aa0c      	add	r2, sp, #48	; 0x30
    4bf6:	4639      	mov	r1, r7
    4bf8:	4620      	mov	r0, r4
    4bfa:	9203      	str	r2, [sp, #12]
    4bfc:	f7ff ff7c 	bl	4af8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    4c00:	4621      	mov	r1, r4
    4c02:	4683      	mov	fp, r0
    4c04:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4c08:	f7ff ff50 	bl	4aac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4c0c:	ad0b      	add	r5, sp, #44	; 0x2c
    4c0e:	2100      	movs	r1, #0
    4c10:	900e      	str	r0, [sp, #56]	; 0x38
    4c12:	460b      	mov	r3, r1
    4c14:	220f      	movs	r2, #15
    4c16:	9500      	str	r5, [sp, #0]
    4c18:	4620      	mov	r0, r4
    4c1a:	f008 f843 	bl	cca4 <_Unwind_VRS_Get>
    4c1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c22:	f022 0201 	bic.w	r2, r2, #1
    4c26:	459b      	cmp	fp, r3
    4c28:	ea48 0809 	orr.w	r8, r8, r9
    4c2c:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    4c30:	d239      	bcs.n	4ca6 <__gxx_personality_v0+0x116>
    4c32:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
    4c36:	2100      	movs	r1, #0
    4c38:	4650      	mov	r0, sl
    4c3a:	f7ff ff37 	bl	4aac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4c3e:	465a      	mov	r2, fp
    4c40:	4601      	mov	r1, r0
    4c42:	ab09      	add	r3, sp, #36	; 0x24
    4c44:	4650      	mov	r0, sl
    4c46:	f7ff fed9 	bl	49fc <_ZL28read_encoded_value_with_basehjPKhPj>
    4c4a:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
    4c4e:	4683      	mov	fp, r0
    4c50:	2100      	movs	r1, #0
    4c52:	4650      	mov	r0, sl
    4c54:	f7ff ff2a 	bl	4aac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4c58:	465a      	mov	r2, fp
    4c5a:	4601      	mov	r1, r0
    4c5c:	ab0a      	add	r3, sp, #40	; 0x28
    4c5e:	4650      	mov	r0, sl
    4c60:	f7ff fecc 	bl	49fc <_ZL28read_encoded_value_with_basehjPKhPj>
    4c64:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
    4c68:	4683      	mov	fp, r0
    4c6a:	2100      	movs	r1, #0
    4c6c:	4650      	mov	r0, sl
    4c6e:	f7ff ff1d 	bl	4aac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4c72:	465a      	mov	r2, fp
    4c74:	4601      	mov	r1, r0
    4c76:	462b      	mov	r3, r5
    4c78:	4650      	mov	r0, sl
    4c7a:	f7ff febf 	bl	49fc <_ZL28read_encoded_value_with_basehjPKhPj>
    4c7e:	2100      	movs	r1, #0
    4c80:	4683      	mov	fp, r0
    4c82:	460b      	mov	r3, r1
    4c84:	f81b eb01 	ldrb.w	lr, [fp], #1
    4c88:	f00e 027f 	and.w	r2, lr, #127	; 0x7f
    4c8c:	409a      	lsls	r2, r3
    4c8e:	f01e 0f80 	tst.w	lr, #128	; 0x80
    4c92:	ea41 0102 	orr.w	r1, r1, r2
    4c96:	f103 0307 	add.w	r3, r3, #7
    4c9a:	d1f3      	bne.n	4c84 <__gxx_personality_v0+0xf4>
    4c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ca0:	4413      	add	r3, r2
    4ca2:	4599      	cmp	r9, r3
    4ca4:	d21d      	bcs.n	4ce2 <__gxx_personality_v0+0x152>
    4ca6:	f04f 0900 	mov.w	r9, #0
    4caa:	f04f 0b01 	mov.w	fp, #1
    4cae:	2500      	movs	r5, #0
    4cb0:	f018 0f01 	tst.w	r8, #1
    4cb4:	d04c      	beq.n	4d50 <__gxx_personality_v0+0x1c0>
    4cb6:	f1bb 0f02 	cmp.w	fp, #2
    4cba:	f43f af78 	beq.w	4bae <__gxx_personality_v0+0x1e>
    4cbe:	ab0a      	add	r3, sp, #40	; 0x28
    4cc0:	2100      	movs	r1, #0
    4cc2:	4620      	mov	r0, r4
    4cc4:	9300      	str	r3, [sp, #0]
    4cc6:	220d      	movs	r2, #13
    4cc8:	460b      	mov	r3, r1
    4cca:	9c06      	ldr	r4, [sp, #24]
    4ccc:	f007 ffea 	bl	cca4 <_Unwind_VRS_Get>
    4cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4cd2:	6274      	str	r4, [r6, #36]	; 0x24
    4cd4:	62b5      	str	r5, [r6, #40]	; 0x28
    4cd6:	62f7      	str	r7, [r6, #44]	; 0x2c
    4cd8:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
    4cdc:	6233      	str	r3, [r6, #32]
    4cde:	2006      	movs	r0, #6
    4ce0:	e76d      	b.n	4bbe <__gxx_personality_v0+0x2e>
    4ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4ce4:	4413      	add	r3, r2
    4ce6:	4599      	cmp	r9, r3
    4ce8:	f0c0 8092 	bcc.w	4e10 <__gxx_personality_v0+0x280>
    4cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4cee:	459b      	cmp	fp, r3
    4cf0:	d39f      	bcc.n	4c32 <__gxx_personality_v0+0xa2>
    4cf2:	e7d8      	b.n	4ca6 <__gxx_personality_v0+0x116>
    4cf4:	f000 0008 	and.w	r0, r0, #8
    4cf8:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    4cfc:	b130      	cbz	r0, 4d0c <__gxx_personality_v0+0x17c>
    4cfe:	f04f 0902 	mov.w	r9, #2
    4d02:	e767      	b.n	4bd4 <__gxx_personality_v0+0x44>
    4d04:	2008      	movs	r0, #8
    4d06:	b013      	add	sp, #76	; 0x4c
    4d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d0c:	a90c      	add	r1, sp, #48	; 0x30
    4d0e:	9100      	str	r1, [sp, #0]
    4d10:	9103      	str	r1, [sp, #12]
    4d12:	4610      	mov	r0, r2
    4d14:	4643      	mov	r3, r8
    4d16:	4641      	mov	r1, r8
    4d18:	220d      	movs	r2, #13
    4d1a:	6a35      	ldr	r5, [r6, #32]
    4d1c:	f007 ffc2 	bl	cca4 <_Unwind_VRS_Get>
    4d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d22:	429d      	cmp	r5, r3
    4d24:	d1eb      	bne.n	4cfe <__gxx_personality_v0+0x16e>
    4d26:	aa12      	add	r2, sp, #72	; 0x48
    4d28:	4641      	mov	r1, r8
    4d2a:	f842 6d2c 	str.w	r6, [r2, #-44]!
    4d2e:	4643      	mov	r3, r8
    4d30:	9200      	str	r2, [sp, #0]
    4d32:	4620      	mov	r0, r4
    4d34:	220c      	movs	r2, #12
    4d36:	f106 0528 	add.w	r5, r6, #40	; 0x28
    4d3a:	f007 ffdb 	bl	ccf4 <_Unwind_VRS_Set>
    4d3e:	e895 02a0 	ldmia.w	r5, {r5, r7, r9}
    4d42:	f1b9 0f00 	cmp.w	r9, #0
    4d46:	f000 8115 	beq.w	4f74 <__gxx_personality_v0+0x3e4>
    4d4a:	f04f 0b03 	mov.w	fp, #3
    4d4e:	e03d      	b.n	4dcc <__gxx_personality_v0+0x23c>
    4d50:	f018 0f08 	tst.w	r8, #8
    4d54:	d036      	beq.n	4dc4 <__gxx_personality_v0+0x234>
    4d56:	f1bb 0f01 	cmp.w	fp, #1
    4d5a:	f000 811a 	beq.w	4f92 <__gxx_personality_v0+0x402>
    4d5e:	2d00      	cmp	r5, #0
    4d60:	f2c0 8113 	blt.w	4f8a <__gxx_personality_v0+0x3fa>
    4d64:	ab12      	add	r3, sp, #72	; 0x48
    4d66:	2100      	movs	r1, #0
    4d68:	f843 6d28 	str.w	r6, [r3, #-40]!
    4d6c:	460a      	mov	r2, r1
    4d6e:	9300      	str	r3, [sp, #0]
    4d70:	4620      	mov	r0, r4
    4d72:	460b      	mov	r3, r1
    4d74:	f007 ffbe 	bl	ccf4 <_Unwind_VRS_Set>
    4d78:	aa12      	add	r2, sp, #72	; 0x48
    4d7a:	2100      	movs	r1, #0
    4d7c:	f842 5d24 	str.w	r5, [r2, #-36]!
    4d80:	460b      	mov	r3, r1
    4d82:	9200      	str	r2, [sp, #0]
    4d84:	4620      	mov	r0, r4
    4d86:	2201      	movs	r2, #1
    4d88:	f007 ffb4 	bl	ccf4 <_Unwind_VRS_Set>
    4d8c:	ad0a      	add	r5, sp, #40	; 0x28
    4d8e:	2100      	movs	r1, #0
    4d90:	460b      	mov	r3, r1
    4d92:	4620      	mov	r0, r4
    4d94:	220f      	movs	r2, #15
    4d96:	9500      	str	r5, [sp, #0]
    4d98:	f007 ff84 	bl	cca4 <_Unwind_VRS_Get>
    4d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d9e:	9500      	str	r5, [sp, #0]
    4da0:	f003 0301 	and.w	r3, r3, #1
    4da4:	2100      	movs	r1, #0
    4da6:	4620      	mov	r0, r4
    4da8:	220f      	movs	r2, #15
    4daa:	ea49 0403 	orr.w	r4, r9, r3
    4dae:	460b      	mov	r3, r1
    4db0:	940a      	str	r4, [sp, #40]	; 0x28
    4db2:	f007 ff9f 	bl	ccf4 <_Unwind_VRS_Set>
    4db6:	f1bb 0f02 	cmp.w	fp, #2
    4dba:	d036      	beq.n	4e2a <__gxx_personality_v0+0x29a>
    4dbc:	2007      	movs	r0, #7
    4dbe:	b013      	add	sp, #76	; 0x4c
    4dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4dc4:	f1bb 0f01 	cmp.w	fp, #1
    4dc8:	f000 80d4 	beq.w	4f74 <__gxx_personality_v0+0x3e4>
    4dcc:	2d00      	cmp	r5, #0
    4dce:	dac9      	bge.n	4d64 <__gxx_personality_v0+0x1d4>
    4dd0:	4639      	mov	r1, r7
    4dd2:	9a03      	ldr	r2, [sp, #12]
    4dd4:	4620      	mov	r0, r4
    4dd6:	f7ff fe8f 	bl	4af8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    4dda:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4dde:	4621      	mov	r1, r4
    4de0:	f7ff fe64 	bl	4aac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4de4:	00aa      	lsls	r2, r5, #2
    4de6:	f082 0203 	eor.w	r2, r2, #3
    4dea:	43d2      	mvns	r2, r2
    4dec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    4dee:	900e      	str	r0, [sp, #56]	; 0x38
    4df0:	58bb      	ldr	r3, [r7, r2]
    4df2:	4417      	add	r7, r2
    4df4:	b133      	cbz	r3, 4e04 <__gxx_personality_v0+0x274>
    4df6:	463a      	mov	r2, r7
    4df8:	2300      	movs	r3, #0
    4dfa:	f852 1f04 	ldr.w	r1, [r2, #4]!
    4dfe:	3301      	adds	r3, #1
    4e00:	2900      	cmp	r1, #0
    4e02:	d1fa      	bne.n	4dfa <__gxx_personality_v0+0x26a>
    4e04:	2204      	movs	r2, #4
    4e06:	62b3      	str	r3, [r6, #40]	; 0x28
    4e08:	62f0      	str	r0, [r6, #44]	; 0x2c
    4e0a:	6377      	str	r7, [r6, #52]	; 0x34
    4e0c:	6332      	str	r2, [r6, #48]	; 0x30
    4e0e:	e7a9      	b.n	4d64 <__gxx_personality_v0+0x1d4>
    4e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e12:	b17b      	cbz	r3, 4e34 <__gxx_personality_v0+0x2a4>
    4e14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4e16:	eb03 0902 	add.w	r9, r3, r2
    4e1a:	b969      	cbnz	r1, 4e38 <__gxx_personality_v0+0x2a8>
    4e1c:	f1b9 0f00 	cmp.w	r9, #0
    4e20:	f43f aec5 	beq.w	4bae <__gxx_personality_v0+0x1e>
    4e24:	f04f 0b02 	mov.w	fp, #2
    4e28:	e741      	b.n	4cae <__gxx_personality_v0+0x11e>
    4e2a:	4630      	mov	r0, r6
    4e2c:	f7ff fc0c 	bl	4648 <__cxa_begin_cleanup>
    4e30:	2007      	movs	r0, #7
    4e32:	e6c4      	b.n	4bbe <__gxx_personality_v0+0x2e>
    4e34:	4699      	mov	r9, r3
    4e36:	e7f0      	b.n	4e1a <__gxx_personality_v0+0x28a>
    4e38:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4e3a:	3901      	subs	r1, #1
    4e3c:	1858      	adds	r0, r3, r1
    4e3e:	f1b9 0f00 	cmp.w	r9, #0
    4e42:	f43f aeb4 	beq.w	4bae <__gxx_personality_v0+0x1e>
    4e46:	2800      	cmp	r0, #0
    4e48:	d0ec      	beq.n	4e24 <__gxx_personality_v0+0x294>
    4e4a:	f018 0308 	ands.w	r3, r8, #8
    4e4e:	9305      	str	r3, [sp, #20]
    4e50:	d07c      	beq.n	4f4c <__gxx_personality_v0+0x3bc>
    4e52:	2247      	movs	r2, #71	; 0x47
    4e54:	234e      	movs	r3, #78	; 0x4e
    4e56:	2155      	movs	r1, #85	; 0x55
    4e58:	7032      	strb	r2, [r6, #0]
    4e5a:	7073      	strb	r3, [r6, #1]
    4e5c:	2243      	movs	r2, #67	; 0x43
    4e5e:	2346      	movs	r3, #70	; 0x46
    4e60:	70b1      	strb	r1, [r6, #2]
    4e62:	70f2      	strb	r2, [r6, #3]
    4e64:	214f      	movs	r1, #79	; 0x4f
    4e66:	2252      	movs	r2, #82	; 0x52
    4e68:	7133      	strb	r3, [r6, #4]
    4e6a:	2300      	movs	r3, #0
    4e6c:	7171      	strb	r1, [r6, #5]
    4e6e:	71b2      	strb	r2, [r6, #6]
    4e70:	71f3      	strb	r3, [r6, #7]
    4e72:	f04f 0b00 	mov.w	fp, #0
    4e76:	9404      	str	r4, [sp, #16]
    4e78:	a908      	add	r1, sp, #32
    4e7a:	f7ff fda5 	bl	49c8 <_ZL12read_sleb128PKhPl>
    4e7e:	a909      	add	r1, sp, #36	; 0x24
    4e80:	4682      	mov	sl, r0
    4e82:	f7ff fda1 	bl	49c8 <_ZL12read_sleb128PKhPl>
    4e86:	9b08      	ldr	r3, [sp, #32]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d02f      	beq.n	4eec <__gxx_personality_v0+0x35c>
    4e8c:	dd31      	ble.n	4ef2 <__gxx_personality_v0+0x362>
    4e8e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4e92:	28ff      	cmp	r0, #255	; 0xff
    4e94:	d058      	beq.n	4f48 <__gxx_personality_v0+0x3b8>
    4e96:	f000 0207 	and.w	r2, r0, #7
    4e9a:	2a04      	cmp	r2, #4
    4e9c:	f63f ae92 	bhi.w	4bc4 <__gxx_personality_v0+0x34>
    4ea0:	a101      	add	r1, pc, #4	; (adr r1, 4ea8 <__gxx_personality_v0+0x318>)
    4ea2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4ea6:	bf00      	nop
    4ea8:	00004ee7 	.word	0x00004ee7
    4eac:	00004bc5 	.word	0x00004bc5
    4eb0:	00004ee1 	.word	0x00004ee1
    4eb4:	00004ee7 	.word	0x00004ee7
    4eb8:	00004ebd 	.word	0x00004ebd
    4ebc:	00db      	lsls	r3, r3, #3
    4ebe:	425a      	negs	r2, r3
    4ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4ec2:	990e      	ldr	r1, [sp, #56]	; 0x38
    4ec4:	441a      	add	r2, r3
    4ec6:	ab0a      	add	r3, sp, #40	; 0x28
    4ec8:	f7ff fd98 	bl	49fc <_ZL28read_encoded_value_with_basehjPKhPj>
    4ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
    4ece:	b1f9      	cbz	r1, 4f10 <__gxx_personality_v0+0x380>
    4ed0:	2e00      	cmp	r6, #0
    4ed2:	d152      	bne.n	4f7a <__gxx_personality_v0+0x3ea>
    4ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d043      	beq.n	4f62 <__gxx_personality_v0+0x3d2>
    4eda:	eb0a 0003 	add.w	r0, sl, r3
    4ede:	e7cb      	b.n	4e78 <__gxx_personality_v0+0x2e8>
    4ee0:	005b      	lsls	r3, r3, #1
    4ee2:	425a      	negs	r2, r3
    4ee4:	e7ec      	b.n	4ec0 <__gxx_personality_v0+0x330>
    4ee6:	009b      	lsls	r3, r3, #2
    4ee8:	425a      	negs	r2, r3
    4eea:	e7e9      	b.n	4ec0 <__gxx_personality_v0+0x330>
    4eec:	f04f 0b01 	mov.w	fp, #1
    4ef0:	e7f0      	b.n	4ed4 <__gxx_personality_v0+0x344>
    4ef2:	3301      	adds	r3, #1
    4ef4:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
    4ef8:	b10e      	cbz	r6, 4efe <__gxx_personality_v0+0x36e>
    4efa:	9a05      	ldr	r2, [sp, #20]
    4efc:	b16a      	cbz	r2, 4f1a <__gxx_personality_v0+0x38a>
    4efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4f04:	f1d3 0301 	rsbs	r3, r3, #1
    4f08:	bf38      	it	cc
    4f0a:	2300      	movcc	r3, #0
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d0e1      	beq.n	4ed4 <__gxx_personality_v0+0x344>
    4f10:	9c04      	ldr	r4, [sp, #16]
    4f12:	9d08      	ldr	r5, [sp, #32]
    4f14:	f04f 0b03 	mov.w	fp, #3
    4f18:	e6ca      	b.n	4cb0 <__gxx_personality_v0+0x120>
    4f1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4f1c:	9806      	ldr	r0, [sp, #24]
    4f1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    4f22:	900b      	str	r0, [sp, #44]	; 0x2c
    4f24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4f28:	461c      	mov	r4, r3
    4f2a:	b919      	cbnz	r1, 4f34 <__gxx_personality_v0+0x3a4>
    4f2c:	e017      	b.n	4f5e <__gxx_personality_v0+0x3ce>
    4f2e:	f854 1f04 	ldr.w	r1, [r4, #4]!
    4f32:	b1a1      	cbz	r1, 4f5e <__gxx_personality_v0+0x3ce>
    4f34:	4421      	add	r1, r4
    4f36:	4630      	mov	r0, r6
    4f38:	2200      	movs	r2, #0
    4f3a:	462b      	mov	r3, r5
    4f3c:	f7ff fb2e 	bl	459c <__cxa_type_match>
    4f40:	2800      	cmp	r0, #0
    4f42:	d0f4      	beq.n	4f2e <__gxx_personality_v0+0x39e>
    4f44:	2300      	movs	r3, #0
    4f46:	e7e1      	b.n	4f0c <__gxx_personality_v0+0x37c>
    4f48:	2200      	movs	r2, #0
    4f4a:	e7b9      	b.n	4ec0 <__gxx_personality_v0+0x330>
    4f4c:	79f3      	ldrb	r3, [r6, #7]
    4f4e:	2b01      	cmp	r3, #1
    4f50:	bf0c      	ite	eq
    4f52:	f856 3c20 	ldreq.w	r3, [r6, #-32]
    4f56:	f106 0358 	addne.w	r3, r6, #88	; 0x58
    4f5a:	9306      	str	r3, [sp, #24]
    4f5c:	e789      	b.n	4e72 <__gxx_personality_v0+0x2e2>
    4f5e:	2301      	movs	r3, #1
    4f60:	e7d4      	b.n	4f0c <__gxx_personality_v0+0x37c>
    4f62:	9c04      	ldr	r4, [sp, #16]
    4f64:	f1bb 0f00 	cmp.w	fp, #0
    4f68:	f43f ae21 	beq.w	4bae <__gxx_personality_v0+0x1e>
    4f6c:	461d      	mov	r5, r3
    4f6e:	f04f 0b02 	mov.w	fp, #2
    4f72:	e69d      	b.n	4cb0 <__gxx_personality_v0+0x120>
    4f74:	4630      	mov	r0, r6
    4f76:	f7ff fbef 	bl	4758 <__cxa_call_terminate>
    4f7a:	4630      	mov	r0, r6
    4f7c:	2200      	movs	r2, #0
    4f7e:	ab06      	add	r3, sp, #24
    4f80:	f7ff fb0c 	bl	459c <__cxa_type_match>
    4f84:	2800      	cmp	r0, #0
    4f86:	d1c3      	bne.n	4f10 <__gxx_personality_v0+0x380>
    4f88:	e7a4      	b.n	4ed4 <__gxx_personality_v0+0x344>
    4f8a:	f000 f825 	bl	4fd8 <_ZSt10unexpectedv>
    4f8e:	f7ff fc5f 	bl	4850 <__cxa_begin_catch>
    4f92:	f000 f815 	bl	4fc0 <_ZSt9terminatev>
    4f96:	bf00      	nop

00004f98 <_ZN10__cxxabiv111__terminateEPFvvE>:
    4f98:	b508      	push	{r3, lr}
    4f9a:	4780      	blx	r0
    4f9c:	f008 fc22 	bl	d7e4 <abort>
    4fa0:	f7ff fc56 	bl	4850 <__cxa_begin_catch>
    4fa4:	f008 fc1e 	bl	d7e4 <abort>
    4fa8:	460c      	mov	r4, r1
    4faa:	4605      	mov	r5, r0
    4fac:	f7ff fc96 	bl	48dc <__cxa_end_catch>
    4fb0:	3401      	adds	r4, #1
    4fb2:	d001      	beq.n	4fb8 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
    4fb4:	f7ff faec 	bl	4590 <__cxa_end_cleanup>
    4fb8:	4628      	mov	r0, r5
    4fba:	f7ff fbdd 	bl	4778 <__cxa_call_unexpected>
    4fbe:	bf00      	nop

00004fc0 <_ZSt9terminatev>:
    4fc0:	b508      	push	{r3, lr}
    4fc2:	4b02      	ldr	r3, [pc, #8]	; (4fcc <_ZSt9terminatev+0xc>)
    4fc4:	6818      	ldr	r0, [r3, #0]
    4fc6:	f7ff ffe7 	bl	4f98 <_ZN10__cxxabiv111__terminateEPFvvE>
    4fca:	bf00      	nop
    4fcc:	1fff84c4 	.word	0x1fff84c4

00004fd0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    4fd0:	b508      	push	{r3, lr}
    4fd2:	4780      	blx	r0
    4fd4:	f7ff fff4 	bl	4fc0 <_ZSt9terminatev>

00004fd8 <_ZSt10unexpectedv>:
    4fd8:	b508      	push	{r3, lr}
    4fda:	4b02      	ldr	r3, [pc, #8]	; (4fe4 <_ZSt10unexpectedv+0xc>)
    4fdc:	6818      	ldr	r0, [r3, #0]
    4fde:	f7ff fff7 	bl	4fd0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    4fe2:	bf00      	nop
    4fe4:	1fff84c0 	.word	0x1fff84c0

00004fe8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
    4fe8:	2801      	cmp	r0, #1
    4fea:	b510      	push	{r4, lr}
    4fec:	d81a      	bhi.n	5024 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
    4fee:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
    4ff2:	f3bf 8f5f 	dmb	sy
    4ff6:	e853 2f00 	ldrex	r2, [r3]
    4ffa:	3a01      	subs	r2, #1
    4ffc:	e843 2000 	strex	r0, r2, [r3]
    5000:	2800      	cmp	r0, #0
    5002:	d1f8      	bne.n	4ff6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
    5004:	f3bf 8f5f 	dmb	sy
    5008:	b95a      	cbnz	r2, 5022 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
    500a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
    500e:	f101 0458 	add.w	r4, r1, #88	; 0x58
    5012:	b10b      	cbz	r3, 5018 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
    5014:	4620      	mov	r0, r4
    5016:	4798      	blx	r3
    5018:	4620      	mov	r0, r4
    501a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    501e:	f7ff ba9d 	b.w	455c <__cxa_free_exception>
    5022:	bd10      	pop	{r4, pc}
    5024:	f851 0c14 	ldr.w	r0, [r1, #-20]
    5028:	f7ff ffb6 	bl	4f98 <_ZN10__cxxabiv111__terminateEPFvvE>

0000502c <__cxa_throw>:
    502c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5030:	4604      	mov	r4, r0
    5032:	460f      	mov	r7, r1
    5034:	4690      	mov	r8, r2
    5036:	f7ff fcc3 	bl	49c0 <__cxa_get_globals>
    503a:	4603      	mov	r3, r0
    503c:	4a1c      	ldr	r2, [pc, #112]	; (50b0 <__cxa_throw+0x84>)
    503e:	6859      	ldr	r1, [r3, #4]
    5040:	481c      	ldr	r0, [pc, #112]	; (50b4 <__cxa_throw+0x88>)
    5042:	1c4e      	adds	r6, r1, #1
    5044:	605e      	str	r6, [r3, #4]
    5046:	f8d0 a000 	ldr.w	sl, [r0]
    504a:	6810      	ldr	r0, [r2, #0]
    504c:	4a1a      	ldr	r2, [pc, #104]	; (50b8 <__cxa_throw+0x8c>)
    504e:	f844 0c6c 	str.w	r0, [r4, #-108]
    5052:	232b      	movs	r3, #43	; 0x2b
    5054:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
    5058:	f04f 0e55 	mov.w	lr, #85	; 0x55
    505c:	2100      	movs	r1, #0
    505e:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
    5062:	2643      	movs	r6, #67	; 0x43
    5064:	f04f 0b01 	mov.w	fp, #1
    5068:	f04f 0947 	mov.w	r9, #71	; 0x47
    506c:	f804 cc57 	strb.w	ip, [r4, #-87]
    5070:	f804 ec56 	strb.w	lr, [r4, #-86]
    5074:	f804 1c51 	strb.w	r1, [r4, #-81]
    5078:	f844 2c50 	str.w	r2, [r4, #-80]
    507c:	f804 3c53 	strb.w	r3, [r4, #-83]
    5080:	f804 3c52 	strb.w	r3, [r4, #-82]
    5084:	f844 7c78 	str.w	r7, [r4, #-120]
    5088:	f844 8c74 	str.w	r8, [r4, #-116]
    508c:	f844 bc80 	str.w	fp, [r4, #-128]
    5090:	f844 ac70 	str.w	sl, [r4, #-112]
    5094:	f804 9c58 	strb.w	r9, [r4, #-88]
    5098:	4628      	mov	r0, r5
    509a:	f804 6c55 	strb.w	r6, [r4, #-85]
    509e:	f804 6c54 	strb.w	r6, [r4, #-84]
    50a2:	f008 f9a7 	bl	d3f4 <_Unwind_RaiseException>
    50a6:	4628      	mov	r0, r5
    50a8:	f7ff fbd2 	bl	4850 <__cxa_begin_catch>
    50ac:	f7ff ff88 	bl	4fc0 <_ZSt9terminatev>
    50b0:	1fff84c4 	.word	0x1fff84c4
    50b4:	1fff84c0 	.word	0x1fff84c0
    50b8:	00004fe9 	.word	0x00004fe9

000050bc <__cxa_rethrow>:
    50bc:	b510      	push	{r4, lr}
    50be:	f7ff fc7f 	bl	49c0 <__cxa_get_globals>
    50c2:	6842      	ldr	r2, [r0, #4]
    50c4:	6803      	ldr	r3, [r0, #0]
    50c6:	3201      	adds	r2, #1
    50c8:	6042      	str	r2, [r0, #4]
    50ca:	b16b      	cbz	r3, 50e8 <__cxa_rethrow+0x2c>
    50cc:	f893 2020 	ldrb.w	r2, [r3, #32]
    50d0:	2a47      	cmp	r2, #71	; 0x47
    50d2:	d00b      	beq.n	50ec <__cxa_rethrow+0x30>
    50d4:	2200      	movs	r2, #0
    50d6:	6002      	str	r2, [r0, #0]
    50d8:	f103 0420 	add.w	r4, r3, #32
    50dc:	4620      	mov	r0, r4
    50de:	f008 f9ad 	bl	d43c <_Unwind_Resume_or_Rethrow>
    50e2:	4620      	mov	r0, r4
    50e4:	f7ff fbb4 	bl	4850 <__cxa_begin_catch>
    50e8:	f7ff ff6a 	bl	4fc0 <_ZSt9terminatev>
    50ec:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    50f0:	2a4e      	cmp	r2, #78	; 0x4e
    50f2:	d1ef      	bne.n	50d4 <__cxa_rethrow+0x18>
    50f4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    50f8:	2a55      	cmp	r2, #85	; 0x55
    50fa:	d1eb      	bne.n	50d4 <__cxa_rethrow+0x18>
    50fc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    5100:	2a43      	cmp	r2, #67	; 0x43
    5102:	d1e7      	bne.n	50d4 <__cxa_rethrow+0x18>
    5104:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    5108:	2a43      	cmp	r2, #67	; 0x43
    510a:	d1e3      	bne.n	50d4 <__cxa_rethrow+0x18>
    510c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    5110:	2a2b      	cmp	r2, #43	; 0x2b
    5112:	d1df      	bne.n	50d4 <__cxa_rethrow+0x18>
    5114:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    5118:	2a2b      	cmp	r2, #43	; 0x2b
    511a:	d1db      	bne.n	50d4 <__cxa_rethrow+0x18>
    511c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    5120:	2a01      	cmp	r2, #1
    5122:	d8d7      	bhi.n	50d4 <__cxa_rethrow+0x18>
    5124:	695a      	ldr	r2, [r3, #20]
    5126:	4252      	negs	r2, r2
    5128:	615a      	str	r2, [r3, #20]
    512a:	e7d5      	b.n	50d8 <__cxa_rethrow+0x1c>

0000512c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    512c:	b510      	push	{r4, lr}
    512e:	4b03      	ldr	r3, [pc, #12]	; (513c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
    5130:	6003      	str	r3, [r0, #0]
    5132:	4604      	mov	r4, r0
    5134:	f000 f8da 	bl	52ec <_ZN10__cxxabiv117__class_type_infoD1Ev>
    5138:	4620      	mov	r0, r4
    513a:	bd10      	pop	{r4, pc}
    513c:	00013000 	.word	0x00013000

00005140 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    5140:	b510      	push	{r4, lr}
    5142:	4b05      	ldr	r3, [pc, #20]	; (5158 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
    5144:	6003      	str	r3, [r0, #0]
    5146:	4604      	mov	r4, r0
    5148:	f000 f8d0 	bl	52ec <_ZN10__cxxabiv117__class_type_infoD1Ev>
    514c:	4620      	mov	r0, r4
    514e:	f7ff f98d 	bl	446c <_ZdlPv>
    5152:	4620      	mov	r0, r4
    5154:	bd10      	pop	{r4, pc}
    5156:	bf00      	nop
    5158:	00013000 	.word	0x00013000

0000515c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    515c:	b570      	push	{r4, r5, r6, lr}
    515e:	b084      	sub	sp, #16
    5160:	460d      	mov	r5, r1
    5162:	9c08      	ldr	r4, [sp, #32]
    5164:	4294      	cmp	r4, r2
    5166:	4606      	mov	r6, r0
    5168:	d007      	beq.n	517a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1e>
    516a:	68b0      	ldr	r0, [r6, #8]
    516c:	6806      	ldr	r6, [r0, #0]
    516e:	9400      	str	r4, [sp, #0]
    5170:	4629      	mov	r1, r5
    5172:	6a34      	ldr	r4, [r6, #32]
    5174:	47a0      	blx	r4
    5176:	b004      	add	sp, #16
    5178:	bd70      	pop	{r4, r5, r6, pc}
    517a:	4619      	mov	r1, r3
    517c:	9203      	str	r2, [sp, #12]
    517e:	9302      	str	r3, [sp, #8]
    5180:	f000 f878 	bl	5274 <_ZNKSt9type_infoeqERKS_>
    5184:	9a03      	ldr	r2, [sp, #12]
    5186:	9b02      	ldr	r3, [sp, #8]
    5188:	2800      	cmp	r0, #0
    518a:	d0ee      	beq.n	516a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
    518c:	2006      	movs	r0, #6
    518e:	e7f2      	b.n	5176 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>

00005190 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    5190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5194:	b085      	sub	sp, #20
    5196:	4688      	mov	r8, r1
    5198:	4619      	mov	r1, r3
    519a:	461f      	mov	r7, r3
    519c:	4692      	mov	sl, r2
    519e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    51a0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    51a4:	9d11      	ldr	r5, [sp, #68]	; 0x44
    51a6:	4683      	mov	fp, r0
    51a8:	f000 f864 	bl	5274 <_ZNKSt9type_infoeqERKS_>
    51ac:	4604      	mov	r4, r0
    51ae:	b198      	cbz	r0, 51d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
    51b0:	f1b8 0f00 	cmp.w	r8, #0
    51b4:	602e      	str	r6, [r5, #0]
    51b6:	f885 a004 	strb.w	sl, [r5, #4]
    51ba:	db22      	blt.n	5202 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x72>
    51bc:	4446      	add	r6, r8
    51be:	2400      	movs	r4, #0
    51c0:	45b1      	cmp	r9, r6
    51c2:	bf14      	ite	ne
    51c4:	f04f 0901 	movne.w	r9, #1
    51c8:	f04f 0906 	moveq.w	r9, #6
    51cc:	4620      	mov	r0, r4
    51ce:	f885 9006 	strb.w	r9, [r5, #6]
    51d2:	b005      	add	sp, #20
    51d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51d8:	454e      	cmp	r6, r9
    51da:	d017      	beq.n	520c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    51dc:	f8db 0008 	ldr.w	r0, [fp, #8]
    51e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    51e2:	6804      	ldr	r4, [r0, #0]
    51e4:	9301      	str	r3, [sp, #4]
    51e6:	9600      	str	r6, [sp, #0]
    51e8:	f8cd 9008 	str.w	r9, [sp, #8]
    51ec:	9503      	str	r5, [sp, #12]
    51ee:	69e4      	ldr	r4, [r4, #28]
    51f0:	4641      	mov	r1, r8
    51f2:	4652      	mov	r2, sl
    51f4:	463b      	mov	r3, r7
    51f6:	47a0      	blx	r4
    51f8:	4604      	mov	r4, r0
    51fa:	4620      	mov	r0, r4
    51fc:	b005      	add	sp, #20
    51fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5202:	f118 0f02 	cmn.w	r8, #2
    5206:	d00a      	beq.n	521e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8e>
    5208:	2400      	movs	r4, #0
    520a:	e7f6      	b.n	51fa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
    520c:	4658      	mov	r0, fp
    520e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5210:	f000 f830 	bl	5274 <_ZNKSt9type_infoeqERKS_>
    5214:	2800      	cmp	r0, #0
    5216:	d0e1      	beq.n	51dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
    5218:	f885 a005 	strb.w	sl, [r5, #5]
    521c:	e7ed      	b.n	51fa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
    521e:	2301      	movs	r3, #1
    5220:	71ab      	strb	r3, [r5, #6]
    5222:	2400      	movs	r4, #0
    5224:	e7e9      	b.n	51fa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
    5226:	bf00      	nop

00005228 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    5228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    522a:	4607      	mov	r7, r0
    522c:	460e      	mov	r6, r1
    522e:	4615      	mov	r5, r2
    5230:	461c      	mov	r4, r3
    5232:	f000 f873 	bl	531c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    5236:	b930      	cbnz	r0, 5246 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1e>
    5238:	68b8      	ldr	r0, [r7, #8]
    523a:	6807      	ldr	r7, [r0, #0]
    523c:	4623      	mov	r3, r4
    523e:	4631      	mov	r1, r6
    5240:	462a      	mov	r2, r5
    5242:	69bc      	ldr	r4, [r7, #24]
    5244:	47a0      	blx	r4
    5246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005248 <_ZNSt9type_infoD1Ev>:
    5248:	4b01      	ldr	r3, [pc, #4]	; (5250 <_ZNSt9type_infoD1Ev+0x8>)
    524a:	6003      	str	r3, [r0, #0]
    524c:	4770      	bx	lr
    524e:	bf00      	nop
    5250:	00013080 	.word	0x00013080

00005254 <_ZNKSt9type_info14__is_pointer_pEv>:
    5254:	2000      	movs	r0, #0
    5256:	4770      	bx	lr

00005258 <_ZNKSt9type_info15__is_function_pEv>:
    5258:	2000      	movs	r0, #0
    525a:	4770      	bx	lr

0000525c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    525c:	2000      	movs	r0, #0
    525e:	4770      	bx	lr

00005260 <_ZNSt9type_infoD0Ev>:
    5260:	b510      	push	{r4, lr}
    5262:	4b03      	ldr	r3, [pc, #12]	; (5270 <_ZNSt9type_infoD0Ev+0x10>)
    5264:	6003      	str	r3, [r0, #0]
    5266:	4604      	mov	r4, r0
    5268:	f7ff f900 	bl	446c <_ZdlPv>
    526c:	4620      	mov	r0, r4
    526e:	bd10      	pop	{r4, pc}
    5270:	00013080 	.word	0x00013080

00005274 <_ZNKSt9type_infoeqERKS_>:
    5274:	4281      	cmp	r1, r0
    5276:	b508      	push	{r3, lr}
    5278:	d011      	beq.n	529e <_ZNKSt9type_infoeqERKS_+0x2a>
    527a:	6840      	ldr	r0, [r0, #4]
    527c:	7803      	ldrb	r3, [r0, #0]
    527e:	2b2a      	cmp	r3, #42	; 0x2a
    5280:	d00b      	beq.n	529a <_ZNKSt9type_infoeqERKS_+0x26>
    5282:	6849      	ldr	r1, [r1, #4]
    5284:	780b      	ldrb	r3, [r1, #0]
    5286:	2b2a      	cmp	r3, #42	; 0x2a
    5288:	bf08      	it	eq
    528a:	3101      	addeq	r1, #1
    528c:	f009 fc00 	bl	ea90 <strcmp>
    5290:	f1d0 0001 	rsbs	r0, r0, #1
    5294:	bf38      	it	cc
    5296:	2000      	movcc	r0, #0
    5298:	bd08      	pop	{r3, pc}
    529a:	2000      	movs	r0, #0
    529c:	bd08      	pop	{r3, pc}
    529e:	2001      	movs	r0, #1
    52a0:	bd08      	pop	{r3, pc}
    52a2:	bf00      	nop

000052a4 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    52a4:	f7ff bfe6 	b.w	5274 <_ZNKSt9type_infoeqERKS_>

000052a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    52a8:	b570      	push	{r4, r5, r6, lr}
    52aa:	6803      	ldr	r3, [r0, #0]
    52ac:	b084      	sub	sp, #16
    52ae:	2400      	movs	r4, #0
    52b0:	699e      	ldr	r6, [r3, #24]
    52b2:	9400      	str	r4, [sp, #0]
    52b4:	2310      	movs	r3, #16
    52b6:	4615      	mov	r5, r2
    52b8:	9302      	str	r3, [sp, #8]
    52ba:	6812      	ldr	r2, [r2, #0]
    52bc:	f88d 4004 	strb.w	r4, [sp, #4]
    52c0:	466b      	mov	r3, sp
    52c2:	9403      	str	r4, [sp, #12]
    52c4:	47b0      	blx	r6
    52c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    52ca:	f003 0306 	and.w	r3, r3, #6
    52ce:	2b06      	cmp	r3, #6
    52d0:	bf03      	ittte	eq
    52d2:	9b00      	ldreq	r3, [sp, #0]
    52d4:	602b      	streq	r3, [r5, #0]
    52d6:	2001      	moveq	r0, #1
    52d8:	4620      	movne	r0, r4
    52da:	b004      	add	sp, #16
    52dc:	bd70      	pop	{r4, r5, r6, pc}
    52de:	bf00      	nop

000052e0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    52e0:	9800      	ldr	r0, [sp, #0]
    52e2:	4290      	cmp	r0, r2
    52e4:	bf14      	ite	ne
    52e6:	2001      	movne	r0, #1
    52e8:	2006      	moveq	r0, #6
    52ea:	4770      	bx	lr

000052ec <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    52ec:	b510      	push	{r4, lr}
    52ee:	4b03      	ldr	r3, [pc, #12]	; (52fc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
    52f0:	6003      	str	r3, [r0, #0]
    52f2:	4604      	mov	r4, r0
    52f4:	f7ff ffa8 	bl	5248 <_ZNSt9type_infoD1Ev>
    52f8:	4620      	mov	r0, r4
    52fa:	bd10      	pop	{r4, pc}
    52fc:	000130a0 	.word	0x000130a0

00005300 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    5300:	b510      	push	{r4, lr}
    5302:	4b05      	ldr	r3, [pc, #20]	; (5318 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
    5304:	6003      	str	r3, [r0, #0]
    5306:	4604      	mov	r4, r0
    5308:	f7ff ff9e 	bl	5248 <_ZNSt9type_infoD1Ev>
    530c:	4620      	mov	r0, r4
    530e:	f7ff f8ad 	bl	446c <_ZdlPv>
    5312:	4620      	mov	r0, r4
    5314:	bd10      	pop	{r4, pc}
    5316:	bf00      	nop
    5318:	000130a0 	.word	0x000130a0

0000531c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    531c:	b538      	push	{r3, r4, r5, lr}
    531e:	4615      	mov	r5, r2
    5320:	461c      	mov	r4, r3
    5322:	f7ff ffa7 	bl	5274 <_ZNKSt9type_infoeqERKS_>
    5326:	b120      	cbz	r0, 5332 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
    5328:	2208      	movs	r2, #8
    532a:	2306      	movs	r3, #6
    532c:	6025      	str	r5, [r4, #0]
    532e:	60e2      	str	r2, [r4, #12]
    5330:	7123      	strb	r3, [r4, #4]
    5332:	bd38      	pop	{r3, r4, r5, pc}

00005334 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    5334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5336:	4616      	mov	r6, r2
    5338:	461c      	mov	r4, r3
    533a:	4607      	mov	r7, r0
    533c:	460d      	mov	r5, r1
    533e:	f7ff ff99 	bl	5274 <_ZNKSt9type_infoeqERKS_>
    5342:	b908      	cbnz	r0, 5348 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
    5344:	2c03      	cmp	r4, #3
    5346:	d900      	bls.n	534a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
    5348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    534a:	682b      	ldr	r3, [r5, #0]
    534c:	4639      	mov	r1, r7
    534e:	4632      	mov	r2, r6
    5350:	695b      	ldr	r3, [r3, #20]
    5352:	4628      	mov	r0, r5
    5354:	4798      	blx	r3
    5356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005358 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    5358:	b5f0      	push	{r4, r5, r6, r7, lr}
    535a:	b083      	sub	sp, #12
    535c:	4617      	mov	r7, r2
    535e:	9c08      	ldr	r4, [sp, #32]
    5360:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    5362:	42ac      	cmp	r4, r5
    5364:	4606      	mov	r6, r0
    5366:	d00c      	beq.n	5382 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
    5368:	4630      	mov	r0, r6
    536a:	4619      	mov	r1, r3
    536c:	f7ff ff82 	bl	5274 <_ZNKSt9type_infoeqERKS_>
    5370:	b120      	cbz	r0, 537c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
    5372:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5374:	2301      	movs	r3, #1
    5376:	600c      	str	r4, [r1, #0]
    5378:	710f      	strb	r7, [r1, #4]
    537a:	718b      	strb	r3, [r1, #6]
    537c:	2000      	movs	r0, #0
    537e:	b003      	add	sp, #12
    5380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5382:	9909      	ldr	r1, [sp, #36]	; 0x24
    5384:	9301      	str	r3, [sp, #4]
    5386:	f7ff ff75 	bl	5274 <_ZNKSt9type_infoeqERKS_>
    538a:	9b01      	ldr	r3, [sp, #4]
    538c:	2800      	cmp	r0, #0
    538e:	d0eb      	beq.n	5368 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x10>
    5390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5392:	7157      	strb	r7, [r2, #5]
    5394:	e7f2      	b.n	537c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
    5396:	bf00      	nop

00005398 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
    5398:	b570      	push	{r4, r5, r6, lr}
    539a:	4b3d      	ldr	r3, [pc, #244]	; (5490 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    539c:	781a      	ldrb	r2, [r3, #0]
    539e:	b082      	sub	sp, #8
    53a0:	2a00      	cmp	r2, #0
    53a2:	d136      	bne.n	5412 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7a>
    53a4:	2401      	movs	r4, #1
    53a6:	701c      	strb	r4, [r3, #0]
    53a8:	f005 fc42 	bl	ac30 <__cxa_current_exception_type>
    53ac:	2800      	cmp	r0, #0
    53ae:	d05c      	beq.n	546a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd2>
    53b0:	6840      	ldr	r0, [r0, #4]
    53b2:	7803      	ldrb	r3, [r0, #0]
    53b4:	2b2a      	cmp	r3, #42	; 0x2a
    53b6:	ab02      	add	r3, sp, #8
    53b8:	bf0c      	ite	eq
    53ba:	1905      	addeq	r5, r0, r4
    53bc:	4605      	movne	r5, r0
    53be:	2100      	movs	r1, #0
    53c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    53c4:	f843 2d04 	str.w	r2, [r3, #-4]!
    53c8:	4c32      	ldr	r4, [pc, #200]	; (5494 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    53ca:	460a      	mov	r2, r1
    53cc:	4628      	mov	r0, r5
    53ce:	f005 fbbf 	bl	ab50 <__cxa_demangle>
    53d2:	6823      	ldr	r3, [r4, #0]
    53d4:	4606      	mov	r6, r0
    53d6:	68db      	ldr	r3, [r3, #12]
    53d8:	482f      	ldr	r0, [pc, #188]	; (5498 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
    53da:	2101      	movs	r1, #1
    53dc:	2230      	movs	r2, #48	; 0x30
    53de:	f008 fc13 	bl	dc08 <fwrite>
    53e2:	9b01      	ldr	r3, [sp, #4]
    53e4:	b17b      	cbz	r3, 5406 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
    53e6:	6823      	ldr	r3, [r4, #0]
    53e8:	4628      	mov	r0, r5
    53ea:	68d9      	ldr	r1, [r3, #12]
    53ec:	f008 fa46 	bl	d87c <fputs>
    53f0:	6823      	ldr	r3, [r4, #0]
    53f2:	482a      	ldr	r0, [pc, #168]	; (549c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
    53f4:	68db      	ldr	r3, [r3, #12]
    53f6:	2101      	movs	r1, #1
    53f8:	2202      	movs	r2, #2
    53fa:	f008 fc05 	bl	dc08 <fwrite>
    53fe:	9b01      	ldr	r3, [sp, #4]
    5400:	b18b      	cbz	r3, 5426 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
    5402:	f7ff fe5b 	bl	50bc <__cxa_rethrow>
    5406:	6823      	ldr	r3, [r4, #0]
    5408:	4630      	mov	r0, r6
    540a:	68d9      	ldr	r1, [r3, #12]
    540c:	f008 fa36 	bl	d87c <fputs>
    5410:	e7ee      	b.n	53f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x58>
    5412:	4b20      	ldr	r3, [pc, #128]	; (5494 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    5414:	4822      	ldr	r0, [pc, #136]	; (54a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	2101      	movs	r1, #1
    541a:	68db      	ldr	r3, [r3, #12]
    541c:	221d      	movs	r2, #29
    541e:	f008 fbf3 	bl	dc08 <fwrite>
    5422:	f008 f9df 	bl	d7e4 <abort>
    5426:	4630      	mov	r0, r6
    5428:	f008 fc2e 	bl	dc88 <free>
    542c:	e7e9      	b.n	5402 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6a>
    542e:	2901      	cmp	r1, #1
    5430:	460d      	mov	r5, r1
    5432:	d127      	bne.n	5484 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xec>
    5434:	f7ff fa0c 	bl	4850 <__cxa_begin_catch>
    5438:	6803      	ldr	r3, [r0, #0]
    543a:	689b      	ldr	r3, [r3, #8]
    543c:	4798      	blx	r3
    543e:	6823      	ldr	r3, [r4, #0]
    5440:	4606      	mov	r6, r0
    5442:	68db      	ldr	r3, [r3, #12]
    5444:	4817      	ldr	r0, [pc, #92]	; (54a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
    5446:	4629      	mov	r1, r5
    5448:	220b      	movs	r2, #11
    544a:	f008 fbdd 	bl	dc08 <fwrite>
    544e:	6823      	ldr	r3, [r4, #0]
    5450:	4630      	mov	r0, r6
    5452:	68d9      	ldr	r1, [r3, #12]
    5454:	f008 fa12 	bl	d87c <fputs>
    5458:	6823      	ldr	r3, [r4, #0]
    545a:	200a      	movs	r0, #10
    545c:	68d9      	ldr	r1, [r3, #12]
    545e:	f008 f9d3 	bl	d808 <fputc>
    5462:	f7ff fa3b 	bl	48dc <__cxa_end_catch>
    5466:	f008 f9bd 	bl	d7e4 <abort>
    546a:	4b0a      	ldr	r3, [pc, #40]	; (5494 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    546c:	480e      	ldr	r0, [pc, #56]	; (54a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
    546e:	681b      	ldr	r3, [r3, #0]
    5470:	4621      	mov	r1, r4
    5472:	68db      	ldr	r3, [r3, #12]
    5474:	222d      	movs	r2, #45	; 0x2d
    5476:	f008 fbc7 	bl	dc08 <fwrite>
    547a:	e7f4      	b.n	5466 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
    547c:	f7ff fa2e 	bl	48dc <__cxa_end_catch>
    5480:	f7ff f886 	bl	4590 <__cxa_end_cleanup>
    5484:	f7ff f9e4 	bl	4850 <__cxa_begin_catch>
    5488:	f7ff fa28 	bl	48dc <__cxa_end_catch>
    548c:	e7eb      	b.n	5466 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
    548e:	bf00      	nop
    5490:	1fff9c48 	.word	0x1fff9c48
    5494:	1fff88f0 	.word	0x1fff88f0
    5498:	00013118 	.word	0x00013118
    549c:	0001314c 	.word	0x0001314c
    54a0:	000130f8 	.word	0x000130f8
    54a4:	00013180 	.word	0x00013180
    54a8:	00013150 	.word	0x00013150

000054ac <d_make_comp>:
    54ac:	b470      	push	{r4, r5, r6}
    54ae:	1e4c      	subs	r4, r1, #1
    54b0:	2c4a      	cmp	r4, #74	; 0x4a
    54b2:	d82c      	bhi.n	550e <d_make_comp+0x62>
    54b4:	e8df f004 	tbb	[pc, r4]
    54b8:	3c3c3c3c 	.word	0x3c3c3c3c
    54bc:	2b2b2b2b 	.word	0x2b2b2b2b
    54c0:	263c2626 	.word	0x263c2626
    54c4:	26262626 	.word	0x26262626
    54c8:	26262626 	.word	0x26262626
    54cc:	2b262626 	.word	0x2b262626
    54d0:	27272727 	.word	0x27272727
    54d4:	27272727 	.word	0x27272727
    54d8:	2626263c 	.word	0x2626263c
    54dc:	262b2626 	.word	0x262b2626
    54e0:	2b3c3d27 	.word	0x2b3c3d27
    54e4:	3d27273c 	.word	0x3d27273c
    54e8:	26262b2b 	.word	0x26262b2b
    54ec:	3c3c3c3c 	.word	0x3c3c3c3c
    54f0:	3c3c263c 	.word	0x3c3c263c
    54f4:	2b2b3c26 	.word	0x2b2b3c26
    54f8:	2b262626 	.word	0x2b262626
    54fc:	26262b2b 	.word	0x26262b2b
    5500:	3c26      	.short	0x3c26
    5502:	3c          	.byte	0x3c
    5503:	00          	.byte	0x00
    5504:	b1ca      	cbz	r2, 553a <d_make_comp+0x8e>
    5506:	6944      	ldr	r4, [r0, #20]
    5508:	6985      	ldr	r5, [r0, #24]
    550a:	42ac      	cmp	r4, r5
    550c:	db02      	blt.n	5514 <d_make_comp+0x68>
    550e:	2000      	movs	r0, #0
    5510:	bc70      	pop	{r4, r5, r6}
    5512:	4770      	bx	lr
    5514:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    5518:	6906      	ldr	r6, [r0, #16]
    551a:	3401      	adds	r4, #1
    551c:	00ad      	lsls	r5, r5, #2
    551e:	6144      	str	r4, [r0, #20]
    5520:	1974      	adds	r4, r6, r5
    5522:	d00c      	beq.n	553e <d_make_comp+0x92>
    5524:	5571      	strb	r1, [r6, r5]
    5526:	6062      	str	r2, [r4, #4]
    5528:	60a3      	str	r3, [r4, #8]
    552a:	4620      	mov	r0, r4
    552c:	bc70      	pop	{r4, r5, r6}
    552e:	4770      	bx	lr
    5530:	b11a      	cbz	r2, 553a <d_make_comp+0x8e>
    5532:	2b00      	cmp	r3, #0
    5534:	d1e7      	bne.n	5506 <d_make_comp+0x5a>
    5536:	4618      	mov	r0, r3
    5538:	e7ea      	b.n	5510 <d_make_comp+0x64>
    553a:	4610      	mov	r0, r2
    553c:	e7e8      	b.n	5510 <d_make_comp+0x64>
    553e:	4620      	mov	r0, r4
    5540:	e7e6      	b.n	5510 <d_make_comp+0x64>
    5542:	bf00      	nop

00005544 <d_make_name>:
    5544:	b430      	push	{r4, r5}
    5546:	6943      	ldr	r3, [r0, #20]
    5548:	6984      	ldr	r4, [r0, #24]
    554a:	42a3      	cmp	r3, r4
    554c:	da09      	bge.n	5562 <d_make_name+0x1e>
    554e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    5552:	6905      	ldr	r5, [r0, #16]
    5554:	3301      	adds	r3, #1
    5556:	00a4      	lsls	r4, r4, #2
    5558:	6143      	str	r3, [r0, #20]
    555a:	192b      	adds	r3, r5, r4
    555c:	d001      	beq.n	5562 <d_make_name+0x1e>
    555e:	b101      	cbz	r1, 5562 <d_make_name+0x1e>
    5560:	b912      	cbnz	r2, 5568 <d_make_name+0x24>
    5562:	2000      	movs	r0, #0
    5564:	bc30      	pop	{r4, r5}
    5566:	4770      	bx	lr
    5568:	2000      	movs	r0, #0
    556a:	5528      	strb	r0, [r5, r4]
    556c:	6059      	str	r1, [r3, #4]
    556e:	609a      	str	r2, [r3, #8]
    5570:	4618      	mov	r0, r3
    5572:	bc30      	pop	{r4, r5}
    5574:	4770      	bx	lr
    5576:	bf00      	nop

00005578 <d_cv_qualifiers>:
    5578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    557c:	68c5      	ldr	r5, [r0, #12]
    557e:	4604      	mov	r4, r0
    5580:	4688      	mov	r8, r1
    5582:	4617      	mov	r7, r2
    5584:	782b      	ldrb	r3, [r5, #0]
    5586:	460e      	mov	r6, r1
    5588:	e017      	b.n	55ba <d_cv_qualifiers+0x42>
    558a:	2b56      	cmp	r3, #86	; 0x56
    558c:	d022      	beq.n	55d4 <d_cv_qualifiers+0x5c>
    558e:	2b4b      	cmp	r3, #75	; 0x4b
    5590:	d12d      	bne.n	55ee <d_cv_qualifiers+0x76>
    5592:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5594:	3501      	adds	r5, #1
    5596:	2f00      	cmp	r7, #0
    5598:	f103 0306 	add.w	r3, r3, #6
    559c:	60e5      	str	r5, [r4, #12]
    559e:	6323      	str	r3, [r4, #48]	; 0x30
    55a0:	bf0c      	ite	eq
    55a2:	211b      	moveq	r1, #27
    55a4:	211e      	movne	r1, #30
    55a6:	2200      	movs	r2, #0
    55a8:	4613      	mov	r3, r2
    55aa:	4620      	mov	r0, r4
    55ac:	f7ff ff7e 	bl	54ac <d_make_comp>
    55b0:	6030      	str	r0, [r6, #0]
    55b2:	b1d0      	cbz	r0, 55ea <d_cv_qualifiers+0x72>
    55b4:	68e5      	ldr	r5, [r4, #12]
    55b6:	782b      	ldrb	r3, [r5, #0]
    55b8:	1d06      	adds	r6, r0, #4
    55ba:	2b72      	cmp	r3, #114	; 0x72
    55bc:	d1e5      	bne.n	558a <d_cv_qualifiers+0x12>
    55be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    55c0:	3501      	adds	r5, #1
    55c2:	2f00      	cmp	r7, #0
    55c4:	f103 0309 	add.w	r3, r3, #9
    55c8:	60e5      	str	r5, [r4, #12]
    55ca:	6323      	str	r3, [r4, #48]	; 0x30
    55cc:	bf0c      	ite	eq
    55ce:	2119      	moveq	r1, #25
    55d0:	211c      	movne	r1, #28
    55d2:	e7e8      	b.n	55a6 <d_cv_qualifiers+0x2e>
    55d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    55d6:	3501      	adds	r5, #1
    55d8:	2f00      	cmp	r7, #0
    55da:	f103 0309 	add.w	r3, r3, #9
    55de:	60e5      	str	r5, [r4, #12]
    55e0:	6323      	str	r3, [r4, #48]	; 0x30
    55e2:	bf0c      	ite	eq
    55e4:	211a      	moveq	r1, #26
    55e6:	211d      	movne	r1, #29
    55e8:	e7dd      	b.n	55a6 <d_cv_qualifiers+0x2e>
    55ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55ee:	b9bf      	cbnz	r7, 5620 <d_cv_qualifiers+0xa8>
    55f0:	2b46      	cmp	r3, #70	; 0x46
    55f2:	d115      	bne.n	5620 <d_cv_qualifiers+0xa8>
    55f4:	4546      	cmp	r6, r8
    55f6:	d013      	beq.n	5620 <d_cv_qualifiers+0xa8>
    55f8:	241d      	movs	r4, #29
    55fa:	201e      	movs	r0, #30
    55fc:	211c      	movs	r1, #28
    55fe:	e008      	b.n	5612 <d_cv_qualifiers+0x9a>
    5600:	2a1b      	cmp	r2, #27
    5602:	d010      	beq.n	5626 <d_cv_qualifiers+0xae>
    5604:	2a19      	cmp	r2, #25
    5606:	d100      	bne.n	560a <d_cv_qualifiers+0x92>
    5608:	7019      	strb	r1, [r3, #0]
    560a:	f103 0804 	add.w	r8, r3, #4
    560e:	4546      	cmp	r6, r8
    5610:	d006      	beq.n	5620 <d_cv_qualifiers+0xa8>
    5612:	f8d8 3000 	ldr.w	r3, [r8]
    5616:	781a      	ldrb	r2, [r3, #0]
    5618:	2a1a      	cmp	r2, #26
    561a:	d1f1      	bne.n	5600 <d_cv_qualifiers+0x88>
    561c:	701c      	strb	r4, [r3, #0]
    561e:	e7f4      	b.n	560a <d_cv_qualifiers+0x92>
    5620:	4630      	mov	r0, r6
    5622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5626:	7018      	strb	r0, [r3, #0]
    5628:	e7ef      	b.n	560a <d_cv_qualifiers+0x92>
    562a:	bf00      	nop

0000562c <d_ref_qualifier>:
    562c:	b410      	push	{r4}
    562e:	68c4      	ldr	r4, [r0, #12]
    5630:	7823      	ldrb	r3, [r4, #0]
    5632:	2b52      	cmp	r3, #82	; 0x52
    5634:	460a      	mov	r2, r1
    5636:	d010      	beq.n	565a <d_ref_qualifier+0x2e>
    5638:	2b4f      	cmp	r3, #79	; 0x4f
    563a:	d003      	beq.n	5644 <d_ref_qualifier+0x18>
    563c:	4608      	mov	r0, r1
    563e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5642:	4770      	bx	lr
    5644:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5646:	3303      	adds	r3, #3
    5648:	6303      	str	r3, [r0, #48]	; 0x30
    564a:	2120      	movs	r1, #32
    564c:	3401      	adds	r4, #1
    564e:	60c4      	str	r4, [r0, #12]
    5650:	2300      	movs	r3, #0
    5652:	f85d 4b04 	ldr.w	r4, [sp], #4
    5656:	f7ff bf29 	b.w	54ac <d_make_comp>
    565a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    565c:	3302      	adds	r3, #2
    565e:	6303      	str	r3, [r0, #48]	; 0x30
    5660:	211f      	movs	r1, #31
    5662:	e7f3      	b.n	564c <d_ref_qualifier+0x20>

00005664 <d_clone_suffix>:
    5664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5668:	460f      	mov	r7, r1
    566a:	68c1      	ldr	r1, [r0, #12]
    566c:	780c      	ldrb	r4, [r1, #0]
    566e:	2c2e      	cmp	r4, #46	; 0x2e
    5670:	4680      	mov	r8, r0
    5672:	d027      	beq.n	56c4 <d_clone_suffix+0x60>
    5674:	460b      	mov	r3, r1
    5676:	2c2e      	cmp	r4, #46	; 0x2e
    5678:	d114      	bne.n	56a4 <d_clone_suffix+0x40>
    567a:	785c      	ldrb	r4, [r3, #1]
    567c:	3c30      	subs	r4, #48	; 0x30
    567e:	2c09      	cmp	r4, #9
    5680:	d810      	bhi.n	56a4 <d_clone_suffix+0x40>
    5682:	789c      	ldrb	r4, [r3, #2]
    5684:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    5688:	2a09      	cmp	r2, #9
    568a:	f103 0002 	add.w	r0, r3, #2
    568e:	d817      	bhi.n	56c0 <d_clone_suffix+0x5c>
    5690:	1cdd      	adds	r5, r3, #3
    5692:	462b      	mov	r3, r5
    5694:	3501      	adds	r5, #1
    5696:	781c      	ldrb	r4, [r3, #0]
    5698:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    569c:	2e09      	cmp	r6, #9
    569e:	d9f8      	bls.n	5692 <d_clone_suffix+0x2e>
    56a0:	2c2e      	cmp	r4, #46	; 0x2e
    56a2:	d0ea      	beq.n	567a <d_clone_suffix+0x16>
    56a4:	1a5a      	subs	r2, r3, r1
    56a6:	f8c8 300c 	str.w	r3, [r8, #12]
    56aa:	4640      	mov	r0, r8
    56ac:	f7ff ff4a 	bl	5544 <d_make_name>
    56b0:	463a      	mov	r2, r7
    56b2:	4603      	mov	r3, r0
    56b4:	214b      	movs	r1, #75	; 0x4b
    56b6:	4640      	mov	r0, r8
    56b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    56bc:	f7ff bef6 	b.w	54ac <d_make_comp>
    56c0:	4603      	mov	r3, r0
    56c2:	e7d8      	b.n	5676 <d_clone_suffix+0x12>
    56c4:	784b      	ldrb	r3, [r1, #1]
    56c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    56ca:	2a19      	cmp	r2, #25
    56cc:	d80a      	bhi.n	56e4 <d_clone_suffix+0x80>
    56ce:	1c8a      	adds	r2, r1, #2
    56d0:	4613      	mov	r3, r2
    56d2:	3201      	adds	r2, #1
    56d4:	781c      	ldrb	r4, [r3, #0]
    56d6:	f1a4 0061 	sub.w	r0, r4, #97	; 0x61
    56da:	2819      	cmp	r0, #25
    56dc:	d9f8      	bls.n	56d0 <d_clone_suffix+0x6c>
    56de:	2c5f      	cmp	r4, #95	; 0x5f
    56e0:	d0f6      	beq.n	56d0 <d_clone_suffix+0x6c>
    56e2:	e7c8      	b.n	5676 <d_clone_suffix+0x12>
    56e4:	2b5f      	cmp	r3, #95	; 0x5f
    56e6:	d1c5      	bne.n	5674 <d_clone_suffix+0x10>
    56e8:	e7f1      	b.n	56ce <d_clone_suffix+0x6a>
    56ea:	bf00      	nop

000056ec <d_substitution>:
    56ec:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    56f0:	68c2      	ldr	r2, [r0, #12]
    56f2:	7813      	ldrb	r3, [r2, #0]
    56f4:	2b53      	cmp	r3, #83	; 0x53
    56f6:	d003      	beq.n	5700 <d_substitution+0x14>
    56f8:	2000      	movs	r0, #0
    56fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    56fe:	4770      	bx	lr
    5700:	1c53      	adds	r3, r2, #1
    5702:	60c3      	str	r3, [r0, #12]
    5704:	7853      	ldrb	r3, [r2, #1]
    5706:	b1ab      	cbz	r3, 5734 <d_substitution+0x48>
    5708:	1c93      	adds	r3, r2, #2
    570a:	60c3      	str	r3, [r0, #12]
    570c:	7853      	ldrb	r3, [r2, #1]
    570e:	2b5f      	cmp	r3, #95	; 0x5f
    5710:	d152      	bne.n	57b8 <d_substitution+0xcc>
    5712:	2100      	movs	r1, #0
    5714:	6a03      	ldr	r3, [r0, #32]
    5716:	4299      	cmp	r1, r3
    5718:	d2ee      	bcs.n	56f8 <d_substitution+0xc>
    571a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    571c:	69c2      	ldr	r2, [r0, #28]
    571e:	3301      	adds	r3, #1
    5720:	6283      	str	r3, [r0, #40]	; 0x28
    5722:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    5726:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    572a:	4770      	bx	lr
    572c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    5730:	2a19      	cmp	r2, #25
    5732:	d946      	bls.n	57c2 <d_substitution+0xd6>
    5734:	6882      	ldr	r2, [r0, #8]
    5736:	0712      	lsls	r2, r2, #28
    5738:	d46a      	bmi.n	5810 <d_substitution+0x124>
    573a:	2900      	cmp	r1, #0
    573c:	d16a      	bne.n	5814 <d_substitution+0x128>
    573e:	4a3f      	ldr	r2, [pc, #252]	; (583c <d_substitution+0x150>)
    5740:	f102 05c4 	add.w	r5, r2, #196	; 0xc4
    5744:	e002      	b.n	574c <d_substitution+0x60>
    5746:	321c      	adds	r2, #28
    5748:	42aa      	cmp	r2, r5
    574a:	d0d5      	beq.n	56f8 <d_substitution+0xc>
    574c:	7814      	ldrb	r4, [r2, #0]
    574e:	429c      	cmp	r4, r3
    5750:	d1f9      	bne.n	5746 <d_substitution+0x5a>
    5752:	6955      	ldr	r5, [r2, #20]
    5754:	2d00      	cmp	r5, #0
    5756:	d06a      	beq.n	582e <d_substitution+0x142>
    5758:	6943      	ldr	r3, [r0, #20]
    575a:	6984      	ldr	r4, [r0, #24]
    575c:	f8d2 8018 	ldr.w	r8, [r2, #24]
    5760:	42a3      	cmp	r3, r4
    5762:	da62      	bge.n	582a <d_substitution+0x13e>
    5764:	eb03 0743 	add.w	r7, r3, r3, lsl #1
    5768:	f8d0 c010 	ldr.w	ip, [r0, #16]
    576c:	00bf      	lsls	r7, r7, #2
    576e:	3301      	adds	r3, #1
    5770:	eb1c 0607 	adds.w	r6, ip, r7
    5774:	6143      	str	r3, [r0, #20]
    5776:	d05f      	beq.n	5838 <d_substitution+0x14c>
    5778:	f04f 0918 	mov.w	r9, #24
    577c:	f80c 9007 	strb.w	r9, [ip, r7]
    5780:	4637      	mov	r7, r6
    5782:	6075      	str	r5, [r6, #4]
    5784:	f8c6 8008 	str.w	r8, [r6, #8]
    5788:	62c7      	str	r7, [r0, #44]	; 0x2c
    578a:	2900      	cmp	r1, #0
    578c:	d04a      	beq.n	5824 <d_substitution+0x138>
    578e:	68d5      	ldr	r5, [r2, #12]
    5790:	6912      	ldr	r2, [r2, #16]
    5792:	6b01      	ldr	r1, [r0, #48]	; 0x30
    5794:	42a3      	cmp	r3, r4
    5796:	4411      	add	r1, r2
    5798:	6301      	str	r1, [r0, #48]	; 0x30
    579a:	daad      	bge.n	56f8 <d_substitution+0xc>
    579c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    57a0:	6904      	ldr	r4, [r0, #16]
    57a2:	3301      	adds	r3, #1
    57a4:	0089      	lsls	r1, r1, #2
    57a6:	6143      	str	r3, [r0, #20]
    57a8:	1863      	adds	r3, r4, r1
    57aa:	d043      	beq.n	5834 <d_substitution+0x148>
    57ac:	2018      	movs	r0, #24
    57ae:	5460      	strb	r0, [r4, r1]
    57b0:	4618      	mov	r0, r3
    57b2:	605d      	str	r5, [r3, #4]
    57b4:	609a      	str	r2, [r3, #8]
    57b6:	e7a0      	b.n	56fa <d_substitution+0xe>
    57b8:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    57bc:	b2ea      	uxtb	r2, r5
    57be:	2a09      	cmp	r2, #9
    57c0:	d8b4      	bhi.n	572c <d_substitution+0x40>
    57c2:	2200      	movs	r2, #0
    57c4:	e012      	b.n	57ec <d_substitution+0x100>
    57c6:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
    57ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    57ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    57d2:	428a      	cmp	r2, r1
    57d4:	d890      	bhi.n	56f8 <d_substitution+0xc>
    57d6:	68c2      	ldr	r2, [r0, #12]
    57d8:	7813      	ldrb	r3, [r2, #0]
    57da:	1c54      	adds	r4, r2, #1
    57dc:	b11b      	cbz	r3, 57e6 <d_substitution+0xfa>
    57de:	60c4      	str	r4, [r0, #12]
    57e0:	7813      	ldrb	r3, [r2, #0]
    57e2:	2b5f      	cmp	r3, #95	; 0x5f
    57e4:	d012      	beq.n	580c <d_substitution+0x120>
    57e6:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    57ea:	460a      	mov	r2, r1
    57ec:	b2e9      	uxtb	r1, r5
    57ee:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
    57f2:	2909      	cmp	r1, #9
    57f4:	b2e4      	uxtb	r4, r4
    57f6:	d9e6      	bls.n	57c6 <d_substitution+0xda>
    57f8:	2c19      	cmp	r4, #25
    57fa:	f63f af7d 	bhi.w	56f8 <d_substitution+0xc>
    57fe:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
    5802:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5806:	f1a3 0137 	sub.w	r1, r3, #55	; 0x37
    580a:	e7e2      	b.n	57d2 <d_substitution+0xe6>
    580c:	3101      	adds	r1, #1
    580e:	e781      	b.n	5714 <d_substitution+0x28>
    5810:	2101      	movs	r1, #1
    5812:	e794      	b.n	573e <d_substitution+0x52>
    5814:	68c2      	ldr	r2, [r0, #12]
    5816:	7811      	ldrb	r1, [r2, #0]
    5818:	3943      	subs	r1, #67	; 0x43
    581a:	2901      	cmp	r1, #1
    581c:	bf8c      	ite	hi
    581e:	2100      	movhi	r1, #0
    5820:	2101      	movls	r1, #1
    5822:	e78c      	b.n	573e <d_substitution+0x52>
    5824:	6855      	ldr	r5, [r2, #4]
    5826:	6892      	ldr	r2, [r2, #8]
    5828:	e7b3      	b.n	5792 <d_substitution+0xa6>
    582a:	2700      	movs	r7, #0
    582c:	e7ac      	b.n	5788 <d_substitution+0x9c>
    582e:	6984      	ldr	r4, [r0, #24]
    5830:	6943      	ldr	r3, [r0, #20]
    5832:	e7aa      	b.n	578a <d_substitution+0x9e>
    5834:	4618      	mov	r0, r3
    5836:	e760      	b.n	56fa <d_substitution+0xe>
    5838:	4637      	mov	r7, r6
    583a:	e7a5      	b.n	5788 <d_substitution+0x9c>
    583c:	0001318c 	.word	0x0001318c

00005840 <d_append_char>:
    5840:	b570      	push	{r4, r5, r6, lr}
    5842:	460d      	mov	r5, r1
    5844:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    5848:	29ff      	cmp	r1, #255	; 0xff
    584a:	4604      	mov	r4, r0
    584c:	d006      	beq.n	585c <d_append_char+0x1c>
    584e:	1c4a      	adds	r2, r1, #1
    5850:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    5854:	5465      	strb	r5, [r4, r1]
    5856:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    585a:	bd70      	pop	{r4, r5, r6, pc}
    585c:	2600      	movs	r6, #0
    585e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    5862:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    5866:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    586a:	4798      	blx	r3
    586c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5870:	4631      	mov	r1, r6
    5872:	1c5a      	adds	r2, r3, #1
    5874:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5878:	2201      	movs	r2, #1
    587a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    587e:	5465      	strb	r5, [r4, r1]
    5880:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    5884:	bd70      	pop	{r4, r5, r6, pc}
    5886:	bf00      	nop

00005888 <d_number.isra.0>:
    5888:	b470      	push	{r4, r5, r6}
    588a:	6802      	ldr	r2, [r0, #0]
    588c:	7813      	ldrb	r3, [r2, #0]
    588e:	2b6e      	cmp	r3, #110	; 0x6e
    5890:	4605      	mov	r5, r0
    5892:	d018      	beq.n	58c6 <d_number.isra.0+0x3e>
    5894:	2600      	movs	r6, #0
    5896:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    589a:	2a09      	cmp	r2, #9
    589c:	d818      	bhi.n	58d0 <d_number.isra.0+0x48>
    589e:	682a      	ldr	r2, [r5, #0]
    58a0:	2000      	movs	r0, #0
    58a2:	3201      	adds	r2, #1
    58a4:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    58a8:	602a      	str	r2, [r5, #0]
    58aa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    58ae:	f812 3b01 	ldrb.w	r3, [r2], #1
    58b2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    58b6:	2909      	cmp	r1, #9
    58b8:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
    58bc:	d9f2      	bls.n	58a4 <d_number.isra.0+0x1c>
    58be:	b106      	cbz	r6, 58c2 <d_number.isra.0+0x3a>
    58c0:	4240      	negs	r0, r0
    58c2:	bc70      	pop	{r4, r5, r6}
    58c4:	4770      	bx	lr
    58c6:	1c53      	adds	r3, r2, #1
    58c8:	6003      	str	r3, [r0, #0]
    58ca:	7853      	ldrb	r3, [r2, #1]
    58cc:	2601      	movs	r6, #1
    58ce:	e7e2      	b.n	5896 <d_number.isra.0+0xe>
    58d0:	2000      	movs	r0, #0
    58d2:	e7f4      	b.n	58be <d_number.isra.0+0x36>

000058d4 <d_number_component>:
    58d4:	6943      	ldr	r3, [r0, #20]
    58d6:	6982      	ldr	r2, [r0, #24]
    58d8:	4293      	cmp	r3, r2
    58da:	b510      	push	{r4, lr}
    58dc:	da13      	bge.n	5906 <d_number_component+0x32>
    58de:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    58e2:	6901      	ldr	r1, [r0, #16]
    58e4:	0092      	lsls	r2, r2, #2
    58e6:	3301      	adds	r3, #1
    58e8:	188c      	adds	r4, r1, r2
    58ea:	6143      	str	r3, [r0, #20]
    58ec:	d008      	beq.n	5900 <d_number_component+0x2c>
    58ee:	2340      	movs	r3, #64	; 0x40
    58f0:	548b      	strb	r3, [r1, r2]
    58f2:	300c      	adds	r0, #12
    58f4:	f7ff ffc8 	bl	5888 <d_number.isra.0>
    58f8:	4623      	mov	r3, r4
    58fa:	6060      	str	r0, [r4, #4]
    58fc:	4618      	mov	r0, r3
    58fe:	bd10      	pop	{r4, pc}
    5900:	4623      	mov	r3, r4
    5902:	4618      	mov	r0, r3
    5904:	bd10      	pop	{r4, pc}
    5906:	2300      	movs	r3, #0
    5908:	4618      	mov	r0, r3
    590a:	bd10      	pop	{r4, pc}

0000590c <d_compact_number>:
    590c:	b510      	push	{r4, lr}
    590e:	68c3      	ldr	r3, [r0, #12]
    5910:	781a      	ldrb	r2, [r3, #0]
    5912:	2a5f      	cmp	r2, #95	; 0x5f
    5914:	4604      	mov	r4, r0
    5916:	d00b      	beq.n	5930 <d_compact_number+0x24>
    5918:	2a6e      	cmp	r2, #110	; 0x6e
    591a:	d006      	beq.n	592a <d_compact_number+0x1e>
    591c:	300c      	adds	r0, #12
    591e:	f7ff ffb3 	bl	5888 <d_number.isra.0>
    5922:	68e3      	ldr	r3, [r4, #12]
    5924:	781a      	ldrb	r2, [r3, #0]
    5926:	2a5f      	cmp	r2, #95	; 0x5f
    5928:	d006      	beq.n	5938 <d_compact_number+0x2c>
    592a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    592e:	bd10      	pop	{r4, pc}
    5930:	2000      	movs	r0, #0
    5932:	3301      	adds	r3, #1
    5934:	60e3      	str	r3, [r4, #12]
    5936:	bd10      	pop	{r4, pc}
    5938:	3001      	adds	r0, #1
    593a:	e7fa      	b.n	5932 <d_compact_number+0x26>

0000593c <d_template_param>:
    593c:	b538      	push	{r3, r4, r5, lr}
    593e:	68c3      	ldr	r3, [r0, #12]
    5940:	781a      	ldrb	r2, [r3, #0]
    5942:	2a54      	cmp	r2, #84	; 0x54
    5944:	4604      	mov	r4, r0
    5946:	d001      	beq.n	594c <d_template_param+0x10>
    5948:	2000      	movs	r0, #0
    594a:	bd38      	pop	{r3, r4, r5, pc}
    594c:	3301      	adds	r3, #1
    594e:	60c3      	str	r3, [r0, #12]
    5950:	f7ff ffdc 	bl	590c <d_compact_number>
    5954:	1e05      	subs	r5, r0, #0
    5956:	dbf7      	blt.n	5948 <d_template_param+0xc>
    5958:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    595a:	6963      	ldr	r3, [r4, #20]
    595c:	69a2      	ldr	r2, [r4, #24]
    595e:	3101      	adds	r1, #1
    5960:	4293      	cmp	r3, r2
    5962:	62a1      	str	r1, [r4, #40]	; 0x28
    5964:	daf0      	bge.n	5948 <d_template_param+0xc>
    5966:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    596a:	6921      	ldr	r1, [r4, #16]
    596c:	3301      	adds	r3, #1
    596e:	0092      	lsls	r2, r2, #2
    5970:	6163      	str	r3, [r4, #20]
    5972:	188b      	adds	r3, r1, r2
    5974:	d0e8      	beq.n	5948 <d_template_param+0xc>
    5976:	2405      	movs	r4, #5
    5978:	548c      	strb	r4, [r1, r2]
    597a:	605d      	str	r5, [r3, #4]
    597c:	4618      	mov	r0, r3
    597e:	bd38      	pop	{r3, r4, r5, pc}

00005980 <d_discriminator>:
    5980:	b508      	push	{r3, lr}
    5982:	68c3      	ldr	r3, [r0, #12]
    5984:	781a      	ldrb	r2, [r3, #0]
    5986:	2a5f      	cmp	r2, #95	; 0x5f
    5988:	d001      	beq.n	598e <d_discriminator+0xe>
    598a:	2001      	movs	r0, #1
    598c:	bd08      	pop	{r3, pc}
    598e:	3301      	adds	r3, #1
    5990:	f840 3f0c 	str.w	r3, [r0, #12]!
    5994:	f7ff ff78 	bl	5888 <d_number.isra.0>
    5998:	43c0      	mvns	r0, r0
    599a:	0fc0      	lsrs	r0, r0, #31
    599c:	bd08      	pop	{r3, pc}
    599e:	bf00      	nop

000059a0 <d_source_name>:
    59a0:	b570      	push	{r4, r5, r6, lr}
    59a2:	4604      	mov	r4, r0
    59a4:	300c      	adds	r0, #12
    59a6:	f7ff ff6f 	bl	5888 <d_number.isra.0>
    59aa:	1e06      	subs	r6, r0, #0
    59ac:	dd32      	ble.n	5a14 <d_source_name+0x74>
    59ae:	68e5      	ldr	r5, [r4, #12]
    59b0:	6863      	ldr	r3, [r4, #4]
    59b2:	1b5b      	subs	r3, r3, r5
    59b4:	429e      	cmp	r6, r3
    59b6:	dc2f      	bgt.n	5a18 <d_source_name+0x78>
    59b8:	68a2      	ldr	r2, [r4, #8]
    59ba:	19ab      	adds	r3, r5, r6
    59bc:	0752      	lsls	r2, r2, #29
    59be:	60e3      	str	r3, [r4, #12]
    59c0:	d415      	bmi.n	59ee <d_source_name+0x4e>
    59c2:	2e09      	cmp	r6, #9
    59c4:	dd0c      	ble.n	59e0 <d_source_name+0x40>
    59c6:	4628      	mov	r0, r5
    59c8:	4914      	ldr	r1, [pc, #80]	; (5a1c <d_source_name+0x7c>)
    59ca:	2208      	movs	r2, #8
    59cc:	f008 fc48 	bl	e260 <memcmp>
    59d0:	b930      	cbnz	r0, 59e0 <d_source_name+0x40>
    59d2:	7a2b      	ldrb	r3, [r5, #8]
    59d4:	2b2e      	cmp	r3, #46	; 0x2e
    59d6:	d010      	beq.n	59fa <d_source_name+0x5a>
    59d8:	2b5f      	cmp	r3, #95	; 0x5f
    59da:	d00e      	beq.n	59fa <d_source_name+0x5a>
    59dc:	2b24      	cmp	r3, #36	; 0x24
    59de:	d00c      	beq.n	59fa <d_source_name+0x5a>
    59e0:	4629      	mov	r1, r5
    59e2:	4632      	mov	r2, r6
    59e4:	4620      	mov	r0, r4
    59e6:	f7ff fdad 	bl	5544 <d_make_name>
    59ea:	62e0      	str	r0, [r4, #44]	; 0x2c
    59ec:	bd70      	pop	{r4, r5, r6, pc}
    59ee:	5daa      	ldrb	r2, [r5, r6]
    59f0:	2a24      	cmp	r2, #36	; 0x24
    59f2:	bf04      	itt	eq
    59f4:	3301      	addeq	r3, #1
    59f6:	60e3      	streq	r3, [r4, #12]
    59f8:	e7e3      	b.n	59c2 <d_source_name+0x22>
    59fa:	7a6b      	ldrb	r3, [r5, #9]
    59fc:	2b4e      	cmp	r3, #78	; 0x4e
    59fe:	d1ef      	bne.n	59e0 <d_source_name+0x40>
    5a00:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5a02:	4907      	ldr	r1, [pc, #28]	; (5a20 <d_source_name+0x80>)
    5a04:	3316      	adds	r3, #22
    5a06:	1b9e      	subs	r6, r3, r6
    5a08:	6326      	str	r6, [r4, #48]	; 0x30
    5a0a:	4620      	mov	r0, r4
    5a0c:	2215      	movs	r2, #21
    5a0e:	f7ff fd99 	bl	5544 <d_make_name>
    5a12:	e7ea      	b.n	59ea <d_source_name+0x4a>
    5a14:	2000      	movs	r0, #0
    5a16:	bd70      	pop	{r4, r5, r6, pc}
    5a18:	2000      	movs	r0, #0
    5a1a:	e7e6      	b.n	59ea <d_source_name+0x4a>
    5a1c:	000138c4 	.word	0x000138c4
    5a20:	000138d0 	.word	0x000138d0

00005a24 <d_call_offset>:
    5a24:	b538      	push	{r3, r4, r5, lr}
    5a26:	4604      	mov	r4, r0
    5a28:	b929      	cbnz	r1, 5a36 <d_call_offset+0x12>
    5a2a:	68c3      	ldr	r3, [r0, #12]
    5a2c:	781a      	ldrb	r2, [r3, #0]
    5a2e:	b132      	cbz	r2, 5a3e <d_call_offset+0x1a>
    5a30:	1c5a      	adds	r2, r3, #1
    5a32:	60c2      	str	r2, [r0, #12]
    5a34:	7819      	ldrb	r1, [r3, #0]
    5a36:	2968      	cmp	r1, #104	; 0x68
    5a38:	d012      	beq.n	5a60 <d_call_offset+0x3c>
    5a3a:	2976      	cmp	r1, #118	; 0x76
    5a3c:	d001      	beq.n	5a42 <d_call_offset+0x1e>
    5a3e:	2000      	movs	r0, #0
    5a40:	bd38      	pop	{r3, r4, r5, pc}
    5a42:	f104 050c 	add.w	r5, r4, #12
    5a46:	4628      	mov	r0, r5
    5a48:	f7ff ff1e 	bl	5888 <d_number.isra.0>
    5a4c:	68e3      	ldr	r3, [r4, #12]
    5a4e:	781a      	ldrb	r2, [r3, #0]
    5a50:	2a5f      	cmp	r2, #95	; 0x5f
    5a52:	d1f4      	bne.n	5a3e <d_call_offset+0x1a>
    5a54:	3301      	adds	r3, #1
    5a56:	60e3      	str	r3, [r4, #12]
    5a58:	4628      	mov	r0, r5
    5a5a:	f7ff ff15 	bl	5888 <d_number.isra.0>
    5a5e:	e003      	b.n	5a68 <d_call_offset+0x44>
    5a60:	f104 000c 	add.w	r0, r4, #12
    5a64:	f7ff ff10 	bl	5888 <d_number.isra.0>
    5a68:	68e3      	ldr	r3, [r4, #12]
    5a6a:	781a      	ldrb	r2, [r3, #0]
    5a6c:	2a5f      	cmp	r2, #95	; 0x5f
    5a6e:	d1e6      	bne.n	5a3e <d_call_offset+0x1a>
    5a70:	3301      	adds	r3, #1
    5a72:	60e3      	str	r3, [r4, #12]
    5a74:	2001      	movs	r0, #1
    5a76:	bd38      	pop	{r3, r4, r5, pc}

00005a78 <d_lookup_template_argument.isra.6>:
    5a78:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    5a7c:	4602      	mov	r2, r0
    5a7e:	b1c3      	cbz	r3, 5ab2 <d_lookup_template_argument.isra.6+0x3a>
    5a80:	685a      	ldr	r2, [r3, #4]
    5a82:	680b      	ldr	r3, [r1, #0]
    5a84:	6890      	ldr	r0, [r2, #8]
    5a86:	b170      	cbz	r0, 5aa6 <d_lookup_template_argument.isra.6+0x2e>
    5a88:	7802      	ldrb	r2, [r0, #0]
    5a8a:	2a2f      	cmp	r2, #47	; 0x2f
    5a8c:	d10d      	bne.n	5aaa <d_lookup_template_argument.isra.6+0x32>
    5a8e:	2b00      	cmp	r3, #0
    5a90:	dc04      	bgt.n	5a9c <d_lookup_template_argument.isra.6+0x24>
    5a92:	e009      	b.n	5aa8 <d_lookup_template_argument.isra.6+0x30>
    5a94:	7802      	ldrb	r2, [r0, #0]
    5a96:	2a2f      	cmp	r2, #47	; 0x2f
    5a98:	d107      	bne.n	5aaa <d_lookup_template_argument.isra.6+0x32>
    5a9a:	b143      	cbz	r3, 5aae <d_lookup_template_argument.isra.6+0x36>
    5a9c:	6880      	ldr	r0, [r0, #8]
    5a9e:	3b01      	subs	r3, #1
    5aa0:	2800      	cmp	r0, #0
    5aa2:	d1f7      	bne.n	5a94 <d_lookup_template_argument.isra.6+0x1c>
    5aa4:	4770      	bx	lr
    5aa6:	4770      	bx	lr
    5aa8:	d001      	beq.n	5aae <d_lookup_template_argument.isra.6+0x36>
    5aaa:	2000      	movs	r0, #0
    5aac:	4770      	bx	lr
    5aae:	6840      	ldr	r0, [r0, #4]
    5ab0:	4770      	bx	lr
    5ab2:	2101      	movs	r1, #1
    5ab4:	4618      	mov	r0, r3
    5ab6:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    5aba:	4770      	bx	lr

00005abc <d_find_pack>:
    5abc:	b538      	push	{r3, r4, r5, lr}
    5abe:	460c      	mov	r4, r1
    5ac0:	4605      	mov	r5, r0
    5ac2:	b391      	cbz	r1, 5b2a <d_find_pack+0x6e>
    5ac4:	7823      	ldrb	r3, [r4, #0]
    5ac6:	2b4a      	cmp	r3, #74	; 0x4a
    5ac8:	d827      	bhi.n	5b1a <d_find_pack+0x5e>
    5aca:	e8df f003 	tbb	[pc, r3]
    5ace:	262e      	.short	0x262e
    5ad0:	30262626 	.word	0x30262626
    5ad4:	262b2b2e 	.word	0x262b2b2e
    5ad8:	26262626 	.word	0x26262626
    5adc:	26262626 	.word	0x26262626
    5ae0:	26262626 	.word	0x26262626
    5ae4:	262e2626 	.word	0x262e2626
    5ae8:	26262626 	.word	0x26262626
    5aec:	26262626 	.word	0x26262626
    5af0:	26262626 	.word	0x26262626
    5af4:	26262e26 	.word	0x26262e26
    5af8:	26262626 	.word	0x26262626
    5afc:	2e262626 	.word	0x2e262626
    5b00:	2626262b 	.word	0x2626262b
    5b04:	26262626 	.word	0x26262626
    5b08:	26262626 	.word	0x26262626
    5b0c:	26262e26 	.word	0x26262e26
    5b10:	262e2626 	.word	0x262e2626
    5b14:	2e26262e 	.word	0x2e26262e
    5b18:	2e          	.byte	0x2e
    5b19:	00          	.byte	0x00
    5b1a:	4628      	mov	r0, r5
    5b1c:	6861      	ldr	r1, [r4, #4]
    5b1e:	f7ff ffcd 	bl	5abc <d_find_pack>
    5b22:	b918      	cbnz	r0, 5b2c <d_find_pack+0x70>
    5b24:	68a4      	ldr	r4, [r4, #8]
    5b26:	2c00      	cmp	r4, #0
    5b28:	d1cc      	bne.n	5ac4 <d_find_pack+0x8>
    5b2a:	2000      	movs	r0, #0
    5b2c:	bd38      	pop	{r3, r4, r5, pc}
    5b2e:	4628      	mov	r0, r5
    5b30:	1d21      	adds	r1, r4, #4
    5b32:	f7ff ffa1 	bl	5a78 <d_lookup_template_argument.isra.6>
    5b36:	2800      	cmp	r0, #0
    5b38:	d0f7      	beq.n	5b2a <d_find_pack+0x6e>
    5b3a:	7803      	ldrb	r3, [r0, #0]
    5b3c:	2b2f      	cmp	r3, #47	; 0x2f
    5b3e:	d1f4      	bne.n	5b2a <d_find_pack+0x6e>
    5b40:	bd38      	pop	{r3, r4, r5, pc}
    5b42:	bf00      	nop

00005b44 <d_growable_string_callback_adapter>:
    5b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b46:	6853      	ldr	r3, [r2, #4]
    5b48:	6894      	ldr	r4, [r2, #8]
    5b4a:	3301      	adds	r3, #1
    5b4c:	440b      	add	r3, r1
    5b4e:	42a3      	cmp	r3, r4
    5b50:	b083      	sub	sp, #12
    5b52:	4615      	mov	r5, r2
    5b54:	460e      	mov	r6, r1
    5b56:	4607      	mov	r7, r0
    5b58:	d813      	bhi.n	5b82 <d_growable_string_callback_adapter+0x3e>
    5b5a:	68ec      	ldr	r4, [r5, #12]
    5b5c:	b10c      	cbz	r4, 5b62 <d_growable_string_callback_adapter+0x1e>
    5b5e:	b003      	add	sp, #12
    5b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b62:	e895 0009 	ldmia.w	r5, {r0, r3}
    5b66:	4632      	mov	r2, r6
    5b68:	4639      	mov	r1, r7
    5b6a:	4418      	add	r0, r3
    5b6c:	f008 fbac 	bl	e2c8 <memcpy>
    5b70:	e895 000c 	ldmia.w	r5, {r2, r3}
    5b74:	4432      	add	r2, r6
    5b76:	54d4      	strb	r4, [r2, r3]
    5b78:	686b      	ldr	r3, [r5, #4]
    5b7a:	441e      	add	r6, r3
    5b7c:	606e      	str	r6, [r5, #4]
    5b7e:	b003      	add	sp, #12
    5b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b82:	68d2      	ldr	r2, [r2, #12]
    5b84:	2a00      	cmp	r2, #0
    5b86:	d1ea      	bne.n	5b5e <d_growable_string_callback_adapter+0x1a>
    5b88:	b91c      	cbnz	r4, 5b92 <d_growable_string_callback_adapter+0x4e>
    5b8a:	2b02      	cmp	r3, #2
    5b8c:	f04f 0402 	mov.w	r4, #2
    5b90:	d902      	bls.n	5b98 <d_growable_string_callback_adapter+0x54>
    5b92:	0064      	lsls	r4, r4, #1
    5b94:	42a3      	cmp	r3, r4
    5b96:	d8fc      	bhi.n	5b92 <d_growable_string_callback_adapter+0x4e>
    5b98:	6828      	ldr	r0, [r5, #0]
    5b9a:	4621      	mov	r1, r4
    5b9c:	f008 fd08 	bl	e5b0 <realloc>
    5ba0:	4603      	mov	r3, r0
    5ba2:	b110      	cbz	r0, 5baa <d_growable_string_callback_adapter+0x66>
    5ba4:	6028      	str	r0, [r5, #0]
    5ba6:	60ac      	str	r4, [r5, #8]
    5ba8:	e7d7      	b.n	5b5a <d_growable_string_callback_adapter+0x16>
    5baa:	6828      	ldr	r0, [r5, #0]
    5bac:	9301      	str	r3, [sp, #4]
    5bae:	f008 f86b 	bl	dc88 <free>
    5bb2:	9b01      	ldr	r3, [sp, #4]
    5bb4:	602b      	str	r3, [r5, #0]
    5bb6:	2201      	movs	r2, #1
    5bb8:	606b      	str	r3, [r5, #4]
    5bba:	60ab      	str	r3, [r5, #8]
    5bbc:	60ea      	str	r2, [r5, #12]
    5bbe:	e7ce      	b.n	5b5e <d_growable_string_callback_adapter+0x1a>

00005bc0 <d_expr_primary>:
    5bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bc4:	68c3      	ldr	r3, [r0, #12]
    5bc6:	781a      	ldrb	r2, [r3, #0]
    5bc8:	2a4c      	cmp	r2, #76	; 0x4c
    5bca:	4605      	mov	r5, r0
    5bcc:	d002      	beq.n	5bd4 <d_expr_primary+0x14>
    5bce:	2000      	movs	r0, #0
    5bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bd4:	1c5a      	adds	r2, r3, #1
    5bd6:	60c2      	str	r2, [r0, #12]
    5bd8:	7859      	ldrb	r1, [r3, #1]
    5bda:	295f      	cmp	r1, #95	; 0x5f
    5bdc:	d03a      	beq.n	5c54 <d_expr_primary+0x94>
    5bde:	295a      	cmp	r1, #90	; 0x5a
    5be0:	d10d      	bne.n	5bfe <d_expr_primary+0x3e>
    5be2:	3201      	adds	r2, #1
    5be4:	60ea      	str	r2, [r5, #12]
    5be6:	4628      	mov	r0, r5
    5be8:	2100      	movs	r1, #0
    5bea:	f000 fdf3 	bl	67d4 <d_encoding>
    5bee:	68ea      	ldr	r2, [r5, #12]
    5bf0:	7813      	ldrb	r3, [r2, #0]
    5bf2:	2b45      	cmp	r3, #69	; 0x45
    5bf4:	d1eb      	bne.n	5bce <d_expr_primary+0xe>
    5bf6:	3201      	adds	r2, #1
    5bf8:	60ea      	str	r2, [r5, #12]
    5bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bfe:	f000 fa03 	bl	6008 <d_type>
    5c02:	4607      	mov	r7, r0
    5c04:	2800      	cmp	r0, #0
    5c06:	d0e2      	beq.n	5bce <d_expr_primary+0xe>
    5c08:	7803      	ldrb	r3, [r0, #0]
    5c0a:	2b27      	cmp	r3, #39	; 0x27
    5c0c:	d033      	beq.n	5c76 <d_expr_primary+0xb6>
    5c0e:	68e9      	ldr	r1, [r5, #12]
    5c10:	780b      	ldrb	r3, [r1, #0]
    5c12:	2b6e      	cmp	r3, #110	; 0x6e
    5c14:	d028      	beq.n	5c68 <d_expr_primary+0xa8>
    5c16:	f04f 083b 	mov.w	r8, #59	; 0x3b
    5c1a:	2b45      	cmp	r3, #69	; 0x45
    5c1c:	d034      	beq.n	5c88 <d_expr_primary+0xc8>
    5c1e:	2b00      	cmp	r3, #0
    5c20:	d0d5      	beq.n	5bce <d_expr_primary+0xe>
    5c22:	1c4b      	adds	r3, r1, #1
    5c24:	e001      	b.n	5c2a <d_expr_primary+0x6a>
    5c26:	2c00      	cmp	r4, #0
    5c28:	d0d1      	beq.n	5bce <d_expr_primary+0xe>
    5c2a:	60eb      	str	r3, [r5, #12]
    5c2c:	461e      	mov	r6, r3
    5c2e:	f813 4b01 	ldrb.w	r4, [r3], #1
    5c32:	2c45      	cmp	r4, #69	; 0x45
    5c34:	d1f7      	bne.n	5c26 <d_expr_primary+0x66>
    5c36:	1a72      	subs	r2, r6, r1
    5c38:	4628      	mov	r0, r5
    5c3a:	f7ff fc83 	bl	5544 <d_make_name>
    5c3e:	463a      	mov	r2, r7
    5c40:	4603      	mov	r3, r0
    5c42:	4641      	mov	r1, r8
    5c44:	4628      	mov	r0, r5
    5c46:	f7ff fc31 	bl	54ac <d_make_comp>
    5c4a:	68ea      	ldr	r2, [r5, #12]
    5c4c:	7813      	ldrb	r3, [r2, #0]
    5c4e:	2b45      	cmp	r3, #69	; 0x45
    5c50:	d1bd      	bne.n	5bce <d_expr_primary+0xe>
    5c52:	e7d0      	b.n	5bf6 <d_expr_primary+0x36>
    5c54:	1c9a      	adds	r2, r3, #2
    5c56:	60c2      	str	r2, [r0, #12]
    5c58:	789b      	ldrb	r3, [r3, #2]
    5c5a:	2b5a      	cmp	r3, #90	; 0x5a
    5c5c:	d0c1      	beq.n	5be2 <d_expr_primary+0x22>
    5c5e:	2b45      	cmp	r3, #69	; 0x45
    5c60:	f04f 0000 	mov.w	r0, #0
    5c64:	d1b3      	bne.n	5bce <d_expr_primary+0xe>
    5c66:	e7c6      	b.n	5bf6 <d_expr_primary+0x36>
    5c68:	1c4a      	adds	r2, r1, #1
    5c6a:	60ea      	str	r2, [r5, #12]
    5c6c:	784b      	ldrb	r3, [r1, #1]
    5c6e:	f04f 083c 	mov.w	r8, #60	; 0x3c
    5c72:	4611      	mov	r1, r2
    5c74:	e7d1      	b.n	5c1a <d_expr_primary+0x5a>
    5c76:	6843      	ldr	r3, [r0, #4]
    5c78:	7c1a      	ldrb	r2, [r3, #16]
    5c7a:	2a00      	cmp	r2, #0
    5c7c:	d0c7      	beq.n	5c0e <d_expr_primary+0x4e>
    5c7e:	685a      	ldr	r2, [r3, #4]
    5c80:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    5c82:	1a9b      	subs	r3, r3, r2
    5c84:	632b      	str	r3, [r5, #48]	; 0x30
    5c86:	e7c2      	b.n	5c0e <d_expr_primary+0x4e>
    5c88:	2200      	movs	r2, #0
    5c8a:	e7d5      	b.n	5c38 <d_expr_primary+0x78>

00005c8c <d_template_args>:
    5c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c8e:	68c1      	ldr	r1, [r0, #12]
    5c90:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    5c92:	780b      	ldrb	r3, [r1, #0]
    5c94:	3b49      	subs	r3, #73	; 0x49
    5c96:	2b01      	cmp	r3, #1
    5c98:	b083      	sub	sp, #12
    5c9a:	4604      	mov	r4, r0
    5c9c:	d81e      	bhi.n	5cdc <d_template_args+0x50>
    5c9e:	1c4a      	adds	r2, r1, #1
    5ca0:	60c2      	str	r2, [r0, #12]
    5ca2:	784b      	ldrb	r3, [r1, #1]
    5ca4:	2b45      	cmp	r3, #69	; 0x45
    5ca6:	d045      	beq.n	5d34 <d_template_args+0xa8>
    5ca8:	ae02      	add	r6, sp, #8
    5caa:	2100      	movs	r1, #0
    5cac:	f846 1d04 	str.w	r1, [r6, #-4]!
    5cb0:	3b49      	subs	r3, #73	; 0x49
    5cb2:	2b0f      	cmp	r3, #15
    5cb4:	d835      	bhi.n	5d22 <d_template_args+0x96>
    5cb6:	e8df f003 	tbb	[pc, r3]
    5cba:	2f2f      	.short	0x2f2f
    5cbc:	34341434 	.word	0x34341434
    5cc0:	34343434 	.word	0x34343434
    5cc4:	34343434 	.word	0x34343434
    5cc8:	0834      	.short	0x0834
    5cca:	3201      	adds	r2, #1
    5ccc:	60e2      	str	r2, [r4, #12]
    5cce:	4620      	mov	r0, r4
    5cd0:	f001 fa6c 	bl	71ac <d_expression>
    5cd4:	68e3      	ldr	r3, [r4, #12]
    5cd6:	781a      	ldrb	r2, [r3, #0]
    5cd8:	2a45      	cmp	r2, #69	; 0x45
    5cda:	d027      	beq.n	5d2c <d_template_args+0xa0>
    5cdc:	2000      	movs	r0, #0
    5cde:	b003      	add	sp, #12
    5ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ce2:	4620      	mov	r0, r4
    5ce4:	f7ff ff6c 	bl	5bc0 <d_expr_primary>
    5ce8:	4605      	mov	r5, r0
    5cea:	4620      	mov	r0, r4
    5cec:	212f      	movs	r1, #47	; 0x2f
    5cee:	462a      	mov	r2, r5
    5cf0:	2300      	movs	r3, #0
    5cf2:	2d00      	cmp	r5, #0
    5cf4:	d0f2      	beq.n	5cdc <d_template_args+0x50>
    5cf6:	f7ff fbd9 	bl	54ac <d_make_comp>
    5cfa:	6030      	str	r0, [r6, #0]
    5cfc:	f100 0608 	add.w	r6, r0, #8
    5d00:	2800      	cmp	r0, #0
    5d02:	d0eb      	beq.n	5cdc <d_template_args+0x50>
    5d04:	68e2      	ldr	r2, [r4, #12]
    5d06:	7813      	ldrb	r3, [r2, #0]
    5d08:	2b45      	cmp	r3, #69	; 0x45
    5d0a:	d1d1      	bne.n	5cb0 <d_template_args+0x24>
    5d0c:	9801      	ldr	r0, [sp, #4]
    5d0e:	62e7      	str	r7, [r4, #44]	; 0x2c
    5d10:	3201      	adds	r2, #1
    5d12:	60e2      	str	r2, [r4, #12]
    5d14:	b003      	add	sp, #12
    5d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d18:	4620      	mov	r0, r4
    5d1a:	f7ff ffb7 	bl	5c8c <d_template_args>
    5d1e:	4605      	mov	r5, r0
    5d20:	e7e3      	b.n	5cea <d_template_args+0x5e>
    5d22:	4620      	mov	r0, r4
    5d24:	f000 f970 	bl	6008 <d_type>
    5d28:	4605      	mov	r5, r0
    5d2a:	e7de      	b.n	5cea <d_template_args+0x5e>
    5d2c:	3301      	adds	r3, #1
    5d2e:	60e3      	str	r3, [r4, #12]
    5d30:	4605      	mov	r5, r0
    5d32:	e7da      	b.n	5cea <d_template_args+0x5e>
    5d34:	3102      	adds	r1, #2
    5d36:	2200      	movs	r2, #0
    5d38:	60c1      	str	r1, [r0, #12]
    5d3a:	4613      	mov	r3, r2
    5d3c:	212f      	movs	r1, #47	; 0x2f
    5d3e:	b003      	add	sp, #12
    5d40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5d44:	f7ff bbb2 	b.w	54ac <d_make_comp>

00005d48 <d_name>:
    5d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d4c:	68c2      	ldr	r2, [r0, #12]
    5d4e:	7813      	ldrb	r3, [r2, #0]
    5d50:	3b4c      	subs	r3, #76	; 0x4c
    5d52:	b082      	sub	sp, #8
    5d54:	4605      	mov	r5, r0
    5d56:	2b0e      	cmp	r3, #14
    5d58:	d86d      	bhi.n	5e36 <d_name+0xee>
    5d5a:	e8df f003 	tbb	[pc, r3]
    5d5e:	6c2c      	.short	0x6c2c
    5d60:	6c6c6c31 	.word	0x6c6c6c31
    5d64:	2c6c176c 	.word	0x2c6c176c
    5d68:	6c6c6c6c 	.word	0x6c6c6c6c
    5d6c:	08          	.byte	0x08
    5d6d:	00          	.byte	0x00
    5d6e:	3201      	adds	r2, #1
    5d70:	2100      	movs	r1, #0
    5d72:	60c2      	str	r2, [r0, #12]
    5d74:	f000 fd2e 	bl	67d4 <d_encoding>
    5d78:	68eb      	ldr	r3, [r5, #12]
    5d7a:	7819      	ldrb	r1, [r3, #0]
    5d7c:	2945      	cmp	r1, #69	; 0x45
    5d7e:	4606      	mov	r6, r0
    5d80:	f000 80d1 	beq.w	5f26 <d_name+0x1de>
    5d84:	2000      	movs	r0, #0
    5d86:	b002      	add	sp, #8
    5d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d8c:	7853      	ldrb	r3, [r2, #1]
    5d8e:	2b74      	cmp	r3, #116	; 0x74
    5d90:	d069      	beq.n	5e66 <d_name+0x11e>
    5d92:	2100      	movs	r1, #0
    5d94:	f7ff fcaa 	bl	56ec <d_substitution>
    5d98:	68eb      	ldr	r3, [r5, #12]
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	2b49      	cmp	r3, #73	; 0x49
    5d9e:	4604      	mov	r4, r0
    5da0:	d150      	bne.n	5e44 <d_name+0xfc>
    5da2:	4628      	mov	r0, r5
    5da4:	f7ff ff72 	bl	5c8c <d_template_args>
    5da8:	4622      	mov	r2, r4
    5daa:	4603      	mov	r3, r0
    5dac:	2104      	movs	r1, #4
    5dae:	4628      	mov	r0, r5
    5db0:	f7ff fb7c 	bl	54ac <d_make_comp>
    5db4:	e001      	b.n	5dba <d_name+0x72>
    5db6:	f001 f8bb 	bl	6f30 <d_unqualified_name>
    5dba:	b002      	add	sp, #8
    5dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dc0:	3201      	adds	r2, #1
    5dc2:	60c2      	str	r2, [r0, #12]
    5dc4:	a901      	add	r1, sp, #4
    5dc6:	2201      	movs	r2, #1
    5dc8:	f7ff fbd6 	bl	5578 <d_cv_qualifiers>
    5dcc:	4607      	mov	r7, r0
    5dce:	2800      	cmp	r0, #0
    5dd0:	d0d8      	beq.n	5d84 <d_name+0x3c>
    5dd2:	4628      	mov	r0, r5
    5dd4:	2100      	movs	r1, #0
    5dd6:	f7ff fc29 	bl	562c <d_ref_qualifier>
    5dda:	68eb      	ldr	r3, [r5, #12]
    5ddc:	781c      	ldrb	r4, [r3, #0]
    5dde:	4680      	mov	r8, r0
    5de0:	2600      	movs	r6, #0
    5de2:	2c00      	cmp	r4, #0
    5de4:	f000 808e 	beq.w	5f04 <d_name+0x1bc>
    5de8:	2c44      	cmp	r4, #68	; 0x44
    5dea:	f000 8082 	beq.w	5ef2 <d_name+0x1aa>
    5dee:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    5df2:	b2d2      	uxtb	r2, r2
    5df4:	2a09      	cmp	r2, #9
    5df6:	d95c      	bls.n	5eb2 <d_name+0x16a>
    5df8:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    5dfc:	b2d2      	uxtb	r2, r2
    5dfe:	2a19      	cmp	r2, #25
    5e00:	d957      	bls.n	5eb2 <d_name+0x16a>
    5e02:	2c43      	cmp	r4, #67	; 0x43
    5e04:	d055      	beq.n	5eb2 <d_name+0x16a>
    5e06:	2c55      	cmp	r4, #85	; 0x55
    5e08:	d053      	beq.n	5eb2 <d_name+0x16a>
    5e0a:	2c4c      	cmp	r4, #76	; 0x4c
    5e0c:	d051      	beq.n	5eb2 <d_name+0x16a>
    5e0e:	2c53      	cmp	r4, #83	; 0x53
    5e10:	f000 8084 	beq.w	5f1c <d_name+0x1d4>
    5e14:	2c49      	cmp	r4, #73	; 0x49
    5e16:	d07a      	beq.n	5f0e <d_name+0x1c6>
    5e18:	2c54      	cmp	r4, #84	; 0x54
    5e1a:	f000 80b3 	beq.w	5f84 <d_name+0x23c>
    5e1e:	2c45      	cmp	r4, #69	; 0x45
    5e20:	f000 80d8 	beq.w	5fd4 <d_name+0x28c>
    5e24:	2c4d      	cmp	r4, #77	; 0x4d
    5e26:	d16d      	bne.n	5f04 <d_name+0x1bc>
    5e28:	2e00      	cmp	r6, #0
    5e2a:	d06b      	beq.n	5f04 <d_name+0x1bc>
    5e2c:	1c5a      	adds	r2, r3, #1
    5e2e:	60ea      	str	r2, [r5, #12]
    5e30:	785c      	ldrb	r4, [r3, #1]
    5e32:	4613      	mov	r3, r2
    5e34:	e7d5      	b.n	5de2 <d_name+0x9a>
    5e36:	f001 f87b 	bl	6f30 <d_unqualified_name>
    5e3a:	68eb      	ldr	r3, [r5, #12]
    5e3c:	781b      	ldrb	r3, [r3, #0]
    5e3e:	2b49      	cmp	r3, #73	; 0x49
    5e40:	4604      	mov	r4, r0
    5e42:	d003      	beq.n	5e4c <d_name+0x104>
    5e44:	4620      	mov	r0, r4
    5e46:	b002      	add	sp, #8
    5e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e4c:	2800      	cmp	r0, #0
    5e4e:	d099      	beq.n	5d84 <d_name+0x3c>
    5e50:	6a2b      	ldr	r3, [r5, #32]
    5e52:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5e54:	4293      	cmp	r3, r2
    5e56:	da95      	bge.n	5d84 <d_name+0x3c>
    5e58:	69ea      	ldr	r2, [r5, #28]
    5e5a:	1c59      	adds	r1, r3, #1
    5e5c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5e60:	4628      	mov	r0, r5
    5e62:	6229      	str	r1, [r5, #32]
    5e64:	e79e      	b.n	5da4 <d_name+0x5c>
    5e66:	3202      	adds	r2, #2
    5e68:	4965      	ldr	r1, [pc, #404]	; (6000 <d_name+0x2b8>)
    5e6a:	60c2      	str	r2, [r0, #12]
    5e6c:	2203      	movs	r2, #3
    5e6e:	f7ff fb69 	bl	5544 <d_make_name>
    5e72:	4604      	mov	r4, r0
    5e74:	4628      	mov	r0, r5
    5e76:	f001 f85b 	bl	6f30 <d_unqualified_name>
    5e7a:	4622      	mov	r2, r4
    5e7c:	4603      	mov	r3, r0
    5e7e:	2101      	movs	r1, #1
    5e80:	4628      	mov	r0, r5
    5e82:	f7ff fb13 	bl	54ac <d_make_comp>
    5e86:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    5e88:	68eb      	ldr	r3, [r5, #12]
    5e8a:	3203      	adds	r2, #3
    5e8c:	632a      	str	r2, [r5, #48]	; 0x30
    5e8e:	781b      	ldrb	r3, [r3, #0]
    5e90:	2b49      	cmp	r3, #73	; 0x49
    5e92:	4604      	mov	r4, r0
    5e94:	d1d6      	bne.n	5e44 <d_name+0xfc>
    5e96:	2800      	cmp	r0, #0
    5e98:	f43f af74 	beq.w	5d84 <d_name+0x3c>
    5e9c:	6a2b      	ldr	r3, [r5, #32]
    5e9e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5ea0:	4293      	cmp	r3, r2
    5ea2:	f6bf af6f 	bge.w	5d84 <d_name+0x3c>
    5ea6:	69ea      	ldr	r2, [r5, #28]
    5ea8:	1c59      	adds	r1, r3, #1
    5eaa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5eae:	6229      	str	r1, [r5, #32]
    5eb0:	e777      	b.n	5da2 <d_name+0x5a>
    5eb2:	4628      	mov	r0, r5
    5eb4:	f001 f83c 	bl	6f30 <d_unqualified_name>
    5eb8:	b1ce      	cbz	r6, 5eee <d_name+0x1a6>
    5eba:	2101      	movs	r1, #1
    5ebc:	4632      	mov	r2, r6
    5ebe:	4603      	mov	r3, r0
    5ec0:	4628      	mov	r0, r5
    5ec2:	f7ff faf3 	bl	54ac <d_make_comp>
    5ec6:	4606      	mov	r6, r0
    5ec8:	68eb      	ldr	r3, [r5, #12]
    5eca:	2c53      	cmp	r4, #83	; 0x53
    5ecc:	781c      	ldrb	r4, [r3, #0]
    5ece:	d088      	beq.n	5de2 <d_name+0x9a>
    5ed0:	2c45      	cmp	r4, #69	; 0x45
    5ed2:	d08c      	beq.n	5dee <d_name+0xa6>
    5ed4:	b1b6      	cbz	r6, 5f04 <d_name+0x1bc>
    5ed6:	6a2b      	ldr	r3, [r5, #32]
    5ed8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5eda:	4293      	cmp	r3, r2
    5edc:	da12      	bge.n	5f04 <d_name+0x1bc>
    5ede:	69ea      	ldr	r2, [r5, #28]
    5ee0:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    5ee4:	1c5a      	adds	r2, r3, #1
    5ee6:	68eb      	ldr	r3, [r5, #12]
    5ee8:	622a      	str	r2, [r5, #32]
    5eea:	781c      	ldrb	r4, [r3, #0]
    5eec:	e779      	b.n	5de2 <d_name+0x9a>
    5eee:	4606      	mov	r6, r0
    5ef0:	e7ea      	b.n	5ec8 <d_name+0x180>
    5ef2:	785b      	ldrb	r3, [r3, #1]
    5ef4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5ef8:	2b54      	cmp	r3, #84	; 0x54
    5efa:	d1da      	bne.n	5eb2 <d_name+0x16a>
    5efc:	4628      	mov	r0, r5
    5efe:	f000 f883 	bl	6008 <d_type>
    5f02:	e7d9      	b.n	5eb8 <d_name+0x170>
    5f04:	2000      	movs	r0, #0
    5f06:	6038      	str	r0, [r7, #0]
    5f08:	b002      	add	sp, #8
    5f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f0e:	2e00      	cmp	r6, #0
    5f10:	d0f8      	beq.n	5f04 <d_name+0x1bc>
    5f12:	4628      	mov	r0, r5
    5f14:	f7ff feba 	bl	5c8c <d_template_args>
    5f18:	2104      	movs	r1, #4
    5f1a:	e7cf      	b.n	5ebc <d_name+0x174>
    5f1c:	4628      	mov	r0, r5
    5f1e:	2101      	movs	r1, #1
    5f20:	f7ff fbe4 	bl	56ec <d_substitution>
    5f24:	e7c8      	b.n	5eb8 <d_name+0x170>
    5f26:	1c5a      	adds	r2, r3, #1
    5f28:	60ea      	str	r2, [r5, #12]
    5f2a:	785a      	ldrb	r2, [r3, #1]
    5f2c:	2a73      	cmp	r2, #115	; 0x73
    5f2e:	d03d      	beq.n	5fac <d_name+0x264>
    5f30:	2a64      	cmp	r2, #100	; 0x64
    5f32:	d02b      	beq.n	5f8c <d_name+0x244>
    5f34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    5f38:	4628      	mov	r0, r5
    5f3a:	f7ff ff05 	bl	5d48 <d_name>
    5f3e:	4604      	mov	r4, r0
    5f40:	b120      	cbz	r0, 5f4c <d_name+0x204>
    5f42:	7803      	ldrb	r3, [r0, #0]
    5f44:	2b44      	cmp	r3, #68	; 0x44
    5f46:	d001      	beq.n	5f4c <d_name+0x204>
    5f48:	2b46      	cmp	r3, #70	; 0x46
    5f4a:	d129      	bne.n	5fa0 <d_name+0x258>
    5f4c:	1c7b      	adds	r3, r7, #1
    5f4e:	d025      	beq.n	5f9c <d_name+0x254>
    5f50:	696b      	ldr	r3, [r5, #20]
    5f52:	69aa      	ldr	r2, [r5, #24]
    5f54:	4293      	cmp	r3, r2
    5f56:	da13      	bge.n	5f80 <d_name+0x238>
    5f58:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    5f5c:	6929      	ldr	r1, [r5, #16]
    5f5e:	3301      	adds	r3, #1
    5f60:	0092      	lsls	r2, r2, #2
    5f62:	616b      	str	r3, [r5, #20]
    5f64:	188b      	adds	r3, r1, r2
    5f66:	d003      	beq.n	5f70 <d_name+0x228>
    5f68:	2045      	movs	r0, #69	; 0x45
    5f6a:	5488      	strb	r0, [r1, r2]
    5f6c:	609f      	str	r7, [r3, #8]
    5f6e:	605c      	str	r4, [r3, #4]
    5f70:	4628      	mov	r0, r5
    5f72:	4632      	mov	r2, r6
    5f74:	2102      	movs	r1, #2
    5f76:	f7ff fa99 	bl	54ac <d_make_comp>
    5f7a:	b002      	add	sp, #8
    5f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f80:	2300      	movs	r3, #0
    5f82:	e7f5      	b.n	5f70 <d_name+0x228>
    5f84:	4628      	mov	r0, r5
    5f86:	f7ff fcd9 	bl	593c <d_template_param>
    5f8a:	e795      	b.n	5eb8 <d_name+0x170>
    5f8c:	3302      	adds	r3, #2
    5f8e:	60eb      	str	r3, [r5, #12]
    5f90:	4628      	mov	r0, r5
    5f92:	f7ff fcbb 	bl	590c <d_compact_number>
    5f96:	1e07      	subs	r7, r0, #0
    5f98:	dace      	bge.n	5f38 <d_name+0x1f0>
    5f9a:	e6f3      	b.n	5d84 <d_name+0x3c>
    5f9c:	4623      	mov	r3, r4
    5f9e:	e7e7      	b.n	5f70 <d_name+0x228>
    5fa0:	4628      	mov	r0, r5
    5fa2:	f7ff fced 	bl	5980 <d_discriminator>
    5fa6:	2800      	cmp	r0, #0
    5fa8:	d1d0      	bne.n	5f4c <d_name+0x204>
    5faa:	e6eb      	b.n	5d84 <d_name+0x3c>
    5fac:	3302      	adds	r3, #2
    5fae:	60eb      	str	r3, [r5, #12]
    5fb0:	4628      	mov	r0, r5
    5fb2:	f7ff fce5 	bl	5980 <d_discriminator>
    5fb6:	2800      	cmp	r0, #0
    5fb8:	f43f aee4 	beq.w	5d84 <d_name+0x3c>
    5fbc:	4628      	mov	r0, r5
    5fbe:	4911      	ldr	r1, [pc, #68]	; (6004 <d_name+0x2bc>)
    5fc0:	220e      	movs	r2, #14
    5fc2:	f7ff fabf 	bl	5544 <d_make_name>
    5fc6:	4632      	mov	r2, r6
    5fc8:	4603      	mov	r3, r0
    5fca:	2102      	movs	r1, #2
    5fcc:	4628      	mov	r0, r5
    5fce:	f7ff fa6d 	bl	54ac <d_make_comp>
    5fd2:	e6f2      	b.n	5dba <d_name+0x72>
    5fd4:	603e      	str	r6, [r7, #0]
    5fd6:	2e00      	cmp	r6, #0
    5fd8:	f43f aed4 	beq.w	5d84 <d_name+0x3c>
    5fdc:	f1b8 0f00 	cmp.w	r8, #0
    5fe0:	d004      	beq.n	5fec <d_name+0x2a4>
    5fe2:	9b01      	ldr	r3, [sp, #4]
    5fe4:	f8c8 3004 	str.w	r3, [r8, #4]
    5fe8:	f8cd 8004 	str.w	r8, [sp, #4]
    5fec:	68eb      	ldr	r3, [r5, #12]
    5fee:	781a      	ldrb	r2, [r3, #0]
    5ff0:	2a45      	cmp	r2, #69	; 0x45
    5ff2:	f47f aec7 	bne.w	5d84 <d_name+0x3c>
    5ff6:	3301      	adds	r3, #1
    5ff8:	60eb      	str	r3, [r5, #12]
    5ffa:	9801      	ldr	r0, [sp, #4]
    5ffc:	e6dd      	b.n	5dba <d_name+0x72>
    5ffe:	bf00      	nop
    6000:	000138f8 	.word	0x000138f8
    6004:	000138e8 	.word	0x000138e8

00006008 <d_type>:
    6008:	b5f0      	push	{r4, r5, r6, r7, lr}
    600a:	68c2      	ldr	r2, [r0, #12]
    600c:	7813      	ldrb	r3, [r2, #0]
    600e:	2b72      	cmp	r3, #114	; 0x72
    6010:	b083      	sub	sp, #12
    6012:	4604      	mov	r4, r0
    6014:	d054      	beq.n	60c0 <d_type+0xb8>
    6016:	2b56      	cmp	r3, #86	; 0x56
    6018:	d052      	beq.n	60c0 <d_type+0xb8>
    601a:	2b4b      	cmp	r3, #75	; 0x4b
    601c:	d050      	beq.n	60c0 <d_type+0xb8>
    601e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    6022:	294a      	cmp	r1, #74	; 0x4a
    6024:	d87d      	bhi.n	6122 <d_type+0x11a>
    6026:	e8df f011 	tbh	[pc, r1, lsl #1]
    602a:	00a2      	.short	0x00a2
    602c:	00a200a2 	.word	0x00a200a2
    6030:	00a200a2 	.word	0x00a200a2
    6034:	00a200a2 	.word	0x00a200a2
    6038:	00a200a2 	.word	0x00a200a2
    603c:	007c00a2 	.word	0x007c00a2
    6040:	007c007c 	.word	0x007c007c
    6044:	007c007c 	.word	0x007c007c
    6048:	007c007c 	.word	0x007c007c
    604c:	007c00a7 	.word	0x007c00a7
    6050:	00ff00cf 	.word	0x00ff00cf
    6054:	00dc007c 	.word	0x00dc007c
    6058:	007c00f2 	.word	0x007c00f2
    605c:	007c007c 	.word	0x007c007c
    6060:	007c007c 	.word	0x007c007c
    6064:	00a20171 	.word	0x00a20171
    6068:	01a701c1 	.word	0x01a701c1
    606c:	01b4007c 	.word	0x01b4007c
    6070:	01ef01ce 	.word	0x01ef01ce
    6074:	007c0207 	.word	0x007c0207
    6078:	007c007c 	.word	0x007c007c
    607c:	00a2007c 	.word	0x00a2007c
    6080:	007c007c 	.word	0x007c007c
    6084:	007c007c 	.word	0x007c007c
    6088:	007c007c 	.word	0x007c007c
    608c:	02180218 	.word	0x02180218
    6090:	02180218 	.word	0x02180218
    6094:	02180218 	.word	0x02180218
    6098:	02180218 	.word	0x02180218
    609c:	02180218 	.word	0x02180218
    60a0:	0218007c 	.word	0x0218007c
    60a4:	02180218 	.word	0x02180218
    60a8:	007c0218 	.word	0x007c0218
    60ac:	007c007c 	.word	0x007c007c
    60b0:	02180218 	.word	0x02180218
    60b4:	02180089 	.word	0x02180089
    60b8:	02180218 	.word	0x02180218
    60bc:	02180218 	.word	0x02180218
    60c0:	4620      	mov	r0, r4
    60c2:	a901      	add	r1, sp, #4
    60c4:	2200      	movs	r2, #0
    60c6:	f7ff fa57 	bl	5578 <d_cv_qualifiers>
    60ca:	4605      	mov	r5, r0
    60cc:	b348      	cbz	r0, 6122 <d_type+0x11a>
    60ce:	4620      	mov	r0, r4
    60d0:	f7ff ff9a 	bl	6008 <d_type>
    60d4:	6028      	str	r0, [r5, #0]
    60d6:	b320      	cbz	r0, 6122 <d_type+0x11a>
    60d8:	7802      	ldrb	r2, [r0, #0]
    60da:	3a1f      	subs	r2, #31
    60dc:	2a01      	cmp	r2, #1
    60de:	d923      	bls.n	6128 <d_type+0x120>
    60e0:	9a01      	ldr	r2, [sp, #4]
    60e2:	b1f2      	cbz	r2, 6122 <d_type+0x11a>
    60e4:	6a23      	ldr	r3, [r4, #32]
    60e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    60e8:	428b      	cmp	r3, r1
    60ea:	da1a      	bge.n	6122 <d_type+0x11a>
    60ec:	69e1      	ldr	r1, [r4, #28]
    60ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    60f2:	9801      	ldr	r0, [sp, #4]
    60f4:	1c5d      	adds	r5, r3, #1
    60f6:	6225      	str	r5, [r4, #32]
    60f8:	b003      	add	sp, #12
    60fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60fc:	4620      	mov	r0, r4
    60fe:	f001 f855 	bl	71ac <d_expression>
    6102:	2141      	movs	r1, #65	; 0x41
    6104:	4602      	mov	r2, r0
    6106:	2300      	movs	r3, #0
    6108:	4620      	mov	r0, r4
    610a:	f7ff f9cf 	bl	54ac <d_make_comp>
    610e:	9001      	str	r0, [sp, #4]
    6110:	b138      	cbz	r0, 6122 <d_type+0x11a>
    6112:	68e3      	ldr	r3, [r4, #12]
    6114:	781a      	ldrb	r2, [r3, #0]
    6116:	b122      	cbz	r2, 6122 <d_type+0x11a>
    6118:	1c5a      	adds	r2, r3, #1
    611a:	60e2      	str	r2, [r4, #12]
    611c:	781b      	ldrb	r3, [r3, #0]
    611e:	2b45      	cmp	r3, #69	; 0x45
    6120:	d01a      	beq.n	6158 <d_type+0x150>
    6122:	2000      	movs	r0, #0
    6124:	b003      	add	sp, #12
    6126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6128:	9a01      	ldr	r2, [sp, #4]
    612a:	6841      	ldr	r1, [r0, #4]
    612c:	6042      	str	r2, [r0, #4]
    612e:	682b      	ldr	r3, [r5, #0]
    6130:	9301      	str	r3, [sp, #4]
    6132:	6029      	str	r1, [r5, #0]
    6134:	9a01      	ldr	r2, [sp, #4]
    6136:	2a00      	cmp	r2, #0
    6138:	d1d4      	bne.n	60e4 <d_type+0xdc>
    613a:	e7f2      	b.n	6122 <d_type+0x11a>
    613c:	3201      	adds	r2, #1
    613e:	60e2      	str	r2, [r4, #12]
    6140:	4620      	mov	r0, r4
    6142:	f7ff fc2d 	bl	59a0 <d_source_name>
    6146:	2128      	movs	r1, #40	; 0x28
    6148:	4602      	mov	r2, r0
    614a:	2300      	movs	r3, #0
    614c:	4620      	mov	r0, r4
    614e:	f7ff f9ad 	bl	54ac <d_make_comp>
    6152:	9001      	str	r0, [sp, #4]
    6154:	2800      	cmp	r0, #0
    6156:	d0e4      	beq.n	6122 <d_type+0x11a>
    6158:	6a23      	ldr	r3, [r4, #32]
    615a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    615c:	4293      	cmp	r3, r2
    615e:	dae0      	bge.n	6122 <d_type+0x11a>
    6160:	69e2      	ldr	r2, [r4, #28]
    6162:	1c59      	adds	r1, r3, #1
    6164:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6168:	9801      	ldr	r0, [sp, #4]
    616a:	6221      	str	r1, [r4, #32]
    616c:	e7da      	b.n	6124 <d_type+0x11c>
    616e:	4620      	mov	r0, r4
    6170:	f7ff fdea 	bl	5d48 <d_name>
    6174:	9001      	str	r0, [sp, #4]
    6176:	e7ed      	b.n	6154 <d_type+0x14c>
    6178:	1c51      	adds	r1, r2, #1
    617a:	60e1      	str	r1, [r4, #12]
    617c:	7853      	ldrb	r3, [r2, #1]
    617e:	2b5f      	cmp	r3, #95	; 0x5f
    6180:	f000 8279 	beq.w	6676 <d_type+0x66e>
    6184:	3b30      	subs	r3, #48	; 0x30
    6186:	2b09      	cmp	r3, #9
    6188:	f200 827e 	bhi.w	6688 <d_type+0x680>
    618c:	460a      	mov	r2, r1
    618e:	3201      	adds	r2, #1
    6190:	60e2      	str	r2, [r4, #12]
    6192:	7813      	ldrb	r3, [r2, #0]
    6194:	3b30      	subs	r3, #48	; 0x30
    6196:	2b09      	cmp	r3, #9
    6198:	d9f9      	bls.n	618e <d_type+0x186>
    619a:	1a52      	subs	r2, r2, r1
    619c:	4620      	mov	r0, r4
    619e:	f7ff f9d1 	bl	5544 <d_make_name>
    61a2:	4605      	mov	r5, r0
    61a4:	2800      	cmp	r0, #0
    61a6:	d030      	beq.n	620a <d_type+0x202>
    61a8:	68e1      	ldr	r1, [r4, #12]
    61aa:	780b      	ldrb	r3, [r1, #0]
    61ac:	2b5f      	cmp	r3, #95	; 0x5f
    61ae:	d12c      	bne.n	620a <d_type+0x202>
    61b0:	3101      	adds	r1, #1
    61b2:	60e1      	str	r1, [r4, #12]
    61b4:	4620      	mov	r0, r4
    61b6:	f7ff ff27 	bl	6008 <d_type>
    61ba:	462a      	mov	r2, r5
    61bc:	4603      	mov	r3, r0
    61be:	212a      	movs	r1, #42	; 0x2a
    61c0:	4620      	mov	r0, r4
    61c2:	f7ff f973 	bl	54ac <d_make_comp>
    61c6:	e7d5      	b.n	6174 <d_type+0x16c>
    61c8:	3201      	adds	r2, #1
    61ca:	60e2      	str	r2, [r4, #12]
    61cc:	4620      	mov	r0, r4
    61ce:	f7ff ff1b 	bl	6008 <d_type>
    61d2:	2125      	movs	r1, #37	; 0x25
    61d4:	4602      	mov	r2, r0
    61d6:	2300      	movs	r3, #0
    61d8:	4620      	mov	r0, r4
    61da:	f7ff f967 	bl	54ac <d_make_comp>
    61de:	9001      	str	r0, [sp, #4]
    61e0:	e7b8      	b.n	6154 <d_type+0x14c>
    61e2:	1c53      	adds	r3, r2, #1
    61e4:	60e3      	str	r3, [r4, #12]
    61e6:	7853      	ldrb	r3, [r2, #1]
    61e8:	2b59      	cmp	r3, #89	; 0x59
    61ea:	bf04      	itt	eq
    61ec:	3202      	addeq	r2, #2
    61ee:	60e2      	streq	r2, [r4, #12]
    61f0:	2101      	movs	r1, #1
    61f2:	4620      	mov	r0, r4
    61f4:	f000 fad0 	bl	6798 <d_bare_function_type>
    61f8:	4601      	mov	r1, r0
    61fa:	4620      	mov	r0, r4
    61fc:	f7ff fa16 	bl	562c <d_ref_qualifier>
    6200:	68e3      	ldr	r3, [r4, #12]
    6202:	781a      	ldrb	r2, [r3, #0]
    6204:	2a45      	cmp	r2, #69	; 0x45
    6206:	f000 823c 	beq.w	6682 <d_type+0x67a>
    620a:	2000      	movs	r0, #0
    620c:	e7b2      	b.n	6174 <d_type+0x16c>
    620e:	3201      	adds	r2, #1
    6210:	60e2      	str	r2, [r4, #12]
    6212:	4620      	mov	r0, r4
    6214:	f7ff fef8 	bl	6008 <d_type>
    6218:	2126      	movs	r1, #38	; 0x26
    621a:	4602      	mov	r2, r0
    621c:	2300      	movs	r3, #0
    621e:	4620      	mov	r0, r4
    6220:	f7ff f944 	bl	54ac <d_make_comp>
    6224:	9001      	str	r0, [sp, #4]
    6226:	e795      	b.n	6154 <d_type+0x14c>
    6228:	1c53      	adds	r3, r2, #1
    622a:	60e3      	str	r3, [r4, #12]
    622c:	7853      	ldrb	r3, [r2, #1]
    622e:	2b00      	cmp	r3, #0
    6230:	f43f af77 	beq.w	6122 <d_type+0x11a>
    6234:	1c93      	adds	r3, r2, #2
    6236:	60e3      	str	r3, [r4, #12]
    6238:	7853      	ldrb	r3, [r2, #1]
    623a:	3b46      	subs	r3, #70	; 0x46
    623c:	2b30      	cmp	r3, #48	; 0x30
    623e:	f63f af70 	bhi.w	6122 <d_type+0x11a>
    6242:	a101      	add	r1, pc, #4	; (adr r1, 6248 <d_type+0x240>)
    6244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    6248:	00006561 	.word	0x00006561
    624c:	00006123 	.word	0x00006123
    6250:	00006123 	.word	0x00006123
    6254:	00006123 	.word	0x00006123
    6258:	00006123 	.word	0x00006123
    625c:	00006123 	.word	0x00006123
    6260:	00006123 	.word	0x00006123
    6264:	00006123 	.word	0x00006123
    6268:	00006123 	.word	0x00006123
    626c:	00006123 	.word	0x00006123
    6270:	00006123 	.word	0x00006123
    6274:	00006123 	.word	0x00006123
    6278:	00006123 	.word	0x00006123
    627c:	00006123 	.word	0x00006123
    6280:	000060fd 	.word	0x000060fd
    6284:	00006123 	.word	0x00006123
    6288:	00006123 	.word	0x00006123
    628c:	00006123 	.word	0x00006123
    6290:	00006123 	.word	0x00006123
    6294:	00006123 	.word	0x00006123
    6298:	00006123 	.word	0x00006123
    629c:	00006123 	.word	0x00006123
    62a0:	00006123 	.word	0x00006123
    62a4:	00006123 	.word	0x00006123
    62a8:	00006123 	.word	0x00006123
    62ac:	00006123 	.word	0x00006123
    62b0:	00006123 	.word	0x00006123
    62b4:	00006555 	.word	0x00006555
    62b8:	00006123 	.word	0x00006123
    62bc:	00006123 	.word	0x00006123
    62c0:	0000652d 	.word	0x0000652d
    62c4:	00006505 	.word	0x00006505
    62c8:	000064dd 	.word	0x000064dd
    62cc:	00006123 	.word	0x00006123
    62d0:	000064b5 	.word	0x000064b5
    62d4:	00006485 	.word	0x00006485
    62d8:	00006123 	.word	0x00006123
    62dc:	00006123 	.word	0x00006123
    62e0:	00006123 	.word	0x00006123
    62e4:	00006123 	.word	0x00006123
    62e8:	00006639 	.word	0x00006639
    62ec:	00006123 	.word	0x00006123
    62f0:	00006623 	.word	0x00006623
    62f4:	00006123 	.word	0x00006123
    62f8:	00006123 	.word	0x00006123
    62fc:	000065ff 	.word	0x000065ff
    6300:	000060fd 	.word	0x000060fd
    6304:	00006123 	.word	0x00006123
    6308:	000065c7 	.word	0x000065c7
    630c:	3201      	adds	r2, #1
    630e:	60e2      	str	r2, [r4, #12]
    6310:	4620      	mov	r0, r4
    6312:	f7ff fe79 	bl	6008 <d_type>
    6316:	ae01      	add	r6, sp, #4
    6318:	4607      	mov	r7, r0
    631a:	4631      	mov	r1, r6
    631c:	4620      	mov	r0, r4
    631e:	2201      	movs	r2, #1
    6320:	f7ff f92a 	bl	5578 <d_cv_qualifiers>
    6324:	4605      	mov	r5, r0
    6326:	2800      	cmp	r0, #0
    6328:	f43f af6f 	beq.w	620a <d_type+0x202>
    632c:	4620      	mov	r0, r4
    632e:	f7ff fe6b 	bl	6008 <d_type>
    6332:	6028      	str	r0, [r5, #0]
    6334:	2800      	cmp	r0, #0
    6336:	f43f af68 	beq.w	620a <d_type+0x202>
    633a:	42b5      	cmp	r5, r6
    633c:	d015      	beq.n	636a <d_type+0x362>
    633e:	7801      	ldrb	r1, [r0, #0]
    6340:	f1a1 021f 	sub.w	r2, r1, #31
    6344:	2a01      	cmp	r2, #1
    6346:	f240 81a7 	bls.w	6698 <d_type+0x690>
    634a:	2929      	cmp	r1, #41	; 0x29
    634c:	d00d      	beq.n	636a <d_type+0x362>
    634e:	9a01      	ldr	r2, [sp, #4]
    6350:	2a00      	cmp	r2, #0
    6352:	f43f af5a 	beq.w	620a <d_type+0x202>
    6356:	6a23      	ldr	r3, [r4, #32]
    6358:	6a61      	ldr	r1, [r4, #36]	; 0x24
    635a:	428b      	cmp	r3, r1
    635c:	f6bf af55 	bge.w	620a <d_type+0x202>
    6360:	69e1      	ldr	r1, [r4, #28]
    6362:	1c58      	adds	r0, r3, #1
    6364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    6368:	6220      	str	r0, [r4, #32]
    636a:	463a      	mov	r2, r7
    636c:	4620      	mov	r0, r4
    636e:	212b      	movs	r1, #43	; 0x2b
    6370:	9b01      	ldr	r3, [sp, #4]
    6372:	f7ff f89b 	bl	54ac <d_make_comp>
    6376:	e6fd      	b.n	6174 <d_type+0x16c>
    6378:	3201      	adds	r2, #1
    637a:	60e2      	str	r2, [r4, #12]
    637c:	4620      	mov	r0, r4
    637e:	f7ff fe43 	bl	6008 <d_type>
    6382:	2122      	movs	r1, #34	; 0x22
    6384:	4602      	mov	r2, r0
    6386:	2300      	movs	r3, #0
    6388:	4620      	mov	r0, r4
    638a:	f7ff f88f 	bl	54ac <d_make_comp>
    638e:	9001      	str	r0, [sp, #4]
    6390:	e6e0      	b.n	6154 <d_type+0x14c>
    6392:	3201      	adds	r2, #1
    6394:	60e2      	str	r2, [r4, #12]
    6396:	4620      	mov	r0, r4
    6398:	f7ff fe36 	bl	6008 <d_type>
    639c:	2123      	movs	r1, #35	; 0x23
    639e:	4602      	mov	r2, r0
    63a0:	2300      	movs	r3, #0
    63a2:	4620      	mov	r0, r4
    63a4:	f7ff f882 	bl	54ac <d_make_comp>
    63a8:	9001      	str	r0, [sp, #4]
    63aa:	e6d3      	b.n	6154 <d_type+0x14c>
    63ac:	3201      	adds	r2, #1
    63ae:	60e2      	str	r2, [r4, #12]
    63b0:	4620      	mov	r0, r4
    63b2:	f7ff fe29 	bl	6008 <d_type>
    63b6:	2124      	movs	r1, #36	; 0x24
    63b8:	4602      	mov	r2, r0
    63ba:	2300      	movs	r3, #0
    63bc:	4620      	mov	r0, r4
    63be:	f7ff f875 	bl	54ac <d_make_comp>
    63c2:	9001      	str	r0, [sp, #4]
    63c4:	e6c6      	b.n	6154 <d_type+0x14c>
    63c6:	7853      	ldrb	r3, [r2, #1]
    63c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    63cc:	2a09      	cmp	r2, #9
    63ce:	d905      	bls.n	63dc <d_type+0x3d4>
    63d0:	2b5f      	cmp	r3, #95	; 0x5f
    63d2:	d003      	beq.n	63dc <d_type+0x3d4>
    63d4:	3b41      	subs	r3, #65	; 0x41
    63d6:	2b19      	cmp	r3, #25
    63d8:	f200 8166 	bhi.w	66a8 <d_type+0x6a0>
    63dc:	4620      	mov	r0, r4
    63de:	2100      	movs	r1, #0
    63e0:	f7ff f984 	bl	56ec <d_substitution>
    63e4:	68e3      	ldr	r3, [r4, #12]
    63e6:	9001      	str	r0, [sp, #4]
    63e8:	781b      	ldrb	r3, [r3, #0]
    63ea:	2b49      	cmp	r3, #73	; 0x49
    63ec:	4605      	mov	r5, r0
    63ee:	f47f ae99 	bne.w	6124 <d_type+0x11c>
    63f2:	4620      	mov	r0, r4
    63f4:	f7ff fc4a 	bl	5c8c <d_template_args>
    63f8:	462a      	mov	r2, r5
    63fa:	4603      	mov	r3, r0
    63fc:	2104      	movs	r1, #4
    63fe:	4620      	mov	r0, r4
    6400:	f7ff f854 	bl	54ac <d_make_comp>
    6404:	9001      	str	r0, [sp, #4]
    6406:	e6a5      	b.n	6154 <d_type+0x14c>
    6408:	4620      	mov	r0, r4
    640a:	f7ff fa97 	bl	593c <d_template_param>
    640e:	68e3      	ldr	r3, [r4, #12]
    6410:	9001      	str	r0, [sp, #4]
    6412:	781b      	ldrb	r3, [r3, #0]
    6414:	2b49      	cmp	r3, #73	; 0x49
    6416:	f47f ae9d 	bne.w	6154 <d_type+0x14c>
    641a:	2800      	cmp	r0, #0
    641c:	f43f ae81 	beq.w	6122 <d_type+0x11a>
    6420:	6a23      	ldr	r3, [r4, #32]
    6422:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6424:	4293      	cmp	r3, r2
    6426:	f6bf ae7c 	bge.w	6122 <d_type+0x11a>
    642a:	69e2      	ldr	r2, [r4, #28]
    642c:	1c59      	adds	r1, r3, #1
    642e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6432:	9d01      	ldr	r5, [sp, #4]
    6434:	6221      	str	r1, [r4, #32]
    6436:	e7dc      	b.n	63f2 <d_type+0x3ea>
    6438:	3201      	adds	r2, #1
    643a:	60e2      	str	r2, [r4, #12]
    643c:	4620      	mov	r0, r4
    643e:	f7ff faaf 	bl	59a0 <d_source_name>
    6442:	9001      	str	r0, [sp, #4]
    6444:	4620      	mov	r0, r4
    6446:	f7ff fddf 	bl	6008 <d_type>
    644a:	2121      	movs	r1, #33	; 0x21
    644c:	4602      	mov	r2, r0
    644e:	9b01      	ldr	r3, [sp, #4]
    6450:	4620      	mov	r0, r4
    6452:	f7ff f82b 	bl	54ac <d_make_comp>
    6456:	9001      	str	r0, [sp, #4]
    6458:	e67c      	b.n	6154 <d_type+0x14c>
    645a:	6961      	ldr	r1, [r4, #20]
    645c:	69a0      	ldr	r0, [r4, #24]
    645e:	4da3      	ldr	r5, [pc, #652]	; (66ec <d_type+0x6e4>)
    6460:	3b61      	subs	r3, #97	; 0x61
    6462:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6466:	4281      	cmp	r1, r0
    6468:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    646c:	f2c0 80f6 	blt.w	665c <d_type+0x654>
    6470:	2300      	movs	r3, #0
    6472:	4618      	mov	r0, r3
    6474:	685b      	ldr	r3, [r3, #4]
    6476:	6859      	ldr	r1, [r3, #4]
    6478:	6b23      	ldr	r3, [r4, #48]	; 0x30
    647a:	3201      	adds	r2, #1
    647c:	440b      	add	r3, r1
    647e:	60e2      	str	r2, [r4, #12]
    6480:	6323      	str	r3, [r4, #48]	; 0x30
    6482:	e64f      	b.n	6124 <d_type+0x11c>
    6484:	6963      	ldr	r3, [r4, #20]
    6486:	69a2      	ldr	r2, [r4, #24]
    6488:	4293      	cmp	r3, r2
    648a:	f280 80f6 	bge.w	667a <d_type+0x672>
    648e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6492:	6921      	ldr	r1, [r4, #16]
    6494:	0092      	lsls	r2, r2, #2
    6496:	3301      	adds	r3, #1
    6498:	1888      	adds	r0, r1, r2
    649a:	6163      	str	r3, [r4, #20]
    649c:	f000 8121 	beq.w	66e2 <d_type+0x6da>
    64a0:	4d93      	ldr	r5, [pc, #588]	; (66f0 <d_type+0x6e8>)
    64a2:	2327      	movs	r3, #39	; 0x27
    64a4:	548b      	strb	r3, [r1, r2]
    64a6:	462b      	mov	r3, r5
    64a8:	6045      	str	r5, [r0, #4]
    64aa:	685a      	ldr	r2, [r3, #4]
    64ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    64ae:	4413      	add	r3, r2
    64b0:	6323      	str	r3, [r4, #48]	; 0x30
    64b2:	e637      	b.n	6124 <d_type+0x11c>
    64b4:	6963      	ldr	r3, [r4, #20]
    64b6:	69a2      	ldr	r2, [r4, #24]
    64b8:	4293      	cmp	r3, r2
    64ba:	f280 80de 	bge.w	667a <d_type+0x672>
    64be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    64c2:	6921      	ldr	r1, [r4, #16]
    64c4:	0092      	lsls	r2, r2, #2
    64c6:	3301      	adds	r3, #1
    64c8:	1888      	adds	r0, r1, r2
    64ca:	6163      	str	r3, [r4, #20]
    64cc:	f000 8109 	beq.w	66e2 <d_type+0x6da>
    64d0:	4d88      	ldr	r5, [pc, #544]	; (66f4 <d_type+0x6ec>)
    64d2:	2327      	movs	r3, #39	; 0x27
    64d4:	548b      	strb	r3, [r1, r2]
    64d6:	462b      	mov	r3, r5
    64d8:	6045      	str	r5, [r0, #4]
    64da:	e7e6      	b.n	64aa <d_type+0x4a2>
    64dc:	6963      	ldr	r3, [r4, #20]
    64de:	69a2      	ldr	r2, [r4, #24]
    64e0:	4293      	cmp	r3, r2
    64e2:	f280 80ca 	bge.w	667a <d_type+0x672>
    64e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    64ea:	6921      	ldr	r1, [r4, #16]
    64ec:	0092      	lsls	r2, r2, #2
    64ee:	3301      	adds	r3, #1
    64f0:	1888      	adds	r0, r1, r2
    64f2:	6163      	str	r3, [r4, #20]
    64f4:	f000 80f5 	beq.w	66e2 <d_type+0x6da>
    64f8:	4d7f      	ldr	r5, [pc, #508]	; (66f8 <d_type+0x6f0>)
    64fa:	2327      	movs	r3, #39	; 0x27
    64fc:	548b      	strb	r3, [r1, r2]
    64fe:	462b      	mov	r3, r5
    6500:	6045      	str	r5, [r0, #4]
    6502:	e7d2      	b.n	64aa <d_type+0x4a2>
    6504:	6963      	ldr	r3, [r4, #20]
    6506:	69a2      	ldr	r2, [r4, #24]
    6508:	4293      	cmp	r3, r2
    650a:	f280 80b6 	bge.w	667a <d_type+0x672>
    650e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6512:	6921      	ldr	r1, [r4, #16]
    6514:	0092      	lsls	r2, r2, #2
    6516:	3301      	adds	r3, #1
    6518:	1888      	adds	r0, r1, r2
    651a:	6163      	str	r3, [r4, #20]
    651c:	f000 80e1 	beq.w	66e2 <d_type+0x6da>
    6520:	4d76      	ldr	r5, [pc, #472]	; (66fc <d_type+0x6f4>)
    6522:	2327      	movs	r3, #39	; 0x27
    6524:	548b      	strb	r3, [r1, r2]
    6526:	462b      	mov	r3, r5
    6528:	6045      	str	r5, [r0, #4]
    652a:	e7be      	b.n	64aa <d_type+0x4a2>
    652c:	6963      	ldr	r3, [r4, #20]
    652e:	69a2      	ldr	r2, [r4, #24]
    6530:	4293      	cmp	r3, r2
    6532:	f280 80a2 	bge.w	667a <d_type+0x672>
    6536:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    653a:	6921      	ldr	r1, [r4, #16]
    653c:	0092      	lsls	r2, r2, #2
    653e:	3301      	adds	r3, #1
    6540:	1888      	adds	r0, r1, r2
    6542:	6163      	str	r3, [r4, #20]
    6544:	f000 80cd 	beq.w	66e2 <d_type+0x6da>
    6548:	4d6d      	ldr	r5, [pc, #436]	; (6700 <d_type+0x6f8>)
    654a:	2327      	movs	r3, #39	; 0x27
    654c:	548b      	strb	r3, [r1, r2]
    654e:	462b      	mov	r3, r5
    6550:	6045      	str	r5, [r0, #4]
    6552:	e7aa      	b.n	64aa <d_type+0x4a2>
    6554:	4620      	mov	r0, r4
    6556:	496b      	ldr	r1, [pc, #428]	; (6704 <d_type+0x6fc>)
    6558:	2204      	movs	r2, #4
    655a:	f7fe fff3 	bl	5544 <d_make_name>
    655e:	e5e1      	b.n	6124 <d_type+0x11c>
    6560:	6963      	ldr	r3, [r4, #20]
    6562:	69a1      	ldr	r1, [r4, #24]
    6564:	428b      	cmp	r3, r1
    6566:	f280 80ab 	bge.w	66c0 <d_type+0x6b8>
    656a:	6921      	ldr	r1, [r4, #16]
    656c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    6570:	3301      	adds	r3, #1
    6572:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    6576:	6163      	str	r3, [r4, #20]
    6578:	232c      	movs	r3, #44	; 0x2c
    657a:	9501      	str	r5, [sp, #4]
    657c:	702b      	strb	r3, [r5, #0]
    657e:	7893      	ldrb	r3, [r2, #2]
    6580:	3b30      	subs	r3, #48	; 0x30
    6582:	2b09      	cmp	r3, #9
    6584:	bf8c      	ite	hi
    6586:	2300      	movhi	r3, #0
    6588:	2301      	movls	r3, #1
    658a:	812b      	strh	r3, [r5, #8]
    658c:	2b00      	cmp	r3, #0
    658e:	f040 8099 	bne.w	66c4 <d_type+0x6bc>
    6592:	4620      	mov	r0, r4
    6594:	f7ff fd38 	bl	6008 <d_type>
    6598:	6068      	str	r0, [r5, #4]
    659a:	9b01      	ldr	r3, [sp, #4]
    659c:	685b      	ldr	r3, [r3, #4]
    659e:	2b00      	cmp	r3, #0
    65a0:	f43f adbf 	beq.w	6122 <d_type+0x11a>
    65a4:	f104 000c 	add.w	r0, r4, #12
    65a8:	f7ff f96e 	bl	5888 <d_number.isra.0>
    65ac:	68e3      	ldr	r3, [r4, #12]
    65ae:	781a      	ldrb	r2, [r3, #0]
    65b0:	b132      	cbz	r2, 65c0 <d_type+0x5b8>
    65b2:	1c5a      	adds	r2, r3, #1
    65b4:	60e2      	str	r2, [r4, #12]
    65b6:	781a      	ldrb	r2, [r3, #0]
    65b8:	f1b2 0373 	subs.w	r3, r2, #115	; 0x73
    65bc:	425a      	negs	r2, r3
    65be:	415a      	adcs	r2, r3
    65c0:	9801      	ldr	r0, [sp, #4]
    65c2:	8142      	strh	r2, [r0, #10]
    65c4:	e5ae      	b.n	6124 <d_type+0x11c>
    65c6:	7893      	ldrb	r3, [r2, #2]
    65c8:	2b5f      	cmp	r3, #95	; 0x5f
    65ca:	f000 8081 	beq.w	66d0 <d_type+0x6c8>
    65ce:	4620      	mov	r0, r4
    65d0:	f7ff f980 	bl	58d4 <d_number_component>
    65d4:	4605      	mov	r5, r0
    65d6:	2d00      	cmp	r5, #0
    65d8:	f000 8081 	beq.w	66de <d_type+0x6d6>
    65dc:	68e3      	ldr	r3, [r4, #12]
    65de:	781a      	ldrb	r2, [r3, #0]
    65e0:	2a5f      	cmp	r2, #95	; 0x5f
    65e2:	f47f ae12 	bne.w	620a <d_type+0x202>
    65e6:	3301      	adds	r3, #1
    65e8:	60e3      	str	r3, [r4, #12]
    65ea:	4620      	mov	r0, r4
    65ec:	f7ff fd0c 	bl	6008 <d_type>
    65f0:	462a      	mov	r2, r5
    65f2:	4603      	mov	r3, r0
    65f4:	212d      	movs	r1, #45	; 0x2d
    65f6:	4620      	mov	r0, r4
    65f8:	f7fe ff58 	bl	54ac <d_make_comp>
    65fc:	e5ba      	b.n	6174 <d_type+0x16c>
    65fe:	6963      	ldr	r3, [r4, #20]
    6600:	69a2      	ldr	r2, [r4, #24]
    6602:	4293      	cmp	r3, r2
    6604:	da39      	bge.n	667a <d_type+0x672>
    6606:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    660a:	6921      	ldr	r1, [r4, #16]
    660c:	0092      	lsls	r2, r2, #2
    660e:	3301      	adds	r3, #1
    6610:	1888      	adds	r0, r1, r2
    6612:	6163      	str	r3, [r4, #20]
    6614:	d065      	beq.n	66e2 <d_type+0x6da>
    6616:	4d3c      	ldr	r5, [pc, #240]	; (6708 <d_type+0x700>)
    6618:	2327      	movs	r3, #39	; 0x27
    661a:	548b      	strb	r3, [r1, r2]
    661c:	462b      	mov	r3, r5
    661e:	6045      	str	r5, [r0, #4]
    6620:	e743      	b.n	64aa <d_type+0x4a2>
    6622:	4620      	mov	r0, r4
    6624:	f7ff fcf0 	bl	6008 <d_type>
    6628:	2149      	movs	r1, #73	; 0x49
    662a:	4602      	mov	r2, r0
    662c:	2300      	movs	r3, #0
    662e:	4620      	mov	r0, r4
    6630:	f7fe ff3c 	bl	54ac <d_make_comp>
    6634:	9001      	str	r0, [sp, #4]
    6636:	e58d      	b.n	6154 <d_type+0x14c>
    6638:	6963      	ldr	r3, [r4, #20]
    663a:	69a2      	ldr	r2, [r4, #24]
    663c:	4293      	cmp	r3, r2
    663e:	da1c      	bge.n	667a <d_type+0x672>
    6640:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6644:	6921      	ldr	r1, [r4, #16]
    6646:	0092      	lsls	r2, r2, #2
    6648:	3301      	adds	r3, #1
    664a:	1888      	adds	r0, r1, r2
    664c:	6163      	str	r3, [r4, #20]
    664e:	d048      	beq.n	66e2 <d_type+0x6da>
    6650:	4d2e      	ldr	r5, [pc, #184]	; (670c <d_type+0x704>)
    6652:	2327      	movs	r3, #39	; 0x27
    6654:	548b      	strb	r3, [r1, r2]
    6656:	462b      	mov	r3, r5
    6658:	6045      	str	r5, [r0, #4]
    665a:	e726      	b.n	64aa <d_type+0x4a2>
    665c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    6660:	6925      	ldr	r5, [r4, #16]
    6662:	3101      	adds	r1, #1
    6664:	0080      	lsls	r0, r0, #2
    6666:	6161      	str	r1, [r4, #20]
    6668:	1829      	adds	r1, r5, r0
    666a:	d03c      	beq.n	66e6 <d_type+0x6de>
    666c:	2627      	movs	r6, #39	; 0x27
    666e:	542e      	strb	r6, [r5, r0]
    6670:	4608      	mov	r0, r1
    6672:	604b      	str	r3, [r1, #4]
    6674:	e6ff      	b.n	6476 <d_type+0x46e>
    6676:	2500      	movs	r5, #0
    6678:	e59a      	b.n	61b0 <d_type+0x1a8>
    667a:	2300      	movs	r3, #0
    667c:	4618      	mov	r0, r3
    667e:	685b      	ldr	r3, [r3, #4]
    6680:	e713      	b.n	64aa <d_type+0x4a2>
    6682:	3301      	adds	r3, #1
    6684:	60e3      	str	r3, [r4, #12]
    6686:	e575      	b.n	6174 <d_type+0x16c>
    6688:	4620      	mov	r0, r4
    668a:	f000 fd8f 	bl	71ac <d_expression>
    668e:	4605      	mov	r5, r0
    6690:	2800      	cmp	r0, #0
    6692:	f47f ad89 	bne.w	61a8 <d_type+0x1a0>
    6696:	e5b8      	b.n	620a <d_type+0x202>
    6698:	9901      	ldr	r1, [sp, #4]
    669a:	6842      	ldr	r2, [r0, #4]
    669c:	6041      	str	r1, [r0, #4]
    669e:	682b      	ldr	r3, [r5, #0]
    66a0:	9301      	str	r3, [sp, #4]
    66a2:	7811      	ldrb	r1, [r2, #0]
    66a4:	602a      	str	r2, [r5, #0]
    66a6:	e650      	b.n	634a <d_type+0x342>
    66a8:	4620      	mov	r0, r4
    66aa:	f7ff fb4d 	bl	5d48 <d_name>
    66ae:	9001      	str	r0, [sp, #4]
    66b0:	2800      	cmp	r0, #0
    66b2:	f43f ad36 	beq.w	6122 <d_type+0x11a>
    66b6:	7803      	ldrb	r3, [r0, #0]
    66b8:	2b18      	cmp	r3, #24
    66ba:	f47f ad4d 	bne.w	6158 <d_type+0x150>
    66be:	e531      	b.n	6124 <d_type+0x11c>
    66c0:	2500      	movs	r5, #0
    66c2:	e759      	b.n	6578 <d_type+0x570>
    66c4:	f104 000c 	add.w	r0, r4, #12
    66c8:	f7ff f8de 	bl	5888 <d_number.isra.0>
    66cc:	9d01      	ldr	r5, [sp, #4]
    66ce:	e760      	b.n	6592 <d_type+0x58a>
    66d0:	3203      	adds	r2, #3
    66d2:	60e2      	str	r2, [r4, #12]
    66d4:	4620      	mov	r0, r4
    66d6:	f000 fd69 	bl	71ac <d_expression>
    66da:	4605      	mov	r5, r0
    66dc:	e77b      	b.n	65d6 <d_type+0x5ce>
    66de:	4628      	mov	r0, r5
    66e0:	e548      	b.n	6174 <d_type+0x16c>
    66e2:	6843      	ldr	r3, [r0, #4]
    66e4:	e6e1      	b.n	64aa <d_type+0x4a2>
    66e6:	684b      	ldr	r3, [r1, #4]
    66e8:	4608      	mov	r0, r1
    66ea:	e6c4      	b.n	6476 <d_type+0x46e>
    66ec:	00013250 	.word	0x00013250
    66f0:	000134bc 	.word	0x000134bc
    66f4:	00013494 	.word	0x00013494
    66f8:	00013458 	.word	0x00013458
    66fc:	00013480 	.word	0x00013480
    6700:	0001346c 	.word	0x0001346c
    6704:	000138fc 	.word	0x000138fc
    6708:	000134a8 	.word	0x000134a8
    670c:	000134d0 	.word	0x000134d0

00006710 <d_parmlist>:
    6710:	b570      	push	{r4, r5, r6, lr}
    6712:	b082      	sub	sp, #8
    6714:	2300      	movs	r3, #0
    6716:	68c1      	ldr	r1, [r0, #12]
    6718:	9301      	str	r3, [sp, #4]
    671a:	780b      	ldrb	r3, [r1, #0]
    671c:	4604      	mov	r4, r0
    671e:	b34b      	cbz	r3, 6774 <d_parmlist+0x64>
    6720:	2b45      	cmp	r3, #69	; 0x45
    6722:	d027      	beq.n	6774 <d_parmlist+0x64>
    6724:	2b2e      	cmp	r3, #46	; 0x2e
    6726:	d025      	beq.n	6774 <d_parmlist+0x64>
    6728:	ae01      	add	r6, sp, #4
    672a:	e017      	b.n	675c <d_parmlist+0x4c>
    672c:	2b4f      	cmp	r3, #79	; 0x4f
    672e:	d017      	beq.n	6760 <d_parmlist+0x50>
    6730:	4620      	mov	r0, r4
    6732:	f7ff fc69 	bl	6008 <d_type>
    6736:	4605      	mov	r5, r0
    6738:	212e      	movs	r1, #46	; 0x2e
    673a:	4620      	mov	r0, r4
    673c:	462a      	mov	r2, r5
    673e:	2300      	movs	r3, #0
    6740:	b1c5      	cbz	r5, 6774 <d_parmlist+0x64>
    6742:	f7fe feb3 	bl	54ac <d_make_comp>
    6746:	6030      	str	r0, [r6, #0]
    6748:	b1a0      	cbz	r0, 6774 <d_parmlist+0x64>
    674a:	68e1      	ldr	r1, [r4, #12]
    674c:	780b      	ldrb	r3, [r1, #0]
    674e:	f100 0608 	add.w	r6, r0, #8
    6752:	b143      	cbz	r3, 6766 <d_parmlist+0x56>
    6754:	2b45      	cmp	r3, #69	; 0x45
    6756:	d006      	beq.n	6766 <d_parmlist+0x56>
    6758:	2b2e      	cmp	r3, #46	; 0x2e
    675a:	d004      	beq.n	6766 <d_parmlist+0x56>
    675c:	2b52      	cmp	r3, #82	; 0x52
    675e:	d1e5      	bne.n	672c <d_parmlist+0x1c>
    6760:	784b      	ldrb	r3, [r1, #1]
    6762:	2b45      	cmp	r3, #69	; 0x45
    6764:	d1e4      	bne.n	6730 <d_parmlist+0x20>
    6766:	9b01      	ldr	r3, [sp, #4]
    6768:	b123      	cbz	r3, 6774 <d_parmlist+0x64>
    676a:	689a      	ldr	r2, [r3, #8]
    676c:	b12a      	cbz	r2, 677a <d_parmlist+0x6a>
    676e:	4618      	mov	r0, r3
    6770:	b002      	add	sp, #8
    6772:	bd70      	pop	{r4, r5, r6, pc}
    6774:	2000      	movs	r0, #0
    6776:	b002      	add	sp, #8
    6778:	bd70      	pop	{r4, r5, r6, pc}
    677a:	6859      	ldr	r1, [r3, #4]
    677c:	7808      	ldrb	r0, [r1, #0]
    677e:	2827      	cmp	r0, #39	; 0x27
    6780:	d1f5      	bne.n	676e <d_parmlist+0x5e>
    6782:	6849      	ldr	r1, [r1, #4]
    6784:	7c08      	ldrb	r0, [r1, #16]
    6786:	2809      	cmp	r0, #9
    6788:	d1f1      	bne.n	676e <d_parmlist+0x5e>
    678a:	6848      	ldr	r0, [r1, #4]
    678c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    678e:	1a09      	subs	r1, r1, r0
    6790:	6321      	str	r1, [r4, #48]	; 0x30
    6792:	4618      	mov	r0, r3
    6794:	605a      	str	r2, [r3, #4]
    6796:	e7eb      	b.n	6770 <d_parmlist+0x60>

00006798 <d_bare_function_type>:
    6798:	b570      	push	{r4, r5, r6, lr}
    679a:	68c3      	ldr	r3, [r0, #12]
    679c:	781a      	ldrb	r2, [r3, #0]
    679e:	2a4a      	cmp	r2, #74	; 0x4a
    67a0:	4604      	mov	r4, r0
    67a2:	d00d      	beq.n	67c0 <d_bare_function_type+0x28>
    67a4:	b971      	cbnz	r1, 67c4 <d_bare_function_type+0x2c>
    67a6:	460d      	mov	r5, r1
    67a8:	4620      	mov	r0, r4
    67aa:	f7ff ffb1 	bl	6710 <d_parmlist>
    67ae:	4603      	mov	r3, r0
    67b0:	b170      	cbz	r0, 67d0 <d_bare_function_type+0x38>
    67b2:	4620      	mov	r0, r4
    67b4:	462a      	mov	r2, r5
    67b6:	2129      	movs	r1, #41	; 0x29
    67b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    67bc:	f7fe be76 	b.w	54ac <d_make_comp>
    67c0:	3301      	adds	r3, #1
    67c2:	60c3      	str	r3, [r0, #12]
    67c4:	4620      	mov	r0, r4
    67c6:	f7ff fc1f 	bl	6008 <d_type>
    67ca:	4605      	mov	r5, r0
    67cc:	2800      	cmp	r0, #0
    67ce:	d1eb      	bne.n	67a8 <d_bare_function_type+0x10>
    67d0:	2000      	movs	r0, #0
    67d2:	bd70      	pop	{r4, r5, r6, pc}

000067d4 <d_encoding>:
    67d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67d8:	68c3      	ldr	r3, [r0, #12]
    67da:	781a      	ldrb	r2, [r3, #0]
    67dc:	2a47      	cmp	r2, #71	; 0x47
    67de:	4605      	mov	r5, r0
    67e0:	460e      	mov	r6, r1
    67e2:	d034      	beq.n	684e <d_encoding+0x7a>
    67e4:	2a54      	cmp	r2, #84	; 0x54
    67e6:	d032      	beq.n	684e <d_encoding+0x7a>
    67e8:	f7ff faae 	bl	5d48 <d_name>
    67ec:	4604      	mov	r4, r0
    67ee:	b358      	cbz	r0, 6848 <d_encoding+0x74>
    67f0:	b116      	cbz	r6, 67f8 <d_encoding+0x24>
    67f2:	68ab      	ldr	r3, [r5, #8]
    67f4:	07db      	lsls	r3, r3, #31
    67f6:	d51f      	bpl.n	6838 <d_encoding+0x64>
    67f8:	68eb      	ldr	r3, [r5, #12]
    67fa:	781b      	ldrb	r3, [r3, #0]
    67fc:	b323      	cbz	r3, 6848 <d_encoding+0x74>
    67fe:	2b45      	cmp	r3, #69	; 0x45
    6800:	d022      	beq.n	6848 <d_encoding+0x74>
    6802:	4621      	mov	r1, r4
    6804:	780b      	ldrb	r3, [r1, #0]
    6806:	2b04      	cmp	r3, #4
    6808:	f1a3 021c 	sub.w	r2, r3, #28
    680c:	f000 80a4 	beq.w	6958 <d_encoding+0x184>
    6810:	f0c0 80a0 	bcc.w	6954 <d_encoding+0x180>
    6814:	2a04      	cmp	r2, #4
    6816:	f200 809d 	bhi.w	6954 <d_encoding+0x180>
    681a:	6849      	ldr	r1, [r1, #4]
    681c:	2900      	cmp	r1, #0
    681e:	d1f1      	bne.n	6804 <d_encoding+0x30>
    6820:	4628      	mov	r0, r5
    6822:	f7ff ffb9 	bl	6798 <d_bare_function_type>
    6826:	4622      	mov	r2, r4
    6828:	4603      	mov	r3, r0
    682a:	2103      	movs	r1, #3
    682c:	4628      	mov	r0, r5
    682e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6832:	f7fe be3b 	b.w	54ac <d_make_comp>
    6836:	6864      	ldr	r4, [r4, #4]
    6838:	7823      	ldrb	r3, [r4, #0]
    683a:	f1a3 021c 	sub.w	r2, r3, #28
    683e:	2a04      	cmp	r2, #4
    6840:	d9f9      	bls.n	6836 <d_encoding+0x62>
    6842:	2b02      	cmp	r3, #2
    6844:	f000 816e 	beq.w	6b24 <d_encoding+0x350>
    6848:	4620      	mov	r0, r4
    684a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    684e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    6850:	f101 0214 	add.w	r2, r1, #20
    6854:	632a      	str	r2, [r5, #48]	; 0x30
    6856:	781a      	ldrb	r2, [r3, #0]
    6858:	2a54      	cmp	r2, #84	; 0x54
    685a:	d005      	beq.n	6868 <d_encoding+0x94>
    685c:	2a47      	cmp	r2, #71	; 0x47
    685e:	f000 80ed 	beq.w	6a3c <d_encoding+0x268>
    6862:	2000      	movs	r0, #0
    6864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6868:	1c5a      	adds	r2, r3, #1
    686a:	60ea      	str	r2, [r5, #12]
    686c:	785a      	ldrb	r2, [r3, #1]
    686e:	2a00      	cmp	r2, #0
    6870:	d0f7      	beq.n	6862 <d_encoding+0x8e>
    6872:	1c9a      	adds	r2, r3, #2
    6874:	60ea      	str	r2, [r5, #12]
    6876:	785b      	ldrb	r3, [r3, #1]
    6878:	3b43      	subs	r3, #67	; 0x43
    687a:	2b33      	cmp	r3, #51	; 0x33
    687c:	d8f1      	bhi.n	6862 <d_encoding+0x8e>
    687e:	a201      	add	r2, pc, #4	; (adr r2, 6884 <d_encoding+0xb0>)
    6880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6884:	00006d91 	.word	0x00006d91
    6888:	00006863 	.word	0x00006863
    688c:	00006863 	.word	0x00006863
    6890:	00006d7b 	.word	0x00006d7b
    6894:	00006863 	.word	0x00006863
    6898:	00006d65 	.word	0x00006d65
    689c:	00006d4f 	.word	0x00006d4f
    68a0:	00006d39 	.word	0x00006d39
    68a4:	00006863 	.word	0x00006863
    68a8:	00006863 	.word	0x00006863
    68ac:	00006863 	.word	0x00006863
    68b0:	00006863 	.word	0x00006863
    68b4:	00006863 	.word	0x00006863
    68b8:	00006863 	.word	0x00006863
    68bc:	00006863 	.word	0x00006863
    68c0:	00006863 	.word	0x00006863
    68c4:	00006d23 	.word	0x00006d23
    68c8:	00006d09 	.word	0x00006d09
    68cc:	00006863 	.word	0x00006863
    68d0:	00006cef 	.word	0x00006cef
    68d4:	00006cb3 	.word	0x00006cb3
    68d8:	00006863 	.word	0x00006863
    68dc:	00006863 	.word	0x00006863
    68e0:	00006863 	.word	0x00006863
    68e4:	00006863 	.word	0x00006863
    68e8:	00006863 	.word	0x00006863
    68ec:	00006863 	.word	0x00006863
    68f0:	00006863 	.word	0x00006863
    68f4:	00006863 	.word	0x00006863
    68f8:	00006863 	.word	0x00006863
    68fc:	00006863 	.word	0x00006863
    6900:	00006863 	.word	0x00006863
    6904:	00006c7f 	.word	0x00006c7f
    6908:	00006863 	.word	0x00006863
    690c:	00006863 	.word	0x00006863
    6910:	00006863 	.word	0x00006863
    6914:	00006863 	.word	0x00006863
    6918:	00006cc9 	.word	0x00006cc9
    691c:	00006863 	.word	0x00006863
    6920:	00006863 	.word	0x00006863
    6924:	00006863 	.word	0x00006863
    6928:	00006863 	.word	0x00006863
    692c:	00006863 	.word	0x00006863
    6930:	00006863 	.word	0x00006863
    6934:	00006863 	.word	0x00006863
    6938:	00006863 	.word	0x00006863
    693c:	00006863 	.word	0x00006863
    6940:	00006863 	.word	0x00006863
    6944:	00006863 	.word	0x00006863
    6948:	00006863 	.word	0x00006863
    694c:	00006863 	.word	0x00006863
    6950:	00006c59 	.word	0x00006c59
    6954:	2100      	movs	r1, #0
    6956:	e763      	b.n	6820 <d_encoding+0x4c>
    6958:	684b      	ldr	r3, [r1, #4]
    695a:	2b00      	cmp	r3, #0
    695c:	f000 80f4 	beq.w	6b48 <d_encoding+0x374>
    6960:	781a      	ldrb	r2, [r3, #0]
    6962:	3a01      	subs	r2, #1
    6964:	2a32      	cmp	r2, #50	; 0x32
    6966:	f200 80ef 	bhi.w	6b48 <d_encoding+0x374>
    696a:	a101      	add	r1, pc, #4	; (adr r1, 6970 <d_encoding+0x19c>)
    696c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    6970:	00006b41 	.word	0x00006b41
    6974:	00006b41 	.word	0x00006b41
    6978:	00006b49 	.word	0x00006b49
    697c:	00006b49 	.word	0x00006b49
    6980:	00006b49 	.word	0x00006b49
    6984:	00006b49 	.word	0x00006b49
    6988:	00006955 	.word	0x00006955
    698c:	00006955 	.word	0x00006955
    6990:	00006b49 	.word	0x00006b49
    6994:	00006b49 	.word	0x00006b49
    6998:	00006b49 	.word	0x00006b49
    699c:	00006b49 	.word	0x00006b49
    69a0:	00006b49 	.word	0x00006b49
    69a4:	00006b49 	.word	0x00006b49
    69a8:	00006b49 	.word	0x00006b49
    69ac:	00006b49 	.word	0x00006b49
    69b0:	00006b49 	.word	0x00006b49
    69b4:	00006b49 	.word	0x00006b49
    69b8:	00006b49 	.word	0x00006b49
    69bc:	00006b49 	.word	0x00006b49
    69c0:	00006b49 	.word	0x00006b49
    69c4:	00006b49 	.word	0x00006b49
    69c8:	00006b49 	.word	0x00006b49
    69cc:	00006b49 	.word	0x00006b49
    69d0:	00006b49 	.word	0x00006b49
    69d4:	00006b49 	.word	0x00006b49
    69d8:	00006b49 	.word	0x00006b49
    69dc:	00006b49 	.word	0x00006b49
    69e0:	00006b49 	.word	0x00006b49
    69e4:	00006b49 	.word	0x00006b49
    69e8:	00006b49 	.word	0x00006b49
    69ec:	00006b49 	.word	0x00006b49
    69f0:	00006b49 	.word	0x00006b49
    69f4:	00006b49 	.word	0x00006b49
    69f8:	00006b49 	.word	0x00006b49
    69fc:	00006b49 	.word	0x00006b49
    6a00:	00006b49 	.word	0x00006b49
    6a04:	00006b49 	.word	0x00006b49
    6a08:	00006b49 	.word	0x00006b49
    6a0c:	00006b49 	.word	0x00006b49
    6a10:	00006b49 	.word	0x00006b49
    6a14:	00006b49 	.word	0x00006b49
    6a18:	00006b49 	.word	0x00006b49
    6a1c:	00006b49 	.word	0x00006b49
    6a20:	00006b49 	.word	0x00006b49
    6a24:	00006b49 	.word	0x00006b49
    6a28:	00006b49 	.word	0x00006b49
    6a2c:	00006b49 	.word	0x00006b49
    6a30:	00006b49 	.word	0x00006b49
    6a34:	00006b49 	.word	0x00006b49
    6a38:	00006955 	.word	0x00006955
    6a3c:	1c5a      	adds	r2, r3, #1
    6a3e:	60ea      	str	r2, [r5, #12]
    6a40:	785a      	ldrb	r2, [r3, #1]
    6a42:	2a00      	cmp	r2, #0
    6a44:	f43f af0d 	beq.w	6862 <d_encoding+0x8e>
    6a48:	1c9a      	adds	r2, r3, #2
    6a4a:	60ea      	str	r2, [r5, #12]
    6a4c:	785a      	ldrb	r2, [r3, #1]
    6a4e:	3a41      	subs	r2, #65	; 0x41
    6a50:	2a31      	cmp	r2, #49	; 0x31
    6a52:	f63f af06 	bhi.w	6862 <d_encoding+0x8e>
    6a56:	a101      	add	r1, pc, #4	; (adr r1, 6a5c <d_encoding+0x288>)
    6a58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    6a5c:	00006c15 	.word	0x00006c15
    6a60:	00006863 	.word	0x00006863
    6a64:	00006863 	.word	0x00006863
    6a68:	00006863 	.word	0x00006863
    6a6c:	00006863 	.word	0x00006863
    6a70:	00006863 	.word	0x00006863
    6a74:	00006863 	.word	0x00006863
    6a78:	00006863 	.word	0x00006863
    6a7c:	00006863 	.word	0x00006863
    6a80:	00006863 	.word	0x00006863
    6a84:	00006863 	.word	0x00006863
    6a88:	00006863 	.word	0x00006863
    6a8c:	00006863 	.word	0x00006863
    6a90:	00006863 	.word	0x00006863
    6a94:	00006863 	.word	0x00006863
    6a98:	00006863 	.word	0x00006863
    6a9c:	00006863 	.word	0x00006863
    6aa0:	00006bf7 	.word	0x00006bf7
    6aa4:	00006863 	.word	0x00006863
    6aa8:	00006c2d 	.word	0x00006c2d
    6aac:	00006863 	.word	0x00006863
    6ab0:	00006be1 	.word	0x00006be1
    6ab4:	00006863 	.word	0x00006863
    6ab8:	00006863 	.word	0x00006863
    6abc:	00006863 	.word	0x00006863
    6ac0:	00006863 	.word	0x00006863
    6ac4:	00006863 	.word	0x00006863
    6ac8:	00006863 	.word	0x00006863
    6acc:	00006863 	.word	0x00006863
    6ad0:	00006863 	.word	0x00006863
    6ad4:	00006863 	.word	0x00006863
    6ad8:	00006863 	.word	0x00006863
    6adc:	00006863 	.word	0x00006863
    6ae0:	00006863 	.word	0x00006863
    6ae4:	00006863 	.word	0x00006863
    6ae8:	00006863 	.word	0x00006863
    6aec:	00006863 	.word	0x00006863
    6af0:	00006863 	.word	0x00006863
    6af4:	00006863 	.word	0x00006863
    6af8:	00006863 	.word	0x00006863
    6afc:	00006863 	.word	0x00006863
    6b00:	00006863 	.word	0x00006863
    6b04:	00006863 	.word	0x00006863
    6b08:	00006863 	.word	0x00006863
    6b0c:	00006863 	.word	0x00006863
    6b10:	00006863 	.word	0x00006863
    6b14:	00006863 	.word	0x00006863
    6b18:	00006863 	.word	0x00006863
    6b1c:	00006863 	.word	0x00006863
    6b20:	00006b4d 	.word	0x00006b4d
    6b24:	68a3      	ldr	r3, [r4, #8]
    6b26:	781a      	ldrb	r2, [r3, #0]
    6b28:	3a1c      	subs	r2, #28
    6b2a:	2a04      	cmp	r2, #4
    6b2c:	d804      	bhi.n	6b38 <d_encoding+0x364>
    6b2e:	685b      	ldr	r3, [r3, #4]
    6b30:	781a      	ldrb	r2, [r3, #0]
    6b32:	3a1c      	subs	r2, #28
    6b34:	2a04      	cmp	r2, #4
    6b36:	d9fa      	bls.n	6b2e <d_encoding+0x35a>
    6b38:	60a3      	str	r3, [r4, #8]
    6b3a:	4620      	mov	r0, r4
    6b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b40:	689b      	ldr	r3, [r3, #8]
    6b42:	2b00      	cmp	r3, #0
    6b44:	f47f af0c 	bne.w	6960 <d_encoding+0x18c>
    6b48:	2101      	movs	r1, #1
    6b4a:	e669      	b.n	6820 <d_encoding+0x4c>
    6b4c:	f105 000c 	add.w	r0, r5, #12
    6b50:	f7fe fe9a 	bl	5888 <d_number.isra.0>
    6b54:	2801      	cmp	r0, #1
    6b56:	f77f ae84 	ble.w	6862 <d_encoding+0x8e>
    6b5a:	68eb      	ldr	r3, [r5, #12]
    6b5c:	781a      	ldrb	r2, [r3, #0]
    6b5e:	2a00      	cmp	r2, #0
    6b60:	f43f ae7f 	beq.w	6862 <d_encoding+0x8e>
    6b64:	1c5e      	adds	r6, r3, #1
    6b66:	60ee      	str	r6, [r5, #12]
    6b68:	781b      	ldrb	r3, [r3, #0]
    6b6a:	2b5f      	cmp	r3, #95	; 0x5f
    6b6c:	f47f ae79 	bne.w	6862 <d_encoding+0x8e>
    6b70:	1e47      	subs	r7, r0, #1
    6b72:	f04f 0800 	mov.w	r8, #0
    6b76:	f04f 093f 	mov.w	r9, #63	; 0x3f
    6b7a:	7833      	ldrb	r3, [r6, #0]
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	f43f ae70 	beq.w	6862 <d_encoding+0x8e>
    6b82:	2b24      	cmp	r3, #36	; 0x24
    6b84:	f000 8124 	beq.w	6dd0 <d_encoding+0x5fc>
    6b88:	2400      	movs	r4, #0
    6b8a:	5d33      	ldrb	r3, [r6, r4]
    6b8c:	b123      	cbz	r3, 6b98 <d_encoding+0x3c4>
    6b8e:	2b24      	cmp	r3, #36	; 0x24
    6b90:	d002      	beq.n	6b98 <d_encoding+0x3c4>
    6b92:	3401      	adds	r4, #1
    6b94:	42bc      	cmp	r4, r7
    6b96:	dbf8      	blt.n	6b8a <d_encoding+0x3b6>
    6b98:	4631      	mov	r1, r6
    6b9a:	4628      	mov	r0, r5
    6b9c:	4622      	mov	r2, r4
    6b9e:	f7fe fcd1 	bl	5544 <d_make_name>
    6ba2:	68ee      	ldr	r6, [r5, #12]
    6ba4:	4426      	add	r6, r4
    6ba6:	1b3f      	subs	r7, r7, r4
    6ba8:	60ee      	str	r6, [r5, #12]
    6baa:	2800      	cmp	r0, #0
    6bac:	f43f ae59 	beq.w	6862 <d_encoding+0x8e>
    6bb0:	f1b8 0f00 	cmp.w	r8, #0
    6bb4:	f000 8129 	beq.w	6e0a <d_encoding+0x636>
    6bb8:	4642      	mov	r2, r8
    6bba:	4603      	mov	r3, r0
    6bbc:	213e      	movs	r1, #62	; 0x3e
    6bbe:	4628      	mov	r0, r5
    6bc0:	f7fe fc74 	bl	54ac <d_make_comp>
    6bc4:	4680      	mov	r8, r0
    6bc6:	2800      	cmp	r0, #0
    6bc8:	f43f ae4b 	beq.w	6862 <d_encoding+0x8e>
    6bcc:	2f00      	cmp	r7, #0
    6bce:	dcd4      	bgt.n	6b7a <d_encoding+0x3a6>
    6bd0:	4628      	mov	r0, r5
    6bd2:	4642      	mov	r2, r8
    6bd4:	213d      	movs	r1, #61	; 0x3d
    6bd6:	2300      	movs	r3, #0
    6bd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bdc:	f7fe bc66 	b.w	54ac <d_make_comp>
    6be0:	4628      	mov	r0, r5
    6be2:	f7ff f8b1 	bl	5d48 <d_name>
    6be6:	2113      	movs	r1, #19
    6be8:	4602      	mov	r2, r0
    6bea:	2300      	movs	r3, #0
    6bec:	4628      	mov	r0, r5
    6bee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bf2:	f7fe bc5b 	b.w	54ac <d_make_comp>
    6bf6:	4628      	mov	r0, r5
    6bf8:	f7ff f8a6 	bl	5d48 <d_name>
    6bfc:	4604      	mov	r4, r0
    6bfe:	4628      	mov	r0, r5
    6c00:	f7fe fe68 	bl	58d4 <d_number_component>
    6c04:	4622      	mov	r2, r4
    6c06:	4603      	mov	r3, r0
    6c08:	2116      	movs	r1, #22
    6c0a:	4628      	mov	r0, r5
    6c0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c10:	f7fe bc4c 	b.w	54ac <d_make_comp>
    6c14:	4628      	mov	r0, r5
    6c16:	2100      	movs	r1, #0
    6c18:	f7ff fddc 	bl	67d4 <d_encoding>
    6c1c:	2117      	movs	r1, #23
    6c1e:	4602      	mov	r2, r0
    6c20:	2300      	movs	r3, #0
    6c22:	4628      	mov	r0, r5
    6c24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c28:	f7fe bc40 	b.w	54ac <d_make_comp>
    6c2c:	789a      	ldrb	r2, [r3, #2]
    6c2e:	4628      	mov	r0, r5
    6c30:	2100      	movs	r1, #0
    6c32:	2a00      	cmp	r2, #0
    6c34:	f000 80eb 	beq.w	6e0e <d_encoding+0x63a>
    6c38:	1cda      	adds	r2, r3, #3
    6c3a:	60ea      	str	r2, [r5, #12]
    6c3c:	789b      	ldrb	r3, [r3, #2]
    6c3e:	2b6e      	cmp	r3, #110	; 0x6e
    6c40:	f040 80e5 	bne.w	6e0e <d_encoding+0x63a>
    6c44:	f7ff fdc6 	bl	67d4 <d_encoding>
    6c48:	2148      	movs	r1, #72	; 0x48
    6c4a:	4602      	mov	r2, r0
    6c4c:	2300      	movs	r3, #0
    6c4e:	4628      	mov	r0, r5
    6c50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c54:	f7fe bc2a 	b.w	54ac <d_make_comp>
    6c58:	4628      	mov	r0, r5
    6c5a:	2176      	movs	r1, #118	; 0x76
    6c5c:	f7fe fee2 	bl	5a24 <d_call_offset>
    6c60:	2800      	cmp	r0, #0
    6c62:	f43f adfe 	beq.w	6862 <d_encoding+0x8e>
    6c66:	4628      	mov	r0, r5
    6c68:	2100      	movs	r1, #0
    6c6a:	f7ff fdb3 	bl	67d4 <d_encoding>
    6c6e:	2110      	movs	r1, #16
    6c70:	4602      	mov	r2, r0
    6c72:	2300      	movs	r3, #0
    6c74:	4628      	mov	r0, r5
    6c76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c7a:	f7fe bc17 	b.w	54ac <d_make_comp>
    6c7e:	4628      	mov	r0, r5
    6c80:	2100      	movs	r1, #0
    6c82:	f7fe fecf 	bl	5a24 <d_call_offset>
    6c86:	2800      	cmp	r0, #0
    6c88:	f43f adeb 	beq.w	6862 <d_encoding+0x8e>
    6c8c:	4628      	mov	r0, r5
    6c8e:	2100      	movs	r1, #0
    6c90:	f7fe fec8 	bl	5a24 <d_call_offset>
    6c94:	2800      	cmp	r0, #0
    6c96:	f43f ade4 	beq.w	6862 <d_encoding+0x8e>
    6c9a:	4628      	mov	r0, r5
    6c9c:	2100      	movs	r1, #0
    6c9e:	f7ff fd99 	bl	67d4 <d_encoding>
    6ca2:	2111      	movs	r1, #17
    6ca4:	4602      	mov	r2, r0
    6ca6:	2300      	movs	r3, #0
    6ca8:	4628      	mov	r0, r5
    6caa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6cae:	f7fe bbfd 	b.w	54ac <d_make_comp>
    6cb2:	4628      	mov	r0, r5
    6cb4:	f7ff f848 	bl	5d48 <d_name>
    6cb8:	2115      	movs	r1, #21
    6cba:	4602      	mov	r2, r0
    6cbc:	2300      	movs	r3, #0
    6cbe:	4628      	mov	r0, r5
    6cc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6cc4:	f7fe bbf2 	b.w	54ac <d_make_comp>
    6cc8:	4628      	mov	r0, r5
    6cca:	2168      	movs	r1, #104	; 0x68
    6ccc:	f7fe feaa 	bl	5a24 <d_call_offset>
    6cd0:	2800      	cmp	r0, #0
    6cd2:	f43f adc6 	beq.w	6862 <d_encoding+0x8e>
    6cd6:	4628      	mov	r0, r5
    6cd8:	2100      	movs	r1, #0
    6cda:	f7ff fd7b 	bl	67d4 <d_encoding>
    6cde:	210f      	movs	r1, #15
    6ce0:	4602      	mov	r2, r0
    6ce2:	2300      	movs	r3, #0
    6ce4:	4628      	mov	r0, r5
    6ce6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6cea:	f7fe bbdf 	b.w	54ac <d_make_comp>
    6cee:	310f      	adds	r1, #15
    6cf0:	6329      	str	r1, [r5, #48]	; 0x30
    6cf2:	4628      	mov	r0, r5
    6cf4:	f7ff f988 	bl	6008 <d_type>
    6cf8:	2109      	movs	r1, #9
    6cfa:	4602      	mov	r2, r0
    6cfc:	2300      	movs	r3, #0
    6cfe:	4628      	mov	r0, r5
    6d00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d04:	f7fe bbd2 	b.w	54ac <d_make_comp>
    6d08:	310a      	adds	r1, #10
    6d0a:	6329      	str	r1, [r5, #48]	; 0x30
    6d0c:	4628      	mov	r0, r5
    6d0e:	f7ff f97b 	bl	6008 <d_type>
    6d12:	210a      	movs	r1, #10
    6d14:	4602      	mov	r2, r0
    6d16:	2300      	movs	r3, #0
    6d18:	4628      	mov	r0, r5
    6d1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d1e:	f7fe bbc5 	b.w	54ac <d_make_comp>
    6d22:	4628      	mov	r0, r5
    6d24:	f7ff f970 	bl	6008 <d_type>
    6d28:	210d      	movs	r1, #13
    6d2a:	4602      	mov	r2, r0
    6d2c:	2300      	movs	r3, #0
    6d2e:	4628      	mov	r0, r5
    6d30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d34:	f7fe bbba 	b.w	54ac <d_make_comp>
    6d38:	4628      	mov	r0, r5
    6d3a:	f7ff f965 	bl	6008 <d_type>
    6d3e:	2112      	movs	r1, #18
    6d40:	4602      	mov	r2, r0
    6d42:	2300      	movs	r3, #0
    6d44:	4628      	mov	r0, r5
    6d46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d4a:	f7fe bbaf 	b.w	54ac <d_make_comp>
    6d4e:	4628      	mov	r0, r5
    6d50:	f7ff f95a 	bl	6008 <d_type>
    6d54:	210c      	movs	r1, #12
    6d56:	4602      	mov	r2, r0
    6d58:	2300      	movs	r3, #0
    6d5a:	4628      	mov	r0, r5
    6d5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d60:	f7fe bba4 	b.w	54ac <d_make_comp>
    6d64:	4628      	mov	r0, r5
    6d66:	f7fe ffef 	bl	5d48 <d_name>
    6d6a:	2114      	movs	r1, #20
    6d6c:	4602      	mov	r2, r0
    6d6e:	2300      	movs	r3, #0
    6d70:	4628      	mov	r0, r5
    6d72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d76:	f7fe bb99 	b.w	54ac <d_make_comp>
    6d7a:	4628      	mov	r0, r5
    6d7c:	f7ff f944 	bl	6008 <d_type>
    6d80:	210e      	movs	r1, #14
    6d82:	4602      	mov	r2, r0
    6d84:	2300      	movs	r3, #0
    6d86:	4628      	mov	r0, r5
    6d88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d8c:	f7fe bb8e 	b.w	54ac <d_make_comp>
    6d90:	4628      	mov	r0, r5
    6d92:	f7ff f939 	bl	6008 <d_type>
    6d96:	4604      	mov	r4, r0
    6d98:	f105 000c 	add.w	r0, r5, #12
    6d9c:	f7fe fd74 	bl	5888 <d_number.isra.0>
    6da0:	2800      	cmp	r0, #0
    6da2:	f6ff ad5e 	blt.w	6862 <d_encoding+0x8e>
    6da6:	68ea      	ldr	r2, [r5, #12]
    6da8:	7811      	ldrb	r1, [r2, #0]
    6daa:	295f      	cmp	r1, #95	; 0x5f
    6dac:	f47f ad59 	bne.w	6862 <d_encoding+0x8e>
    6db0:	3201      	adds	r2, #1
    6db2:	60ea      	str	r2, [r5, #12]
    6db4:	4628      	mov	r0, r5
    6db6:	f7ff f927 	bl	6008 <d_type>
    6dba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    6dbc:	1d59      	adds	r1, r3, #5
    6dbe:	6329      	str	r1, [r5, #48]	; 0x30
    6dc0:	4602      	mov	r2, r0
    6dc2:	4623      	mov	r3, r4
    6dc4:	4628      	mov	r0, r5
    6dc6:	210b      	movs	r1, #11
    6dc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6dcc:	f7fe bb6e 	b.w	54ac <d_make_comp>
    6dd0:	7873      	ldrb	r3, [r6, #1]
    6dd2:	2b53      	cmp	r3, #83	; 0x53
    6dd4:	d027      	beq.n	6e26 <d_encoding+0x652>
    6dd6:	2b5f      	cmp	r3, #95	; 0x5f
    6dd8:	d023      	beq.n	6e22 <d_encoding+0x64e>
    6dda:	2b24      	cmp	r3, #36	; 0x24
    6ddc:	f47f ad41 	bne.w	6862 <d_encoding+0x8e>
    6de0:	461c      	mov	r4, r3
    6de2:	696b      	ldr	r3, [r5, #20]
    6de4:	69aa      	ldr	r2, [r5, #24]
    6de6:	4293      	cmp	r3, r2
    6de8:	da1f      	bge.n	6e2a <d_encoding+0x656>
    6dea:	692a      	ldr	r2, [r5, #16]
    6dec:	1c58      	adds	r0, r3, #1
    6dee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    6df2:	6168      	str	r0, [r5, #20]
    6df4:	eb12 0081 	adds.w	r0, r2, r1, lsl #2
    6df8:	d017      	beq.n	6e2a <d_encoding+0x656>
    6dfa:	f802 9021 	strb.w	r9, [r2, r1, lsl #2]
    6dfe:	6044      	str	r4, [r0, #4]
    6e00:	68ee      	ldr	r6, [r5, #12]
    6e02:	3602      	adds	r6, #2
    6e04:	3f02      	subs	r7, #2
    6e06:	60ee      	str	r6, [r5, #12]
    6e08:	e6d2      	b.n	6bb0 <d_encoding+0x3dc>
    6e0a:	4680      	mov	r8, r0
    6e0c:	e6de      	b.n	6bcc <d_encoding+0x3f8>
    6e0e:	f7ff fce1 	bl	67d4 <d_encoding>
    6e12:	2147      	movs	r1, #71	; 0x47
    6e14:	4602      	mov	r2, r0
    6e16:	2300      	movs	r3, #0
    6e18:	4628      	mov	r0, r5
    6e1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e1e:	f7fe bb45 	b.w	54ac <d_make_comp>
    6e22:	242e      	movs	r4, #46	; 0x2e
    6e24:	e7dd      	b.n	6de2 <d_encoding+0x60e>
    6e26:	242f      	movs	r4, #47	; 0x2f
    6e28:	e7db      	b.n	6de2 <d_encoding+0x60e>
    6e2a:	68eb      	ldr	r3, [r5, #12]
    6e2c:	3302      	adds	r3, #2
    6e2e:	60eb      	str	r3, [r5, #12]
    6e30:	e517      	b.n	6862 <d_encoding+0x8e>
    6e32:	bf00      	nop

00006e34 <d_operator_name>:
    6e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e38:	68c3      	ldr	r3, [r0, #12]
    6e3a:	781f      	ldrb	r7, [r3, #0]
    6e3c:	4680      	mov	r8, r0
    6e3e:	b35f      	cbz	r7, 6e98 <d_operator_name+0x64>
    6e40:	1c5a      	adds	r2, r3, #1
    6e42:	60c2      	str	r2, [r0, #12]
    6e44:	7858      	ldrb	r0, [r3, #1]
    6e46:	781f      	ldrb	r7, [r3, #0]
    6e48:	b118      	cbz	r0, 6e52 <d_operator_name+0x1e>
    6e4a:	1c9a      	adds	r2, r3, #2
    6e4c:	f8c8 200c 	str.w	r2, [r8, #12]
    6e50:	7858      	ldrb	r0, [r3, #1]
    6e52:	2f76      	cmp	r7, #118	; 0x76
    6e54:	d141      	bne.n	6eda <d_operator_name+0xa6>
    6e56:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
    6e5a:	b2e3      	uxtb	r3, r4
    6e5c:	2b09      	cmp	r3, #9
    6e5e:	d81c      	bhi.n	6e9a <d_operator_name+0x66>
    6e60:	4640      	mov	r0, r8
    6e62:	f7fe fd9d 	bl	59a0 <d_source_name>
    6e66:	f8d8 3014 	ldr.w	r3, [r8, #20]
    6e6a:	f8d8 2018 	ldr.w	r2, [r8, #24]
    6e6e:	4293      	cmp	r3, r2
    6e70:	4601      	mov	r1, r0
    6e72:	da2f      	bge.n	6ed4 <d_operator_name+0xa0>
    6e74:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6e78:	f8d8 0010 	ldr.w	r0, [r8, #16]
    6e7c:	3301      	adds	r3, #1
    6e7e:	0092      	lsls	r2, r2, #2
    6e80:	f8c8 3014 	str.w	r3, [r8, #20]
    6e84:	1883      	adds	r3, r0, r2
    6e86:	d025      	beq.n	6ed4 <d_operator_name+0xa0>
    6e88:	b321      	cbz	r1, 6ed4 <d_operator_name+0xa0>
    6e8a:	2532      	movs	r5, #50	; 0x32
    6e8c:	5485      	strb	r5, [r0, r2]
    6e8e:	605c      	str	r4, [r3, #4]
    6e90:	6099      	str	r1, [r3, #8]
    6e92:	4618      	mov	r0, r3
    6e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e98:	4638      	mov	r0, r7
    6e9a:	4e24      	ldr	r6, [pc, #144]	; (6f2c <d_operator_name+0xf8>)
    6e9c:	243d      	movs	r4, #61	; 0x3d
    6e9e:	2300      	movs	r3, #0
    6ea0:	e004      	b.n	6eac <d_operator_name+0x78>
    6ea2:	42ba      	cmp	r2, r7
    6ea4:	d913      	bls.n	6ece <d_operator_name+0x9a>
    6ea6:	460c      	mov	r4, r1
    6ea8:	42a3      	cmp	r3, r4
    6eaa:	d013      	beq.n	6ed4 <d_operator_name+0xa0>
    6eac:	1ae2      	subs	r2, r4, r3
    6eae:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    6eb2:	eb03 0162 	add.w	r1, r3, r2, asr #1
    6eb6:	010a      	lsls	r2, r1, #4
    6eb8:	eb06 0c02 	add.w	ip, r6, r2
    6ebc:	58b5      	ldr	r5, [r6, r2]
    6ebe:	782a      	ldrb	r2, [r5, #0]
    6ec0:	4297      	cmp	r7, r2
    6ec2:	d1ee      	bne.n	6ea2 <d_operator_name+0x6e>
    6ec4:	786a      	ldrb	r2, [r5, #1]
    6ec6:	4290      	cmp	r0, r2
    6ec8:	d016      	beq.n	6ef8 <d_operator_name+0xc4>
    6eca:	4282      	cmp	r2, r0
    6ecc:	d8eb      	bhi.n	6ea6 <d_operator_name+0x72>
    6ece:	1c4b      	adds	r3, r1, #1
    6ed0:	42a3      	cmp	r3, r4
    6ed2:	d1eb      	bne.n	6eac <d_operator_name+0x78>
    6ed4:	2000      	movs	r0, #0
    6ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6eda:	2f63      	cmp	r7, #99	; 0x63
    6edc:	d1dd      	bne.n	6e9a <d_operator_name+0x66>
    6ede:	2876      	cmp	r0, #118	; 0x76
    6ee0:	d1db      	bne.n	6e9a <d_operator_name+0x66>
    6ee2:	4640      	mov	r0, r8
    6ee4:	f7ff f890 	bl	6008 <d_type>
    6ee8:	2133      	movs	r1, #51	; 0x33
    6eea:	4602      	mov	r2, r0
    6eec:	2300      	movs	r3, #0
    6eee:	4640      	mov	r0, r8
    6ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ef4:	f7fe bada 	b.w	54ac <d_make_comp>
    6ef8:	f8d8 3014 	ldr.w	r3, [r8, #20]
    6efc:	f8d8 2018 	ldr.w	r2, [r8, #24]
    6f00:	4293      	cmp	r3, r2
    6f02:	dae7      	bge.n	6ed4 <d_operator_name+0xa0>
    6f04:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6f08:	f8d8 1010 	ldr.w	r1, [r8, #16]
    6f0c:	3301      	adds	r3, #1
    6f0e:	0092      	lsls	r2, r2, #2
    6f10:	f8c8 3014 	str.w	r3, [r8, #20]
    6f14:	188b      	adds	r3, r1, r2
    6f16:	d006      	beq.n	6f26 <d_operator_name+0xf2>
    6f18:	2031      	movs	r0, #49	; 0x31
    6f1a:	5488      	strb	r0, [r1, r2]
    6f1c:	f8c3 c004 	str.w	ip, [r3, #4]
    6f20:	4618      	mov	r0, r3
    6f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f26:	4618      	mov	r0, r3
    6f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f2c:	000134e4 	.word	0x000134e4

00006f30 <d_unqualified_name>:
    6f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f32:	68c2      	ldr	r2, [r0, #12]
    6f34:	7813      	ldrb	r3, [r2, #0]
    6f36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    6f3a:	2909      	cmp	r1, #9
    6f3c:	4604      	mov	r4, r0
    6f3e:	d92e      	bls.n	6f9e <d_unqualified_name+0x6e>
    6f40:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    6f44:	2919      	cmp	r1, #25
    6f46:	d933      	bls.n	6fb0 <d_unqualified_name+0x80>
    6f48:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
    6f4c:	2901      	cmp	r1, #1
    6f4e:	d971      	bls.n	7034 <d_unqualified_name+0x104>
    6f50:	2b4c      	cmp	r3, #76	; 0x4c
    6f52:	f000 8087 	beq.w	7064 <d_unqualified_name+0x134>
    6f56:	2b55      	cmp	r3, #85	; 0x55
    6f58:	f040 808f 	bne.w	707a <d_unqualified_name+0x14a>
    6f5c:	7853      	ldrb	r3, [r2, #1]
    6f5e:	2b6c      	cmp	r3, #108	; 0x6c
    6f60:	d030      	beq.n	6fc4 <d_unqualified_name+0x94>
    6f62:	2b74      	cmp	r3, #116	; 0x74
    6f64:	f040 8089 	bne.w	707a <d_unqualified_name+0x14a>
    6f68:	1c53      	adds	r3, r2, #1
    6f6a:	60c3      	str	r3, [r0, #12]
    6f6c:	7851      	ldrb	r1, [r2, #1]
    6f6e:	2974      	cmp	r1, #116	; 0x74
    6f70:	f000 80c3 	beq.w	70fa <d_unqualified_name+0x1ca>
    6f74:	2942      	cmp	r1, #66	; 0x42
    6f76:	f04f 0500 	mov.w	r5, #0
    6f7a:	d117      	bne.n	6fac <d_unqualified_name+0x7c>
    6f7c:	3301      	adds	r3, #1
    6f7e:	60e3      	str	r3, [r4, #12]
    6f80:	4620      	mov	r0, r4
    6f82:	f7fe fd0d 	bl	59a0 <d_source_name>
    6f86:	462a      	mov	r2, r5
    6f88:	4603      	mov	r3, r0
    6f8a:	214a      	movs	r1, #74	; 0x4a
    6f8c:	4620      	mov	r0, r4
    6f8e:	f7fe fa8d 	bl	54ac <d_make_comp>
    6f92:	68e3      	ldr	r3, [r4, #12]
    6f94:	781a      	ldrb	r2, [r3, #0]
    6f96:	2a42      	cmp	r2, #66	; 0x42
    6f98:	4605      	mov	r5, r0
    6f9a:	d0ef      	beq.n	6f7c <d_unqualified_name+0x4c>
    6f9c:	e006      	b.n	6fac <d_unqualified_name+0x7c>
    6f9e:	f7fe fcff 	bl	59a0 <d_source_name>
    6fa2:	68e3      	ldr	r3, [r4, #12]
    6fa4:	7819      	ldrb	r1, [r3, #0]
    6fa6:	4605      	mov	r5, r0
    6fa8:	2942      	cmp	r1, #66	; 0x42
    6faa:	d0e7      	beq.n	6f7c <d_unqualified_name+0x4c>
    6fac:	4628      	mov	r0, r5
    6fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fb0:	f7ff ff40 	bl	6e34 <d_operator_name>
    6fb4:	4605      	mov	r5, r0
    6fb6:	b110      	cbz	r0, 6fbe <d_unqualified_name+0x8e>
    6fb8:	7803      	ldrb	r3, [r0, #0]
    6fba:	2b31      	cmp	r3, #49	; 0x31
    6fbc:	d05f      	beq.n	707e <d_unqualified_name+0x14e>
    6fbe:	68e3      	ldr	r3, [r4, #12]
    6fc0:	7819      	ldrb	r1, [r3, #0]
    6fc2:	e7f1      	b.n	6fa8 <d_unqualified_name+0x78>
    6fc4:	1c53      	adds	r3, r2, #1
    6fc6:	60c3      	str	r3, [r0, #12]
    6fc8:	7851      	ldrb	r1, [r2, #1]
    6fca:	296c      	cmp	r1, #108	; 0x6c
    6fcc:	d1d2      	bne.n	6f74 <d_unqualified_name+0x44>
    6fce:	3202      	adds	r2, #2
    6fd0:	60c2      	str	r2, [r0, #12]
    6fd2:	f7ff fb9d 	bl	6710 <d_parmlist>
    6fd6:	68e3      	ldr	r3, [r4, #12]
    6fd8:	4606      	mov	r6, r0
    6fda:	2800      	cmp	r0, #0
    6fdc:	f000 80e1 	beq.w	71a2 <d_unqualified_name+0x272>
    6fe0:	7819      	ldrb	r1, [r3, #0]
    6fe2:	2945      	cmp	r1, #69	; 0x45
    6fe4:	d1c6      	bne.n	6f74 <d_unqualified_name+0x44>
    6fe6:	3301      	adds	r3, #1
    6fe8:	60e3      	str	r3, [r4, #12]
    6fea:	4620      	mov	r0, r4
    6fec:	f7fe fc8e 	bl	590c <d_compact_number>
    6ff0:	2800      	cmp	r0, #0
    6ff2:	f2c0 809c 	blt.w	712e <d_unqualified_name+0x1fe>
    6ff6:	6963      	ldr	r3, [r4, #20]
    6ff8:	69a2      	ldr	r2, [r4, #24]
    6ffa:	4293      	cmp	r3, r2
    6ffc:	f280 8097 	bge.w	712e <d_unqualified_name+0x1fe>
    7000:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    7004:	6921      	ldr	r1, [r4, #16]
    7006:	0092      	lsls	r2, r2, #2
    7008:	3301      	adds	r3, #1
    700a:	188d      	adds	r5, r1, r2
    700c:	6163      	str	r3, [r4, #20]
    700e:	f000 808e 	beq.w	712e <d_unqualified_name+0x1fe>
    7012:	2344      	movs	r3, #68	; 0x44
    7014:	548b      	strb	r3, [r1, r2]
    7016:	606e      	str	r6, [r5, #4]
    7018:	60a8      	str	r0, [r5, #8]
    701a:	6a23      	ldr	r3, [r4, #32]
    701c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    701e:	4293      	cmp	r3, r2
    7020:	f280 8085 	bge.w	712e <d_unqualified_name+0x1fe>
    7024:	69e2      	ldr	r2, [r4, #28]
    7026:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    702a:	1c5a      	adds	r2, r3, #1
    702c:	68e3      	ldr	r3, [r4, #12]
    702e:	6222      	str	r2, [r4, #32]
    7030:	7819      	ldrb	r1, [r3, #0]
    7032:	e7b9      	b.n	6fa8 <d_unqualified_name+0x78>
    7034:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    7036:	2800      	cmp	r0, #0
    7038:	d03c      	beq.n	70b4 <d_unqualified_name+0x184>
    703a:	7801      	ldrb	r1, [r0, #0]
    703c:	2900      	cmp	r1, #0
    703e:	d137      	bne.n	70b0 <d_unqualified_name+0x180>
    7040:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7042:	6883      	ldr	r3, [r0, #8]
    7044:	440b      	add	r3, r1
    7046:	6323      	str	r3, [r4, #48]	; 0x30
    7048:	7811      	ldrb	r1, [r2, #0]
    704a:	2943      	cmp	r1, #67	; 0x43
    704c:	d078      	beq.n	7140 <d_unqualified_name+0x210>
    704e:	2944      	cmp	r1, #68	; 0x44
    7050:	d173      	bne.n	713a <d_unqualified_name+0x20a>
    7052:	7853      	ldrb	r3, [r2, #1]
    7054:	3b30      	subs	r3, #48	; 0x30
    7056:	2b05      	cmp	r3, #5
    7058:	d84d      	bhi.n	70f6 <d_unqualified_name+0x1c6>
    705a:	e8df f003 	tbb	[pc, r3]
    705e:	2d48      	.short	0x2d48
    7060:	4a4c4c46 	.word	0x4a4c4c46
    7064:	3201      	adds	r2, #1
    7066:	60c2      	str	r2, [r0, #12]
    7068:	f7fe fc9a 	bl	59a0 <d_source_name>
    706c:	4605      	mov	r5, r0
    706e:	b120      	cbz	r0, 707a <d_unqualified_name+0x14a>
    7070:	4620      	mov	r0, r4
    7072:	f7fe fc85 	bl	5980 <d_discriminator>
    7076:	2800      	cmp	r0, #0
    7078:	d1a1      	bne.n	6fbe <d_unqualified_name+0x8e>
    707a:	2000      	movs	r0, #0
    707c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    707e:	6843      	ldr	r3, [r0, #4]
    7080:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7082:	689e      	ldr	r6, [r3, #8]
    7084:	6818      	ldr	r0, [r3, #0]
    7086:	4948      	ldr	r1, [pc, #288]	; (71a8 <d_unqualified_name+0x278>)
    7088:	4432      	add	r2, r6
    708a:	3207      	adds	r2, #7
    708c:	6322      	str	r2, [r4, #48]	; 0x30
    708e:	f007 fcff 	bl	ea90 <strcmp>
    7092:	2800      	cmp	r0, #0
    7094:	d193      	bne.n	6fbe <d_unqualified_name+0x8e>
    7096:	4620      	mov	r0, r4
    7098:	f7fe fc82 	bl	59a0 <d_source_name>
    709c:	462a      	mov	r2, r5
    709e:	4603      	mov	r3, r0
    70a0:	2135      	movs	r1, #53	; 0x35
    70a2:	4620      	mov	r0, r4
    70a4:	f7fe fa02 	bl	54ac <d_make_comp>
    70a8:	68e3      	ldr	r3, [r4, #12]
    70aa:	4605      	mov	r5, r0
    70ac:	7819      	ldrb	r1, [r3, #0]
    70ae:	e77b      	b.n	6fa8 <d_unqualified_name+0x78>
    70b0:	2918      	cmp	r1, #24
    70b2:	d0c5      	beq.n	7040 <d_unqualified_name+0x110>
    70b4:	4619      	mov	r1, r3
    70b6:	e7c8      	b.n	704a <d_unqualified_name+0x11a>
    70b8:	2702      	movs	r7, #2
    70ba:	6961      	ldr	r1, [r4, #20]
    70bc:	69a5      	ldr	r5, [r4, #24]
    70be:	1c93      	adds	r3, r2, #2
    70c0:	42a9      	cmp	r1, r5
    70c2:	60e3      	str	r3, [r4, #12]
    70c4:	da37      	bge.n	7136 <d_unqualified_name+0x206>
    70c6:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    70ca:	6926      	ldr	r6, [r4, #16]
    70cc:	3101      	adds	r1, #1
    70ce:	00ad      	lsls	r5, r5, #2
    70d0:	6161      	str	r1, [r4, #20]
    70d2:	1971      	adds	r1, r6, r5
    70d4:	d02f      	beq.n	7136 <d_unqualified_name+0x206>
    70d6:	b370      	cbz	r0, 7136 <d_unqualified_name+0x206>
    70d8:	f04f 0c08 	mov.w	ip, #8
    70dc:	f806 c005 	strb.w	ip, [r6, r5]
    70e0:	460d      	mov	r5, r1
    70e2:	710f      	strb	r7, [r1, #4]
    70e4:	6088      	str	r0, [r1, #8]
    70e6:	7891      	ldrb	r1, [r2, #2]
    70e8:	e75e      	b.n	6fa8 <d_unqualified_name+0x78>
    70ea:	2703      	movs	r7, #3
    70ec:	e7e5      	b.n	70ba <d_unqualified_name+0x18a>
    70ee:	2701      	movs	r7, #1
    70f0:	e7e3      	b.n	70ba <d_unqualified_name+0x18a>
    70f2:	2704      	movs	r7, #4
    70f4:	e7e1      	b.n	70ba <d_unqualified_name+0x18a>
    70f6:	2500      	movs	r5, #0
    70f8:	e758      	b.n	6fac <d_unqualified_name+0x7c>
    70fa:	3202      	adds	r2, #2
    70fc:	60c2      	str	r2, [r0, #12]
    70fe:	f7fe fc05 	bl	590c <d_compact_number>
    7102:	2800      	cmp	r0, #0
    7104:	db13      	blt.n	712e <d_unqualified_name+0x1fe>
    7106:	6963      	ldr	r3, [r4, #20]
    7108:	69a2      	ldr	r2, [r4, #24]
    710a:	4293      	cmp	r3, r2
    710c:	da0f      	bge.n	712e <d_unqualified_name+0x1fe>
    710e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    7112:	6921      	ldr	r1, [r4, #16]
    7114:	0092      	lsls	r2, r2, #2
    7116:	3301      	adds	r3, #1
    7118:	188d      	adds	r5, r1, r2
    711a:	6163      	str	r3, [r4, #20]
    711c:	d007      	beq.n	712e <d_unqualified_name+0x1fe>
    711e:	2346      	movs	r3, #70	; 0x46
    7120:	548b      	strb	r3, [r1, r2]
    7122:	6068      	str	r0, [r5, #4]
    7124:	6a23      	ldr	r3, [r4, #32]
    7126:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7128:	4293      	cmp	r3, r2
    712a:	f6ff af7b 	blt.w	7024 <d_unqualified_name+0xf4>
    712e:	68e3      	ldr	r3, [r4, #12]
    7130:	2500      	movs	r5, #0
    7132:	7819      	ldrb	r1, [r3, #0]
    7134:	e738      	b.n	6fa8 <d_unqualified_name+0x78>
    7136:	2500      	movs	r5, #0
    7138:	e7d5      	b.n	70e6 <d_unqualified_name+0x1b6>
    713a:	4613      	mov	r3, r2
    713c:	2500      	movs	r5, #0
    713e:	e733      	b.n	6fa8 <d_unqualified_name+0x78>
    7140:	7853      	ldrb	r3, [r2, #1]
    7142:	3b31      	subs	r3, #49	; 0x31
    7144:	2b04      	cmp	r3, #4
    7146:	d8d6      	bhi.n	70f6 <d_unqualified_name+0x1c6>
    7148:	a101      	add	r1, pc, #4	; (adr r1, 7150 <d_unqualified_name+0x220>)
    714a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    714e:	bf00      	nop
    7150:	00007197 	.word	0x00007197
    7154:	00007165 	.word	0x00007165
    7158:	0000719f 	.word	0x0000719f
    715c:	000070f7 	.word	0x000070f7
    7160:	0000719b 	.word	0x0000719b
    7164:	2702      	movs	r7, #2
    7166:	6961      	ldr	r1, [r4, #20]
    7168:	69a5      	ldr	r5, [r4, #24]
    716a:	1c93      	adds	r3, r2, #2
    716c:	42a9      	cmp	r1, r5
    716e:	60e3      	str	r3, [r4, #12]
    7170:	dae1      	bge.n	7136 <d_unqualified_name+0x206>
    7172:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    7176:	6926      	ldr	r6, [r4, #16]
    7178:	3101      	adds	r1, #1
    717a:	00ad      	lsls	r5, r5, #2
    717c:	6161      	str	r1, [r4, #20]
    717e:	1971      	adds	r1, r6, r5
    7180:	d0d9      	beq.n	7136 <d_unqualified_name+0x206>
    7182:	2800      	cmp	r0, #0
    7184:	d0d7      	beq.n	7136 <d_unqualified_name+0x206>
    7186:	f04f 0c07 	mov.w	ip, #7
    718a:	f806 c005 	strb.w	ip, [r6, r5]
    718e:	460d      	mov	r5, r1
    7190:	710f      	strb	r7, [r1, #4]
    7192:	6088      	str	r0, [r1, #8]
    7194:	e7a7      	b.n	70e6 <d_unqualified_name+0x1b6>
    7196:	2701      	movs	r7, #1
    7198:	e7e5      	b.n	7166 <d_unqualified_name+0x236>
    719a:	2704      	movs	r7, #4
    719c:	e7e3      	b.n	7166 <d_unqualified_name+0x236>
    719e:	2703      	movs	r7, #3
    71a0:	e7e1      	b.n	7166 <d_unqualified_name+0x236>
    71a2:	4605      	mov	r5, r0
    71a4:	7819      	ldrb	r1, [r3, #0]
    71a6:	e6ff      	b.n	6fa8 <d_unqualified_name+0x78>
    71a8:	00013904 	.word	0x00013904

000071ac <d_expression>:
    71ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71b0:	68c1      	ldr	r1, [r0, #12]
    71b2:	780b      	ldrb	r3, [r1, #0]
    71b4:	2b4c      	cmp	r3, #76	; 0x4c
    71b6:	4604      	mov	r4, r0
    71b8:	f000 809e 	beq.w	72f8 <d_expression+0x14c>
    71bc:	2b54      	cmp	r3, #84	; 0x54
    71be:	f000 809f 	beq.w	7300 <d_expression+0x154>
    71c2:	2b73      	cmp	r3, #115	; 0x73
    71c4:	d057      	beq.n	7276 <d_expression+0xca>
    71c6:	2b66      	cmp	r3, #102	; 0x66
    71c8:	d02d      	beq.n	7226 <d_expression+0x7a>
    71ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    71ce:	2a09      	cmp	r2, #9
    71d0:	d80d      	bhi.n	71ee <d_expression+0x42>
    71d2:	4620      	mov	r0, r4
    71d4:	f7ff feac 	bl	6f30 <d_unqualified_name>
    71d8:	4605      	mov	r5, r0
    71da:	2800      	cmp	r0, #0
    71dc:	f000 8083 	beq.w	72e6 <d_expression+0x13a>
    71e0:	68e3      	ldr	r3, [r4, #12]
    71e2:	781b      	ldrb	r3, [r3, #0]
    71e4:	2b49      	cmp	r3, #73	; 0x49
    71e6:	f000 80a3 	beq.w	7330 <d_expression+0x184>
    71ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71ee:	2b6f      	cmp	r3, #111	; 0x6f
    71f0:	d07c      	beq.n	72ec <d_expression+0x140>
    71f2:	2b69      	cmp	r3, #105	; 0x69
    71f4:	f000 80a7 	beq.w	7346 <d_expression+0x19a>
    71f8:	2b74      	cmp	r3, #116	; 0x74
    71fa:	d117      	bne.n	722c <d_expression+0x80>
    71fc:	784b      	ldrb	r3, [r1, #1]
    71fe:	2b6c      	cmp	r3, #108	; 0x6c
    7200:	d114      	bne.n	722c <d_expression+0x80>
    7202:	f7fe ff01 	bl	6008 <d_type>
    7206:	68e1      	ldr	r1, [r4, #12]
    7208:	4605      	mov	r5, r0
    720a:	3102      	adds	r1, #2
    720c:	60e1      	str	r1, [r4, #12]
    720e:	4620      	mov	r0, r4
    7210:	2145      	movs	r1, #69	; 0x45
    7212:	f000 f9a9 	bl	7568 <d_exprlist>
    7216:	462a      	mov	r2, r5
    7218:	4603      	mov	r3, r0
    721a:	2130      	movs	r1, #48	; 0x30
    721c:	4620      	mov	r0, r4
    721e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7222:	f7fe b943 	b.w	54ac <d_make_comp>
    7226:	784b      	ldrb	r3, [r1, #1]
    7228:	2b70      	cmp	r3, #112	; 0x70
    722a:	d040      	beq.n	72ae <d_expression+0x102>
    722c:	4620      	mov	r0, r4
    722e:	f7ff fe01 	bl	6e34 <d_operator_name>
    7232:	4605      	mov	r5, r0
    7234:	2800      	cmp	r0, #0
    7236:	d056      	beq.n	72e6 <d_expression+0x13a>
    7238:	7806      	ldrb	r6, [r0, #0]
    723a:	2e31      	cmp	r6, #49	; 0x31
    723c:	d064      	beq.n	7308 <d_expression+0x15c>
    723e:	2e32      	cmp	r6, #50	; 0x32
    7240:	d02b      	beq.n	729a <d_expression+0xee>
    7242:	2e33      	cmp	r6, #51	; 0x33
    7244:	d14f      	bne.n	72e6 <d_expression+0x13a>
    7246:	2700      	movs	r7, #0
    7248:	68e3      	ldr	r3, [r4, #12]
    724a:	781a      	ldrb	r2, [r3, #0]
    724c:	2a5f      	cmp	r2, #95	; 0x5f
    724e:	f000 810d 	beq.w	746c <d_expression+0x2c0>
    7252:	4620      	mov	r0, r4
    7254:	f7ff ffaa 	bl	71ac <d_expression>
    7258:	4603      	mov	r3, r0
    725a:	b12f      	cbz	r7, 7268 <d_expression+0xbc>
    725c:	461a      	mov	r2, r3
    725e:	4620      	mov	r0, r4
    7260:	2137      	movs	r1, #55	; 0x37
    7262:	f7fe f923 	bl	54ac <d_make_comp>
    7266:	4603      	mov	r3, r0
    7268:	4620      	mov	r0, r4
    726a:	462a      	mov	r2, r5
    726c:	2135      	movs	r1, #53	; 0x35
    726e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7272:	f7fe b91b 	b.w	54ac <d_make_comp>
    7276:	784b      	ldrb	r3, [r1, #1]
    7278:	2b72      	cmp	r3, #114	; 0x72
    727a:	f000 80de 	beq.w	743a <d_expression+0x28e>
    727e:	2b70      	cmp	r3, #112	; 0x70
    7280:	d1d4      	bne.n	722c <d_expression+0x80>
    7282:	3102      	adds	r1, #2
    7284:	60c1      	str	r1, [r0, #12]
    7286:	f7ff ff91 	bl	71ac <d_expression>
    728a:	2149      	movs	r1, #73	; 0x49
    728c:	4602      	mov	r2, r0
    728e:	2300      	movs	r3, #0
    7290:	4620      	mov	r0, r4
    7292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7296:	f7fe b909 	b.w	54ac <d_make_comp>
    729a:	6843      	ldr	r3, [r0, #4]
    729c:	2700      	movs	r7, #0
    729e:	2b03      	cmp	r3, #3
    72a0:	d821      	bhi.n	72e6 <d_expression+0x13a>
    72a2:	e8df f013 	tbh	[pc, r3, lsl #1]
    72a6:	0056      	.short	0x0056
    72a8:	009a013f 	.word	0x009a013f
    72ac:	005e      	.short	0x005e
    72ae:	1c8b      	adds	r3, r1, #2
    72b0:	60c3      	str	r3, [r0, #12]
    72b2:	788b      	ldrb	r3, [r1, #2]
    72b4:	2b54      	cmp	r3, #84	; 0x54
    72b6:	f000 80d5 	beq.w	7464 <d_expression+0x2b8>
    72ba:	f7fe fb27 	bl	590c <d_compact_number>
    72be:	1c45      	adds	r5, r0, #1
    72c0:	d011      	beq.n	72e6 <d_expression+0x13a>
    72c2:	6963      	ldr	r3, [r4, #20]
    72c4:	69a2      	ldr	r2, [r4, #24]
    72c6:	4293      	cmp	r3, r2
    72c8:	da0d      	bge.n	72e6 <d_expression+0x13a>
    72ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    72ce:	6921      	ldr	r1, [r4, #16]
    72d0:	3301      	adds	r3, #1
    72d2:	0092      	lsls	r2, r2, #2
    72d4:	6163      	str	r3, [r4, #20]
    72d6:	188b      	adds	r3, r1, r2
    72d8:	d005      	beq.n	72e6 <d_expression+0x13a>
    72da:	2006      	movs	r0, #6
    72dc:	5488      	strb	r0, [r1, r2]
    72de:	605d      	str	r5, [r3, #4]
    72e0:	4618      	mov	r0, r3
    72e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72e6:	2000      	movs	r0, #0
    72e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72ec:	784b      	ldrb	r3, [r1, #1]
    72ee:	2b6e      	cmp	r3, #110	; 0x6e
    72f0:	d19c      	bne.n	722c <d_expression+0x80>
    72f2:	3102      	adds	r1, #2
    72f4:	60c1      	str	r1, [r0, #12]
    72f6:	e76c      	b.n	71d2 <d_expression+0x26>
    72f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72fc:	f7fe bc60 	b.w	5bc0 <d_expr_primary>
    7300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7304:	f7fe bb1a 	b.w	593c <d_template_param>
    7308:	f8d0 8004 	ldr.w	r8, [r0, #4]
    730c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    730e:	f8d8 2008 	ldr.w	r2, [r8, #8]
    7312:	f8d8 7000 	ldr.w	r7, [r8]
    7316:	498f      	ldr	r1, [pc, #572]	; (7554 <d_expression+0x3a8>)
    7318:	3a02      	subs	r2, #2
    731a:	4413      	add	r3, r2
    731c:	6323      	str	r3, [r4, #48]	; 0x30
    731e:	4638      	mov	r0, r7
    7320:	f007 fbb6 	bl	ea90 <strcmp>
    7324:	2800      	cmp	r0, #0
    7326:	f000 80a9 	beq.w	747c <d_expression+0x2d0>
    732a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    732e:	e7b6      	b.n	729e <d_expression+0xf2>
    7330:	4620      	mov	r0, r4
    7332:	f7fe fcab 	bl	5c8c <d_template_args>
    7336:	462a      	mov	r2, r5
    7338:	4603      	mov	r3, r0
    733a:	2104      	movs	r1, #4
    733c:	4620      	mov	r0, r4
    733e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7342:	f7fe b8b3 	b.w	54ac <d_make_comp>
    7346:	784b      	ldrb	r3, [r1, #1]
    7348:	2b6c      	cmp	r3, #108	; 0x6c
    734a:	f47f af6f 	bne.w	722c <d_expression+0x80>
    734e:	2500      	movs	r5, #0
    7350:	e75b      	b.n	720a <d_expression+0x5e>
    7352:	4620      	mov	r0, r4
    7354:	462a      	mov	r2, r5
    7356:	2134      	movs	r1, #52	; 0x34
    7358:	2300      	movs	r3, #0
    735a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    735e:	f7fe b8a5 	b.w	54ac <d_make_comp>
    7362:	4638      	mov	r0, r7
    7364:	497c      	ldr	r1, [pc, #496]	; (7558 <d_expression+0x3ac>)
    7366:	f007 fb93 	bl	ea90 <strcmp>
    736a:	2800      	cmp	r0, #0
    736c:	f000 808a 	beq.w	7484 <d_expression+0x2d8>
    7370:	783b      	ldrb	r3, [r7, #0]
    7372:	2b6e      	cmp	r3, #110	; 0x6e
    7374:	d1b7      	bne.n	72e6 <d_expression+0x13a>
    7376:	787b      	ldrb	r3, [r7, #1]
    7378:	2b77      	cmp	r3, #119	; 0x77
    737a:	d001      	beq.n	7380 <d_expression+0x1d4>
    737c:	2b61      	cmp	r3, #97	; 0x61
    737e:	d1b2      	bne.n	72e6 <d_expression+0x13a>
    7380:	215f      	movs	r1, #95	; 0x5f
    7382:	4620      	mov	r0, r4
    7384:	f000 f8f0 	bl	7568 <d_exprlist>
    7388:	4606      	mov	r6, r0
    738a:	4620      	mov	r0, r4
    738c:	f7fe fe3c 	bl	6008 <d_type>
    7390:	68e1      	ldr	r1, [r4, #12]
    7392:	780b      	ldrb	r3, [r1, #0]
    7394:	2b45      	cmp	r3, #69	; 0x45
    7396:	4607      	mov	r7, r0
    7398:	f000 80a9 	beq.w	74ee <d_expression+0x342>
    739c:	2b70      	cmp	r3, #112	; 0x70
    739e:	f000 80b5 	beq.w	750c <d_expression+0x360>
    73a2:	2b69      	cmp	r3, #105	; 0x69
    73a4:	d19f      	bne.n	72e6 <d_expression+0x13a>
    73a6:	784b      	ldrb	r3, [r1, #1]
    73a8:	2b6c      	cmp	r3, #108	; 0x6c
    73aa:	d19c      	bne.n	72e6 <d_expression+0x13a>
    73ac:	4620      	mov	r0, r4
    73ae:	f7ff fefd 	bl	71ac <d_expression>
    73b2:	4603      	mov	r3, r0
    73b4:	463a      	mov	r2, r7
    73b6:	4620      	mov	r0, r4
    73b8:	213a      	movs	r1, #58	; 0x3a
    73ba:	f7fe f877 	bl	54ac <d_make_comp>
    73be:	4632      	mov	r2, r6
    73c0:	4603      	mov	r3, r0
    73c2:	2139      	movs	r1, #57	; 0x39
    73c4:	4620      	mov	r0, r4
    73c6:	f7fe f871 	bl	54ac <d_make_comp>
    73ca:	462a      	mov	r2, r5
    73cc:	4603      	mov	r3, r0
    73ce:	2138      	movs	r1, #56	; 0x38
    73d0:	4620      	mov	r0, r4
    73d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    73d6:	f7fe b869 	b.w	54ac <d_make_comp>
    73da:	686b      	ldr	r3, [r5, #4]
    73dc:	681b      	ldr	r3, [r3, #0]
    73de:	785a      	ldrb	r2, [r3, #1]
    73e0:	2a63      	cmp	r2, #99	; 0x63
    73e2:	d062      	beq.n	74aa <d_expression+0x2fe>
    73e4:	4620      	mov	r0, r4
    73e6:	f7ff fee1 	bl	71ac <d_expression>
    73ea:	4680      	mov	r8, r0
    73ec:	4638      	mov	r0, r7
    73ee:	495b      	ldr	r1, [pc, #364]	; (755c <d_expression+0x3b0>)
    73f0:	f007 fb4e 	bl	ea90 <strcmp>
    73f4:	2800      	cmp	r0, #0
    73f6:	d052      	beq.n	749e <d_expression+0x2f2>
    73f8:	4638      	mov	r0, r7
    73fa:	4959      	ldr	r1, [pc, #356]	; (7560 <d_expression+0x3b4>)
    73fc:	f007 fb48 	bl	ea90 <strcmp>
    7400:	b128      	cbz	r0, 740e <d_expression+0x262>
    7402:	4638      	mov	r0, r7
    7404:	4957      	ldr	r1, [pc, #348]	; (7564 <d_expression+0x3b8>)
    7406:	f007 fb43 	bl	ea90 <strcmp>
    740a:	2800      	cmp	r0, #0
    740c:	d16a      	bne.n	74e4 <d_expression+0x338>
    740e:	4620      	mov	r0, r4
    7410:	f7ff fd8e 	bl	6f30 <d_unqualified_name>
    7414:	68e3      	ldr	r3, [r4, #12]
    7416:	781b      	ldrb	r3, [r3, #0]
    7418:	2b49      	cmp	r3, #73	; 0x49
    741a:	4606      	mov	r6, r0
    741c:	d06b      	beq.n	74f6 <d_expression+0x34a>
    741e:	4642      	mov	r2, r8
    7420:	4633      	mov	r3, r6
    7422:	4620      	mov	r0, r4
    7424:	2137      	movs	r1, #55	; 0x37
    7426:	f7fe f841 	bl	54ac <d_make_comp>
    742a:	462a      	mov	r2, r5
    742c:	4603      	mov	r3, r0
    742e:	2136      	movs	r1, #54	; 0x36
    7430:	4620      	mov	r0, r4
    7432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7436:	f7fe b839 	b.w	54ac <d_make_comp>
    743a:	3102      	adds	r1, #2
    743c:	60c1      	str	r1, [r0, #12]
    743e:	f7fe fde3 	bl	6008 <d_type>
    7442:	4605      	mov	r5, r0
    7444:	4620      	mov	r0, r4
    7446:	f7ff fd73 	bl	6f30 <d_unqualified_name>
    744a:	68e1      	ldr	r1, [r4, #12]
    744c:	7809      	ldrb	r1, [r1, #0]
    744e:	2949      	cmp	r1, #73	; 0x49
    7450:	4606      	mov	r6, r0
    7452:	4620      	mov	r0, r4
    7454:	d036      	beq.n	74c4 <d_expression+0x318>
    7456:	462a      	mov	r2, r5
    7458:	4633      	mov	r3, r6
    745a:	2101      	movs	r1, #1
    745c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7460:	f7fe b824 	b.w	54ac <d_make_comp>
    7464:	3103      	adds	r1, #3
    7466:	60c1      	str	r1, [r0, #12]
    7468:	2500      	movs	r5, #0
    746a:	e72a      	b.n	72c2 <d_expression+0x116>
    746c:	3301      	adds	r3, #1
    746e:	60e3      	str	r3, [r4, #12]
    7470:	4620      	mov	r0, r4
    7472:	2145      	movs	r1, #69	; 0x45
    7474:	f000 f878 	bl	7568 <d_exprlist>
    7478:	4603      	mov	r3, r0
    747a:	e6ee      	b.n	725a <d_expression+0xae>
    747c:	4620      	mov	r0, r4
    747e:	f7fe fdc3 	bl	6008 <d_type>
    7482:	e6f0      	b.n	7266 <d_expression+0xba>
    7484:	4620      	mov	r0, r4
    7486:	f7ff fe91 	bl	71ac <d_expression>
    748a:	4606      	mov	r6, r0
    748c:	4620      	mov	r0, r4
    748e:	f7ff fe8d 	bl	71ac <d_expression>
    7492:	4607      	mov	r7, r0
    7494:	4620      	mov	r0, r4
    7496:	f7ff fe89 	bl	71ac <d_expression>
    749a:	4603      	mov	r3, r0
    749c:	e78a      	b.n	73b4 <d_expression+0x208>
    749e:	4620      	mov	r0, r4
    74a0:	2145      	movs	r1, #69	; 0x45
    74a2:	f000 f861 	bl	7568 <d_exprlist>
    74a6:	4606      	mov	r6, r0
    74a8:	e7b9      	b.n	741e <d_expression+0x272>
    74aa:	781b      	ldrb	r3, [r3, #0]
    74ac:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
    74b0:	2a01      	cmp	r2, #1
    74b2:	d902      	bls.n	74ba <d_expression+0x30e>
    74b4:	3b72      	subs	r3, #114	; 0x72
    74b6:	2b01      	cmp	r3, #1
    74b8:	d894      	bhi.n	73e4 <d_expression+0x238>
    74ba:	4620      	mov	r0, r4
    74bc:	f7fe fda4 	bl	6008 <d_type>
    74c0:	4680      	mov	r8, r0
    74c2:	e793      	b.n	73ec <d_expression+0x240>
    74c4:	f7fe fbe2 	bl	5c8c <d_template_args>
    74c8:	4632      	mov	r2, r6
    74ca:	4603      	mov	r3, r0
    74cc:	2104      	movs	r1, #4
    74ce:	4620      	mov	r0, r4
    74d0:	f7fd ffec 	bl	54ac <d_make_comp>
    74d4:	462a      	mov	r2, r5
    74d6:	4603      	mov	r3, r0
    74d8:	2101      	movs	r1, #1
    74da:	4620      	mov	r0, r4
    74dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    74e0:	f7fd bfe4 	b.w	54ac <d_make_comp>
    74e4:	4620      	mov	r0, r4
    74e6:	f7ff fe61 	bl	71ac <d_expression>
    74ea:	4606      	mov	r6, r0
    74ec:	e797      	b.n	741e <d_expression+0x272>
    74ee:	3101      	adds	r1, #1
    74f0:	60e1      	str	r1, [r4, #12]
    74f2:	2300      	movs	r3, #0
    74f4:	e75e      	b.n	73b4 <d_expression+0x208>
    74f6:	4620      	mov	r0, r4
    74f8:	f7fe fbc8 	bl	5c8c <d_template_args>
    74fc:	4632      	mov	r2, r6
    74fe:	4603      	mov	r3, r0
    7500:	2104      	movs	r1, #4
    7502:	4620      	mov	r0, r4
    7504:	f7fd ffd2 	bl	54ac <d_make_comp>
    7508:	4606      	mov	r6, r0
    750a:	e788      	b.n	741e <d_expression+0x272>
    750c:	784b      	ldrb	r3, [r1, #1]
    750e:	2b69      	cmp	r3, #105	; 0x69
    7510:	f47f aee9 	bne.w	72e6 <d_expression+0x13a>
    7514:	3102      	adds	r1, #2
    7516:	60e1      	str	r1, [r4, #12]
    7518:	4620      	mov	r0, r4
    751a:	2145      	movs	r1, #69	; 0x45
    751c:	f000 f824 	bl	7568 <d_exprlist>
    7520:	4603      	mov	r3, r0
    7522:	e747      	b.n	73b4 <d_expression+0x208>
    7524:	b12f      	cbz	r7, 7532 <d_expression+0x386>
    7526:	783b      	ldrb	r3, [r7, #0]
    7528:	2b70      	cmp	r3, #112	; 0x70
    752a:	d006      	beq.n	753a <d_expression+0x38e>
    752c:	2b6d      	cmp	r3, #109	; 0x6d
    752e:	d004      	beq.n	753a <d_expression+0x38e>
    7530:	2700      	movs	r7, #0
    7532:	2e33      	cmp	r6, #51	; 0x33
    7534:	f47f ae8d 	bne.w	7252 <d_expression+0xa6>
    7538:	e686      	b.n	7248 <d_expression+0x9c>
    753a:	787a      	ldrb	r2, [r7, #1]
    753c:	429a      	cmp	r2, r3
    753e:	d1f7      	bne.n	7530 <d_expression+0x384>
    7540:	68e3      	ldr	r3, [r4, #12]
    7542:	781a      	ldrb	r2, [r3, #0]
    7544:	2a5f      	cmp	r2, #95	; 0x5f
    7546:	d001      	beq.n	754c <d_expression+0x3a0>
    7548:	2701      	movs	r7, #1
    754a:	e7f2      	b.n	7532 <d_expression+0x386>
    754c:	3301      	adds	r3, #1
    754e:	60e3      	str	r3, [r4, #12]
    7550:	2700      	movs	r7, #0
    7552:	e7ee      	b.n	7532 <d_expression+0x386>
    7554:	00013db0 	.word	0x00013db0
    7558:	00013914 	.word	0x00013914
    755c:	00013908 	.word	0x00013908
    7560:	0001390c 	.word	0x0001390c
    7564:	00013910 	.word	0x00013910

00007568 <d_exprlist>:
    7568:	b5f0      	push	{r4, r5, r6, r7, lr}
    756a:	68c3      	ldr	r3, [r0, #12]
    756c:	460f      	mov	r7, r1
    756e:	7819      	ldrb	r1, [r3, #0]
    7570:	b083      	sub	sp, #12
    7572:	2200      	movs	r2, #0
    7574:	42b9      	cmp	r1, r7
    7576:	4604      	mov	r4, r0
    7578:	9201      	str	r2, [sp, #4]
    757a:	bf18      	it	ne
    757c:	ae01      	addne	r6, sp, #4
    757e:	d10a      	bne.n	7596 <d_exprlist+0x2e>
    7580:	e01b      	b.n	75ba <d_exprlist+0x52>
    7582:	f7fd ff93 	bl	54ac <d_make_comp>
    7586:	6030      	str	r0, [r6, #0]
    7588:	f100 0608 	add.w	r6, r0, #8
    758c:	b168      	cbz	r0, 75aa <d_exprlist+0x42>
    758e:	68e3      	ldr	r3, [r4, #12]
    7590:	781a      	ldrb	r2, [r3, #0]
    7592:	42ba      	cmp	r2, r7
    7594:	d00c      	beq.n	75b0 <d_exprlist+0x48>
    7596:	4620      	mov	r0, r4
    7598:	f7ff fe08 	bl	71ac <d_expression>
    759c:	4605      	mov	r5, r0
    759e:	212e      	movs	r1, #46	; 0x2e
    75a0:	4620      	mov	r0, r4
    75a2:	462a      	mov	r2, r5
    75a4:	2300      	movs	r3, #0
    75a6:	2d00      	cmp	r5, #0
    75a8:	d1eb      	bne.n	7582 <d_exprlist+0x1a>
    75aa:	2000      	movs	r0, #0
    75ac:	b003      	add	sp, #12
    75ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75b0:	9801      	ldr	r0, [sp, #4]
    75b2:	3301      	adds	r3, #1
    75b4:	60e3      	str	r3, [r4, #12]
    75b6:	b003      	add	sp, #12
    75b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75ba:	3301      	adds	r3, #1
    75bc:	60c3      	str	r3, [r0, #12]
    75be:	212e      	movs	r1, #46	; 0x2e
    75c0:	4613      	mov	r3, r2
    75c2:	b003      	add	sp, #12
    75c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    75c8:	f7fd bf70 	b.w	54ac <d_make_comp>

000075cc <d_append_string>:
    75cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75d0:	4604      	mov	r4, r0
    75d2:	4608      	mov	r0, r1
    75d4:	460d      	mov	r5, r1
    75d6:	f7fb f8ff 	bl	27d8 <strlen>
    75da:	b348      	cbz	r0, 7630 <d_append_string+0x64>
    75dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    75e0:	182f      	adds	r7, r5, r0
    75e2:	f04f 0800 	mov.w	r8, #0
    75e6:	e009      	b.n	75fc <d_append_string+0x30>
    75e8:	460b      	mov	r3, r1
    75ea:	42bd      	cmp	r5, r7
    75ec:	f101 0101 	add.w	r1, r1, #1
    75f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    75f4:	54e6      	strb	r6, [r4, r3]
    75f6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    75fa:	d019      	beq.n	7630 <d_append_string+0x64>
    75fc:	29ff      	cmp	r1, #255	; 0xff
    75fe:	f815 6b01 	ldrb.w	r6, [r5], #1
    7602:	d1f1      	bne.n	75e8 <d_append_string+0x1c>
    7604:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7608:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    760c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7610:	4620      	mov	r0, r4
    7612:	4798      	blx	r3
    7614:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7618:	3301      	adds	r3, #1
    761a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    761e:	2300      	movs	r3, #0
    7620:	2101      	movs	r1, #1
    7622:	42bd      	cmp	r5, r7
    7624:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7628:	54e6      	strb	r6, [r4, r3]
    762a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    762e:	d1e5      	bne.n	75fc <d_append_string+0x30>
    7630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007634 <d_print_comp.part.10>:
    7634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7638:	7813      	ldrb	r3, [r2, #0]
    763a:	b097      	sub	sp, #92	; 0x5c
    763c:	4615      	mov	r5, r2
    763e:	4604      	mov	r4, r0
    7640:	460e      	mov	r6, r1
    7642:	2b4b      	cmp	r3, #75	; 0x4b
    7644:	f201 818c 	bhi.w	8960 <d_print_comp.part.10+0x132c>
    7648:	e8df f013 	tbh	[pc, r3, lsl #1]
    764c:	03a80488 	.word	0x03a80488
    7650:	031f03a8 	.word	0x031f03a8
    7654:	04e004f8 	.word	0x04e004f8
    7658:	031a0561 	.word	0x031a0561
    765c:	02e10308 	.word	0x02e10308
    7660:	029302ba 	.word	0x029302ba
    7664:	022e026c 	.word	0x022e026c
    7668:	01e00207 	.word	0x01e00207
    766c:	019201b9 	.word	0x019201b9
    7670:	0144016b 	.word	0x0144016b
    7674:	00f6011d 	.word	0x00f6011d
    7678:	00a800cf 	.word	0x00a800cf
    767c:	006b0080 	.word	0x006b0080
    7680:	006b006b 	.word	0x006b006b
    7684:	004c004c 	.word	0x004c004c
    7688:	004c004c 	.word	0x004c004c
    768c:	004c004c 	.word	0x004c004c
    7690:	08ed004c 	.word	0x08ed004c
    7694:	004c08ed 	.word	0x004c08ed
    7698:	08bf004c 	.word	0x08bf004c
    769c:	07b3090f 	.word	0x07b3090f
    76a0:	07250742 	.word	0x07250742
    76a4:	072506e2 	.word	0x072506e2
    76a8:	06ae06ae 	.word	0x06ae06ae
    76ac:	09150965 	.word	0x09150965
    76b0:	0898093e 	.word	0x0898093e
    76b4:	0547055b 	.word	0x0547055b
    76b8:	0536053b 	.word	0x0536053b
    76bc:	06700675 	.word	0x06700675
    76c0:	06310670 	.word	0x06310670
    76c4:	05fa0631 	.word	0x05fa0631
    76c8:	05e105ef 	.word	0x05e105ef
    76cc:	058905b0 	.word	0x058905b0
    76d0:	08230871 	.word	0x08230871
    76d4:	098a084a 	.word	0x098a084a
    76d8:	07ee07c8 	.word	0x07ee07c8
    76dc:	040c0461 	.word	0x040c0461
    76e0:	04b503d5 	.word	0x04b503d5
    76e4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    76e8:	ab16      	add	r3, sp, #88	; 0x58
    76ea:	2100      	movs	r1, #0
    76ec:	f843 2d40 	str.w	r2, [r3, #-64]!
    76f0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    76f4:	9507      	str	r5, [sp, #28]
    76f6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    76fa:	9108      	str	r1, [sp, #32]
    76fc:	9209      	str	r2, [sp, #36]	; 0x24
    76fe:	686a      	ldr	r2, [r5, #4]
    7700:	4620      	mov	r0, r4
    7702:	4631      	mov	r1, r6
    7704:	f002 fa2c 	bl	9b60 <d_print_comp>
    7708:	9b08      	ldr	r3, [sp, #32]
    770a:	b923      	cbnz	r3, 7716 <d_print_comp.part.10+0xe2>
    770c:	4631      	mov	r1, r6
    770e:	462a      	mov	r2, r5
    7710:	4620      	mov	r0, r4
    7712:	f002 fa31 	bl	9b78 <d_print_mod>
    7716:	9b06      	ldr	r3, [sp, #24]
    7718:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    771c:	b017      	add	sp, #92	; 0x5c
    771e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7722:	f8d0 7114 	ldr.w	r7, [r0, #276]	; 0x114
    7726:	463a      	mov	r2, r7
    7728:	2f00      	cmp	r7, #0
    772a:	d0dd      	beq.n	76e8 <d_print_comp.part.10+0xb4>
    772c:	6891      	ldr	r1, [r2, #8]
    772e:	b941      	cbnz	r1, 7742 <d_print_comp.part.10+0x10e>
    7730:	6851      	ldr	r1, [r2, #4]
    7732:	7809      	ldrb	r1, [r1, #0]
    7734:	f1a1 0019 	sub.w	r0, r1, #25
    7738:	2802      	cmp	r0, #2
    773a:	d805      	bhi.n	7748 <d_print_comp.part.10+0x114>
    773c:	428b      	cmp	r3, r1
    773e:	f001 854f 	beq.w	91e0 <d_print_comp.part.10+0x1bac>
    7742:	6812      	ldr	r2, [r2, #0]
    7744:	2a00      	cmp	r2, #0
    7746:	d1f1      	bne.n	772c <d_print_comp.part.10+0xf8>
    7748:	463a      	mov	r2, r7
    774a:	e7cd      	b.n	76e8 <d_print_comp.part.10+0xb4>
    774c:	6897      	ldr	r7, [r2, #8]
    774e:	f8d2 9004 	ldr.w	r9, [r2, #4]
    7752:	2f00      	cmp	r7, #0
    7754:	d0e2      	beq.n	771c <d_print_comp.part.10+0xe8>
    7756:	2500      	movs	r5, #0
    7758:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    775c:	46a8      	mov	r8, r5
    775e:	e009      	b.n	7774 <d_print_comp.part.10+0x140>
    7760:	460b      	mov	r3, r1
    7762:	3101      	adds	r1, #1
    7764:	3501      	adds	r5, #1
    7766:	42af      	cmp	r7, r5
    7768:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    776c:	54e6      	strb	r6, [r4, r3]
    776e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    7772:	d0d3      	beq.n	771c <d_print_comp.part.10+0xe8>
    7774:	29ff      	cmp	r1, #255	; 0xff
    7776:	f819 6005 	ldrb.w	r6, [r9, r5]
    777a:	d1f1      	bne.n	7760 <d_print_comp.part.10+0x12c>
    777c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7780:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    7784:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7788:	4620      	mov	r0, r4
    778a:	4798      	blx	r3
    778c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7790:	3301      	adds	r3, #1
    7792:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7796:	2101      	movs	r1, #1
    7798:	2300      	movs	r3, #0
    779a:	e7e3      	b.n	7764 <d_print_comp.part.10+0x130>
    779c:	4fd6      	ldr	r7, [pc, #856]	; (7af8 <d_print_comp.part.10+0x4c4>)
    779e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    77a2:	f107 0a11 	add.w	sl, r7, #17
    77a6:	f04f 0900 	mov.w	r9, #0
    77aa:	e00a      	b.n	77c2 <d_print_comp.part.10+0x18e>
    77ac:	460b      	mov	r3, r1
    77ae:	3101      	adds	r1, #1
    77b0:	4557      	cmp	r7, sl
    77b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    77b6:	f804 8003 	strb.w	r8, [r4, r3]
    77ba:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    77be:	f001 8208 	beq.w	8bd2 <d_print_comp.part.10+0x159e>
    77c2:	29ff      	cmp	r1, #255	; 0xff
    77c4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    77c8:	d1f0      	bne.n	77ac <d_print_comp.part.10+0x178>
    77ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    77ce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    77d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    77d6:	4620      	mov	r0, r4
    77d8:	4798      	blx	r3
    77da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    77de:	3301      	adds	r3, #1
    77e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    77e4:	2101      	movs	r1, #1
    77e6:	2300      	movs	r3, #0
    77e8:	e7e2      	b.n	77b0 <d_print_comp.part.10+0x17c>
    77ea:	4fc4      	ldr	r7, [pc, #784]	; (7afc <d_print_comp.part.10+0x4c8>)
    77ec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    77f0:	f107 0a15 	add.w	sl, r7, #21
    77f4:	f04f 0900 	mov.w	r9, #0
    77f8:	e00a      	b.n	7810 <d_print_comp.part.10+0x1dc>
    77fa:	460b      	mov	r3, r1
    77fc:	3101      	adds	r1, #1
    77fe:	4557      	cmp	r7, sl
    7800:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7804:	f804 8003 	strb.w	r8, [r4, r3]
    7808:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    780c:	f001 80ec 	beq.w	89e8 <d_print_comp.part.10+0x13b4>
    7810:	29ff      	cmp	r1, #255	; 0xff
    7812:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7816:	d1f0      	bne.n	77fa <d_print_comp.part.10+0x1c6>
    7818:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    781c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7820:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7824:	4620      	mov	r0, r4
    7826:	4798      	blx	r3
    7828:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    782c:	3301      	adds	r3, #1
    782e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7832:	2101      	movs	r1, #1
    7834:	2300      	movs	r3, #0
    7836:	e7e2      	b.n	77fe <d_print_comp.part.10+0x1ca>
    7838:	4fb1      	ldr	r7, [pc, #708]	; (7b00 <d_print_comp.part.10+0x4cc>)
    783a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    783e:	f107 0a19 	add.w	sl, r7, #25
    7842:	f04f 0900 	mov.w	r9, #0
    7846:	e00a      	b.n	785e <d_print_comp.part.10+0x22a>
    7848:	460b      	mov	r3, r1
    784a:	3101      	adds	r1, #1
    784c:	4557      	cmp	r7, sl
    784e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7852:	f804 8003 	strb.w	r8, [r4, r3]
    7856:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    785a:	f001 80b4 	beq.w	89c6 <d_print_comp.part.10+0x1392>
    785e:	29ff      	cmp	r1, #255	; 0xff
    7860:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7864:	d1f0      	bne.n	7848 <d_print_comp.part.10+0x214>
    7866:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    786a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    786e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7872:	4620      	mov	r0, r4
    7874:	4798      	blx	r3
    7876:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    787a:	3301      	adds	r3, #1
    787c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7880:	2101      	movs	r1, #1
    7882:	2300      	movs	r3, #0
    7884:	e7e2      	b.n	784c <d_print_comp.part.10+0x218>
    7886:	4f9f      	ldr	r7, [pc, #636]	; (7b04 <d_print_comp.part.10+0x4d0>)
    7888:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    788c:	f107 0a16 	add.w	sl, r7, #22
    7890:	f04f 0900 	mov.w	r9, #0
    7894:	e00a      	b.n	78ac <d_print_comp.part.10+0x278>
    7896:	460b      	mov	r3, r1
    7898:	3101      	adds	r1, #1
    789a:	4557      	cmp	r7, sl
    789c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    78a0:	f804 8003 	strb.w	r8, [r4, r3]
    78a4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    78a8:	f001 80d7 	beq.w	8a5a <d_print_comp.part.10+0x1426>
    78ac:	29ff      	cmp	r1, #255	; 0xff
    78ae:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    78b2:	d1f0      	bne.n	7896 <d_print_comp.part.10+0x262>
    78b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    78b8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    78bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    78c0:	4620      	mov	r0, r4
    78c2:	4798      	blx	r3
    78c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    78c8:	3301      	adds	r3, #1
    78ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    78ce:	2101      	movs	r1, #1
    78d0:	2300      	movs	r3, #0
    78d2:	e7e2      	b.n	789a <d_print_comp.part.10+0x266>
    78d4:	4f8c      	ldr	r7, [pc, #560]	; (7b08 <d_print_comp.part.10+0x4d4>)
    78d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    78da:	f107 0a13 	add.w	sl, r7, #19
    78de:	f04f 0900 	mov.w	r9, #0
    78e2:	e00a      	b.n	78fa <d_print_comp.part.10+0x2c6>
    78e4:	460b      	mov	r3, r1
    78e6:	3101      	adds	r1, #1
    78e8:	4557      	cmp	r7, sl
    78ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    78ee:	f804 8003 	strb.w	r8, [r4, r3]
    78f2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    78f6:	f001 80a9 	beq.w	8a4c <d_print_comp.part.10+0x1418>
    78fa:	29ff      	cmp	r1, #255	; 0xff
    78fc:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7900:	d1f0      	bne.n	78e4 <d_print_comp.part.10+0x2b0>
    7902:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7906:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    790a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    790e:	4620      	mov	r0, r4
    7910:	4798      	blx	r3
    7912:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7916:	3301      	adds	r3, #1
    7918:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    791c:	2101      	movs	r1, #1
    791e:	2300      	movs	r3, #0
    7920:	e7e2      	b.n	78e8 <d_print_comp.part.10+0x2b4>
    7922:	4f7a      	ldr	r7, [pc, #488]	; (7b0c <d_print_comp.part.10+0x4d8>)
    7924:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7928:	f107 0a0f 	add.w	sl, r7, #15
    792c:	f04f 0900 	mov.w	r9, #0
    7930:	e00a      	b.n	7948 <d_print_comp.part.10+0x314>
    7932:	460b      	mov	r3, r1
    7934:	3101      	adds	r1, #1
    7936:	4557      	cmp	r7, sl
    7938:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    793c:	f804 8003 	strb.w	r8, [r4, r3]
    7940:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7944:	f001 8090 	beq.w	8a68 <d_print_comp.part.10+0x1434>
    7948:	29ff      	cmp	r1, #255	; 0xff
    794a:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    794e:	d1f0      	bne.n	7932 <d_print_comp.part.10+0x2fe>
    7950:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7954:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7958:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    795c:	4620      	mov	r0, r4
    795e:	4798      	blx	r3
    7960:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7964:	3301      	adds	r3, #1
    7966:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    796a:	2101      	movs	r1, #1
    796c:	2300      	movs	r3, #0
    796e:	e7e2      	b.n	7936 <d_print_comp.part.10+0x302>
    7970:	4f67      	ldr	r7, [pc, #412]	; (7b10 <d_print_comp.part.10+0x4dc>)
    7972:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7976:	f107 0a1a 	add.w	sl, r7, #26
    797a:	f04f 0900 	mov.w	r9, #0
    797e:	e00a      	b.n	7996 <d_print_comp.part.10+0x362>
    7980:	460b      	mov	r3, r1
    7982:	3101      	adds	r1, #1
    7984:	4557      	cmp	r7, sl
    7986:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    798a:	f804 8003 	strb.w	r8, [r4, r3]
    798e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7992:	f001 8011 	beq.w	89b8 <d_print_comp.part.10+0x1384>
    7996:	29ff      	cmp	r1, #255	; 0xff
    7998:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    799c:	d1f0      	bne.n	7980 <d_print_comp.part.10+0x34c>
    799e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    79a2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    79a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    79aa:	4620      	mov	r0, r4
    79ac:	4798      	blx	r3
    79ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    79b2:	3301      	adds	r3, #1
    79b4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    79b8:	2101      	movs	r1, #1
    79ba:	2300      	movs	r3, #0
    79bc:	e7e2      	b.n	7984 <d_print_comp.part.10+0x350>
    79be:	4f55      	ldr	r7, [pc, #340]	; (7b14 <d_print_comp.part.10+0x4e0>)
    79c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    79c4:	f107 0a11 	add.w	sl, r7, #17
    79c8:	f04f 0900 	mov.w	r9, #0
    79cc:	e00a      	b.n	79e4 <d_print_comp.part.10+0x3b0>
    79ce:	460b      	mov	r3, r1
    79d0:	3101      	adds	r1, #1
    79d2:	4557      	cmp	r7, sl
    79d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    79d8:	f804 8003 	strb.w	r8, [r4, r3]
    79dc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    79e0:	f001 80a5 	beq.w	8b2e <d_print_comp.part.10+0x14fa>
    79e4:	29ff      	cmp	r1, #255	; 0xff
    79e6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    79ea:	d1f0      	bne.n	79ce <d_print_comp.part.10+0x39a>
    79ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    79f0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    79f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    79f8:	4620      	mov	r0, r4
    79fa:	4798      	blx	r3
    79fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7a00:	3301      	adds	r3, #1
    7a02:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7a06:	2101      	movs	r1, #1
    7a08:	2300      	movs	r3, #0
    7a0a:	e7e2      	b.n	79d2 <d_print_comp.part.10+0x39e>
    7a0c:	4f42      	ldr	r7, [pc, #264]	; (7b18 <d_print_comp.part.10+0x4e4>)
    7a0e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7a12:	f107 0a15 	add.w	sl, r7, #21
    7a16:	f04f 0900 	mov.w	r9, #0
    7a1a:	e00a      	b.n	7a32 <d_print_comp.part.10+0x3fe>
    7a1c:	460b      	mov	r3, r1
    7a1e:	3101      	adds	r1, #1
    7a20:	4557      	cmp	r7, sl
    7a22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7a26:	f804 8003 	strb.w	r8, [r4, r3]
    7a2a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7a2e:	f001 8077 	beq.w	8b20 <d_print_comp.part.10+0x14ec>
    7a32:	29ff      	cmp	r1, #255	; 0xff
    7a34:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7a38:	d1f0      	bne.n	7a1c <d_print_comp.part.10+0x3e8>
    7a3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7a3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7a42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7a46:	4620      	mov	r0, r4
    7a48:	4798      	blx	r3
    7a4a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7a4e:	3301      	adds	r3, #1
    7a50:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7a54:	2101      	movs	r1, #1
    7a56:	2300      	movs	r3, #0
    7a58:	e7e2      	b.n	7a20 <d_print_comp.part.10+0x3ec>
    7a5a:	4f30      	ldr	r7, [pc, #192]	; (7b1c <d_print_comp.part.10+0x4e8>)
    7a5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7a60:	f107 0a10 	add.w	sl, r7, #16
    7a64:	f04f 0900 	mov.w	r9, #0
    7a68:	e00a      	b.n	7a80 <d_print_comp.part.10+0x44c>
    7a6a:	460b      	mov	r3, r1
    7a6c:	3101      	adds	r1, #1
    7a6e:	4557      	cmp	r7, sl
    7a70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7a74:	f804 8003 	strb.w	r8, [r4, r3]
    7a78:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7a7c:	f001 8049 	beq.w	8b12 <d_print_comp.part.10+0x14de>
    7a80:	29ff      	cmp	r1, #255	; 0xff
    7a82:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7a86:	d1f0      	bne.n	7a6a <d_print_comp.part.10+0x436>
    7a88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7a8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7a90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7a94:	4620      	mov	r0, r4
    7a96:	4798      	blx	r3
    7a98:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7a9c:	3301      	adds	r3, #1
    7a9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7aa2:	2101      	movs	r1, #1
    7aa4:	2300      	movs	r3, #0
    7aa6:	e7e2      	b.n	7a6e <d_print_comp.part.10+0x43a>
    7aa8:	4f1d      	ldr	r7, [pc, #116]	; (7b20 <d_print_comp.part.10+0x4ec>)
    7aaa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7aae:	f107 0a12 	add.w	sl, r7, #18
    7ab2:	f04f 0900 	mov.w	r9, #0
    7ab6:	e00a      	b.n	7ace <d_print_comp.part.10+0x49a>
    7ab8:	460b      	mov	r3, r1
    7aba:	3101      	adds	r1, #1
    7abc:	4557      	cmp	r7, sl
    7abe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7ac2:	f804 8003 	strb.w	r8, [r4, r3]
    7ac6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7aca:	f001 801b 	beq.w	8b04 <d_print_comp.part.10+0x14d0>
    7ace:	29ff      	cmp	r1, #255	; 0xff
    7ad0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7ad4:	d1f0      	bne.n	7ab8 <d_print_comp.part.10+0x484>
    7ad6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7ada:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7ade:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7ae2:	4620      	mov	r0, r4
    7ae4:	4798      	blx	r3
    7ae6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7aea:	3301      	adds	r3, #1
    7aec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7af0:	2101      	movs	r1, #1
    7af2:	2300      	movs	r3, #0
    7af4:	e7e2      	b.n	7abc <d_print_comp.part.10+0x488>
    7af6:	bf00      	nop
    7af8:	00013a5f 	.word	0x00013a5f
    7afc:	00013a47 	.word	0x00013a47
    7b00:	00013a2b 	.word	0x00013a2b
    7b04:	00013a13 	.word	0x00013a13
    7b08:	000139ff 	.word	0x000139ff
    7b0c:	000139ef 	.word	0x000139ef
    7b10:	000139d3 	.word	0x000139d3
    7b14:	000139bf 	.word	0x000139bf
    7b18:	000139bb 	.word	0x000139bb
    7b1c:	000139a7 	.word	0x000139a7
    7b20:	00013993 	.word	0x00013993
    7b24:	4fc9      	ldr	r7, [pc, #804]	; (7e4c <d_print_comp.part.10+0x818>)
    7b26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7b2a:	f107 0a0d 	add.w	sl, r7, #13
    7b2e:	f04f 0900 	mov.w	r9, #0
    7b32:	e00a      	b.n	7b4a <d_print_comp.part.10+0x516>
    7b34:	460b      	mov	r3, r1
    7b36:	3101      	adds	r1, #1
    7b38:	4557      	cmp	r7, sl
    7b3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7b3e:	f804 8003 	strb.w	r8, [r4, r3]
    7b42:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7b46:	f000 87cf 	beq.w	8ae8 <d_print_comp.part.10+0x14b4>
    7b4a:	29ff      	cmp	r1, #255	; 0xff
    7b4c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7b50:	d1f0      	bne.n	7b34 <d_print_comp.part.10+0x500>
    7b52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7b56:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7b5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7b5e:	4620      	mov	r0, r4
    7b60:	4798      	blx	r3
    7b62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7b66:	3301      	adds	r3, #1
    7b68:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7b6c:	2101      	movs	r1, #1
    7b6e:	2300      	movs	r3, #0
    7b70:	e7e2      	b.n	7b38 <d_print_comp.part.10+0x504>
    7b72:	4fb7      	ldr	r7, [pc, #732]	; (7e50 <d_print_comp.part.10+0x81c>)
    7b74:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7b78:	f107 0a18 	add.w	sl, r7, #24
    7b7c:	f04f 0900 	mov.w	r9, #0
    7b80:	e00a      	b.n	7b98 <d_print_comp.part.10+0x564>
    7b82:	460b      	mov	r3, r1
    7b84:	3101      	adds	r1, #1
    7b86:	4557      	cmp	r7, sl
    7b88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7b8c:	f804 8003 	strb.w	r8, [r4, r3]
    7b90:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7b94:	f000 877d 	beq.w	8a92 <d_print_comp.part.10+0x145e>
    7b98:	29ff      	cmp	r1, #255	; 0xff
    7b9a:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7b9e:	d1f0      	bne.n	7b82 <d_print_comp.part.10+0x54e>
    7ba0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7ba4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7ba8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7bac:	4620      	mov	r0, r4
    7bae:	4798      	blx	r3
    7bb0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7bb4:	3301      	adds	r3, #1
    7bb6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7bba:	2101      	movs	r1, #1
    7bbc:	2300      	movs	r3, #0
    7bbe:	e7e2      	b.n	7b86 <d_print_comp.part.10+0x552>
    7bc0:	4fa4      	ldr	r7, [pc, #656]	; (7e54 <d_print_comp.part.10+0x820>)
    7bc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7bc6:	f107 0a08 	add.w	sl, r7, #8
    7bca:	f04f 0900 	mov.w	r9, #0
    7bce:	e00a      	b.n	7be6 <d_print_comp.part.10+0x5b2>
    7bd0:	460b      	mov	r3, r1
    7bd2:	3101      	adds	r1, #1
    7bd4:	4557      	cmp	r7, sl
    7bd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7bda:	f804 8003 	strb.w	r8, [r4, r3]
    7bde:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7be2:	f000 874f 	beq.w	8a84 <d_print_comp.part.10+0x1450>
    7be6:	29ff      	cmp	r1, #255	; 0xff
    7be8:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7bec:	d1f0      	bne.n	7bd0 <d_print_comp.part.10+0x59c>
    7bee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7bf2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7bf6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7bfa:	4620      	mov	r0, r4
    7bfc:	4798      	blx	r3
    7bfe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7c02:	3301      	adds	r3, #1
    7c04:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7c08:	2101      	movs	r1, #1
    7c0a:	2300      	movs	r3, #0
    7c0c:	e7e2      	b.n	7bd4 <d_print_comp.part.10+0x5a0>
    7c0e:	4f92      	ldr	r7, [pc, #584]	; (7e58 <d_print_comp.part.10+0x824>)
    7c10:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7c14:	f107 0a0b 	add.w	sl, r7, #11
    7c18:	f04f 0900 	mov.w	r9, #0
    7c1c:	e00a      	b.n	7c34 <d_print_comp.part.10+0x600>
    7c1e:	460b      	mov	r3, r1
    7c20:	3101      	adds	r1, #1
    7c22:	4557      	cmp	r7, sl
    7c24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7c28:	f804 8003 	strb.w	r8, [r4, r3]
    7c2c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7c30:	f000 8721 	beq.w	8a76 <d_print_comp.part.10+0x1442>
    7c34:	29ff      	cmp	r1, #255	; 0xff
    7c36:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7c3a:	d1f0      	bne.n	7c1e <d_print_comp.part.10+0x5ea>
    7c3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7c40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7c44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7c48:	4620      	mov	r0, r4
    7c4a:	4798      	blx	r3
    7c4c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7c50:	3301      	adds	r3, #1
    7c52:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7c56:	2101      	movs	r1, #1
    7c58:	2300      	movs	r3, #0
    7c5a:	e7e2      	b.n	7c22 <d_print_comp.part.10+0x5ee>
    7c5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7c60:	29ff      	cmp	r1, #255	; 0xff
    7c62:	f001 82c4 	beq.w	91ee <d_print_comp.part.10+0x1bba>
    7c66:	1c4a      	adds	r2, r1, #1
    7c68:	237e      	movs	r3, #126	; 0x7e
    7c6a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    7c6e:	5463      	strb	r3, [r4, r1]
    7c70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    7c74:	4631      	mov	r1, r6
    7c76:	68aa      	ldr	r2, [r5, #8]
    7c78:	4620      	mov	r0, r4
    7c7a:	f001 ff71 	bl	9b60 <d_print_comp>
    7c7e:	e54d      	b.n	771c <d_print_comp.part.10+0xe8>
    7c80:	4631      	mov	r1, r6
    7c82:	6892      	ldr	r2, [r2, #8]
    7c84:	f001 ff6c 	bl	9b60 <d_print_comp>
    7c88:	e548      	b.n	771c <d_print_comp.part.10+0xe8>
    7c8a:	2200      	movs	r2, #0
    7c8c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    7c90:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    7c94:	686f      	ldr	r7, [r5, #4]
    7c96:	9302      	str	r3, [sp, #8]
    7c98:	2f00      	cmp	r7, #0
    7c9a:	f001 8503 	beq.w	96a4 <d_print_comp.part.10+0x2070>
    7c9e:	a906      	add	r1, sp, #24
    7ca0:	f8d0 a110 	ldr.w	sl, [r0, #272]	; 0x110
    7ca4:	9101      	str	r1, [sp, #4]
    7ca6:	4690      	mov	r8, r2
    7ca8:	4694      	mov	ip, r2
    7caa:	460b      	mov	r3, r1
    7cac:	7839      	ldrb	r1, [r7, #0]
    7cae:	601a      	str	r2, [r3, #0]
    7cb0:	f1a1 001c 	sub.w	r0, r1, #28
    7cb4:	2804      	cmp	r0, #4
    7cb6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    7cba:	605f      	str	r7, [r3, #4]
    7cbc:	f8c3 c008 	str.w	ip, [r3, #8]
    7cc0:	f8c3 a00c 	str.w	sl, [r3, #12]
    7cc4:	461a      	mov	r2, r3
    7cc6:	f108 0801 	add.w	r8, r8, #1
    7cca:	f103 0310 	add.w	r3, r3, #16
    7cce:	f240 864c 	bls.w	896a <d_print_comp.part.10+0x1336>
    7cd2:	2904      	cmp	r1, #4
    7cd4:	f001 8633 	beq.w	993e <d_print_comp.part.10+0x230a>
    7cd8:	2902      	cmp	r1, #2
    7cda:	d13d      	bne.n	7d58 <d_print_comp.part.10+0x724>
    7cdc:	f8d7 b008 	ldr.w	fp, [r7, #8]
    7ce0:	f89b 3000 	ldrb.w	r3, [fp]
    7ce4:	2b45      	cmp	r3, #69	; 0x45
    7ce6:	bf08      	it	eq
    7ce8:	f8db b004 	ldreq.w	fp, [fp, #4]
    7cec:	f89b 3000 	ldrb.w	r3, [fp]
    7cf0:	3b1c      	subs	r3, #28
    7cf2:	2b04      	cmp	r3, #4
    7cf4:	d830      	bhi.n	7d58 <d_print_comp.part.10+0x724>
    7cf6:	f1b8 0f04 	cmp.w	r8, #4
    7cfa:	f001 8679 	beq.w	99f0 <d_print_comp.part.10+0x23bc>
    7cfe:	9a01      	ldr	r2, [sp, #4]
    7d00:	4623      	mov	r3, r4
    7d02:	eb02 1c08 	add.w	ip, r2, r8, lsl #4
    7d06:	4629      	mov	r1, r5
    7d08:	4632      	mov	r2, r6
    7d0a:	465d      	mov	r5, fp
    7d0c:	4656      	mov	r6, sl
    7d0e:	4664      	mov	r4, ip
    7d10:	468b      	mov	fp, r1
    7d12:	4692      	mov	sl, r2
    7d14:	4699      	mov	r9, r3
    7d16:	e003      	b.n	7d20 <d_print_comp.part.10+0x6ec>
    7d18:	f1b8 0f04 	cmp.w	r8, #4
    7d1c:	f001 8667 	beq.w	99ee <d_print_comp.part.10+0x23ba>
    7d20:	e91c 000f 	ldmdb	ip, {r0, r1, r2, r3}
    7d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    7d28:	f1a4 0310 	sub.w	r3, r4, #16
    7d2c:	6023      	str	r3, [r4, #0]
    7d2e:	2300      	movs	r3, #0
    7d30:	e90c 0048 	stmdb	ip, {r3, r6}
    7d34:	f8c9 4114 	str.w	r4, [r9, #276]	; 0x114
    7d38:	f84c 5c0c 	str.w	r5, [ip, #-12]
    7d3c:	686d      	ldr	r5, [r5, #4]
    7d3e:	782b      	ldrb	r3, [r5, #0]
    7d40:	3b1c      	subs	r3, #28
    7d42:	2b04      	cmp	r3, #4
    7d44:	f108 0801 	add.w	r8, r8, #1
    7d48:	f10c 0c10 	add.w	ip, ip, #16
    7d4c:	f104 0410 	add.w	r4, r4, #16
    7d50:	d9e2      	bls.n	7d18 <d_print_comp.part.10+0x6e4>
    7d52:	464c      	mov	r4, r9
    7d54:	4656      	mov	r6, sl
    7d56:	465d      	mov	r5, fp
    7d58:	68aa      	ldr	r2, [r5, #8]
    7d5a:	4620      	mov	r0, r4
    7d5c:	4631      	mov	r1, r6
    7d5e:	f001 feff 	bl	9b60 <d_print_comp>
    7d62:	783b      	ldrb	r3, [r7, #0]
    7d64:	2b04      	cmp	r3, #4
    7d66:	bf04      	itt	eq
    7d68:	9b04      	ldreq	r3, [sp, #16]
    7d6a:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
    7d6e:	f1b8 0f00 	cmp.w	r8, #0
    7d72:	d00f      	beq.n	7d94 <d_print_comp.part.10+0x760>
    7d74:	9a01      	ldr	r2, [sp, #4]
    7d76:	4647      	mov	r7, r8
    7d78:	eb02 1508 	add.w	r5, r2, r8, lsl #4
    7d7c:	f04f 0920 	mov.w	r9, #32
    7d80:	46b0      	mov	r8, r6
    7d82:	f855 6c08 	ldr.w	r6, [r5, #-8]
    7d86:	3f01      	subs	r7, #1
    7d88:	2e00      	cmp	r6, #0
    7d8a:	f001 8477 	beq.w	967c <d_print_comp.part.10+0x2048>
    7d8e:	3d10      	subs	r5, #16
    7d90:	2f00      	cmp	r7, #0
    7d92:	d1f6      	bne.n	7d82 <d_print_comp.part.10+0x74e>
    7d94:	9902      	ldr	r1, [sp, #8]
    7d96:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    7d9a:	e4bf      	b.n	771c <d_print_comp.part.10+0xe8>
    7d9c:	4631      	mov	r1, r6
    7d9e:	6852      	ldr	r2, [r2, #4]
    7da0:	f001 fede 	bl	9b60 <d_print_comp>
    7da4:	f016 0904 	ands.w	r9, r6, #4
    7da8:	f040 85ec 	bne.w	8984 <d_print_comp.part.10+0x1350>
    7dac:	4f2b      	ldr	r7, [pc, #172]	; (7e5c <d_print_comp.part.10+0x828>)
    7dae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7db2:	f107 0a02 	add.w	sl, r7, #2
    7db6:	e00a      	b.n	7dce <d_print_comp.part.10+0x79a>
    7db8:	460b      	mov	r3, r1
    7dba:	3101      	adds	r1, #1
    7dbc:	4557      	cmp	r7, sl
    7dbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7dc2:	f804 8003 	strb.w	r8, [r4, r3]
    7dc6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7dca:	f000 85e7 	beq.w	899c <d_print_comp.part.10+0x1368>
    7dce:	29ff      	cmp	r1, #255	; 0xff
    7dd0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7dd4:	d1f0      	bne.n	7db8 <d_print_comp.part.10+0x784>
    7dd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7dda:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7dde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7de2:	4620      	mov	r0, r4
    7de4:	4798      	blx	r3
    7de6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7dea:	3301      	adds	r3, #1
    7dec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7df0:	2101      	movs	r1, #1
    7df2:	2300      	movs	r3, #0
    7df4:	e7e2      	b.n	7dbc <d_print_comp.part.10+0x788>
    7df6:	4f1a      	ldr	r7, [pc, #104]	; (7e60 <d_print_comp.part.10+0x82c>)
    7df8:	6852      	ldr	r2, [r2, #4]
    7dfa:	4631      	mov	r1, r6
    7dfc:	f001 feb0 	bl	9b60 <d_print_comp>
    7e00:	f107 0a05 	add.w	sl, r7, #5
    7e04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7e08:	f04f 0900 	mov.w	r9, #0
    7e0c:	e00a      	b.n	7e24 <d_print_comp.part.10+0x7f0>
    7e0e:	460b      	mov	r3, r1
    7e10:	3101      	adds	r1, #1
    7e12:	4557      	cmp	r7, sl
    7e14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7e18:	f804 8003 	strb.w	r8, [r4, r3]
    7e1c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7e20:	f000 87b2 	beq.w	8d88 <d_print_comp.part.10+0x1754>
    7e24:	29ff      	cmp	r1, #255	; 0xff
    7e26:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7e2a:	d1f0      	bne.n	7e0e <d_print_comp.part.10+0x7da>
    7e2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7e30:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7e34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7e38:	4620      	mov	r0, r4
    7e3a:	4798      	blx	r3
    7e3c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7e40:	3301      	adds	r3, #1
    7e42:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7e46:	2101      	movs	r1, #1
    7e48:	2300      	movs	r3, #0
    7e4a:	e7e2      	b.n	7e12 <d_print_comp.part.10+0x7de>
    7e4c:	00013983 	.word	0x00013983
    7e50:	0001395f 	.word	0x0001395f
    7e54:	00013953 	.word	0x00013953
    7e58:	00013947 	.word	0x00013947
    7e5c:	0001391f 	.word	0x0001391f
    7e60:	00013917 	.word	0x00013917
    7e64:	6851      	ldr	r1, [r2, #4]
    7e66:	f7fd fe29 	bl	5abc <d_find_pack>
    7e6a:	2800      	cmp	r0, #0
    7e6c:	f001 856f 	beq.w	994e <d_print_comp.part.10+0x231a>
    7e70:	f04f 0800 	mov.w	r8, #0
    7e74:	7803      	ldrb	r3, [r0, #0]
    7e76:	2b2f      	cmp	r3, #47	; 0x2f
    7e78:	f040 87ca 	bne.w	8e10 <d_print_comp.part.10+0x17dc>
    7e7c:	6843      	ldr	r3, [r0, #4]
    7e7e:	2b00      	cmp	r3, #0
    7e80:	f000 87c6 	beq.w	8e10 <d_print_comp.part.10+0x17dc>
    7e84:	6880      	ldr	r0, [r0, #8]
    7e86:	f108 0801 	add.w	r8, r8, #1
    7e8a:	2800      	cmp	r0, #0
    7e8c:	d1f2      	bne.n	7e74 <d_print_comp.part.10+0x840>
    7e8e:	686d      	ldr	r5, [r5, #4]
    7e90:	9501      	str	r5, [sp, #4]
    7e92:	2700      	movs	r7, #0
    7e94:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    7e98:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 8268 <d_print_comp.part.10+0xc34>
    7e9c:	9302      	str	r3, [sp, #8]
    7e9e:	46b9      	mov	r9, r7
    7ea0:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
    7ea4:	4620      	mov	r0, r4
    7ea6:	4631      	mov	r1, r6
    7ea8:	9a01      	ldr	r2, [sp, #4]
    7eaa:	f001 fe59 	bl	9b60 <d_print_comp>
    7eae:	9b02      	ldr	r3, [sp, #8]
    7eb0:	42bb      	cmp	r3, r7
    7eb2:	dd28      	ble.n	7f06 <d_print_comp.part.10+0x8d2>
    7eb4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7eb8:	f8df b3b0 	ldr.w	fp, [pc, #944]	; 826c <d_print_comp.part.10+0xc38>
    7ebc:	e009      	b.n	7ed2 <d_print_comp.part.10+0x89e>
    7ebe:	460b      	mov	r3, r1
    7ec0:	45d3      	cmp	fp, sl
    7ec2:	f101 0101 	add.w	r1, r1, #1
    7ec6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7eca:	54e5      	strb	r5, [r4, r3]
    7ecc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    7ed0:	d019      	beq.n	7f06 <d_print_comp.part.10+0x8d2>
    7ed2:	29ff      	cmp	r1, #255	; 0xff
    7ed4:	f81b 5f01 	ldrb.w	r5, [fp, #1]!
    7ed8:	d1f1      	bne.n	7ebe <d_print_comp.part.10+0x88a>
    7eda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7ede:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7ee2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7ee6:	4620      	mov	r0, r4
    7ee8:	4798      	blx	r3
    7eea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7eee:	3301      	adds	r3, #1
    7ef0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7ef4:	2300      	movs	r3, #0
    7ef6:	2101      	movs	r1, #1
    7ef8:	45d3      	cmp	fp, sl
    7efa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7efe:	54e5      	strb	r5, [r4, r3]
    7f00:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    7f04:	d1e5      	bne.n	7ed2 <d_print_comp.part.10+0x89e>
    7f06:	3701      	adds	r7, #1
    7f08:	4547      	cmp	r7, r8
    7f0a:	d1c9      	bne.n	7ea0 <d_print_comp.part.10+0x86c>
    7f0c:	e406      	b.n	771c <d_print_comp.part.10+0xe8>
    7f0e:	4fd0      	ldr	r7, [pc, #832]	; (8250 <d_print_comp.part.10+0xc1c>)
    7f10:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7f14:	f107 0a1a 	add.w	sl, r7, #26
    7f18:	f04f 0900 	mov.w	r9, #0
    7f1c:	e00a      	b.n	7f34 <d_print_comp.part.10+0x900>
    7f1e:	460b      	mov	r3, r1
    7f20:	3101      	adds	r1, #1
    7f22:	4557      	cmp	r7, sl
    7f24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7f28:	f804 8003 	strb.w	r8, [r4, r3]
    7f2c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7f30:	f000 8604 	beq.w	8b3c <d_print_comp.part.10+0x1508>
    7f34:	29ff      	cmp	r1, #255	; 0xff
    7f36:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7f3a:	d1f0      	bne.n	7f1e <d_print_comp.part.10+0x8ea>
    7f3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7f40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7f44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7f48:	4620      	mov	r0, r4
    7f4a:	4798      	blx	r3
    7f4c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7f50:	3301      	adds	r3, #1
    7f52:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7f56:	2101      	movs	r1, #1
    7f58:	2300      	movs	r3, #0
    7f5a:	e7e2      	b.n	7f22 <d_print_comp.part.10+0x8ee>
    7f5c:	f016 0604 	ands.w	r6, r6, #4
    7f60:	f041 81ae 	bne.w	92c0 <d_print_comp.part.10+0x1c8c>
    7f64:	6897      	ldr	r7, [r2, #8]
    7f66:	f8d2 9004 	ldr.w	r9, [r2, #4]
    7f6a:	2f00      	cmp	r7, #0
    7f6c:	f43f abd6 	beq.w	771c <d_print_comp.part.10+0xe8>
    7f70:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7f74:	46b0      	mov	r8, r6
    7f76:	e00a      	b.n	7f8e <d_print_comp.part.10+0x95a>
    7f78:	460b      	mov	r3, r1
    7f7a:	3101      	adds	r1, #1
    7f7c:	3601      	adds	r6, #1
    7f7e:	42b7      	cmp	r7, r6
    7f80:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7f84:	54e5      	strb	r5, [r4, r3]
    7f86:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    7f8a:	f43f abc7 	beq.w	771c <d_print_comp.part.10+0xe8>
    7f8e:	29ff      	cmp	r1, #255	; 0xff
    7f90:	f819 5006 	ldrb.w	r5, [r9, r6]
    7f94:	d1f0      	bne.n	7f78 <d_print_comp.part.10+0x944>
    7f96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7f9a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    7f9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7fa2:	4620      	mov	r0, r4
    7fa4:	4798      	blx	r3
    7fa6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7faa:	3301      	adds	r3, #1
    7fac:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7fb0:	2101      	movs	r1, #1
    7fb2:	2300      	movs	r3, #0
    7fb4:	e7e2      	b.n	7f7c <d_print_comp.part.10+0x948>
    7fb6:	4fa7      	ldr	r7, [pc, #668]	; (8254 <d_print_comp.part.10+0xc20>)
    7fb8:	6852      	ldr	r2, [r2, #4]
    7fba:	4631      	mov	r1, r6
    7fbc:	f001 fdd0 	bl	9b60 <d_print_comp>
    7fc0:	f107 0a08 	add.w	sl, r7, #8
    7fc4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7fc8:	f04f 0900 	mov.w	r9, #0
    7fcc:	e00a      	b.n	7fe4 <d_print_comp.part.10+0x9b0>
    7fce:	460b      	mov	r3, r1
    7fd0:	3101      	adds	r1, #1
    7fd2:	4557      	cmp	r7, sl
    7fd4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7fd8:	f804 8003 	strb.w	r8, [r4, r3]
    7fdc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7fe0:	f000 86e5 	beq.w	8dae <d_print_comp.part.10+0x177a>
    7fe4:	29ff      	cmp	r1, #255	; 0xff
    7fe6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7fea:	d1f0      	bne.n	7fce <d_print_comp.part.10+0x99a>
    7fec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7ff0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7ff4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7ff8:	4620      	mov	r0, r4
    7ffa:	4798      	blx	r3
    7ffc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8000:	3301      	adds	r3, #1
    8002:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8006:	2101      	movs	r1, #1
    8008:	2300      	movs	r3, #0
    800a:	e7e2      	b.n	7fd2 <d_print_comp.part.10+0x99e>
    800c:	1d11      	adds	r1, r2, #4
    800e:	f7fd fd33 	bl	5a78 <d_lookup_template_argument.isra.6>
    8012:	2800      	cmp	r0, #0
    8014:	f001 8013 	beq.w	903e <d_print_comp.part.10+0x1a0a>
    8018:	7803      	ldrb	r3, [r0, #0]
    801a:	2b2f      	cmp	r3, #47	; 0x2f
    801c:	f001 8002 	beq.w	9024 <d_print_comp.part.10+0x19f0>
    8020:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
    8024:	682b      	ldr	r3, [r5, #0]
    8026:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    802a:	4602      	mov	r2, r0
    802c:	4631      	mov	r1, r6
    802e:	4620      	mov	r0, r4
    8030:	f001 fd96 	bl	9b60 <d_print_comp>
    8034:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    8038:	f7ff bb70 	b.w	771c <d_print_comp.part.10+0xe8>
    803c:	2300      	movs	r3, #0
    803e:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
    8042:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    8046:	6857      	ldr	r7, [r2, #4]
    8048:	0772      	lsls	r2, r6, #29
    804a:	d505      	bpl.n	8058 <d_print_comp.part.10+0xa24>
    804c:	783b      	ldrb	r3, [r7, #0]
    804e:	b91b      	cbnz	r3, 8058 <d_print_comp.part.10+0xa24>
    8050:	68ba      	ldr	r2, [r7, #8]
    8052:	2a06      	cmp	r2, #6
    8054:	f001 83bb 	beq.w	97ce <d_print_comp.part.10+0x219a>
    8058:	463a      	mov	r2, r7
    805a:	4620      	mov	r0, r4
    805c:	4631      	mov	r1, r6
    805e:	f001 fd7f 	bl	9b60 <d_print_comp>
    8062:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    8066:	2b3c      	cmp	r3, #60	; 0x3c
    8068:	f001 832f 	beq.w	96ca <d_print_comp.part.10+0x2096>
    806c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    8070:	2bff      	cmp	r3, #255	; 0xff
    8072:	f001 822a 	beq.w	94ca <d_print_comp.part.10+0x1e96>
    8076:	1c59      	adds	r1, r3, #1
    8078:	223c      	movs	r2, #60	; 0x3c
    807a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    807e:	54e2      	strb	r2, [r4, r3]
    8080:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    8084:	4631      	mov	r1, r6
    8086:	68aa      	ldr	r2, [r5, #8]
    8088:	4620      	mov	r0, r4
    808a:	f001 fd69 	bl	9b60 <d_print_comp>
    808e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    8092:	2b3e      	cmp	r3, #62	; 0x3e
    8094:	f001 830b 	beq.w	96ae <d_print_comp.part.10+0x207a>
    8098:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    809c:	2bff      	cmp	r3, #255	; 0xff
    809e:	f001 8201 	beq.w	94a4 <d_print_comp.part.10+0x1e70>
    80a2:	1c59      	adds	r1, r3, #1
    80a4:	223e      	movs	r2, #62	; 0x3e
    80a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    80aa:	54e2      	strb	r2, [r4, r3]
    80ac:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    80b0:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
    80b4:	f7ff bb32 	b.w	771c <d_print_comp.part.10+0xe8>
    80b8:	2301      	movs	r3, #1
    80ba:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    80be:	f7ff bb2d 	b.w	771c <d_print_comp.part.10+0xe8>
    80c2:	f8d2 8008 	ldr.w	r8, [r2, #8]
    80c6:	f898 3000 	ldrb.w	r3, [r8]
    80ca:	2b37      	cmp	r3, #55	; 0x37
    80cc:	f000 875d 	beq.w	8f8a <d_print_comp.part.10+0x1956>
    80d0:	2301      	movs	r3, #1
    80d2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    80d6:	f7ff bb21 	b.w	771c <d_print_comp.part.10+0xe8>
    80da:	6857      	ldr	r7, [r2, #4]
    80dc:	6895      	ldr	r5, [r2, #8]
    80de:	783b      	ldrb	r3, [r7, #0]
    80e0:	2b31      	cmp	r3, #49	; 0x31
    80e2:	f001 8003 	beq.w	90ec <d_print_comp.part.10+0x1ab8>
    80e6:	2b33      	cmp	r3, #51	; 0x33
    80e8:	f001 8046 	beq.w	9178 <d_print_comp.part.10+0x1b44>
    80ec:	463a      	mov	r2, r7
    80ee:	4631      	mov	r1, r6
    80f0:	f002 fb98 	bl	a824 <d_print_expr_op>
    80f4:	4620      	mov	r0, r4
    80f6:	4631      	mov	r1, r6
    80f8:	462a      	mov	r2, r5
    80fa:	f002 fbcd 	bl	a898 <d_print_subexpr>
    80fe:	f7ff bb0d 	b.w	771c <d_print_comp.part.10+0xe8>
    8102:	4631      	mov	r1, r6
    8104:	6852      	ldr	r2, [r2, #4]
    8106:	f002 fb8d 	bl	a824 <d_print_expr_op>
    810a:	f7ff bb07 	b.w	771c <d_print_comp.part.10+0xe8>
    810e:	6857      	ldr	r7, [r2, #4]
    8110:	2f00      	cmp	r7, #0
    8112:	f040 86d4 	bne.w	8ebe <d_print_comp.part.10+0x188a>
    8116:	4d50      	ldr	r5, [pc, #320]	; (8258 <d_print_comp.part.10+0xc24>)
    8118:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    811c:	f105 0804 	add.w	r8, r5, #4
    8120:	e009      	b.n	8136 <d_print_comp.part.10+0xb02>
    8122:	460b      	mov	r3, r1
    8124:	3101      	adds	r1, #1
    8126:	4545      	cmp	r5, r8
    8128:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    812c:	54e6      	strb	r6, [r4, r3]
    812e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8132:	f43f aaf3 	beq.w	771c <d_print_comp.part.10+0xe8>
    8136:	29ff      	cmp	r1, #255	; 0xff
    8138:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    813c:	d1f1      	bne.n	8122 <d_print_comp.part.10+0xaee>
    813e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8142:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    8146:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    814a:	4620      	mov	r0, r4
    814c:	4798      	blx	r3
    814e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8152:	3301      	adds	r3, #1
    8154:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8158:	2101      	movs	r1, #1
    815a:	2300      	movs	r3, #0
    815c:	e7e3      	b.n	8126 <d_print_comp.part.10+0xaf2>
    815e:	4f3f      	ldr	r7, [pc, #252]	; (825c <d_print_comp.part.10+0xc28>)
    8160:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8164:	f107 0a0a 	add.w	sl, r7, #10
    8168:	f04f 0900 	mov.w	r9, #0
    816c:	e00a      	b.n	8184 <d_print_comp.part.10+0xb50>
    816e:	460b      	mov	r3, r1
    8170:	3101      	adds	r1, #1
    8172:	4557      	cmp	r7, sl
    8174:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8178:	f804 8003 	strb.w	r8, [r4, r3]
    817c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8180:	f000 85e8 	beq.w	8d54 <d_print_comp.part.10+0x1720>
    8184:	29ff      	cmp	r1, #255	; 0xff
    8186:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    818a:	d1f0      	bne.n	816e <d_print_comp.part.10+0xb3a>
    818c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8190:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8194:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8198:	4620      	mov	r0, r4
    819a:	4798      	blx	r3
    819c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    81a0:	3301      	adds	r3, #1
    81a2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    81a6:	2101      	movs	r1, #1
    81a8:	2300      	movs	r3, #0
    81aa:	e7e2      	b.n	8172 <d_print_comp.part.10+0xb3e>
    81ac:	6852      	ldr	r2, [r2, #4]
    81ae:	492c      	ldr	r1, [pc, #176]	; (8260 <d_print_comp.part.10+0xc2c>)
    81b0:	a806      	add	r0, sp, #24
    81b2:	f006 fc47 	bl	ea44 <sprintf>
    81b6:	a806      	add	r0, sp, #24
    81b8:	f7fa fb0e 	bl	27d8 <strlen>
    81bc:	2800      	cmp	r0, #0
    81be:	f43f aaad 	beq.w	771c <d_print_comp.part.10+0xe8>
    81c2:	f10d 0517 	add.w	r5, sp, #23
    81c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    81ca:	182f      	adds	r7, r5, r0
    81cc:	f04f 0800 	mov.w	r8, #0
    81d0:	e009      	b.n	81e6 <d_print_comp.part.10+0xbb2>
    81d2:	460b      	mov	r3, r1
    81d4:	3101      	adds	r1, #1
    81d6:	42bd      	cmp	r5, r7
    81d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    81dc:	54e6      	strb	r6, [r4, r3]
    81de:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    81e2:	f43f aa9b 	beq.w	771c <d_print_comp.part.10+0xe8>
    81e6:	29ff      	cmp	r1, #255	; 0xff
    81e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    81ec:	d1f1      	bne.n	81d2 <d_print_comp.part.10+0xb9e>
    81ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    81f2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    81f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    81fa:	4620      	mov	r0, r4
    81fc:	4798      	blx	r3
    81fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8202:	3301      	adds	r3, #1
    8204:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8208:	2101      	movs	r1, #1
    820a:	2300      	movs	r3, #0
    820c:	e7e3      	b.n	81d6 <d_print_comp.part.10+0xba2>
    820e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8212:	7915      	ldrb	r5, [r2, #4]
    8214:	29ff      	cmp	r1, #255	; 0xff
    8216:	f001 80ae 	beq.w	9376 <d_print_comp.part.10+0x1d42>
    821a:	1c4b      	adds	r3, r1, #1
    821c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    8220:	5465      	strb	r5, [r4, r1]
    8222:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8226:	f7ff ba79 	b.w	771c <d_print_comp.part.10+0xe8>
    822a:	4631      	mov	r1, r6
    822c:	6852      	ldr	r2, [r2, #4]
    822e:	f001 fc97 	bl	9b60 <d_print_comp>
    8232:	4620      	mov	r0, r4
    8234:	4631      	mov	r1, r6
    8236:	68aa      	ldr	r2, [r5, #8]
    8238:	f001 fc92 	bl	9b60 <d_print_comp>
    823c:	f7ff ba6e 	b.w	771c <d_print_comp.part.10+0xe8>
    8240:	4f08      	ldr	r7, [pc, #32]	; (8264 <d_print_comp.part.10+0xc30>)
    8242:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8246:	f107 0a0e 	add.w	sl, r7, #14
    824a:	f04f 0900 	mov.w	r9, #0
    824e:	e01a      	b.n	8286 <d_print_comp.part.10+0xc52>
    8250:	00013a73 	.word	0x00013a73
    8254:	00013b87 	.word	0x00013b87
    8258:	00013b17 	.word	0x00013b17
    825c:	00013b07 	.word	0x00013b07
    8260:	00013934 	.word	0x00013934
    8264:	00013af7 	.word	0x00013af7
    8268:	00013aa9 	.word	0x00013aa9
    826c:	00013aa7 	.word	0x00013aa7
    8270:	460b      	mov	r3, r1
    8272:	3101      	adds	r1, #1
    8274:	4557      	cmp	r7, sl
    8276:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    827a:	f804 8003 	strb.w	r8, [r4, r3]
    827e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8282:	f000 8560 	beq.w	8d46 <d_print_comp.part.10+0x1712>
    8286:	29ff      	cmp	r1, #255	; 0xff
    8288:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    828c:	d1f0      	bne.n	8270 <d_print_comp.part.10+0xc3c>
    828e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8292:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8296:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    829a:	4620      	mov	r0, r4
    829c:	4798      	blx	r3
    829e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    82a2:	3301      	adds	r3, #1
    82a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    82a8:	2101      	movs	r1, #1
    82aa:	2300      	movs	r3, #0
    82ac:	e7e2      	b.n	8274 <d_print_comp.part.10+0xc40>
    82ae:	6852      	ldr	r2, [r2, #4]
    82b0:	7811      	ldrb	r1, [r2, #0]
    82b2:	2927      	cmp	r1, #39	; 0x27
    82b4:	f040 85b4 	bne.w	8e20 <d_print_comp.part.10+0x17ec>
    82b8:	6852      	ldr	r2, [r2, #4]
    82ba:	7c17      	ldrb	r7, [r2, #16]
    82bc:	b15f      	cbz	r7, 82d6 <d_print_comp.part.10+0xca2>
    82be:	2f06      	cmp	r7, #6
    82c0:	f241 8178 	bls.w	95b4 <d_print_comp.part.10+0x1f80>
    82c4:	2f07      	cmp	r7, #7
    82c6:	d106      	bne.n	82d6 <d_print_comp.part.10+0xca2>
    82c8:	68aa      	ldr	r2, [r5, #8]
    82ca:	7811      	ldrb	r1, [r2, #0]
    82cc:	b919      	cbnz	r1, 82d6 <d_print_comp.part.10+0xca2>
    82ce:	6891      	ldr	r1, [r2, #8]
    82d0:	2901      	cmp	r1, #1
    82d2:	f001 83ad 	beq.w	9a30 <d_print_comp.part.10+0x23fc>
    82d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    82da:	29ff      	cmp	r1, #255	; 0xff
    82dc:	f001 8150 	beq.w	9580 <d_print_comp.part.10+0x1f4c>
    82e0:	1c4a      	adds	r2, r1, #1
    82e2:	2328      	movs	r3, #40	; 0x28
    82e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    82e8:	5463      	strb	r3, [r4, r1]
    82ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    82ee:	686a      	ldr	r2, [r5, #4]
    82f0:	4620      	mov	r0, r4
    82f2:	4631      	mov	r1, r6
    82f4:	f001 fc34 	bl	9b60 <d_print_comp>
    82f8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    82fc:	2bff      	cmp	r3, #255	; 0xff
    82fe:	f001 811c 	beq.w	953a <d_print_comp.part.10+0x1f06>
    8302:	1c59      	adds	r1, r3, #1
    8304:	2229      	movs	r2, #41	; 0x29
    8306:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    830a:	54e2      	strb	r2, [r4, r3]
    830c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    8310:	782b      	ldrb	r3, [r5, #0]
    8312:	2b3c      	cmp	r3, #60	; 0x3c
    8314:	f001 8206 	beq.w	9724 <d_print_comp.part.10+0x20f0>
    8318:	2f08      	cmp	r7, #8
    831a:	f001 81e4 	beq.w	96e6 <d_print_comp.part.10+0x20b2>
    831e:	4620      	mov	r0, r4
    8320:	4631      	mov	r1, r6
    8322:	68aa      	ldr	r2, [r5, #8]
    8324:	f001 fc1c 	bl	9b60 <d_print_comp>
    8328:	f7ff b9f8 	b.w	771c <d_print_comp.part.10+0xe8>
    832c:	2301      	movs	r3, #1
    832e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    8332:	f7ff b9f3 	b.w	771c <d_print_comp.part.10+0xe8>
    8336:	6893      	ldr	r3, [r2, #8]
    8338:	781a      	ldrb	r2, [r3, #0]
    833a:	2a39      	cmp	r2, #57	; 0x39
    833c:	f47f aec8 	bne.w	80d0 <d_print_comp.part.10+0xa9c>
    8340:	689f      	ldr	r7, [r3, #8]
    8342:	783a      	ldrb	r2, [r7, #0]
    8344:	2a3a      	cmp	r2, #58	; 0x3a
    8346:	f47f aec3 	bne.w	80d0 <d_print_comp.part.10+0xa9c>
    834a:	f8d5 a004 	ldr.w	sl, [r5, #4]
    834e:	49ba      	ldr	r1, [pc, #744]	; (8638 <d_print_comp.part.10+0x1004>)
    8350:	f8da 2004 	ldr.w	r2, [sl, #4]
    8354:	f8d3 8004 	ldr.w	r8, [r3, #4]
    8358:	6810      	ldr	r0, [r2, #0]
    835a:	f8d7 9004 	ldr.w	r9, [r7, #4]
    835e:	68bd      	ldr	r5, [r7, #8]
    8360:	f006 fb96 	bl	ea90 <strcmp>
    8364:	2800      	cmp	r0, #0
    8366:	f001 8290 	beq.w	988a <d_print_comp.part.10+0x2256>
    836a:	4620      	mov	r0, r4
    836c:	49b3      	ldr	r1, [pc, #716]	; (863c <d_print_comp.part.10+0x1008>)
    836e:	f7ff f92d 	bl	75cc <d_append_string>
    8372:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8376:	b143      	cbz	r3, 838a <d_print_comp.part.10+0xd56>
    8378:	4620      	mov	r0, r4
    837a:	4631      	mov	r1, r6
    837c:	4642      	mov	r2, r8
    837e:	f002 fa8b 	bl	a898 <d_print_subexpr>
    8382:	4620      	mov	r0, r4
    8384:	2120      	movs	r1, #32
    8386:	f7fd fa5b 	bl	5840 <d_append_char>
    838a:	464a      	mov	r2, r9
    838c:	4620      	mov	r0, r4
    838e:	4631      	mov	r1, r6
    8390:	f001 fbe6 	bl	9b60 <d_print_comp>
    8394:	2d00      	cmp	r5, #0
    8396:	f43f a9c1 	beq.w	771c <d_print_comp.part.10+0xe8>
    839a:	4620      	mov	r0, r4
    839c:	4631      	mov	r1, r6
    839e:	462a      	mov	r2, r5
    83a0:	f002 fa7a 	bl	a898 <d_print_subexpr>
    83a4:	f7ff b9ba 	b.w	771c <d_print_comp.part.10+0xe8>
    83a8:	6852      	ldr	r2, [r2, #4]
    83aa:	b112      	cbz	r2, 83b2 <d_print_comp.part.10+0xd7e>
    83ac:	4631      	mov	r1, r6
    83ae:	f001 fbd7 	bl	9b60 <d_print_comp>
    83b2:	68ab      	ldr	r3, [r5, #8]
    83b4:	2b00      	cmp	r3, #0
    83b6:	f43f a9b1 	beq.w	771c <d_print_comp.part.10+0xe8>
    83ba:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
    83be:	2ffd      	cmp	r7, #253	; 0xfd
    83c0:	f200 86f9 	bhi.w	91b6 <d_print_comp.part.10+0x1b82>
    83c4:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8650 <d_print_comp.part.10+0x101c>
    83c8:	f04f 0a00 	mov.w	sl, #0
    83cc:	f108 0b02 	add.w	fp, r8, #2
    83d0:	4639      	mov	r1, r7
    83d2:	e009      	b.n	83e8 <d_print_comp.part.10+0xdb4>
    83d4:	460b      	mov	r3, r1
    83d6:	3101      	adds	r1, #1
    83d8:	45d8      	cmp	r8, fp
    83da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    83de:	54e7      	strb	r7, [r4, r3]
    83e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    83e4:	f000 84fd 	beq.w	8de2 <d_print_comp.part.10+0x17ae>
    83e8:	29ff      	cmp	r1, #255	; 0xff
    83ea:	f818 7f01 	ldrb.w	r7, [r8, #1]!
    83ee:	d1f1      	bne.n	83d4 <d_print_comp.part.10+0xda0>
    83f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    83f4:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
    83f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    83fc:	4620      	mov	r0, r4
    83fe:	4798      	blx	r3
    8400:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8404:	3301      	adds	r3, #1
    8406:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    840a:	2101      	movs	r1, #1
    840c:	2300      	movs	r3, #0
    840e:	e7e3      	b.n	83d8 <d_print_comp.part.10+0xda4>
    8410:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
    8414:	2b00      	cmp	r3, #0
    8416:	f040 8629 	bne.w	906c <d_print_comp.part.10+0x1a38>
    841a:	686a      	ldr	r2, [r5, #4]
    841c:	4988      	ldr	r1, [pc, #544]	; (8640 <d_print_comp.part.10+0x100c>)
    841e:	6853      	ldr	r3, [r2, #4]
    8420:	428b      	cmp	r3, r1
    8422:	f000 85fb 	beq.w	901c <d_print_comp.part.10+0x19e8>
    8426:	4631      	mov	r1, r6
    8428:	4620      	mov	r0, r4
    842a:	f001 fb99 	bl	9b60 <d_print_comp>
    842e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    8432:	2bff      	cmp	r3, #255	; 0xff
    8434:	f001 80f4 	beq.w	9620 <d_print_comp.part.10+0x1fec>
    8438:	1c59      	adds	r1, r3, #1
    843a:	2220      	movs	r2, #32
    843c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8440:	54e2      	strb	r2, [r4, r3]
    8442:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    8446:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
    844a:	2b00      	cmp	r3, #0
    844c:	f000 84eb 	beq.w	8e26 <d_print_comp.part.10+0x17f2>
    8450:	4d7c      	ldr	r5, [pc, #496]	; (8644 <d_print_comp.part.10+0x1010>)
    8452:	f04f 0800 	mov.w	r8, #0
    8456:	1daf      	adds	r7, r5, #6
    8458:	e009      	b.n	846e <d_print_comp.part.10+0xe3a>
    845a:	460b      	mov	r3, r1
    845c:	3101      	adds	r1, #1
    845e:	42bd      	cmp	r5, r7
    8460:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8464:	54e6      	strb	r6, [r4, r3]
    8466:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    846a:	f43f a957 	beq.w	771c <d_print_comp.part.10+0xe8>
    846e:	29ff      	cmp	r1, #255	; 0xff
    8470:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8474:	d1f1      	bne.n	845a <d_print_comp.part.10+0xe26>
    8476:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    847a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    847e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8482:	4620      	mov	r0, r4
    8484:	4798      	blx	r3
    8486:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    848a:	3301      	adds	r3, #1
    848c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8490:	2101      	movs	r1, #1
    8492:	2300      	movs	r3, #0
    8494:	e7e3      	b.n	845e <d_print_comp.part.10+0xe2a>
    8496:	ab16      	add	r3, sp, #88	; 0x58
    8498:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    849c:	f843 2d40 	str.w	r2, [r3, #-64]!
    84a0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    84a4:	68aa      	ldr	r2, [r5, #8]
    84a6:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    84aa:	9309      	str	r3, [sp, #36]	; 0x24
    84ac:	2700      	movs	r7, #0
    84ae:	4631      	mov	r1, r6
    84b0:	9507      	str	r5, [sp, #28]
    84b2:	9708      	str	r7, [sp, #32]
    84b4:	f001 fb54 	bl	9b60 <d_print_comp>
    84b8:	9b08      	ldr	r3, [sp, #32]
    84ba:	b923      	cbnz	r3, 84c6 <d_print_comp.part.10+0xe92>
    84bc:	4631      	mov	r1, r6
    84be:	462a      	mov	r2, r5
    84c0:	4620      	mov	r0, r4
    84c2:	f001 fb59 	bl	9b78 <d_print_mod>
    84c6:	9b06      	ldr	r3, [sp, #24]
    84c8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    84cc:	f7ff b926 	b.w	771c <d_print_comp.part.10+0xe8>
    84d0:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
    84d4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    84d8:	f8cd b008 	str.w	fp, [sp, #8]
    84dc:	a916      	add	r1, sp, #88	; 0x58
    84de:	2200      	movs	r2, #0
    84e0:	f841 bd40 	str.w	fp, [r1, #-64]!
    84e4:	9309      	str	r3, [sp, #36]	; 0x24
    84e6:	9b02      	ldr	r3, [sp, #8]
    84e8:	9101      	str	r1, [sp, #4]
    84ea:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    84ee:	9507      	str	r5, [sp, #28]
    84f0:	9208      	str	r2, [sp, #32]
    84f2:	2b00      	cmp	r3, #0
    84f4:	f001 831d 	beq.w	9b32 <d_print_comp.part.10+0x24fe>
    84f8:	685b      	ldr	r3, [r3, #4]
    84fa:	781b      	ldrb	r3, [r3, #0]
    84fc:	3b19      	subs	r3, #25
    84fe:	2b02      	cmp	r3, #2
    8500:	f201 8317 	bhi.w	9b32 <d_print_comp.part.10+0x24fe>
    8504:	46ab      	mov	fp, r5
    8506:	f04f 0801 	mov.w	r8, #1
    850a:	9f02      	ldr	r7, [sp, #8]
    850c:	9603      	str	r6, [sp, #12]
    850e:	468a      	mov	sl, r1
    8510:	460d      	mov	r5, r1
    8512:	e004      	b.n	851e <d_print_comp.part.10+0xeea>
    8514:	687b      	ldr	r3, [r7, #4]
    8516:	781b      	ldrb	r3, [r3, #0]
    8518:	3b19      	subs	r3, #25
    851a:	2b02      	cmp	r3, #2
    851c:	d81d      	bhi.n	855a <d_print_comp.part.10+0xf26>
    851e:	ea4f 1c08 	mov.w	ip, r8, lsl #4
    8522:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    8526:	68bb      	ldr	r3, [r7, #8]
    8528:	44e1      	add	r9, ip
    852a:	f1a9 0640 	sub.w	r6, r9, #64	; 0x40
    852e:	b98b      	cbnz	r3, 8554 <d_print_comp.part.10+0xf20>
    8530:	f1b8 0f03 	cmp.w	r8, #3
    8534:	f200 87dc 	bhi.w	94f0 <d_print_comp.part.10+0x1ebc>
    8538:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    853c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    8540:	f849 5c40 	str.w	r5, [r9, #-64]
    8544:	2101      	movs	r1, #1
    8546:	eb0a 050c 	add.w	r5, sl, ip
    854a:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    854e:	f108 0801 	add.w	r8, r8, #1
    8552:	60b9      	str	r1, [r7, #8]
    8554:	683f      	ldr	r7, [r7, #0]
    8556:	2f00      	cmp	r7, #0
    8558:	d1dc      	bne.n	8514 <d_print_comp.part.10+0xee0>
    855a:	9e03      	ldr	r6, [sp, #12]
    855c:	f8db 2008 	ldr.w	r2, [fp, #8]
    8560:	4620      	mov	r0, r4
    8562:	4631      	mov	r1, r6
    8564:	f001 fafc 	bl	9b60 <d_print_comp>
    8568:	9b08      	ldr	r3, [sp, #32]
    856a:	9a02      	ldr	r2, [sp, #8]
    856c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    8570:	465d      	mov	r5, fp
    8572:	2b00      	cmp	r3, #0
    8574:	f47f a8d2 	bne.w	771c <d_print_comp.part.10+0xe8>
    8578:	f1b8 0f01 	cmp.w	r8, #1
    857c:	f001 8139 	beq.w	97f2 <d_print_comp.part.10+0x21be>
    8580:	9b01      	ldr	r3, [sp, #4]
    8582:	eb03 1708 	add.w	r7, r3, r8, lsl #4
    8586:	f857 2c0c 	ldr.w	r2, [r7, #-12]
    858a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    858e:	4620      	mov	r0, r4
    8590:	4631      	mov	r1, r6
    8592:	f001 faf1 	bl	9b78 <d_print_mod>
    8596:	f1b8 0f01 	cmp.w	r8, #1
    859a:	f1a7 0710 	sub.w	r7, r7, #16
    859e:	d1f2      	bne.n	8586 <d_print_comp.part.10+0xf52>
    85a0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    85a4:	4620      	mov	r0, r4
    85a6:	4631      	mov	r1, r6
    85a8:	1d2a      	adds	r2, r5, #4
    85aa:	f001 febb 	bl	a324 <d_print_array_type.isra.9>
    85ae:	f7ff b8b5 	b.w	771c <d_print_comp.part.10+0xe8>
    85b2:	06b3      	lsls	r3, r6, #26
    85b4:	f100 8548 	bmi.w	9048 <d_print_comp.part.10+0x1a14>
    85b8:	6853      	ldr	r3, [r2, #4]
    85ba:	b11b      	cbz	r3, 85c4 <d_print_comp.part.10+0xf90>
    85bc:	f016 0340 	ands.w	r3, r6, #64	; 0x40
    85c0:	f000 879b 	beq.w	94fa <d_print_comp.part.10+0x1ec6>
    85c4:	f026 0660 	bic.w	r6, r6, #96	; 0x60
    85c8:	4620      	mov	r0, r4
    85ca:	4631      	mov	r1, r6
    85cc:	f105 0208 	add.w	r2, r5, #8
    85d0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    85d4:	f001 ff76 	bl	a4c4 <d_print_function_type.isra.11>
    85d8:	f7ff b8a0 	b.w	771c <d_print_comp.part.10+0xe8>
    85dc:	4e1a      	ldr	r6, [pc, #104]	; (8648 <d_print_comp.part.10+0x1014>)
    85de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    85e2:	f106 090e 	add.w	r9, r6, #14
    85e6:	f04f 0800 	mov.w	r8, #0
    85ea:	e009      	b.n	8600 <d_print_comp.part.10+0xfcc>
    85ec:	460b      	mov	r3, r1
    85ee:	3101      	adds	r1, #1
    85f0:	454e      	cmp	r6, r9
    85f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    85f6:	54e7      	strb	r7, [r4, r3]
    85f8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    85fc:	f000 82f7 	beq.w	8bee <d_print_comp.part.10+0x15ba>
    8600:	29ff      	cmp	r1, #255	; 0xff
    8602:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    8606:	d1f1      	bne.n	85ec <d_print_comp.part.10+0xfb8>
    8608:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    860c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8610:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8614:	4620      	mov	r0, r4
    8616:	4798      	blx	r3
    8618:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    861c:	3301      	adds	r3, #1
    861e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8622:	2101      	movs	r1, #1
    8624:	2300      	movs	r3, #0
    8626:	e7e3      	b.n	85f0 <d_print_comp.part.10+0xfbc>
    8628:	4f08      	ldr	r7, [pc, #32]	; (864c <d_print_comp.part.10+0x1018>)
    862a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    862e:	f107 0a16 	add.w	sl, r7, #22
    8632:	f04f 0900 	mov.w	r9, #0
    8636:	e018      	b.n	866a <d_print_comp.part.10+0x1036>
    8638:	00013914 	.word	0x00013914
    863c:	00013ad4 	.word	0x00013ad4
    8640:	000132f0 	.word	0x000132f0
    8644:	00013a97 	.word	0x00013a97
    8648:	00013b77 	.word	0x00013b77
    864c:	00013a77 	.word	0x00013a77
    8650:	00013aa7 	.word	0x00013aa7
    8654:	460b      	mov	r3, r1
    8656:	3101      	adds	r1, #1
    8658:	4557      	cmp	r7, sl
    865a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    865e:	f804 8003 	strb.w	r8, [r4, r3]
    8662:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8666:	f000 82bb 	beq.w	8be0 <d_print_comp.part.10+0x15ac>
    866a:	29ff      	cmp	r1, #255	; 0xff
    866c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8670:	d1f0      	bne.n	8654 <d_print_comp.part.10+0x1020>
    8672:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8676:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    867a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    867e:	4620      	mov	r0, r4
    8680:	4798      	blx	r3
    8682:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8686:	3301      	adds	r3, #1
    8688:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    868c:	2101      	movs	r1, #1
    868e:	2300      	movs	r3, #0
    8690:	e7e2      	b.n	8658 <d_print_comp.part.10+0x1024>
    8692:	4fd0      	ldr	r7, [pc, #832]	; (89d4 <d_print_comp.part.10+0x13a0>)
    8694:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8698:	f107 0a1c 	add.w	sl, r7, #28
    869c:	f04f 0900 	mov.w	r9, #0
    86a0:	e00a      	b.n	86b8 <d_print_comp.part.10+0x1084>
    86a2:	460b      	mov	r3, r1
    86a4:	3101      	adds	r1, #1
    86a6:	4557      	cmp	r7, sl
    86a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    86ac:	f804 8003 	strb.w	r8, [r4, r3]
    86b0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    86b4:	f000 8361 	beq.w	8d7a <d_print_comp.part.10+0x1746>
    86b8:	29ff      	cmp	r1, #255	; 0xff
    86ba:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    86be:	d1f0      	bne.n	86a2 <d_print_comp.part.10+0x106e>
    86c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    86c4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    86c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    86cc:	4620      	mov	r0, r4
    86ce:	4798      	blx	r3
    86d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    86d4:	3301      	adds	r3, #1
    86d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    86da:	2101      	movs	r1, #1
    86dc:	2300      	movs	r3, #0
    86de:	e7e2      	b.n	86a6 <d_print_comp.part.10+0x1072>
    86e0:	4fbd      	ldr	r7, [pc, #756]	; (89d8 <d_print_comp.part.10+0x13a4>)
    86e2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    86e6:	f107 0a08 	add.w	sl, r7, #8
    86ea:	f04f 0900 	mov.w	r9, #0
    86ee:	e00a      	b.n	8706 <d_print_comp.part.10+0x10d2>
    86f0:	460b      	mov	r3, r1
    86f2:	3101      	adds	r1, #1
    86f4:	4557      	cmp	r7, sl
    86f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    86fa:	f804 8003 	strb.w	r8, [r4, r3]
    86fe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8702:	f000 82b1 	beq.w	8c68 <d_print_comp.part.10+0x1634>
    8706:	29ff      	cmp	r1, #255	; 0xff
    8708:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    870c:	d1f0      	bne.n	86f0 <d_print_comp.part.10+0x10bc>
    870e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8712:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8716:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    871a:	4620      	mov	r0, r4
    871c:	4798      	blx	r3
    871e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8722:	3301      	adds	r3, #1
    8724:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8728:	2101      	movs	r1, #1
    872a:	2300      	movs	r3, #0
    872c:	e7e2      	b.n	86f4 <d_print_comp.part.10+0x10c0>
    872e:	4fab      	ldr	r7, [pc, #684]	; (89dc <d_print_comp.part.10+0x13a8>)
    8730:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8734:	f107 0a1d 	add.w	sl, r7, #29
    8738:	f04f 0900 	mov.w	r9, #0
    873c:	e00a      	b.n	8754 <d_print_comp.part.10+0x1120>
    873e:	460b      	mov	r3, r1
    8740:	3101      	adds	r1, #1
    8742:	4557      	cmp	r7, sl
    8744:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8748:	f804 8003 	strb.w	r8, [r4, r3]
    874c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8750:	f000 8340 	beq.w	8dd4 <d_print_comp.part.10+0x17a0>
    8754:	29ff      	cmp	r1, #255	; 0xff
    8756:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    875a:	d1f0      	bne.n	873e <d_print_comp.part.10+0x110a>
    875c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8760:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8764:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8768:	4620      	mov	r0, r4
    876a:	4798      	blx	r3
    876c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8770:	3301      	adds	r3, #1
    8772:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8776:	2101      	movs	r1, #1
    8778:	2300      	movs	r3, #0
    877a:	e7e2      	b.n	8742 <d_print_comp.part.10+0x110e>
    877c:	4f98      	ldr	r7, [pc, #608]	; (89e0 <d_print_comp.part.10+0x13ac>)
    877e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8782:	f107 0a09 	add.w	sl, r7, #9
    8786:	f04f 0900 	mov.w	r9, #0
    878a:	e00a      	b.n	87a2 <d_print_comp.part.10+0x116e>
    878c:	460b      	mov	r3, r1
    878e:	3101      	adds	r1, #1
    8790:	4557      	cmp	r7, sl
    8792:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8796:	f804 8003 	strb.w	r8, [r4, r3]
    879a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    879e:	f000 81d4 	beq.w	8b4a <d_print_comp.part.10+0x1516>
    87a2:	29ff      	cmp	r1, #255	; 0xff
    87a4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    87a8:	d1f0      	bne.n	878c <d_print_comp.part.10+0x1158>
    87aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    87ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    87b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    87b6:	4620      	mov	r0, r4
    87b8:	4798      	blx	r3
    87ba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    87be:	3301      	adds	r3, #1
    87c0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    87c4:	2101      	movs	r1, #1
    87c6:	2300      	movs	r3, #0
    87c8:	e7e2      	b.n	8790 <d_print_comp.part.10+0x115c>
    87ca:	f016 0604 	ands.w	r6, r6, #4
    87ce:	6853      	ldr	r3, [r2, #4]
    87d0:	f040 834b 	bne.w	8e6a <d_print_comp.part.10+0x1836>
    87d4:	685f      	ldr	r7, [r3, #4]
    87d6:	f8d3 9000 	ldr.w	r9, [r3]
    87da:	2f00      	cmp	r7, #0
    87dc:	f43e af9e 	beq.w	771c <d_print_comp.part.10+0xe8>
    87e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    87e4:	46b0      	mov	r8, r6
    87e6:	e00a      	b.n	87fe <d_print_comp.part.10+0x11ca>
    87e8:	460b      	mov	r3, r1
    87ea:	3101      	adds	r1, #1
    87ec:	3601      	adds	r6, #1
    87ee:	42b7      	cmp	r7, r6
    87f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    87f4:	54e5      	strb	r5, [r4, r3]
    87f6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    87fa:	f43e af8f 	beq.w	771c <d_print_comp.part.10+0xe8>
    87fe:	29ff      	cmp	r1, #255	; 0xff
    8800:	f819 5006 	ldrb.w	r5, [r9, r6]
    8804:	d1f0      	bne.n	87e8 <d_print_comp.part.10+0x11b4>
    8806:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    880a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    880e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8812:	4620      	mov	r0, r4
    8814:	4798      	blx	r3
    8816:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    881a:	3301      	adds	r3, #1
    881c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8820:	2101      	movs	r1, #1
    8822:	2300      	movs	r3, #0
    8824:	e7e2      	b.n	87ec <d_print_comp.part.10+0x11b8>
    8826:	6850      	ldr	r0, [r2, #4]
    8828:	7803      	ldrb	r3, [r0, #0]
    882a:	2b05      	cmp	r3, #5
    882c:	f000 870b 	beq.w	9646 <d_print_comp.part.10+0x2012>
    8830:	2b23      	cmp	r3, #35	; 0x23
    8832:	f000 83a5 	beq.w	8f80 <d_print_comp.part.10+0x194c>
    8836:	782a      	ldrb	r2, [r5, #0]
    8838:	429a      	cmp	r2, r3
    883a:	f000 83a1 	beq.w	8f80 <d_print_comp.part.10+0x194c>
    883e:	2b24      	cmp	r3, #36	; 0x24
    8840:	f47e af50 	bne.w	76e4 <d_print_comp.part.10+0xb0>
    8844:	ab16      	add	r3, sp, #88	; 0x58
    8846:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    884a:	6842      	ldr	r2, [r0, #4]
    884c:	f843 1d40 	str.w	r1, [r3, #-64]!
    8850:	2000      	movs	r0, #0
    8852:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    8856:	9507      	str	r5, [sp, #28]
    8858:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    885c:	9008      	str	r0, [sp, #32]
    885e:	9109      	str	r1, [sp, #36]	; 0x24
    8860:	2a00      	cmp	r2, #0
    8862:	f47e af4d 	bne.w	7700 <d_print_comp.part.10+0xcc>
    8866:	f7fe bf4a 	b.w	76fe <d_print_comp.part.10+0xca>
    886a:	4631      	mov	r1, r6
    886c:	6852      	ldr	r2, [r2, #4]
    886e:	f001 f977 	bl	9b60 <d_print_comp>
    8872:	f7fe bf53 	b.w	771c <d_print_comp.part.10+0xe8>
    8876:	6857      	ldr	r7, [r2, #4]
    8878:	4d5a      	ldr	r5, [pc, #360]	; (89e4 <d_print_comp.part.10+0x13b0>)
    887a:	f8d7 9008 	ldr.w	r9, [r7, #8]
    887e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8882:	f105 0a08 	add.w	sl, r5, #8
    8886:	f04f 0800 	mov.w	r8, #0
    888a:	e009      	b.n	88a0 <d_print_comp.part.10+0x126c>
    888c:	460b      	mov	r3, r1
    888e:	3101      	adds	r1, #1
    8890:	4555      	cmp	r5, sl
    8892:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8896:	54e6      	strb	r6, [r4, r3]
    8898:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    889c:	f000 8163 	beq.w	8b66 <d_print_comp.part.10+0x1532>
    88a0:	29ff      	cmp	r1, #255	; 0xff
    88a2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    88a6:	d1f1      	bne.n	888c <d_print_comp.part.10+0x1258>
    88a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    88ac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    88b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    88b4:	4620      	mov	r0, r4
    88b6:	4798      	blx	r3
    88b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    88bc:	3301      	adds	r3, #1
    88be:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    88c2:	2101      	movs	r1, #1
    88c4:	2300      	movs	r3, #0
    88c6:	e7e3      	b.n	8890 <d_print_comp.part.10+0x125c>
    88c8:	4f45      	ldr	r7, [pc, #276]	; (89e0 <d_print_comp.part.10+0x13ac>)
    88ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    88ce:	f107 0a09 	add.w	sl, r7, #9
    88d2:	f04f 0900 	mov.w	r9, #0
    88d6:	e00a      	b.n	88ee <d_print_comp.part.10+0x12ba>
    88d8:	460b      	mov	r3, r1
    88da:	3101      	adds	r1, #1
    88dc:	4557      	cmp	r7, sl
    88de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    88e2:	f804 8003 	strb.w	r8, [r4, r3]
    88e6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    88ea:	f000 8135 	beq.w	8b58 <d_print_comp.part.10+0x1524>
    88ee:	29ff      	cmp	r1, #255	; 0xff
    88f0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    88f4:	d1f0      	bne.n	88d8 <d_print_comp.part.10+0x12a4>
    88f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    88fa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    88fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8902:	4620      	mov	r0, r4
    8904:	4798      	blx	r3
    8906:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    890a:	3301      	adds	r3, #1
    890c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8910:	2101      	movs	r1, #1
    8912:	2300      	movs	r3, #0
    8914:	e7e2      	b.n	88dc <d_print_comp.part.10+0x12a8>
    8916:	6852      	ldr	r2, [r2, #4]
    8918:	68af      	ldr	r7, [r5, #8]
    891a:	b112      	cbz	r2, 8922 <d_print_comp.part.10+0x12ee>
    891c:	4631      	mov	r1, r6
    891e:	f001 f91f 	bl	9b60 <d_print_comp>
    8922:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    8926:	2bff      	cmp	r3, #255	; 0xff
    8928:	f000 8484 	beq.w	9234 <d_print_comp.part.10+0x1c00>
    892c:	1c5a      	adds	r2, r3, #1
    892e:	257b      	movs	r5, #123	; 0x7b
    8930:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8934:	4631      	mov	r1, r6
    8936:	54e5      	strb	r5, [r4, r3]
    8938:	463a      	mov	r2, r7
    893a:	4620      	mov	r0, r4
    893c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8940:	f001 f90e 	bl	9b60 <d_print_comp>
    8944:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8948:	29ff      	cmp	r1, #255	; 0xff
    894a:	f000 8461 	beq.w	9210 <d_print_comp.part.10+0x1bdc>
    894e:	1c4a      	adds	r2, r1, #1
    8950:	237d      	movs	r3, #125	; 0x7d
    8952:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8956:	5463      	strb	r3, [r4, r1]
    8958:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    895c:	f7fe bede 	b.w	771c <d_print_comp.part.10+0xe8>
    8960:	2301      	movs	r3, #1
    8962:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    8966:	f7fe bed9 	b.w	771c <d_print_comp.part.10+0xe8>
    896a:	687f      	ldr	r7, [r7, #4]
    896c:	2f00      	cmp	r7, #0
    896e:	f000 8699 	beq.w	96a4 <d_print_comp.part.10+0x2070>
    8972:	f1b8 0f04 	cmp.w	r8, #4
    8976:	f47f a999 	bne.w	7cac <d_print_comp.part.10+0x678>
    897a:	2301      	movs	r3, #1
    897c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    8980:	f7fe becc 	b.w	771c <d_print_comp.part.10+0xe8>
    8984:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8988:	29ff      	cmp	r1, #255	; 0xff
    898a:	f000 870e 	beq.w	97aa <d_print_comp.part.10+0x2176>
    898e:	1c4a      	adds	r2, r1, #1
    8990:	232e      	movs	r3, #46	; 0x2e
    8992:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8996:	5463      	strb	r3, [r4, r1]
    8998:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    899c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    89a0:	f898 3000 	ldrb.w	r3, [r8]
    89a4:	2b45      	cmp	r3, #69	; 0x45
    89a6:	f000 84c1 	beq.w	932c <d_print_comp.part.10+0x1cf8>
    89aa:	4620      	mov	r0, r4
    89ac:	4631      	mov	r1, r6
    89ae:	4642      	mov	r2, r8
    89b0:	f001 f8d6 	bl	9b60 <d_print_comp>
    89b4:	f7fe beb2 	b.w	771c <d_print_comp.part.10+0xe8>
    89b8:	4620      	mov	r0, r4
    89ba:	4631      	mov	r1, r6
    89bc:	686a      	ldr	r2, [r5, #4]
    89be:	f001 f8cf 	bl	9b60 <d_print_comp>
    89c2:	f7fe beab 	b.w	771c <d_print_comp.part.10+0xe8>
    89c6:	4620      	mov	r0, r4
    89c8:	4631      	mov	r1, r6
    89ca:	686a      	ldr	r2, [r5, #4]
    89cc:	f001 f8c8 	bl	9b60 <d_print_comp>
    89d0:	f7fe bea4 	b.w	771c <d_print_comp.part.10+0xe8>
    89d4:	00013b47 	.word	0x00013b47
    89d8:	00013b67 	.word	0x00013b67
    89dc:	00013b27 	.word	0x00013b27
    89e0:	00013ab7 	.word	0x00013ab7
    89e4:	00013aab 	.word	0x00013aab
    89e8:	4fbd      	ldr	r7, [pc, #756]	; (8ce0 <d_print_comp.part.10+0x16ac>)
    89ea:	68aa      	ldr	r2, [r5, #8]
    89ec:	4631      	mov	r1, r6
    89ee:	4620      	mov	r0, r4
    89f0:	f001 f8b6 	bl	9b60 <d_print_comp>
    89f4:	f107 0a05 	add.w	sl, r7, #5
    89f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    89fc:	f04f 0900 	mov.w	r9, #0
    8a00:	e009      	b.n	8a16 <d_print_comp.part.10+0x13e2>
    8a02:	460b      	mov	r3, r1
    8a04:	3101      	adds	r1, #1
    8a06:	4557      	cmp	r7, sl
    8a08:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8a0c:	f804 8003 	strb.w	r8, [r4, r3]
    8a10:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8a14:	d013      	beq.n	8a3e <d_print_comp.part.10+0x140a>
    8a16:	29ff      	cmp	r1, #255	; 0xff
    8a18:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8a1c:	d1f1      	bne.n	8a02 <d_print_comp.part.10+0x13ce>
    8a1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8a22:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8a26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8a2a:	4620      	mov	r0, r4
    8a2c:	4798      	blx	r3
    8a2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8a32:	3301      	adds	r3, #1
    8a34:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8a38:	2101      	movs	r1, #1
    8a3a:	2300      	movs	r3, #0
    8a3c:	e7e3      	b.n	8a06 <d_print_comp.part.10+0x13d2>
    8a3e:	4620      	mov	r0, r4
    8a40:	4631      	mov	r1, r6
    8a42:	686a      	ldr	r2, [r5, #4]
    8a44:	f001 f88c 	bl	9b60 <d_print_comp>
    8a48:	f7fe be68 	b.w	771c <d_print_comp.part.10+0xe8>
    8a4c:	4620      	mov	r0, r4
    8a4e:	4631      	mov	r1, r6
    8a50:	686a      	ldr	r2, [r5, #4]
    8a52:	f001 f885 	bl	9b60 <d_print_comp>
    8a56:	f7fe be61 	b.w	771c <d_print_comp.part.10+0xe8>
    8a5a:	4620      	mov	r0, r4
    8a5c:	4631      	mov	r1, r6
    8a5e:	686a      	ldr	r2, [r5, #4]
    8a60:	f001 f87e 	bl	9b60 <d_print_comp>
    8a64:	f7fe be5a 	b.w	771c <d_print_comp.part.10+0xe8>
    8a68:	4620      	mov	r0, r4
    8a6a:	4631      	mov	r1, r6
    8a6c:	686a      	ldr	r2, [r5, #4]
    8a6e:	f001 f877 	bl	9b60 <d_print_comp>
    8a72:	f7fe be53 	b.w	771c <d_print_comp.part.10+0xe8>
    8a76:	4620      	mov	r0, r4
    8a78:	4631      	mov	r1, r6
    8a7a:	686a      	ldr	r2, [r5, #4]
    8a7c:	f001 f870 	bl	9b60 <d_print_comp>
    8a80:	f7fe be4c 	b.w	771c <d_print_comp.part.10+0xe8>
    8a84:	4620      	mov	r0, r4
    8a86:	4631      	mov	r1, r6
    8a88:	686a      	ldr	r2, [r5, #4]
    8a8a:	f001 f869 	bl	9b60 <d_print_comp>
    8a8e:	f7fe be45 	b.w	771c <d_print_comp.part.10+0xe8>
    8a92:	4f94      	ldr	r7, [pc, #592]	; (8ce4 <d_print_comp.part.10+0x16b0>)
    8a94:	686a      	ldr	r2, [r5, #4]
    8a96:	4631      	mov	r1, r6
    8a98:	4620      	mov	r0, r4
    8a9a:	f001 f861 	bl	9b60 <d_print_comp>
    8a9e:	f107 0a04 	add.w	sl, r7, #4
    8aa2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8aa6:	f04f 0900 	mov.w	r9, #0
    8aaa:	e009      	b.n	8ac0 <d_print_comp.part.10+0x148c>
    8aac:	460b      	mov	r3, r1
    8aae:	3101      	adds	r1, #1
    8ab0:	4557      	cmp	r7, sl
    8ab2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8ab6:	f804 8003 	strb.w	r8, [r4, r3]
    8aba:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8abe:	d01a      	beq.n	8af6 <d_print_comp.part.10+0x14c2>
    8ac0:	29ff      	cmp	r1, #255	; 0xff
    8ac2:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8ac6:	d1f1      	bne.n	8aac <d_print_comp.part.10+0x1478>
    8ac8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8acc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8ad0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8ad4:	4620      	mov	r0, r4
    8ad6:	4798      	blx	r3
    8ad8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8adc:	3301      	adds	r3, #1
    8ade:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8ae2:	2101      	movs	r1, #1
    8ae4:	2300      	movs	r3, #0
    8ae6:	e7e3      	b.n	8ab0 <d_print_comp.part.10+0x147c>
    8ae8:	4620      	mov	r0, r4
    8aea:	4631      	mov	r1, r6
    8aec:	686a      	ldr	r2, [r5, #4]
    8aee:	f001 f837 	bl	9b60 <d_print_comp>
    8af2:	f7fe be13 	b.w	771c <d_print_comp.part.10+0xe8>
    8af6:	4620      	mov	r0, r4
    8af8:	4631      	mov	r1, r6
    8afa:	68aa      	ldr	r2, [r5, #8]
    8afc:	f001 f830 	bl	9b60 <d_print_comp>
    8b00:	f7fe be0c 	b.w	771c <d_print_comp.part.10+0xe8>
    8b04:	4620      	mov	r0, r4
    8b06:	4631      	mov	r1, r6
    8b08:	686a      	ldr	r2, [r5, #4]
    8b0a:	f001 f829 	bl	9b60 <d_print_comp>
    8b0e:	f7fe be05 	b.w	771c <d_print_comp.part.10+0xe8>
    8b12:	4620      	mov	r0, r4
    8b14:	4631      	mov	r1, r6
    8b16:	686a      	ldr	r2, [r5, #4]
    8b18:	f001 f822 	bl	9b60 <d_print_comp>
    8b1c:	f7fe bdfe 	b.w	771c <d_print_comp.part.10+0xe8>
    8b20:	4620      	mov	r0, r4
    8b22:	4631      	mov	r1, r6
    8b24:	686a      	ldr	r2, [r5, #4]
    8b26:	f001 f81b 	bl	9b60 <d_print_comp>
    8b2a:	f7fe bdf7 	b.w	771c <d_print_comp.part.10+0xe8>
    8b2e:	4620      	mov	r0, r4
    8b30:	4631      	mov	r1, r6
    8b32:	686a      	ldr	r2, [r5, #4]
    8b34:	f001 f814 	bl	9b60 <d_print_comp>
    8b38:	f7fe bdf0 	b.w	771c <d_print_comp.part.10+0xe8>
    8b3c:	4620      	mov	r0, r4
    8b3e:	4631      	mov	r1, r6
    8b40:	686a      	ldr	r2, [r5, #4]
    8b42:	f001 f80d 	bl	9b60 <d_print_comp>
    8b46:	f7fe bde9 	b.w	771c <d_print_comp.part.10+0xe8>
    8b4a:	4620      	mov	r0, r4
    8b4c:	4631      	mov	r1, r6
    8b4e:	1d2a      	adds	r2, r5, #4
    8b50:	f001 fda4 	bl	a69c <d_print_cast.isra.12>
    8b54:	f7fe bde2 	b.w	771c <d_print_comp.part.10+0xe8>
    8b58:	4620      	mov	r0, r4
    8b5a:	4631      	mov	r1, r6
    8b5c:	68aa      	ldr	r2, [r5, #8]
    8b5e:	f000 ffff 	bl	9b60 <d_print_comp>
    8b62:	f7fe bddb 	b.w	771c <d_print_comp.part.10+0xe8>
    8b66:	687d      	ldr	r5, [r7, #4]
    8b68:	782b      	ldrb	r3, [r5, #0]
    8b6a:	3b61      	subs	r3, #97	; 0x61
    8b6c:	2b19      	cmp	r3, #25
    8b6e:	f240 82a4 	bls.w	90ba <d_print_comp.part.10+0x1a86>
    8b72:	eb05 0309 	add.w	r3, r5, r9
    8b76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    8b7a:	2b20      	cmp	r3, #32
    8b7c:	bf0c      	ite	eq
    8b7e:	f109 37ff 	addeq.w	r7, r9, #4294967295	; 0xffffffff
    8b82:	464f      	movne	r7, r9
    8b84:	2f00      	cmp	r7, #0
    8b86:	f43e adc9 	beq.w	771c <d_print_comp.part.10+0xe8>
    8b8a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8b8e:	442f      	add	r7, r5
    8b90:	f04f 0800 	mov.w	r8, #0
    8b94:	e009      	b.n	8baa <d_print_comp.part.10+0x1576>
    8b96:	460b      	mov	r3, r1
    8b98:	3101      	adds	r1, #1
    8b9a:	42bd      	cmp	r5, r7
    8b9c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8ba0:	54e6      	strb	r6, [r4, r3]
    8ba2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8ba6:	f43e adb9 	beq.w	771c <d_print_comp.part.10+0xe8>
    8baa:	29ff      	cmp	r1, #255	; 0xff
    8bac:	f815 6b01 	ldrb.w	r6, [r5], #1
    8bb0:	d1f1      	bne.n	8b96 <d_print_comp.part.10+0x1562>
    8bb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8bb6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8bba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8bbe:	4620      	mov	r0, r4
    8bc0:	4798      	blx	r3
    8bc2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8bc6:	3301      	adds	r3, #1
    8bc8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8bcc:	2101      	movs	r1, #1
    8bce:	2300      	movs	r3, #0
    8bd0:	e7e3      	b.n	8b9a <d_print_comp.part.10+0x1566>
    8bd2:	4620      	mov	r0, r4
    8bd4:	4631      	mov	r1, r6
    8bd6:	686a      	ldr	r2, [r5, #4]
    8bd8:	f000 ffc2 	bl	9b60 <d_print_comp>
    8bdc:	f7fe bd9e 	b.w	771c <d_print_comp.part.10+0xe8>
    8be0:	4620      	mov	r0, r4
    8be2:	4631      	mov	r1, r6
    8be4:	686a      	ldr	r2, [r5, #4]
    8be6:	f000 ffbb 	bl	9b60 <d_print_comp>
    8bea:	f7fe bd97 	b.w	771c <d_print_comp.part.10+0xe8>
    8bee:	686a      	ldr	r2, [r5, #4]
    8bf0:	493d      	ldr	r1, [pc, #244]	; (8ce8 <d_print_comp.part.10+0x16b4>)
    8bf2:	3201      	adds	r2, #1
    8bf4:	a806      	add	r0, sp, #24
    8bf6:	f005 ff25 	bl	ea44 <sprintf>
    8bfa:	a806      	add	r0, sp, #24
    8bfc:	f7f9 fdec 	bl	27d8 <strlen>
    8c00:	b320      	cbz	r0, 8c4c <d_print_comp.part.10+0x1618>
    8c02:	f10d 0517 	add.w	r5, sp, #23
    8c06:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8c0a:	182f      	adds	r7, r5, r0
    8c0c:	f04f 0800 	mov.w	r8, #0
    8c10:	e008      	b.n	8c24 <d_print_comp.part.10+0x15f0>
    8c12:	460b      	mov	r3, r1
    8c14:	3101      	adds	r1, #1
    8c16:	42bd      	cmp	r5, r7
    8c18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8c1c:	54e6      	strb	r6, [r4, r3]
    8c1e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8c22:	d015      	beq.n	8c50 <d_print_comp.part.10+0x161c>
    8c24:	29ff      	cmp	r1, #255	; 0xff
    8c26:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8c2a:	d1f2      	bne.n	8c12 <d_print_comp.part.10+0x15de>
    8c2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8c30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8c34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8c38:	4620      	mov	r0, r4
    8c3a:	4798      	blx	r3
    8c3c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8c40:	3301      	adds	r3, #1
    8c42:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8c46:	2101      	movs	r1, #1
    8c48:	2300      	movs	r3, #0
    8c4a:	e7e4      	b.n	8c16 <d_print_comp.part.10+0x15e2>
    8c4c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8c50:	29ff      	cmp	r1, #255	; 0xff
    8c52:	f000 8302 	beq.w	925a <d_print_comp.part.10+0x1c26>
    8c56:	1c4a      	adds	r2, r1, #1
    8c58:	237d      	movs	r3, #125	; 0x7d
    8c5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8c5e:	5463      	strb	r3, [r4, r1]
    8c60:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8c64:	f7fe bd5a 	b.w	771c <d_print_comp.part.10+0xe8>
    8c68:	4631      	mov	r1, r6
    8c6a:	4e20      	ldr	r6, [pc, #128]	; (8cec <d_print_comp.part.10+0x16b8>)
    8c6c:	686a      	ldr	r2, [r5, #4]
    8c6e:	4620      	mov	r0, r4
    8c70:	f000 ff76 	bl	9b60 <d_print_comp>
    8c74:	f106 0902 	add.w	r9, r6, #2
    8c78:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8c7c:	f04f 0800 	mov.w	r8, #0
    8c80:	e008      	b.n	8c94 <d_print_comp.part.10+0x1660>
    8c82:	460b      	mov	r3, r1
    8c84:	3101      	adds	r1, #1
    8c86:	454e      	cmp	r6, r9
    8c88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8c8c:	54e7      	strb	r7, [r4, r3]
    8c8e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    8c92:	d013      	beq.n	8cbc <d_print_comp.part.10+0x1688>
    8c94:	29ff      	cmp	r1, #255	; 0xff
    8c96:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    8c9a:	d1f2      	bne.n	8c82 <d_print_comp.part.10+0x164e>
    8c9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8ca0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8ca4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8ca8:	4620      	mov	r0, r4
    8caa:	4798      	blx	r3
    8cac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8cb0:	3301      	adds	r3, #1
    8cb2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8cb6:	2101      	movs	r1, #1
    8cb8:	2300      	movs	r3, #0
    8cba:	e7e4      	b.n	8c86 <d_print_comp.part.10+0x1652>
    8cbc:	68aa      	ldr	r2, [r5, #8]
    8cbe:	490a      	ldr	r1, [pc, #40]	; (8ce8 <d_print_comp.part.10+0x16b4>)
    8cc0:	3201      	adds	r2, #1
    8cc2:	a806      	add	r0, sp, #24
    8cc4:	f005 febe 	bl	ea44 <sprintf>
    8cc8:	a806      	add	r0, sp, #24
    8cca:	f7f9 fd85 	bl	27d8 <strlen>
    8cce:	b360      	cbz	r0, 8d2a <d_print_comp.part.10+0x16f6>
    8cd0:	f10d 0517 	add.w	r5, sp, #23
    8cd4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8cd8:	182f      	adds	r7, r5, r0
    8cda:	f04f 0800 	mov.w	r8, #0
    8cde:	e010      	b.n	8d02 <d_print_comp.part.10+0x16ce>
    8ce0:	00013a3f 	.word	0x00013a3f
    8ce4:	0001397b 	.word	0x0001397b
    8ce8:	00013934 	.word	0x00013934
    8cec:	00013b73 	.word	0x00013b73
    8cf0:	460b      	mov	r3, r1
    8cf2:	3101      	adds	r1, #1
    8cf4:	42bd      	cmp	r5, r7
    8cf6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8cfa:	54e6      	strb	r6, [r4, r3]
    8cfc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8d00:	d015      	beq.n	8d2e <d_print_comp.part.10+0x16fa>
    8d02:	29ff      	cmp	r1, #255	; 0xff
    8d04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8d08:	d1f2      	bne.n	8cf0 <d_print_comp.part.10+0x16bc>
    8d0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8d0e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8d12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8d16:	4620      	mov	r0, r4
    8d18:	4798      	blx	r3
    8d1a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8d1e:	3301      	adds	r3, #1
    8d20:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8d24:	2101      	movs	r1, #1
    8d26:	2300      	movs	r3, #0
    8d28:	e7e4      	b.n	8cf4 <d_print_comp.part.10+0x16c0>
    8d2a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8d2e:	29ff      	cmp	r1, #255	; 0xff
    8d30:	f000 8332 	beq.w	9398 <d_print_comp.part.10+0x1d64>
    8d34:	1c4a      	adds	r2, r1, #1
    8d36:	237d      	movs	r3, #125	; 0x7d
    8d38:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8d3c:	5463      	strb	r3, [r4, r1]
    8d3e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8d42:	f7fe bceb 	b.w	771c <d_print_comp.part.10+0xe8>
    8d46:	4620      	mov	r0, r4
    8d48:	4631      	mov	r1, r6
    8d4a:	686a      	ldr	r2, [r5, #4]
    8d4c:	f000 ff08 	bl	9b60 <d_print_comp>
    8d50:	f7fe bce4 	b.w	771c <d_print_comp.part.10+0xe8>
    8d54:	4631      	mov	r1, r6
    8d56:	686a      	ldr	r2, [r5, #4]
    8d58:	4620      	mov	r0, r4
    8d5a:	f000 ff01 	bl	9b60 <d_print_comp>
    8d5e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8d62:	29ff      	cmp	r1, #255	; 0xff
    8d64:	f000 828a 	beq.w	927c <d_print_comp.part.10+0x1c48>
    8d68:	1c4a      	adds	r2, r1, #1
    8d6a:	2329      	movs	r3, #41	; 0x29
    8d6c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8d70:	5463      	strb	r3, [r4, r1]
    8d72:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8d76:	f7fe bcd1 	b.w	771c <d_print_comp.part.10+0xe8>
    8d7a:	4620      	mov	r0, r4
    8d7c:	4631      	mov	r1, r6
    8d7e:	686a      	ldr	r2, [r5, #4]
    8d80:	f000 feee 	bl	9b60 <d_print_comp>
    8d84:	f7fe bcca 	b.w	771c <d_print_comp.part.10+0xe8>
    8d88:	4631      	mov	r1, r6
    8d8a:	68aa      	ldr	r2, [r5, #8]
    8d8c:	4620      	mov	r0, r4
    8d8e:	f000 fee7 	bl	9b60 <d_print_comp>
    8d92:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8d96:	29ff      	cmp	r1, #255	; 0xff
    8d98:	f000 830f 	beq.w	93ba <d_print_comp.part.10+0x1d86>
    8d9c:	1c4a      	adds	r2, r1, #1
    8d9e:	235d      	movs	r3, #93	; 0x5d
    8da0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8da4:	5463      	strb	r3, [r4, r1]
    8da6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8daa:	f7fe bcb7 	b.w	771c <d_print_comp.part.10+0xe8>
    8dae:	4631      	mov	r1, r6
    8db0:	68aa      	ldr	r2, [r5, #8]
    8db2:	4620      	mov	r0, r4
    8db4:	f000 fed4 	bl	9b60 <d_print_comp>
    8db8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8dbc:	29ff      	cmp	r1, #255	; 0xff
    8dbe:	f000 826e 	beq.w	929e <d_print_comp.part.10+0x1c6a>
    8dc2:	1c4a      	adds	r2, r1, #1
    8dc4:	235d      	movs	r3, #93	; 0x5d
    8dc6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8dca:	5463      	strb	r3, [r4, r1]
    8dcc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8dd0:	f7fe bca4 	b.w	771c <d_print_comp.part.10+0xe8>
    8dd4:	4620      	mov	r0, r4
    8dd6:	4631      	mov	r1, r6
    8dd8:	686a      	ldr	r2, [r5, #4]
    8dda:	f000 fec1 	bl	9b60 <d_print_comp>
    8dde:	f7fe bc9d 	b.w	771c <d_print_comp.part.10+0xe8>
    8de2:	68aa      	ldr	r2, [r5, #8]
    8de4:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
    8de8:	460f      	mov	r7, r1
    8dea:	4620      	mov	r0, r4
    8dec:	4631      	mov	r1, r6
    8dee:	f000 feb7 	bl	9b60 <d_print_comp>
    8df2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8df6:	429d      	cmp	r5, r3
    8df8:	f47e ac90 	bne.w	771c <d_print_comp.part.10+0xe8>
    8dfc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    8e00:	42bb      	cmp	r3, r7
    8e02:	f47e ac8b 	bne.w	771c <d_print_comp.part.10+0xe8>
    8e06:	3f02      	subs	r7, #2
    8e08:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    8e0c:	f7fe bc86 	b.w	771c <d_print_comp.part.10+0xe8>
    8e10:	686d      	ldr	r5, [r5, #4]
    8e12:	9501      	str	r5, [sp, #4]
    8e14:	f1b8 0f00 	cmp.w	r8, #0
    8e18:	f47f a83b 	bne.w	7e92 <d_print_comp.part.10+0x85e>
    8e1c:	f7fe bc7e 	b.w	771c <d_print_comp.part.10+0xe8>
    8e20:	2700      	movs	r7, #0
    8e22:	f7ff ba58 	b.w	82d6 <d_print_comp.part.10+0xca2>
    8e26:	4dab      	ldr	r5, [pc, #684]	; (90d4 <d_print_comp.part.10+0x1aa0>)
    8e28:	4698      	mov	r8, r3
    8e2a:	1daf      	adds	r7, r5, #6
    8e2c:	e009      	b.n	8e42 <d_print_comp.part.10+0x180e>
    8e2e:	460b      	mov	r3, r1
    8e30:	3101      	adds	r1, #1
    8e32:	42bd      	cmp	r5, r7
    8e34:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8e38:	54e6      	strb	r6, [r4, r3]
    8e3a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8e3e:	f43e ac6d 	beq.w	771c <d_print_comp.part.10+0xe8>
    8e42:	29ff      	cmp	r1, #255	; 0xff
    8e44:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8e48:	d1f1      	bne.n	8e2e <d_print_comp.part.10+0x17fa>
    8e4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8e4e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8e52:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8e56:	4620      	mov	r0, r4
    8e58:	4798      	blx	r3
    8e5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8e5e:	3301      	adds	r3, #1
    8e60:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8e64:	2101      	movs	r1, #1
    8e66:	2300      	movs	r3, #0
    8e68:	e7e3      	b.n	8e32 <d_print_comp.part.10+0x17fe>
    8e6a:	68df      	ldr	r7, [r3, #12]
    8e6c:	f8d3 9008 	ldr.w	r9, [r3, #8]
    8e70:	2f00      	cmp	r7, #0
    8e72:	f43e ac53 	beq.w	771c <d_print_comp.part.10+0xe8>
    8e76:	2500      	movs	r5, #0
    8e78:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8e7c:	46a8      	mov	r8, r5
    8e7e:	e00a      	b.n	8e96 <d_print_comp.part.10+0x1862>
    8e80:	460b      	mov	r3, r1
    8e82:	3101      	adds	r1, #1
    8e84:	3501      	adds	r5, #1
    8e86:	42af      	cmp	r7, r5
    8e88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8e8c:	54e6      	strb	r6, [r4, r3]
    8e8e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8e92:	f43e ac43 	beq.w	771c <d_print_comp.part.10+0xe8>
    8e96:	29ff      	cmp	r1, #255	; 0xff
    8e98:	f819 6005 	ldrb.w	r6, [r9, r5]
    8e9c:	d1f0      	bne.n	8e80 <d_print_comp.part.10+0x184c>
    8e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8ea2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8ea6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8eaa:	4620      	mov	r0, r4
    8eac:	4798      	blx	r3
    8eae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8eb2:	3301      	adds	r3, #1
    8eb4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8eb8:	2101      	movs	r1, #1
    8eba:	2300      	movs	r3, #0
    8ebc:	e7e2      	b.n	8e84 <d_print_comp.part.10+0x1850>
    8ebe:	4d86      	ldr	r5, [pc, #536]	; (90d8 <d_print_comp.part.10+0x1aa4>)
    8ec0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8ec4:	f105 0906 	add.w	r9, r5, #6
    8ec8:	f04f 0800 	mov.w	r8, #0
    8ecc:	e008      	b.n	8ee0 <d_print_comp.part.10+0x18ac>
    8ece:	460b      	mov	r3, r1
    8ed0:	3101      	adds	r1, #1
    8ed2:	454d      	cmp	r5, r9
    8ed4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8ed8:	54e6      	strb	r6, [r4, r3]
    8eda:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8ede:	d013      	beq.n	8f08 <d_print_comp.part.10+0x18d4>
    8ee0:	29ff      	cmp	r1, #255	; 0xff
    8ee2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8ee6:	d1f2      	bne.n	8ece <d_print_comp.part.10+0x189a>
    8ee8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8eec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8ef0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8ef4:	4620      	mov	r0, r4
    8ef6:	4798      	blx	r3
    8ef8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8efc:	3301      	adds	r3, #1
    8efe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8f02:	2101      	movs	r1, #1
    8f04:	2300      	movs	r3, #0
    8f06:	e7e4      	b.n	8ed2 <d_print_comp.part.10+0x189e>
    8f08:	463a      	mov	r2, r7
    8f0a:	a806      	add	r0, sp, #24
    8f0c:	4973      	ldr	r1, [pc, #460]	; (90dc <d_print_comp.part.10+0x1aa8>)
    8f0e:	f005 fd99 	bl	ea44 <sprintf>
    8f12:	a806      	add	r0, sp, #24
    8f14:	f7f9 fc60 	bl	27d8 <strlen>
    8f18:	b320      	cbz	r0, 8f64 <d_print_comp.part.10+0x1930>
    8f1a:	f10d 0517 	add.w	r5, sp, #23
    8f1e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8f22:	182f      	adds	r7, r5, r0
    8f24:	f04f 0800 	mov.w	r8, #0
    8f28:	e008      	b.n	8f3c <d_print_comp.part.10+0x1908>
    8f2a:	460b      	mov	r3, r1
    8f2c:	3101      	adds	r1, #1
    8f2e:	42bd      	cmp	r5, r7
    8f30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8f34:	54e6      	strb	r6, [r4, r3]
    8f36:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8f3a:	d015      	beq.n	8f68 <d_print_comp.part.10+0x1934>
    8f3c:	29ff      	cmp	r1, #255	; 0xff
    8f3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8f42:	d1f2      	bne.n	8f2a <d_print_comp.part.10+0x18f6>
    8f44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8f48:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8f4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8f50:	4620      	mov	r0, r4
    8f52:	4798      	blx	r3
    8f54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8f58:	3301      	adds	r3, #1
    8f5a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8f5e:	2101      	movs	r1, #1
    8f60:	2300      	movs	r3, #0
    8f62:	e7e4      	b.n	8f2e <d_print_comp.part.10+0x18fa>
    8f64:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8f68:	29ff      	cmp	r1, #255	; 0xff
    8f6a:	f000 8445 	beq.w	97f8 <d_print_comp.part.10+0x21c4>
    8f6e:	1c4a      	adds	r2, r1, #1
    8f70:	237d      	movs	r3, #125	; 0x7d
    8f72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8f76:	5463      	strb	r3, [r4, r1]
    8f78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8f7c:	f7fe bbce 	b.w	771c <d_print_comp.part.10+0xe8>
    8f80:	4605      	mov	r5, r0
    8f82:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    8f86:	f7fe bbaf 	b.w	76e8 <d_print_comp.part.10+0xb4>
    8f8a:	6852      	ldr	r2, [r2, #4]
    8f8c:	6853      	ldr	r3, [r2, #4]
    8f8e:	6819      	ldr	r1, [r3, #0]
    8f90:	7848      	ldrb	r0, [r1, #1]
    8f92:	2863      	cmp	r0, #99	; 0x63
    8f94:	f000 83e2 	beq.w	975c <d_print_comp.part.10+0x2128>
    8f98:	7811      	ldrb	r1, [r2, #0]
    8f9a:	2931      	cmp	r1, #49	; 0x31
    8f9c:	f000 844e 	beq.w	983c <d_print_comp.part.10+0x2208>
    8fa0:	6853      	ldr	r3, [r2, #4]
    8fa2:	494f      	ldr	r1, [pc, #316]	; (90e0 <d_print_comp.part.10+0x1aac>)
    8fa4:	6818      	ldr	r0, [r3, #0]
    8fa6:	f005 fd73 	bl	ea90 <strcmp>
    8faa:	f8d8 2004 	ldr.w	r2, [r8, #4]
    8fae:	b918      	cbnz	r0, 8fb8 <d_print_comp.part.10+0x1984>
    8fb0:	7813      	ldrb	r3, [r2, #0]
    8fb2:	2b03      	cmp	r3, #3
    8fb4:	f000 845b 	beq.w	986e <d_print_comp.part.10+0x223a>
    8fb8:	4620      	mov	r0, r4
    8fba:	4631      	mov	r1, r6
    8fbc:	f001 fc6c 	bl	a898 <d_print_subexpr>
    8fc0:	f8d5 8004 	ldr.w	r8, [r5, #4]
    8fc4:	4947      	ldr	r1, [pc, #284]	; (90e4 <d_print_comp.part.10+0x1ab0>)
    8fc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8fca:	681f      	ldr	r7, [r3, #0]
    8fcc:	4638      	mov	r0, r7
    8fce:	f005 fd5f 	bl	ea90 <strcmp>
    8fd2:	2800      	cmp	r0, #0
    8fd4:	f000 8422 	beq.w	981c <d_print_comp.part.10+0x21e8>
    8fd8:	4638      	mov	r0, r7
    8fda:	4941      	ldr	r1, [pc, #260]	; (90e0 <d_print_comp.part.10+0x1aac>)
    8fdc:	f005 fd58 	bl	ea90 <strcmp>
    8fe0:	2800      	cmp	r0, #0
    8fe2:	f040 843d 	bne.w	9860 <d_print_comp.part.10+0x222c>
    8fe6:	68ab      	ldr	r3, [r5, #8]
    8fe8:	4631      	mov	r1, r6
    8fea:	689a      	ldr	r2, [r3, #8]
    8fec:	4620      	mov	r0, r4
    8fee:	f001 fc53 	bl	a898 <d_print_subexpr>
    8ff2:	686b      	ldr	r3, [r5, #4]
    8ff4:	781a      	ldrb	r2, [r3, #0]
    8ff6:	2a31      	cmp	r2, #49	; 0x31
    8ff8:	f47e ab90 	bne.w	771c <d_print_comp.part.10+0xe8>
    8ffc:	685b      	ldr	r3, [r3, #4]
    8ffe:	689a      	ldr	r2, [r3, #8]
    9000:	2a01      	cmp	r2, #1
    9002:	f47e ab8b 	bne.w	771c <d_print_comp.part.10+0xe8>
    9006:	685b      	ldr	r3, [r3, #4]
    9008:	781b      	ldrb	r3, [r3, #0]
    900a:	2b3e      	cmp	r3, #62	; 0x3e
    900c:	f47e ab86 	bne.w	771c <d_print_comp.part.10+0xe8>
    9010:	4620      	mov	r0, r4
    9012:	2129      	movs	r1, #41	; 0x29
    9014:	f7fc fc14 	bl	5840 <d_append_char>
    9018:	f7fe bb80 	b.w	771c <d_print_comp.part.10+0xe8>
    901c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9020:	f7ff ba11 	b.w	8446 <d_print_comp.part.10+0xe12>
    9024:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    9028:	e002      	b.n	9030 <d_print_comp.part.10+0x19fc>
    902a:	7802      	ldrb	r2, [r0, #0]
    902c:	2a2f      	cmp	r2, #47	; 0x2f
    902e:	d106      	bne.n	903e <d_print_comp.part.10+0x1a0a>
    9030:	2b00      	cmp	r3, #0
    9032:	f340 8576 	ble.w	9b22 <d_print_comp.part.10+0x24ee>
    9036:	6880      	ldr	r0, [r0, #8]
    9038:	3b01      	subs	r3, #1
    903a:	2800      	cmp	r0, #0
    903c:	d1f5      	bne.n	902a <d_print_comp.part.10+0x19f6>
    903e:	2301      	movs	r3, #1
    9040:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    9044:	f7fe bb6a 	b.w	771c <d_print_comp.part.10+0xe8>
    9048:	f026 0660 	bic.w	r6, r6, #96	; 0x60
    904c:	3208      	adds	r2, #8
    904e:	4631      	mov	r1, r6
    9050:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    9054:	f001 fa36 	bl	a4c4 <d_print_function_type.isra.11>
    9058:	686a      	ldr	r2, [r5, #4]
    905a:	2a00      	cmp	r2, #0
    905c:	f43e ab5e 	beq.w	771c <d_print_comp.part.10+0xe8>
    9060:	4620      	mov	r0, r4
    9062:	4631      	mov	r1, r6
    9064:	f000 fd7c 	bl	9b60 <d_print_comp>
    9068:	f7fe bb58 	b.w	771c <d_print_comp.part.10+0xe8>
    906c:	4f1e      	ldr	r7, [pc, #120]	; (90e8 <d_print_comp.part.10+0x1ab4>)
    906e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9072:	f107 0a05 	add.w	sl, r7, #5
    9076:	f04f 0900 	mov.w	r9, #0
    907a:	e00a      	b.n	9092 <d_print_comp.part.10+0x1a5e>
    907c:	460b      	mov	r3, r1
    907e:	3101      	adds	r1, #1
    9080:	4557      	cmp	r7, sl
    9082:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9086:	f804 8003 	strb.w	r8, [r4, r3]
    908a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    908e:	f43f a9c4 	beq.w	841a <d_print_comp.part.10+0xde6>
    9092:	29ff      	cmp	r1, #255	; 0xff
    9094:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    9098:	d1f0      	bne.n	907c <d_print_comp.part.10+0x1a48>
    909a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    909e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    90a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    90a6:	4620      	mov	r0, r4
    90a8:	4798      	blx	r3
    90aa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    90ae:	3301      	adds	r3, #1
    90b0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    90b4:	2101      	movs	r1, #1
    90b6:	2300      	movs	r3, #0
    90b8:	e7e2      	b.n	9080 <d_print_comp.part.10+0x1a4c>
    90ba:	29ff      	cmp	r1, #255	; 0xff
    90bc:	f000 8421 	beq.w	9902 <d_print_comp.part.10+0x22ce>
    90c0:	1c4a      	adds	r2, r1, #1
    90c2:	2320      	movs	r3, #32
    90c4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    90c8:	5463      	strb	r3, [r4, r1]
    90ca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    90ce:	687d      	ldr	r5, [r7, #4]
    90d0:	e54f      	b.n	8b72 <d_print_comp.part.10+0x153e>
    90d2:	bf00      	nop
    90d4:	00013a9f 	.word	0x00013a9f
    90d8:	00013b1f 	.word	0x00013b1f
    90dc:	00013934 	.word	0x00013934
    90e0:	00013908 	.word	0x00013908
    90e4:	00013acc 	.word	0x00013acc
    90e8:	00013a8f 	.word	0x00013a8f
    90ec:	687b      	ldr	r3, [r7, #4]
    90ee:	49c5      	ldr	r1, [pc, #788]	; (9404 <d_print_comp.part.10+0x1dd0>)
    90f0:	f8d3 8000 	ldr.w	r8, [r3]
    90f4:	4640      	mov	r0, r8
    90f6:	f005 fccb 	bl	ea90 <strcmp>
    90fa:	782b      	ldrb	r3, [r5, #0]
    90fc:	b910      	cbnz	r0, 9104 <d_print_comp.part.10+0x1ad0>
    90fe:	2b03      	cmp	r3, #3
    9100:	f000 8411 	beq.w	9926 <d_print_comp.part.10+0x22f2>
    9104:	2b37      	cmp	r3, #55	; 0x37
    9106:	f000 8487 	beq.w	9a18 <d_print_comp.part.10+0x23e4>
    910a:	463a      	mov	r2, r7
    910c:	4620      	mov	r0, r4
    910e:	4631      	mov	r1, r6
    9110:	f001 fb88 	bl	a824 <d_print_expr_op>
    9114:	f1b8 0f00 	cmp.w	r8, #0
    9118:	f43e afec 	beq.w	80f4 <d_print_comp.part.10+0xac0>
    911c:	4640      	mov	r0, r8
    911e:	49ba      	ldr	r1, [pc, #744]	; (9408 <d_print_comp.part.10+0x1dd4>)
    9120:	f005 fcb6 	bl	ea90 <strcmp>
    9124:	2800      	cmp	r0, #0
    9126:	f000 823e 	beq.w	95a6 <d_print_comp.part.10+0x1f72>
    912a:	4640      	mov	r0, r8
    912c:	49b7      	ldr	r1, [pc, #732]	; (940c <d_print_comp.part.10+0x1dd8>)
    912e:	f005 fcaf 	bl	ea90 <strcmp>
    9132:	4607      	mov	r7, r0
    9134:	2800      	cmp	r0, #0
    9136:	f47e afdd 	bne.w	80f4 <d_print_comp.part.10+0xac0>
    913a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    913e:	2bff      	cmp	r3, #255	; 0xff
    9140:	f000 8421 	beq.w	9986 <d_print_comp.part.10+0x2352>
    9144:	1c58      	adds	r0, r3, #1
    9146:	2728      	movs	r7, #40	; 0x28
    9148:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    914c:	4631      	mov	r1, r6
    914e:	54e7      	strb	r7, [r4, r3]
    9150:	462a      	mov	r2, r5
    9152:	4620      	mov	r0, r4
    9154:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9158:	f000 fd02 	bl	9b60 <d_print_comp>
    915c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9160:	29ff      	cmp	r1, #255	; 0xff
    9162:	f000 83ff 	beq.w	9964 <d_print_comp.part.10+0x2330>
    9166:	2329      	movs	r3, #41	; 0x29
    9168:	1c4a      	adds	r2, r1, #1
    916a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    916e:	5463      	strb	r3, [r4, r1]
    9170:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9174:	f7fe bad2 	b.w	771c <d_print_comp.part.10+0xe8>
    9178:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    917c:	29ff      	cmp	r1, #255	; 0xff
    917e:	f000 83af 	beq.w	98e0 <d_print_comp.part.10+0x22ac>
    9182:	1c4a      	adds	r2, r1, #1
    9184:	2328      	movs	r3, #40	; 0x28
    9186:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    918a:	4620      	mov	r0, r4
    918c:	5463      	strb	r3, [r4, r1]
    918e:	1d3a      	adds	r2, r7, #4
    9190:	4631      	mov	r1, r6
    9192:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9196:	f001 fa81 	bl	a69c <d_print_cast.isra.12>
    919a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    919e:	29ff      	cmp	r1, #255	; 0xff
    91a0:	f000 838d 	beq.w	98be <d_print_comp.part.10+0x228a>
    91a4:	1c4a      	adds	r2, r1, #1
    91a6:	2329      	movs	r3, #41	; 0x29
    91a8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    91ac:	5463      	strb	r3, [r4, r1]
    91ae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    91b2:	f7fe bf9f 	b.w	80f4 <d_print_comp.part.10+0xac0>
    91b6:	f04f 0800 	mov.w	r8, #0
    91ba:	f804 8007 	strb.w	r8, [r4, r7]
    91be:	4639      	mov	r1, r7
    91c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    91c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    91c8:	4620      	mov	r0, r4
    91ca:	4798      	blx	r3
    91cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    91d0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    91d4:	3301      	adds	r3, #1
    91d6:	4647      	mov	r7, r8
    91d8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    91dc:	f7ff b8f2 	b.w	83c4 <d_print_comp.part.10+0xd90>
    91e0:	4620      	mov	r0, r4
    91e2:	4631      	mov	r1, r6
    91e4:	686a      	ldr	r2, [r5, #4]
    91e6:	f000 fcbb 	bl	9b60 <d_print_comp>
    91ea:	f7fe ba97 	b.w	771c <d_print_comp.part.10+0xe8>
    91ee:	2700      	movs	r7, #0
    91f0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    91f4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    91f8:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
    91fc:	4798      	blx	r3
    91fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9202:	3301      	adds	r3, #1
    9204:	4639      	mov	r1, r7
    9206:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    920a:	2201      	movs	r2, #1
    920c:	f7fe bd2c 	b.w	7c68 <d_print_comp.part.10+0x634>
    9210:	2500      	movs	r5, #0
    9212:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9216:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    921a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    921e:	4620      	mov	r0, r4
    9220:	4798      	blx	r3
    9222:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9226:	3301      	adds	r3, #1
    9228:	4629      	mov	r1, r5
    922a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    922e:	2201      	movs	r2, #1
    9230:	f7ff bb8e 	b.w	8950 <d_print_comp.part.10+0x131c>
    9234:	2500      	movs	r5, #0
    9236:	4619      	mov	r1, r3
    9238:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    923c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9240:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9244:	4620      	mov	r0, r4
    9246:	4798      	blx	r3
    9248:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    924c:	1c5a      	adds	r2, r3, #1
    924e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9252:	462b      	mov	r3, r5
    9254:	2201      	movs	r2, #1
    9256:	f7ff bb6a 	b.w	892e <d_print_comp.part.10+0x12fa>
    925a:	2500      	movs	r5, #0
    925c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9260:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9264:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9268:	4620      	mov	r0, r4
    926a:	4798      	blx	r3
    926c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9270:	3301      	adds	r3, #1
    9272:	4629      	mov	r1, r5
    9274:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9278:	2201      	movs	r2, #1
    927a:	e4ed      	b.n	8c58 <d_print_comp.part.10+0x1624>
    927c:	2500      	movs	r5, #0
    927e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9282:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9286:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    928a:	4620      	mov	r0, r4
    928c:	4798      	blx	r3
    928e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9292:	3301      	adds	r3, #1
    9294:	4629      	mov	r1, r5
    9296:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    929a:	2201      	movs	r2, #1
    929c:	e565      	b.n	8d6a <d_print_comp.part.10+0x1736>
    929e:	2500      	movs	r5, #0
    92a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    92a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    92a8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    92ac:	4620      	mov	r0, r4
    92ae:	4798      	blx	r3
    92b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    92b4:	3301      	adds	r3, #1
    92b6:	4629      	mov	r1, r5
    92b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    92bc:	2201      	movs	r2, #1
    92be:	e581      	b.n	8dc4 <d_print_comp.part.10+0x1790>
    92c0:	6856      	ldr	r6, [r2, #4]
    92c2:	6897      	ldr	r7, [r2, #8]
    92c4:	4437      	add	r7, r6
    92c6:	42be      	cmp	r6, r7
    92c8:	f4be aa28 	bcs.w	771c <d_print_comp.part.10+0xe8>
    92cc:	f04f 0800 	mov.w	r8, #0
    92d0:	e00d      	b.n	92ee <d_print_comp.part.10+0x1cba>
    92d2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    92d6:	29ff      	cmp	r1, #255	; 0xff
    92d8:	d018      	beq.n	930c <d_print_comp.part.10+0x1cd8>
    92da:	1c4b      	adds	r3, r1, #1
    92dc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    92e0:	5465      	strb	r5, [r4, r1]
    92e2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    92e6:	3601      	adds	r6, #1
    92e8:	42b7      	cmp	r7, r6
    92ea:	f67e aa17 	bls.w	771c <d_print_comp.part.10+0xe8>
    92ee:	1bbb      	subs	r3, r7, r6
    92f0:	2b03      	cmp	r3, #3
    92f2:	7835      	ldrb	r5, [r6, #0]
    92f4:	dded      	ble.n	92d2 <d_print_comp.part.10+0x1c9e>
    92f6:	2d5f      	cmp	r5, #95	; 0x5f
    92f8:	d1eb      	bne.n	92d2 <d_print_comp.part.10+0x1c9e>
    92fa:	7872      	ldrb	r2, [r6, #1]
    92fc:	2a5f      	cmp	r2, #95	; 0x5f
    92fe:	d1e8      	bne.n	92d2 <d_print_comp.part.10+0x1c9e>
    9300:	78b3      	ldrb	r3, [r6, #2]
    9302:	2b55      	cmp	r3, #85	; 0x55
    9304:	f000 8350 	beq.w	99a8 <d_print_comp.part.10+0x2374>
    9308:	4615      	mov	r5, r2
    930a:	e7e2      	b.n	92d2 <d_print_comp.part.10+0x1c9e>
    930c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9310:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9314:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9318:	4620      	mov	r0, r4
    931a:	4798      	blx	r3
    931c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9320:	3301      	adds	r3, #1
    9322:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9326:	2100      	movs	r1, #0
    9328:	2301      	movs	r3, #1
    932a:	e7d7      	b.n	92dc <d_print_comp.part.10+0x1ca8>
    932c:	4d38      	ldr	r5, [pc, #224]	; (9410 <d_print_comp.part.10+0x1ddc>)
    932e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9332:	f105 0a0d 	add.w	sl, r5, #13
    9336:	f04f 0900 	mov.w	r9, #0
    933a:	e008      	b.n	934e <d_print_comp.part.10+0x1d1a>
    933c:	460b      	mov	r3, r1
    933e:	3101      	adds	r1, #1
    9340:	4555      	cmp	r5, sl
    9342:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9346:	54e7      	strb	r7, [r4, r3]
    9348:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    934c:	d046      	beq.n	93dc <d_print_comp.part.10+0x1da8>
    934e:	29ff      	cmp	r1, #255	; 0xff
    9350:	f815 7f01 	ldrb.w	r7, [r5, #1]!
    9354:	d1f2      	bne.n	933c <d_print_comp.part.10+0x1d08>
    9356:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    935a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    935e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9362:	4620      	mov	r0, r4
    9364:	4798      	blx	r3
    9366:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    936a:	3301      	adds	r3, #1
    936c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9370:	2101      	movs	r1, #1
    9372:	2300      	movs	r3, #0
    9374:	e7e4      	b.n	9340 <d_print_comp.part.10+0x1d0c>
    9376:	2600      	movs	r6, #0
    9378:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    937c:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    9380:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    9384:	4798      	blx	r3
    9386:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    938a:	3301      	adds	r3, #1
    938c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9390:	4631      	mov	r1, r6
    9392:	2301      	movs	r3, #1
    9394:	f7fe bf42 	b.w	821c <d_print_comp.part.10+0xbe8>
    9398:	2500      	movs	r5, #0
    939a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    939e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    93a2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    93a6:	4620      	mov	r0, r4
    93a8:	4798      	blx	r3
    93aa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    93ae:	3301      	adds	r3, #1
    93b0:	4629      	mov	r1, r5
    93b2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    93b6:	2201      	movs	r2, #1
    93b8:	e4bd      	b.n	8d36 <d_print_comp.part.10+0x1702>
    93ba:	2500      	movs	r5, #0
    93bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    93c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    93c4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    93c8:	4620      	mov	r0, r4
    93ca:	4798      	blx	r3
    93cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    93d0:	3301      	adds	r3, #1
    93d2:	4629      	mov	r1, r5
    93d4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    93d8:	2201      	movs	r2, #1
    93da:	e4e0      	b.n	8d9e <d_print_comp.part.10+0x176a>
    93dc:	f8d8 2008 	ldr.w	r2, [r8, #8]
    93e0:	490c      	ldr	r1, [pc, #48]	; (9414 <d_print_comp.part.10+0x1de0>)
    93e2:	3201      	adds	r2, #1
    93e4:	a806      	add	r0, sp, #24
    93e6:	f005 fb2d 	bl	ea44 <sprintf>
    93ea:	a806      	add	r0, sp, #24
    93ec:	f7f9 f9f4 	bl	27d8 <strlen>
    93f0:	b378      	cbz	r0, 9452 <d_print_comp.part.10+0x1e1e>
    93f2:	f10d 0517 	add.w	r5, sp, #23
    93f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    93fa:	eb05 0a00 	add.w	sl, r5, r0
    93fe:	f04f 0900 	mov.w	r9, #0
    9402:	e012      	b.n	942a <d_print_comp.part.10+0x1df6>
    9404:	00013ac4 	.word	0x00013ac4
    9408:	00013ac8 	.word	0x00013ac8
    940c:	00013db0 	.word	0x00013db0
    9410:	00013923 	.word	0x00013923
    9414:	00013934 	.word	0x00013934
    9418:	460b      	mov	r3, r1
    941a:	3101      	adds	r1, #1
    941c:	4555      	cmp	r5, sl
    941e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9422:	54e7      	strb	r7, [r4, r3]
    9424:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9428:	d015      	beq.n	9456 <d_print_comp.part.10+0x1e22>
    942a:	29ff      	cmp	r1, #255	; 0xff
    942c:	f815 7f01 	ldrb.w	r7, [r5, #1]!
    9430:	d1f2      	bne.n	9418 <d_print_comp.part.10+0x1de4>
    9432:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9436:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    943a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    943e:	4620      	mov	r0, r4
    9440:	4798      	blx	r3
    9442:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9446:	3301      	adds	r3, #1
    9448:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    944c:	2101      	movs	r1, #1
    944e:	2300      	movs	r3, #0
    9450:	e7e4      	b.n	941c <d_print_comp.part.10+0x1de8>
    9452:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9456:	4dbd      	ldr	r5, [pc, #756]	; (974c <d_print_comp.part.10+0x2118>)
    9458:	f04f 0900 	mov.w	r9, #0
    945c:	f105 0a03 	add.w	sl, r5, #3
    9460:	e008      	b.n	9474 <d_print_comp.part.10+0x1e40>
    9462:	460b      	mov	r3, r1
    9464:	3101      	adds	r1, #1
    9466:	4555      	cmp	r5, sl
    9468:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    946c:	54e7      	strb	r7, [r4, r3]
    946e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9472:	d013      	beq.n	949c <d_print_comp.part.10+0x1e68>
    9474:	29ff      	cmp	r1, #255	; 0xff
    9476:	f815 7f01 	ldrb.w	r7, [r5, #1]!
    947a:	d1f2      	bne.n	9462 <d_print_comp.part.10+0x1e2e>
    947c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9480:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    9484:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9488:	4620      	mov	r0, r4
    948a:	4798      	blx	r3
    948c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9490:	3301      	adds	r3, #1
    9492:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9496:	2101      	movs	r1, #1
    9498:	2300      	movs	r3, #0
    949a:	e7e4      	b.n	9466 <d_print_comp.part.10+0x1e32>
    949c:	f8d8 8004 	ldr.w	r8, [r8, #4]
    94a0:	f7ff ba83 	b.w	89aa <d_print_comp.part.10+0x1376>
    94a4:	2500      	movs	r5, #0
    94a6:	4619      	mov	r1, r3
    94a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    94ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    94b0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    94b4:	4620      	mov	r0, r4
    94b6:	4798      	blx	r3
    94b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    94bc:	1c5a      	adds	r2, r3, #1
    94be:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    94c2:	462b      	mov	r3, r5
    94c4:	2101      	movs	r1, #1
    94c6:	f7fe bded 	b.w	80a4 <d_print_comp.part.10+0xa70>
    94ca:	2700      	movs	r7, #0
    94cc:	4619      	mov	r1, r3
    94ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    94d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    94d6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    94da:	4620      	mov	r0, r4
    94dc:	4798      	blx	r3
    94de:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    94e2:	1c5a      	adds	r2, r3, #1
    94e4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    94e8:	463b      	mov	r3, r7
    94ea:	2101      	movs	r1, #1
    94ec:	f7fe bdc4 	b.w	8078 <d_print_comp.part.10+0xa44>
    94f0:	2301      	movs	r3, #1
    94f2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    94f6:	f7fe b911 	b.w	771c <d_print_comp.part.10+0xe8>
    94fa:	aa16      	add	r2, sp, #88	; 0x58
    94fc:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    9500:	f842 1d40 	str.w	r1, [r2, #-64]!
    9504:	f026 0660 	bic.w	r6, r6, #96	; 0x60
    9508:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    950c:	686a      	ldr	r2, [r5, #4]
    950e:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
    9512:	9308      	str	r3, [sp, #32]
    9514:	4631      	mov	r1, r6
    9516:	4620      	mov	r0, r4
    9518:	9507      	str	r5, [sp, #28]
    951a:	9709      	str	r7, [sp, #36]	; 0x24
    951c:	f000 fb20 	bl	9b60 <d_print_comp>
    9520:	9b08      	ldr	r3, [sp, #32]
    9522:	9a06      	ldr	r2, [sp, #24]
    9524:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    9528:	2b00      	cmp	r3, #0
    952a:	f47e a8f7 	bne.w	771c <d_print_comp.part.10+0xe8>
    952e:	4620      	mov	r0, r4
    9530:	2120      	movs	r1, #32
    9532:	f7fc f985 	bl	5840 <d_append_char>
    9536:	f7ff b847 	b.w	85c8 <d_print_comp.part.10+0xf94>
    953a:	2200      	movs	r2, #0
    953c:	4619      	mov	r1, r3
    953e:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
    9542:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9546:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    954a:	4620      	mov	r0, r4
    954c:	4798      	blx	r3
    954e:	2329      	movs	r3, #41	; 0x29
    9550:	7023      	strb	r3, [r4, #0]
    9552:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9556:	782a      	ldrb	r2, [r5, #0]
    9558:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    955c:	2101      	movs	r1, #1
    955e:	3301      	adds	r3, #1
    9560:	2a3c      	cmp	r2, #60	; 0x3c
    9562:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9566:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    956a:	f47e aed5 	bne.w	8318 <d_print_comp.part.10+0xce4>
    956e:	232d      	movs	r3, #45	; 0x2d
    9570:	1c4a      	adds	r2, r1, #1
    9572:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9576:	5463      	strb	r3, [r4, r1]
    9578:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    957c:	f7fe becc 	b.w	8318 <d_print_comp.part.10+0xce4>
    9580:	f04f 0800 	mov.w	r8, #0
    9584:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9588:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    958c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9590:	4620      	mov	r0, r4
    9592:	4798      	blx	r3
    9594:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9598:	3301      	adds	r3, #1
    959a:	4641      	mov	r1, r8
    959c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    95a0:	2201      	movs	r2, #1
    95a2:	f7fe be9e 	b.w	82e2 <d_print_comp.part.10+0xcae>
    95a6:	4620      	mov	r0, r4
    95a8:	4631      	mov	r1, r6
    95aa:	462a      	mov	r2, r5
    95ac:	f000 fad8 	bl	9b60 <d_print_comp>
    95b0:	f7fe b8b4 	b.w	771c <d_print_comp.part.10+0xe8>
    95b4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    95b8:	f898 2000 	ldrb.w	r2, [r8]
    95bc:	2a00      	cmp	r2, #0
    95be:	f47e ae8a 	bne.w	82d6 <d_print_comp.part.10+0xca2>
    95c2:	2b3c      	cmp	r3, #60	; 0x3c
    95c4:	f000 8290 	beq.w	9ae8 <d_print_comp.part.10+0x24b4>
    95c8:	4631      	mov	r1, r6
    95ca:	4642      	mov	r2, r8
    95cc:	4620      	mov	r0, r4
    95ce:	3f02      	subs	r7, #2
    95d0:	f000 fac6 	bl	9b60 <d_print_comp>
    95d4:	2f04      	cmp	r7, #4
    95d6:	f63e a8a1 	bhi.w	771c <d_print_comp.part.10+0xe8>
    95da:	e8df f007 	tbb	[pc, r7]
    95de:	151b      	.short	0x151b
    95e0:	090f      	.short	0x090f
    95e2:	03          	.byte	0x03
    95e3:	00          	.byte	0x00
    95e4:	4620      	mov	r0, r4
    95e6:	495a      	ldr	r1, [pc, #360]	; (9750 <d_print_comp.part.10+0x211c>)
    95e8:	f7fd fff0 	bl	75cc <d_append_string>
    95ec:	f7fe b896 	b.w	771c <d_print_comp.part.10+0xe8>
    95f0:	4620      	mov	r0, r4
    95f2:	4958      	ldr	r1, [pc, #352]	; (9754 <d_print_comp.part.10+0x2120>)
    95f4:	f7fd ffea 	bl	75cc <d_append_string>
    95f8:	f7fe b890 	b.w	771c <d_print_comp.part.10+0xe8>
    95fc:	4620      	mov	r0, r4
    95fe:	4956      	ldr	r1, [pc, #344]	; (9758 <d_print_comp.part.10+0x2124>)
    9600:	f7fd ffe4 	bl	75cc <d_append_string>
    9604:	f7fe b88a 	b.w	771c <d_print_comp.part.10+0xe8>
    9608:	4620      	mov	r0, r4
    960a:	216c      	movs	r1, #108	; 0x6c
    960c:	f7fc f918 	bl	5840 <d_append_char>
    9610:	f7fe b884 	b.w	771c <d_print_comp.part.10+0xe8>
    9614:	4620      	mov	r0, r4
    9616:	2175      	movs	r1, #117	; 0x75
    9618:	f7fc f912 	bl	5840 <d_append_char>
    961c:	f7fe b87e 	b.w	771c <d_print_comp.part.10+0xe8>
    9620:	2600      	movs	r6, #0
    9622:	4619      	mov	r1, r3
    9624:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9628:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    962c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    9630:	4620      	mov	r0, r4
    9632:	4798      	blx	r3
    9634:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9638:	1c5a      	adds	r2, r3, #1
    963a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    963e:	4633      	mov	r3, r6
    9640:	2101      	movs	r1, #1
    9642:	f7fe befa 	b.w	843a <d_print_comp.part.10+0xe06>
    9646:	1d01      	adds	r1, r0, #4
    9648:	4620      	mov	r0, r4
    964a:	f7fc fa15 	bl	5a78 <d_lookup_template_argument.isra.6>
    964e:	b180      	cbz	r0, 9672 <d_print_comp.part.10+0x203e>
    9650:	7803      	ldrb	r3, [r0, #0]
    9652:	2b2f      	cmp	r3, #47	; 0x2f
    9654:	f47f a8ec 	bne.w	8830 <d_print_comp.part.10+0x11fc>
    9658:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    965c:	e005      	b.n	966a <d_print_comp.part.10+0x2036>
    965e:	6880      	ldr	r0, [r0, #8]
    9660:	3b01      	subs	r3, #1
    9662:	b130      	cbz	r0, 9672 <d_print_comp.part.10+0x203e>
    9664:	7802      	ldrb	r2, [r0, #0]
    9666:	2a2f      	cmp	r2, #47	; 0x2f
    9668:	d103      	bne.n	9672 <d_print_comp.part.10+0x203e>
    966a:	2b00      	cmp	r3, #0
    966c:	dcf7      	bgt.n	965e <d_print_comp.part.10+0x202a>
    966e:	f000 8251 	beq.w	9b14 <d_print_comp.part.10+0x24e0>
    9672:	2301      	movs	r3, #1
    9674:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    9678:	f7fe b850 	b.w	771c <d_print_comp.part.10+0xe8>
    967c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9680:	29ff      	cmp	r1, #255	; 0xff
    9682:	f000 81ba 	beq.w	99fa <d_print_comp.part.10+0x23c6>
    9686:	1c4b      	adds	r3, r1, #1
    9688:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    968c:	4620      	mov	r0, r4
    968e:	f804 9001 	strb.w	r9, [r4, r1]
    9692:	f855 2c0c 	ldr.w	r2, [r5, #-12]
    9696:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
    969a:	4641      	mov	r1, r8
    969c:	f000 fa6c 	bl	9b78 <d_print_mod>
    96a0:	f7fe bb75 	b.w	7d8e <d_print_comp.part.10+0x75a>
    96a4:	2301      	movs	r3, #1
    96a6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    96aa:	f7fe b837 	b.w	771c <d_print_comp.part.10+0xe8>
    96ae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    96b2:	29ff      	cmp	r1, #255	; 0xff
    96b4:	f000 81dc 	beq.w	9a70 <d_print_comp.part.10+0x243c>
    96b8:	2220      	movs	r2, #32
    96ba:	1c4b      	adds	r3, r1, #1
    96bc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    96c0:	5462      	strb	r2, [r4, r1]
    96c2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    96c6:	f7fe bce9 	b.w	809c <d_print_comp.part.10+0xa68>
    96ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    96ce:	29ff      	cmp	r1, #255	; 0xff
    96d0:	f000 81ea 	beq.w	9aa8 <d_print_comp.part.10+0x2474>
    96d4:	2220      	movs	r2, #32
    96d6:	1c4b      	adds	r3, r1, #1
    96d8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    96dc:	5462      	strb	r2, [r4, r1]
    96de:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    96e2:	f7fe bcc5 	b.w	8070 <d_print_comp.part.10+0xa3c>
    96e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    96ea:	29ff      	cmp	r1, #255	; 0xff
    96ec:	f000 81ec 	beq.w	9ac8 <d_print_comp.part.10+0x2494>
    96f0:	1c4a      	adds	r2, r1, #1
    96f2:	235b      	movs	r3, #91	; 0x5b
    96f4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    96f8:	5463      	strb	r3, [r4, r1]
    96fa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    96fe:	4631      	mov	r1, r6
    9700:	68aa      	ldr	r2, [r5, #8]
    9702:	4620      	mov	r0, r4
    9704:	f000 fa2c 	bl	9b60 <d_print_comp>
    9708:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    970c:	29ff      	cmp	r1, #255	; 0xff
    970e:	f000 819f 	beq.w	9a50 <d_print_comp.part.10+0x241c>
    9712:	235d      	movs	r3, #93	; 0x5d
    9714:	1c4a      	adds	r2, r1, #1
    9716:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    971a:	5463      	strb	r3, [r4, r1]
    971c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9720:	f7fd bffc 	b.w	771c <d_print_comp.part.10+0xe8>
    9724:	29ff      	cmp	r1, #255	; 0xff
    9726:	f47f af22 	bne.w	956e <d_print_comp.part.10+0x1f3a>
    972a:	f04f 0800 	mov.w	r8, #0
    972e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9732:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9736:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    973a:	4620      	mov	r0, r4
    973c:	4798      	blx	r3
    973e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9742:	3301      	adds	r3, #1
    9744:	4641      	mov	r1, r8
    9746:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    974a:	e710      	b.n	956e <d_print_comp.part.10+0x1f3a>
    974c:	00013937 	.word	0x00013937
    9750:	00013ae4 	.word	0x00013ae4
    9754:	00013ae0 	.word	0x00013ae0
    9758:	00013adc 	.word	0x00013adc
    975c:	7809      	ldrb	r1, [r1, #0]
    975e:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
    9762:	2801      	cmp	r0, #1
    9764:	d903      	bls.n	976e <d_print_comp.part.10+0x213a>
    9766:	3972      	subs	r1, #114	; 0x72
    9768:	2901      	cmp	r1, #1
    976a:	f63f ac15 	bhi.w	8f98 <d_print_comp.part.10+0x1964>
    976e:	4620      	mov	r0, r4
    9770:	4631      	mov	r1, r6
    9772:	f001 f857 	bl	a824 <d_print_expr_op>
    9776:	4620      	mov	r0, r4
    9778:	213c      	movs	r1, #60	; 0x3c
    977a:	f7fc f861 	bl	5840 <d_append_char>
    977e:	68ab      	ldr	r3, [r5, #8]
    9780:	4620      	mov	r0, r4
    9782:	685a      	ldr	r2, [r3, #4]
    9784:	4631      	mov	r1, r6
    9786:	f000 f9eb 	bl	9b60 <d_print_comp>
    978a:	4620      	mov	r0, r4
    978c:	49c0      	ldr	r1, [pc, #768]	; (9a90 <d_print_comp.part.10+0x245c>)
    978e:	f7fd ff1d 	bl	75cc <d_append_string>
    9792:	68ab      	ldr	r3, [r5, #8]
    9794:	4631      	mov	r1, r6
    9796:	4620      	mov	r0, r4
    9798:	689a      	ldr	r2, [r3, #8]
    979a:	f000 f9e1 	bl	9b60 <d_print_comp>
    979e:	4620      	mov	r0, r4
    97a0:	2129      	movs	r1, #41	; 0x29
    97a2:	f7fc f84d 	bl	5840 <d_append_char>
    97a6:	f7fd bfb9 	b.w	771c <d_print_comp.part.10+0xe8>
    97aa:	2700      	movs	r7, #0
    97ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    97b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    97b4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    97b8:	4620      	mov	r0, r4
    97ba:	4798      	blx	r3
    97bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    97c0:	3301      	adds	r3, #1
    97c2:	4639      	mov	r1, r7
    97c4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    97c8:	2201      	movs	r2, #1
    97ca:	f7ff b8e1 	b.w	8990 <d_print_comp.part.10+0x135c>
    97ce:	6878      	ldr	r0, [r7, #4]
    97d0:	49b0      	ldr	r1, [pc, #704]	; (9a94 <d_print_comp.part.10+0x2460>)
    97d2:	f005 fa6b 	bl	ecac <strncmp>
    97d6:	2800      	cmp	r0, #0
    97d8:	f47e ac3e 	bne.w	8058 <d_print_comp.part.10+0xa24>
    97dc:	4631      	mov	r1, r6
    97de:	4620      	mov	r0, r4
    97e0:	68aa      	ldr	r2, [r5, #8]
    97e2:	f000 f9bd 	bl	9b60 <d_print_comp>
    97e6:	4620      	mov	r0, r4
    97e8:	49ab      	ldr	r1, [pc, #684]	; (9a98 <d_print_comp.part.10+0x2464>)
    97ea:	f7fd feef 	bl	75cc <d_append_string>
    97ee:	f7fe bc5f 	b.w	80b0 <d_print_comp.part.10+0xa7c>
    97f2:	9b02      	ldr	r3, [sp, #8]
    97f4:	f7fe bed6 	b.w	85a4 <d_print_comp.part.10+0xf70>
    97f8:	2500      	movs	r5, #0
    97fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    97fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9802:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9806:	4620      	mov	r0, r4
    9808:	4798      	blx	r3
    980a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    980e:	3301      	adds	r3, #1
    9810:	4629      	mov	r1, r5
    9812:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9816:	2201      	movs	r2, #1
    9818:	f7ff bbaa 	b.w	8f70 <d_print_comp.part.10+0x193c>
    981c:	4620      	mov	r0, r4
    981e:	215b      	movs	r1, #91	; 0x5b
    9820:	f7fc f80e 	bl	5840 <d_append_char>
    9824:	68ab      	ldr	r3, [r5, #8]
    9826:	4631      	mov	r1, r6
    9828:	4620      	mov	r0, r4
    982a:	689a      	ldr	r2, [r3, #8]
    982c:	f000 f998 	bl	9b60 <d_print_comp>
    9830:	4620      	mov	r0, r4
    9832:	215d      	movs	r1, #93	; 0x5d
    9834:	f7fc f804 	bl	5840 <d_append_char>
    9838:	f7ff bbdb 	b.w	8ff2 <d_print_comp.part.10+0x19be>
    983c:	6899      	ldr	r1, [r3, #8]
    983e:	2901      	cmp	r1, #1
    9840:	f47f abae 	bne.w	8fa0 <d_print_comp.part.10+0x196c>
    9844:	685b      	ldr	r3, [r3, #4]
    9846:	781b      	ldrb	r3, [r3, #0]
    9848:	2b3e      	cmp	r3, #62	; 0x3e
    984a:	f47f aba9 	bne.w	8fa0 <d_print_comp.part.10+0x196c>
    984e:	4620      	mov	r0, r4
    9850:	2128      	movs	r1, #40	; 0x28
    9852:	f7fb fff5 	bl	5840 <d_append_char>
    9856:	686a      	ldr	r2, [r5, #4]
    9858:	f8d5 8008 	ldr.w	r8, [r5, #8]
    985c:	f7ff bba0 	b.w	8fa0 <d_print_comp.part.10+0x196c>
    9860:	4642      	mov	r2, r8
    9862:	4620      	mov	r0, r4
    9864:	4631      	mov	r1, r6
    9866:	f000 ffdd 	bl	a824 <d_print_expr_op>
    986a:	f7ff bbbc 	b.w	8fe6 <d_print_comp.part.10+0x19b2>
    986e:	6893      	ldr	r3, [r2, #8]
    9870:	781b      	ldrb	r3, [r3, #0]
    9872:	2b29      	cmp	r3, #41	; 0x29
    9874:	bf1c      	itt	ne
    9876:	2301      	movne	r3, #1
    9878:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
    987c:	6852      	ldr	r2, [r2, #4]
    987e:	4620      	mov	r0, r4
    9880:	4631      	mov	r1, r6
    9882:	f001 f809 	bl	a898 <d_print_subexpr>
    9886:	f7ff bb9b 	b.w	8fc0 <d_print_comp.part.10+0x198c>
    988a:	4642      	mov	r2, r8
    988c:	4620      	mov	r0, r4
    988e:	4631      	mov	r1, r6
    9890:	f001 f802 	bl	a898 <d_print_subexpr>
    9894:	4620      	mov	r0, r4
    9896:	4631      	mov	r1, r6
    9898:	4652      	mov	r2, sl
    989a:	f000 ffc3 	bl	a824 <d_print_expr_op>
    989e:	464a      	mov	r2, r9
    98a0:	4620      	mov	r0, r4
    98a2:	4631      	mov	r1, r6
    98a4:	f000 fff8 	bl	a898 <d_print_subexpr>
    98a8:	4620      	mov	r0, r4
    98aa:	497c      	ldr	r1, [pc, #496]	; (9a9c <d_print_comp.part.10+0x2468>)
    98ac:	f7fd fe8e 	bl	75cc <d_append_string>
    98b0:	4620      	mov	r0, r4
    98b2:	4631      	mov	r1, r6
    98b4:	462a      	mov	r2, r5
    98b6:	f000 ffef 	bl	a898 <d_print_subexpr>
    98ba:	f7fd bf2f 	b.w	771c <d_print_comp.part.10+0xe8>
    98be:	2700      	movs	r7, #0
    98c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    98c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    98c8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    98cc:	4620      	mov	r0, r4
    98ce:	4798      	blx	r3
    98d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    98d4:	3301      	adds	r3, #1
    98d6:	4639      	mov	r1, r7
    98d8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    98dc:	2201      	movs	r2, #1
    98de:	e462      	b.n	91a6 <d_print_comp.part.10+0x1b72>
    98e0:	f04f 0800 	mov.w	r8, #0
    98e4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    98e8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    98ec:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
    98f0:	4798      	blx	r3
    98f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    98f6:	3301      	adds	r3, #1
    98f8:	4641      	mov	r1, r8
    98fa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    98fe:	2201      	movs	r2, #1
    9900:	e440      	b.n	9184 <d_print_comp.part.10+0x1b50>
    9902:	2500      	movs	r5, #0
    9904:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9908:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    990c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9910:	4620      	mov	r0, r4
    9912:	4798      	blx	r3
    9914:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9918:	3301      	adds	r3, #1
    991a:	4629      	mov	r1, r5
    991c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9920:	2201      	movs	r2, #1
    9922:	f7ff bbce 	b.w	90c2 <d_print_comp.part.10+0x1a8e>
    9926:	686b      	ldr	r3, [r5, #4]
    9928:	781a      	ldrb	r2, [r3, #0]
    992a:	2a01      	cmp	r2, #1
    992c:	f47f abed 	bne.w	910a <d_print_comp.part.10+0x1ad6>
    9930:	68aa      	ldr	r2, [r5, #8]
    9932:	7812      	ldrb	r2, [r2, #0]
    9934:	2a29      	cmp	r2, #41	; 0x29
    9936:	bf08      	it	eq
    9938:	461d      	moveq	r5, r3
    993a:	f7ff bbe6 	b.w	910a <d_print_comp.part.10+0x1ad6>
    993e:	ab16      	add	r3, sp, #88	; 0x58
    9940:	9705      	str	r7, [sp, #20]
    9942:	f843 ad48 	str.w	sl, [r3, #-72]!
    9946:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    994a:	f7fe ba05 	b.w	7d58 <d_print_comp.part.10+0x724>
    994e:	4631      	mov	r1, r6
    9950:	4620      	mov	r0, r4
    9952:	686a      	ldr	r2, [r5, #4]
    9954:	f000 ffa0 	bl	a898 <d_print_subexpr>
    9958:	4620      	mov	r0, r4
    995a:	4951      	ldr	r1, [pc, #324]	; (9aa0 <d_print_comp.part.10+0x246c>)
    995c:	f7fd fe36 	bl	75cc <d_append_string>
    9960:	f7fd bedc 	b.w	771c <d_print_comp.part.10+0xe8>
    9964:	2500      	movs	r5, #0
    9966:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    996a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    996e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9972:	4620      	mov	r0, r4
    9974:	4798      	blx	r3
    9976:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    997a:	3301      	adds	r3, #1
    997c:	4629      	mov	r1, r5
    997e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9982:	f7ff bbf0 	b.w	9166 <d_print_comp.part.10+0x1b32>
    9986:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
    998a:	4619      	mov	r1, r3
    998c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9990:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9994:	4620      	mov	r0, r4
    9996:	4798      	blx	r3
    9998:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    999c:	1c5a      	adds	r2, r3, #1
    999e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    99a2:	463b      	mov	r3, r7
    99a4:	f7ff bbce 	b.w	9144 <d_print_comp.part.10+0x1b10>
    99a8:	1cf3      	adds	r3, r6, #3
    99aa:	429f      	cmp	r7, r3
    99ac:	f67f acac 	bls.w	9308 <d_print_comp.part.10+0x1cd4>
    99b0:	2100      	movs	r1, #0
    99b2:	e004      	b.n	99be <d_print_comp.part.10+0x238a>
    99b4:	4615      	mov	r5, r2
    99b6:	42bb      	cmp	r3, r7
    99b8:	eb05 1101 	add.w	r1, r5, r1, lsl #4
    99bc:	d015      	beq.n	99ea <d_print_comp.part.10+0x23b6>
    99be:	469c      	mov	ip, r3
    99c0:	f813 5b01 	ldrb.w	r5, [r3], #1
    99c4:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
    99c8:	b2d0      	uxtb	r0, r2
    99ca:	2809      	cmp	r0, #9
    99cc:	f1a5 0941 	sub.w	r9, r5, #65	; 0x41
    99d0:	d9f0      	bls.n	99b4 <d_print_comp.part.10+0x2380>
    99d2:	f1b9 0f05 	cmp.w	r9, #5
    99d6:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
    99da:	d801      	bhi.n	99e0 <d_print_comp.part.10+0x23ac>
    99dc:	3d37      	subs	r5, #55	; 0x37
    99de:	e7ea      	b.n	99b6 <d_print_comp.part.10+0x2382>
    99e0:	2a05      	cmp	r2, #5
    99e2:	f200 8087 	bhi.w	9af4 <d_print_comp.part.10+0x24c0>
    99e6:	3d57      	subs	r5, #87	; 0x57
    99e8:	e7e5      	b.n	99b6 <d_print_comp.part.10+0x2382>
    99ea:	255f      	movs	r5, #95	; 0x5f
    99ec:	e471      	b.n	92d2 <d_print_comp.part.10+0x1c9e>
    99ee:	464c      	mov	r4, r9
    99f0:	2301      	movs	r3, #1
    99f2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    99f6:	f7fd be91 	b.w	771c <d_print_comp.part.10+0xe8>
    99fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    99fe:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    9a02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9a06:	4620      	mov	r0, r4
    9a08:	4798      	blx	r3
    9a0a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9a0e:	3301      	adds	r3, #1
    9a10:	4631      	mov	r1, r6
    9a12:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9a16:	e636      	b.n	9686 <d_print_comp.part.10+0x2052>
    9a18:	686a      	ldr	r2, [r5, #4]
    9a1a:	4620      	mov	r0, r4
    9a1c:	4631      	mov	r1, r6
    9a1e:	f000 ff3b 	bl	a898 <d_print_subexpr>
    9a22:	4620      	mov	r0, r4
    9a24:	4631      	mov	r1, r6
    9a26:	463a      	mov	r2, r7
    9a28:	f000 fefc 	bl	a824 <d_print_expr_op>
    9a2c:	f7fd be76 	b.w	771c <d_print_comp.part.10+0xe8>
    9a30:	2b3b      	cmp	r3, #59	; 0x3b
    9a32:	f47e ac50 	bne.w	82d6 <d_print_comp.part.10+0xca2>
    9a36:	6853      	ldr	r3, [r2, #4]
    9a38:	781b      	ldrb	r3, [r3, #0]
    9a3a:	2b30      	cmp	r3, #48	; 0x30
    9a3c:	f000 8088 	beq.w	9b50 <d_print_comp.part.10+0x251c>
    9a40:	2b31      	cmp	r3, #49	; 0x31
    9a42:	f47e ac48 	bne.w	82d6 <d_print_comp.part.10+0xca2>
    9a46:	4917      	ldr	r1, [pc, #92]	; (9aa4 <d_print_comp.part.10+0x2470>)
    9a48:	f7fd fdc0 	bl	75cc <d_append_string>
    9a4c:	f7fd be66 	b.w	771c <d_print_comp.part.10+0xe8>
    9a50:	2500      	movs	r5, #0
    9a52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9a56:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9a5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9a5e:	4620      	mov	r0, r4
    9a60:	4798      	blx	r3
    9a62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9a66:	3301      	adds	r3, #1
    9a68:	4629      	mov	r1, r5
    9a6a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9a6e:	e650      	b.n	9712 <d_print_comp.part.10+0x20de>
    9a70:	2500      	movs	r5, #0
    9a72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9a76:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9a7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9a7e:	4620      	mov	r0, r4
    9a80:	4798      	blx	r3
    9a82:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9a86:	3301      	adds	r3, #1
    9a88:	4629      	mov	r1, r5
    9a8a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9a8e:	e613      	b.n	96b8 <d_print_comp.part.10+0x2084>
    9a90:	00013b94 	.word	0x00013b94
    9a94:	0001393c 	.word	0x0001393c
    9a98:	00013944 	.word	0x00013944
    9a9c:	00013ad0 	.word	0x00013ad0
    9aa0:	00013b14 	.word	0x00013b14
    9aa4:	00013af0 	.word	0x00013af0
    9aa8:	2700      	movs	r7, #0
    9aaa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9aae:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    9ab2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9ab6:	4620      	mov	r0, r4
    9ab8:	4798      	blx	r3
    9aba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9abe:	3301      	adds	r3, #1
    9ac0:	4639      	mov	r1, r7
    9ac2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9ac6:	e605      	b.n	96d4 <d_print_comp.part.10+0x20a0>
    9ac8:	2700      	movs	r7, #0
    9aca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9ace:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    9ad2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9ad6:	4620      	mov	r0, r4
    9ad8:	4798      	blx	r3
    9ada:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9ade:	3301      	adds	r3, #1
    9ae0:	4639      	mov	r1, r7
    9ae2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9ae6:	e603      	b.n	96f0 <d_print_comp.part.10+0x20bc>
    9ae8:	212d      	movs	r1, #45	; 0x2d
    9aea:	f7fb fea9 	bl	5840 <d_append_char>
    9aee:	f8d5 8008 	ldr.w	r8, [r5, #8]
    9af2:	e569      	b.n	95c8 <d_print_comp.part.10+0x1f94>
    9af4:	4567      	cmp	r7, ip
    9af6:	f67f af78 	bls.w	99ea <d_print_comp.part.10+0x23b6>
    9afa:	2d5f      	cmp	r5, #95	; 0x5f
    9afc:	f47f af75 	bne.w	99ea <d_print_comp.part.10+0x23b6>
    9b00:	29ff      	cmp	r1, #255	; 0xff
    9b02:	f63f abe6 	bhi.w	92d2 <d_print_comp.part.10+0x1c9e>
    9b06:	b2c9      	uxtb	r1, r1
    9b08:	4620      	mov	r0, r4
    9b0a:	4666      	mov	r6, ip
    9b0c:	f7fb fe98 	bl	5840 <d_append_char>
    9b10:	f7ff bbe9 	b.w	92e6 <d_print_comp.part.10+0x1cb2>
    9b14:	6840      	ldr	r0, [r0, #4]
    9b16:	2800      	cmp	r0, #0
    9b18:	f43f adab 	beq.w	9672 <d_print_comp.part.10+0x203e>
    9b1c:	7803      	ldrb	r3, [r0, #0]
    9b1e:	f7fe be87 	b.w	8830 <d_print_comp.part.10+0x11fc>
    9b22:	f47f aa8c 	bne.w	903e <d_print_comp.part.10+0x1a0a>
    9b26:	6840      	ldr	r0, [r0, #4]
    9b28:	2800      	cmp	r0, #0
    9b2a:	f47e aa79 	bne.w	8020 <d_print_comp.part.10+0x9ec>
    9b2e:	f7ff ba86 	b.w	903e <d_print_comp.part.10+0x1a0a>
    9b32:	4631      	mov	r1, r6
    9b34:	4620      	mov	r0, r4
    9b36:	68aa      	ldr	r2, [r5, #8]
    9b38:	f000 f812 	bl	9b60 <d_print_comp>
    9b3c:	9b08      	ldr	r3, [sp, #32]
    9b3e:	9902      	ldr	r1, [sp, #8]
    9b40:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    9b44:	2b00      	cmp	r3, #0
    9b46:	f47d ade9 	bne.w	771c <d_print_comp.part.10+0xe8>
    9b4a:	460b      	mov	r3, r1
    9b4c:	f7fe bd2a 	b.w	85a4 <d_print_comp.part.10+0xf70>
    9b50:	4902      	ldr	r1, [pc, #8]	; (9b5c <d_print_comp.part.10+0x2528>)
    9b52:	f7fd fd3b 	bl	75cc <d_append_string>
    9b56:	f7fd bde1 	b.w	771c <d_print_comp.part.10+0xe8>
    9b5a:	bf00      	nop
    9b5c:	00013ae8 	.word	0x00013ae8

00009b60 <d_print_comp>:
    9b60:	b12a      	cbz	r2, 9b6e <d_print_comp+0xe>
    9b62:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    9b66:	b90b      	cbnz	r3, 9b6c <d_print_comp+0xc>
    9b68:	f7fd bd64 	b.w	7634 <d_print_comp.part.10>
    9b6c:	4770      	bx	lr
    9b6e:	2201      	movs	r2, #1
    9b70:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    9b74:	4770      	bx	lr
    9b76:	bf00      	nop

00009b78 <d_print_mod>:
    9b78:	7813      	ldrb	r3, [r2, #0]
    9b7a:	3b03      	subs	r3, #3
    9b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b80:	4615      	mov	r5, r2
    9b82:	4604      	mov	r4, r0
    9b84:	4689      	mov	r9, r1
    9b86:	2b2a      	cmp	r3, #42	; 0x2a
    9b88:	f200 81d3 	bhi.w	9f32 <d_print_mod+0x3ba>
    9b8c:	e8df f013 	tbh	[pc, r3, lsl #1]
    9b90:	01d10052 	.word	0x01d10052
    9b94:	01d101d1 	.word	0x01d101d1
    9b98:	01d101d1 	.word	0x01d101d1
    9b9c:	01d101d1 	.word	0x01d101d1
    9ba0:	01d101d1 	.word	0x01d101d1
    9ba4:	01d101d1 	.word	0x01d101d1
    9ba8:	01d101d1 	.word	0x01d101d1
    9bac:	01d101d1 	.word	0x01d101d1
    9bb0:	01d101d1 	.word	0x01d101d1
    9bb4:	01d101d1 	.word	0x01d101d1
    9bb8:	01d101d1 	.word	0x01d101d1
    9bbc:	0083005d 	.word	0x0083005d
    9bc0:	005d00a9 	.word	0x005d00a9
    9bc4:	00a90083 	.word	0x00a90083
    9bc8:	00e600ce 	.word	0x00e600ce
    9bcc:	0132011d 	.word	0x0132011d
    9bd0:	01470144 	.word	0x01470144
    9bd4:	0170014a 	.word	0x0170014a
    9bd8:	01d101d1 	.word	0x01d101d1
    9bdc:	01d101d1 	.word	0x01d101d1
    9be0:	01d10195 	.word	0x01d10195
    9be4:	002b      	.short	0x002b
    9be6:	4ed9      	ldr	r6, [pc, #868]	; (9f4c <d_print_mod+0x3d4>)
    9be8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    9bec:	f106 0a0a 	add.w	sl, r6, #10
    9bf0:	f04f 0800 	mov.w	r8, #0
    9bf4:	e009      	b.n	9c0a <d_print_mod+0x92>
    9bf6:	461a      	mov	r2, r3
    9bf8:	3301      	adds	r3, #1
    9bfa:	4556      	cmp	r6, sl
    9bfc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    9c00:	54a7      	strb	r7, [r4, r2]
    9c02:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9c06:	f000 81b9 	beq.w	9f7c <d_print_mod+0x404>
    9c0a:	2bff      	cmp	r3, #255	; 0xff
    9c0c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    9c10:	d1f1      	bne.n	9bf6 <d_print_mod+0x7e>
    9c12:	4619      	mov	r1, r3
    9c14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9c18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9c1c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9c20:	4620      	mov	r0, r4
    9c22:	4798      	blx	r3
    9c24:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9c28:	3301      	adds	r3, #1
    9c2a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9c2e:	2200      	movs	r2, #0
    9c30:	2301      	movs	r3, #1
    9c32:	e7e2      	b.n	9bfa <d_print_mod+0x82>
    9c34:	686a      	ldr	r2, [r5, #4]
    9c36:	2a00      	cmp	r2, #0
    9c38:	f000 80d7 	beq.w	9dea <d_print_mod+0x272>
    9c3c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    9c40:	2b00      	cmp	r3, #0
    9c42:	f000 81ba 	beq.w	9fba <d_print_mod+0x442>
    9c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c4a:	4dc1      	ldr	r5, [pc, #772]	; (9f50 <d_print_mod+0x3d8>)
    9c4c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9c50:	f105 0709 	add.w	r7, r5, #9
    9c54:	f04f 0800 	mov.w	r8, #0
    9c58:	e009      	b.n	9c6e <d_print_mod+0xf6>
    9c5a:	460b      	mov	r3, r1
    9c5c:	3101      	adds	r1, #1
    9c5e:	42bd      	cmp	r5, r7
    9c60:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9c64:	54e6      	strb	r6, [r4, r3]
    9c66:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9c6a:	f000 8183 	beq.w	9f74 <d_print_mod+0x3fc>
    9c6e:	29ff      	cmp	r1, #255	; 0xff
    9c70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9c74:	d1f1      	bne.n	9c5a <d_print_mod+0xe2>
    9c76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9c7a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9c7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9c82:	4620      	mov	r0, r4
    9c84:	4798      	blx	r3
    9c86:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9c8a:	3301      	adds	r3, #1
    9c8c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9c90:	2101      	movs	r1, #1
    9c92:	2300      	movs	r3, #0
    9c94:	e7e3      	b.n	9c5e <d_print_mod+0xe6>
    9c96:	4daf      	ldr	r5, [pc, #700]	; (9f54 <d_print_mod+0x3dc>)
    9c98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9c9c:	f105 0709 	add.w	r7, r5, #9
    9ca0:	f04f 0800 	mov.w	r8, #0
    9ca4:	e009      	b.n	9cba <d_print_mod+0x142>
    9ca6:	460b      	mov	r3, r1
    9ca8:	3101      	adds	r1, #1
    9caa:	42bd      	cmp	r5, r7
    9cac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9cb0:	54e6      	strb	r6, [r4, r3]
    9cb2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9cb6:	f000 815f 	beq.w	9f78 <d_print_mod+0x400>
    9cba:	29ff      	cmp	r1, #255	; 0xff
    9cbc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9cc0:	d1f1      	bne.n	9ca6 <d_print_mod+0x12e>
    9cc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9cc6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9cca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9cce:	4620      	mov	r0, r4
    9cd0:	4798      	blx	r3
    9cd2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9cd6:	3301      	adds	r3, #1
    9cd8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9cdc:	2101      	movs	r1, #1
    9cde:	2300      	movs	r3, #0
    9ce0:	e7e3      	b.n	9caa <d_print_mod+0x132>
    9ce2:	4d9d      	ldr	r5, [pc, #628]	; (9f58 <d_print_mod+0x3e0>)
    9ce4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9ce8:	1daf      	adds	r7, r5, #6
    9cea:	f04f 0800 	mov.w	r8, #0
    9cee:	e009      	b.n	9d04 <d_print_mod+0x18c>
    9cf0:	460b      	mov	r3, r1
    9cf2:	3101      	adds	r1, #1
    9cf4:	42bd      	cmp	r5, r7
    9cf6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9cfa:	54e6      	strb	r6, [r4, r3]
    9cfc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9d00:	f000 8121 	beq.w	9f46 <d_print_mod+0x3ce>
    9d04:	29ff      	cmp	r1, #255	; 0xff
    9d06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9d0a:	d1f1      	bne.n	9cf0 <d_print_mod+0x178>
    9d0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9d10:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9d14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9d18:	4620      	mov	r0, r4
    9d1a:	4798      	blx	r3
    9d1c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9d20:	3301      	adds	r3, #1
    9d22:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9d26:	2101      	movs	r1, #1
    9d28:	2300      	movs	r3, #0
    9d2a:	e7e3      	b.n	9cf4 <d_print_mod+0x17c>
    9d2c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    9d30:	2bff      	cmp	r3, #255	; 0xff
    9d32:	f000 8159 	beq.w	9fe8 <d_print_mod+0x470>
    9d36:	1c59      	adds	r1, r3, #1
    9d38:	2220      	movs	r2, #32
    9d3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9d3e:	54e2      	strb	r2, [r4, r3]
    9d40:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    9d44:	29ff      	cmp	r1, #255	; 0xff
    9d46:	f000 813e 	beq.w	9fc6 <d_print_mod+0x44e>
    9d4a:	1c4a      	adds	r2, r1, #1
    9d4c:	2326      	movs	r3, #38	; 0x26
    9d4e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9d52:	5463      	strb	r3, [r4, r1]
    9d54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9d5c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    9d60:	2bff      	cmp	r3, #255	; 0xff
    9d62:	f000 8162 	beq.w	a02a <d_print_mod+0x4b2>
    9d66:	1c59      	adds	r1, r3, #1
    9d68:	2220      	movs	r2, #32
    9d6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9d6e:	54e2      	strb	r2, [r4, r3]
    9d70:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    9d74:	4d79      	ldr	r5, [pc, #484]	; (9f5c <d_print_mod+0x3e4>)
    9d76:	f04f 0800 	mov.w	r8, #0
    9d7a:	1caf      	adds	r7, r5, #2
    9d7c:	e009      	b.n	9d92 <d_print_mod+0x21a>
    9d7e:	460b      	mov	r3, r1
    9d80:	42bd      	cmp	r5, r7
    9d82:	f101 0101 	add.w	r1, r1, #1
    9d86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9d8a:	54e6      	strb	r6, [r4, r3]
    9d8c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9d90:	d019      	beq.n	9dc6 <d_print_mod+0x24e>
    9d92:	29ff      	cmp	r1, #255	; 0xff
    9d94:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9d98:	d1f1      	bne.n	9d7e <d_print_mod+0x206>
    9d9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9d9e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9da2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9da6:	4620      	mov	r0, r4
    9da8:	4798      	blx	r3
    9daa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9dae:	3301      	adds	r3, #1
    9db0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9db4:	2300      	movs	r3, #0
    9db6:	2101      	movs	r1, #1
    9db8:	42bd      	cmp	r5, r7
    9dba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9dbe:	54e6      	strb	r6, [r4, r3]
    9dc0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9dc4:	d1e5      	bne.n	9d92 <d_print_mod+0x21a>
    9dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9dca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9dce:	29ff      	cmp	r1, #255	; 0xff
    9dd0:	f000 811b 	beq.w	a00a <d_print_mod+0x492>
    9dd4:	1c4a      	adds	r2, r1, #1
    9dd6:	2320      	movs	r3, #32
    9dd8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9ddc:	5463      	strb	r3, [r4, r1]
    9dde:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9de2:	68aa      	ldr	r2, [r5, #8]
    9de4:	2a00      	cmp	r2, #0
    9de6:	f47f af29 	bne.w	9c3c <d_print_mod+0xc4>
    9dea:	2301      	movs	r3, #1
    9dec:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    9df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9df4:	f011 0904 	ands.w	r9, r1, #4
    9df8:	f47f af25 	bne.w	9c46 <d_print_mod+0xce>
    9dfc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9e00:	29ff      	cmp	r1, #255	; 0xff
    9e02:	f000 814d 	beq.w	a0a0 <d_print_mod+0x528>
    9e06:	1c4a      	adds	r2, r1, #1
    9e08:	232a      	movs	r3, #42	; 0x2a
    9e0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9e0e:	5463      	strb	r3, [r4, r1]
    9e10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e18:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9e1c:	e792      	b.n	9d44 <d_print_mod+0x1cc>
    9e1e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9e22:	e7a7      	b.n	9d74 <d_print_mod+0x1fc>
    9e24:	4d4e      	ldr	r5, [pc, #312]	; (9f60 <d_print_mod+0x3e8>)
    9e26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9e2a:	f105 0708 	add.w	r7, r5, #8
    9e2e:	f04f 0800 	mov.w	r8, #0
    9e32:	e009      	b.n	9e48 <d_print_mod+0x2d0>
    9e34:	460b      	mov	r3, r1
    9e36:	3101      	adds	r1, #1
    9e38:	42bd      	cmp	r5, r7
    9e3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9e3e:	54e6      	strb	r6, [r4, r3]
    9e40:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9e44:	f000 8094 	beq.w	9f70 <d_print_mod+0x3f8>
    9e48:	29ff      	cmp	r1, #255	; 0xff
    9e4a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9e4e:	d1f1      	bne.n	9e34 <d_print_mod+0x2bc>
    9e50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9e54:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9e58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9e5c:	4620      	mov	r0, r4
    9e5e:	4798      	blx	r3
    9e60:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9e64:	3301      	adds	r3, #1
    9e66:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9e6a:	2101      	movs	r1, #1
    9e6c:	2300      	movs	r3, #0
    9e6e:	e7e3      	b.n	9e38 <d_print_mod+0x2c0>
    9e70:	4d3c      	ldr	r5, [pc, #240]	; (9f64 <d_print_mod+0x3ec>)
    9e72:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9e76:	f105 070a 	add.w	r7, r5, #10
    9e7a:	f04f 0800 	mov.w	r8, #0
    9e7e:	e008      	b.n	9e92 <d_print_mod+0x31a>
    9e80:	460b      	mov	r3, r1
    9e82:	3101      	adds	r1, #1
    9e84:	42bd      	cmp	r5, r7
    9e86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9e8a:	54e6      	strb	r6, [r4, r3]
    9e8c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9e90:	d06c      	beq.n	9f6c <d_print_mod+0x3f4>
    9e92:	29ff      	cmp	r1, #255	; 0xff
    9e94:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9e98:	d1f2      	bne.n	9e80 <d_print_mod+0x308>
    9e9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9e9e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9ea6:	4620      	mov	r0, r4
    9ea8:	4798      	blx	r3
    9eaa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9eae:	3301      	adds	r3, #1
    9eb0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9eb4:	2101      	movs	r1, #1
    9eb6:	2300      	movs	r3, #0
    9eb8:	e7e4      	b.n	9e84 <d_print_mod+0x30c>
    9eba:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
    9ebe:	2b28      	cmp	r3, #40	; 0x28
    9ec0:	d00b      	beq.n	9eda <d_print_mod+0x362>
    9ec2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9ec6:	29ff      	cmp	r1, #255	; 0xff
    9ec8:	f000 80da 	beq.w	a080 <d_print_mod+0x508>
    9ecc:	1c4a      	adds	r2, r1, #1
    9ece:	2320      	movs	r3, #32
    9ed0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9ed4:	5463      	strb	r3, [r4, r1]
    9ed6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9eda:	686a      	ldr	r2, [r5, #4]
    9edc:	2a00      	cmp	r2, #0
    9ede:	f000 80c7 	beq.w	a070 <d_print_mod+0x4f8>
    9ee2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    9ee6:	2b00      	cmp	r3, #0
    9ee8:	d062      	beq.n	9fb0 <d_print_mod+0x438>
    9eea:	4d1f      	ldr	r5, [pc, #124]	; (9f68 <d_print_mod+0x3f0>)
    9eec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9ef0:	1cef      	adds	r7, r5, #3
    9ef2:	f04f 0800 	mov.w	r8, #0
    9ef6:	e008      	b.n	9f0a <d_print_mod+0x392>
    9ef8:	460b      	mov	r3, r1
    9efa:	3101      	adds	r1, #1
    9efc:	42bd      	cmp	r5, r7
    9efe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9f02:	54e6      	strb	r6, [r4, r3]
    9f04:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9f08:	d049      	beq.n	9f9e <d_print_mod+0x426>
    9f0a:	29ff      	cmp	r1, #255	; 0xff
    9f0c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9f10:	d1f2      	bne.n	9ef8 <d_print_mod+0x380>
    9f12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9f16:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9f1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9f1e:	4620      	mov	r0, r4
    9f20:	4798      	blx	r3
    9f22:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9f26:	3301      	adds	r3, #1
    9f28:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9f2c:	2101      	movs	r1, #1
    9f2e:	2300      	movs	r3, #0
    9f30:	e7e4      	b.n	9efc <d_print_mod+0x384>
    9f32:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    9f36:	2b00      	cmp	r3, #0
    9f38:	f47f ae85 	bne.w	9c46 <d_print_mod+0xce>
    9f3c:	462a      	mov	r2, r5
    9f3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9f42:	f7fd bb77 	b.w	7634 <d_print_comp.part.10>
    9f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f4a:	bf00      	nop
    9f4c:	00013bd7 	.word	0x00013bd7
    9f50:	00013b97 	.word	0x00013b97
    9f54:	00013ba3 	.word	0x00013ba3
    9f58:	00013baf 	.word	0x00013baf
    9f5c:	00013bb7 	.word	0x00013bb7
    9f60:	00013bbb 	.word	0x00013bbb
    9f64:	00013bc7 	.word	0x00013bc7
    9f68:	00013bd3 	.word	0x00013bd3
    9f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f7c:	686a      	ldr	r2, [r5, #4]
    9f7e:	2a00      	cmp	r2, #0
    9f80:	d07a      	beq.n	a078 <d_print_mod+0x500>
    9f82:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    9f86:	b161      	cbz	r1, 9fa2 <d_print_mod+0x42a>
    9f88:	2bff      	cmp	r3, #255	; 0xff
    9f8a:	d05f      	beq.n	a04c <d_print_mod+0x4d4>
    9f8c:	1c59      	adds	r1, r3, #1
    9f8e:	2229      	movs	r2, #41	; 0x29
    9f90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9f94:	54e2      	strb	r2, [r4, r3]
    9f96:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    9f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9fa2:	4649      	mov	r1, r9
    9fa4:	4620      	mov	r0, r4
    9fa6:	f7fd fb45 	bl	7634 <d_print_comp.part.10>
    9faa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9fae:	e7eb      	b.n	9f88 <d_print_mod+0x410>
    9fb0:	4649      	mov	r1, r9
    9fb2:	4620      	mov	r0, r4
    9fb4:	f7fd fb3e 	bl	7634 <d_print_comp.part.10>
    9fb8:	e797      	b.n	9eea <d_print_mod+0x372>
    9fba:	4620      	mov	r0, r4
    9fbc:	4649      	mov	r1, r9
    9fbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9fc2:	f7fd bb37 	b.w	7634 <d_print_comp.part.10>
    9fc6:	2500      	movs	r5, #0
    9fc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9fcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9fd0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9fd4:	4620      	mov	r0, r4
    9fd6:	4798      	blx	r3
    9fd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9fdc:	3301      	adds	r3, #1
    9fde:	4629      	mov	r1, r5
    9fe0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9fe4:	2201      	movs	r2, #1
    9fe6:	e6b1      	b.n	9d4c <d_print_mod+0x1d4>
    9fe8:	2500      	movs	r5, #0
    9fea:	4619      	mov	r1, r3
    9fec:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    9ff0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    9ff4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    9ff8:	4798      	blx	r3
    9ffa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9ffe:	1c5a      	adds	r2, r3, #1
    a000:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a004:	462b      	mov	r3, r5
    a006:	2101      	movs	r1, #1
    a008:	e696      	b.n	9d38 <d_print_mod+0x1c0>
    a00a:	2600      	movs	r6, #0
    a00c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a010:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    a014:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    a018:	4798      	blx	r3
    a01a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a01e:	3301      	adds	r3, #1
    a020:	4631      	mov	r1, r6
    a022:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a026:	2201      	movs	r2, #1
    a028:	e6d5      	b.n	9dd6 <d_print_mod+0x25e>
    a02a:	2500      	movs	r5, #0
    a02c:	4619      	mov	r1, r3
    a02e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    a032:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a036:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    a03a:	4798      	blx	r3
    a03c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a040:	1c5a      	adds	r2, r3, #1
    a042:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a046:	462b      	mov	r3, r5
    a048:	2101      	movs	r1, #1
    a04a:	e68d      	b.n	9d68 <d_print_mod+0x1f0>
    a04c:	2500      	movs	r5, #0
    a04e:	4619      	mov	r1, r3
    a050:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a054:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a058:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a05c:	4620      	mov	r0, r4
    a05e:	4798      	blx	r3
    a060:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a064:	1c5a      	adds	r2, r3, #1
    a066:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a06a:	462b      	mov	r3, r5
    a06c:	2101      	movs	r1, #1
    a06e:	e78e      	b.n	9f8e <d_print_mod+0x416>
    a070:	2301      	movs	r3, #1
    a072:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    a076:	e738      	b.n	9eea <d_print_mod+0x372>
    a078:	2201      	movs	r2, #1
    a07a:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    a07e:	e783      	b.n	9f88 <d_print_mod+0x410>
    a080:	2600      	movs	r6, #0
    a082:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a086:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    a08a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    a08e:	4798      	blx	r3
    a090:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a094:	3301      	adds	r3, #1
    a096:	4631      	mov	r1, r6
    a098:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a09c:	2201      	movs	r2, #1
    a09e:	e716      	b.n	9ece <d_print_mod+0x356>
    a0a0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a0a4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    a0a8:	f880 90ff 	strb.w	r9, [r0, #255]	; 0xff
    a0ac:	4798      	blx	r3
    a0ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a0b2:	3301      	adds	r3, #1
    a0b4:	4649      	mov	r1, r9
    a0b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a0ba:	2201      	movs	r2, #1
    a0bc:	e6a4      	b.n	9e08 <d_print_mod+0x290>
    a0be:	bf00      	nop

0000a0c0 <d_print_mod_list>:
    a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0c4:	4614      	mov	r4, r2
    a0c6:	b089      	sub	sp, #36	; 0x24
    a0c8:	4605      	mov	r5, r0
    a0ca:	460f      	mov	r7, r1
    a0cc:	461e      	mov	r6, r3
    a0ce:	b33a      	cbz	r2, a120 <d_print_mod_list+0x60>
    a0d0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    a0d4:	bb23      	cbnz	r3, a120 <d_print_mod_list+0x60>
    a0d6:	f04f 0801 	mov.w	r8, #1
    a0da:	e002      	b.n	a0e2 <d_print_mod_list+0x22>
    a0dc:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    a0e0:	b9f2      	cbnz	r2, a120 <d_print_mod_list+0x60>
    a0e2:	68a2      	ldr	r2, [r4, #8]
    a0e4:	b9ca      	cbnz	r2, a11a <d_print_mod_list+0x5a>
    a0e6:	6862      	ldr	r2, [r4, #4]
    a0e8:	7810      	ldrb	r0, [r2, #0]
    a0ea:	b91e      	cbnz	r6, a0f4 <d_print_mod_list+0x34>
    a0ec:	f1a0 031c 	sub.w	r3, r0, #28
    a0f0:	2b04      	cmp	r3, #4
    a0f2:	d912      	bls.n	a11a <d_print_mod_list+0x5a>
    a0f4:	68e3      	ldr	r3, [r4, #12]
    a0f6:	f8c4 8008 	str.w	r8, [r4, #8]
    a0fa:	2829      	cmp	r0, #41	; 0x29
    a0fc:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
    a100:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    a104:	d00f      	beq.n	a126 <d_print_mod_list+0x66>
    a106:	282a      	cmp	r0, #42	; 0x2a
    a108:	d018      	beq.n	a13c <d_print_mod_list+0x7c>
    a10a:	2802      	cmp	r0, #2
    a10c:	d021      	beq.n	a152 <d_print_mod_list+0x92>
    a10e:	4628      	mov	r0, r5
    a110:	4639      	mov	r1, r7
    a112:	f7ff fd31 	bl	9b78 <d_print_mod>
    a116:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    a11a:	6824      	ldr	r4, [r4, #0]
    a11c:	2c00      	cmp	r4, #0
    a11e:	d1dd      	bne.n	a0dc <d_print_mod_list+0x1c>
    a120:	b009      	add	sp, #36	; 0x24
    a122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a126:	4639      	mov	r1, r7
    a128:	3208      	adds	r2, #8
    a12a:	6823      	ldr	r3, [r4, #0]
    a12c:	4628      	mov	r0, r5
    a12e:	f000 f9c9 	bl	a4c4 <d_print_function_type.isra.11>
    a132:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    a136:	b009      	add	sp, #36	; 0x24
    a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a13c:	4639      	mov	r1, r7
    a13e:	3204      	adds	r2, #4
    a140:	6823      	ldr	r3, [r4, #0]
    a142:	4628      	mov	r0, r5
    a144:	f000 f8ee 	bl	a324 <d_print_array_type.isra.9>
    a148:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    a14c:	b009      	add	sp, #36	; 0x24
    a14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a152:	2600      	movs	r6, #0
    a154:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
    a158:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
    a15c:	6852      	ldr	r2, [r2, #4]
    a15e:	4628      	mov	r0, r5
    a160:	4639      	mov	r1, r7
    a162:	f7ff fcfd 	bl	9b60 <d_print_comp>
    a166:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
    a16a:	f017 0804 	ands.w	r8, r7, #4
    a16e:	d123      	bne.n	a1b8 <d_print_mod_list+0xf8>
    a170:	4e68      	ldr	r6, [pc, #416]	; (a314 <d_print_mod_list+0x254>)
    a172:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a176:	f106 0b02 	add.w	fp, r6, #2
    a17a:	e009      	b.n	a190 <d_print_mod_list+0xd0>
    a17c:	460b      	mov	r3, r1
    a17e:	3101      	adds	r1, #1
    a180:	455e      	cmp	r6, fp
    a182:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a186:	f805 a003 	strb.w	sl, [r5, r3]
    a18a:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
    a18e:	d01e      	beq.n	a1ce <d_print_mod_list+0x10e>
    a190:	29ff      	cmp	r1, #255	; 0xff
    a192:	f816 af01 	ldrb.w	sl, [r6, #1]!
    a196:	d1f1      	bne.n	a17c <d_print_mod_list+0xbc>
    a198:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a19c:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
    a1a0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a1a4:	4628      	mov	r0, r5
    a1a6:	4798      	blx	r3
    a1a8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a1ac:	3301      	adds	r3, #1
    a1ae:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a1b2:	2101      	movs	r1, #1
    a1b4:	2300      	movs	r3, #0
    a1b6:	e7e3      	b.n	a180 <d_print_mod_list+0xc0>
    a1b8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a1bc:	29ff      	cmp	r1, #255	; 0xff
    a1be:	d01b      	beq.n	a1f8 <d_print_mod_list+0x138>
    a1c0:	1c4a      	adds	r2, r1, #1
    a1c2:	232e      	movs	r3, #46	; 0x2e
    a1c4:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
    a1c8:	546b      	strb	r3, [r5, r1]
    a1ca:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    a1ce:	6863      	ldr	r3, [r4, #4]
    a1d0:	689c      	ldr	r4, [r3, #8]
    a1d2:	7823      	ldrb	r3, [r4, #0]
    a1d4:	2b45      	cmp	r3, #69	; 0x45
    a1d6:	d102      	bne.n	a1de <d_print_mod_list+0x11e>
    a1d8:	e01e      	b.n	a218 <d_print_mod_list+0x158>
    a1da:	6864      	ldr	r4, [r4, #4]
    a1dc:	7823      	ldrb	r3, [r4, #0]
    a1de:	3b1c      	subs	r3, #28
    a1e0:	2b04      	cmp	r3, #4
    a1e2:	d9fa      	bls.n	a1da <d_print_mod_list+0x11a>
    a1e4:	4639      	mov	r1, r7
    a1e6:	4622      	mov	r2, r4
    a1e8:	4628      	mov	r0, r5
    a1ea:	f7ff fcb9 	bl	9b60 <d_print_comp>
    a1ee:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    a1f2:	b009      	add	sp, #36	; 0x24
    a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1f8:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a1fc:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a200:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
    a204:	4628      	mov	r0, r5
    a206:	4798      	blx	r3
    a208:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a20c:	3301      	adds	r3, #1
    a20e:	4631      	mov	r1, r6
    a210:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a214:	2201      	movs	r2, #1
    a216:	e7d4      	b.n	a1c2 <d_print_mod_list+0x102>
    a218:	4e3f      	ldr	r6, [pc, #252]	; (a318 <d_print_mod_list+0x258>)
    a21a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a21e:	f106 0a0d 	add.w	sl, r6, #13
    a222:	f04f 0b00 	mov.w	fp, #0
    a226:	e009      	b.n	a23c <d_print_mod_list+0x17c>
    a228:	460b      	mov	r3, r1
    a22a:	3101      	adds	r1, #1
    a22c:	4556      	cmp	r6, sl
    a22e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a232:	f805 8003 	strb.w	r8, [r5, r3]
    a236:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
    a23a:	d013      	beq.n	a264 <d_print_mod_list+0x1a4>
    a23c:	29ff      	cmp	r1, #255	; 0xff
    a23e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    a242:	d1f1      	bne.n	a228 <d_print_mod_list+0x168>
    a244:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a248:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
    a24c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a250:	4628      	mov	r0, r5
    a252:	4798      	blx	r3
    a254:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a258:	3301      	adds	r3, #1
    a25a:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a25e:	2101      	movs	r1, #1
    a260:	2300      	movs	r3, #0
    a262:	e7e3      	b.n	a22c <d_print_mod_list+0x16c>
    a264:	68a2      	ldr	r2, [r4, #8]
    a266:	492d      	ldr	r1, [pc, #180]	; (a31c <d_print_mod_list+0x25c>)
    a268:	3201      	adds	r2, #1
    a26a:	a801      	add	r0, sp, #4
    a26c:	f004 fbea 	bl	ea44 <sprintf>
    a270:	a801      	add	r0, sp, #4
    a272:	f7f8 fab1 	bl	27d8 <strlen>
    a276:	b330      	cbz	r0, a2c6 <d_print_mod_list+0x206>
    a278:	f10d 0603 	add.w	r6, sp, #3
    a27c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a280:	eb06 0a00 	add.w	sl, r6, r0
    a284:	f04f 0b00 	mov.w	fp, #0
    a288:	e009      	b.n	a29e <d_print_mod_list+0x1de>
    a28a:	460b      	mov	r3, r1
    a28c:	3101      	adds	r1, #1
    a28e:	4556      	cmp	r6, sl
    a290:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a294:	f805 8003 	strb.w	r8, [r5, r3]
    a298:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
    a29c:	d015      	beq.n	a2ca <d_print_mod_list+0x20a>
    a29e:	29ff      	cmp	r1, #255	; 0xff
    a2a0:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    a2a4:	d1f1      	bne.n	a28a <d_print_mod_list+0x1ca>
    a2a6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a2aa:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
    a2ae:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a2b2:	4628      	mov	r0, r5
    a2b4:	4798      	blx	r3
    a2b6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a2ba:	3301      	adds	r3, #1
    a2bc:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a2c0:	2101      	movs	r1, #1
    a2c2:	2300      	movs	r3, #0
    a2c4:	e7e3      	b.n	a28e <d_print_mod_list+0x1ce>
    a2c6:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a2ca:	4e15      	ldr	r6, [pc, #84]	; (a320 <d_print_mod_list+0x260>)
    a2cc:	f04f 0b00 	mov.w	fp, #0
    a2d0:	f106 0a03 	add.w	sl, r6, #3
    a2d4:	e00a      	b.n	a2ec <d_print_mod_list+0x22c>
    a2d6:	460b      	mov	r3, r1
    a2d8:	3101      	adds	r1, #1
    a2da:	4556      	cmp	r6, sl
    a2dc:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a2e0:	f805 8003 	strb.w	r8, [r5, r3]
    a2e4:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
    a2e8:	f43f af77 	beq.w	a1da <d_print_mod_list+0x11a>
    a2ec:	29ff      	cmp	r1, #255	; 0xff
    a2ee:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    a2f2:	d1f0      	bne.n	a2d6 <d_print_mod_list+0x216>
    a2f4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a2f8:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
    a2fc:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a300:	4628      	mov	r0, r5
    a302:	4798      	blx	r3
    a304:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a308:	3301      	adds	r3, #1
    a30a:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a30e:	2101      	movs	r1, #1
    a310:	2300      	movs	r3, #0
    a312:	e7e2      	b.n	a2da <d_print_mod_list+0x21a>
    a314:	0001391f 	.word	0x0001391f
    a318:	00013923 	.word	0x00013923
    a31c:	00013934 	.word	0x00013934
    a320:	00013937 	.word	0x00013937

0000a324 <d_print_array_type.isra.9>:
    a324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a328:	4699      	mov	r9, r3
    a32a:	4605      	mov	r5, r0
    a32c:	460f      	mov	r7, r1
    a32e:	4690      	mov	r8, r2
    a330:	b14b      	cbz	r3, a346 <d_print_array_type.isra.9+0x22>
    a332:	6898      	ldr	r0, [r3, #8]
    a334:	b380      	cbz	r0, a398 <d_print_array_type.isra.9+0x74>
    a336:	681b      	ldr	r3, [r3, #0]
    a338:	2b00      	cmp	r3, #0
    a33a:	d1fa      	bne.n	a332 <d_print_array_type.isra.9+0xe>
    a33c:	464a      	mov	r2, r9
    a33e:	4628      	mov	r0, r5
    a340:	4639      	mov	r1, r7
    a342:	f7ff febd 	bl	a0c0 <d_print_mod_list>
    a346:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    a34a:	2bff      	cmp	r3, #255	; 0xff
    a34c:	d069      	beq.n	a422 <d_print_array_type.isra.9+0xfe>
    a34e:	1c59      	adds	r1, r3, #1
    a350:	2220      	movs	r2, #32
    a352:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a356:	54ea      	strb	r2, [r5, r3]
    a358:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    a35c:	29ff      	cmp	r1, #255	; 0xff
    a35e:	f000 8095 	beq.w	a48c <d_print_array_type.isra.9+0x168>
    a362:	1c4b      	adds	r3, r1, #1
    a364:	225b      	movs	r2, #91	; 0x5b
    a366:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    a36a:	546a      	strb	r2, [r5, r1]
    a36c:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    a370:	f8d8 2000 	ldr.w	r2, [r8]
    a374:	b12a      	cbz	r2, a382 <d_print_array_type.isra.9+0x5e>
    a376:	4639      	mov	r1, r7
    a378:	4628      	mov	r0, r5
    a37a:	f7ff fbf1 	bl	9b60 <d_print_comp>
    a37e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    a382:	2bff      	cmp	r3, #255	; 0xff
    a384:	d070      	beq.n	a468 <d_print_array_type.isra.9+0x144>
    a386:	1c59      	adds	r1, r3, #1
    a388:	225d      	movs	r2, #93	; 0x5d
    a38a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a38e:	54ea      	strb	r2, [r5, r3]
    a390:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    a394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a398:	685b      	ldr	r3, [r3, #4]
    a39a:	781b      	ldrb	r3, [r3, #0]
    a39c:	2b2a      	cmp	r3, #42	; 0x2a
    a39e:	f000 8086 	beq.w	a4ae <d_print_array_type.isra.9+0x18a>
    a3a2:	4e47      	ldr	r6, [pc, #284]	; (a4c0 <d_print_array_type.isra.9+0x19c>)
    a3a4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a3a8:	f106 0a02 	add.w	sl, r6, #2
    a3ac:	e00a      	b.n	a3c4 <d_print_array_type.isra.9+0xa0>
    a3ae:	460a      	mov	r2, r1
    a3b0:	4556      	cmp	r6, sl
    a3b2:	f101 0101 	add.w	r1, r1, #1
    a3b6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a3ba:	f805 b002 	strb.w	fp, [r5, r2]
    a3be:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
    a3c2:	d01c      	beq.n	a3fe <d_print_array_type.isra.9+0xda>
    a3c4:	29ff      	cmp	r1, #255	; 0xff
    a3c6:	f816 bf01 	ldrb.w	fp, [r6, #1]!
    a3ca:	d1f0      	bne.n	a3ae <d_print_array_type.isra.9+0x8a>
    a3cc:	f04f 0300 	mov.w	r3, #0
    a3d0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a3d4:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
    a3d8:	f8d5 4108 	ldr.w	r4, [r5, #264]	; 0x108
    a3dc:	4628      	mov	r0, r5
    a3de:	47a0      	blx	r4
    a3e0:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
    a3e4:	3201      	adds	r2, #1
    a3e6:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    a3ea:	2200      	movs	r2, #0
    a3ec:	2101      	movs	r1, #1
    a3ee:	4556      	cmp	r6, sl
    a3f0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a3f4:	f805 b002 	strb.w	fp, [r5, r2]
    a3f8:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
    a3fc:	d1e2      	bne.n	a3c4 <d_print_array_type.isra.9+0xa0>
    a3fe:	4639      	mov	r1, r7
    a400:	464a      	mov	r2, r9
    a402:	4628      	mov	r0, r5
    a404:	2300      	movs	r3, #0
    a406:	f7ff fe5b 	bl	a0c0 <d_print_mod_list>
    a40a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a40e:	29ff      	cmp	r1, #255	; 0xff
    a410:	d019      	beq.n	a446 <d_print_array_type.isra.9+0x122>
    a412:	1c4b      	adds	r3, r1, #1
    a414:	2229      	movs	r2, #41	; 0x29
    a416:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    a41a:	546a      	strb	r2, [r5, r1]
    a41c:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    a420:	e793      	b.n	a34a <d_print_array_type.isra.9+0x26>
    a422:	2400      	movs	r4, #0
    a424:	4619      	mov	r1, r3
    a426:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a42a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a42e:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    a432:	4628      	mov	r0, r5
    a434:	4798      	blx	r3
    a436:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a43a:	1c5a      	adds	r2, r3, #1
    a43c:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    a440:	4623      	mov	r3, r4
    a442:	2101      	movs	r1, #1
    a444:	e784      	b.n	a350 <d_print_array_type.isra.9+0x2c>
    a446:	2400      	movs	r4, #0
    a448:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a44c:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    a450:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a454:	4628      	mov	r0, r5
    a456:	4798      	blx	r3
    a458:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a45c:	3301      	adds	r3, #1
    a45e:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a462:	4621      	mov	r1, r4
    a464:	2301      	movs	r3, #1
    a466:	e7d5      	b.n	a414 <d_print_array_type.isra.9+0xf0>
    a468:	2400      	movs	r4, #0
    a46a:	4619      	mov	r1, r3
    a46c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a470:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a474:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    a478:	4628      	mov	r0, r5
    a47a:	4798      	blx	r3
    a47c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a480:	1c5a      	adds	r2, r3, #1
    a482:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    a486:	4623      	mov	r3, r4
    a488:	2101      	movs	r1, #1
    a48a:	e77d      	b.n	a388 <d_print_array_type.isra.9+0x64>
    a48c:	2400      	movs	r4, #0
    a48e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a492:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    a496:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a49a:	4628      	mov	r0, r5
    a49c:	4798      	blx	r3
    a49e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a4a2:	3301      	adds	r3, #1
    a4a4:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a4a8:	4621      	mov	r1, r4
    a4aa:	2301      	movs	r3, #1
    a4ac:	e75a      	b.n	a364 <d_print_array_type.isra.9+0x40>
    a4ae:	4603      	mov	r3, r0
    a4b0:	4639      	mov	r1, r7
    a4b2:	464a      	mov	r2, r9
    a4b4:	4628      	mov	r0, r5
    a4b6:	f7ff fe03 	bl	a0c0 <d_print_mod_list>
    a4ba:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a4be:	e74d      	b.n	a35c <d_print_array_type.isra.9+0x38>
    a4c0:	00013b0f 	.word	0x00013b0f

0000a4c4 <d_print_function_type.isra.11>:
    a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a4c8:	469a      	mov	sl, r3
    a4ca:	4607      	mov	r7, r0
    a4cc:	4688      	mov	r8, r1
    a4ce:	4691      	mov	r9, r2
    a4d0:	2b00      	cmp	r3, #0
    a4d2:	d03b      	beq.n	a54c <d_print_function_type.isra.11+0x88>
    a4d4:	689b      	ldr	r3, [r3, #8]
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d138      	bne.n	a54c <d_print_function_type.isra.11+0x88>
    a4da:	4654      	mov	r4, sl
    a4dc:	2201      	movs	r2, #1
    a4de:	e006      	b.n	a4ee <d_print_function_type.isra.11+0x2a>
    a4e0:	f416 6f60 	tst.w	r6, #3584	; 0xe00
    a4e4:	d17a      	bne.n	a5dc <d_print_function_type.isra.11+0x118>
    a4e6:	6824      	ldr	r4, [r4, #0]
    a4e8:	b384      	cbz	r4, a54c <d_print_function_type.isra.11+0x88>
    a4ea:	68a3      	ldr	r3, [r4, #8]
    a4ec:	bb73      	cbnz	r3, a54c <d_print_function_type.isra.11+0x88>
    a4ee:	6860      	ldr	r0, [r4, #4]
    a4f0:	4d69      	ldr	r5, [pc, #420]	; (a698 <d_print_function_type.isra.11+0x1d4>)
    a4f2:	7806      	ldrb	r6, [r0, #0]
    a4f4:	3e19      	subs	r6, #25
    a4f6:	b2f6      	uxtb	r6, r6
    a4f8:	2e12      	cmp	r6, #18
    a4fa:	d8f4      	bhi.n	a4e6 <d_print_function_type.isra.11+0x22>
    a4fc:	fa02 f606 	lsl.w	r6, r2, r6
    a500:	4035      	ands	r5, r6
    a502:	2d00      	cmp	r5, #0
    a504:	d0ec      	beq.n	a4e0 <d_print_function_type.isra.11+0x1c>
    a506:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
    a50a:	2b20      	cmp	r3, #32
    a50c:	d06c      	beq.n	a5e8 <d_print_function_type.isra.11+0x124>
    a50e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    a512:	2bff      	cmp	r3, #255	; 0xff
    a514:	f000 80ad 	beq.w	a672 <d_print_function_type.isra.11+0x1ae>
    a518:	1c59      	adds	r1, r3, #1
    a51a:	2220      	movs	r2, #32
    a51c:	29ff      	cmp	r1, #255	; 0xff
    a51e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
    a522:	54fa      	strb	r2, [r7, r3]
    a524:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
    a528:	d162      	bne.n	a5f0 <d_print_function_type.isra.11+0x12c>
    a52a:	2400      	movs	r4, #0
    a52c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a530:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a534:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a538:	4638      	mov	r0, r7
    a53a:	4798      	blx	r3
    a53c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a540:	3301      	adds	r3, #1
    a542:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    a546:	4621      	mov	r1, r4
    a548:	2301      	movs	r3, #1
    a54a:	e052      	b.n	a5f2 <d_print_function_type.isra.11+0x12e>
    a54c:	2300      	movs	r3, #0
    a54e:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
    a552:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    a556:	4641      	mov	r1, r8
    a558:	4638      	mov	r0, r7
    a55a:	4652      	mov	r2, sl
    a55c:	f7ff fdb0 	bl	a0c0 <d_print_mod_list>
    a560:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
    a564:	29ff      	cmp	r1, #255	; 0xff
    a566:	d062      	beq.n	a62e <d_print_function_type.isra.11+0x16a>
    a568:	1c4b      	adds	r3, r1, #1
    a56a:	2228      	movs	r2, #40	; 0x28
    a56c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    a570:	547a      	strb	r2, [r7, r1]
    a572:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
    a576:	f8d9 2000 	ldr.w	r2, [r9]
    a57a:	b112      	cbz	r2, a582 <d_print_function_type.isra.11+0xbe>
    a57c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
    a580:	b191      	cbz	r1, a5a8 <d_print_function_type.isra.11+0xe4>
    a582:	2bff      	cmp	r3, #255	; 0xff
    a584:	d018      	beq.n	a5b8 <d_print_function_type.isra.11+0xf4>
    a586:	1c5a      	adds	r2, r3, #1
    a588:	2429      	movs	r4, #41	; 0x29
    a58a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
    a58e:	4641      	mov	r1, r8
    a590:	54fc      	strb	r4, [r7, r3]
    a592:	4652      	mov	r2, sl
    a594:	4638      	mov	r0, r7
    a596:	f887 4104 	strb.w	r4, [r7, #260]	; 0x104
    a59a:	2301      	movs	r3, #1
    a59c:	f7ff fd90 	bl	a0c0 <d_print_mod_list>
    a5a0:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
    a5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a5a8:	4638      	mov	r0, r7
    a5aa:	4641      	mov	r1, r8
    a5ac:	f7fd f842 	bl	7634 <d_print_comp.part.10>
    a5b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    a5b4:	2bff      	cmp	r3, #255	; 0xff
    a5b6:	d1e6      	bne.n	a586 <d_print_function_type.isra.11+0xc2>
    a5b8:	2400      	movs	r4, #0
    a5ba:	4619      	mov	r1, r3
    a5bc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a5c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a5c4:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a5c8:	4638      	mov	r0, r7
    a5ca:	4798      	blx	r3
    a5cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a5d0:	1c5a      	adds	r2, r3, #1
    a5d2:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    a5d6:	4623      	mov	r3, r4
    a5d8:	2201      	movs	r2, #1
    a5da:	e7d5      	b.n	a588 <d_print_function_type.isra.11+0xc4>
    a5dc:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
    a5e0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    a5e4:	2a28      	cmp	r2, #40	; 0x28
    a5e6:	d190      	bne.n	a50a <d_print_function_type.isra.11+0x46>
    a5e8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
    a5ec:	29ff      	cmp	r1, #255	; 0xff
    a5ee:	d09c      	beq.n	a52a <d_print_function_type.isra.11+0x66>
    a5f0:	1c4b      	adds	r3, r1, #1
    a5f2:	2228      	movs	r2, #40	; 0x28
    a5f4:	2400      	movs	r4, #0
    a5f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    a5fa:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
    a5fe:	547a      	strb	r2, [r7, r1]
    a600:	4623      	mov	r3, r4
    a602:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
    a606:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
    a60a:	4652      	mov	r2, sl
    a60c:	4638      	mov	r0, r7
    a60e:	4641      	mov	r1, r8
    a610:	f7ff fd56 	bl	a0c0 <d_print_mod_list>
    a614:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
    a618:	2aff      	cmp	r2, #255	; 0xff
    a61a:	d019      	beq.n	a650 <d_print_function_type.isra.11+0x18c>
    a61c:	1c51      	adds	r1, r2, #1
    a61e:	2329      	movs	r3, #41	; 0x29
    a620:	29ff      	cmp	r1, #255	; 0xff
    a622:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
    a626:	54bb      	strb	r3, [r7, r2]
    a628:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    a62c:	d19c      	bne.n	a568 <d_print_function_type.isra.11+0xa4>
    a62e:	2400      	movs	r4, #0
    a630:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a634:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a638:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a63c:	4638      	mov	r0, r7
    a63e:	4798      	blx	r3
    a640:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a644:	3301      	adds	r3, #1
    a646:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    a64a:	4621      	mov	r1, r4
    a64c:	2301      	movs	r3, #1
    a64e:	e78c      	b.n	a56a <d_print_function_type.isra.11+0xa6>
    a650:	4611      	mov	r1, r2
    a652:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a656:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a65a:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a65e:	4638      	mov	r0, r7
    a660:	4798      	blx	r3
    a662:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a666:	3301      	adds	r3, #1
    a668:	4622      	mov	r2, r4
    a66a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    a66e:	2101      	movs	r1, #1
    a670:	e7d5      	b.n	a61e <d_print_function_type.isra.11+0x15a>
    a672:	2400      	movs	r4, #0
    a674:	4619      	mov	r1, r3
    a676:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a67a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a67e:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a682:	4638      	mov	r0, r7
    a684:	4798      	blx	r3
    a686:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a68a:	1c5a      	adds	r2, r3, #1
    a68c:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    a690:	4623      	mov	r3, r4
    a692:	2101      	movs	r1, #1
    a694:	e741      	b.n	a51a <d_print_function_type.isra.11+0x56>
    a696:	bf00      	nop
    a698:	00043107 	.word	0x00043107

0000a69c <d_print_cast.isra.12>:
    a69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6a0:	4615      	mov	r5, r2
    a6a2:	6812      	ldr	r2, [r2, #0]
    a6a4:	7813      	ldrb	r3, [r2, #0]
    a6a6:	2b04      	cmp	r3, #4
    a6a8:	b082      	sub	sp, #8
    a6aa:	4604      	mov	r4, r0
    a6ac:	460e      	mov	r6, r1
    a6ae:	d006      	beq.n	a6be <d_print_cast.isra.12+0x22>
    a6b0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    a6b4:	2b00      	cmp	r3, #0
    a6b6:	d03d      	beq.n	a734 <d_print_cast.isra.12+0x98>
    a6b8:	b002      	add	sp, #8
    a6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6be:	ab02      	add	r3, sp, #8
    a6c0:	f8d0 7110 	ldr.w	r7, [r0, #272]	; 0x110
    a6c4:	f843 7d08 	str.w	r7, [r3, #-8]!
    a6c8:	2200      	movs	r2, #0
    a6ca:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    a6ce:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
    a6d2:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    a6d6:	682b      	ldr	r3, [r5, #0]
    a6d8:	9301      	str	r3, [sp, #4]
    a6da:	685a      	ldr	r2, [r3, #4]
    a6dc:	2a00      	cmp	r2, #0
    a6de:	d06f      	beq.n	a7c0 <d_print_cast.isra.12+0x124>
    a6e0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    a6e4:	2b00      	cmp	r3, #0
    a6e6:	d03f      	beq.n	a768 <d_print_cast.isra.12+0xcc>
    a6e8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    a6ec:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    a6f0:	2b3c      	cmp	r3, #60	; 0x3c
    a6f2:	d069      	beq.n	a7c8 <d_print_cast.isra.12+0x12c>
    a6f4:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    a6f8:	2aff      	cmp	r2, #255	; 0xff
    a6fa:	d04b      	beq.n	a794 <d_print_cast.isra.12+0xf8>
    a6fc:	1c53      	adds	r3, r2, #1
    a6fe:	213c      	movs	r1, #60	; 0x3c
    a700:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    a704:	54a1      	strb	r1, [r4, r2]
    a706:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
    a70a:	682a      	ldr	r2, [r5, #0]
    a70c:	6892      	ldr	r2, [r2, #8]
    a70e:	2a00      	cmp	r2, #0
    a710:	d052      	beq.n	a7b8 <d_print_cast.isra.12+0x11c>
    a712:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    a716:	b195      	cbz	r5, a73e <d_print_cast.isra.12+0xa2>
    a718:	2bff      	cmp	r3, #255	; 0xff
    a71a:	d029      	beq.n	a770 <d_print_cast.isra.12+0xd4>
    a71c:	1c59      	adds	r1, r3, #1
    a71e:	223e      	movs	r2, #62	; 0x3e
    a720:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a724:	54e2      	strb	r2, [r4, r3]
    a726:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    a72a:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
    a72e:	b002      	add	sp, #8
    a730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a734:	f7fc ff7e 	bl	7634 <d_print_comp.part.10>
    a738:	b002      	add	sp, #8
    a73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a73e:	4631      	mov	r1, r6
    a740:	4620      	mov	r0, r4
    a742:	f7fc ff77 	bl	7634 <d_print_comp.part.10>
    a746:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    a74a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    a74e:	2a3e      	cmp	r2, #62	; 0x3e
    a750:	d1e2      	bne.n	a718 <d_print_cast.isra.12+0x7c>
    a752:	2bff      	cmp	r3, #255	; 0xff
    a754:	d044      	beq.n	a7e0 <d_print_cast.isra.12+0x144>
    a756:	461d      	mov	r5, r3
    a758:	3301      	adds	r3, #1
    a75a:	2220      	movs	r2, #32
    a75c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    a760:	5562      	strb	r2, [r4, r5]
    a762:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    a766:	e7d7      	b.n	a718 <d_print_cast.isra.12+0x7c>
    a768:	f7fc ff64 	bl	7634 <d_print_comp.part.10>
    a76c:	9f00      	ldr	r7, [sp, #0]
    a76e:	e7bb      	b.n	a6e8 <d_print_cast.isra.12+0x4c>
    a770:	2500      	movs	r5, #0
    a772:	4619      	mov	r1, r3
    a774:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a778:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a77c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a780:	4620      	mov	r0, r4
    a782:	4798      	blx	r3
    a784:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a788:	1c5a      	adds	r2, r3, #1
    a78a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a78e:	462b      	mov	r3, r5
    a790:	2101      	movs	r1, #1
    a792:	e7c4      	b.n	a71e <d_print_cast.isra.12+0x82>
    a794:	2700      	movs	r7, #0
    a796:	4611      	mov	r1, r2
    a798:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a79c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a7a0:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    a7a4:	4620      	mov	r0, r4
    a7a6:	4798      	blx	r3
    a7a8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a7ac:	3301      	adds	r3, #1
    a7ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a7b2:	463a      	mov	r2, r7
    a7b4:	2301      	movs	r3, #1
    a7b6:	e7a2      	b.n	a6fe <d_print_cast.isra.12+0x62>
    a7b8:	2201      	movs	r2, #1
    a7ba:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    a7be:	e7ab      	b.n	a718 <d_print_cast.isra.12+0x7c>
    a7c0:	2301      	movs	r3, #1
    a7c2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    a7c6:	e78f      	b.n	a6e8 <d_print_cast.isra.12+0x4c>
    a7c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a7cc:	29ff      	cmp	r1, #255	; 0xff
    a7ce:	d017      	beq.n	a800 <d_print_cast.isra.12+0x164>
    a7d0:	1c4a      	adds	r2, r1, #1
    a7d2:	2320      	movs	r3, #32
    a7d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a7d8:	5463      	strb	r3, [r4, r1]
    a7da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a7de:	e78b      	b.n	a6f8 <d_print_cast.isra.12+0x5c>
    a7e0:	4619      	mov	r1, r3
    a7e2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a7e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a7ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a7ee:	4620      	mov	r0, r4
    a7f0:	4798      	blx	r3
    a7f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a7f6:	3301      	adds	r3, #1
    a7f8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a7fc:	2301      	movs	r3, #1
    a7fe:	e7ac      	b.n	a75a <d_print_cast.isra.12+0xbe>
    a800:	2700      	movs	r7, #0
    a802:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a806:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a80a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    a80e:	4620      	mov	r0, r4
    a810:	4798      	blx	r3
    a812:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a816:	3301      	adds	r3, #1
    a818:	4639      	mov	r1, r7
    a81a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a81e:	2201      	movs	r2, #1
    a820:	e7d7      	b.n	a7d2 <d_print_cast.isra.12+0x136>
    a822:	bf00      	nop

0000a824 <d_print_expr_op>:
    a824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a828:	7815      	ldrb	r5, [r2, #0]
    a82a:	2d31      	cmp	r5, #49	; 0x31
    a82c:	4604      	mov	r4, r0
    a82e:	d008      	beq.n	a842 <d_print_expr_op+0x1e>
    a830:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    a834:	b10b      	cbz	r3, a83a <d_print_expr_op+0x16>
    a836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a83a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a83e:	f7fc bef9 	b.w	7634 <d_print_comp.part.10>
    a842:	6853      	ldr	r3, [r2, #4]
    a844:	689f      	ldr	r7, [r3, #8]
    a846:	f8d3 9004 	ldr.w	r9, [r3, #4]
    a84a:	2f00      	cmp	r7, #0
    a84c:	d0f3      	beq.n	a836 <d_print_expr_op+0x12>
    a84e:	2500      	movs	r5, #0
    a850:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a854:	46a8      	mov	r8, r5
    a856:	e009      	b.n	a86c <d_print_expr_op+0x48>
    a858:	460b      	mov	r3, r1
    a85a:	3101      	adds	r1, #1
    a85c:	3501      	adds	r5, #1
    a85e:	42af      	cmp	r7, r5
    a860:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a864:	54e6      	strb	r6, [r4, r3]
    a866:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    a86a:	d013      	beq.n	a894 <d_print_expr_op+0x70>
    a86c:	29ff      	cmp	r1, #255	; 0xff
    a86e:	f819 6005 	ldrb.w	r6, [r9, r5]
    a872:	d1f1      	bne.n	a858 <d_print_expr_op+0x34>
    a874:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a878:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a87c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a880:	4620      	mov	r0, r4
    a882:	4798      	blx	r3
    a884:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a888:	3301      	adds	r3, #1
    a88a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a88e:	2101      	movs	r1, #1
    a890:	2300      	movs	r3, #0
    a892:	e7e3      	b.n	a85c <d_print_expr_op+0x38>
    a894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a898 <d_print_subexpr>:
    a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a89a:	7813      	ldrb	r3, [r2, #0]
    a89c:	2b01      	cmp	r3, #1
    a89e:	4615      	mov	r5, r2
    a8a0:	460f      	mov	r7, r1
    a8a2:	4604      	mov	r4, r0
    a8a4:	d914      	bls.n	a8d0 <d_print_subexpr+0x38>
    a8a6:	2b30      	cmp	r3, #48	; 0x30
    a8a8:	d012      	beq.n	a8d0 <d_print_subexpr+0x38>
    a8aa:	2b06      	cmp	r3, #6
    a8ac:	d010      	beq.n	a8d0 <d_print_subexpr+0x38>
    a8ae:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    a8b2:	2bff      	cmp	r3, #255	; 0xff
    a8b4:	d034      	beq.n	a920 <d_print_subexpr+0x88>
    a8b6:	1c59      	adds	r1, r3, #1
    a8b8:	2228      	movs	r2, #40	; 0x28
    a8ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a8be:	54e2      	strb	r2, [r4, r3]
    a8c0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    a8c4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    a8c8:	2600      	movs	r6, #0
    a8ca:	b133      	cbz	r3, a8da <d_print_subexpr+0x42>
    a8cc:	b166      	cbz	r6, a8e8 <d_print_subexpr+0x50>
    a8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8d0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    a8d4:	2601      	movs	r6, #1
    a8d6:	2b00      	cmp	r3, #0
    a8d8:	d1f8      	bne.n	a8cc <d_print_subexpr+0x34>
    a8da:	4639      	mov	r1, r7
    a8dc:	462a      	mov	r2, r5
    a8de:	4620      	mov	r0, r4
    a8e0:	f7fc fea8 	bl	7634 <d_print_comp.part.10>
    a8e4:	2e00      	cmp	r6, #0
    a8e6:	d1f2      	bne.n	a8ce <d_print_subexpr+0x36>
    a8e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a8ec:	29ff      	cmp	r1, #255	; 0xff
    a8ee:	d007      	beq.n	a900 <d_print_subexpr+0x68>
    a8f0:	1c4a      	adds	r2, r1, #1
    a8f2:	2329      	movs	r3, #41	; 0x29
    a8f4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a8f8:	5463      	strb	r3, [r4, r1]
    a8fa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a900:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a904:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a908:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    a90c:	4620      	mov	r0, r4
    a90e:	4798      	blx	r3
    a910:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a914:	3301      	adds	r3, #1
    a916:	4631      	mov	r1, r6
    a918:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a91c:	2201      	movs	r2, #1
    a91e:	e7e8      	b.n	a8f2 <d_print_subexpr+0x5a>
    a920:	2600      	movs	r6, #0
    a922:	4619      	mov	r1, r3
    a924:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a928:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a92c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    a930:	4798      	blx	r3
    a932:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a936:	1c5a      	adds	r2, r3, #1
    a938:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a93c:	4633      	mov	r3, r6
    a93e:	2101      	movs	r1, #1
    a940:	e7ba      	b.n	a8b8 <d_print_subexpr+0x20>
    a942:	bf00      	nop

0000a944 <d_demangle_callback.constprop.16>:
    a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a948:	b0d7      	sub	sp, #348	; 0x15c
    a94a:	4604      	mov	r4, r0
    a94c:	7805      	ldrb	r5, [r0, #0]
    a94e:	2d5f      	cmp	r5, #95	; 0x5f
    a950:	af00      	add	r7, sp, #0
    a952:	460e      	mov	r6, r1
    a954:	4690      	mov	r8, r2
    a956:	d072      	beq.n	aa3e <d_demangle_callback.constprop.16+0xfa>
    a958:	4620      	mov	r0, r4
    a95a:	497c      	ldr	r1, [pc, #496]	; (ab4c <d_demangle_callback.constprop.16+0x208>)
    a95c:	2208      	movs	r2, #8
    a95e:	f004 f9a5 	bl	ecac <strncmp>
    a962:	b978      	cbnz	r0, a984 <d_demangle_callback.constprop.16+0x40>
    a964:	7a23      	ldrb	r3, [r4, #8]
    a966:	2b2e      	cmp	r3, #46	; 0x2e
    a968:	d005      	beq.n	a976 <d_demangle_callback.constprop.16+0x32>
    a96a:	2b5f      	cmp	r3, #95	; 0x5f
    a96c:	d003      	beq.n	a976 <d_demangle_callback.constprop.16+0x32>
    a96e:	2b24      	cmp	r3, #36	; 0x24
    a970:	d001      	beq.n	a976 <d_demangle_callback.constprop.16+0x32>
    a972:	4681      	mov	r9, r0
    a974:	e008      	b.n	a988 <d_demangle_callback.constprop.16+0x44>
    a976:	7a63      	ldrb	r3, [r4, #9]
    a978:	2b44      	cmp	r3, #68	; 0x44
    a97a:	f000 80df 	beq.w	ab3c <d_demangle_callback.constprop.16+0x1f8>
    a97e:	2b49      	cmp	r3, #73	; 0x49
    a980:	f000 8098 	beq.w	aab4 <d_demangle_callback.constprop.16+0x170>
    a984:	f04f 0900 	mov.w	r9, #0
    a988:	4620      	mov	r0, r4
    a98a:	f7f7 ff25 	bl	27d8 <strlen>
    a98e:	0042      	lsls	r2, r0, #1
    a990:	0083      	lsls	r3, r0, #2
    a992:	1899      	adds	r1, r3, r2
    a994:	0089      	lsls	r1, r1, #2
    a996:	3108      	adds	r1, #8
    a998:	330a      	adds	r3, #10
    a99a:	ebad 0d01 	sub.w	sp, sp, r1
    a99e:	f023 0307 	bic.w	r3, r3, #7
    a9a2:	46ea      	mov	sl, sp
    a9a4:	eb04 0c00 	add.w	ip, r4, r0
    a9a8:	ebad 0d03 	sub.w	sp, sp, r3
    a9ac:	f04f 0b11 	mov.w	fp, #17
    a9b0:	2300      	movs	r3, #0
    a9b2:	f1b9 0f01 	cmp.w	r9, #1
    a9b6:	f8c7 a010 	str.w	sl, [r7, #16]
    a9ba:	f8c7 d01c 	str.w	sp, [r7, #28]
    a9be:	61ba      	str	r2, [r7, #24]
    a9c0:	603c      	str	r4, [r7, #0]
    a9c2:	60fc      	str	r4, [r7, #12]
    a9c4:	6278      	str	r0, [r7, #36]	; 0x24
    a9c6:	f8c7 c004 	str.w	ip, [r7, #4]
    a9ca:	f8c7 b008 	str.w	fp, [r7, #8]
    a9ce:	617b      	str	r3, [r7, #20]
    a9d0:	623b      	str	r3, [r7, #32]
    a9d2:	62bb      	str	r3, [r7, #40]	; 0x28
    a9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    a9d6:	633b      	str	r3, [r7, #48]	; 0x30
    a9d8:	d037      	beq.n	aa4a <d_demangle_callback.constprop.16+0x106>
    a9da:	d373      	bcc.n	aac4 <d_demangle_callback.constprop.16+0x180>
    a9dc:	f1b9 0f03 	cmp.w	r9, #3
    a9e0:	d870      	bhi.n	aac4 <d_demangle_callback.constprop.16+0x180>
    a9e2:	7ae2      	ldrb	r2, [r4, #11]
    a9e4:	f1b9 0f02 	cmp.w	r9, #2
    a9e8:	f104 050b 	add.w	r5, r4, #11
    a9ec:	bf14      	ite	ne
    a9ee:	f04f 0943 	movne.w	r9, #67	; 0x43
    a9f2:	f04f 0942 	moveq.w	r9, #66	; 0x42
    a9f6:	2a5f      	cmp	r2, #95	; 0x5f
    a9f8:	60fd      	str	r5, [r7, #12]
    a9fa:	d103      	bne.n	aa04 <d_demangle_callback.constprop.16+0xc0>
    a9fc:	7b22      	ldrb	r2, [r4, #12]
    a9fe:	2a5a      	cmp	r2, #90	; 0x5a
    aa00:	f000 8091 	beq.w	ab26 <d_demangle_callback.constprop.16+0x1e2>
    aa04:	4628      	mov	r0, r5
    aa06:	f7f7 fee7 	bl	27d8 <strlen>
    aa0a:	4629      	mov	r1, r5
    aa0c:	4602      	mov	r2, r0
    aa0e:	4638      	mov	r0, r7
    aa10:	f7fa fd98 	bl	5544 <d_make_name>
    aa14:	4602      	mov	r2, r0
    aa16:	4649      	mov	r1, r9
    aa18:	2300      	movs	r3, #0
    aa1a:	4638      	mov	r0, r7
    aa1c:	f7fa fd46 	bl	54ac <d_make_comp>
    aa20:	68fc      	ldr	r4, [r7, #12]
    aa22:	4681      	mov	r9, r0
    aa24:	4620      	mov	r0, r4
    aa26:	f7f7 fed7 	bl	27d8 <strlen>
    aa2a:	1823      	adds	r3, r4, r0
    aa2c:	60fb      	str	r3, [r7, #12]
    aa2e:	5c25      	ldrb	r5, [r4, r0]
    aa30:	b185      	cbz	r5, aa54 <d_demangle_callback.constprop.16+0x110>
    aa32:	2000      	movs	r0, #0
    aa34:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
    aa38:	46bd      	mov	sp, r7
    aa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa3e:	7843      	ldrb	r3, [r0, #1]
    aa40:	2b5a      	cmp	r3, #90	; 0x5a
    aa42:	d189      	bne.n	a958 <d_demangle_callback.constprop.16+0x14>
    aa44:	f04f 0901 	mov.w	r9, #1
    aa48:	e79e      	b.n	a988 <d_demangle_callback.constprop.16+0x44>
    aa4a:	2d5f      	cmp	r5, #95	; 0x5f
    aa4c:	d041      	beq.n	aad2 <d_demangle_callback.constprop.16+0x18e>
    aa4e:	4699      	mov	r9, r3
    aa50:	2d00      	cmp	r5, #0
    aa52:	d1ee      	bne.n	aa32 <d_demangle_callback.constprop.16+0xee>
    aa54:	f1b9 0f00 	cmp.w	r9, #0
    aa58:	d063      	beq.n	ab22 <d_demangle_callback.constprop.16+0x1de>
    aa5a:	f107 0434 	add.w	r4, r7, #52	; 0x34
    aa5e:	464a      	mov	r2, r9
    aa60:	4620      	mov	r0, r4
    aa62:	2111      	movs	r1, #17
    aa64:	f8c7 5134 	str.w	r5, [r7, #308]	; 0x134
    aa68:	f887 5138 	strb.w	r5, [r7, #312]	; 0x138
    aa6c:	f8c7 5144 	str.w	r5, [r7, #324]	; 0x144
    aa70:	f8c7 5148 	str.w	r5, [r7, #328]	; 0x148
    aa74:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
    aa78:	f8c7 5154 	str.w	r5, [r7, #340]	; 0x154
    aa7c:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
    aa80:	f8c7 8140 	str.w	r8, [r7, #320]	; 0x140
    aa84:	f8c7 514c 	str.w	r5, [r7, #332]	; 0x14c
    aa88:	f7fc fdd4 	bl	7634 <d_print_comp.part.10>
    aa8c:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
    aa90:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
    aa94:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
    aa98:	5465      	strb	r5, [r4, r1]
    aa9a:	4620      	mov	r0, r4
    aa9c:	4798      	blx	r3
    aa9e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
    aaa2:	f1d0 0001 	rsbs	r0, r0, #1
    aaa6:	bf38      	it	cc
    aaa8:	2000      	movcc	r0, #0
    aaaa:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
    aaae:	46bd      	mov	sp, r7
    aab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aab4:	7aa3      	ldrb	r3, [r4, #10]
    aab6:	2b5f      	cmp	r3, #95	; 0x5f
    aab8:	bf14      	ite	ne
    aaba:	f04f 0900 	movne.w	r9, #0
    aabe:	f04f 0902 	moveq.w	r9, #2
    aac2:	e761      	b.n	a988 <d_demangle_callback.constprop.16+0x44>
    aac4:	4638      	mov	r0, r7
    aac6:	f7fb fa9f 	bl	6008 <d_type>
    aaca:	68fb      	ldr	r3, [r7, #12]
    aacc:	4681      	mov	r9, r0
    aace:	781d      	ldrb	r5, [r3, #0]
    aad0:	e7ae      	b.n	aa30 <d_demangle_callback.constprop.16+0xec>
    aad2:	7865      	ldrb	r5, [r4, #1]
    aad4:	1c62      	adds	r2, r4, #1
    aad6:	2d5a      	cmp	r5, #90	; 0x5a
    aad8:	60fa      	str	r2, [r7, #12]
    aada:	d1b8      	bne.n	aa4e <d_demangle_callback.constprop.16+0x10a>
    aadc:	4649      	mov	r1, r9
    aade:	3402      	adds	r4, #2
    aae0:	4638      	mov	r0, r7
    aae2:	60fc      	str	r4, [r7, #12]
    aae4:	f7fb fe76 	bl	67d4 <d_encoding>
    aae8:	68bb      	ldr	r3, [r7, #8]
    aaea:	f013 0f01 	tst.w	r3, #1
    aaee:	68fb      	ldr	r3, [r7, #12]
    aaf0:	4681      	mov	r9, r0
    aaf2:	781d      	ldrb	r5, [r3, #0]
    aaf4:	d112      	bne.n	ab1c <d_demangle_callback.constprop.16+0x1d8>
    aaf6:	e79b      	b.n	aa30 <d_demangle_callback.constprop.16+0xec>
    aaf8:	785b      	ldrb	r3, [r3, #1]
    aafa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    aafe:	2a19      	cmp	r2, #25
    ab00:	4638      	mov	r0, r7
    ab02:	4649      	mov	r1, r9
    ab04:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    ab08:	d903      	bls.n	ab12 <d_demangle_callback.constprop.16+0x1ce>
    ab0a:	2b5f      	cmp	r3, #95	; 0x5f
    ab0c:	d001      	beq.n	ab12 <d_demangle_callback.constprop.16+0x1ce>
    ab0e:	2c09      	cmp	r4, #9
    ab10:	d811      	bhi.n	ab36 <d_demangle_callback.constprop.16+0x1f2>
    ab12:	f7fa fda7 	bl	5664 <d_clone_suffix>
    ab16:	68fb      	ldr	r3, [r7, #12]
    ab18:	781d      	ldrb	r5, [r3, #0]
    ab1a:	4681      	mov	r9, r0
    ab1c:	2d2e      	cmp	r5, #46	; 0x2e
    ab1e:	d0eb      	beq.n	aaf8 <d_demangle_callback.constprop.16+0x1b4>
    ab20:	e786      	b.n	aa30 <d_demangle_callback.constprop.16+0xec>
    ab22:	4648      	mov	r0, r9
    ab24:	e786      	b.n	aa34 <d_demangle_callback.constprop.16+0xf0>
    ab26:	340d      	adds	r4, #13
    ab28:	4619      	mov	r1, r3
    ab2a:	4638      	mov	r0, r7
    ab2c:	60fc      	str	r4, [r7, #12]
    ab2e:	f7fb fe51 	bl	67d4 <d_encoding>
    ab32:	4602      	mov	r2, r0
    ab34:	e76f      	b.n	aa16 <d_demangle_callback.constprop.16+0xd2>
    ab36:	68fb      	ldr	r3, [r7, #12]
    ab38:	781d      	ldrb	r5, [r3, #0]
    ab3a:	e779      	b.n	aa30 <d_demangle_callback.constprop.16+0xec>
    ab3c:	7aa3      	ldrb	r3, [r4, #10]
    ab3e:	2b5f      	cmp	r3, #95	; 0x5f
    ab40:	bf0c      	ite	eq
    ab42:	f04f 0903 	moveq.w	r9, #3
    ab46:	f04f 0900 	movne.w	r9, #0
    ab4a:	e71d      	b.n	a988 <d_demangle_callback.constprop.16+0x44>
    ab4c:	000138c4 	.word	0x000138c4

0000ab50 <__cxa_demangle>:
    ab50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab54:	460d      	mov	r5, r1
    ab56:	b084      	sub	sp, #16
    ab58:	4617      	mov	r7, r2
    ab5a:	461e      	mov	r6, r3
    ab5c:	2800      	cmp	r0, #0
    ab5e:	d02e      	beq.n	abbe <__cxa_demangle+0x6e>
    ab60:	b109      	cbz	r1, ab66 <__cxa_demangle+0x16>
    ab62:	2a00      	cmp	r2, #0
    ab64:	d02b      	beq.n	abbe <__cxa_demangle+0x6e>
    ab66:	2400      	movs	r4, #0
    ab68:	4929      	ldr	r1, [pc, #164]	; (ac10 <__cxa_demangle+0xc0>)
    ab6a:	9400      	str	r4, [sp, #0]
    ab6c:	466a      	mov	r2, sp
    ab6e:	9401      	str	r4, [sp, #4]
    ab70:	9402      	str	r4, [sp, #8]
    ab72:	9403      	str	r4, [sp, #12]
    ab74:	f7ff fee6 	bl	a944 <d_demangle_callback.constprop.16>
    ab78:	2800      	cmp	r0, #0
    ab7a:	d03e      	beq.n	abfa <__cxa_demangle+0xaa>
    ab7c:	9b03      	ldr	r3, [sp, #12]
    ab7e:	b1db      	cbz	r3, abb8 <__cxa_demangle+0x68>
    ab80:	f04f 0801 	mov.w	r8, #1
    ab84:	9c00      	ldr	r4, [sp, #0]
    ab86:	b344      	cbz	r4, abda <__cxa_demangle+0x8a>
    ab88:	2d00      	cmp	r5, #0
    ab8a:	d033      	beq.n	abf4 <__cxa_demangle+0xa4>
    ab8c:	4620      	mov	r0, r4
    ab8e:	f7f7 fe23 	bl	27d8 <strlen>
    ab92:	683b      	ldr	r3, [r7, #0]
    ab94:	4298      	cmp	r0, r3
    ab96:	d21a      	bcs.n	abce <__cxa_demangle+0x7e>
    ab98:	1c42      	adds	r2, r0, #1
    ab9a:	4621      	mov	r1, r4
    ab9c:	4628      	mov	r0, r5
    ab9e:	f003 fb93 	bl	e2c8 <memcpy>
    aba2:	4620      	mov	r0, r4
    aba4:	f003 f870 	bl	dc88 <free>
    aba8:	462c      	mov	r4, r5
    abaa:	b30e      	cbz	r6, abf0 <__cxa_demangle+0xa0>
    abac:	2300      	movs	r3, #0
    abae:	4620      	mov	r0, r4
    abb0:	6033      	str	r3, [r6, #0]
    abb2:	b004      	add	sp, #16
    abb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abb8:	f8dd 8008 	ldr.w	r8, [sp, #8]
    abbc:	e7e2      	b.n	ab84 <__cxa_demangle+0x34>
    abbe:	b19e      	cbz	r6, abe8 <__cxa_demangle+0x98>
    abc0:	f06f 0302 	mvn.w	r3, #2
    abc4:	2000      	movs	r0, #0
    abc6:	6033      	str	r3, [r6, #0]
    abc8:	b004      	add	sp, #16
    abca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abce:	4628      	mov	r0, r5
    abd0:	f003 f85a 	bl	dc88 <free>
    abd4:	f8c7 8000 	str.w	r8, [r7]
    abd8:	e7e7      	b.n	abaa <__cxa_demangle+0x5a>
    abda:	b12e      	cbz	r6, abe8 <__cxa_demangle+0x98>
    abdc:	f1b8 0f01 	cmp.w	r8, #1
    abe0:	d011      	beq.n	ac06 <__cxa_demangle+0xb6>
    abe2:	f06f 0301 	mvn.w	r3, #1
    abe6:	6033      	str	r3, [r6, #0]
    abe8:	2000      	movs	r0, #0
    abea:	b004      	add	sp, #16
    abec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abf0:	4620      	mov	r0, r4
    abf2:	e7de      	b.n	abb2 <__cxa_demangle+0x62>
    abf4:	2f00      	cmp	r7, #0
    abf6:	d1ed      	bne.n	abd4 <__cxa_demangle+0x84>
    abf8:	e7d7      	b.n	abaa <__cxa_demangle+0x5a>
    abfa:	9800      	ldr	r0, [sp, #0]
    abfc:	f003 f844 	bl	dc88 <free>
    ac00:	2e00      	cmp	r6, #0
    ac02:	d1ee      	bne.n	abe2 <__cxa_demangle+0x92>
    ac04:	e7f0      	b.n	abe8 <__cxa_demangle+0x98>
    ac06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ac0a:	4620      	mov	r0, r4
    ac0c:	6033      	str	r3, [r6, #0]
    ac0e:	e7d0      	b.n	abb2 <__cxa_demangle+0x62>
    ac10:	00005b45 	.word	0x00005b45

0000ac14 <__gcclibcxx_demangle_callback>:
    ac14:	b508      	push	{r3, lr}
    ac16:	b140      	cbz	r0, ac2a <__gcclibcxx_demangle_callback+0x16>
    ac18:	b139      	cbz	r1, ac2a <__gcclibcxx_demangle_callback+0x16>
    ac1a:	f7ff fe93 	bl	a944 <d_demangle_callback.constprop.16>
    ac1e:	2800      	cmp	r0, #0
    ac20:	bf14      	ite	ne
    ac22:	2000      	movne	r0, #0
    ac24:	f06f 0001 	mvneq.w	r0, #1
    ac28:	bd08      	pop	{r3, pc}
    ac2a:	f06f 0002 	mvn.w	r0, #2
    ac2e:	bd08      	pop	{r3, pc}

0000ac30 <__cxa_current_exception_type>:
    ac30:	b508      	push	{r3, lr}
    ac32:	f7f9 fec5 	bl	49c0 <__cxa_get_globals>
    ac36:	6800      	ldr	r0, [r0, #0]
    ac38:	b130      	cbz	r0, ac48 <__cxa_current_exception_type+0x18>
    ac3a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    ac3e:	2b01      	cmp	r3, #1
    ac40:	bf04      	itt	eq
    ac42:	6800      	ldreq	r0, [r0, #0]
    ac44:	3878      	subeq	r0, #120	; 0x78
    ac46:	6800      	ldr	r0, [r0, #0]
    ac48:	bd08      	pop	{r3, pc}
    ac4a:	bf00      	nop

0000ac4c <cos>:
    ac4c:	b570      	push	{r4, r5, r6, lr}
    ac4e:	4e1a      	ldr	r6, [pc, #104]	; (acb8 <cos+0x6c>)
    ac50:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    ac54:	42b4      	cmp	r4, r6
    ac56:	b086      	sub	sp, #24
    ac58:	4602      	mov	r2, r0
    ac5a:	460b      	mov	r3, r1
    ac5c:	dd19      	ble.n	ac92 <cos+0x46>
    ac5e:	4d17      	ldr	r5, [pc, #92]	; (acbc <cos+0x70>)
    ac60:	42ac      	cmp	r4, r5
    ac62:	dd03      	ble.n	ac6c <cos+0x20>
    ac64:	f001 f9a6 	bl	bfb4 <__aeabi_dsub>
    ac68:	b006      	add	sp, #24
    ac6a:	bd70      	pop	{r4, r5, r6, pc}
    ac6c:	aa02      	add	r2, sp, #8
    ac6e:	f000 f903 	bl	ae78 <__ieee754_rem_pio2>
    ac72:	f000 0403 	and.w	r4, r0, #3
    ac76:	2c01      	cmp	r4, #1
    ac78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ac7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ac80:	d013      	beq.n	acaa <cos+0x5e>
    ac82:	2c02      	cmp	r4, #2
    ac84:	d00b      	beq.n	ac9e <cos+0x52>
    ac86:	b1a4      	cbz	r4, acb2 <cos+0x66>
    ac88:	2401      	movs	r4, #1
    ac8a:	9400      	str	r4, [sp, #0]
    ac8c:	f001 f814 	bl	bcb8 <__kernel_sin>
    ac90:	e7ea      	b.n	ac68 <cos+0x1c>
    ac92:	2200      	movs	r2, #0
    ac94:	2300      	movs	r3, #0
    ac96:	f000 fb0f 	bl	b2b8 <__kernel_cos>
    ac9a:	b006      	add	sp, #24
    ac9c:	bd70      	pop	{r4, r5, r6, pc}
    ac9e:	f000 fb0b 	bl	b2b8 <__kernel_cos>
    aca2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    aca6:	b006      	add	sp, #24
    aca8:	bd70      	pop	{r4, r5, r6, pc}
    acaa:	9400      	str	r4, [sp, #0]
    acac:	f001 f804 	bl	bcb8 <__kernel_sin>
    acb0:	e7f7      	b.n	aca2 <cos+0x56>
    acb2:	f000 fb01 	bl	b2b8 <__kernel_cos>
    acb6:	e7d7      	b.n	ac68 <cos+0x1c>
    acb8:	3fe921fb 	.word	0x3fe921fb
    acbc:	7fefffff 	.word	0x7fefffff

0000acc0 <floor>:
    acc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acc4:	f3c1 570a 	ubfx	r7, r1, #20, #11
    acc8:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    accc:	2e13      	cmp	r6, #19
    acce:	4602      	mov	r2, r0
    acd0:	460b      	mov	r3, r1
    acd2:	4604      	mov	r4, r0
    acd4:	460d      	mov	r5, r1
    acd6:	4689      	mov	r9, r1
    acd8:	468a      	mov	sl, r1
    acda:	4680      	mov	r8, r0
    acdc:	dc1c      	bgt.n	ad18 <floor+0x58>
    acde:	2e00      	cmp	r6, #0
    ace0:	db40      	blt.n	ad64 <floor+0xa4>
    ace2:	4f3d      	ldr	r7, [pc, #244]	; (add8 <floor+0x118>)
    ace4:	4137      	asrs	r7, r6
    ace6:	ea07 0c01 	and.w	ip, r7, r1
    acea:	ea5c 0c00 	orrs.w	ip, ip, r0
    acee:	d018      	beq.n	ad22 <floor+0x62>
    acf0:	a337      	add	r3, pc, #220	; (adr r3, add0 <floor+0x110>)
    acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    acf6:	f001 f95f 	bl	bfb8 <__adddf3>
    acfa:	2200      	movs	r2, #0
    acfc:	2300      	movs	r3, #0
    acfe:	f001 fd9d 	bl	c83c <__aeabi_dcmpgt>
    ad02:	b128      	cbz	r0, ad10 <floor+0x50>
    ad04:	2d00      	cmp	r5, #0
    ad06:	db42      	blt.n	ad8e <floor+0xce>
    ad08:	ea2a 0907 	bic.w	r9, sl, r7
    ad0c:	f04f 0800 	mov.w	r8, #0
    ad10:	4640      	mov	r0, r8
    ad12:	4649      	mov	r1, r9
    ad14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad18:	2e33      	cmp	r6, #51	; 0x33
    ad1a:	dd06      	ble.n	ad2a <floor+0x6a>
    ad1c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    ad20:	d031      	beq.n	ad86 <floor+0xc6>
    ad22:	4610      	mov	r0, r2
    ad24:	4619      	mov	r1, r3
    ad26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad2a:	f2a7 4c13 	subw	ip, r7, #1043	; 0x413
    ad2e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    ad32:	fa2b fb0c 	lsr.w	fp, fp, ip
    ad36:	ea1b 0f00 	tst.w	fp, r0
    ad3a:	d0f2      	beq.n	ad22 <floor+0x62>
    ad3c:	a324      	add	r3, pc, #144	; (adr r3, add0 <floor+0x110>)
    ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad42:	f001 f939 	bl	bfb8 <__adddf3>
    ad46:	2200      	movs	r2, #0
    ad48:	2300      	movs	r3, #0
    ad4a:	f001 fd77 	bl	c83c <__aeabi_dcmpgt>
    ad4e:	2800      	cmp	r0, #0
    ad50:	d0de      	beq.n	ad10 <floor+0x50>
    ad52:	2d00      	cmp	r5, #0
    ad54:	db22      	blt.n	ad9c <floor+0xdc>
    ad56:	ea28 080b 	bic.w	r8, r8, fp
    ad5a:	46d1      	mov	r9, sl
    ad5c:	4640      	mov	r0, r8
    ad5e:	4649      	mov	r1, r9
    ad60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad64:	a31a      	add	r3, pc, #104	; (adr r3, add0 <floor+0x110>)
    ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad6a:	f001 f925 	bl	bfb8 <__adddf3>
    ad6e:	2200      	movs	r2, #0
    ad70:	2300      	movs	r3, #0
    ad72:	f001 fd63 	bl	c83c <__aeabi_dcmpgt>
    ad76:	2800      	cmp	r0, #0
    ad78:	d0ca      	beq.n	ad10 <floor+0x50>
    ad7a:	2d00      	cmp	r5, #0
    ad7c:	db1c      	blt.n	adb8 <floor+0xf8>
    ad7e:	f04f 0800 	mov.w	r8, #0
    ad82:	46c1      	mov	r9, r8
    ad84:	e7c4      	b.n	ad10 <floor+0x50>
    ad86:	f001 f917 	bl	bfb8 <__adddf3>
    ad8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    ad92:	fa4a f606 	asr.w	r6, sl, r6
    ad96:	eb06 0a05 	add.w	sl, r6, r5
    ad9a:	e7b5      	b.n	ad08 <floor+0x48>
    ad9c:	2e14      	cmp	r6, #20
    ad9e:	d014      	beq.n	adca <floor+0x10a>
    ada0:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
    ada4:	2301      	movs	r3, #1
    ada6:	3703      	adds	r7, #3
    ada8:	fa03 f707 	lsl.w	r7, r3, r7
    adac:	eb17 0804 	adds.w	r8, r7, r4
    adb0:	bf28      	it	cs
    adb2:	eb05 0a03 	addcs.w	sl, r5, r3
    adb6:	e7ce      	b.n	ad56 <floor+0x96>
    adb8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
    adbc:	4b07      	ldr	r3, [pc, #28]	; (addc <floor+0x11c>)
    adbe:	4322      	orrs	r2, r4
    adc0:	bf18      	it	ne
    adc2:	4699      	movne	r9, r3
    adc4:	f04f 0800 	mov.w	r8, #0
    adc8:	e7a2      	b.n	ad10 <floor+0x50>
    adca:	f105 0a01 	add.w	sl, r5, #1
    adce:	e7c2      	b.n	ad56 <floor+0x96>
    add0:	8800759c 	.word	0x8800759c
    add4:	7e37e43c 	.word	0x7e37e43c
    add8:	000fffff 	.word	0x000fffff
    addc:	bff00000 	.word	0xbff00000

0000ade0 <sin>:
    ade0:	b570      	push	{r4, r5, r6, lr}
    ade2:	4e22      	ldr	r6, [pc, #136]	; (ae6c <sin+0x8c>)
    ade4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    ade8:	42b4      	cmp	r4, r6
    adea:	b086      	sub	sp, #24
    adec:	4602      	mov	r2, r0
    adee:	460b      	mov	r3, r1
    adf0:	dd1a      	ble.n	ae28 <sin+0x48>
    adf2:	4d1f      	ldr	r5, [pc, #124]	; (ae70 <sin+0x90>)
    adf4:	42ac      	cmp	r4, r5
    adf6:	dd03      	ble.n	ae00 <sin+0x20>
    adf8:	f001 f8dc 	bl	bfb4 <__aeabi_dsub>
    adfc:	b006      	add	sp, #24
    adfe:	bd70      	pop	{r4, r5, r6, pc}
    ae00:	aa02      	add	r2, sp, #8
    ae02:	f000 f839 	bl	ae78 <__ieee754_rem_pio2>
    ae06:	f000 0003 	and.w	r0, r0, #3
    ae0a:	2801      	cmp	r0, #1
    ae0c:	d01d      	beq.n	ae4a <sin+0x6a>
    ae0e:	2802      	cmp	r0, #2
    ae10:	d012      	beq.n	ae38 <sin+0x58>
    ae12:	b308      	cbz	r0, ae58 <sin+0x78>
    ae14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ae18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ae1c:	f000 fa4c 	bl	b2b8 <__kernel_cos>
    ae20:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    ae24:	b006      	add	sp, #24
    ae26:	bd70      	pop	{r4, r5, r6, pc}
    ae28:	2300      	movs	r3, #0
    ae2a:	9300      	str	r3, [sp, #0]
    ae2c:	2200      	movs	r2, #0
    ae2e:	2300      	movs	r3, #0
    ae30:	f000 ff42 	bl	bcb8 <__kernel_sin>
    ae34:	b006      	add	sp, #24
    ae36:	bd70      	pop	{r4, r5, r6, pc}
    ae38:	2401      	movs	r4, #1
    ae3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ae3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ae42:	9400      	str	r4, [sp, #0]
    ae44:	f000 ff38 	bl	bcb8 <__kernel_sin>
    ae48:	e7ea      	b.n	ae20 <sin+0x40>
    ae4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ae4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ae52:	f000 fa31 	bl	b2b8 <__kernel_cos>
    ae56:	e7d1      	b.n	adfc <sin+0x1c>
    ae58:	2401      	movs	r4, #1
    ae5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ae5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ae62:	9400      	str	r4, [sp, #0]
    ae64:	f000 ff28 	bl	bcb8 <__kernel_sin>
    ae68:	e7c8      	b.n	adfc <sin+0x1c>
    ae6a:	bf00      	nop
    ae6c:	3fe921fb 	.word	0x3fe921fb
    ae70:	7fefffff 	.word	0x7fefffff
    ae74:	ffffffff 	.word	0xffffffff

0000ae78 <__ieee754_rem_pio2>:
    ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae7c:	4b96      	ldr	r3, [pc, #600]	; (b0d8 <__ieee754_rem_pio2+0x260>)
    ae7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    ae82:	429e      	cmp	r6, r3
    ae84:	b091      	sub	sp, #68	; 0x44
    ae86:	4604      	mov	r4, r0
    ae88:	460d      	mov	r5, r1
    ae8a:	468b      	mov	fp, r1
    ae8c:	4690      	mov	r8, r2
    ae8e:	f340 8081 	ble.w	af94 <__ieee754_rem_pio2+0x11c>
    ae92:	4b92      	ldr	r3, [pc, #584]	; (b0dc <__ieee754_rem_pio2+0x264>)
    ae94:	429e      	cmp	r6, r3
    ae96:	dc26      	bgt.n	aee6 <__ieee754_rem_pio2+0x6e>
    ae98:	2900      	cmp	r1, #0
    ae9a:	a385      	add	r3, pc, #532	; (adr r3, b0b0 <__ieee754_rem_pio2+0x238>)
    ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    aea0:	f340 81a0 	ble.w	b1e4 <__ieee754_rem_pio2+0x36c>
    aea4:	f001 f886 	bl	bfb4 <__aeabi_dsub>
    aea8:	4b8d      	ldr	r3, [pc, #564]	; (b0e0 <__ieee754_rem_pio2+0x268>)
    aeaa:	429e      	cmp	r6, r3
    aeac:	4604      	mov	r4, r0
    aeae:	460d      	mov	r5, r1
    aeb0:	f000 8085 	beq.w	afbe <__ieee754_rem_pio2+0x146>
    aeb4:	a380      	add	r3, pc, #512	; (adr r3, b0b8 <__ieee754_rem_pio2+0x240>)
    aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    aeba:	f001 f87b 	bl	bfb4 <__aeabi_dsub>
    aebe:	4602      	mov	r2, r0
    aec0:	460b      	mov	r3, r1
    aec2:	e9c8 2300 	strd	r2, r3, [r8]
    aec6:	4620      	mov	r0, r4
    aec8:	4629      	mov	r1, r5
    aeca:	f001 f873 	bl	bfb4 <__aeabi_dsub>
    aece:	a37a      	add	r3, pc, #488	; (adr r3, b0b8 <__ieee754_rem_pio2+0x240>)
    aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
    aed4:	f001 f86e 	bl	bfb4 <__aeabi_dsub>
    aed8:	2701      	movs	r7, #1
    aeda:	e9c8 0102 	strd	r0, r1, [r8, #8]
    aede:	4638      	mov	r0, r7
    aee0:	b011      	add	sp, #68	; 0x44
    aee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aee6:	4b7f      	ldr	r3, [pc, #508]	; (b0e4 <__ieee754_rem_pio2+0x26c>)
    aee8:	429e      	cmp	r6, r3
    aeea:	f340 8085 	ble.w	aff8 <__ieee754_rem_pio2+0x180>
    aeee:	4b7e      	ldr	r3, [pc, #504]	; (b0e8 <__ieee754_rem_pio2+0x270>)
    aef0:	429e      	cmp	r6, r3
    aef2:	dc5a      	bgt.n	afaa <__ieee754_rem_pio2+0x132>
    aef4:	ea4f 5926 	mov.w	r9, r6, asr #20
    aef8:	f2a9 4916 	subw	r9, r9, #1046	; 0x416
    aefc:	eba6 5509 	sub.w	r5, r6, r9, lsl #20
    af00:	4629      	mov	r1, r5
    af02:	4604      	mov	r4, r0
    af04:	f001 fca4 	bl	c850 <__aeabi_d2iz>
    af08:	f001 f9a2 	bl	c250 <__aeabi_i2d>
    af0c:	4606      	mov	r6, r0
    af0e:	460f      	mov	r7, r1
    af10:	4602      	mov	r2, r0
    af12:	460b      	mov	r3, r1
    af14:	4620      	mov	r0, r4
    af16:	4629      	mov	r1, r5
    af18:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    af1c:	f001 f84a 	bl	bfb4 <__aeabi_dsub>
    af20:	2200      	movs	r2, #0
    af22:	4b72      	ldr	r3, [pc, #456]	; (b0ec <__ieee754_rem_pio2+0x274>)
    af24:	f001 f9fa 	bl	c31c <__aeabi_dmul>
    af28:	460f      	mov	r7, r1
    af2a:	4606      	mov	r6, r0
    af2c:	f001 fc90 	bl	c850 <__aeabi_d2iz>
    af30:	f001 f98e 	bl	c250 <__aeabi_i2d>
    af34:	4602      	mov	r2, r0
    af36:	460b      	mov	r3, r1
    af38:	4604      	mov	r4, r0
    af3a:	460d      	mov	r5, r1
    af3c:	4630      	mov	r0, r6
    af3e:	4639      	mov	r1, r7
    af40:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    af44:	f001 f836 	bl	bfb4 <__aeabi_dsub>
    af48:	2200      	movs	r2, #0
    af4a:	4b68      	ldr	r3, [pc, #416]	; (b0ec <__ieee754_rem_pio2+0x274>)
    af4c:	f001 f9e6 	bl	c31c <__aeabi_dmul>
    af50:	2200      	movs	r2, #0
    af52:	2300      	movs	r3, #0
    af54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    af58:	f001 fc48 	bl	c7ec <__aeabi_dcmpeq>
    af5c:	2800      	cmp	r0, #0
    af5e:	f000 816d 	beq.w	b23c <__ieee754_rem_pio2+0x3c4>
    af62:	2300      	movs	r3, #0
    af64:	4620      	mov	r0, r4
    af66:	4629      	mov	r1, r5
    af68:	2200      	movs	r2, #0
    af6a:	f001 fc3f 	bl	c7ec <__aeabi_dcmpeq>
    af6e:	2800      	cmp	r0, #0
    af70:	bf14      	ite	ne
    af72:	2301      	movne	r3, #1
    af74:	2302      	moveq	r3, #2
    af76:	2202      	movs	r2, #2
    af78:	495d      	ldr	r1, [pc, #372]	; (b0f0 <__ieee754_rem_pio2+0x278>)
    af7a:	9200      	str	r2, [sp, #0]
    af7c:	9101      	str	r1, [sp, #4]
    af7e:	464a      	mov	r2, r9
    af80:	a80a      	add	r0, sp, #40	; 0x28
    af82:	4641      	mov	r1, r8
    af84:	f000 fac0 	bl	b508 <__kernel_rem_pio2>
    af88:	f1bb 0f00 	cmp.w	fp, #0
    af8c:	f2c0 8148 	blt.w	b220 <__ieee754_rem_pio2+0x3a8>
    af90:	4607      	mov	r7, r0
    af92:	e006      	b.n	afa2 <__ieee754_rem_pio2+0x12a>
    af94:	2200      	movs	r2, #0
    af96:	2300      	movs	r3, #0
    af98:	e9c8 4500 	strd	r4, r5, [r8]
    af9c:	e9c8 2302 	strd	r2, r3, [r8, #8]
    afa0:	2700      	movs	r7, #0
    afa2:	4638      	mov	r0, r7
    afa4:	b011      	add	sp, #68	; 0x44
    afa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afaa:	4602      	mov	r2, r0
    afac:	460b      	mov	r3, r1
    afae:	f001 f801 	bl	bfb4 <__aeabi_dsub>
    afb2:	2700      	movs	r7, #0
    afb4:	e9c8 0102 	strd	r0, r1, [r8, #8]
    afb8:	e9c8 0100 	strd	r0, r1, [r8]
    afbc:	e7f1      	b.n	afa2 <__ieee754_rem_pio2+0x12a>
    afbe:	a340      	add	r3, pc, #256	; (adr r3, b0c0 <__ieee754_rem_pio2+0x248>)
    afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    afc4:	f000 fff6 	bl	bfb4 <__aeabi_dsub>
    afc8:	a33f      	add	r3, pc, #252	; (adr r3, b0c8 <__ieee754_rem_pio2+0x250>)
    afca:	e9d3 2300 	ldrd	r2, r3, [r3]
    afce:	4604      	mov	r4, r0
    afd0:	460d      	mov	r5, r1
    afd2:	f000 ffef 	bl	bfb4 <__aeabi_dsub>
    afd6:	4602      	mov	r2, r0
    afd8:	460b      	mov	r3, r1
    afda:	e9c8 2300 	strd	r2, r3, [r8]
    afde:	4620      	mov	r0, r4
    afe0:	4629      	mov	r1, r5
    afe2:	f000 ffe7 	bl	bfb4 <__aeabi_dsub>
    afe6:	a338      	add	r3, pc, #224	; (adr r3, b0c8 <__ieee754_rem_pio2+0x250>)
    afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
    afec:	f000 ffe2 	bl	bfb4 <__aeabi_dsub>
    aff0:	2701      	movs	r7, #1
    aff2:	e9c8 0102 	strd	r0, r1, [r8, #8]
    aff6:	e7d4      	b.n	afa2 <__ieee754_rem_pio2+0x12a>
    aff8:	f000 ff16 	bl	be28 <fabs>
    affc:	a334      	add	r3, pc, #208	; (adr r3, b0d0 <__ieee754_rem_pio2+0x258>)
    affe:	e9d3 2300 	ldrd	r2, r3, [r3]
    b002:	4604      	mov	r4, r0
    b004:	460d      	mov	r5, r1
    b006:	f001 f989 	bl	c31c <__aeabi_dmul>
    b00a:	2200      	movs	r2, #0
    b00c:	4b39      	ldr	r3, [pc, #228]	; (b0f4 <__ieee754_rem_pio2+0x27c>)
    b00e:	f000 ffd3 	bl	bfb8 <__adddf3>
    b012:	f001 fc1d 	bl	c850 <__aeabi_d2iz>
    b016:	4607      	mov	r7, r0
    b018:	f001 f91a 	bl	c250 <__aeabi_i2d>
    b01c:	a324      	add	r3, pc, #144	; (adr r3, b0b0 <__ieee754_rem_pio2+0x238>)
    b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b022:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b026:	f001 f979 	bl	c31c <__aeabi_dmul>
    b02a:	4602      	mov	r2, r0
    b02c:	460b      	mov	r3, r1
    b02e:	4620      	mov	r0, r4
    b030:	4629      	mov	r1, r5
    b032:	f000 ffbf 	bl	bfb4 <__aeabi_dsub>
    b036:	a320      	add	r3, pc, #128	; (adr r3, b0b8 <__ieee754_rem_pio2+0x240>)
    b038:	e9d3 2300 	ldrd	r2, r3, [r3]
    b03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b044:	f001 f96a 	bl	c31c <__aeabi_dmul>
    b048:	2f1f      	cmp	r7, #31
    b04a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b052:	dc53      	bgt.n	b0fc <__ieee754_rem_pio2+0x284>
    b054:	4b28      	ldr	r3, [pc, #160]	; (b0f8 <__ieee754_rem_pio2+0x280>)
    b056:	1e7a      	subs	r2, r7, #1
    b058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b05c:	42b3      	cmp	r3, r6
    b05e:	d04d      	beq.n	b0fc <__ieee754_rem_pio2+0x284>
    b060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b064:	f000 ffa6 	bl	bfb4 <__aeabi_dsub>
    b068:	4604      	mov	r4, r0
    b06a:	460d      	mov	r5, r1
    b06c:	e9c8 4500 	strd	r4, r5, [r8]
    b070:	4622      	mov	r2, r4
    b072:	462b      	mov	r3, r5
    b074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b078:	f000 ff9c 	bl	bfb4 <__aeabi_dsub>
    b07c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b080:	f000 ff98 	bl	bfb4 <__aeabi_dsub>
    b084:	f1bb 0f00 	cmp.w	fp, #0
    b088:	e9c8 0102 	strd	r0, r1, [r8, #8]
    b08c:	da89      	bge.n	afa2 <__ieee754_rem_pio2+0x12a>
    b08e:	4626      	mov	r6, r4
    b090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b094:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
    b098:	427f      	negs	r7, r7
    b09a:	f8c8 6000 	str.w	r6, [r8]
    b09e:	f8c8 4004 	str.w	r4, [r8, #4]
    b0a2:	f8c8 0008 	str.w	r0, [r8, #8]
    b0a6:	f8c8 300c 	str.w	r3, [r8, #12]
    b0aa:	e77a      	b.n	afa2 <__ieee754_rem_pio2+0x12a>
    b0ac:	f3af 8000 	nop.w
    b0b0:	54400000 	.word	0x54400000
    b0b4:	3ff921fb 	.word	0x3ff921fb
    b0b8:	1a626331 	.word	0x1a626331
    b0bc:	3dd0b461 	.word	0x3dd0b461
    b0c0:	1a600000 	.word	0x1a600000
    b0c4:	3dd0b461 	.word	0x3dd0b461
    b0c8:	2e037073 	.word	0x2e037073
    b0cc:	3ba3198a 	.word	0x3ba3198a
    b0d0:	6dc9c883 	.word	0x6dc9c883
    b0d4:	3fe45f30 	.word	0x3fe45f30
    b0d8:	3fe921fb 	.word	0x3fe921fb
    b0dc:	4002d97b 	.word	0x4002d97b
    b0e0:	3ff921fb 	.word	0x3ff921fb
    b0e4:	413921fb 	.word	0x413921fb
    b0e8:	7fefffff 	.word	0x7fefffff
    b0ec:	41700000 	.word	0x41700000
    b0f0:	00014138 	.word	0x00014138
    b0f4:	3fe00000 	.word	0x3fe00000
    b0f8:	000140b8 	.word	0x000140b8
    b0fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b100:	f000 ff58 	bl	bfb4 <__aeabi_dsub>
    b104:	1536      	asrs	r6, r6, #20
    b106:	f3c1 530a 	ubfx	r3, r1, #20, #11
    b10a:	1af3      	subs	r3, r6, r3
    b10c:	4604      	mov	r4, r0
    b10e:	460d      	mov	r5, r1
    b110:	2b10      	cmp	r3, #16
    b112:	e9c8 4500 	strd	r4, r5, [r8]
    b116:	ddab      	ble.n	b070 <__ieee754_rem_pio2+0x1f8>
    b118:	a35b      	add	r3, pc, #364	; (adr r3, b288 <__ieee754_rem_pio2+0x410>)
    b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b11e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b122:	f001 f8fb 	bl	c31c <__aeabi_dmul>
    b126:	4604      	mov	r4, r0
    b128:	460d      	mov	r5, r1
    b12a:	4622      	mov	r2, r4
    b12c:	462b      	mov	r3, r5
    b12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b132:	f000 ff3f 	bl	bfb4 <__aeabi_dsub>
    b136:	e9cd 0108 	strd	r0, r1, [sp, #32]
    b13a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b142:	f000 ff37 	bl	bfb4 <__aeabi_dsub>
    b146:	4622      	mov	r2, r4
    b148:	462b      	mov	r3, r5
    b14a:	f000 ff33 	bl	bfb4 <__aeabi_dsub>
    b14e:	a350      	add	r3, pc, #320	; (adr r3, b290 <__ieee754_rem_pio2+0x418>)
    b150:	e9d3 2300 	ldrd	r2, r3, [r3]
    b154:	4604      	mov	r4, r0
    b156:	460d      	mov	r5, r1
    b158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b15c:	f001 f8de 	bl	c31c <__aeabi_dmul>
    b160:	4622      	mov	r2, r4
    b162:	462b      	mov	r3, r5
    b164:	f000 ff26 	bl	bfb4 <__aeabi_dsub>
    b168:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b16c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b170:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    b174:	f000 ff1e 	bl	bfb4 <__aeabi_dsub>
    b178:	f3c1 530a 	ubfx	r3, r1, #20, #11
    b17c:	1af6      	subs	r6, r6, r3
    b17e:	4604      	mov	r4, r0
    b180:	460d      	mov	r5, r1
    b182:	2e31      	cmp	r6, #49	; 0x31
    b184:	e9c8 4500 	strd	r4, r5, [r8]
    b188:	dd78      	ble.n	b27c <__ieee754_rem_pio2+0x404>
    b18a:	a343      	add	r3, pc, #268	; (adr r3, b298 <__ieee754_rem_pio2+0x420>)
    b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b194:	f001 f8c2 	bl	c31c <__aeabi_dmul>
    b198:	4604      	mov	r4, r0
    b19a:	460d      	mov	r5, r1
    b19c:	4622      	mov	r2, r4
    b19e:	462b      	mov	r3, r5
    b1a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    b1a4:	f000 ff06 	bl	bfb4 <__aeabi_dsub>
    b1a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b1ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b1b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    b1b4:	f000 fefe 	bl	bfb4 <__aeabi_dsub>
    b1b8:	4622      	mov	r2, r4
    b1ba:	462b      	mov	r3, r5
    b1bc:	f000 fefa 	bl	bfb4 <__aeabi_dsub>
    b1c0:	a337      	add	r3, pc, #220	; (adr r3, b2a0 <__ieee754_rem_pio2+0x428>)
    b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1c6:	4604      	mov	r4, r0
    b1c8:	460d      	mov	r5, r1
    b1ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b1ce:	f001 f8a5 	bl	c31c <__aeabi_dmul>
    b1d2:	4622      	mov	r2, r4
    b1d4:	462b      	mov	r3, r5
    b1d6:	f000 feed 	bl	bfb4 <__aeabi_dsub>
    b1da:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b1de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b1e2:	e73d      	b.n	b060 <__ieee754_rem_pio2+0x1e8>
    b1e4:	f000 fee8 	bl	bfb8 <__adddf3>
    b1e8:	4b31      	ldr	r3, [pc, #196]	; (b2b0 <__ieee754_rem_pio2+0x438>)
    b1ea:	429e      	cmp	r6, r3
    b1ec:	4604      	mov	r4, r0
    b1ee:	460d      	mov	r5, r1
    b1f0:	d026      	beq.n	b240 <__ieee754_rem_pio2+0x3c8>
    b1f2:	a32d      	add	r3, pc, #180	; (adr r3, b2a8 <__ieee754_rem_pio2+0x430>)
    b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1f8:	f000 fede 	bl	bfb8 <__adddf3>
    b1fc:	4602      	mov	r2, r0
    b1fe:	460b      	mov	r3, r1
    b200:	e9c8 2300 	strd	r2, r3, [r8]
    b204:	4620      	mov	r0, r4
    b206:	4629      	mov	r1, r5
    b208:	f000 fed4 	bl	bfb4 <__aeabi_dsub>
    b20c:	a326      	add	r3, pc, #152	; (adr r3, b2a8 <__ieee754_rem_pio2+0x430>)
    b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b212:	f000 fed1 	bl	bfb8 <__adddf3>
    b216:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    b21a:	e9c8 0102 	strd	r0, r1, [r8, #8]
    b21e:	e6c0      	b.n	afa2 <__ieee754_rem_pio2+0x12a>
    b220:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b224:	f8d8 300c 	ldr.w	r3, [r8, #12]
    b228:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    b22c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    b230:	4247      	negs	r7, r0
    b232:	f8c8 2004 	str.w	r2, [r8, #4]
    b236:	f8c8 300c 	str.w	r3, [r8, #12]
    b23a:	e6b2      	b.n	afa2 <__ieee754_rem_pio2+0x12a>
    b23c:	2303      	movs	r3, #3
    b23e:	e69a      	b.n	af76 <__ieee754_rem_pio2+0xfe>
    b240:	a311      	add	r3, pc, #68	; (adr r3, b288 <__ieee754_rem_pio2+0x410>)
    b242:	e9d3 2300 	ldrd	r2, r3, [r3]
    b246:	f000 feb7 	bl	bfb8 <__adddf3>
    b24a:	a311      	add	r3, pc, #68	; (adr r3, b290 <__ieee754_rem_pio2+0x418>)
    b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b250:	4604      	mov	r4, r0
    b252:	460d      	mov	r5, r1
    b254:	f000 feb0 	bl	bfb8 <__adddf3>
    b258:	4602      	mov	r2, r0
    b25a:	460b      	mov	r3, r1
    b25c:	e9c8 2300 	strd	r2, r3, [r8]
    b260:	4620      	mov	r0, r4
    b262:	4629      	mov	r1, r5
    b264:	f000 fea6 	bl	bfb4 <__aeabi_dsub>
    b268:	a309      	add	r3, pc, #36	; (adr r3, b290 <__ieee754_rem_pio2+0x418>)
    b26a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b26e:	f000 fea3 	bl	bfb8 <__adddf3>
    b272:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    b276:	e9c8 0102 	strd	r0, r1, [r8, #8]
    b27a:	e692      	b.n	afa2 <__ieee754_rem_pio2+0x12a>
    b27c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b280:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b284:	e6f4      	b.n	b070 <__ieee754_rem_pio2+0x1f8>
    b286:	bf00      	nop
    b288:	1a600000 	.word	0x1a600000
    b28c:	3dd0b461 	.word	0x3dd0b461
    b290:	2e037073 	.word	0x2e037073
    b294:	3ba3198a 	.word	0x3ba3198a
    b298:	2e000000 	.word	0x2e000000
    b29c:	3ba3198a 	.word	0x3ba3198a
    b2a0:	252049c1 	.word	0x252049c1
    b2a4:	397b839a 	.word	0x397b839a
    b2a8:	1a626331 	.word	0x1a626331
    b2ac:	3dd0b461 	.word	0x3dd0b461
    b2b0:	3ff921fb 	.word	0x3ff921fb
    b2b4:	f3af 8000 	nop.w

0000b2b8 <__kernel_cos>:
    b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2bc:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
    b2c0:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
    b2c4:	b085      	sub	sp, #20
    b2c6:	4606      	mov	r6, r0
    b2c8:	460f      	mov	r7, r1
    b2ca:	4692      	mov	sl, r2
    b2cc:	469b      	mov	fp, r3
    b2ce:	da6b      	bge.n	b3a8 <__kernel_cos+0xf0>
    b2d0:	f001 fabe 	bl	c850 <__aeabi_d2iz>
    b2d4:	2800      	cmp	r0, #0
    b2d6:	f000 80eb 	beq.w	b4b0 <__kernel_cos+0x1f8>
    b2da:	4632      	mov	r2, r6
    b2dc:	463b      	mov	r3, r7
    b2de:	4630      	mov	r0, r6
    b2e0:	4639      	mov	r1, r7
    b2e2:	f001 f81b 	bl	c31c <__aeabi_dmul>
    b2e6:	a376      	add	r3, pc, #472	; (adr r3, b4c0 <__kernel_cos+0x208>)
    b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2ec:	4604      	mov	r4, r0
    b2ee:	460d      	mov	r5, r1
    b2f0:	f001 f814 	bl	c31c <__aeabi_dmul>
    b2f4:	a374      	add	r3, pc, #464	; (adr r3, b4c8 <__kernel_cos+0x210>)
    b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2fa:	f000 fe5d 	bl	bfb8 <__adddf3>
    b2fe:	4622      	mov	r2, r4
    b300:	462b      	mov	r3, r5
    b302:	f001 f80b 	bl	c31c <__aeabi_dmul>
    b306:	a372      	add	r3, pc, #456	; (adr r3, b4d0 <__kernel_cos+0x218>)
    b308:	e9d3 2300 	ldrd	r2, r3, [r3]
    b30c:	f000 fe52 	bl	bfb4 <__aeabi_dsub>
    b310:	4622      	mov	r2, r4
    b312:	462b      	mov	r3, r5
    b314:	f001 f802 	bl	c31c <__aeabi_dmul>
    b318:	a36f      	add	r3, pc, #444	; (adr r3, b4d8 <__kernel_cos+0x220>)
    b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b31e:	f000 fe4b 	bl	bfb8 <__adddf3>
    b322:	4622      	mov	r2, r4
    b324:	462b      	mov	r3, r5
    b326:	f000 fff9 	bl	c31c <__aeabi_dmul>
    b32a:	a36d      	add	r3, pc, #436	; (adr r3, b4e0 <__kernel_cos+0x228>)
    b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b330:	f000 fe40 	bl	bfb4 <__aeabi_dsub>
    b334:	4622      	mov	r2, r4
    b336:	462b      	mov	r3, r5
    b338:	f000 fff0 	bl	c31c <__aeabi_dmul>
    b33c:	a36a      	add	r3, pc, #424	; (adr r3, b4e8 <__kernel_cos+0x230>)
    b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b342:	f000 fe39 	bl	bfb8 <__adddf3>
    b346:	4622      	mov	r2, r4
    b348:	462b      	mov	r3, r5
    b34a:	f000 ffe7 	bl	c31c <__aeabi_dmul>
    b34e:	e9cd 0100 	strd	r0, r1, [sp]
    b352:	4620      	mov	r0, r4
    b354:	4629      	mov	r1, r5
    b356:	2200      	movs	r2, #0
    b358:	4b65      	ldr	r3, [pc, #404]	; (b4f0 <__kernel_cos+0x238>)
    b35a:	f000 ffdf 	bl	c31c <__aeabi_dmul>
    b35e:	e9dd 2300 	ldrd	r2, r3, [sp]
    b362:	4680      	mov	r8, r0
    b364:	4689      	mov	r9, r1
    b366:	4620      	mov	r0, r4
    b368:	4629      	mov	r1, r5
    b36a:	f000 ffd7 	bl	c31c <__aeabi_dmul>
    b36e:	4652      	mov	r2, sl
    b370:	4604      	mov	r4, r0
    b372:	460d      	mov	r5, r1
    b374:	465b      	mov	r3, fp
    b376:	4630      	mov	r0, r6
    b378:	4639      	mov	r1, r7
    b37a:	f000 ffcf 	bl	c31c <__aeabi_dmul>
    b37e:	4602      	mov	r2, r0
    b380:	460b      	mov	r3, r1
    b382:	4620      	mov	r0, r4
    b384:	4629      	mov	r1, r5
    b386:	f000 fe15 	bl	bfb4 <__aeabi_dsub>
    b38a:	4602      	mov	r2, r0
    b38c:	460b      	mov	r3, r1
    b38e:	4640      	mov	r0, r8
    b390:	4649      	mov	r1, r9
    b392:	f000 fe0f 	bl	bfb4 <__aeabi_dsub>
    b396:	4602      	mov	r2, r0
    b398:	460b      	mov	r3, r1
    b39a:	2000      	movs	r0, #0
    b39c:	4955      	ldr	r1, [pc, #340]	; (b4f4 <__kernel_cos+0x23c>)
    b39e:	f000 fe09 	bl	bfb4 <__aeabi_dsub>
    b3a2:	b005      	add	sp, #20
    b3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3a8:	4602      	mov	r2, r0
    b3aa:	460b      	mov	r3, r1
    b3ac:	f000 ffb6 	bl	c31c <__aeabi_dmul>
    b3b0:	a343      	add	r3, pc, #268	; (adr r3, b4c0 <__kernel_cos+0x208>)
    b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3b6:	4604      	mov	r4, r0
    b3b8:	460d      	mov	r5, r1
    b3ba:	f000 ffaf 	bl	c31c <__aeabi_dmul>
    b3be:	a342      	add	r3, pc, #264	; (adr r3, b4c8 <__kernel_cos+0x210>)
    b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3c4:	f000 fdf8 	bl	bfb8 <__adddf3>
    b3c8:	4622      	mov	r2, r4
    b3ca:	462b      	mov	r3, r5
    b3cc:	f000 ffa6 	bl	c31c <__aeabi_dmul>
    b3d0:	a33f      	add	r3, pc, #252	; (adr r3, b4d0 <__kernel_cos+0x218>)
    b3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3d6:	f000 fded 	bl	bfb4 <__aeabi_dsub>
    b3da:	4622      	mov	r2, r4
    b3dc:	462b      	mov	r3, r5
    b3de:	f000 ff9d 	bl	c31c <__aeabi_dmul>
    b3e2:	a33d      	add	r3, pc, #244	; (adr r3, b4d8 <__kernel_cos+0x220>)
    b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3e8:	f000 fde6 	bl	bfb8 <__adddf3>
    b3ec:	4622      	mov	r2, r4
    b3ee:	462b      	mov	r3, r5
    b3f0:	f000 ff94 	bl	c31c <__aeabi_dmul>
    b3f4:	a33a      	add	r3, pc, #232	; (adr r3, b4e0 <__kernel_cos+0x228>)
    b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3fa:	f000 fddb 	bl	bfb4 <__aeabi_dsub>
    b3fe:	4622      	mov	r2, r4
    b400:	462b      	mov	r3, r5
    b402:	f000 ff8b 	bl	c31c <__aeabi_dmul>
    b406:	a338      	add	r3, pc, #224	; (adr r3, b4e8 <__kernel_cos+0x230>)
    b408:	e9d3 2300 	ldrd	r2, r3, [r3]
    b40c:	f000 fdd4 	bl	bfb8 <__adddf3>
    b410:	462b      	mov	r3, r5
    b412:	4622      	mov	r2, r4
    b414:	f000 ff82 	bl	c31c <__aeabi_dmul>
    b418:	4b37      	ldr	r3, [pc, #220]	; (b4f8 <__kernel_cos+0x240>)
    b41a:	4599      	cmp	r9, r3
    b41c:	e9cd 0100 	strd	r0, r1, [sp]
    b420:	dd97      	ble.n	b352 <__kernel_cos+0x9a>
    b422:	4b36      	ldr	r3, [pc, #216]	; (b4fc <__kernel_cos+0x244>)
    b424:	4599      	cmp	r9, r3
    b426:	f04f 0200 	mov.w	r2, #0
    b42a:	dc39      	bgt.n	b4a0 <__kernel_cos+0x1e8>
    b42c:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
    b430:	2200      	movs	r2, #0
    b432:	2000      	movs	r0, #0
    b434:	492f      	ldr	r1, [pc, #188]	; (b4f4 <__kernel_cos+0x23c>)
    b436:	4690      	mov	r8, r2
    b438:	4699      	mov	r9, r3
    b43a:	f000 fdbb 	bl	bfb4 <__aeabi_dsub>
    b43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b442:	4620      	mov	r0, r4
    b444:	4629      	mov	r1, r5
    b446:	2200      	movs	r2, #0
    b448:	4b29      	ldr	r3, [pc, #164]	; (b4f0 <__kernel_cos+0x238>)
    b44a:	f000 ff67 	bl	c31c <__aeabi_dmul>
    b44e:	4642      	mov	r2, r8
    b450:	464b      	mov	r3, r9
    b452:	f000 fdaf 	bl	bfb4 <__aeabi_dsub>
    b456:	e9dd 2300 	ldrd	r2, r3, [sp]
    b45a:	4680      	mov	r8, r0
    b45c:	4689      	mov	r9, r1
    b45e:	4620      	mov	r0, r4
    b460:	4629      	mov	r1, r5
    b462:	f000 ff5b 	bl	c31c <__aeabi_dmul>
    b466:	4652      	mov	r2, sl
    b468:	4604      	mov	r4, r0
    b46a:	460d      	mov	r5, r1
    b46c:	465b      	mov	r3, fp
    b46e:	4630      	mov	r0, r6
    b470:	4639      	mov	r1, r7
    b472:	f000 ff53 	bl	c31c <__aeabi_dmul>
    b476:	4602      	mov	r2, r0
    b478:	460b      	mov	r3, r1
    b47a:	4620      	mov	r0, r4
    b47c:	4629      	mov	r1, r5
    b47e:	f000 fd99 	bl	bfb4 <__aeabi_dsub>
    b482:	4602      	mov	r2, r0
    b484:	460b      	mov	r3, r1
    b486:	4640      	mov	r0, r8
    b488:	4649      	mov	r1, r9
    b48a:	f000 fd93 	bl	bfb4 <__aeabi_dsub>
    b48e:	4602      	mov	r2, r0
    b490:	460b      	mov	r3, r1
    b492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b496:	f000 fd8d 	bl	bfb4 <__aeabi_dsub>
    b49a:	b005      	add	sp, #20
    b49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4a0:	4b17      	ldr	r3, [pc, #92]	; (b500 <__kernel_cos+0x248>)
    b4a2:	f8df 9060 	ldr.w	r9, [pc, #96]	; b504 <__kernel_cos+0x24c>
    b4a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b4aa:	f04f 0800 	mov.w	r8, #0
    b4ae:	e7c8      	b.n	b442 <__kernel_cos+0x18a>
    b4b0:	4910      	ldr	r1, [pc, #64]	; (b4f4 <__kernel_cos+0x23c>)
    b4b2:	2000      	movs	r0, #0
    b4b4:	b005      	add	sp, #20
    b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4ba:	bf00      	nop
    b4bc:	f3af 8000 	nop.w
    b4c0:	be8838d4 	.word	0xbe8838d4
    b4c4:	bda8fae9 	.word	0xbda8fae9
    b4c8:	bdb4b1c4 	.word	0xbdb4b1c4
    b4cc:	3e21ee9e 	.word	0x3e21ee9e
    b4d0:	809c52ad 	.word	0x809c52ad
    b4d4:	3e927e4f 	.word	0x3e927e4f
    b4d8:	19cb1590 	.word	0x19cb1590
    b4dc:	3efa01a0 	.word	0x3efa01a0
    b4e0:	16c15177 	.word	0x16c15177
    b4e4:	3f56c16c 	.word	0x3f56c16c
    b4e8:	5555554c 	.word	0x5555554c
    b4ec:	3fa55555 	.word	0x3fa55555
    b4f0:	3fe00000 	.word	0x3fe00000
    b4f4:	3ff00000 	.word	0x3ff00000
    b4f8:	3fd33332 	.word	0x3fd33332
    b4fc:	3fe90000 	.word	0x3fe90000
    b500:	3fe70000 	.word	0x3fe70000
    b504:	3fd20000 	.word	0x3fd20000

0000b508 <__kernel_rem_pio2>:
    b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b50c:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
    b510:	4c1b      	ldr	r4, [pc, #108]	; (b580 <__kernel_rem_pio2+0x78>)
    b512:	9ea6      	ldr	r6, [sp, #664]	; 0x298
    b514:	4d1b      	ldr	r5, [pc, #108]	; (b584 <__kernel_rem_pio2+0x7c>)
    b516:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    b51a:	940c      	str	r4, [sp, #48]	; 0x30
    b51c:	1ed4      	subs	r4, r2, #3
    b51e:	fb85 6504 	smull	r6, r5, r5, r4
    b522:	17e4      	asrs	r4, r4, #31
    b524:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
    b528:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    b52c:	940e      	str	r4, [sp, #56]	; 0x38
    b52e:	4699      	mov	r9, r3
    b530:	9007      	str	r0, [sp, #28]
    b532:	43e3      	mvns	r3, r4
    b534:	910b      	str	r1, [sp, #44]	; 0x2c
    b536:	980e      	ldr	r0, [sp, #56]	; 0x38
    b538:	990c      	ldr	r1, [sp, #48]	; 0x30
    b53a:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
    b53e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b542:	9404      	str	r4, [sp, #16]
    b544:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b548:	1b06      	subs	r6, r0, r4
    b54a:	1864      	adds	r4, r4, r1
    b54c:	930a      	str	r3, [sp, #40]	; 0x28
    b54e:	d41b      	bmi.n	b588 <__kernel_rem_pio2+0x80>
    b550:	98a7      	ldr	r0, [sp, #668]	; 0x29c
    b552:	4434      	add	r4, r6
    b554:	3401      	adds	r4, #1
    b556:	f10d 0888 	add.w	r8, sp, #136	; 0x88
    b55a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    b55e:	2700      	movs	r7, #0
    b560:	e009      	b.n	b576 <__kernel_rem_pio2+0x6e>
    b562:	59e8      	ldr	r0, [r5, r7]
    b564:	f000 fe74 	bl	c250 <__aeabi_i2d>
    b568:	3601      	adds	r6, #1
    b56a:	42a6      	cmp	r6, r4
    b56c:	e9e8 0102 	strd	r0, r1, [r8, #8]!
    b570:	f107 0704 	add.w	r7, r7, #4
    b574:	d008      	beq.n	b588 <__kernel_rem_pio2+0x80>
    b576:	2e00      	cmp	r6, #0
    b578:	daf3      	bge.n	b562 <__kernel_rem_pio2+0x5a>
    b57a:	2000      	movs	r0, #0
    b57c:	2100      	movs	r1, #0
    b57e:	e7f3      	b.n	b568 <__kernel_rem_pio2+0x60>
    b580:	00014240 	.word	0x00014240
    b584:	2aaaaaab 	.word	0x2aaaaaab
    b588:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    b58a:	2c00      	cmp	r4, #0
    b58c:	db2d      	blt.n	b5ea <__kernel_rem_pio2+0xe2>
    b58e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    b590:	ae74      	add	r6, sp, #464	; 0x1d0
    b592:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
    b596:	a824      	add	r0, sp, #144	; 0x90
    b598:	eb00 0ac9 	add.w	sl, r0, r9, lsl #3
    b59c:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
    b5a0:	f8cd b00c 	str.w	fp, [sp, #12]
    b5a4:	9c04      	ldr	r4, [sp, #16]
    b5a6:	2c00      	cmp	r4, #0
    b5a8:	f2c0 8185 	blt.w	b8b6 <__kernel_rem_pio2+0x3ae>
    b5ac:	9e07      	ldr	r6, [sp, #28]
    b5ae:	4657      	mov	r7, sl
    b5b0:	f1a6 0b08 	sub.w	fp, r6, #8
    b5b4:	2400      	movs	r4, #0
    b5b6:	2500      	movs	r5, #0
    b5b8:	2600      	movs	r6, #0
    b5ba:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
    b5be:	e9fb 0102 	ldrd	r0, r1, [fp, #8]!
    b5c2:	f000 feab 	bl	c31c <__aeabi_dmul>
    b5c6:	4602      	mov	r2, r0
    b5c8:	460b      	mov	r3, r1
    b5ca:	4620      	mov	r0, r4
    b5cc:	4629      	mov	r1, r5
    b5ce:	f000 fcf3 	bl	bfb8 <__adddf3>
    b5d2:	3601      	adds	r6, #1
    b5d4:	454e      	cmp	r6, r9
    b5d6:	4604      	mov	r4, r0
    b5d8:	460d      	mov	r5, r1
    b5da:	d1ee      	bne.n	b5ba <__kernel_rem_pio2+0xb2>
    b5dc:	e9e8 4502 	strd	r4, r5, [r8, #8]!
    b5e0:	9e03      	ldr	r6, [sp, #12]
    b5e2:	45b0      	cmp	r8, r6
    b5e4:	f10a 0a08 	add.w	sl, sl, #8
    b5e8:	d1dc      	bne.n	b5a4 <__kernel_rem_pio2+0x9c>
    b5ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    b5ec:	9603      	str	r6, [sp, #12]
    b5ee:	ac10      	add	r4, sp, #64	; 0x40
    b5f0:	9402      	str	r4, [sp, #8]
    b5f2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    b5f6:	940f      	str	r4, [sp, #60]	; 0x3c
    b5f8:	9c03      	ldr	r4, [sp, #12]
    b5fa:	9e03      	ldr	r6, [sp, #12]
    b5fc:	00e4      	lsls	r4, r4, #3
    b5fe:	ab9c      	add	r3, sp, #624	; 0x270
    b600:	4423      	add	r3, r4
    b602:	2e00      	cmp	r6, #0
    b604:	9406      	str	r4, [sp, #24]
    b606:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
    b60a:	dd2e      	ble.n	b66a <__kernel_rem_pio2+0x162>
    b60c:	9e06      	ldr	r6, [sp, #24]
    b60e:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
    b612:	44b2      	add	sl, r6
    b614:	9e03      	ldr	r6, [sp, #12]
    b616:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
    b61a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
    b61e:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
    b622:	2200      	movs	r2, #0
    b624:	4baa      	ldr	r3, [pc, #680]	; (b8d0 <__kernel_rem_pio2+0x3c8>)
    b626:	4620      	mov	r0, r4
    b628:	4629      	mov	r1, r5
    b62a:	f000 fe77 	bl	c31c <__aeabi_dmul>
    b62e:	f001 f90f 	bl	c850 <__aeabi_d2iz>
    b632:	f000 fe0d 	bl	c250 <__aeabi_i2d>
    b636:	2200      	movs	r2, #0
    b638:	4ba6      	ldr	r3, [pc, #664]	; (b8d4 <__kernel_rem_pio2+0x3cc>)
    b63a:	4606      	mov	r6, r0
    b63c:	460f      	mov	r7, r1
    b63e:	f000 fe6d 	bl	c31c <__aeabi_dmul>
    b642:	4602      	mov	r2, r0
    b644:	460b      	mov	r3, r1
    b646:	4620      	mov	r0, r4
    b648:	4629      	mov	r1, r5
    b64a:	f000 fcb3 	bl	bfb4 <__aeabi_dsub>
    b64e:	f001 f8ff 	bl	c850 <__aeabi_d2iz>
    b652:	4632      	mov	r2, r6
    b654:	f848 0f04 	str.w	r0, [r8, #4]!
    b658:	463b      	mov	r3, r7
    b65a:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
    b65e:	f000 fcab 	bl	bfb8 <__adddf3>
    b662:	45d8      	cmp	r8, fp
    b664:	4604      	mov	r4, r0
    b666:	460d      	mov	r5, r1
    b668:	d1db      	bne.n	b622 <__kernel_rem_pio2+0x11a>
    b66a:	4620      	mov	r0, r4
    b66c:	4629      	mov	r1, r5
    b66e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b670:	f000 fc06 	bl	be80 <scalbn>
    b674:	2200      	movs	r2, #0
    b676:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    b67a:	4604      	mov	r4, r0
    b67c:	460d      	mov	r5, r1
    b67e:	f000 fe4d 	bl	c31c <__aeabi_dmul>
    b682:	f7ff fb1d 	bl	acc0 <floor>
    b686:	2200      	movs	r2, #0
    b688:	4b93      	ldr	r3, [pc, #588]	; (b8d8 <__kernel_rem_pio2+0x3d0>)
    b68a:	f000 fe47 	bl	c31c <__aeabi_dmul>
    b68e:	4602      	mov	r2, r0
    b690:	460b      	mov	r3, r1
    b692:	4620      	mov	r0, r4
    b694:	4629      	mov	r1, r5
    b696:	f000 fc8d 	bl	bfb4 <__aeabi_dsub>
    b69a:	4604      	mov	r4, r0
    b69c:	460d      	mov	r5, r1
    b69e:	f001 f8d7 	bl	c850 <__aeabi_d2iz>
    b6a2:	4682      	mov	sl, r0
    b6a4:	f000 fdd4 	bl	c250 <__aeabi_i2d>
    b6a8:	4602      	mov	r2, r0
    b6aa:	460b      	mov	r3, r1
    b6ac:	4620      	mov	r0, r4
    b6ae:	4629      	mov	r1, r5
    b6b0:	f000 fc80 	bl	bfb4 <__aeabi_dsub>
    b6b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b6b6:	2c00      	cmp	r4, #0
    b6b8:	4606      	mov	r6, r0
    b6ba:	460f      	mov	r7, r1
    b6bc:	f340 80c9 	ble.w	b852 <__kernel_rem_pio2+0x34a>
    b6c0:	9c03      	ldr	r4, [sp, #12]
    b6c2:	aa10      	add	r2, sp, #64	; 0x40
    b6c4:	1e61      	subs	r1, r4, #1
    b6c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b6c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    b6cc:	f1c4 0018 	rsb	r0, r4, #24
    b6d0:	fa43 f200 	asr.w	r2, r3, r0
    b6d4:	f1c4 0517 	rsb	r5, r4, #23
    b6d8:	fa02 f000 	lsl.w	r0, r2, r0
    b6dc:	ac10      	add	r4, sp, #64	; 0x40
    b6de:	1a1b      	subs	r3, r3, r0
    b6e0:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
    b6e4:	4492      	add	sl, r2
    b6e6:	fa43 f505 	asr.w	r5, r3, r5
    b6ea:	2d00      	cmp	r5, #0
    b6ec:	dd2c      	ble.n	b748 <__kernel_rem_pio2+0x240>
    b6ee:	9c03      	ldr	r4, [sp, #12]
    b6f0:	2c00      	cmp	r4, #0
    b6f2:	f10a 0a01 	add.w	sl, sl, #1
    b6f6:	f340 80e9 	ble.w	b8cc <__kernel_rem_pio2+0x3c4>
    b6fa:	ab10      	add	r3, sp, #64	; 0x40
    b6fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    b700:	2400      	movs	r4, #0
    b702:	f853 1b04 	ldr.w	r1, [r3], #4
    b706:	f1c1 12ff 	rsb	r2, r1, #16711935	; 0xff00ff
    b70a:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
    b70e:	b914      	cbnz	r4, b716 <__kernel_rem_pio2+0x20e>
    b710:	f1c1 7280 	rsb	r2, r1, #16777216	; 0x1000000
    b714:	b111      	cbz	r1, b71c <__kernel_rem_pio2+0x214>
    b716:	f843 2c04 	str.w	r2, [r3, #-4]
    b71a:	2401      	movs	r4, #1
    b71c:	4283      	cmp	r3, r0
    b71e:	d1f0      	bne.n	b702 <__kernel_rem_pio2+0x1fa>
    b720:	980a      	ldr	r0, [sp, #40]	; 0x28
    b722:	2800      	cmp	r0, #0
    b724:	dd0d      	ble.n	b742 <__kernel_rem_pio2+0x23a>
    b726:	2801      	cmp	r0, #1
    b728:	f000 80b4 	beq.w	b894 <__kernel_rem_pio2+0x38c>
    b72c:	2802      	cmp	r0, #2
    b72e:	d108      	bne.n	b742 <__kernel_rem_pio2+0x23a>
    b730:	9903      	ldr	r1, [sp, #12]
    b732:	a810      	add	r0, sp, #64	; 0x40
    b734:	1e4b      	subs	r3, r1, #1
    b736:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    b73a:	f3c2 0215 	ubfx	r2, r2, #0, #22
    b73e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    b742:	2d02      	cmp	r5, #2
    b744:	f000 808d 	beq.w	b862 <__kernel_rem_pio2+0x35a>
    b748:	4630      	mov	r0, r6
    b74a:	4639      	mov	r1, r7
    b74c:	2200      	movs	r2, #0
    b74e:	2300      	movs	r3, #0
    b750:	f001 f84c 	bl	c7ec <__aeabi_dcmpeq>
    b754:	2800      	cmp	r0, #0
    b756:	f000 80c5 	beq.w	b8e4 <__kernel_rem_pio2+0x3dc>
    b75a:	9c03      	ldr	r4, [sp, #12]
    b75c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    b75e:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    b762:	4546      	cmp	r6, r8
    b764:	dc0d      	bgt.n	b782 <__kernel_rem_pio2+0x27a>
    b766:	a810      	add	r0, sp, #64	; 0x40
    b768:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    b76c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b76e:	2200      	movs	r2, #0
    b770:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    b774:	4283      	cmp	r3, r0
    b776:	ea42 0201 	orr.w	r2, r2, r1
    b77a:	d1f9      	bne.n	b770 <__kernel_rem_pio2+0x268>
    b77c:	2a00      	cmp	r2, #0
    b77e:	f040 824d 	bne.w	bc1c <__kernel_rem_pio2+0x714>
    b782:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    b784:	ae10      	add	r6, sp, #64	; 0x40
    b786:	1e62      	subs	r2, r4, #1
    b788:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
    b78c:	2b00      	cmp	r3, #0
    b78e:	f040 8243 	bne.w	bc18 <__kernel_rem_pio2+0x710>
    b792:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b796:	2301      	movs	r3, #1
    b798:	f852 1d04 	ldr.w	r1, [r2, #-4]!
    b79c:	3301      	adds	r3, #1
    b79e:	2900      	cmp	r1, #0
    b7a0:	d0fa      	beq.n	b798 <__kernel_rem_pio2+0x290>
    b7a2:	9c03      	ldr	r4, [sp, #12]
    b7a4:	9e03      	ldr	r6, [sp, #12]
    b7a6:	441c      	add	r4, r3
    b7a8:	1c73      	adds	r3, r6, #1
    b7aa:	42a3      	cmp	r3, r4
    b7ac:	940d      	str	r4, [sp, #52]	; 0x34
    b7ae:	dc4a      	bgt.n	b846 <__kernel_rem_pio2+0x33e>
    b7b0:	9c04      	ldr	r4, [sp, #16]
    b7b2:	4631      	mov	r1, r6
    b7b4:	4632      	mov	r2, r6
    b7b6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    b7b8:	4423      	add	r3, r4
    b7ba:	4432      	add	r2, r6
    b7bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    b7be:	9e03      	ldr	r6, [sp, #12]
    b7c0:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    b7c4:	1ba3      	subs	r3, r4, r6
    b7c6:	9ea7      	ldr	r6, [sp, #668]	; 0x29c
    b7c8:	a824      	add	r0, sp, #144	; 0x90
    b7ca:	4449      	add	r1, r9
    b7cc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    b7d0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b7d4:	9e06      	ldr	r6, [sp, #24]
    b7d6:	9409      	str	r4, [sp, #36]	; 0x24
    b7d8:	ac74      	add	r4, sp, #464	; 0x1d0
    b7da:	00db      	lsls	r3, r3, #3
    b7dc:	4434      	add	r4, r6
    b7de:	eb00 0bcb 	add.w	fp, r0, fp, lsl #3
    b7e2:	9203      	str	r2, [sp, #12]
    b7e4:	9308      	str	r3, [sp, #32]
    b7e6:	9406      	str	r4, [sp, #24]
    b7e8:	f04f 0800 	mov.w	r8, #0
    b7ec:	9c03      	ldr	r4, [sp, #12]
    b7ee:	f854 0f04 	ldr.w	r0, [r4, #4]!
    b7f2:	9403      	str	r4, [sp, #12]
    b7f4:	f000 fd2c 	bl	c250 <__aeabi_i2d>
    b7f8:	9e04      	ldr	r6, [sp, #16]
    b7fa:	2e00      	cmp	r6, #0
    b7fc:	f108 0808 	add.w	r8, r8, #8
    b800:	e9eb 0102 	strd	r0, r1, [fp, #8]!
    b804:	db22      	blt.n	b84c <__kernel_rem_pio2+0x344>
    b806:	9c07      	ldr	r4, [sp, #28]
    b808:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b80a:	f1a4 0a08 	sub.w	sl, r4, #8
    b80e:	4447      	add	r7, r8
    b810:	2400      	movs	r4, #0
    b812:	2500      	movs	r5, #0
    b814:	2600      	movs	r6, #0
    b816:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
    b81a:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
    b81e:	f000 fd7d 	bl	c31c <__aeabi_dmul>
    b822:	4602      	mov	r2, r0
    b824:	460b      	mov	r3, r1
    b826:	4620      	mov	r0, r4
    b828:	4629      	mov	r1, r5
    b82a:	f000 fbc5 	bl	bfb8 <__adddf3>
    b82e:	3601      	adds	r6, #1
    b830:	454e      	cmp	r6, r9
    b832:	4604      	mov	r4, r0
    b834:	460d      	mov	r5, r1
    b836:	d1ee      	bne.n	b816 <__kernel_rem_pio2+0x30e>
    b838:	9e06      	ldr	r6, [sp, #24]
    b83a:	e9e6 4502 	strd	r4, r5, [r6, #8]!
    b83e:	9c08      	ldr	r4, [sp, #32]
    b840:	9606      	str	r6, [sp, #24]
    b842:	45a0      	cmp	r8, r4
    b844:	d1d2      	bne.n	b7ec <__kernel_rem_pio2+0x2e4>
    b846:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b848:	9603      	str	r6, [sp, #12]
    b84a:	e6d5      	b.n	b5f8 <__kernel_rem_pio2+0xf0>
    b84c:	2400      	movs	r4, #0
    b84e:	2500      	movs	r5, #0
    b850:	e7f2      	b.n	b838 <__kernel_rem_pio2+0x330>
    b852:	d129      	bne.n	b8a8 <__kernel_rem_pio2+0x3a0>
    b854:	9c03      	ldr	r4, [sp, #12]
    b856:	a810      	add	r0, sp, #64	; 0x40
    b858:	1e63      	subs	r3, r4, #1
    b85a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    b85e:	15ed      	asrs	r5, r5, #23
    b860:	e743      	b.n	b6ea <__kernel_rem_pio2+0x1e2>
    b862:	4632      	mov	r2, r6
    b864:	463b      	mov	r3, r7
    b866:	2000      	movs	r0, #0
    b868:	491c      	ldr	r1, [pc, #112]	; (b8dc <__kernel_rem_pio2+0x3d4>)
    b86a:	f000 fba3 	bl	bfb4 <__aeabi_dsub>
    b86e:	4606      	mov	r6, r0
    b870:	460f      	mov	r7, r1
    b872:	2c00      	cmp	r4, #0
    b874:	f43f af68 	beq.w	b748 <__kernel_rem_pio2+0x240>
    b878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b87a:	4918      	ldr	r1, [pc, #96]	; (b8dc <__kernel_rem_pio2+0x3d4>)
    b87c:	2000      	movs	r0, #0
    b87e:	f000 faff 	bl	be80 <scalbn>
    b882:	4602      	mov	r2, r0
    b884:	460b      	mov	r3, r1
    b886:	4630      	mov	r0, r6
    b888:	4639      	mov	r1, r7
    b88a:	f000 fb93 	bl	bfb4 <__aeabi_dsub>
    b88e:	4606      	mov	r6, r0
    b890:	460f      	mov	r7, r1
    b892:	e759      	b.n	b748 <__kernel_rem_pio2+0x240>
    b894:	9903      	ldr	r1, [sp, #12]
    b896:	a810      	add	r0, sp, #64	; 0x40
    b898:	1e4b      	subs	r3, r1, #1
    b89a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    b89e:	f3c2 0216 	ubfx	r2, r2, #0, #23
    b8a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    b8a6:	e74c      	b.n	b742 <__kernel_rem_pio2+0x23a>
    b8a8:	2200      	movs	r2, #0
    b8aa:	4b0d      	ldr	r3, [pc, #52]	; (b8e0 <__kernel_rem_pio2+0x3d8>)
    b8ac:	f000 ffbc 	bl	c828 <__aeabi_dcmpge>
    b8b0:	b920      	cbnz	r0, b8bc <__kernel_rem_pio2+0x3b4>
    b8b2:	4605      	mov	r5, r0
    b8b4:	e748      	b.n	b748 <__kernel_rem_pio2+0x240>
    b8b6:	2400      	movs	r4, #0
    b8b8:	2500      	movs	r5, #0
    b8ba:	e68f      	b.n	b5dc <__kernel_rem_pio2+0xd4>
    b8bc:	9c03      	ldr	r4, [sp, #12]
    b8be:	2c00      	cmp	r4, #0
    b8c0:	f04f 0502 	mov.w	r5, #2
    b8c4:	f10a 0a01 	add.w	sl, sl, #1
    b8c8:	f73f af17 	bgt.w	b6fa <__kernel_rem_pio2+0x1f2>
    b8cc:	2400      	movs	r4, #0
    b8ce:	e727      	b.n	b720 <__kernel_rem_pio2+0x218>
    b8d0:	3e700000 	.word	0x3e700000
    b8d4:	41700000 	.word	0x41700000
    b8d8:	40200000 	.word	0x40200000
    b8dc:	3ff00000 	.word	0x3ff00000
    b8e0:	3fe00000 	.word	0x3fe00000
    b8e4:	4630      	mov	r0, r6
    b8e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b8e8:	9506      	str	r5, [sp, #24]
    b8ea:	4272      	negs	r2, r6
    b8ec:	4639      	mov	r1, r7
    b8ee:	f8cd a01c 	str.w	sl, [sp, #28]
    b8f2:	f000 fac5 	bl	be80 <scalbn>
    b8f6:	2200      	movs	r2, #0
    b8f8:	4b92      	ldr	r3, [pc, #584]	; (bb44 <__kernel_rem_pio2+0x63c>)
    b8fa:	4604      	mov	r4, r0
    b8fc:	460d      	mov	r5, r1
    b8fe:	f000 ff93 	bl	c828 <__aeabi_dcmpge>
    b902:	2800      	cmp	r0, #0
    b904:	f000 81b6 	beq.w	bc74 <__kernel_rem_pio2+0x76c>
    b908:	2200      	movs	r2, #0
    b90a:	4b8f      	ldr	r3, [pc, #572]	; (bb48 <__kernel_rem_pio2+0x640>)
    b90c:	4620      	mov	r0, r4
    b90e:	4629      	mov	r1, r5
    b910:	f000 fd04 	bl	c31c <__aeabi_dmul>
    b914:	f000 ff9c 	bl	c850 <__aeabi_d2iz>
    b918:	4606      	mov	r6, r0
    b91a:	f000 fc99 	bl	c250 <__aeabi_i2d>
    b91e:	2200      	movs	r2, #0
    b920:	4b88      	ldr	r3, [pc, #544]	; (bb44 <__kernel_rem_pio2+0x63c>)
    b922:	f000 fcfb 	bl	c31c <__aeabi_dmul>
    b926:	4602      	mov	r2, r0
    b928:	460b      	mov	r3, r1
    b92a:	4620      	mov	r0, r4
    b92c:	4629      	mov	r1, r5
    b92e:	f000 fb41 	bl	bfb4 <__aeabi_dsub>
    b932:	f000 ff8d 	bl	c850 <__aeabi_d2iz>
    b936:	9c03      	ldr	r4, [sp, #12]
    b938:	f104 0801 	add.w	r8, r4, #1
    b93c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b93e:	3418      	adds	r4, #24
    b940:	a910      	add	r1, sp, #64	; 0x40
    b942:	940a      	str	r4, [sp, #40]	; 0x28
    b944:	9c03      	ldr	r4, [sp, #12]
    b946:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    b94a:	f841 6028 	str.w	r6, [r1, r8, lsl #2]
    b94e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b950:	497e      	ldr	r1, [pc, #504]	; (bb4c <__kernel_rem_pio2+0x644>)
    b952:	2000      	movs	r0, #0
    b954:	f000 fa94 	bl	be80 <scalbn>
    b958:	f1b8 0f00 	cmp.w	r8, #0
    b95c:	4604      	mov	r4, r0
    b95e:	460d      	mov	r5, r1
    b960:	db5a      	blt.n	ba18 <__kernel_rem_pio2+0x510>
    b962:	f108 0601 	add.w	r6, r8, #1
    b966:	a810      	add	r0, sp, #64	; 0x40
    b968:	a974      	add	r1, sp, #464	; 0x1d0
    b96a:	9603      	str	r6, [sp, #12]
    b96c:	eb00 0786 	add.w	r7, r0, r6, lsl #2
    b970:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
    b974:	f857 0d04 	ldr.w	r0, [r7, #-4]!
    b978:	f000 fc6a 	bl	c250 <__aeabi_i2d>
    b97c:	4622      	mov	r2, r4
    b97e:	462b      	mov	r3, r5
    b980:	f000 fccc 	bl	c31c <__aeabi_dmul>
    b984:	2200      	movs	r2, #0
    b986:	e966 0102 	strd	r0, r1, [r6, #-8]!
    b98a:	4b6f      	ldr	r3, [pc, #444]	; (bb48 <__kernel_rem_pio2+0x640>)
    b98c:	4620      	mov	r0, r4
    b98e:	4629      	mov	r1, r5
    b990:	f000 fcc4 	bl	c31c <__aeabi_dmul>
    b994:	9a02      	ldr	r2, [sp, #8]
    b996:	4297      	cmp	r7, r2
    b998:	4604      	mov	r4, r0
    b99a:	460d      	mov	r5, r1
    b99c:	d1ea      	bne.n	b974 <__kernel_rem_pio2+0x46c>
    b99e:	f108 5b00 	add.w	fp, r8, #536870912	; 0x20000000
    b9a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    b9a6:	ab74      	add	r3, sp, #464	; 0x1d0
    b9a8:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    b9ac:	f8cd 8020 	str.w	r8, [sp, #32]
    b9b0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    b9b4:	f8cd a010 	str.w	sl, [sp, #16]
    b9b8:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
    b9bc:	f04f 0900 	mov.w	r9, #0
    b9c0:	f1b8 0f00 	cmp.w	r8, #0
    b9c4:	f2c0 8122 	blt.w	bc0c <__kernel_rem_pio2+0x704>
    b9c8:	f8df a184 	ldr.w	sl, [pc, #388]	; bb50 <__kernel_rem_pio2+0x648>
    b9cc:	465f      	mov	r7, fp
    b9ce:	2400      	movs	r4, #0
    b9d0:	2500      	movs	r5, #0
    b9d2:	2600      	movs	r6, #0
    b9d4:	e001      	b.n	b9da <__kernel_rem_pio2+0x4d2>
    b9d6:	454e      	cmp	r6, r9
    b9d8:	dc10      	bgt.n	b9fc <__kernel_rem_pio2+0x4f4>
    b9da:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
    b9de:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
    b9e2:	f000 fc9b 	bl	c31c <__aeabi_dmul>
    b9e6:	4602      	mov	r2, r0
    b9e8:	460b      	mov	r3, r1
    b9ea:	4620      	mov	r0, r4
    b9ec:	4629      	mov	r1, r5
    b9ee:	f000 fae3 	bl	bfb8 <__adddf3>
    b9f2:	3601      	adds	r6, #1
    b9f4:	45b0      	cmp	r8, r6
    b9f6:	4604      	mov	r4, r0
    b9f8:	460d      	mov	r5, r1
    b9fa:	daec      	bge.n	b9d6 <__kernel_rem_pio2+0x4ce>
    b9fc:	9e04      	ldr	r6, [sp, #16]
    b9fe:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
    ba02:	e9c3 4500 	strd	r4, r5, [r3]
    ba06:	9c03      	ldr	r4, [sp, #12]
    ba08:	f109 0901 	add.w	r9, r9, #1
    ba0c:	45a1      	cmp	r9, r4
    ba0e:	f1ab 0b08 	sub.w	fp, fp, #8
    ba12:	d1d5      	bne.n	b9c0 <__kernel_rem_pio2+0x4b8>
    ba14:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ba18:	9ea6      	ldr	r6, [sp, #664]	; 0x298
    ba1a:	2e03      	cmp	r6, #3
    ba1c:	f200 808a 	bhi.w	bb34 <__kernel_rem_pio2+0x62c>
    ba20:	e8df f016 	tbh	[pc, r6, lsl #1]
    ba24:	009800d4 	.word	0x009800d4
    ba28:	00040098 	.word	0x00040098
    ba2c:	f1b8 0f00 	cmp.w	r8, #0
    ba30:	f340 810c 	ble.w	bc4c <__kernel_rem_pio2+0x744>
    ba34:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    ba38:	ea4f 0bc8 	mov.w	fp, r8, lsl #3
    ba3c:	eb0a 030b 	add.w	r3, sl, fp
    ba40:	e9d3 6700 	ldrd	r6, r7, [r3]
    ba44:	f108 0301 	add.w	r3, r8, #1
    ba48:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
    ba4c:	9303      	str	r3, [sp, #12]
    ba4e:	4699      	mov	r9, r3
    ba50:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
    ba54:	e001      	b.n	ba5a <__kernel_rem_pio2+0x552>
    ba56:	4626      	mov	r6, r4
    ba58:	462f      	mov	r7, r5
    ba5a:	e959 0104 	ldrd	r0, r1, [r9, #-16]
    ba5e:	4632      	mov	r2, r6
    ba60:	463b      	mov	r3, r7
    ba62:	f8cd c004 	str.w	ip, [sp, #4]
    ba66:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ba6a:	f000 faa5 	bl	bfb8 <__adddf3>
    ba6e:	4604      	mov	r4, r0
    ba70:	460d      	mov	r5, r1
    ba72:	4622      	mov	r2, r4
    ba74:	462b      	mov	r3, r5
    ba76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ba7a:	f000 fa9b 	bl	bfb4 <__aeabi_dsub>
    ba7e:	4632      	mov	r2, r6
    ba80:	463b      	mov	r3, r7
    ba82:	f000 fa99 	bl	bfb8 <__adddf3>
    ba86:	e969 0102 	strd	r0, r1, [r9, #-8]!
    ba8a:	f8dd c004 	ldr.w	ip, [sp, #4]
    ba8e:	45e1      	cmp	r9, ip
    ba90:	e949 4502 	strd	r4, r5, [r9, #-8]
    ba94:	d1df      	bne.n	ba56 <__kernel_rem_pio2+0x54e>
    ba96:	f1b8 0f01 	cmp.w	r8, #1
    ba9a:	f340 8109 	ble.w	bcb0 <__kernel_rem_pio2+0x7a8>
    ba9e:	f8dd c00c 	ldr.w	ip, [sp, #12]
    baa2:	f8cd a010 	str.w	sl, [sp, #16]
    baa6:	44d3      	add	fp, sl
    baa8:	e9db 4500 	ldrd	r4, r5, [fp]
    baac:	f10a 0b10 	add.w	fp, sl, #16
    bab0:	46e2      	mov	sl, ip
    bab2:	e001      	b.n	bab8 <__kernel_rem_pio2+0x5b0>
    bab4:	4634      	mov	r4, r6
    bab6:	463d      	mov	r5, r7
    bab8:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
    babc:	4622      	mov	r2, r4
    babe:	462b      	mov	r3, r5
    bac0:	4640      	mov	r0, r8
    bac2:	4649      	mov	r1, r9
    bac4:	f000 fa78 	bl	bfb8 <__adddf3>
    bac8:	4606      	mov	r6, r0
    baca:	460f      	mov	r7, r1
    bacc:	4632      	mov	r2, r6
    bace:	463b      	mov	r3, r7
    bad0:	4640      	mov	r0, r8
    bad2:	4649      	mov	r1, r9
    bad4:	f000 fa6e 	bl	bfb4 <__aeabi_dsub>
    bad8:	4622      	mov	r2, r4
    bada:	462b      	mov	r3, r5
    badc:	f000 fa6c 	bl	bfb8 <__adddf3>
    bae0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
    bae4:	45da      	cmp	sl, fp
    bae6:	e94a 6702 	strd	r6, r7, [sl, #-8]
    baea:	d1e3      	bne.n	bab4 <__kernel_rem_pio2+0x5ac>
    baec:	f8dd a010 	ldr.w	sl, [sp, #16]
    baf0:	9c03      	ldr	r4, [sp, #12]
    baf2:	2000      	movs	r0, #0
    baf4:	2100      	movs	r1, #0
    baf6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    bafa:	f000 fa5d 	bl	bfb8 <__adddf3>
    bafe:	45a3      	cmp	fp, r4
    bb00:	d1f9      	bne.n	baf6 <__kernel_rem_pio2+0x5ee>
    bb02:	9c06      	ldr	r4, [sp, #24]
    bb04:	2c00      	cmp	r4, #0
    bb06:	f000 80a9 	beq.w	bc5c <__kernel_rem_pio2+0x754>
    bb0a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb0c:	f8da 5004 	ldr.w	r5, [sl, #4]
    bb10:	f8da 400c 	ldr.w	r4, [sl, #12]
    bb14:	f8da 2000 	ldr.w	r2, [sl]
    bb18:	f8da 3008 	ldr.w	r3, [sl, #8]
    bb1c:	6032      	str	r2, [r6, #0]
    bb1e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    bb22:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    bb26:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
    bb2a:	6075      	str	r5, [r6, #4]
    bb2c:	60f4      	str	r4, [r6, #12]
    bb2e:	60b3      	str	r3, [r6, #8]
    bb30:	6130      	str	r0, [r6, #16]
    bb32:	6172      	str	r2, [r6, #20]
    bb34:	9c07      	ldr	r4, [sp, #28]
    bb36:	f004 0007 	and.w	r0, r4, #7
    bb3a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    bb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb42:	bf00      	nop
    bb44:	41700000 	.word	0x41700000
    bb48:	3e700000 	.word	0x3e700000
    bb4c:	3ff00000 	.word	0x3ff00000
    bb50:	00014248 	.word	0x00014248
    bb54:	f1b8 0f00 	cmp.w	r8, #0
    bb58:	f2c0 80a5 	blt.w	bca6 <__kernel_rem_pio2+0x79e>
    bb5c:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    bb60:	f108 0401 	add.w	r4, r8, #1
    bb64:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
    bb68:	2000      	movs	r0, #0
    bb6a:	2100      	movs	r1, #0
    bb6c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    bb70:	f000 fa22 	bl	bfb8 <__adddf3>
    bb74:	4554      	cmp	r4, sl
    bb76:	d1f9      	bne.n	bb6c <__kernel_rem_pio2+0x664>
    bb78:	9c06      	ldr	r4, [sp, #24]
    bb7a:	2c00      	cmp	r4, #0
    bb7c:	d049      	beq.n	bc12 <__kernel_rem_pio2+0x70a>
    bb7e:	4602      	mov	r2, r0
    bb80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    bb84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb86:	e9c6 2300 	strd	r2, r3, [r6]
    bb8a:	4602      	mov	r2, r0
    bb8c:	460b      	mov	r3, r1
    bb8e:	e9da 0100 	ldrd	r0, r1, [sl]
    bb92:	f000 fa0f 	bl	bfb4 <__aeabi_dsub>
    bb96:	f1b8 0f00 	cmp.w	r8, #0
    bb9a:	dd07      	ble.n	bbac <__kernel_rem_pio2+0x6a4>
    bb9c:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
    bba0:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
    bba4:	f000 fa08 	bl	bfb8 <__adddf3>
    bba8:	45c2      	cmp	sl, r8
    bbaa:	d1f9      	bne.n	bba0 <__kernel_rem_pio2+0x698>
    bbac:	9c06      	ldr	r4, [sp, #24]
    bbae:	2c00      	cmp	r4, #0
    bbb0:	d06a      	beq.n	bc88 <__kernel_rem_pio2+0x780>
    bbb2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bbb4:	4602      	mov	r2, r0
    bbb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    bbba:	e9c6 2302 	strd	r2, r3, [r6, #8]
    bbbe:	9c07      	ldr	r4, [sp, #28]
    bbc0:	f004 0007 	and.w	r0, r4, #7
    bbc4:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    bbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbcc:	f1b8 0f00 	cmp.w	r8, #0
    bbd0:	db66      	blt.n	bca0 <__kernel_rem_pio2+0x798>
    bbd2:	f108 0401 	add.w	r4, r8, #1
    bbd6:	ad4c      	add	r5, sp, #304	; 0x130
    bbd8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    bbdc:	2000      	movs	r0, #0
    bbde:	2100      	movs	r1, #0
    bbe0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    bbe4:	f000 f9e8 	bl	bfb8 <__adddf3>
    bbe8:	42ac      	cmp	r4, r5
    bbea:	d1f9      	bne.n	bbe0 <__kernel_rem_pio2+0x6d8>
    bbec:	9c06      	ldr	r4, [sp, #24]
    bbee:	2c00      	cmp	r4, #0
    bbf0:	d050      	beq.n	bc94 <__kernel_rem_pio2+0x78c>
    bbf2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bbf4:	4602      	mov	r2, r0
    bbf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    bbfa:	e9c6 2300 	strd	r2, r3, [r6]
    bbfe:	9c07      	ldr	r4, [sp, #28]
    bc00:	f004 0007 	and.w	r0, r4, #7
    bc04:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc0c:	2400      	movs	r4, #0
    bc0e:	2500      	movs	r5, #0
    bc10:	e6f4      	b.n	b9fc <__kernel_rem_pio2+0x4f4>
    bc12:	4602      	mov	r2, r0
    bc14:	460b      	mov	r3, r1
    bc16:	e7b5      	b.n	bb84 <__kernel_rem_pio2+0x67c>
    bc18:	2301      	movs	r3, #1
    bc1a:	e5c2      	b.n	b7a2 <__kernel_rem_pio2+0x29a>
    bc1c:	ae10      	add	r6, sp, #64	; 0x40
    bc1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bc20:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
    bc24:	f8cd a01c 	str.w	sl, [sp, #28]
    bc28:	3c18      	subs	r4, #24
    bc2a:	9506      	str	r5, [sp, #24]
    bc2c:	940a      	str	r4, [sp, #40]	; 0x28
    bc2e:	2b00      	cmp	r3, #0
    bc30:	f47f ae8d 	bne.w	b94e <__kernel_rem_pio2+0x446>
    bc34:	eb06 0388 	add.w	r3, r6, r8, lsl #2
    bc38:	4622      	mov	r2, r4
    bc3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    bc3e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    bc42:	3a18      	subs	r2, #24
    bc44:	2900      	cmp	r1, #0
    bc46:	d0f8      	beq.n	bc3a <__kernel_rem_pio2+0x732>
    bc48:	920a      	str	r2, [sp, #40]	; 0x28
    bc4a:	e680      	b.n	b94e <__kernel_rem_pio2+0x446>
    bc4c:	9c06      	ldr	r4, [sp, #24]
    bc4e:	2000      	movs	r0, #0
    bc50:	2100      	movs	r1, #0
    bc52:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    bc56:	2c00      	cmp	r4, #0
    bc58:	f47f af57 	bne.w	bb0a <__kernel_rem_pio2+0x602>
    bc5c:	e9da 2300 	ldrd	r2, r3, [sl]
    bc60:	e9da 4502 	ldrd	r4, r5, [sl, #8]
    bc64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bc66:	e9c6 0104 	strd	r0, r1, [r6, #16]
    bc6a:	e9c6 2300 	strd	r2, r3, [r6]
    bc6e:	e9c6 4502 	strd	r4, r5, [r6, #8]
    bc72:	e75f      	b.n	bb34 <__kernel_rem_pio2+0x62c>
    bc74:	4620      	mov	r0, r4
    bc76:	4629      	mov	r1, r5
    bc78:	f000 fdea 	bl	c850 <__aeabi_d2iz>
    bc7c:	ae10      	add	r6, sp, #64	; 0x40
    bc7e:	9c03      	ldr	r4, [sp, #12]
    bc80:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    bc84:	46a0      	mov	r8, r4
    bc86:	e662      	b.n	b94e <__kernel_rem_pio2+0x446>
    bc88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bc8a:	4602      	mov	r2, r0
    bc8c:	460b      	mov	r3, r1
    bc8e:	e9c6 2302 	strd	r2, r3, [r6, #8]
    bc92:	e794      	b.n	bbbe <__kernel_rem_pio2+0x6b6>
    bc94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bc96:	4602      	mov	r2, r0
    bc98:	460b      	mov	r3, r1
    bc9a:	e9c6 2300 	strd	r2, r3, [r6]
    bc9e:	e7ae      	b.n	bbfe <__kernel_rem_pio2+0x6f6>
    bca0:	2000      	movs	r0, #0
    bca2:	2100      	movs	r1, #0
    bca4:	e7a2      	b.n	bbec <__kernel_rem_pio2+0x6e4>
    bca6:	2000      	movs	r0, #0
    bca8:	2100      	movs	r1, #0
    bcaa:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    bcae:	e763      	b.n	bb78 <__kernel_rem_pio2+0x670>
    bcb0:	2000      	movs	r0, #0
    bcb2:	2100      	movs	r1, #0
    bcb4:	e725      	b.n	bb02 <__kernel_rem_pio2+0x5fa>
    bcb6:	bf00      	nop

0000bcb8 <__kernel_sin>:
    bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcbc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    bcc0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
    bcc4:	b085      	sub	sp, #20
    bcc6:	4604      	mov	r4, r0
    bcc8:	460d      	mov	r5, r1
    bcca:	4690      	mov	r8, r2
    bccc:	4699      	mov	r9, r3
    bcce:	da04      	bge.n	bcda <__kernel_sin+0x22>
    bcd0:	f000 fdbe 	bl	c850 <__aeabi_d2iz>
    bcd4:	2800      	cmp	r0, #0
    bcd6:	f000 8084 	beq.w	bde2 <__kernel_sin+0x12a>
    bcda:	4622      	mov	r2, r4
    bcdc:	462b      	mov	r3, r5
    bcde:	4620      	mov	r0, r4
    bce0:	4629      	mov	r1, r5
    bce2:	f000 fb1b 	bl	c31c <__aeabi_dmul>
    bce6:	4622      	mov	r2, r4
    bce8:	462b      	mov	r3, r5
    bcea:	4606      	mov	r6, r0
    bcec:	460f      	mov	r7, r1
    bcee:	f000 fb15 	bl	c31c <__aeabi_dmul>
    bcf2:	a33f      	add	r3, pc, #252	; (adr r3, bdf0 <__kernel_sin+0x138>)
    bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
    bcf8:	4682      	mov	sl, r0
    bcfa:	468b      	mov	fp, r1
    bcfc:	4630      	mov	r0, r6
    bcfe:	4639      	mov	r1, r7
    bd00:	f000 fb0c 	bl	c31c <__aeabi_dmul>
    bd04:	a33c      	add	r3, pc, #240	; (adr r3, bdf8 <__kernel_sin+0x140>)
    bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd0a:	f000 f953 	bl	bfb4 <__aeabi_dsub>
    bd0e:	4632      	mov	r2, r6
    bd10:	463b      	mov	r3, r7
    bd12:	f000 fb03 	bl	c31c <__aeabi_dmul>
    bd16:	a33a      	add	r3, pc, #232	; (adr r3, be00 <__kernel_sin+0x148>)
    bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd1c:	f000 f94c 	bl	bfb8 <__adddf3>
    bd20:	4632      	mov	r2, r6
    bd22:	463b      	mov	r3, r7
    bd24:	f000 fafa 	bl	c31c <__aeabi_dmul>
    bd28:	a337      	add	r3, pc, #220	; (adr r3, be08 <__kernel_sin+0x150>)
    bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd2e:	f000 f941 	bl	bfb4 <__aeabi_dsub>
    bd32:	4632      	mov	r2, r6
    bd34:	463b      	mov	r3, r7
    bd36:	f000 faf1 	bl	c31c <__aeabi_dmul>
    bd3a:	a335      	add	r3, pc, #212	; (adr r3, be10 <__kernel_sin+0x158>)
    bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd40:	f000 f93a 	bl	bfb8 <__adddf3>
    bd44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bd46:	e9cd 0102 	strd	r0, r1, [sp, #8]
    bd4a:	2b00      	cmp	r3, #0
    bd4c:	d033      	beq.n	bdb6 <__kernel_sin+0xfe>
    bd4e:	4640      	mov	r0, r8
    bd50:	4649      	mov	r1, r9
    bd52:	2200      	movs	r2, #0
    bd54:	4b32      	ldr	r3, [pc, #200]	; (be20 <__kernel_sin+0x168>)
    bd56:	f000 fae1 	bl	c31c <__aeabi_dmul>
    bd5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bd5e:	e9cd 0100 	strd	r0, r1, [sp]
    bd62:	4650      	mov	r0, sl
    bd64:	4659      	mov	r1, fp
    bd66:	f000 fad9 	bl	c31c <__aeabi_dmul>
    bd6a:	4602      	mov	r2, r0
    bd6c:	460b      	mov	r3, r1
    bd6e:	e9dd 0100 	ldrd	r0, r1, [sp]
    bd72:	f000 f91f 	bl	bfb4 <__aeabi_dsub>
    bd76:	4632      	mov	r2, r6
    bd78:	463b      	mov	r3, r7
    bd7a:	f000 facf 	bl	c31c <__aeabi_dmul>
    bd7e:	4642      	mov	r2, r8
    bd80:	464b      	mov	r3, r9
    bd82:	f000 f917 	bl	bfb4 <__aeabi_dsub>
    bd86:	a324      	add	r3, pc, #144	; (adr r3, be18 <__kernel_sin+0x160>)
    bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd8c:	4606      	mov	r6, r0
    bd8e:	460f      	mov	r7, r1
    bd90:	4650      	mov	r0, sl
    bd92:	4659      	mov	r1, fp
    bd94:	f000 fac2 	bl	c31c <__aeabi_dmul>
    bd98:	4602      	mov	r2, r0
    bd9a:	460b      	mov	r3, r1
    bd9c:	4630      	mov	r0, r6
    bd9e:	4639      	mov	r1, r7
    bda0:	f000 f90a 	bl	bfb8 <__adddf3>
    bda4:	4602      	mov	r2, r0
    bda6:	460b      	mov	r3, r1
    bda8:	4620      	mov	r0, r4
    bdaa:	4629      	mov	r1, r5
    bdac:	f000 f902 	bl	bfb4 <__aeabi_dsub>
    bdb0:	b005      	add	sp, #20
    bdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bdba:	4630      	mov	r0, r6
    bdbc:	4639      	mov	r1, r7
    bdbe:	f000 faad 	bl	c31c <__aeabi_dmul>
    bdc2:	a315      	add	r3, pc, #84	; (adr r3, be18 <__kernel_sin+0x160>)
    bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    bdc8:	f000 f8f4 	bl	bfb4 <__aeabi_dsub>
    bdcc:	4652      	mov	r2, sl
    bdce:	465b      	mov	r3, fp
    bdd0:	f000 faa4 	bl	c31c <__aeabi_dmul>
    bdd4:	4622      	mov	r2, r4
    bdd6:	462b      	mov	r3, r5
    bdd8:	f000 f8ee 	bl	bfb8 <__adddf3>
    bddc:	b005      	add	sp, #20
    bdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bde2:	4620      	mov	r0, r4
    bde4:	4629      	mov	r1, r5
    bde6:	b005      	add	sp, #20
    bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdec:	f3af 8000 	nop.w
    bdf0:	5acfd57c 	.word	0x5acfd57c
    bdf4:	3de5d93a 	.word	0x3de5d93a
    bdf8:	8a2b9ceb 	.word	0x8a2b9ceb
    bdfc:	3e5ae5e6 	.word	0x3e5ae5e6
    be00:	57b1fe7d 	.word	0x57b1fe7d
    be04:	3ec71de3 	.word	0x3ec71de3
    be08:	19c161d5 	.word	0x19c161d5
    be0c:	3f2a01a0 	.word	0x3f2a01a0
    be10:	1110f8a6 	.word	0x1110f8a6
    be14:	3f811111 	.word	0x3f811111
    be18:	55555549 	.word	0x55555549
    be1c:	3fc55555 	.word	0x3fc55555
    be20:	3fe00000 	.word	0x3fe00000
    be24:	f3af 8000 	nop.w

0000be28 <fabs>:
    be28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    be2c:	4770      	bx	lr
    be2e:	bf00      	nop

0000be30 <__fpclassifyd>:
    be30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    be34:	b410      	push	{r4}
    be36:	d008      	beq.n	be4a <__fpclassifyd+0x1a>
    be38:	4a0f      	ldr	r2, [pc, #60]	; (be78 <__fpclassifyd+0x48>)
    be3a:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
    be3e:	4294      	cmp	r4, r2
    be40:	d80a      	bhi.n	be58 <__fpclassifyd+0x28>
    be42:	2004      	movs	r0, #4
    be44:	f85d 4b04 	ldr.w	r4, [sp], #4
    be48:	4770      	bx	lr
    be4a:	2800      	cmp	r0, #0
    be4c:	bf0c      	ite	eq
    be4e:	2002      	moveq	r0, #2
    be50:	2003      	movne	r0, #3
    be52:	f85d 4b04 	ldr.w	r4, [sp], #4
    be56:	4770      	bx	lr
    be58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    be5c:	d201      	bcs.n	be62 <__fpclassifyd+0x32>
    be5e:	2003      	movs	r0, #3
    be60:	e7f7      	b.n	be52 <__fpclassifyd+0x22>
    be62:	4a06      	ldr	r2, [pc, #24]	; (be7c <__fpclassifyd+0x4c>)
    be64:	4293      	cmp	r3, r2
    be66:	d001      	beq.n	be6c <__fpclassifyd+0x3c>
    be68:	2000      	movs	r0, #0
    be6a:	e7f2      	b.n	be52 <__fpclassifyd+0x22>
    be6c:	f1d0 0001 	rsbs	r0, r0, #1
    be70:	bf38      	it	cc
    be72:	2000      	movcc	r0, #0
    be74:	e7ed      	b.n	be52 <__fpclassifyd+0x22>
    be76:	bf00      	nop
    be78:	7fdfffff 	.word	0x7fdfffff
    be7c:	7ff00000 	.word	0x7ff00000

0000be80 <scalbn>:
    be80:	f3c1 530a 	ubfx	r3, r1, #20, #11
    be84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be88:	4690      	mov	r8, r2
    be8a:	4606      	mov	r6, r0
    be8c:	460f      	mov	r7, r1
    be8e:	460a      	mov	r2, r1
    be90:	bb1b      	cbnz	r3, beda <scalbn+0x5a>
    be92:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    be96:	4303      	orrs	r3, r0
    be98:	d034      	beq.n	bf04 <scalbn+0x84>
    be9a:	4b3b      	ldr	r3, [pc, #236]	; (bf88 <scalbn+0x108>)
    be9c:	2200      	movs	r2, #0
    be9e:	f000 fa3d 	bl	c31c <__aeabi_dmul>
    bea2:	4b3a      	ldr	r3, [pc, #232]	; (bf8c <scalbn+0x10c>)
    bea4:	4598      	cmp	r8, r3
    bea6:	4606      	mov	r6, r0
    bea8:	460f      	mov	r7, r1
    beaa:	db3b      	blt.n	bf24 <scalbn+0xa4>
    beac:	f3c1 530a 	ubfx	r3, r1, #20, #11
    beb0:	3b36      	subs	r3, #54	; 0x36
    beb2:	460a      	mov	r2, r1
    beb4:	4443      	add	r3, r8
    beb6:	f240 71fe 	movw	r1, #2046	; 0x7fe
    beba:	428b      	cmp	r3, r1
    bebc:	dd16      	ble.n	beec <scalbn+0x6c>
    bebe:	4632      	mov	r2, r6
    bec0:	463b      	mov	r3, r7
    bec2:	a12d      	add	r1, pc, #180	; (adr r1, bf78 <scalbn+0xf8>)
    bec4:	e9d1 0100 	ldrd	r0, r1, [r1]
    bec8:	f000 f866 	bl	bf98 <copysign>
    becc:	a32a      	add	r3, pc, #168	; (adr r3, bf78 <scalbn+0xf8>)
    bece:	e9d3 2300 	ldrd	r2, r3, [r3]
    bed2:	f000 fa23 	bl	c31c <__aeabi_dmul>
    bed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    beda:	f240 74ff 	movw	r4, #2047	; 0x7ff
    bede:	42a3      	cmp	r3, r4
    bee0:	d027      	beq.n	bf32 <scalbn+0xb2>
    bee2:	4443      	add	r3, r8
    bee4:	f240 71fe 	movw	r1, #2046	; 0x7fe
    bee8:	428b      	cmp	r3, r1
    beea:	dce8      	bgt.n	bebe <scalbn+0x3e>
    beec:	2b00      	cmp	r3, #0
    beee:	dd0b      	ble.n	bf08 <scalbn+0x88>
    bef0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    bef4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    bef8:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
    befc:	4630      	mov	r0, r6
    befe:	4639      	mov	r1, r7
    bf00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf08:	f113 0f35 	cmn.w	r3, #53	; 0x35
    bf0c:	da17      	bge.n	bf3e <scalbn+0xbe>
    bf0e:	f24c 3350 	movw	r3, #50000	; 0xc350
    bf12:	4598      	cmp	r8, r3
    bf14:	4632      	mov	r2, r6
    bf16:	463b      	mov	r3, r7
    bf18:	dc20      	bgt.n	bf5c <scalbn+0xdc>
    bf1a:	a119      	add	r1, pc, #100	; (adr r1, bf80 <scalbn+0x100>)
    bf1c:	e9d1 0100 	ldrd	r0, r1, [r1]
    bf20:	f000 f83a 	bl	bf98 <copysign>
    bf24:	a316      	add	r3, pc, #88	; (adr r3, bf80 <scalbn+0x100>)
    bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf2a:	f000 f9f7 	bl	c31c <__aeabi_dmul>
    bf2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf32:	4602      	mov	r2, r0
    bf34:	460b      	mov	r3, r1
    bf36:	f000 f83f 	bl	bfb8 <__adddf3>
    bf3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf3e:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    bf42:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    bf46:	3336      	adds	r3, #54	; 0x36
    bf48:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
    bf4c:	4630      	mov	r0, r6
    bf4e:	4639      	mov	r1, r7
    bf50:	2200      	movs	r2, #0
    bf52:	4b0f      	ldr	r3, [pc, #60]	; (bf90 <scalbn+0x110>)
    bf54:	f000 f9e2 	bl	c31c <__aeabi_dmul>
    bf58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf5c:	a106      	add	r1, pc, #24	; (adr r1, bf78 <scalbn+0xf8>)
    bf5e:	e9d1 0100 	ldrd	r0, r1, [r1]
    bf62:	f000 f819 	bl	bf98 <copysign>
    bf66:	a304      	add	r3, pc, #16	; (adr r3, bf78 <scalbn+0xf8>)
    bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf6c:	f000 f9d6 	bl	c31c <__aeabi_dmul>
    bf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf74:	f3af 8000 	nop.w
    bf78:	8800759c 	.word	0x8800759c
    bf7c:	7e37e43c 	.word	0x7e37e43c
    bf80:	c2f8f359 	.word	0xc2f8f359
    bf84:	01a56e1f 	.word	0x01a56e1f
    bf88:	43500000 	.word	0x43500000
    bf8c:	ffff3cb0 	.word	0xffff3cb0
    bf90:	3c900000 	.word	0x3c900000
    bf94:	f3af 8000 	nop.w

0000bf98 <copysign>:
    bf98:	b430      	push	{r4, r5}
    bf9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    bf9e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    bfa2:	ea43 0102 	orr.w	r1, r3, r2
    bfa6:	bc30      	pop	{r4, r5}
    bfa8:	4770      	bx	lr
    bfaa:	bf00      	nop

0000bfac <__aeabi_drsub>:
    bfac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    bfb0:	e002      	b.n	bfb8 <__adddf3>
    bfb2:	bf00      	nop

0000bfb4 <__aeabi_dsub>:
    bfb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000bfb8 <__adddf3>:
    bfb8:	b530      	push	{r4, r5, lr}
    bfba:	ea4f 0441 	mov.w	r4, r1, lsl #1
    bfbe:	ea4f 0543 	mov.w	r5, r3, lsl #1
    bfc2:	ea94 0f05 	teq	r4, r5
    bfc6:	bf08      	it	eq
    bfc8:	ea90 0f02 	teqeq	r0, r2
    bfcc:	bf1f      	itttt	ne
    bfce:	ea54 0c00 	orrsne.w	ip, r4, r0
    bfd2:	ea55 0c02 	orrsne.w	ip, r5, r2
    bfd6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    bfda:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bfde:	f000 80e2 	beq.w	c1a6 <__adddf3+0x1ee>
    bfe2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    bfe6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    bfea:	bfb8      	it	lt
    bfec:	426d      	neglt	r5, r5
    bfee:	dd0c      	ble.n	c00a <__adddf3+0x52>
    bff0:	442c      	add	r4, r5
    bff2:	ea80 0202 	eor.w	r2, r0, r2
    bff6:	ea81 0303 	eor.w	r3, r1, r3
    bffa:	ea82 0000 	eor.w	r0, r2, r0
    bffe:	ea83 0101 	eor.w	r1, r3, r1
    c002:	ea80 0202 	eor.w	r2, r0, r2
    c006:	ea81 0303 	eor.w	r3, r1, r3
    c00a:	2d36      	cmp	r5, #54	; 0x36
    c00c:	bf88      	it	hi
    c00e:	bd30      	pophi	{r4, r5, pc}
    c010:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c014:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c018:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c01c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c020:	d002      	beq.n	c028 <__adddf3+0x70>
    c022:	4240      	negs	r0, r0
    c024:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c028:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c02c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c030:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c034:	d002      	beq.n	c03c <__adddf3+0x84>
    c036:	4252      	negs	r2, r2
    c038:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c03c:	ea94 0f05 	teq	r4, r5
    c040:	f000 80a7 	beq.w	c192 <__adddf3+0x1da>
    c044:	f1a4 0401 	sub.w	r4, r4, #1
    c048:	f1d5 0e20 	rsbs	lr, r5, #32
    c04c:	db0d      	blt.n	c06a <__adddf3+0xb2>
    c04e:	fa02 fc0e 	lsl.w	ip, r2, lr
    c052:	fa22 f205 	lsr.w	r2, r2, r5
    c056:	1880      	adds	r0, r0, r2
    c058:	f141 0100 	adc.w	r1, r1, #0
    c05c:	fa03 f20e 	lsl.w	r2, r3, lr
    c060:	1880      	adds	r0, r0, r2
    c062:	fa43 f305 	asr.w	r3, r3, r5
    c066:	4159      	adcs	r1, r3
    c068:	e00e      	b.n	c088 <__adddf3+0xd0>
    c06a:	f1a5 0520 	sub.w	r5, r5, #32
    c06e:	f10e 0e20 	add.w	lr, lr, #32
    c072:	2a01      	cmp	r2, #1
    c074:	fa03 fc0e 	lsl.w	ip, r3, lr
    c078:	bf28      	it	cs
    c07a:	f04c 0c02 	orrcs.w	ip, ip, #2
    c07e:	fa43 f305 	asr.w	r3, r3, r5
    c082:	18c0      	adds	r0, r0, r3
    c084:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c088:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c08c:	d507      	bpl.n	c09e <__adddf3+0xe6>
    c08e:	f04f 0e00 	mov.w	lr, #0
    c092:	f1dc 0c00 	rsbs	ip, ip, #0
    c096:	eb7e 0000 	sbcs.w	r0, lr, r0
    c09a:	eb6e 0101 	sbc.w	r1, lr, r1
    c09e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c0a2:	d31b      	bcc.n	c0dc <__adddf3+0x124>
    c0a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c0a8:	d30c      	bcc.n	c0c4 <__adddf3+0x10c>
    c0aa:	0849      	lsrs	r1, r1, #1
    c0ac:	ea5f 0030 	movs.w	r0, r0, rrx
    c0b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c0b4:	f104 0401 	add.w	r4, r4, #1
    c0b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c0bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c0c0:	f080 809a 	bcs.w	c1f8 <__adddf3+0x240>
    c0c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c0c8:	bf08      	it	eq
    c0ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c0ce:	f150 0000 	adcs.w	r0, r0, #0
    c0d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c0d6:	ea41 0105 	orr.w	r1, r1, r5
    c0da:	bd30      	pop	{r4, r5, pc}
    c0dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c0e0:	4140      	adcs	r0, r0
    c0e2:	eb41 0101 	adc.w	r1, r1, r1
    c0e6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c0ea:	f1a4 0401 	sub.w	r4, r4, #1
    c0ee:	d1e9      	bne.n	c0c4 <__adddf3+0x10c>
    c0f0:	f091 0f00 	teq	r1, #0
    c0f4:	bf04      	itt	eq
    c0f6:	4601      	moveq	r1, r0
    c0f8:	2000      	moveq	r0, #0
    c0fa:	fab1 f381 	clz	r3, r1
    c0fe:	bf08      	it	eq
    c100:	3320      	addeq	r3, #32
    c102:	f1a3 030b 	sub.w	r3, r3, #11
    c106:	f1b3 0220 	subs.w	r2, r3, #32
    c10a:	da0c      	bge.n	c126 <__adddf3+0x16e>
    c10c:	320c      	adds	r2, #12
    c10e:	dd08      	ble.n	c122 <__adddf3+0x16a>
    c110:	f102 0c14 	add.w	ip, r2, #20
    c114:	f1c2 020c 	rsb	r2, r2, #12
    c118:	fa01 f00c 	lsl.w	r0, r1, ip
    c11c:	fa21 f102 	lsr.w	r1, r1, r2
    c120:	e00c      	b.n	c13c <__adddf3+0x184>
    c122:	f102 0214 	add.w	r2, r2, #20
    c126:	bfd8      	it	le
    c128:	f1c2 0c20 	rsble	ip, r2, #32
    c12c:	fa01 f102 	lsl.w	r1, r1, r2
    c130:	fa20 fc0c 	lsr.w	ip, r0, ip
    c134:	bfdc      	itt	le
    c136:	ea41 010c 	orrle.w	r1, r1, ip
    c13a:	4090      	lslle	r0, r2
    c13c:	1ae4      	subs	r4, r4, r3
    c13e:	bfa2      	ittt	ge
    c140:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c144:	4329      	orrge	r1, r5
    c146:	bd30      	popge	{r4, r5, pc}
    c148:	ea6f 0404 	mvn.w	r4, r4
    c14c:	3c1f      	subs	r4, #31
    c14e:	da1c      	bge.n	c18a <__adddf3+0x1d2>
    c150:	340c      	adds	r4, #12
    c152:	dc0e      	bgt.n	c172 <__adddf3+0x1ba>
    c154:	f104 0414 	add.w	r4, r4, #20
    c158:	f1c4 0220 	rsb	r2, r4, #32
    c15c:	fa20 f004 	lsr.w	r0, r0, r4
    c160:	fa01 f302 	lsl.w	r3, r1, r2
    c164:	ea40 0003 	orr.w	r0, r0, r3
    c168:	fa21 f304 	lsr.w	r3, r1, r4
    c16c:	ea45 0103 	orr.w	r1, r5, r3
    c170:	bd30      	pop	{r4, r5, pc}
    c172:	f1c4 040c 	rsb	r4, r4, #12
    c176:	f1c4 0220 	rsb	r2, r4, #32
    c17a:	fa20 f002 	lsr.w	r0, r0, r2
    c17e:	fa01 f304 	lsl.w	r3, r1, r4
    c182:	ea40 0003 	orr.w	r0, r0, r3
    c186:	4629      	mov	r1, r5
    c188:	bd30      	pop	{r4, r5, pc}
    c18a:	fa21 f004 	lsr.w	r0, r1, r4
    c18e:	4629      	mov	r1, r5
    c190:	bd30      	pop	{r4, r5, pc}
    c192:	f094 0f00 	teq	r4, #0
    c196:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c19a:	bf06      	itte	eq
    c19c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c1a0:	3401      	addeq	r4, #1
    c1a2:	3d01      	subne	r5, #1
    c1a4:	e74e      	b.n	c044 <__adddf3+0x8c>
    c1a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c1aa:	bf18      	it	ne
    c1ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c1b0:	d029      	beq.n	c206 <__adddf3+0x24e>
    c1b2:	ea94 0f05 	teq	r4, r5
    c1b6:	bf08      	it	eq
    c1b8:	ea90 0f02 	teqeq	r0, r2
    c1bc:	d005      	beq.n	c1ca <__adddf3+0x212>
    c1be:	ea54 0c00 	orrs.w	ip, r4, r0
    c1c2:	bf04      	itt	eq
    c1c4:	4619      	moveq	r1, r3
    c1c6:	4610      	moveq	r0, r2
    c1c8:	bd30      	pop	{r4, r5, pc}
    c1ca:	ea91 0f03 	teq	r1, r3
    c1ce:	bf1e      	ittt	ne
    c1d0:	2100      	movne	r1, #0
    c1d2:	2000      	movne	r0, #0
    c1d4:	bd30      	popne	{r4, r5, pc}
    c1d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c1da:	d105      	bne.n	c1e8 <__adddf3+0x230>
    c1dc:	0040      	lsls	r0, r0, #1
    c1de:	4149      	adcs	r1, r1
    c1e0:	bf28      	it	cs
    c1e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c1e6:	bd30      	pop	{r4, r5, pc}
    c1e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c1ec:	bf3c      	itt	cc
    c1ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c1f2:	bd30      	popcc	{r4, r5, pc}
    c1f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c1fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c200:	f04f 0000 	mov.w	r0, #0
    c204:	bd30      	pop	{r4, r5, pc}
    c206:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c20a:	bf1a      	itte	ne
    c20c:	4619      	movne	r1, r3
    c20e:	4610      	movne	r0, r2
    c210:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c214:	bf1c      	itt	ne
    c216:	460b      	movne	r3, r1
    c218:	4602      	movne	r2, r0
    c21a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c21e:	bf06      	itte	eq
    c220:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c224:	ea91 0f03 	teqeq	r1, r3
    c228:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c22c:	bd30      	pop	{r4, r5, pc}
    c22e:	bf00      	nop

0000c230 <__aeabi_ui2d>:
    c230:	f090 0f00 	teq	r0, #0
    c234:	bf04      	itt	eq
    c236:	2100      	moveq	r1, #0
    c238:	4770      	bxeq	lr
    c23a:	b530      	push	{r4, r5, lr}
    c23c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c240:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c244:	f04f 0500 	mov.w	r5, #0
    c248:	f04f 0100 	mov.w	r1, #0
    c24c:	e750      	b.n	c0f0 <__adddf3+0x138>
    c24e:	bf00      	nop

0000c250 <__aeabi_i2d>:
    c250:	f090 0f00 	teq	r0, #0
    c254:	bf04      	itt	eq
    c256:	2100      	moveq	r1, #0
    c258:	4770      	bxeq	lr
    c25a:	b530      	push	{r4, r5, lr}
    c25c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c260:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c264:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c268:	bf48      	it	mi
    c26a:	4240      	negmi	r0, r0
    c26c:	f04f 0100 	mov.w	r1, #0
    c270:	e73e      	b.n	c0f0 <__adddf3+0x138>
    c272:	bf00      	nop

0000c274 <__aeabi_f2d>:
    c274:	0042      	lsls	r2, r0, #1
    c276:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c27a:	ea4f 0131 	mov.w	r1, r1, rrx
    c27e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c282:	bf1f      	itttt	ne
    c284:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c288:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c28c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c290:	4770      	bxne	lr
    c292:	f092 0f00 	teq	r2, #0
    c296:	bf14      	ite	ne
    c298:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c29c:	4770      	bxeq	lr
    c29e:	b530      	push	{r4, r5, lr}
    c2a0:	f44f 7460 	mov.w	r4, #896	; 0x380
    c2a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c2a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c2ac:	e720      	b.n	c0f0 <__adddf3+0x138>
    c2ae:	bf00      	nop

0000c2b0 <__aeabi_ul2d>:
    c2b0:	ea50 0201 	orrs.w	r2, r0, r1
    c2b4:	bf08      	it	eq
    c2b6:	4770      	bxeq	lr
    c2b8:	b530      	push	{r4, r5, lr}
    c2ba:	f04f 0500 	mov.w	r5, #0
    c2be:	e00a      	b.n	c2d6 <__aeabi_l2d+0x16>

0000c2c0 <__aeabi_l2d>:
    c2c0:	ea50 0201 	orrs.w	r2, r0, r1
    c2c4:	bf08      	it	eq
    c2c6:	4770      	bxeq	lr
    c2c8:	b530      	push	{r4, r5, lr}
    c2ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c2ce:	d502      	bpl.n	c2d6 <__aeabi_l2d+0x16>
    c2d0:	4240      	negs	r0, r0
    c2d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c2da:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c2de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c2e2:	f43f aedc 	beq.w	c09e <__adddf3+0xe6>
    c2e6:	f04f 0203 	mov.w	r2, #3
    c2ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c2ee:	bf18      	it	ne
    c2f0:	3203      	addne	r2, #3
    c2f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c2f6:	bf18      	it	ne
    c2f8:	3203      	addne	r2, #3
    c2fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c2fe:	f1c2 0320 	rsb	r3, r2, #32
    c302:	fa00 fc03 	lsl.w	ip, r0, r3
    c306:	fa20 f002 	lsr.w	r0, r0, r2
    c30a:	fa01 fe03 	lsl.w	lr, r1, r3
    c30e:	ea40 000e 	orr.w	r0, r0, lr
    c312:	fa21 f102 	lsr.w	r1, r1, r2
    c316:	4414      	add	r4, r2
    c318:	e6c1      	b.n	c09e <__adddf3+0xe6>
    c31a:	bf00      	nop

0000c31c <__aeabi_dmul>:
    c31c:	b570      	push	{r4, r5, r6, lr}
    c31e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c322:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c326:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c32a:	bf1d      	ittte	ne
    c32c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c330:	ea94 0f0c 	teqne	r4, ip
    c334:	ea95 0f0c 	teqne	r5, ip
    c338:	f000 f8de 	bleq	c4f8 <__aeabi_dmul+0x1dc>
    c33c:	442c      	add	r4, r5
    c33e:	ea81 0603 	eor.w	r6, r1, r3
    c342:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c346:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c34a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c34e:	bf18      	it	ne
    c350:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c35c:	d038      	beq.n	c3d0 <__aeabi_dmul+0xb4>
    c35e:	fba0 ce02 	umull	ip, lr, r0, r2
    c362:	f04f 0500 	mov.w	r5, #0
    c366:	fbe1 e502 	umlal	lr, r5, r1, r2
    c36a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c36e:	fbe0 e503 	umlal	lr, r5, r0, r3
    c372:	f04f 0600 	mov.w	r6, #0
    c376:	fbe1 5603 	umlal	r5, r6, r1, r3
    c37a:	f09c 0f00 	teq	ip, #0
    c37e:	bf18      	it	ne
    c380:	f04e 0e01 	orrne.w	lr, lr, #1
    c384:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c388:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c38c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c390:	d204      	bcs.n	c39c <__aeabi_dmul+0x80>
    c392:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c396:	416d      	adcs	r5, r5
    c398:	eb46 0606 	adc.w	r6, r6, r6
    c39c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c3a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c3a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c3a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c3ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c3b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c3b4:	bf88      	it	hi
    c3b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c3ba:	d81e      	bhi.n	c3fa <__aeabi_dmul+0xde>
    c3bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c3c0:	bf08      	it	eq
    c3c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c3c6:	f150 0000 	adcs.w	r0, r0, #0
    c3ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c3ce:	bd70      	pop	{r4, r5, r6, pc}
    c3d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c3d4:	ea46 0101 	orr.w	r1, r6, r1
    c3d8:	ea40 0002 	orr.w	r0, r0, r2
    c3dc:	ea81 0103 	eor.w	r1, r1, r3
    c3e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c3e4:	bfc2      	ittt	gt
    c3e6:	ebd4 050c 	rsbsgt	r5, r4, ip
    c3ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c3ee:	bd70      	popgt	{r4, r5, r6, pc}
    c3f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c3f4:	f04f 0e00 	mov.w	lr, #0
    c3f8:	3c01      	subs	r4, #1
    c3fa:	f300 80ab 	bgt.w	c554 <__aeabi_dmul+0x238>
    c3fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c402:	bfde      	ittt	le
    c404:	2000      	movle	r0, #0
    c406:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c40a:	bd70      	pople	{r4, r5, r6, pc}
    c40c:	f1c4 0400 	rsb	r4, r4, #0
    c410:	3c20      	subs	r4, #32
    c412:	da35      	bge.n	c480 <__aeabi_dmul+0x164>
    c414:	340c      	adds	r4, #12
    c416:	dc1b      	bgt.n	c450 <__aeabi_dmul+0x134>
    c418:	f104 0414 	add.w	r4, r4, #20
    c41c:	f1c4 0520 	rsb	r5, r4, #32
    c420:	fa00 f305 	lsl.w	r3, r0, r5
    c424:	fa20 f004 	lsr.w	r0, r0, r4
    c428:	fa01 f205 	lsl.w	r2, r1, r5
    c42c:	ea40 0002 	orr.w	r0, r0, r2
    c430:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c434:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c438:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c43c:	fa21 f604 	lsr.w	r6, r1, r4
    c440:	eb42 0106 	adc.w	r1, r2, r6
    c444:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c448:	bf08      	it	eq
    c44a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c44e:	bd70      	pop	{r4, r5, r6, pc}
    c450:	f1c4 040c 	rsb	r4, r4, #12
    c454:	f1c4 0520 	rsb	r5, r4, #32
    c458:	fa00 f304 	lsl.w	r3, r0, r4
    c45c:	fa20 f005 	lsr.w	r0, r0, r5
    c460:	fa01 f204 	lsl.w	r2, r1, r4
    c464:	ea40 0002 	orr.w	r0, r0, r2
    c468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c46c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c470:	f141 0100 	adc.w	r1, r1, #0
    c474:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c478:	bf08      	it	eq
    c47a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c47e:	bd70      	pop	{r4, r5, r6, pc}
    c480:	f1c4 0520 	rsb	r5, r4, #32
    c484:	fa00 f205 	lsl.w	r2, r0, r5
    c488:	ea4e 0e02 	orr.w	lr, lr, r2
    c48c:	fa20 f304 	lsr.w	r3, r0, r4
    c490:	fa01 f205 	lsl.w	r2, r1, r5
    c494:	ea43 0302 	orr.w	r3, r3, r2
    c498:	fa21 f004 	lsr.w	r0, r1, r4
    c49c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c4a0:	fa21 f204 	lsr.w	r2, r1, r4
    c4a4:	ea20 0002 	bic.w	r0, r0, r2
    c4a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c4ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c4b0:	bf08      	it	eq
    c4b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c4b6:	bd70      	pop	{r4, r5, r6, pc}
    c4b8:	f094 0f00 	teq	r4, #0
    c4bc:	d10f      	bne.n	c4de <__aeabi_dmul+0x1c2>
    c4be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c4c2:	0040      	lsls	r0, r0, #1
    c4c4:	eb41 0101 	adc.w	r1, r1, r1
    c4c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c4cc:	bf08      	it	eq
    c4ce:	3c01      	subeq	r4, #1
    c4d0:	d0f7      	beq.n	c4c2 <__aeabi_dmul+0x1a6>
    c4d2:	ea41 0106 	orr.w	r1, r1, r6
    c4d6:	f095 0f00 	teq	r5, #0
    c4da:	bf18      	it	ne
    c4dc:	4770      	bxne	lr
    c4de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c4e2:	0052      	lsls	r2, r2, #1
    c4e4:	eb43 0303 	adc.w	r3, r3, r3
    c4e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c4ec:	bf08      	it	eq
    c4ee:	3d01      	subeq	r5, #1
    c4f0:	d0f7      	beq.n	c4e2 <__aeabi_dmul+0x1c6>
    c4f2:	ea43 0306 	orr.w	r3, r3, r6
    c4f6:	4770      	bx	lr
    c4f8:	ea94 0f0c 	teq	r4, ip
    c4fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c500:	bf18      	it	ne
    c502:	ea95 0f0c 	teqne	r5, ip
    c506:	d00c      	beq.n	c522 <__aeabi_dmul+0x206>
    c508:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c50c:	bf18      	it	ne
    c50e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c512:	d1d1      	bne.n	c4b8 <__aeabi_dmul+0x19c>
    c514:	ea81 0103 	eor.w	r1, r1, r3
    c518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c51c:	f04f 0000 	mov.w	r0, #0
    c520:	bd70      	pop	{r4, r5, r6, pc}
    c522:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c526:	bf06      	itte	eq
    c528:	4610      	moveq	r0, r2
    c52a:	4619      	moveq	r1, r3
    c52c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c530:	d019      	beq.n	c566 <__aeabi_dmul+0x24a>
    c532:	ea94 0f0c 	teq	r4, ip
    c536:	d102      	bne.n	c53e <__aeabi_dmul+0x222>
    c538:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c53c:	d113      	bne.n	c566 <__aeabi_dmul+0x24a>
    c53e:	ea95 0f0c 	teq	r5, ip
    c542:	d105      	bne.n	c550 <__aeabi_dmul+0x234>
    c544:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c548:	bf1c      	itt	ne
    c54a:	4610      	movne	r0, r2
    c54c:	4619      	movne	r1, r3
    c54e:	d10a      	bne.n	c566 <__aeabi_dmul+0x24a>
    c550:	ea81 0103 	eor.w	r1, r1, r3
    c554:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c558:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c55c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c560:	f04f 0000 	mov.w	r0, #0
    c564:	bd70      	pop	{r4, r5, r6, pc}
    c566:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c56a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c56e:	bd70      	pop	{r4, r5, r6, pc}

0000c570 <__aeabi_ddiv>:
    c570:	b570      	push	{r4, r5, r6, lr}
    c572:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c57a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c57e:	bf1d      	ittte	ne
    c580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c584:	ea94 0f0c 	teqne	r4, ip
    c588:	ea95 0f0c 	teqne	r5, ip
    c58c:	f000 f8a7 	bleq	c6de <__aeabi_ddiv+0x16e>
    c590:	eba4 0405 	sub.w	r4, r4, r5
    c594:	ea81 0e03 	eor.w	lr, r1, r3
    c598:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c59c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c5a0:	f000 8088 	beq.w	c6b4 <__aeabi_ddiv+0x144>
    c5a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c5a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c5ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c5b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c5b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c5b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c5bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c5c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c5c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c5c8:	429d      	cmp	r5, r3
    c5ca:	bf08      	it	eq
    c5cc:	4296      	cmpeq	r6, r2
    c5ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c5d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c5d6:	d202      	bcs.n	c5de <__aeabi_ddiv+0x6e>
    c5d8:	085b      	lsrs	r3, r3, #1
    c5da:	ea4f 0232 	mov.w	r2, r2, rrx
    c5de:	1ab6      	subs	r6, r6, r2
    c5e0:	eb65 0503 	sbc.w	r5, r5, r3
    c5e4:	085b      	lsrs	r3, r3, #1
    c5e6:	ea4f 0232 	mov.w	r2, r2, rrx
    c5ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c5ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c5f2:	ebb6 0e02 	subs.w	lr, r6, r2
    c5f6:	eb75 0e03 	sbcs.w	lr, r5, r3
    c5fa:	bf22      	ittt	cs
    c5fc:	1ab6      	subcs	r6, r6, r2
    c5fe:	4675      	movcs	r5, lr
    c600:	ea40 000c 	orrcs.w	r0, r0, ip
    c604:	085b      	lsrs	r3, r3, #1
    c606:	ea4f 0232 	mov.w	r2, r2, rrx
    c60a:	ebb6 0e02 	subs.w	lr, r6, r2
    c60e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c612:	bf22      	ittt	cs
    c614:	1ab6      	subcs	r6, r6, r2
    c616:	4675      	movcs	r5, lr
    c618:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c61c:	085b      	lsrs	r3, r3, #1
    c61e:	ea4f 0232 	mov.w	r2, r2, rrx
    c622:	ebb6 0e02 	subs.w	lr, r6, r2
    c626:	eb75 0e03 	sbcs.w	lr, r5, r3
    c62a:	bf22      	ittt	cs
    c62c:	1ab6      	subcs	r6, r6, r2
    c62e:	4675      	movcs	r5, lr
    c630:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c634:	085b      	lsrs	r3, r3, #1
    c636:	ea4f 0232 	mov.w	r2, r2, rrx
    c63a:	ebb6 0e02 	subs.w	lr, r6, r2
    c63e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c642:	bf22      	ittt	cs
    c644:	1ab6      	subcs	r6, r6, r2
    c646:	4675      	movcs	r5, lr
    c648:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c64c:	ea55 0e06 	orrs.w	lr, r5, r6
    c650:	d018      	beq.n	c684 <__aeabi_ddiv+0x114>
    c652:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c656:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c65a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c65e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c662:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c666:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c66a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c66e:	d1c0      	bne.n	c5f2 <__aeabi_ddiv+0x82>
    c670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c674:	d10b      	bne.n	c68e <__aeabi_ddiv+0x11e>
    c676:	ea41 0100 	orr.w	r1, r1, r0
    c67a:	f04f 0000 	mov.w	r0, #0
    c67e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c682:	e7b6      	b.n	c5f2 <__aeabi_ddiv+0x82>
    c684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c688:	bf04      	itt	eq
    c68a:	4301      	orreq	r1, r0
    c68c:	2000      	moveq	r0, #0
    c68e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c692:	bf88      	it	hi
    c694:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c698:	f63f aeaf 	bhi.w	c3fa <__aeabi_dmul+0xde>
    c69c:	ebb5 0c03 	subs.w	ip, r5, r3
    c6a0:	bf04      	itt	eq
    c6a2:	ebb6 0c02 	subseq.w	ip, r6, r2
    c6a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c6aa:	f150 0000 	adcs.w	r0, r0, #0
    c6ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c6b2:	bd70      	pop	{r4, r5, r6, pc}
    c6b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c6b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c6bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c6c0:	bfc2      	ittt	gt
    c6c2:	ebd4 050c 	rsbsgt	r5, r4, ip
    c6c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c6ca:	bd70      	popgt	{r4, r5, r6, pc}
    c6cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c6d0:	f04f 0e00 	mov.w	lr, #0
    c6d4:	3c01      	subs	r4, #1
    c6d6:	e690      	b.n	c3fa <__aeabi_dmul+0xde>
    c6d8:	ea45 0e06 	orr.w	lr, r5, r6
    c6dc:	e68d      	b.n	c3fa <__aeabi_dmul+0xde>
    c6de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c6e2:	ea94 0f0c 	teq	r4, ip
    c6e6:	bf08      	it	eq
    c6e8:	ea95 0f0c 	teqeq	r5, ip
    c6ec:	f43f af3b 	beq.w	c566 <__aeabi_dmul+0x24a>
    c6f0:	ea94 0f0c 	teq	r4, ip
    c6f4:	d10a      	bne.n	c70c <__aeabi_ddiv+0x19c>
    c6f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c6fa:	f47f af34 	bne.w	c566 <__aeabi_dmul+0x24a>
    c6fe:	ea95 0f0c 	teq	r5, ip
    c702:	f47f af25 	bne.w	c550 <__aeabi_dmul+0x234>
    c706:	4610      	mov	r0, r2
    c708:	4619      	mov	r1, r3
    c70a:	e72c      	b.n	c566 <__aeabi_dmul+0x24a>
    c70c:	ea95 0f0c 	teq	r5, ip
    c710:	d106      	bne.n	c720 <__aeabi_ddiv+0x1b0>
    c712:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c716:	f43f aefd 	beq.w	c514 <__aeabi_dmul+0x1f8>
    c71a:	4610      	mov	r0, r2
    c71c:	4619      	mov	r1, r3
    c71e:	e722      	b.n	c566 <__aeabi_dmul+0x24a>
    c720:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c724:	bf18      	it	ne
    c726:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c72a:	f47f aec5 	bne.w	c4b8 <__aeabi_dmul+0x19c>
    c72e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c732:	f47f af0d 	bne.w	c550 <__aeabi_dmul+0x234>
    c736:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c73a:	f47f aeeb 	bne.w	c514 <__aeabi_dmul+0x1f8>
    c73e:	e712      	b.n	c566 <__aeabi_dmul+0x24a>

0000c740 <__gedf2>:
    c740:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    c744:	e006      	b.n	c754 <__cmpdf2+0x4>
    c746:	bf00      	nop

0000c748 <__ledf2>:
    c748:	f04f 0c01 	mov.w	ip, #1
    c74c:	e002      	b.n	c754 <__cmpdf2+0x4>
    c74e:	bf00      	nop

0000c750 <__cmpdf2>:
    c750:	f04f 0c01 	mov.w	ip, #1
    c754:	f84d cd04 	str.w	ip, [sp, #-4]!
    c758:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c75c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c760:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c764:	bf18      	it	ne
    c766:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c76a:	d01b      	beq.n	c7a4 <__cmpdf2+0x54>
    c76c:	b001      	add	sp, #4
    c76e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c772:	bf0c      	ite	eq
    c774:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c778:	ea91 0f03 	teqne	r1, r3
    c77c:	bf02      	ittt	eq
    c77e:	ea90 0f02 	teqeq	r0, r2
    c782:	2000      	moveq	r0, #0
    c784:	4770      	bxeq	lr
    c786:	f110 0f00 	cmn.w	r0, #0
    c78a:	ea91 0f03 	teq	r1, r3
    c78e:	bf58      	it	pl
    c790:	4299      	cmppl	r1, r3
    c792:	bf08      	it	eq
    c794:	4290      	cmpeq	r0, r2
    c796:	bf2c      	ite	cs
    c798:	17d8      	asrcs	r0, r3, #31
    c79a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c79e:	f040 0001 	orr.w	r0, r0, #1
    c7a2:	4770      	bx	lr
    c7a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c7a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c7ac:	d102      	bne.n	c7b4 <__cmpdf2+0x64>
    c7ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c7b2:	d107      	bne.n	c7c4 <__cmpdf2+0x74>
    c7b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c7b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c7bc:	d1d6      	bne.n	c76c <__cmpdf2+0x1c>
    c7be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c7c2:	d0d3      	beq.n	c76c <__cmpdf2+0x1c>
    c7c4:	f85d 0b04 	ldr.w	r0, [sp], #4
    c7c8:	4770      	bx	lr
    c7ca:	bf00      	nop

0000c7cc <__aeabi_cdrcmple>:
    c7cc:	4684      	mov	ip, r0
    c7ce:	4610      	mov	r0, r2
    c7d0:	4662      	mov	r2, ip
    c7d2:	468c      	mov	ip, r1
    c7d4:	4619      	mov	r1, r3
    c7d6:	4663      	mov	r3, ip
    c7d8:	e000      	b.n	c7dc <__aeabi_cdcmpeq>
    c7da:	bf00      	nop

0000c7dc <__aeabi_cdcmpeq>:
    c7dc:	b501      	push	{r0, lr}
    c7de:	f7ff ffb7 	bl	c750 <__cmpdf2>
    c7e2:	2800      	cmp	r0, #0
    c7e4:	bf48      	it	mi
    c7e6:	f110 0f00 	cmnmi.w	r0, #0
    c7ea:	bd01      	pop	{r0, pc}

0000c7ec <__aeabi_dcmpeq>:
    c7ec:	f84d ed08 	str.w	lr, [sp, #-8]!
    c7f0:	f7ff fff4 	bl	c7dc <__aeabi_cdcmpeq>
    c7f4:	bf0c      	ite	eq
    c7f6:	2001      	moveq	r0, #1
    c7f8:	2000      	movne	r0, #0
    c7fa:	f85d fb08 	ldr.w	pc, [sp], #8
    c7fe:	bf00      	nop

0000c800 <__aeabi_dcmplt>:
    c800:	f84d ed08 	str.w	lr, [sp, #-8]!
    c804:	f7ff ffea 	bl	c7dc <__aeabi_cdcmpeq>
    c808:	bf34      	ite	cc
    c80a:	2001      	movcc	r0, #1
    c80c:	2000      	movcs	r0, #0
    c80e:	f85d fb08 	ldr.w	pc, [sp], #8
    c812:	bf00      	nop

0000c814 <__aeabi_dcmple>:
    c814:	f84d ed08 	str.w	lr, [sp, #-8]!
    c818:	f7ff ffe0 	bl	c7dc <__aeabi_cdcmpeq>
    c81c:	bf94      	ite	ls
    c81e:	2001      	movls	r0, #1
    c820:	2000      	movhi	r0, #0
    c822:	f85d fb08 	ldr.w	pc, [sp], #8
    c826:	bf00      	nop

0000c828 <__aeabi_dcmpge>:
    c828:	f84d ed08 	str.w	lr, [sp, #-8]!
    c82c:	f7ff ffce 	bl	c7cc <__aeabi_cdrcmple>
    c830:	bf94      	ite	ls
    c832:	2001      	movls	r0, #1
    c834:	2000      	movhi	r0, #0
    c836:	f85d fb08 	ldr.w	pc, [sp], #8
    c83a:	bf00      	nop

0000c83c <__aeabi_dcmpgt>:
    c83c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c840:	f7ff ffc4 	bl	c7cc <__aeabi_cdrcmple>
    c844:	bf34      	ite	cc
    c846:	2001      	movcc	r0, #1
    c848:	2000      	movcs	r0, #0
    c84a:	f85d fb08 	ldr.w	pc, [sp], #8
    c84e:	bf00      	nop

0000c850 <__aeabi_d2iz>:
    c850:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c854:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c858:	d215      	bcs.n	c886 <__aeabi_d2iz+0x36>
    c85a:	d511      	bpl.n	c880 <__aeabi_d2iz+0x30>
    c85c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c860:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c864:	d912      	bls.n	c88c <__aeabi_d2iz+0x3c>
    c866:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c86a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c86e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c872:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c876:	fa23 f002 	lsr.w	r0, r3, r2
    c87a:	bf18      	it	ne
    c87c:	4240      	negne	r0, r0
    c87e:	4770      	bx	lr
    c880:	f04f 0000 	mov.w	r0, #0
    c884:	4770      	bx	lr
    c886:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c88a:	d105      	bne.n	c898 <__aeabi_d2iz+0x48>
    c88c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c890:	bf08      	it	eq
    c892:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c896:	4770      	bx	lr
    c898:	f04f 0000 	mov.w	r0, #0
    c89c:	4770      	bx	lr
    c89e:	bf00      	nop

0000c8a0 <__aeabi_d2uiz>:
    c8a0:	004a      	lsls	r2, r1, #1
    c8a2:	d211      	bcs.n	c8c8 <__aeabi_d2uiz+0x28>
    c8a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c8a8:	d211      	bcs.n	c8ce <__aeabi_d2uiz+0x2e>
    c8aa:	d50d      	bpl.n	c8c8 <__aeabi_d2uiz+0x28>
    c8ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c8b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c8b4:	d40e      	bmi.n	c8d4 <__aeabi_d2uiz+0x34>
    c8b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c8ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c8be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c8c2:	fa23 f002 	lsr.w	r0, r3, r2
    c8c6:	4770      	bx	lr
    c8c8:	f04f 0000 	mov.w	r0, #0
    c8cc:	4770      	bx	lr
    c8ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c8d2:	d102      	bne.n	c8da <__aeabi_d2uiz+0x3a>
    c8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c8d8:	4770      	bx	lr
    c8da:	f04f 0000 	mov.w	r0, #0
    c8de:	4770      	bx	lr

0000c8e0 <selfrel_offset31>:
    c8e0:	6803      	ldr	r3, [r0, #0]
    c8e2:	005a      	lsls	r2, r3, #1
    c8e4:	bf4c      	ite	mi
    c8e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    c8ea:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    c8ee:	4418      	add	r0, r3
    c8f0:	4770      	bx	lr
    c8f2:	bf00      	nop

0000c8f4 <search_EIT_table>:
    c8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8f8:	4606      	mov	r6, r0
    c8fa:	b083      	sub	sp, #12
    c8fc:	4691      	mov	r9, r2
    c8fe:	b321      	cbz	r1, c94a <search_EIT_table+0x56>
    c900:	3901      	subs	r1, #1
    c902:	9101      	str	r1, [sp, #4]
    c904:	4688      	mov	r8, r1
    c906:	2700      	movs	r7, #0
    c908:	eb07 0408 	add.w	r4, r7, r8
    c90c:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    c910:	1064      	asrs	r4, r4, #1
    c912:	00e5      	lsls	r5, r4, #3
    c914:	eb06 0b05 	add.w	fp, r6, r5
    c918:	4658      	mov	r0, fp
    c91a:	f7ff ffe1 	bl	c8e0 <selfrel_offset31>
    c91e:	9b01      	ldr	r3, [sp, #4]
    c920:	4682      	mov	sl, r0
    c922:	42a3      	cmp	r3, r4
    c924:	f105 0008 	add.w	r0, r5, #8
    c928:	4430      	add	r0, r6
    c92a:	d019      	beq.n	c960 <search_EIT_table+0x6c>
    c92c:	f7ff ffd8 	bl	c8e0 <selfrel_offset31>
    c930:	45ca      	cmp	sl, r9
    c932:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    c936:	d904      	bls.n	c942 <search_EIT_table+0x4e>
    c938:	42bc      	cmp	r4, r7
    c93a:	d00b      	beq.n	c954 <search_EIT_table+0x60>
    c93c:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    c940:	e7e2      	b.n	c908 <search_EIT_table+0x14>
    c942:	4548      	cmp	r0, r9
    c944:	d202      	bcs.n	c94c <search_EIT_table+0x58>
    c946:	1c67      	adds	r7, r4, #1
    c948:	e7de      	b.n	c908 <search_EIT_table+0x14>
    c94a:	468b      	mov	fp, r1
    c94c:	4658      	mov	r0, fp
    c94e:	b003      	add	sp, #12
    c950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c954:	f04f 0b00 	mov.w	fp, #0
    c958:	4658      	mov	r0, fp
    c95a:	b003      	add	sp, #12
    c95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c960:	45ca      	cmp	sl, r9
    c962:	d8e9      	bhi.n	c938 <search_EIT_table+0x44>
    c964:	e7f2      	b.n	c94c <search_EIT_table+0x58>
    c966:	bf00      	nop

0000c968 <__gnu_unwind_get_pr_addr>:
    c968:	2801      	cmp	r0, #1
    c96a:	d007      	beq.n	c97c <__gnu_unwind_get_pr_addr+0x14>
    c96c:	2802      	cmp	r0, #2
    c96e:	d007      	beq.n	c980 <__gnu_unwind_get_pr_addr+0x18>
    c970:	4b04      	ldr	r3, [pc, #16]	; (c984 <__gnu_unwind_get_pr_addr+0x1c>)
    c972:	2800      	cmp	r0, #0
    c974:	bf0c      	ite	eq
    c976:	4618      	moveq	r0, r3
    c978:	2000      	movne	r0, #0
    c97a:	4770      	bx	lr
    c97c:	4802      	ldr	r0, [pc, #8]	; (c988 <__gnu_unwind_get_pr_addr+0x20>)
    c97e:	4770      	bx	lr
    c980:	4802      	ldr	r0, [pc, #8]	; (c98c <__gnu_unwind_get_pr_addr+0x24>)
    c982:	4770      	bx	lr
    c984:	0000d099 	.word	0x0000d099
    c988:	0000d0a1 	.word	0x0000d0a1
    c98c:	0000d0a9 	.word	0x0000d0a9

0000c990 <get_eit_entry>:
    c990:	b530      	push	{r4, r5, lr}
    c992:	4b27      	ldr	r3, [pc, #156]	; (ca30 <get_eit_entry+0xa0>)
    c994:	b083      	sub	sp, #12
    c996:	4604      	mov	r4, r0
    c998:	1e8d      	subs	r5, r1, #2
    c99a:	2b00      	cmp	r3, #0
    c99c:	d042      	beq.n	ca24 <get_eit_entry+0x94>
    c99e:	4628      	mov	r0, r5
    c9a0:	a901      	add	r1, sp, #4
    c9a2:	f3af 8000 	nop.w
    c9a6:	4603      	mov	r3, r0
    c9a8:	b323      	cbz	r3, c9f4 <get_eit_entry+0x64>
    c9aa:	462a      	mov	r2, r5
    c9ac:	9901      	ldr	r1, [sp, #4]
    c9ae:	f7ff ffa1 	bl	c8f4 <search_EIT_table>
    c9b2:	4605      	mov	r5, r0
    c9b4:	b318      	cbz	r0, c9fe <get_eit_entry+0x6e>
    c9b6:	f7ff ff93 	bl	c8e0 <selfrel_offset31>
    c9ba:	686b      	ldr	r3, [r5, #4]
    c9bc:	64a0      	str	r0, [r4, #72]	; 0x48
    c9be:	2b01      	cmp	r3, #1
    c9c0:	d012      	beq.n	c9e8 <get_eit_entry+0x58>
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	f105 0004 	add.w	r0, r5, #4
    c9c8:	db28      	blt.n	ca1c <get_eit_entry+0x8c>
    c9ca:	f7ff ff89 	bl	c8e0 <selfrel_offset31>
    c9ce:	2300      	movs	r3, #0
    c9d0:	64e0      	str	r0, [r4, #76]	; 0x4c
    c9d2:	6523      	str	r3, [r4, #80]	; 0x50
    c9d4:	6803      	ldr	r3, [r0, #0]
    c9d6:	2b00      	cmp	r3, #0
    c9d8:	db16      	blt.n	ca08 <get_eit_entry+0x78>
    c9da:	f7ff ff81 	bl	c8e0 <selfrel_offset31>
    c9de:	2300      	movs	r3, #0
    c9e0:	6120      	str	r0, [r4, #16]
    c9e2:	4618      	mov	r0, r3
    c9e4:	b003      	add	sp, #12
    c9e6:	bd30      	pop	{r4, r5, pc}
    c9e8:	2300      	movs	r3, #0
    c9ea:	6123      	str	r3, [r4, #16]
    c9ec:	2305      	movs	r3, #5
    c9ee:	4618      	mov	r0, r3
    c9f0:	b003      	add	sp, #12
    c9f2:	bd30      	pop	{r4, r5, pc}
    c9f4:	6123      	str	r3, [r4, #16]
    c9f6:	2309      	movs	r3, #9
    c9f8:	4618      	mov	r0, r3
    c9fa:	b003      	add	sp, #12
    c9fc:	bd30      	pop	{r4, r5, pc}
    c9fe:	2309      	movs	r3, #9
    ca00:	6120      	str	r0, [r4, #16]
    ca02:	4618      	mov	r0, r3
    ca04:	b003      	add	sp, #12
    ca06:	bd30      	pop	{r4, r5, pc}
    ca08:	f3c3 6003 	ubfx	r0, r3, #24, #4
    ca0c:	f7ff ffac 	bl	c968 <__gnu_unwind_get_pr_addr>
    ca10:	2800      	cmp	r0, #0
    ca12:	6120      	str	r0, [r4, #16]
    ca14:	bf14      	ite	ne
    ca16:	2300      	movne	r3, #0
    ca18:	2309      	moveq	r3, #9
    ca1a:	e7e2      	b.n	c9e2 <get_eit_entry+0x52>
    ca1c:	2301      	movs	r3, #1
    ca1e:	64e0      	str	r0, [r4, #76]	; 0x4c
    ca20:	6523      	str	r3, [r4, #80]	; 0x50
    ca22:	e7d7      	b.n	c9d4 <get_eit_entry+0x44>
    ca24:	4b03      	ldr	r3, [pc, #12]	; (ca34 <get_eit_entry+0xa4>)
    ca26:	4804      	ldr	r0, [pc, #16]	; (ca38 <get_eit_entry+0xa8>)
    ca28:	1a1b      	subs	r3, r3, r0
    ca2a:	10db      	asrs	r3, r3, #3
    ca2c:	9301      	str	r3, [sp, #4]
    ca2e:	e7bc      	b.n	c9aa <get_eit_entry+0x1a>
    ca30:	00000000 	.word	0x00000000
    ca34:	00014604 	.word	0x00014604
    ca38:	0001444c 	.word	0x0001444c

0000ca3c <restore_non_core_regs>:
    ca3c:	6803      	ldr	r3, [r0, #0]
    ca3e:	07da      	lsls	r2, r3, #31
    ca40:	b510      	push	{r4, lr}
    ca42:	4604      	mov	r4, r0
    ca44:	d406      	bmi.n	ca54 <restore_non_core_regs+0x18>
    ca46:	079b      	lsls	r3, r3, #30
    ca48:	f100 0048 	add.w	r0, r0, #72	; 0x48
    ca4c:	d509      	bpl.n	ca62 <restore_non_core_regs+0x26>
    ca4e:	f000 fc69 	bl	d324 <__gnu_Unwind_Restore_VFP_D>
    ca52:	6823      	ldr	r3, [r4, #0]
    ca54:	0759      	lsls	r1, r3, #29
    ca56:	d509      	bpl.n	ca6c <restore_non_core_regs+0x30>
    ca58:	071a      	lsls	r2, r3, #28
    ca5a:	d50e      	bpl.n	ca7a <restore_non_core_regs+0x3e>
    ca5c:	06db      	lsls	r3, r3, #27
    ca5e:	d513      	bpl.n	ca88 <restore_non_core_regs+0x4c>
    ca60:	bd10      	pop	{r4, pc}
    ca62:	f000 fc57 	bl	d314 <__gnu_Unwind_Restore_VFP>
    ca66:	6823      	ldr	r3, [r4, #0]
    ca68:	0759      	lsls	r1, r3, #29
    ca6a:	d4f5      	bmi.n	ca58 <restore_non_core_regs+0x1c>
    ca6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    ca70:	f000 fc60 	bl	d334 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    ca74:	6823      	ldr	r3, [r4, #0]
    ca76:	071a      	lsls	r2, r3, #28
    ca78:	d4f0      	bmi.n	ca5c <restore_non_core_regs+0x20>
    ca7a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    ca7e:	f000 fc61 	bl	d344 <__gnu_Unwind_Restore_WMMXD>
    ca82:	6823      	ldr	r3, [r4, #0]
    ca84:	06db      	lsls	r3, r3, #27
    ca86:	d4eb      	bmi.n	ca60 <restore_non_core_regs+0x24>
    ca88:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    ca8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca90:	f000 bc9c 	b.w	d3cc <__gnu_Unwind_Restore_WMMXC>

0000ca94 <_Unwind_decode_typeinfo_ptr.isra.0>:
    ca94:	6803      	ldr	r3, [r0, #0]
    ca96:	b10b      	cbz	r3, ca9c <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    ca98:	4418      	add	r0, r3
    ca9a:	4770      	bx	lr
    ca9c:	4618      	mov	r0, r3
    ca9e:	4770      	bx	lr

0000caa0 <__gnu_unwind_24bit.isra.1>:
    caa0:	2009      	movs	r0, #9
    caa2:	4770      	bx	lr

0000caa4 <_Unwind_DebugHook>:
    caa4:	4770      	bx	lr
    caa6:	bf00      	nop

0000caa8 <unwind_phase2>:
    caa8:	b570      	push	{r4, r5, r6, lr}
    caaa:	4604      	mov	r4, r0
    caac:	460d      	mov	r5, r1
    caae:	e008      	b.n	cac2 <unwind_phase2+0x1a>
    cab0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    cab2:	6163      	str	r3, [r4, #20]
    cab4:	2001      	movs	r0, #1
    cab6:	6923      	ldr	r3, [r4, #16]
    cab8:	4621      	mov	r1, r4
    caba:	462a      	mov	r2, r5
    cabc:	4798      	blx	r3
    cabe:	2808      	cmp	r0, #8
    cac0:	d108      	bne.n	cad4 <unwind_phase2+0x2c>
    cac2:	4620      	mov	r0, r4
    cac4:	6c29      	ldr	r1, [r5, #64]	; 0x40
    cac6:	f7ff ff63 	bl	c990 <get_eit_entry>
    caca:	4606      	mov	r6, r0
    cacc:	2800      	cmp	r0, #0
    cace:	d0ef      	beq.n	cab0 <unwind_phase2+0x8>
    cad0:	f000 fe88 	bl	d7e4 <abort>
    cad4:	2807      	cmp	r0, #7
    cad6:	d1fb      	bne.n	cad0 <unwind_phase2+0x28>
    cad8:	4630      	mov	r0, r6
    cada:	6c29      	ldr	r1, [r5, #64]	; 0x40
    cadc:	f7ff ffe2 	bl	caa4 <_Unwind_DebugHook>
    cae0:	1d28      	adds	r0, r5, #4
    cae2:	f000 fc0b 	bl	d2fc <__restore_core_regs>
    cae6:	bf00      	nop

0000cae8 <unwind_phase2_forced>:
    cae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    caec:	1d0c      	adds	r4, r1, #4
    caee:	4605      	mov	r5, r0
    caf0:	4617      	mov	r7, r2
    caf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    caf4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    caf8:	ae03      	add	r6, sp, #12
    cafa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    cafc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cafe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    cb00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cb02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    cb04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    cb08:	ac02      	add	r4, sp, #8
    cb0a:	f04f 0e00 	mov.w	lr, #0
    cb0e:	f8d5 800c 	ldr.w	r8, [r5, #12]
    cb12:	f8d5 9018 	ldr.w	r9, [r5, #24]
    cb16:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    cb1a:	4628      	mov	r0, r5
    cb1c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cb1e:	f8c4 e000 	str.w	lr, [r4]
    cb22:	f7ff ff35 	bl	c990 <get_eit_entry>
    cb26:	2f00      	cmp	r7, #0
    cb28:	4606      	mov	r6, r0
    cb2a:	bf14      	ite	ne
    cb2c:	270a      	movne	r7, #10
    cb2e:	2709      	moveq	r7, #9
    cb30:	b186      	cbz	r6, cb54 <unwind_phase2_forced+0x6c>
    cb32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    cb34:	462a      	mov	r2, r5
    cb36:	e88d 0210 	stmia.w	sp, {r4, r9}
    cb3a:	f047 0110 	orr.w	r1, r7, #16
    cb3e:	6460      	str	r0, [r4, #68]	; 0x44
    cb40:	462b      	mov	r3, r5
    cb42:	2001      	movs	r0, #1
    cb44:	47c0      	blx	r8
    cb46:	2800      	cmp	r0, #0
    cb48:	d12f      	bne.n	cbaa <unwind_phase2_forced+0xc2>
    cb4a:	4630      	mov	r0, r6
    cb4c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    cb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb54:	6c23      	ldr	r3, [r4, #64]	; 0x40
    cb56:	616b      	str	r3, [r5, #20]
    cb58:	4621      	mov	r1, r4
    cb5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    cb5e:	a87a      	add	r0, sp, #488	; 0x1e8
    cb60:	f001 fbb2 	bl	e2c8 <memcpy>
    cb64:	692b      	ldr	r3, [r5, #16]
    cb66:	4629      	mov	r1, r5
    cb68:	aa7a      	add	r2, sp, #488	; 0x1e8
    cb6a:	4638      	mov	r0, r7
    cb6c:	4798      	blx	r3
    cb6e:	9b88      	ldr	r3, [sp, #544]	; 0x220
    cb70:	4682      	mov	sl, r0
    cb72:	e88d 0210 	stmia.w	sp, {r4, r9}
    cb76:	4639      	mov	r1, r7
    cb78:	6463      	str	r3, [r4, #68]	; 0x44
    cb7a:	2001      	movs	r0, #1
    cb7c:	462a      	mov	r2, r5
    cb7e:	462b      	mov	r3, r5
    cb80:	47c0      	blx	r8
    cb82:	b990      	cbnz	r0, cbaa <unwind_phase2_forced+0xc2>
    cb84:	4620      	mov	r0, r4
    cb86:	a97a      	add	r1, sp, #488	; 0x1e8
    cb88:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    cb8c:	f001 fb9c 	bl	e2c8 <memcpy>
    cb90:	f1ba 0f08 	cmp.w	sl, #8
    cb94:	d106      	bne.n	cba4 <unwind_phase2_forced+0xbc>
    cb96:	4628      	mov	r0, r5
    cb98:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cb9a:	f7ff fef9 	bl	c990 <get_eit_entry>
    cb9e:	2709      	movs	r7, #9
    cba0:	4606      	mov	r6, r0
    cba2:	e7c5      	b.n	cb30 <unwind_phase2_forced+0x48>
    cba4:	f1ba 0f07 	cmp.w	sl, #7
    cba8:	d004      	beq.n	cbb4 <unwind_phase2_forced+0xcc>
    cbaa:	2009      	movs	r0, #9
    cbac:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    cbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbb4:	4630      	mov	r0, r6
    cbb6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cbb8:	f7ff ff74 	bl	caa4 <_Unwind_DebugHook>
    cbbc:	a803      	add	r0, sp, #12
    cbbe:	f000 fb9d 	bl	d2fc <__restore_core_regs>
    cbc2:	bf00      	nop

0000cbc4 <_Unwind_GetCFA>:
    cbc4:	6c40      	ldr	r0, [r0, #68]	; 0x44
    cbc6:	4770      	bx	lr

0000cbc8 <__gnu_Unwind_RaiseException>:
    cbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbca:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    cbcc:	640b      	str	r3, [r1, #64]	; 0x40
    cbce:	1d0e      	adds	r6, r1, #4
    cbd0:	460f      	mov	r7, r1
    cbd2:	4604      	mov	r4, r0
    cbd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cbd6:	b0f9      	sub	sp, #484	; 0x1e4
    cbd8:	ad01      	add	r5, sp, #4
    cbda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cbdc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cbde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cbe0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cbe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cbe4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    cbe8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    cbec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    cbf0:	9600      	str	r6, [sp, #0]
    cbf2:	e006      	b.n	cc02 <__gnu_Unwind_RaiseException+0x3a>
    cbf4:	6923      	ldr	r3, [r4, #16]
    cbf6:	4621      	mov	r1, r4
    cbf8:	466a      	mov	r2, sp
    cbfa:	4798      	blx	r3
    cbfc:	2808      	cmp	r0, #8
    cbfe:	4605      	mov	r5, r0
    cc00:	d108      	bne.n	cc14 <__gnu_Unwind_RaiseException+0x4c>
    cc02:	4620      	mov	r0, r4
    cc04:	9910      	ldr	r1, [sp, #64]	; 0x40
    cc06:	f7ff fec3 	bl	c990 <get_eit_entry>
    cc0a:	2800      	cmp	r0, #0
    cc0c:	d0f2      	beq.n	cbf4 <__gnu_Unwind_RaiseException+0x2c>
    cc0e:	2009      	movs	r0, #9
    cc10:	b079      	add	sp, #484	; 0x1e4
    cc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc14:	4668      	mov	r0, sp
    cc16:	f7ff ff11 	bl	ca3c <restore_non_core_regs>
    cc1a:	2d06      	cmp	r5, #6
    cc1c:	d1f7      	bne.n	cc0e <__gnu_Unwind_RaiseException+0x46>
    cc1e:	4620      	mov	r0, r4
    cc20:	4639      	mov	r1, r7
    cc22:	f7ff ff41 	bl	caa8 <unwind_phase2>
    cc26:	bf00      	nop

0000cc28 <__gnu_Unwind_ForcedUnwind>:
    cc28:	b430      	push	{r4, r5}
    cc2a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    cc2c:	60c1      	str	r1, [r0, #12]
    cc2e:	6182      	str	r2, [r0, #24]
    cc30:	4619      	mov	r1, r3
    cc32:	641d      	str	r5, [r3, #64]	; 0x40
    cc34:	2200      	movs	r2, #0
    cc36:	bc30      	pop	{r4, r5}
    cc38:	f7ff bf56 	b.w	cae8 <unwind_phase2_forced>

0000cc3c <__gnu_Unwind_Resume>:
    cc3c:	b570      	push	{r4, r5, r6, lr}
    cc3e:	68c6      	ldr	r6, [r0, #12]
    cc40:	6943      	ldr	r3, [r0, #20]
    cc42:	640b      	str	r3, [r1, #64]	; 0x40
    cc44:	4604      	mov	r4, r0
    cc46:	460d      	mov	r5, r1
    cc48:	b126      	cbz	r6, cc54 <__gnu_Unwind_Resume+0x18>
    cc4a:	2201      	movs	r2, #1
    cc4c:	f7ff ff4c 	bl	cae8 <unwind_phase2_forced>
    cc50:	f000 fdc8 	bl	d7e4 <abort>
    cc54:	6903      	ldr	r3, [r0, #16]
    cc56:	4621      	mov	r1, r4
    cc58:	2002      	movs	r0, #2
    cc5a:	462a      	mov	r2, r5
    cc5c:	4798      	blx	r3
    cc5e:	2807      	cmp	r0, #7
    cc60:	d007      	beq.n	cc72 <__gnu_Unwind_Resume+0x36>
    cc62:	2808      	cmp	r0, #8
    cc64:	d103      	bne.n	cc6e <__gnu_Unwind_Resume+0x32>
    cc66:	4620      	mov	r0, r4
    cc68:	4629      	mov	r1, r5
    cc6a:	f7ff ff1d 	bl	caa8 <unwind_phase2>
    cc6e:	f000 fdb9 	bl	d7e4 <abort>
    cc72:	4630      	mov	r0, r6
    cc74:	6c29      	ldr	r1, [r5, #64]	; 0x40
    cc76:	f7ff ff15 	bl	caa4 <_Unwind_DebugHook>
    cc7a:	1d28      	adds	r0, r5, #4
    cc7c:	f000 fb3e 	bl	d2fc <__restore_core_regs>

0000cc80 <__gnu_Unwind_Resume_or_Rethrow>:
    cc80:	68c2      	ldr	r2, [r0, #12]
    cc82:	b122      	cbz	r2, cc8e <__gnu_Unwind_Resume_or_Rethrow+0xe>
    cc84:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    cc86:	640a      	str	r2, [r1, #64]	; 0x40
    cc88:	2200      	movs	r2, #0
    cc8a:	f7ff bf2d 	b.w	cae8 <unwind_phase2_forced>
    cc8e:	e79b      	b.n	cbc8 <__gnu_Unwind_RaiseException>

0000cc90 <_Unwind_Complete>:
    cc90:	4770      	bx	lr
    cc92:	bf00      	nop

0000cc94 <_Unwind_DeleteException>:
    cc94:	b508      	push	{r3, lr}
    cc96:	6883      	ldr	r3, [r0, #8]
    cc98:	b113      	cbz	r3, cca0 <_Unwind_DeleteException+0xc>
    cc9a:	4601      	mov	r1, r0
    cc9c:	2001      	movs	r0, #1
    cc9e:	4798      	blx	r3
    cca0:	bd08      	pop	{r3, pc}
    cca2:	bf00      	nop

0000cca4 <_Unwind_VRS_Get>:
    cca4:	b410      	push	{r4}
    cca6:	2904      	cmp	r1, #4
    cca8:	d809      	bhi.n	ccbe <_Unwind_VRS_Get+0x1a>
    ccaa:	e8df f001 	tbb	[pc, r1]
    ccae:	0307      	.short	0x0307
    ccb0:	0308      	.short	0x0308
    ccb2:	03          	.byte	0x03
    ccb3:	00          	.byte	0x00
    ccb4:	2001      	movs	r0, #1
    ccb6:	f85d 4b04 	ldr.w	r4, [sp], #4
    ccba:	4770      	bx	lr
    ccbc:	b11b      	cbz	r3, ccc6 <_Unwind_VRS_Get+0x22>
    ccbe:	2002      	movs	r0, #2
    ccc0:	f85d 4b04 	ldr.w	r4, [sp], #4
    ccc4:	4770      	bx	lr
    ccc6:	2a0f      	cmp	r2, #15
    ccc8:	d8f9      	bhi.n	ccbe <_Unwind_VRS_Get+0x1a>
    ccca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ccce:	4618      	mov	r0, r3
    ccd0:	6853      	ldr	r3, [r2, #4]
    ccd2:	9a01      	ldr	r2, [sp, #4]
    ccd4:	6013      	str	r3, [r2, #0]
    ccd6:	e7ee      	b.n	ccb6 <_Unwind_VRS_Get+0x12>

0000ccd8 <_Unwind_GetGR>:
    ccd8:	b500      	push	{lr}
    ccda:	b085      	sub	sp, #20
    ccdc:	460a      	mov	r2, r1
    ccde:	ab03      	add	r3, sp, #12
    cce0:	2100      	movs	r1, #0
    cce2:	9300      	str	r3, [sp, #0]
    cce4:	460b      	mov	r3, r1
    cce6:	f7ff ffdd 	bl	cca4 <_Unwind_VRS_Get>
    ccea:	9803      	ldr	r0, [sp, #12]
    ccec:	b005      	add	sp, #20
    ccee:	f85d fb04 	ldr.w	pc, [sp], #4
    ccf2:	bf00      	nop

0000ccf4 <_Unwind_VRS_Set>:
    ccf4:	b410      	push	{r4}
    ccf6:	2904      	cmp	r1, #4
    ccf8:	d809      	bhi.n	cd0e <_Unwind_VRS_Set+0x1a>
    ccfa:	e8df f001 	tbb	[pc, r1]
    ccfe:	0307      	.short	0x0307
    cd00:	0308      	.short	0x0308
    cd02:	03          	.byte	0x03
    cd03:	00          	.byte	0x00
    cd04:	2001      	movs	r0, #1
    cd06:	f85d 4b04 	ldr.w	r4, [sp], #4
    cd0a:	4770      	bx	lr
    cd0c:	b11b      	cbz	r3, cd16 <_Unwind_VRS_Set+0x22>
    cd0e:	2002      	movs	r0, #2
    cd10:	f85d 4b04 	ldr.w	r4, [sp], #4
    cd14:	4770      	bx	lr
    cd16:	2a0f      	cmp	r2, #15
    cd18:	d8f9      	bhi.n	cd0e <_Unwind_VRS_Set+0x1a>
    cd1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    cd1e:	9801      	ldr	r0, [sp, #4]
    cd20:	6801      	ldr	r1, [r0, #0]
    cd22:	6051      	str	r1, [r2, #4]
    cd24:	4618      	mov	r0, r3
    cd26:	e7ee      	b.n	cd06 <_Unwind_VRS_Set+0x12>

0000cd28 <_Unwind_SetGR>:
    cd28:	b510      	push	{r4, lr}
    cd2a:	b084      	sub	sp, #16
    cd2c:	ab04      	add	r3, sp, #16
    cd2e:	460c      	mov	r4, r1
    cd30:	f843 2d04 	str.w	r2, [r3, #-4]!
    cd34:	2100      	movs	r1, #0
    cd36:	9300      	str	r3, [sp, #0]
    cd38:	4622      	mov	r2, r4
    cd3a:	460b      	mov	r3, r1
    cd3c:	f7ff ffda 	bl	ccf4 <_Unwind_VRS_Set>
    cd40:	b004      	add	sp, #16
    cd42:	bd10      	pop	{r4, pc}

0000cd44 <__gnu_Unwind_Backtrace>:
    cd44:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd46:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    cd48:	6413      	str	r3, [r2, #64]	; 0x40
    cd4a:	1d15      	adds	r5, r2, #4
    cd4c:	4607      	mov	r7, r0
    cd4e:	460e      	mov	r6, r1
    cd50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cd52:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    cd56:	ac17      	add	r4, sp, #92	; 0x5c
    cd58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cd5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cd60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    cd66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    cd6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cd6e:	9516      	str	r5, [sp, #88]	; 0x58
    cd70:	e010      	b.n	cd94 <__gnu_Unwind_Backtrace+0x50>
    cd72:	a816      	add	r0, sp, #88	; 0x58
    cd74:	f7ff ffd8 	bl	cd28 <_Unwind_SetGR>
    cd78:	4631      	mov	r1, r6
    cd7a:	a816      	add	r0, sp, #88	; 0x58
    cd7c:	47b8      	blx	r7
    cd7e:	4669      	mov	r1, sp
    cd80:	aa16      	add	r2, sp, #88	; 0x58
    cd82:	b978      	cbnz	r0, cda4 <__gnu_Unwind_Backtrace+0x60>
    cd84:	9b04      	ldr	r3, [sp, #16]
    cd86:	2008      	movs	r0, #8
    cd88:	4798      	blx	r3
    cd8a:	2805      	cmp	r0, #5
    cd8c:	4604      	mov	r4, r0
    cd8e:	d00a      	beq.n	cda6 <__gnu_Unwind_Backtrace+0x62>
    cd90:	2809      	cmp	r0, #9
    cd92:	d007      	beq.n	cda4 <__gnu_Unwind_Backtrace+0x60>
    cd94:	9926      	ldr	r1, [sp, #152]	; 0x98
    cd96:	4668      	mov	r0, sp
    cd98:	f7ff fdfa 	bl	c990 <get_eit_entry>
    cd9c:	466a      	mov	r2, sp
    cd9e:	210c      	movs	r1, #12
    cda0:	2800      	cmp	r0, #0
    cda2:	d0e6      	beq.n	cd72 <__gnu_Unwind_Backtrace+0x2e>
    cda4:	2409      	movs	r4, #9
    cda6:	a816      	add	r0, sp, #88	; 0x58
    cda8:	f7ff fe48 	bl	ca3c <restore_non_core_regs>
    cdac:	4620      	mov	r0, r4
    cdae:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    cdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cdb4 <__gnu_unwind_pr_common>:
    cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdb8:	460c      	mov	r4, r1
    cdba:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    cdbc:	b08b      	sub	sp, #44	; 0x2c
    cdbe:	461d      	mov	r5, r3
    cdc0:	1d0e      	adds	r6, r1, #4
    cdc2:	680b      	ldr	r3, [r1, #0]
    cdc4:	9307      	str	r3, [sp, #28]
    cdc6:	4690      	mov	r8, r2
    cdc8:	9608      	str	r6, [sp, #32]
    cdca:	f000 0903 	and.w	r9, r0, #3
    cdce:	2d00      	cmp	r5, #0
    cdd0:	f040 8089 	bne.w	cee6 <__gnu_unwind_pr_common+0x132>
    cdd4:	021b      	lsls	r3, r3, #8
    cdd6:	2203      	movs	r2, #3
    cdd8:	9307      	str	r3, [sp, #28]
    cdda:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
    cdde:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    cde2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    cde4:	f1b9 0f02 	cmp.w	r9, #2
    cde8:	bf08      	it	eq
    cdea:	6ba6      	ldreq	r6, [r4, #56]	; 0x38
    cdec:	f013 0301 	ands.w	r3, r3, #1
    cdf0:	d142      	bne.n	ce78 <__gnu_unwind_pr_common+0xc4>
    cdf2:	f000 0008 	and.w	r0, r0, #8
    cdf6:	b2c0      	uxtb	r0, r0
    cdf8:	9003      	str	r0, [sp, #12]
    cdfa:	9302      	str	r3, [sp, #8]
    cdfc:	6837      	ldr	r7, [r6, #0]
    cdfe:	2f00      	cmp	r7, #0
    ce00:	d03c      	beq.n	ce7c <__gnu_unwind_pr_common+0xc8>
    ce02:	2d02      	cmp	r5, #2
    ce04:	d06b      	beq.n	cede <__gnu_unwind_pr_common+0x12a>
    ce06:	8837      	ldrh	r7, [r6, #0]
    ce08:	f8b6 a002 	ldrh.w	sl, [r6, #2]
    ce0c:	3604      	adds	r6, #4
    ce0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ce10:	f02a 0b01 	bic.w	fp, sl, #1
    ce14:	4640      	mov	r0, r8
    ce16:	210f      	movs	r1, #15
    ce18:	449b      	add	fp, r3
    ce1a:	f7ff ff5d 	bl	ccd8 <_Unwind_GetGR>
    ce1e:	4583      	cmp	fp, r0
    ce20:	d836      	bhi.n	ce90 <__gnu_unwind_pr_common+0xdc>
    ce22:	f027 0301 	bic.w	r3, r7, #1
    ce26:	449b      	add	fp, r3
    ce28:	f00a 0a01 	and.w	sl, sl, #1
    ce2c:	f007 0701 	and.w	r7, r7, #1
    ce30:	4558      	cmp	r0, fp
    ce32:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    ce36:	bf2c      	ite	cs
    ce38:	2000      	movcs	r0, #0
    ce3a:	2001      	movcc	r0, #1
    ce3c:	2f01      	cmp	r7, #1
    ce3e:	d031      	beq.n	cea4 <__gnu_unwind_pr_common+0xf0>
    ce40:	d360      	bcc.n	cf04 <__gnu_unwind_pr_common+0x150>
    ce42:	2f02      	cmp	r7, #2
    ce44:	d120      	bne.n	ce88 <__gnu_unwind_pr_common+0xd4>
    ce46:	6833      	ldr	r3, [r6, #0]
    ce48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    ce4c:	9101      	str	r1, [sp, #4]
    ce4e:	f1b9 0f00 	cmp.w	r9, #0
    ce52:	f040 8085 	bne.w	cf60 <__gnu_unwind_pr_common+0x1ac>
    ce56:	b130      	cbz	r0, ce66 <__gnu_unwind_pr_common+0xb2>
    ce58:	9a03      	ldr	r2, [sp, #12]
    ce5a:	2a00      	cmp	r2, #0
    ce5c:	f000 808d 	beq.w	cf7a <__gnu_unwind_pr_common+0x1c6>
    ce60:	2900      	cmp	r1, #0
    ce62:	f000 80b0 	beq.w	cfc6 <__gnu_unwind_pr_common+0x212>
    ce66:	2b00      	cmp	r3, #0
    ce68:	f2c0 8085 	blt.w	cf76 <__gnu_unwind_pr_common+0x1c2>
    ce6c:	9b01      	ldr	r3, [sp, #4]
    ce6e:	f103 0a01 	add.w	sl, r3, #1
    ce72:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    ce76:	e7c1      	b.n	cdfc <__gnu_unwind_pr_common+0x48>
    ce78:	2100      	movs	r1, #0
    ce7a:	9102      	str	r1, [sp, #8]
    ce7c:	2d02      	cmp	r5, #2
    ce7e:	dd49      	ble.n	cf14 <__gnu_unwind_pr_common+0x160>
    ce80:	f7ff fe0e 	bl	caa0 <__gnu_unwind_24bit.isra.1>
    ce84:	2800      	cmp	r0, #0
    ce86:	d04b      	beq.n	cf20 <__gnu_unwind_pr_common+0x16c>
    ce88:	2009      	movs	r0, #9
    ce8a:	b00b      	add	sp, #44	; 0x2c
    ce8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce90:	f00a 0a01 	and.w	sl, sl, #1
    ce94:	f007 0701 	and.w	r7, r7, #1
    ce98:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    ce9c:	2f01      	cmp	r7, #1
    ce9e:	f04f 0000 	mov.w	r0, #0
    cea2:	d1cd      	bne.n	ce40 <__gnu_unwind_pr_common+0x8c>
    cea4:	f1b9 0f00 	cmp.w	r9, #0
    cea8:	d141      	bne.n	cf2e <__gnu_unwind_pr_common+0x17a>
    ceaa:	b1b0      	cbz	r0, ceda <__gnu_unwind_pr_common+0x126>
    ceac:	e896 000c 	ldmia.w	r6, {r2, r3}
    ceb0:	0fd7      	lsrs	r7, r2, #31
    ceb2:	1c9a      	adds	r2, r3, #2
    ceb4:	d0e8      	beq.n	ce88 <__gnu_unwind_pr_common+0xd4>
    ceb6:	f104 0158 	add.w	r1, r4, #88	; 0x58
    ceba:	3301      	adds	r3, #1
    cebc:	9106      	str	r1, [sp, #24]
    cebe:	f000 80ad 	beq.w	d01c <__gnu_unwind_pr_common+0x268>
    cec2:	1d30      	adds	r0, r6, #4
    cec4:	f7ff fde6 	bl	ca94 <_Unwind_decode_typeinfo_ptr.isra.0>
    cec8:	463a      	mov	r2, r7
    ceca:	4601      	mov	r1, r0
    cecc:	ab06      	add	r3, sp, #24
    cece:	4620      	mov	r0, r4
    ced0:	f7f7 fb64 	bl	459c <__cxa_type_match>
    ced4:	2800      	cmp	r0, #0
    ced6:	f040 80cf 	bne.w	d078 <__gnu_unwind_pr_common+0x2c4>
    ceda:	3608      	adds	r6, #8
    cedc:	e78e      	b.n	cdfc <__gnu_unwind_pr_common+0x48>
    cede:	f8d6 a004 	ldr.w	sl, [r6, #4]
    cee2:	3608      	adds	r6, #8
    cee4:	e793      	b.n	ce0e <__gnu_unwind_pr_common+0x5a>
    cee6:	2d02      	cmp	r5, #2
    cee8:	f73f af7b 	bgt.w	cde2 <__gnu_unwind_pr_common+0x2e>
    ceec:	0c1a      	lsrs	r2, r3, #16
    ceee:	b2d7      	uxtb	r7, r2
    cef0:	041b      	lsls	r3, r3, #16
    cef2:	2102      	movs	r1, #2
    cef4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    cef8:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    cefc:	9307      	str	r3, [sp, #28]
    cefe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    cf02:	e76e      	b.n	cde2 <__gnu_unwind_pr_common+0x2e>
    cf04:	f1b9 0f00 	cmp.w	r9, #0
    cf08:	d002      	beq.n	cf10 <__gnu_unwind_pr_common+0x15c>
    cf0a:	2800      	cmp	r0, #0
    cf0c:	f040 8090 	bne.w	d030 <__gnu_unwind_pr_common+0x27c>
    cf10:	3604      	adds	r6, #4
    cf12:	e773      	b.n	cdfc <__gnu_unwind_pr_common+0x48>
    cf14:	4640      	mov	r0, r8
    cf16:	a907      	add	r1, sp, #28
    cf18:	f000 faf0 	bl	d4fc <__gnu_unwind_execute>
    cf1c:	2800      	cmp	r0, #0
    cf1e:	d1b3      	bne.n	ce88 <__gnu_unwind_pr_common+0xd4>
    cf20:	9a02      	ldr	r2, [sp, #8]
    cf22:	2a00      	cmp	r2, #0
    cf24:	d159      	bne.n	cfda <__gnu_unwind_pr_common+0x226>
    cf26:	2008      	movs	r0, #8
    cf28:	b00b      	add	sp, #44	; 0x2c
    cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf2e:	4640      	mov	r0, r8
    cf30:	210d      	movs	r1, #13
    cf32:	6a27      	ldr	r7, [r4, #32]
    cf34:	f7ff fed0 	bl	ccd8 <_Unwind_GetGR>
    cf38:	4287      	cmp	r7, r0
    cf3a:	d1ce      	bne.n	ceda <__gnu_unwind_pr_common+0x126>
    cf3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cf3e:	429e      	cmp	r6, r3
    cf40:	d1cb      	bne.n	ceda <__gnu_unwind_pr_common+0x126>
    cf42:	4630      	mov	r0, r6
    cf44:	f7ff fccc 	bl	c8e0 <selfrel_offset31>
    cf48:	210f      	movs	r1, #15
    cf4a:	4602      	mov	r2, r0
    cf4c:	4640      	mov	r0, r8
    cf4e:	f7ff feeb 	bl	cd28 <_Unwind_SetGR>
    cf52:	4640      	mov	r0, r8
    cf54:	4622      	mov	r2, r4
    cf56:	2100      	movs	r1, #0
    cf58:	f7ff fee6 	bl	cd28 <_Unwind_SetGR>
    cf5c:	2007      	movs	r0, #7
    cf5e:	e794      	b.n	ce8a <__gnu_unwind_pr_common+0xd6>
    cf60:	4640      	mov	r0, r8
    cf62:	210d      	movs	r1, #13
    cf64:	6a27      	ldr	r7, [r4, #32]
    cf66:	f7ff feb7 	bl	ccd8 <_Unwind_GetGR>
    cf6a:	4287      	cmp	r7, r0
    cf6c:	d045      	beq.n	cffa <__gnu_unwind_pr_common+0x246>
    cf6e:	6833      	ldr	r3, [r6, #0]
    cf70:	2b00      	cmp	r3, #0
    cf72:	f6bf af7b 	bge.w	ce6c <__gnu_unwind_pr_common+0xb8>
    cf76:	3604      	adds	r6, #4
    cf78:	e778      	b.n	ce6c <__gnu_unwind_pr_common+0xb8>
    cf7a:	9901      	ldr	r1, [sp, #4]
    cf7c:	b319      	cbz	r1, cfc6 <__gnu_unwind_pr_common+0x212>
    cf7e:	f104 0c58 	add.w	ip, r4, #88	; 0x58
    cf82:	f8cd 9010 	str.w	r9, [sp, #16]
    cf86:	9505      	str	r5, [sp, #20]
    cf88:	1d37      	adds	r7, r6, #4
    cf8a:	f8dd b00c 	ldr.w	fp, [sp, #12]
    cf8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    cf92:	4665      	mov	r5, ip
    cf94:	e002      	b.n	cf9c <__gnu_unwind_pr_common+0x1e8>
    cf96:	45ca      	cmp	sl, r9
    cf98:	d015      	beq.n	cfc6 <__gnu_unwind_pr_common+0x212>
    cf9a:	46d3      	mov	fp, sl
    cf9c:	4638      	mov	r0, r7
    cf9e:	9506      	str	r5, [sp, #24]
    cfa0:	f7ff fd78 	bl	ca94 <_Unwind_decode_typeinfo_ptr.isra.0>
    cfa4:	2200      	movs	r2, #0
    cfa6:	4601      	mov	r1, r0
    cfa8:	ab06      	add	r3, sp, #24
    cfaa:	4620      	mov	r0, r4
    cfac:	f7f7 faf6 	bl	459c <__cxa_type_match>
    cfb0:	f10b 0a01 	add.w	sl, fp, #1
    cfb4:	3704      	adds	r7, #4
    cfb6:	2800      	cmp	r0, #0
    cfb8:	d0ed      	beq.n	cf96 <__gnu_unwind_pr_common+0x1e2>
    cfba:	9b01      	ldr	r3, [sp, #4]
    cfbc:	f8dd 9010 	ldr.w	r9, [sp, #16]
    cfc0:	9d05      	ldr	r5, [sp, #20]
    cfc2:	455b      	cmp	r3, fp
    cfc4:	d1d3      	bne.n	cf6e <__gnu_unwind_pr_common+0x1ba>
    cfc6:	4640      	mov	r0, r8
    cfc8:	210d      	movs	r1, #13
    cfca:	f7ff fe85 	bl	ccd8 <_Unwind_GetGR>
    cfce:	9b06      	ldr	r3, [sp, #24]
    cfd0:	6220      	str	r0, [r4, #32]
    cfd2:	62a6      	str	r6, [r4, #40]	; 0x28
    cfd4:	6263      	str	r3, [r4, #36]	; 0x24
    cfd6:	2006      	movs	r0, #6
    cfd8:	e757      	b.n	ce8a <__gnu_unwind_pr_common+0xd6>
    cfda:	210f      	movs	r1, #15
    cfdc:	4640      	mov	r0, r8
    cfde:	f7ff fe7b 	bl	ccd8 <_Unwind_GetGR>
    cfe2:	210e      	movs	r1, #14
    cfe4:	4602      	mov	r2, r0
    cfe6:	4640      	mov	r0, r8
    cfe8:	f7ff fe9e 	bl	cd28 <_Unwind_SetGR>
    cfec:	4640      	mov	r0, r8
    cfee:	210f      	movs	r1, #15
    cff0:	4a28      	ldr	r2, [pc, #160]	; (d094 <__gnu_unwind_pr_common+0x2e0>)
    cff2:	f7ff fe99 	bl	cd28 <_Unwind_SetGR>
    cff6:	2007      	movs	r0, #7
    cff8:	e747      	b.n	ce8a <__gnu_unwind_pr_common+0xd6>
    cffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cffc:	429e      	cmp	r6, r3
    cffe:	d1b6      	bne.n	cf6e <__gnu_unwind_pr_common+0x1ba>
    d000:	2204      	movs	r2, #4
    d002:	2700      	movs	r7, #0
    d004:	18b3      	adds	r3, r6, r2
    d006:	9901      	ldr	r1, [sp, #4]
    d008:	62a1      	str	r1, [r4, #40]	; 0x28
    d00a:	62e7      	str	r7, [r4, #44]	; 0x2c
    d00c:	6322      	str	r2, [r4, #48]	; 0x30
    d00e:	6363      	str	r3, [r4, #52]	; 0x34
    d010:	6833      	ldr	r3, [r6, #0]
    d012:	42bb      	cmp	r3, r7
    d014:	db1f      	blt.n	d056 <__gnu_unwind_pr_common+0x2a2>
    d016:	2201      	movs	r2, #1
    d018:	9202      	str	r2, [sp, #8]
    d01a:	e727      	b.n	ce6c <__gnu_unwind_pr_common+0xb8>
    d01c:	4640      	mov	r0, r8
    d01e:	210d      	movs	r1, #13
    d020:	f7ff fe5a 	bl	ccd8 <_Unwind_GetGR>
    d024:	6220      	str	r0, [r4, #32]
    d026:	9b06      	ldr	r3, [sp, #24]
    d028:	6263      	str	r3, [r4, #36]	; 0x24
    d02a:	62a6      	str	r6, [r4, #40]	; 0x28
    d02c:	2006      	movs	r0, #6
    d02e:	e72c      	b.n	ce8a <__gnu_unwind_pr_common+0xd6>
    d030:	4630      	mov	r0, r6
    d032:	f7ff fc55 	bl	c8e0 <selfrel_offset31>
    d036:	3604      	adds	r6, #4
    d038:	4605      	mov	r5, r0
    d03a:	63a6      	str	r6, [r4, #56]	; 0x38
    d03c:	4620      	mov	r0, r4
    d03e:	f7f7 fb03 	bl	4648 <__cxa_begin_cleanup>
    d042:	2800      	cmp	r0, #0
    d044:	f43f af20 	beq.w	ce88 <__gnu_unwind_pr_common+0xd4>
    d048:	4640      	mov	r0, r8
    d04a:	462a      	mov	r2, r5
    d04c:	210f      	movs	r1, #15
    d04e:	f7ff fe6b 	bl	cd28 <_Unwind_SetGR>
    d052:	2007      	movs	r0, #7
    d054:	e719      	b.n	ce8a <__gnu_unwind_pr_common+0xd6>
    d056:	1c48      	adds	r0, r1, #1
    d058:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    d05c:	f7ff fc40 	bl	c8e0 <selfrel_offset31>
    d060:	210f      	movs	r1, #15
    d062:	4602      	mov	r2, r0
    d064:	4640      	mov	r0, r8
    d066:	f7ff fe5f 	bl	cd28 <_Unwind_SetGR>
    d06a:	4640      	mov	r0, r8
    d06c:	4639      	mov	r1, r7
    d06e:	4622      	mov	r2, r4
    d070:	f7ff fe5a 	bl	cd28 <_Unwind_SetGR>
    d074:	2007      	movs	r0, #7
    d076:	e708      	b.n	ce8a <__gnu_unwind_pr_common+0xd6>
    d078:	4607      	mov	r7, r0
    d07a:	210d      	movs	r1, #13
    d07c:	4640      	mov	r0, r8
    d07e:	f7ff fe2b 	bl	ccd8 <_Unwind_GetGR>
    d082:	2f02      	cmp	r7, #2
    d084:	6220      	str	r0, [r4, #32]
    d086:	d1ce      	bne.n	d026 <__gnu_unwind_pr_common+0x272>
    d088:	4623      	mov	r3, r4
    d08a:	9a06      	ldr	r2, [sp, #24]
    d08c:	f843 2f2c 	str.w	r2, [r3, #44]!
    d090:	6263      	str	r3, [r4, #36]	; 0x24
    d092:	e7ca      	b.n	d02a <__gnu_unwind_pr_common+0x276>
    d094:	00004779 	.word	0x00004779

0000d098 <__aeabi_unwind_cpp_pr0>:
    d098:	2300      	movs	r3, #0
    d09a:	f7ff be8b 	b.w	cdb4 <__gnu_unwind_pr_common>
    d09e:	bf00      	nop

0000d0a0 <__aeabi_unwind_cpp_pr1>:
    d0a0:	2301      	movs	r3, #1
    d0a2:	f7ff be87 	b.w	cdb4 <__gnu_unwind_pr_common>
    d0a6:	bf00      	nop

0000d0a8 <__aeabi_unwind_cpp_pr2>:
    d0a8:	2302      	movs	r3, #2
    d0aa:	f7ff be83 	b.w	cdb4 <__gnu_unwind_pr_common>
    d0ae:	bf00      	nop

0000d0b0 <_Unwind_VRS_Pop>:
    d0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0b4:	4604      	mov	r4, r0
    d0b6:	b0c4      	sub	sp, #272	; 0x110
    d0b8:	2904      	cmp	r1, #4
    d0ba:	d80b      	bhi.n	d0d4 <_Unwind_VRS_Pop+0x24>
    d0bc:	e8df f001 	tbb	[pc, r1]
    d0c0:	300a0359 	.word	0x300a0359
    d0c4:	0e          	.byte	0x0e
    d0c5:	00          	.byte	0x00
    d0c6:	2b01      	cmp	r3, #1
    d0c8:	ea4f 4512 	mov.w	r5, r2, lsr #16
    d0cc:	b296      	uxth	r6, r2
    d0ce:	d066      	beq.n	d19e <_Unwind_VRS_Pop+0xee>
    d0d0:	2b05      	cmp	r3, #5
    d0d2:	d06b      	beq.n	d1ac <_Unwind_VRS_Pop+0xfc>
    d0d4:	2002      	movs	r0, #2
    d0d6:	b044      	add	sp, #272	; 0x110
    d0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d1f9      	bne.n	d0d4 <_Unwind_VRS_Pop+0x24>
    d0e0:	2a10      	cmp	r2, #16
    d0e2:	d8f7      	bhi.n	d0d4 <_Unwind_VRS_Pop+0x24>
    d0e4:	6823      	ldr	r3, [r4, #0]
    d0e6:	06d9      	lsls	r1, r3, #27
    d0e8:	f100 80d3 	bmi.w	d292 <_Unwind_VRS_Pop+0x1e2>
    d0ec:	ae22      	add	r6, sp, #136	; 0x88
    d0ee:	4630      	mov	r0, r6
    d0f0:	9201      	str	r2, [sp, #4]
    d0f2:	f000 f975 	bl	d3e0 <__gnu_Unwind_Save_WMMXC>
    d0f6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    d0f8:	9a01      	ldr	r2, [sp, #4]
    d0fa:	2300      	movs	r3, #0
    d0fc:	2001      	movs	r0, #1
    d0fe:	fa00 f103 	lsl.w	r1, r0, r3
    d102:	4211      	tst	r1, r2
    d104:	d003      	beq.n	d10e <_Unwind_VRS_Pop+0x5e>
    d106:	6829      	ldr	r1, [r5, #0]
    d108:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
    d10c:	3504      	adds	r5, #4
    d10e:	3301      	adds	r3, #1
    d110:	2b04      	cmp	r3, #4
    d112:	d1f4      	bne.n	d0fe <_Unwind_VRS_Pop+0x4e>
    d114:	4630      	mov	r0, r6
    d116:	63a5      	str	r5, [r4, #56]	; 0x38
    d118:	f000 f958 	bl	d3cc <__gnu_Unwind_Restore_WMMXC>
    d11c:	2000      	movs	r0, #0
    d11e:	e7da      	b.n	d0d6 <_Unwind_VRS_Pop+0x26>
    d120:	2b03      	cmp	r3, #3
    d122:	d1d7      	bne.n	d0d4 <_Unwind_VRS_Pop+0x24>
    d124:	0c15      	lsrs	r5, r2, #16
    d126:	b297      	uxth	r7, r2
    d128:	197b      	adds	r3, r7, r5
    d12a:	2b10      	cmp	r3, #16
    d12c:	d8d2      	bhi.n	d0d4 <_Unwind_VRS_Pop+0x24>
    d12e:	6823      	ldr	r3, [r4, #0]
    d130:	071e      	lsls	r6, r3, #28
    d132:	f100 80bf 	bmi.w	d2b4 <_Unwind_VRS_Pop+0x204>
    d136:	ae22      	add	r6, sp, #136	; 0x88
    d138:	4630      	mov	r0, r6
    d13a:	f000 f925 	bl	d388 <__gnu_Unwind_Save_WMMXD>
    d13e:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
    d142:	007f      	lsls	r7, r7, #1
    d144:	eb06 00c5 	add.w	r0, r6, r5, lsl #3
    d148:	1e7b      	subs	r3, r7, #1
    d14a:	4672      	mov	r2, lr
    d14c:	b15f      	cbz	r7, d166 <_Unwind_VRS_Pop+0xb6>
    d14e:	ebce 0000 	rsb	r0, lr, r0
    d152:	f1ae 0204 	sub.w	r2, lr, #4
    d156:	3b01      	subs	r3, #1
    d158:	f852 1f04 	ldr.w	r1, [r2, #4]!
    d15c:	5081      	str	r1, [r0, r2]
    d15e:	1c5d      	adds	r5, r3, #1
    d160:	d1f9      	bne.n	d156 <_Unwind_VRS_Pop+0xa6>
    d162:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
    d166:	4630      	mov	r0, r6
    d168:	63a2      	str	r2, [r4, #56]	; 0x38
    d16a:	f000 f8eb 	bl	d344 <__gnu_Unwind_Restore_WMMXD>
    d16e:	2000      	movs	r0, #0
    d170:	e7b1      	b.n	d0d6 <_Unwind_VRS_Pop+0x26>
    d172:	2b00      	cmp	r3, #0
    d174:	d1ae      	bne.n	d0d4 <_Unwind_VRS_Pop+0x24>
    d176:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    d178:	b296      	uxth	r6, r2
    d17a:	2001      	movs	r0, #1
    d17c:	fa00 f103 	lsl.w	r1, r0, r3
    d180:	4231      	tst	r1, r6
    d182:	d004      	beq.n	d18e <_Unwind_VRS_Pop+0xde>
    d184:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    d188:	6829      	ldr	r1, [r5, #0]
    d18a:	6079      	str	r1, [r7, #4]
    d18c:	3504      	adds	r5, #4
    d18e:	3301      	adds	r3, #1
    d190:	2b10      	cmp	r3, #16
    d192:	d1f3      	bne.n	d17c <_Unwind_VRS_Pop+0xcc>
    d194:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    d198:	d175      	bne.n	d286 <_Unwind_VRS_Pop+0x1d6>
    d19a:	63a5      	str	r5, [r4, #56]	; 0x38
    d19c:	e79b      	b.n	d0d6 <_Unwind_VRS_Pop+0x26>
    d19e:	1972      	adds	r2, r6, r5
    d1a0:	2a10      	cmp	r2, #16
    d1a2:	d897      	bhi.n	d0d4 <_Unwind_VRS_Pop+0x24>
    d1a4:	2d0f      	cmp	r5, #15
    d1a6:	d895      	bhi.n	d0d4 <_Unwind_VRS_Pop+0x24>
    d1a8:	2700      	movs	r7, #0
    d1aa:	e008      	b.n	d1be <_Unwind_VRS_Pop+0x10e>
    d1ac:	1977      	adds	r7, r6, r5
    d1ae:	2f20      	cmp	r7, #32
    d1b0:	d890      	bhi.n	d0d4 <_Unwind_VRS_Pop+0x24>
    d1b2:	2d0f      	cmp	r5, #15
    d1b4:	d969      	bls.n	d28a <_Unwind_VRS_Pop+0x1da>
    d1b6:	4637      	mov	r7, r6
    d1b8:	b346      	cbz	r6, d20c <_Unwind_VRS_Pop+0x15c>
    d1ba:	2d0f      	cmp	r5, #15
    d1bc:	d811      	bhi.n	d1e2 <_Unwind_VRS_Pop+0x132>
    d1be:	6822      	ldr	r2, [r4, #0]
    d1c0:	07d0      	lsls	r0, r2, #31
    d1c2:	d50e      	bpl.n	d1e2 <_Unwind_VRS_Pop+0x132>
    d1c4:	f022 0101 	bic.w	r1, r2, #1
    d1c8:	2b05      	cmp	r3, #5
    d1ca:	6021      	str	r1, [r4, #0]
    d1cc:	4620      	mov	r0, r4
    d1ce:	f000 808b 	beq.w	d2e8 <_Unwind_VRS_Pop+0x238>
    d1d2:	f022 0203 	bic.w	r2, r2, #3
    d1d6:	f840 2b48 	str.w	r2, [r0], #72
    d1da:	9301      	str	r3, [sp, #4]
    d1dc:	f000 f89e 	bl	d31c <__gnu_Unwind_Save_VFP>
    d1e0:	9b01      	ldr	r3, [sp, #4]
    d1e2:	b117      	cbz	r7, d1ea <_Unwind_VRS_Pop+0x13a>
    d1e4:	6822      	ldr	r2, [r4, #0]
    d1e6:	0751      	lsls	r1, r2, #29
    d1e8:	d46c      	bmi.n	d2c4 <_Unwind_VRS_Pop+0x214>
    d1ea:	2b01      	cmp	r3, #1
    d1ec:	d074      	beq.n	d2d8 <_Unwind_VRS_Pop+0x228>
    d1ee:	2d0f      	cmp	r5, #15
    d1f0:	d804      	bhi.n	d1fc <_Unwind_VRS_Pop+0x14c>
    d1f2:	a822      	add	r0, sp, #136	; 0x88
    d1f4:	9301      	str	r3, [sp, #4]
    d1f6:	f000 f899 	bl	d32c <__gnu_Unwind_Save_VFP_D>
    d1fa:	9b01      	ldr	r3, [sp, #4]
    d1fc:	b137      	cbz	r7, d20c <_Unwind_VRS_Pop+0x15c>
    d1fe:	a802      	add	r0, sp, #8
    d200:	9301      	str	r3, [sp, #4]
    d202:	f000 f89b 	bl	d33c <__gnu_Unwind_Save_VFP_D_16_to_31>
    d206:	9b01      	ldr	r3, [sp, #4]
    d208:	f1c5 0610 	rsb	r6, r5, #16
    d20c:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
    d210:	2e00      	cmp	r6, #0
    d212:	46c4      	mov	ip, r8
    d214:	dd12      	ble.n	d23c <_Unwind_VRS_Pop+0x18c>
    d216:	aa22      	add	r2, sp, #136	; 0x88
    d218:	ea4f 0c46 	mov.w	ip, r6, lsl #1
    d21c:	eb02 06c5 	add.w	r6, r2, r5, lsl #3
    d220:	ebc8 0606 	rsb	r6, r8, r6
    d224:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    d228:	f1a8 0204 	sub.w	r2, r8, #4
    d22c:	f852 0f04 	ldr.w	r0, [r2, #4]!
    d230:	50b0      	str	r0, [r6, r2]
    d232:	3901      	subs	r1, #1
    d234:	1c48      	adds	r0, r1, #1
    d236:	d1f9      	bne.n	d22c <_Unwind_VRS_Pop+0x17c>
    d238:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
    d23c:	b1b7      	cbz	r7, d26c <_Unwind_VRS_Pop+0x1bc>
    d23e:	aa44      	add	r2, sp, #272	; 0x110
    d240:	2d10      	cmp	r5, #16
    d242:	bf2c      	ite	cs
    d244:	4628      	movcs	r0, r5
    d246:	2010      	movcc	r0, #16
    d248:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    d24c:	ea4f 0847 	mov.w	r8, r7, lsl #1
    d250:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
    d254:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    d258:	4661      	mov	r1, ip
    d25a:	f851 6b04 	ldr.w	r6, [r1], #4
    d25e:	f840 6b04 	str.w	r6, [r0], #4
    d262:	3a01      	subs	r2, #1
    d264:	1c56      	adds	r6, r2, #1
    d266:	d1f8      	bne.n	d25a <_Unwind_VRS_Pop+0x1aa>
    d268:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
    d26c:	2b01      	cmp	r3, #1
    d26e:	d01a      	beq.n	d2a6 <_Unwind_VRS_Pop+0x1f6>
    d270:	2d0f      	cmp	r5, #15
    d272:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
    d276:	d802      	bhi.n	d27e <_Unwind_VRS_Pop+0x1ce>
    d278:	a822      	add	r0, sp, #136	; 0x88
    d27a:	f000 f853 	bl	d324 <__gnu_Unwind_Restore_VFP_D>
    d27e:	b117      	cbz	r7, d286 <_Unwind_VRS_Pop+0x1d6>
    d280:	a802      	add	r0, sp, #8
    d282:	f000 f857 	bl	d334 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    d286:	2000      	movs	r0, #0
    d288:	e725      	b.n	d0d6 <_Unwind_VRS_Pop+0x26>
    d28a:	2f10      	cmp	r7, #16
    d28c:	d98c      	bls.n	d1a8 <_Unwind_VRS_Pop+0xf8>
    d28e:	3f10      	subs	r7, #16
    d290:	e793      	b.n	d1ba <_Unwind_VRS_Pop+0x10a>
    d292:	f023 0310 	bic.w	r3, r3, #16
    d296:	6023      	str	r3, [r4, #0]
    d298:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    d29c:	9201      	str	r2, [sp, #4]
    d29e:	f000 f89f 	bl	d3e0 <__gnu_Unwind_Save_WMMXC>
    d2a2:	9a01      	ldr	r2, [sp, #4]
    d2a4:	e722      	b.n	d0ec <_Unwind_VRS_Pop+0x3c>
    d2a6:	f10c 0304 	add.w	r3, ip, #4
    d2aa:	63a3      	str	r3, [r4, #56]	; 0x38
    d2ac:	a822      	add	r0, sp, #136	; 0x88
    d2ae:	f000 f831 	bl	d314 <__gnu_Unwind_Restore_VFP>
    d2b2:	e7e8      	b.n	d286 <_Unwind_VRS_Pop+0x1d6>
    d2b4:	f023 0308 	bic.w	r3, r3, #8
    d2b8:	6023      	str	r3, [r4, #0]
    d2ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    d2be:	f000 f863 	bl	d388 <__gnu_Unwind_Save_WMMXD>
    d2c2:	e738      	b.n	d136 <_Unwind_VRS_Pop+0x86>
    d2c4:	4620      	mov	r0, r4
    d2c6:	f022 0204 	bic.w	r2, r2, #4
    d2ca:	f840 2bd0 	str.w	r2, [r0], #208
    d2ce:	9301      	str	r3, [sp, #4]
    d2d0:	f000 f834 	bl	d33c <__gnu_Unwind_Save_VFP_D_16_to_31>
    d2d4:	9b01      	ldr	r3, [sp, #4]
    d2d6:	e788      	b.n	d1ea <_Unwind_VRS_Pop+0x13a>
    d2d8:	a822      	add	r0, sp, #136	; 0x88
    d2da:	9301      	str	r3, [sp, #4]
    d2dc:	f000 f81e 	bl	d31c <__gnu_Unwind_Save_VFP>
    d2e0:	9b01      	ldr	r3, [sp, #4]
    d2e2:	2f00      	cmp	r7, #0
    d2e4:	d190      	bne.n	d208 <_Unwind_VRS_Pop+0x158>
    d2e6:	e791      	b.n	d20c <_Unwind_VRS_Pop+0x15c>
    d2e8:	f041 0102 	orr.w	r1, r1, #2
    d2ec:	f840 1b48 	str.w	r1, [r0], #72
    d2f0:	9301      	str	r3, [sp, #4]
    d2f2:	f000 f81b 	bl	d32c <__gnu_Unwind_Save_VFP_D>
    d2f6:	9b01      	ldr	r3, [sp, #4]
    d2f8:	e773      	b.n	d1e2 <_Unwind_VRS_Pop+0x132>
    d2fa:	bf00      	nop

0000d2fc <__restore_core_regs>:
    d2fc:	f100 0134 	add.w	r1, r0, #52	; 0x34
    d300:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    d304:	469c      	mov	ip, r3
    d306:	46a6      	mov	lr, r4
    d308:	f84c 5d04 	str.w	r5, [ip, #-4]!
    d30c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    d310:	46e5      	mov	sp, ip
    d312:	bd00      	pop	{pc}

0000d314 <__gnu_Unwind_Restore_VFP>:
    d314:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    d318:	4770      	bx	lr
    d31a:	bf00      	nop

0000d31c <__gnu_Unwind_Save_VFP>:
    d31c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    d320:	4770      	bx	lr
    d322:	bf00      	nop

0000d324 <__gnu_Unwind_Restore_VFP_D>:
    d324:	ec90 0b20 	vldmia	r0, {d0-d15}
    d328:	4770      	bx	lr
    d32a:	bf00      	nop

0000d32c <__gnu_Unwind_Save_VFP_D>:
    d32c:	ec80 0b20 	vstmia	r0, {d0-d15}
    d330:	4770      	bx	lr
    d332:	bf00      	nop

0000d334 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    d334:	ecd0 0b20 	vldmia	r0, {d16-d31}
    d338:	4770      	bx	lr
    d33a:	bf00      	nop

0000d33c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    d33c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    d340:	4770      	bx	lr
    d342:	bf00      	nop

0000d344 <__gnu_Unwind_Restore_WMMXD>:
    d344:	ecf0 0102 	ldfe	f0, [r0], #8
    d348:	ecf0 1102 	ldfe	f1, [r0], #8
    d34c:	ecf0 2102 	ldfe	f2, [r0], #8
    d350:	ecf0 3102 	ldfe	f3, [r0], #8
    d354:	ecf0 4102 	ldfe	f4, [r0], #8
    d358:	ecf0 5102 	ldfe	f5, [r0], #8
    d35c:	ecf0 6102 	ldfe	f6, [r0], #8
    d360:	ecf0 7102 	ldfe	f7, [r0], #8
    d364:	ecf0 8102 	ldfp	f0, [r0], #8
    d368:	ecf0 9102 	ldfp	f1, [r0], #8
    d36c:	ecf0 a102 	ldfp	f2, [r0], #8
    d370:	ecf0 b102 	ldfp	f3, [r0], #8
    d374:	ecf0 c102 	ldfp	f4, [r0], #8
    d378:	ecf0 d102 	ldfp	f5, [r0], #8
    d37c:	ecf0 e102 	ldfp	f6, [r0], #8
    d380:	ecf0 f102 	ldfp	f7, [r0], #8
    d384:	4770      	bx	lr
    d386:	bf00      	nop

0000d388 <__gnu_Unwind_Save_WMMXD>:
    d388:	ece0 0102 	stfe	f0, [r0], #8
    d38c:	ece0 1102 	stfe	f1, [r0], #8
    d390:	ece0 2102 	stfe	f2, [r0], #8
    d394:	ece0 3102 	stfe	f3, [r0], #8
    d398:	ece0 4102 	stfe	f4, [r0], #8
    d39c:	ece0 5102 	stfe	f5, [r0], #8
    d3a0:	ece0 6102 	stfe	f6, [r0], #8
    d3a4:	ece0 7102 	stfe	f7, [r0], #8
    d3a8:	ece0 8102 	stfp	f0, [r0], #8
    d3ac:	ece0 9102 	stfp	f1, [r0], #8
    d3b0:	ece0 a102 	stfp	f2, [r0], #8
    d3b4:	ece0 b102 	stfp	f3, [r0], #8
    d3b8:	ece0 c102 	stfp	f4, [r0], #8
    d3bc:	ece0 d102 	stfp	f5, [r0], #8
    d3c0:	ece0 e102 	stfp	f6, [r0], #8
    d3c4:	ece0 f102 	stfp	f7, [r0], #8
    d3c8:	4770      	bx	lr
    d3ca:	bf00      	nop

0000d3cc <__gnu_Unwind_Restore_WMMXC>:
    d3cc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    d3d0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    d3d4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    d3d8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    d3dc:	4770      	bx	lr
    d3de:	bf00      	nop

0000d3e0 <__gnu_Unwind_Save_WMMXC>:
    d3e0:	fca0 8101 	stc2	1, cr8, [r0], #4
    d3e4:	fca0 9101 	stc2	1, cr9, [r0], #4
    d3e8:	fca0 a101 	stc2	1, cr10, [r0], #4
    d3ec:	fca0 b101 	stc2	1, cr11, [r0], #4
    d3f0:	4770      	bx	lr
    d3f2:	bf00      	nop

0000d3f4 <_Unwind_RaiseException>:
    d3f4:	46ec      	mov	ip, sp
    d3f6:	b500      	push	{lr}
    d3f8:	e92d 5000 	stmdb	sp!, {ip, lr}
    d3fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d400:	f04f 0300 	mov.w	r3, #0
    d404:	e92d 000c 	stmdb	sp!, {r2, r3}
    d408:	a901      	add	r1, sp, #4
    d40a:	f7ff fbdd 	bl	cbc8 <__gnu_Unwind_RaiseException>
    d40e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d412:	b012      	add	sp, #72	; 0x48
    d414:	4770      	bx	lr
    d416:	bf00      	nop

0000d418 <_Unwind_Resume>:
    d418:	46ec      	mov	ip, sp
    d41a:	b500      	push	{lr}
    d41c:	e92d 5000 	stmdb	sp!, {ip, lr}
    d420:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d424:	f04f 0300 	mov.w	r3, #0
    d428:	e92d 000c 	stmdb	sp!, {r2, r3}
    d42c:	a901      	add	r1, sp, #4
    d42e:	f7ff fc05 	bl	cc3c <__gnu_Unwind_Resume>
    d432:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d436:	b012      	add	sp, #72	; 0x48
    d438:	4770      	bx	lr
    d43a:	bf00      	nop

0000d43c <_Unwind_Resume_or_Rethrow>:
    d43c:	46ec      	mov	ip, sp
    d43e:	b500      	push	{lr}
    d440:	e92d 5000 	stmdb	sp!, {ip, lr}
    d444:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d448:	f04f 0300 	mov.w	r3, #0
    d44c:	e92d 000c 	stmdb	sp!, {r2, r3}
    d450:	a901      	add	r1, sp, #4
    d452:	f7ff fc15 	bl	cc80 <__gnu_Unwind_Resume_or_Rethrow>
    d456:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d45a:	b012      	add	sp, #72	; 0x48
    d45c:	4770      	bx	lr
    d45e:	bf00      	nop

0000d460 <_Unwind_ForcedUnwind>:
    d460:	46ec      	mov	ip, sp
    d462:	b500      	push	{lr}
    d464:	e92d 5000 	stmdb	sp!, {ip, lr}
    d468:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d46c:	f04f 0300 	mov.w	r3, #0
    d470:	e92d 000c 	stmdb	sp!, {r2, r3}
    d474:	ab01      	add	r3, sp, #4
    d476:	f7ff fbd7 	bl	cc28 <__gnu_Unwind_ForcedUnwind>
    d47a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d47e:	b012      	add	sp, #72	; 0x48
    d480:	4770      	bx	lr
    d482:	bf00      	nop

0000d484 <_Unwind_Backtrace>:
    d484:	46ec      	mov	ip, sp
    d486:	b500      	push	{lr}
    d488:	e92d 5000 	stmdb	sp!, {ip, lr}
    d48c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d490:	f04f 0300 	mov.w	r3, #0
    d494:	e92d 000c 	stmdb	sp!, {r2, r3}
    d498:	aa01      	add	r2, sp, #4
    d49a:	f7ff fc53 	bl	cd44 <__gnu_Unwind_Backtrace>
    d49e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d4a2:	b012      	add	sp, #72	; 0x48
    d4a4:	4770      	bx	lr
    d4a6:	bf00      	nop

0000d4a8 <next_unwind_byte>:
    d4a8:	7a03      	ldrb	r3, [r0, #8]
    d4aa:	b91b      	cbnz	r3, d4b4 <next_unwind_byte+0xc>
    d4ac:	7a43      	ldrb	r3, [r0, #9]
    d4ae:	b943      	cbnz	r3, d4c2 <next_unwind_byte+0x1a>
    d4b0:	20b0      	movs	r0, #176	; 0xb0
    d4b2:	4770      	bx	lr
    d4b4:	6802      	ldr	r2, [r0, #0]
    d4b6:	3b01      	subs	r3, #1
    d4b8:	7203      	strb	r3, [r0, #8]
    d4ba:	0213      	lsls	r3, r2, #8
    d4bc:	6003      	str	r3, [r0, #0]
    d4be:	0e10      	lsrs	r0, r2, #24
    d4c0:	4770      	bx	lr
    d4c2:	6842      	ldr	r2, [r0, #4]
    d4c4:	3b01      	subs	r3, #1
    d4c6:	7243      	strb	r3, [r0, #9]
    d4c8:	1d11      	adds	r1, r2, #4
    d4ca:	6812      	ldr	r2, [r2, #0]
    d4cc:	6041      	str	r1, [r0, #4]
    d4ce:	2303      	movs	r3, #3
    d4d0:	7203      	strb	r3, [r0, #8]
    d4d2:	0213      	lsls	r3, r2, #8
    d4d4:	6003      	str	r3, [r0, #0]
    d4d6:	0e10      	lsrs	r0, r2, #24
    d4d8:	4770      	bx	lr
    d4da:	bf00      	nop

0000d4dc <_Unwind_GetGR.constprop.0>:
    d4dc:	b500      	push	{lr}
    d4de:	b085      	sub	sp, #20
    d4e0:	ab03      	add	r3, sp, #12
    d4e2:	2100      	movs	r1, #0
    d4e4:	9300      	str	r3, [sp, #0]
    d4e6:	220c      	movs	r2, #12
    d4e8:	460b      	mov	r3, r1
    d4ea:	f7ff fbdb 	bl	cca4 <_Unwind_VRS_Get>
    d4ee:	9803      	ldr	r0, [sp, #12]
    d4f0:	b005      	add	sp, #20
    d4f2:	f85d fb04 	ldr.w	pc, [sp], #4
    d4f6:	bf00      	nop

0000d4f8 <unwind_UCB_from_context>:
    d4f8:	f7ff bff0 	b.w	d4dc <_Unwind_GetGR.constprop.0>

0000d4fc <__gnu_unwind_execute>:
    d4fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d500:	4606      	mov	r6, r0
    d502:	b085      	sub	sp, #20
    d504:	460d      	mov	r5, r1
    d506:	f04f 0800 	mov.w	r8, #0
    d50a:	4628      	mov	r0, r5
    d50c:	f7ff ffcc 	bl	d4a8 <next_unwind_byte>
    d510:	28b0      	cmp	r0, #176	; 0xb0
    d512:	4604      	mov	r4, r0
    d514:	f000 80ac 	beq.w	d670 <__gnu_unwind_execute+0x174>
    d518:	f020 027f 	bic.w	r2, r0, #127	; 0x7f
    d51c:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    d520:	d020      	beq.n	d564 <__gnu_unwind_execute+0x68>
    d522:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d526:	2a80      	cmp	r2, #128	; 0x80
    d528:	d073      	beq.n	d612 <__gnu_unwind_execute+0x116>
    d52a:	2a90      	cmp	r2, #144	; 0x90
    d52c:	d036      	beq.n	d59c <__gnu_unwind_execute+0xa0>
    d52e:	2aa0      	cmp	r2, #160	; 0xa0
    d530:	d042      	beq.n	d5b8 <__gnu_unwind_execute+0xbc>
    d532:	2ab0      	cmp	r2, #176	; 0xb0
    d534:	d056      	beq.n	d5e4 <__gnu_unwind_execute+0xe8>
    d536:	2ac0      	cmp	r2, #192	; 0xc0
    d538:	f000 8082 	beq.w	d640 <__gnu_unwind_execute+0x144>
    d53c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    d540:	2bd0      	cmp	r3, #208	; 0xd0
    d542:	d10b      	bne.n	d55c <__gnu_unwind_execute+0x60>
    d544:	f000 0407 	and.w	r4, r0, #7
    d548:	1c62      	adds	r2, r4, #1
    d54a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    d54e:	4630      	mov	r0, r6
    d550:	2101      	movs	r1, #1
    d552:	2305      	movs	r3, #5
    d554:	f7ff fdac 	bl	d0b0 <_Unwind_VRS_Pop>
    d558:	2800      	cmp	r0, #0
    d55a:	d0d6      	beq.n	d50a <__gnu_unwind_execute+0xe>
    d55c:	2009      	movs	r0, #9
    d55e:	b005      	add	sp, #20
    d560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d564:	af03      	add	r7, sp, #12
    d566:	ea4f 0980 	mov.w	r9, r0, lsl #2
    d56a:	460b      	mov	r3, r1
    d56c:	9700      	str	r7, [sp, #0]
    d56e:	4630      	mov	r0, r6
    d570:	220d      	movs	r2, #13
    d572:	f7ff fb97 	bl	cca4 <_Unwind_VRS_Get>
    d576:	fa5f f989 	uxtb.w	r9, r9
    d57a:	9b03      	ldr	r3, [sp, #12]
    d57c:	f109 0904 	add.w	r9, r9, #4
    d580:	0660      	lsls	r0, r4, #25
    d582:	bf4c      	ite	mi
    d584:	ebc9 0303 	rsbmi	r3, r9, r3
    d588:	444b      	addpl	r3, r9
    d58a:	9303      	str	r3, [sp, #12]
    d58c:	2100      	movs	r1, #0
    d58e:	9700      	str	r7, [sp, #0]
    d590:	460b      	mov	r3, r1
    d592:	4630      	mov	r0, r6
    d594:	220d      	movs	r2, #13
    d596:	f7ff fbad 	bl	ccf4 <_Unwind_VRS_Set>
    d59a:	e7b6      	b.n	d50a <__gnu_unwind_execute+0xe>
    d59c:	f000 030d 	and.w	r3, r0, #13
    d5a0:	2b0d      	cmp	r3, #13
    d5a2:	d0db      	beq.n	d55c <__gnu_unwind_execute+0x60>
    d5a4:	af03      	add	r7, sp, #12
    d5a6:	2100      	movs	r1, #0
    d5a8:	f000 020f 	and.w	r2, r0, #15
    d5ac:	9700      	str	r7, [sp, #0]
    d5ae:	460b      	mov	r3, r1
    d5b0:	4630      	mov	r0, r6
    d5b2:	f7ff fb77 	bl	cca4 <_Unwind_VRS_Get>
    d5b6:	e7e9      	b.n	d58c <__gnu_unwind_execute+0x90>
    d5b8:	43c2      	mvns	r2, r0
    d5ba:	f44f 637f 	mov.w	r3, #4080	; 0xff0
    d5be:	f002 0207 	and.w	r2, r2, #7
    d5c2:	fa43 f202 	asr.w	r2, r3, r2
    d5c6:	0701      	lsls	r1, r0, #28
    d5c8:	ea02 0203 	and.w	r2, r2, r3
    d5cc:	f04f 0100 	mov.w	r1, #0
    d5d0:	bf48      	it	mi
    d5d2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    d5d6:	460b      	mov	r3, r1
    d5d8:	4630      	mov	r0, r6
    d5da:	f7ff fd69 	bl	d0b0 <_Unwind_VRS_Pop>
    d5de:	2800      	cmp	r0, #0
    d5e0:	d1bc      	bne.n	d55c <__gnu_unwind_execute+0x60>
    d5e2:	e792      	b.n	d50a <__gnu_unwind_execute+0xe>
    d5e4:	28b1      	cmp	r0, #177	; 0xb1
    d5e6:	d048      	beq.n	d67a <__gnu_unwind_execute+0x17e>
    d5e8:	28b2      	cmp	r0, #178	; 0xb2
    d5ea:	d051      	beq.n	d690 <__gnu_unwind_execute+0x194>
    d5ec:	28b3      	cmp	r0, #179	; 0xb3
    d5ee:	d07c      	beq.n	d6ea <__gnu_unwind_execute+0x1ee>
    d5f0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    d5f4:	2bb4      	cmp	r3, #180	; 0xb4
    d5f6:	d0b1      	beq.n	d55c <__gnu_unwind_execute+0x60>
    d5f8:	f000 0207 	and.w	r2, r0, #7
    d5fc:	3201      	adds	r2, #1
    d5fe:	2101      	movs	r1, #1
    d600:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    d604:	460b      	mov	r3, r1
    d606:	4630      	mov	r0, r6
    d608:	f7ff fd52 	bl	d0b0 <_Unwind_VRS_Pop>
    d60c:	2800      	cmp	r0, #0
    d60e:	d1a5      	bne.n	d55c <__gnu_unwind_execute+0x60>
    d610:	e77b      	b.n	d50a <__gnu_unwind_execute+0xe>
    d612:	4628      	mov	r0, r5
    d614:	f7ff ff48 	bl	d4a8 <next_unwind_byte>
    d618:	0224      	lsls	r4, r4, #8
    d61a:	4320      	orrs	r0, r4
    d61c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d620:	d09c      	beq.n	d55c <__gnu_unwind_execute+0x60>
    d622:	0104      	lsls	r4, r0, #4
    d624:	2100      	movs	r1, #0
    d626:	b2a2      	uxth	r2, r4
    d628:	460b      	mov	r3, r1
    d62a:	4630      	mov	r0, r6
    d62c:	f7ff fd40 	bl	d0b0 <_Unwind_VRS_Pop>
    d630:	2800      	cmp	r0, #0
    d632:	d193      	bne.n	d55c <__gnu_unwind_execute+0x60>
    d634:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    d638:	bf18      	it	ne
    d63a:	f04f 0801 	movne.w	r8, #1
    d63e:	e764      	b.n	d50a <__gnu_unwind_execute+0xe>
    d640:	28c6      	cmp	r0, #198	; 0xc6
    d642:	d05e      	beq.n	d702 <__gnu_unwind_execute+0x206>
    d644:	28c7      	cmp	r0, #199	; 0xc7
    d646:	d068      	beq.n	d71a <__gnu_unwind_execute+0x21e>
    d648:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    d64c:	2bc0      	cmp	r3, #192	; 0xc0
    d64e:	d077      	beq.n	d740 <__gnu_unwind_execute+0x244>
    d650:	28c8      	cmp	r0, #200	; 0xc8
    d652:	f000 808d 	beq.w	d770 <__gnu_unwind_execute+0x274>
    d656:	28c9      	cmp	r0, #201	; 0xc9
    d658:	d180      	bne.n	d55c <__gnu_unwind_execute+0x60>
    d65a:	4628      	mov	r0, r5
    d65c:	f7ff ff24 	bl	d4a8 <next_unwind_byte>
    d660:	f000 030f 	and.w	r3, r0, #15
    d664:	3301      	adds	r3, #1
    d666:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d66a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    d66e:	e76e      	b.n	d54e <__gnu_unwind_execute+0x52>
    d670:	f1b8 0f00 	cmp.w	r8, #0
    d674:	d06b      	beq.n	d74e <__gnu_unwind_execute+0x252>
    d676:	2000      	movs	r0, #0
    d678:	e771      	b.n	d55e <__gnu_unwind_execute+0x62>
    d67a:	4628      	mov	r0, r5
    d67c:	f7ff ff14 	bl	d4a8 <next_unwind_byte>
    d680:	4602      	mov	r2, r0
    d682:	2800      	cmp	r0, #0
    d684:	f43f af6a 	beq.w	d55c <__gnu_unwind_execute+0x60>
    d688:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
    d68c:	d0ba      	beq.n	d604 <__gnu_unwind_execute+0x108>
    d68e:	e765      	b.n	d55c <__gnu_unwind_execute+0x60>
    d690:	2100      	movs	r1, #0
    d692:	af03      	add	r7, sp, #12
    d694:	220d      	movs	r2, #13
    d696:	460b      	mov	r3, r1
    d698:	9700      	str	r7, [sp, #0]
    d69a:	4630      	mov	r0, r6
    d69c:	f7ff fb02 	bl	cca4 <_Unwind_VRS_Get>
    d6a0:	4628      	mov	r0, r5
    d6a2:	f7ff ff01 	bl	d4a8 <next_unwind_byte>
    d6a6:	0602      	lsls	r2, r0, #24
    d6a8:	f04f 0402 	mov.w	r4, #2
    d6ac:	d50c      	bpl.n	d6c8 <__gnu_unwind_execute+0x1cc>
    d6ae:	9b03      	ldr	r3, [sp, #12]
    d6b0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    d6b4:	40a0      	lsls	r0, r4
    d6b6:	4403      	add	r3, r0
    d6b8:	4628      	mov	r0, r5
    d6ba:	9303      	str	r3, [sp, #12]
    d6bc:	f7ff fef4 	bl	d4a8 <next_unwind_byte>
    d6c0:	0603      	lsls	r3, r0, #24
    d6c2:	f104 0407 	add.w	r4, r4, #7
    d6c6:	d4f2      	bmi.n	d6ae <__gnu_unwind_execute+0x1b2>
    d6c8:	9b03      	ldr	r3, [sp, #12]
    d6ca:	9700      	str	r7, [sp, #0]
    d6cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    d6d0:	fa00 f404 	lsl.w	r4, r0, r4
    d6d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
    d6d8:	2100      	movs	r1, #0
    d6da:	441c      	add	r4, r3
    d6dc:	4630      	mov	r0, r6
    d6de:	460b      	mov	r3, r1
    d6e0:	220d      	movs	r2, #13
    d6e2:	9403      	str	r4, [sp, #12]
    d6e4:	f7ff fb06 	bl	ccf4 <_Unwind_VRS_Set>
    d6e8:	e70f      	b.n	d50a <__gnu_unwind_execute+0xe>
    d6ea:	4628      	mov	r0, r5
    d6ec:	f7ff fedc 	bl	d4a8 <next_unwind_byte>
    d6f0:	f000 030f 	and.w	r3, r0, #15
    d6f4:	3301      	adds	r3, #1
    d6f6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d6fa:	2101      	movs	r1, #1
    d6fc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    d700:	e780      	b.n	d604 <__gnu_unwind_execute+0x108>
    d702:	4628      	mov	r0, r5
    d704:	f7ff fed0 	bl	d4a8 <next_unwind_byte>
    d708:	f000 030f 	and.w	r3, r0, #15
    d70c:	3301      	adds	r3, #1
    d70e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d712:	2103      	movs	r1, #3
    d714:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    d718:	e774      	b.n	d604 <__gnu_unwind_execute+0x108>
    d71a:	4628      	mov	r0, r5
    d71c:	f7ff fec4 	bl	d4a8 <next_unwind_byte>
    d720:	4602      	mov	r2, r0
    d722:	2800      	cmp	r0, #0
    d724:	f43f af1a 	beq.w	d55c <__gnu_unwind_execute+0x60>
    d728:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    d72c:	f47f af16 	bne.w	d55c <__gnu_unwind_execute+0x60>
    d730:	4630      	mov	r0, r6
    d732:	2104      	movs	r1, #4
    d734:	f7ff fcbc 	bl	d0b0 <_Unwind_VRS_Pop>
    d738:	2800      	cmp	r0, #0
    d73a:	f47f af0f 	bne.w	d55c <__gnu_unwind_execute+0x60>
    d73e:	e6e4      	b.n	d50a <__gnu_unwind_execute+0xe>
    d740:	f000 020f 	and.w	r2, r0, #15
    d744:	3201      	adds	r2, #1
    d746:	2103      	movs	r1, #3
    d748:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    d74c:	e75a      	b.n	d604 <__gnu_unwind_execute+0x108>
    d74e:	ac03      	add	r4, sp, #12
    d750:	4641      	mov	r1, r8
    d752:	220e      	movs	r2, #14
    d754:	4643      	mov	r3, r8
    d756:	9400      	str	r4, [sp, #0]
    d758:	4630      	mov	r0, r6
    d75a:	f7ff faa3 	bl	cca4 <_Unwind_VRS_Get>
    d75e:	9400      	str	r4, [sp, #0]
    d760:	4630      	mov	r0, r6
    d762:	4641      	mov	r1, r8
    d764:	220f      	movs	r2, #15
    d766:	4643      	mov	r3, r8
    d768:	f7ff fac4 	bl	ccf4 <_Unwind_VRS_Set>
    d76c:	4640      	mov	r0, r8
    d76e:	e6f6      	b.n	d55e <__gnu_unwind_execute+0x62>
    d770:	4628      	mov	r0, r5
    d772:	f7ff fe99 	bl	d4a8 <next_unwind_byte>
    d776:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d77a:	f000 030f 	and.w	r3, r0, #15
    d77e:	3210      	adds	r2, #16
    d780:	3301      	adds	r3, #1
    d782:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    d786:	e6e2      	b.n	d54e <__gnu_unwind_execute+0x52>

0000d788 <__gnu_unwind_frame>:
    d788:	b500      	push	{lr}
    d78a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    d78c:	b085      	sub	sp, #20
    d78e:	685a      	ldr	r2, [r3, #4]
    d790:	2003      	movs	r0, #3
    d792:	f88d 000c 	strb.w	r0, [sp, #12]
    d796:	4608      	mov	r0, r1
    d798:	0211      	lsls	r1, r2, #8
    d79a:	9101      	str	r1, [sp, #4]
    d79c:	79da      	ldrb	r2, [r3, #7]
    d79e:	f88d 200d 	strb.w	r2, [sp, #13]
    d7a2:	3308      	adds	r3, #8
    d7a4:	a901      	add	r1, sp, #4
    d7a6:	9302      	str	r3, [sp, #8]
    d7a8:	f7ff fea8 	bl	d4fc <__gnu_unwind_execute>
    d7ac:	b005      	add	sp, #20
    d7ae:	f85d fb04 	ldr.w	pc, [sp], #4
    d7b2:	bf00      	nop

0000d7b4 <_Unwind_GetRegionStart>:
    d7b4:	b508      	push	{r3, lr}
    d7b6:	f7ff fe9f 	bl	d4f8 <unwind_UCB_from_context>
    d7ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
    d7bc:	bd08      	pop	{r3, pc}
    d7be:	bf00      	nop

0000d7c0 <_Unwind_GetLanguageSpecificData>:
    d7c0:	b508      	push	{r3, lr}
    d7c2:	f7ff fe99 	bl	d4f8 <unwind_UCB_from_context>
    d7c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    d7c8:	79da      	ldrb	r2, [r3, #7]
    d7ca:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    d7ce:	3008      	adds	r0, #8
    d7d0:	bd08      	pop	{r3, pc}
    d7d2:	bf00      	nop

0000d7d4 <_Unwind_GetDataRelBase>:
    d7d4:	b508      	push	{r3, lr}
    d7d6:	f000 f805 	bl	d7e4 <abort>
    d7da:	bf00      	nop

0000d7dc <_Unwind_GetTextRelBase>:
    d7dc:	b508      	push	{r3, lr}
    d7de:	f000 f801 	bl	d7e4 <abort>
    d7e2:	bf00      	nop

0000d7e4 <abort>:
    d7e4:	b508      	push	{r3, lr}
    d7e6:	2006      	movs	r0, #6
    d7e8:	f001 f90e 	bl	ea08 <raise>
    d7ec:	2001      	movs	r0, #1
    d7ee:	f7f4 ffbd 	bl	276c <_exit>
    d7f2:	bf00      	nop

0000d7f4 <__cxa_atexit>:
    d7f4:	b410      	push	{r4}
    d7f6:	460c      	mov	r4, r1
    d7f8:	4613      	mov	r3, r2
    d7fa:	4601      	mov	r1, r0
    d7fc:	4622      	mov	r2, r4
    d7fe:	2002      	movs	r0, #2
    d800:	f85d 4b04 	ldr.w	r4, [sp], #4
    d804:	f002 be24 	b.w	10450 <__register_exitproc>

0000d808 <fputc>:
    d808:	4b08      	ldr	r3, [pc, #32]	; (d82c <fputc+0x24>)
    d80a:	b570      	push	{r4, r5, r6, lr}
    d80c:	681c      	ldr	r4, [r3, #0]
    d80e:	4606      	mov	r6, r0
    d810:	460d      	mov	r5, r1
    d812:	b124      	cbz	r4, d81e <fputc+0x16>
    d814:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d816:	b913      	cbnz	r3, d81e <fputc+0x16>
    d818:	4620      	mov	r0, r4
    d81a:	f003 fef7 	bl	1160c <__sinit>
    d81e:	4620      	mov	r0, r4
    d820:	4631      	mov	r1, r6
    d822:	462a      	mov	r2, r5
    d824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d828:	f000 be96 	b.w	e558 <_putc_r>
    d82c:	1fff88f0 	.word	0x1fff88f0

0000d830 <_fputs_r>:
    d830:	b530      	push	{r4, r5, lr}
    d832:	b087      	sub	sp, #28
    d834:	4605      	mov	r5, r0
    d836:	4608      	mov	r0, r1
    d838:	4614      	mov	r4, r2
    d83a:	9101      	str	r1, [sp, #4]
    d83c:	f7f4 ffcc 	bl	27d8 <strlen>
    d840:	aa01      	add	r2, sp, #4
    d842:	2301      	movs	r3, #1
    d844:	9005      	str	r0, [sp, #20]
    d846:	9002      	str	r0, [sp, #8]
    d848:	9203      	str	r2, [sp, #12]
    d84a:	9304      	str	r3, [sp, #16]
    d84c:	b10d      	cbz	r5, d852 <_fputs_r+0x22>
    d84e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    d850:	b183      	cbz	r3, d874 <_fputs_r+0x44>
    d852:	89a3      	ldrh	r3, [r4, #12]
    d854:	049a      	lsls	r2, r3, #18
    d856:	d406      	bmi.n	d866 <_fputs_r+0x36>
    d858:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d85a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d85e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    d862:	81a3      	strh	r3, [r4, #12]
    d864:	6662      	str	r2, [r4, #100]	; 0x64
    d866:	4628      	mov	r0, r5
    d868:	4621      	mov	r1, r4
    d86a:	aa03      	add	r2, sp, #12
    d86c:	f000 f80e 	bl	d88c <__sfvwrite_r>
    d870:	b007      	add	sp, #28
    d872:	bd30      	pop	{r4, r5, pc}
    d874:	4628      	mov	r0, r5
    d876:	f003 fec9 	bl	1160c <__sinit>
    d87a:	e7ea      	b.n	d852 <_fputs_r+0x22>

0000d87c <fputs>:
    d87c:	4b02      	ldr	r3, [pc, #8]	; (d888 <fputs+0xc>)
    d87e:	460a      	mov	r2, r1
    d880:	4601      	mov	r1, r0
    d882:	6818      	ldr	r0, [r3, #0]
    d884:	f7ff bfd4 	b.w	d830 <_fputs_r>
    d888:	1fff88f0 	.word	0x1fff88f0

0000d88c <__sfvwrite_r>:
    d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d890:	6893      	ldr	r3, [r2, #8]
    d892:	b083      	sub	sp, #12
    d894:	4616      	mov	r6, r2
    d896:	4681      	mov	r9, r0
    d898:	460c      	mov	r4, r1
    d89a:	b32b      	cbz	r3, d8e8 <__sfvwrite_r+0x5c>
    d89c:	898b      	ldrh	r3, [r1, #12]
    d89e:	0719      	lsls	r1, r3, #28
    d8a0:	d526      	bpl.n	d8f0 <__sfvwrite_r+0x64>
    d8a2:	6922      	ldr	r2, [r4, #16]
    d8a4:	b322      	cbz	r2, d8f0 <__sfvwrite_r+0x64>
    d8a6:	f003 0202 	and.w	r2, r3, #2
    d8aa:	b292      	uxth	r2, r2
    d8ac:	6835      	ldr	r5, [r6, #0]
    d8ae:	2a00      	cmp	r2, #0
    d8b0:	d02c      	beq.n	d90c <__sfvwrite_r+0x80>
    d8b2:	f04f 0a00 	mov.w	sl, #0
    d8b6:	f8df b2e8 	ldr.w	fp, [pc, #744]	; dba0 <__sfvwrite_r+0x314>
    d8ba:	46d0      	mov	r8, sl
    d8bc:	45d8      	cmp	r8, fp
    d8be:	bf34      	ite	cc
    d8c0:	4643      	movcc	r3, r8
    d8c2:	465b      	movcs	r3, fp
    d8c4:	4652      	mov	r2, sl
    d8c6:	4648      	mov	r0, r9
    d8c8:	f1b8 0f00 	cmp.w	r8, #0
    d8cc:	d04f      	beq.n	d96e <__sfvwrite_r+0xe2>
    d8ce:	69e1      	ldr	r1, [r4, #28]
    d8d0:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d8d2:	47b8      	blx	r7
    d8d4:	2800      	cmp	r0, #0
    d8d6:	dd56      	ble.n	d986 <__sfvwrite_r+0xfa>
    d8d8:	68b3      	ldr	r3, [r6, #8]
    d8da:	1a1b      	subs	r3, r3, r0
    d8dc:	4482      	add	sl, r0
    d8de:	ebc0 0808 	rsb	r8, r0, r8
    d8e2:	60b3      	str	r3, [r6, #8]
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	d1e9      	bne.n	d8bc <__sfvwrite_r+0x30>
    d8e8:	2000      	movs	r0, #0
    d8ea:	b003      	add	sp, #12
    d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8f0:	4648      	mov	r0, r9
    d8f2:	4621      	mov	r1, r4
    d8f4:	f002 fd4a 	bl	1038c <__swsetup_r>
    d8f8:	2800      	cmp	r0, #0
    d8fa:	f040 8148 	bne.w	db8e <__sfvwrite_r+0x302>
    d8fe:	89a3      	ldrh	r3, [r4, #12]
    d900:	6835      	ldr	r5, [r6, #0]
    d902:	f003 0202 	and.w	r2, r3, #2
    d906:	b292      	uxth	r2, r2
    d908:	2a00      	cmp	r2, #0
    d90a:	d1d2      	bne.n	d8b2 <__sfvwrite_r+0x26>
    d90c:	f013 0a01 	ands.w	sl, r3, #1
    d910:	d142      	bne.n	d998 <__sfvwrite_r+0x10c>
    d912:	46d0      	mov	r8, sl
    d914:	f1b8 0f00 	cmp.w	r8, #0
    d918:	d023      	beq.n	d962 <__sfvwrite_r+0xd6>
    d91a:	059a      	lsls	r2, r3, #22
    d91c:	68a7      	ldr	r7, [r4, #8]
    d91e:	d576      	bpl.n	da0e <__sfvwrite_r+0x182>
    d920:	45b8      	cmp	r8, r7
    d922:	f0c0 80a4 	bcc.w	da6e <__sfvwrite_r+0x1e2>
    d926:	f413 6f90 	tst.w	r3, #1152	; 0x480
    d92a:	f040 80b2 	bne.w	da92 <__sfvwrite_r+0x206>
    d92e:	6820      	ldr	r0, [r4, #0]
    d930:	46bb      	mov	fp, r7
    d932:	4651      	mov	r1, sl
    d934:	465a      	mov	r2, fp
    d936:	f000 fd61 	bl	e3fc <memmove>
    d93a:	68a2      	ldr	r2, [r4, #8]
    d93c:	6821      	ldr	r1, [r4, #0]
    d93e:	1bd2      	subs	r2, r2, r7
    d940:	eb01 030b 	add.w	r3, r1, fp
    d944:	60a2      	str	r2, [r4, #8]
    d946:	6023      	str	r3, [r4, #0]
    d948:	4642      	mov	r2, r8
    d94a:	68b3      	ldr	r3, [r6, #8]
    d94c:	1a9b      	subs	r3, r3, r2
    d94e:	4492      	add	sl, r2
    d950:	ebc2 0808 	rsb	r8, r2, r8
    d954:	60b3      	str	r3, [r6, #8]
    d956:	2b00      	cmp	r3, #0
    d958:	d0c6      	beq.n	d8e8 <__sfvwrite_r+0x5c>
    d95a:	89a3      	ldrh	r3, [r4, #12]
    d95c:	f1b8 0f00 	cmp.w	r8, #0
    d960:	d1db      	bne.n	d91a <__sfvwrite_r+0x8e>
    d962:	f8d5 a000 	ldr.w	sl, [r5]
    d966:	f8d5 8004 	ldr.w	r8, [r5, #4]
    d96a:	3508      	adds	r5, #8
    d96c:	e7d2      	b.n	d914 <__sfvwrite_r+0x88>
    d96e:	f8d5 a000 	ldr.w	sl, [r5]
    d972:	f8d5 8004 	ldr.w	r8, [r5, #4]
    d976:	3508      	adds	r5, #8
    d978:	e7a0      	b.n	d8bc <__sfvwrite_r+0x30>
    d97a:	4648      	mov	r0, r9
    d97c:	4621      	mov	r1, r4
    d97e:	f003 fe29 	bl	115d4 <_fflush_r>
    d982:	2800      	cmp	r0, #0
    d984:	d059      	beq.n	da3a <__sfvwrite_r+0x1ae>
    d986:	89a3      	ldrh	r3, [r4, #12]
    d988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d990:	81a3      	strh	r3, [r4, #12]
    d992:	b003      	add	sp, #12
    d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d998:	4692      	mov	sl, r2
    d99a:	9201      	str	r2, [sp, #4]
    d99c:	4693      	mov	fp, r2
    d99e:	4690      	mov	r8, r2
    d9a0:	f1b8 0f00 	cmp.w	r8, #0
    d9a4:	d02b      	beq.n	d9fe <__sfvwrite_r+0x172>
    d9a6:	9f01      	ldr	r7, [sp, #4]
    d9a8:	2f00      	cmp	r7, #0
    d9aa:	d064      	beq.n	da76 <__sfvwrite_r+0x1ea>
    d9ac:	6820      	ldr	r0, [r4, #0]
    d9ae:	6921      	ldr	r1, [r4, #16]
    d9b0:	f8d4 c008 	ldr.w	ip, [r4, #8]
    d9b4:	6962      	ldr	r2, [r4, #20]
    d9b6:	45c2      	cmp	sl, r8
    d9b8:	bf34      	ite	cc
    d9ba:	4653      	movcc	r3, sl
    d9bc:	4643      	movcs	r3, r8
    d9be:	4288      	cmp	r0, r1
    d9c0:	461f      	mov	r7, r3
    d9c2:	d903      	bls.n	d9cc <__sfvwrite_r+0x140>
    d9c4:	4494      	add	ip, r2
    d9c6:	4563      	cmp	r3, ip
    d9c8:	f300 80ae 	bgt.w	db28 <__sfvwrite_r+0x29c>
    d9cc:	4293      	cmp	r3, r2
    d9ce:	db36      	blt.n	da3e <__sfvwrite_r+0x1b2>
    d9d0:	4613      	mov	r3, r2
    d9d2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d9d4:	69e1      	ldr	r1, [r4, #28]
    d9d6:	4648      	mov	r0, r9
    d9d8:	465a      	mov	r2, fp
    d9da:	47b8      	blx	r7
    d9dc:	1e07      	subs	r7, r0, #0
    d9de:	ddd2      	ble.n	d986 <__sfvwrite_r+0xfa>
    d9e0:	ebba 0a07 	subs.w	sl, sl, r7
    d9e4:	d03a      	beq.n	da5c <__sfvwrite_r+0x1d0>
    d9e6:	68b3      	ldr	r3, [r6, #8]
    d9e8:	1bdb      	subs	r3, r3, r7
    d9ea:	44bb      	add	fp, r7
    d9ec:	ebc7 0808 	rsb	r8, r7, r8
    d9f0:	60b3      	str	r3, [r6, #8]
    d9f2:	2b00      	cmp	r3, #0
    d9f4:	f43f af78 	beq.w	d8e8 <__sfvwrite_r+0x5c>
    d9f8:	f1b8 0f00 	cmp.w	r8, #0
    d9fc:	d1d3      	bne.n	d9a6 <__sfvwrite_r+0x11a>
    d9fe:	2700      	movs	r7, #0
    da00:	f8d5 b000 	ldr.w	fp, [r5]
    da04:	f8d5 8004 	ldr.w	r8, [r5, #4]
    da08:	9701      	str	r7, [sp, #4]
    da0a:	3508      	adds	r5, #8
    da0c:	e7c8      	b.n	d9a0 <__sfvwrite_r+0x114>
    da0e:	6820      	ldr	r0, [r4, #0]
    da10:	6923      	ldr	r3, [r4, #16]
    da12:	4298      	cmp	r0, r3
    da14:	d802      	bhi.n	da1c <__sfvwrite_r+0x190>
    da16:	6963      	ldr	r3, [r4, #20]
    da18:	4598      	cmp	r8, r3
    da1a:	d272      	bcs.n	db02 <__sfvwrite_r+0x276>
    da1c:	45b8      	cmp	r8, r7
    da1e:	bf38      	it	cc
    da20:	4647      	movcc	r7, r8
    da22:	463a      	mov	r2, r7
    da24:	4651      	mov	r1, sl
    da26:	f000 fce9 	bl	e3fc <memmove>
    da2a:	68a3      	ldr	r3, [r4, #8]
    da2c:	6822      	ldr	r2, [r4, #0]
    da2e:	1bdb      	subs	r3, r3, r7
    da30:	443a      	add	r2, r7
    da32:	60a3      	str	r3, [r4, #8]
    da34:	6022      	str	r2, [r4, #0]
    da36:	2b00      	cmp	r3, #0
    da38:	d09f      	beq.n	d97a <__sfvwrite_r+0xee>
    da3a:	463a      	mov	r2, r7
    da3c:	e785      	b.n	d94a <__sfvwrite_r+0xbe>
    da3e:	461a      	mov	r2, r3
    da40:	4659      	mov	r1, fp
    da42:	9300      	str	r3, [sp, #0]
    da44:	f000 fcda 	bl	e3fc <memmove>
    da48:	9b00      	ldr	r3, [sp, #0]
    da4a:	68a1      	ldr	r1, [r4, #8]
    da4c:	6822      	ldr	r2, [r4, #0]
    da4e:	1ac9      	subs	r1, r1, r3
    da50:	ebba 0a07 	subs.w	sl, sl, r7
    da54:	4413      	add	r3, r2
    da56:	60a1      	str	r1, [r4, #8]
    da58:	6023      	str	r3, [r4, #0]
    da5a:	d1c4      	bne.n	d9e6 <__sfvwrite_r+0x15a>
    da5c:	4648      	mov	r0, r9
    da5e:	4621      	mov	r1, r4
    da60:	f003 fdb8 	bl	115d4 <_fflush_r>
    da64:	2800      	cmp	r0, #0
    da66:	d18e      	bne.n	d986 <__sfvwrite_r+0xfa>
    da68:	f8cd a004 	str.w	sl, [sp, #4]
    da6c:	e7bb      	b.n	d9e6 <__sfvwrite_r+0x15a>
    da6e:	6820      	ldr	r0, [r4, #0]
    da70:	4647      	mov	r7, r8
    da72:	46c3      	mov	fp, r8
    da74:	e75d      	b.n	d932 <__sfvwrite_r+0xa6>
    da76:	4658      	mov	r0, fp
    da78:	210a      	movs	r1, #10
    da7a:	4642      	mov	r2, r8
    da7c:	f000 fba8 	bl	e1d0 <memchr>
    da80:	2800      	cmp	r0, #0
    da82:	d07f      	beq.n	db84 <__sfvwrite_r+0x2f8>
    da84:	f100 0a01 	add.w	sl, r0, #1
    da88:	2701      	movs	r7, #1
    da8a:	ebcb 0a0a 	rsb	sl, fp, sl
    da8e:	9701      	str	r7, [sp, #4]
    da90:	e78c      	b.n	d9ac <__sfvwrite_r+0x120>
    da92:	6822      	ldr	r2, [r4, #0]
    da94:	6921      	ldr	r1, [r4, #16]
    da96:	6967      	ldr	r7, [r4, #20]
    da98:	ebc1 0c02 	rsb	ip, r1, r2
    da9c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    daa0:	f10c 0201 	add.w	r2, ip, #1
    daa4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    daa8:	4442      	add	r2, r8
    daaa:	107f      	asrs	r7, r7, #1
    daac:	4297      	cmp	r7, r2
    daae:	bf34      	ite	cc
    dab0:	4617      	movcc	r7, r2
    dab2:	463a      	movcs	r2, r7
    dab4:	055b      	lsls	r3, r3, #21
    dab6:	d54f      	bpl.n	db58 <__sfvwrite_r+0x2cc>
    dab8:	4611      	mov	r1, r2
    daba:	4648      	mov	r0, r9
    dabc:	f8cd c000 	str.w	ip, [sp]
    dac0:	f000 f8ea 	bl	dc98 <_malloc_r>
    dac4:	f8dd c000 	ldr.w	ip, [sp]
    dac8:	4683      	mov	fp, r0
    daca:	2800      	cmp	r0, #0
    dacc:	d062      	beq.n	db94 <__sfvwrite_r+0x308>
    dace:	4662      	mov	r2, ip
    dad0:	6921      	ldr	r1, [r4, #16]
    dad2:	f8cd c000 	str.w	ip, [sp]
    dad6:	f000 fbf7 	bl	e2c8 <memcpy>
    dada:	89a2      	ldrh	r2, [r4, #12]
    dadc:	f8dd c000 	ldr.w	ip, [sp]
    dae0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    dae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dae8:	81a2      	strh	r2, [r4, #12]
    daea:	eb0b 000c 	add.w	r0, fp, ip
    daee:	ebcc 0207 	rsb	r2, ip, r7
    daf2:	f8c4 b010 	str.w	fp, [r4, #16]
    daf6:	6167      	str	r7, [r4, #20]
    daf8:	6020      	str	r0, [r4, #0]
    dafa:	60a2      	str	r2, [r4, #8]
    dafc:	4647      	mov	r7, r8
    dafe:	46c3      	mov	fp, r8
    db00:	e717      	b.n	d932 <__sfvwrite_r+0xa6>
    db02:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    db06:	4590      	cmp	r8, r2
    db08:	bf38      	it	cc
    db0a:	4642      	movcc	r2, r8
    db0c:	fb92 f2f3 	sdiv	r2, r2, r3
    db10:	fb02 f303 	mul.w	r3, r2, r3
    db14:	6a67      	ldr	r7, [r4, #36]	; 0x24
    db16:	69e1      	ldr	r1, [r4, #28]
    db18:	4648      	mov	r0, r9
    db1a:	4652      	mov	r2, sl
    db1c:	47b8      	blx	r7
    db1e:	2800      	cmp	r0, #0
    db20:	f77f af31 	ble.w	d986 <__sfvwrite_r+0xfa>
    db24:	4602      	mov	r2, r0
    db26:	e710      	b.n	d94a <__sfvwrite_r+0xbe>
    db28:	4662      	mov	r2, ip
    db2a:	4659      	mov	r1, fp
    db2c:	f8cd c000 	str.w	ip, [sp]
    db30:	f000 fc64 	bl	e3fc <memmove>
    db34:	f8dd c000 	ldr.w	ip, [sp]
    db38:	6823      	ldr	r3, [r4, #0]
    db3a:	4463      	add	r3, ip
    db3c:	6023      	str	r3, [r4, #0]
    db3e:	4648      	mov	r0, r9
    db40:	4621      	mov	r1, r4
    db42:	f8cd c000 	str.w	ip, [sp]
    db46:	f003 fd45 	bl	115d4 <_fflush_r>
    db4a:	f8dd c000 	ldr.w	ip, [sp]
    db4e:	2800      	cmp	r0, #0
    db50:	f47f af19 	bne.w	d986 <__sfvwrite_r+0xfa>
    db54:	4667      	mov	r7, ip
    db56:	e743      	b.n	d9e0 <__sfvwrite_r+0x154>
    db58:	4648      	mov	r0, r9
    db5a:	f8cd c000 	str.w	ip, [sp]
    db5e:	f000 fd2f 	bl	e5c0 <_realloc_r>
    db62:	f8dd c000 	ldr.w	ip, [sp]
    db66:	4683      	mov	fp, r0
    db68:	2800      	cmp	r0, #0
    db6a:	d1be      	bne.n	daea <__sfvwrite_r+0x25e>
    db6c:	4648      	mov	r0, r9
    db6e:	6921      	ldr	r1, [r4, #16]
    db70:	f003 fe30 	bl	117d4 <_free_r>
    db74:	89a3      	ldrh	r3, [r4, #12]
    db76:	220c      	movs	r2, #12
    db78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    db7c:	b29b      	uxth	r3, r3
    db7e:	f8c9 2000 	str.w	r2, [r9]
    db82:	e701      	b.n	d988 <__sfvwrite_r+0xfc>
    db84:	2701      	movs	r7, #1
    db86:	f108 0a01 	add.w	sl, r8, #1
    db8a:	9701      	str	r7, [sp, #4]
    db8c:	e70e      	b.n	d9ac <__sfvwrite_r+0x120>
    db8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    db92:	e6aa      	b.n	d8ea <__sfvwrite_r+0x5e>
    db94:	230c      	movs	r3, #12
    db96:	f8c9 3000 	str.w	r3, [r9]
    db9a:	89a3      	ldrh	r3, [r4, #12]
    db9c:	e6f4      	b.n	d988 <__sfvwrite_r+0xfc>
    db9e:	bf00      	nop
    dba0:	7ffffc00 	.word	0x7ffffc00

0000dba4 <_fwrite_r>:
    dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dba8:	b086      	sub	sp, #24
    dbaa:	fb02 f503 	mul.w	r5, r2, r3
    dbae:	4617      	mov	r7, r2
    dbb0:	4698      	mov	r8, r3
    dbb2:	aa01      	add	r2, sp, #4
    dbb4:	2301      	movs	r3, #1
    dbb6:	9101      	str	r1, [sp, #4]
    dbb8:	9502      	str	r5, [sp, #8]
    dbba:	9505      	str	r5, [sp, #20]
    dbbc:	9203      	str	r2, [sp, #12]
    dbbe:	9304      	str	r3, [sp, #16]
    dbc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dbc2:	4606      	mov	r6, r0
    dbc4:	b108      	cbz	r0, dbca <_fwrite_r+0x26>
    dbc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    dbc8:	b1d3      	cbz	r3, dc00 <_fwrite_r+0x5c>
    dbca:	89a2      	ldrh	r2, [r4, #12]
    dbcc:	0493      	lsls	r3, r2, #18
    dbce:	d406      	bmi.n	dbde <_fwrite_r+0x3a>
    dbd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dbd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    dbd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    dbda:	81a2      	strh	r2, [r4, #12]
    dbdc:	6663      	str	r3, [r4, #100]	; 0x64
    dbde:	4630      	mov	r0, r6
    dbe0:	4621      	mov	r1, r4
    dbe2:	aa03      	add	r2, sp, #12
    dbe4:	f7ff fe52 	bl	d88c <__sfvwrite_r>
    dbe8:	b130      	cbz	r0, dbf8 <_fwrite_r+0x54>
    dbea:	9805      	ldr	r0, [sp, #20]
    dbec:	1a28      	subs	r0, r5, r0
    dbee:	fbb0 f0f7 	udiv	r0, r0, r7
    dbf2:	b006      	add	sp, #24
    dbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbf8:	4640      	mov	r0, r8
    dbfa:	b006      	add	sp, #24
    dbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc00:	f003 fd04 	bl	1160c <__sinit>
    dc04:	e7e1      	b.n	dbca <_fwrite_r+0x26>
    dc06:	bf00      	nop

0000dc08 <fwrite>:
    dc08:	b530      	push	{r4, r5, lr}
    dc0a:	b083      	sub	sp, #12
    dc0c:	4c05      	ldr	r4, [pc, #20]	; (dc24 <fwrite+0x1c>)
    dc0e:	9300      	str	r3, [sp, #0]
    dc10:	6824      	ldr	r4, [r4, #0]
    dc12:	460d      	mov	r5, r1
    dc14:	4613      	mov	r3, r2
    dc16:	4601      	mov	r1, r0
    dc18:	462a      	mov	r2, r5
    dc1a:	4620      	mov	r0, r4
    dc1c:	f7ff ffc2 	bl	dba4 <_fwrite_r>
    dc20:	b003      	add	sp, #12
    dc22:	bd30      	pop	{r4, r5, pc}
    dc24:	1fff88f0 	.word	0x1fff88f0

0000dc28 <__libc_init_array>:
    dc28:	b570      	push	{r4, r5, r6, lr}
    dc2a:	4e0f      	ldr	r6, [pc, #60]	; (dc68 <__libc_init_array+0x40>)
    dc2c:	4d0f      	ldr	r5, [pc, #60]	; (dc6c <__libc_init_array+0x44>)
    dc2e:	1b76      	subs	r6, r6, r5
    dc30:	10b6      	asrs	r6, r6, #2
    dc32:	d007      	beq.n	dc44 <__libc_init_array+0x1c>
    dc34:	3d04      	subs	r5, #4
    dc36:	2400      	movs	r4, #0
    dc38:	3401      	adds	r4, #1
    dc3a:	f855 3f04 	ldr.w	r3, [r5, #4]!
    dc3e:	4798      	blx	r3
    dc40:	42a6      	cmp	r6, r4
    dc42:	d1f9      	bne.n	dc38 <__libc_init_array+0x10>
    dc44:	4e0a      	ldr	r6, [pc, #40]	; (dc70 <__libc_init_array+0x48>)
    dc46:	4d0b      	ldr	r5, [pc, #44]	; (dc74 <__libc_init_array+0x4c>)
    dc48:	1b76      	subs	r6, r6, r5
    dc4a:	f006 fbe3 	bl	14414 <_init>
    dc4e:	10b6      	asrs	r6, r6, #2
    dc50:	d008      	beq.n	dc64 <__libc_init_array+0x3c>
    dc52:	3d04      	subs	r5, #4
    dc54:	2400      	movs	r4, #0
    dc56:	3401      	adds	r4, #1
    dc58:	f855 3f04 	ldr.w	r3, [r5, #4]!
    dc5c:	4798      	blx	r3
    dc5e:	42a6      	cmp	r6, r4
    dc60:	d1f9      	bne.n	dc56 <__libc_init_array+0x2e>
    dc62:	bd70      	pop	{r4, r5, r6, pc}
    dc64:	bd70      	pop	{r4, r5, r6, pc}
    dc66:	bf00      	nop
    dc68:	00014420 	.word	0x00014420
    dc6c:	00014420 	.word	0x00014420
    dc70:	00014448 	.word	0x00014448
    dc74:	00014420 	.word	0x00014420

0000dc78 <malloc>:
    dc78:	4b02      	ldr	r3, [pc, #8]	; (dc84 <malloc+0xc>)
    dc7a:	4601      	mov	r1, r0
    dc7c:	6818      	ldr	r0, [r3, #0]
    dc7e:	f000 b80b 	b.w	dc98 <_malloc_r>
    dc82:	bf00      	nop
    dc84:	1fff88f0 	.word	0x1fff88f0

0000dc88 <free>:
    dc88:	4b02      	ldr	r3, [pc, #8]	; (dc94 <free+0xc>)
    dc8a:	4601      	mov	r1, r0
    dc8c:	6818      	ldr	r0, [r3, #0]
    dc8e:	f003 bda1 	b.w	117d4 <_free_r>
    dc92:	bf00      	nop
    dc94:	1fff88f0 	.word	0x1fff88f0

0000dc98 <_malloc_r>:
    dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc9c:	f101 050b 	add.w	r5, r1, #11
    dca0:	2d16      	cmp	r5, #22
    dca2:	b083      	sub	sp, #12
    dca4:	4606      	mov	r6, r0
    dca6:	d927      	bls.n	dcf8 <_malloc_r+0x60>
    dca8:	f035 0507 	bics.w	r5, r5, #7
    dcac:	d427      	bmi.n	dcfe <_malloc_r+0x66>
    dcae:	42a9      	cmp	r1, r5
    dcb0:	d825      	bhi.n	dcfe <_malloc_r+0x66>
    dcb2:	4630      	mov	r0, r6
    dcb4:	f000 fc4c 	bl	e550 <__malloc_lock>
    dcb8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    dcbc:	d226      	bcs.n	dd0c <_malloc_r+0x74>
    dcbe:	4fc1      	ldr	r7, [pc, #772]	; (dfc4 <_malloc_r+0x32c>)
    dcc0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    dcc4:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
    dcc8:	68dc      	ldr	r4, [r3, #12]
    dcca:	429c      	cmp	r4, r3
    dccc:	f000 81d2 	beq.w	e074 <_malloc_r+0x3dc>
    dcd0:	6863      	ldr	r3, [r4, #4]
    dcd2:	68e2      	ldr	r2, [r4, #12]
    dcd4:	68a1      	ldr	r1, [r4, #8]
    dcd6:	f023 0303 	bic.w	r3, r3, #3
    dcda:	4423      	add	r3, r4
    dcdc:	4630      	mov	r0, r6
    dcde:	685d      	ldr	r5, [r3, #4]
    dce0:	60ca      	str	r2, [r1, #12]
    dce2:	f045 0501 	orr.w	r5, r5, #1
    dce6:	6091      	str	r1, [r2, #8]
    dce8:	605d      	str	r5, [r3, #4]
    dcea:	f000 fc33 	bl	e554 <__malloc_unlock>
    dcee:	3408      	adds	r4, #8
    dcf0:	4620      	mov	r0, r4
    dcf2:	b003      	add	sp, #12
    dcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcf8:	2510      	movs	r5, #16
    dcfa:	42a9      	cmp	r1, r5
    dcfc:	d9d9      	bls.n	dcb2 <_malloc_r+0x1a>
    dcfe:	2400      	movs	r4, #0
    dd00:	230c      	movs	r3, #12
    dd02:	4620      	mov	r0, r4
    dd04:	6033      	str	r3, [r6, #0]
    dd06:	b003      	add	sp, #12
    dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd0c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    dd10:	f000 808a 	beq.w	de28 <_malloc_r+0x190>
    dd14:	f1bc 0f04 	cmp.w	ip, #4
    dd18:	f200 8160 	bhi.w	dfdc <_malloc_r+0x344>
    dd1c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    dd20:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    dd24:	ea4f 014c 	mov.w	r1, ip, lsl #1
    dd28:	4fa6      	ldr	r7, [pc, #664]	; (dfc4 <_malloc_r+0x32c>)
    dd2a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    dd2e:	68cc      	ldr	r4, [r1, #12]
    dd30:	42a1      	cmp	r1, r4
    dd32:	d105      	bne.n	dd40 <_malloc_r+0xa8>
    dd34:	e00c      	b.n	dd50 <_malloc_r+0xb8>
    dd36:	2b00      	cmp	r3, #0
    dd38:	da7a      	bge.n	de30 <_malloc_r+0x198>
    dd3a:	68e4      	ldr	r4, [r4, #12]
    dd3c:	42a1      	cmp	r1, r4
    dd3e:	d007      	beq.n	dd50 <_malloc_r+0xb8>
    dd40:	6862      	ldr	r2, [r4, #4]
    dd42:	f022 0203 	bic.w	r2, r2, #3
    dd46:	1b53      	subs	r3, r2, r5
    dd48:	2b0f      	cmp	r3, #15
    dd4a:	ddf4      	ble.n	dd36 <_malloc_r+0x9e>
    dd4c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    dd50:	f10c 0c01 	add.w	ip, ip, #1
    dd54:	4b9b      	ldr	r3, [pc, #620]	; (dfc4 <_malloc_r+0x32c>)
    dd56:	693c      	ldr	r4, [r7, #16]
    dd58:	f103 0e08 	add.w	lr, r3, #8
    dd5c:	4574      	cmp	r4, lr
    dd5e:	f000 817e 	beq.w	e05e <_malloc_r+0x3c6>
    dd62:	6861      	ldr	r1, [r4, #4]
    dd64:	f021 0103 	bic.w	r1, r1, #3
    dd68:	1b4a      	subs	r2, r1, r5
    dd6a:	2a0f      	cmp	r2, #15
    dd6c:	f300 8164 	bgt.w	e038 <_malloc_r+0x3a0>
    dd70:	2a00      	cmp	r2, #0
    dd72:	f8c3 e014 	str.w	lr, [r3, #20]
    dd76:	f8c3 e010 	str.w	lr, [r3, #16]
    dd7a:	da6a      	bge.n	de52 <_malloc_r+0x1ba>
    dd7c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    dd80:	f080 813a 	bcs.w	dff8 <_malloc_r+0x360>
    dd84:	08c9      	lsrs	r1, r1, #3
    dd86:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
    dd8a:	ea4f 08a1 	mov.w	r8, r1, asr #2
    dd8e:	685a      	ldr	r2, [r3, #4]
    dd90:	6881      	ldr	r1, [r0, #8]
    dd92:	60a1      	str	r1, [r4, #8]
    dd94:	f04f 0901 	mov.w	r9, #1
    dd98:	fa09 f808 	lsl.w	r8, r9, r8
    dd9c:	ea48 0202 	orr.w	r2, r8, r2
    dda0:	60e0      	str	r0, [r4, #12]
    dda2:	605a      	str	r2, [r3, #4]
    dda4:	6084      	str	r4, [r0, #8]
    dda6:	60cc      	str	r4, [r1, #12]
    dda8:	ea4f 03ac 	mov.w	r3, ip, asr #2
    ddac:	2001      	movs	r0, #1
    ddae:	4098      	lsls	r0, r3
    ddb0:	4290      	cmp	r0, r2
    ddb2:	d85b      	bhi.n	de6c <_malloc_r+0x1d4>
    ddb4:	4202      	tst	r2, r0
    ddb6:	d106      	bne.n	ddc6 <_malloc_r+0x12e>
    ddb8:	f02c 0c03 	bic.w	ip, ip, #3
    ddbc:	0040      	lsls	r0, r0, #1
    ddbe:	4202      	tst	r2, r0
    ddc0:	f10c 0c04 	add.w	ip, ip, #4
    ddc4:	d0fa      	beq.n	ddbc <_malloc_r+0x124>
    ddc6:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
    ddca:	4644      	mov	r4, r8
    ddcc:	46e1      	mov	r9, ip
    ddce:	68e3      	ldr	r3, [r4, #12]
    ddd0:	429c      	cmp	r4, r3
    ddd2:	d107      	bne.n	dde4 <_malloc_r+0x14c>
    ddd4:	e145      	b.n	e062 <_malloc_r+0x3ca>
    ddd6:	2a00      	cmp	r2, #0
    ddd8:	f280 8156 	bge.w	e088 <_malloc_r+0x3f0>
    dddc:	68db      	ldr	r3, [r3, #12]
    ddde:	429c      	cmp	r4, r3
    dde0:	f000 813f 	beq.w	e062 <_malloc_r+0x3ca>
    dde4:	6859      	ldr	r1, [r3, #4]
    dde6:	f021 0103 	bic.w	r1, r1, #3
    ddea:	1b4a      	subs	r2, r1, r5
    ddec:	2a0f      	cmp	r2, #15
    ddee:	ddf2      	ble.n	ddd6 <_malloc_r+0x13e>
    ddf0:	461c      	mov	r4, r3
    ddf2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    ddf6:	f854 8f08 	ldr.w	r8, [r4, #8]!
    ddfa:	1959      	adds	r1, r3, r5
    ddfc:	f045 0901 	orr.w	r9, r5, #1
    de00:	f042 0501 	orr.w	r5, r2, #1
    de04:	f8c3 9004 	str.w	r9, [r3, #4]
    de08:	4630      	mov	r0, r6
    de0a:	f8c8 c00c 	str.w	ip, [r8, #12]
    de0e:	f8cc 8008 	str.w	r8, [ip, #8]
    de12:	6179      	str	r1, [r7, #20]
    de14:	6139      	str	r1, [r7, #16]
    de16:	f8c1 e00c 	str.w	lr, [r1, #12]
    de1a:	f8c1 e008 	str.w	lr, [r1, #8]
    de1e:	604d      	str	r5, [r1, #4]
    de20:	508a      	str	r2, [r1, r2]
    de22:	f000 fb97 	bl	e554 <__malloc_unlock>
    de26:	e763      	b.n	dcf0 <_malloc_r+0x58>
    de28:	217e      	movs	r1, #126	; 0x7e
    de2a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    de2e:	e77b      	b.n	dd28 <_malloc_r+0x90>
    de30:	4422      	add	r2, r4
    de32:	68e3      	ldr	r3, [r4, #12]
    de34:	6850      	ldr	r0, [r2, #4]
    de36:	68a1      	ldr	r1, [r4, #8]
    de38:	f040 0501 	orr.w	r5, r0, #1
    de3c:	60cb      	str	r3, [r1, #12]
    de3e:	4630      	mov	r0, r6
    de40:	6099      	str	r1, [r3, #8]
    de42:	6055      	str	r5, [r2, #4]
    de44:	f000 fb86 	bl	e554 <__malloc_unlock>
    de48:	3408      	adds	r4, #8
    de4a:	4620      	mov	r0, r4
    de4c:	b003      	add	sp, #12
    de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de52:	4421      	add	r1, r4
    de54:	4630      	mov	r0, r6
    de56:	684b      	ldr	r3, [r1, #4]
    de58:	f043 0301 	orr.w	r3, r3, #1
    de5c:	604b      	str	r3, [r1, #4]
    de5e:	f000 fb79 	bl	e554 <__malloc_unlock>
    de62:	3408      	adds	r4, #8
    de64:	4620      	mov	r0, r4
    de66:	b003      	add	sp, #12
    de68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de6c:	68bc      	ldr	r4, [r7, #8]
    de6e:	6863      	ldr	r3, [r4, #4]
    de70:	f023 0903 	bic.w	r9, r3, #3
    de74:	45a9      	cmp	r9, r5
    de76:	d304      	bcc.n	de82 <_malloc_r+0x1ea>
    de78:	ebc5 0309 	rsb	r3, r5, r9
    de7c:	2b0f      	cmp	r3, #15
    de7e:	f300 8091 	bgt.w	dfa4 <_malloc_r+0x30c>
    de82:	4b51      	ldr	r3, [pc, #324]	; (dfc8 <_malloc_r+0x330>)
    de84:	4a51      	ldr	r2, [pc, #324]	; (dfcc <_malloc_r+0x334>)
    de86:	6819      	ldr	r1, [r3, #0]
    de88:	6813      	ldr	r3, [r2, #0]
    de8a:	3301      	adds	r3, #1
    de8c:	eb05 0a01 	add.w	sl, r5, r1
    de90:	eb04 0b09 	add.w	fp, r4, r9
    de94:	f000 8161 	beq.w	e15a <_malloc_r+0x4c2>
    de98:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    de9c:	f10a 0a0f 	add.w	sl, sl, #15
    dea0:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    dea4:	f02a 0a0f 	bic.w	sl, sl, #15
    dea8:	4630      	mov	r0, r6
    deaa:	4651      	mov	r1, sl
    deac:	9201      	str	r2, [sp, #4]
    deae:	f000 fd6d 	bl	e98c <_sbrk_r>
    deb2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    deb6:	4680      	mov	r8, r0
    deb8:	9a01      	ldr	r2, [sp, #4]
    deba:	f000 8100 	beq.w	e0be <_malloc_r+0x426>
    debe:	4583      	cmp	fp, r0
    dec0:	f200 80fa 	bhi.w	e0b8 <_malloc_r+0x420>
    dec4:	f8df c110 	ldr.w	ip, [pc, #272]	; dfd8 <_malloc_r+0x340>
    dec8:	f8dc 3000 	ldr.w	r3, [ip]
    decc:	45c3      	cmp	fp, r8
    dece:	4453      	add	r3, sl
    ded0:	f8cc 3000 	str.w	r3, [ip]
    ded4:	f000 814a 	beq.w	e16c <_malloc_r+0x4d4>
    ded8:	6812      	ldr	r2, [r2, #0]
    deda:	493c      	ldr	r1, [pc, #240]	; (dfcc <_malloc_r+0x334>)
    dedc:	3201      	adds	r2, #1
    dede:	bf1b      	ittet	ne
    dee0:	ebcb 0b08 	rsbne	fp, fp, r8
    dee4:	445b      	addne	r3, fp
    dee6:	f8c1 8000 	streq.w	r8, [r1]
    deea:	f8cc 3000 	strne.w	r3, [ip]
    deee:	f018 0307 	ands.w	r3, r8, #7
    def2:	f000 8113 	beq.w	e11c <_malloc_r+0x484>
    def6:	f1c3 0208 	rsb	r2, r3, #8
    defa:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    defe:	4490      	add	r8, r2
    df00:	3308      	adds	r3, #8
    df02:	44c2      	add	sl, r8
    df04:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    df08:	ebca 0a03 	rsb	sl, sl, r3
    df0c:	4651      	mov	r1, sl
    df0e:	4630      	mov	r0, r6
    df10:	f8cd c004 	str.w	ip, [sp, #4]
    df14:	f000 fd3a 	bl	e98c <_sbrk_r>
    df18:	1c43      	adds	r3, r0, #1
    df1a:	f8dd c004 	ldr.w	ip, [sp, #4]
    df1e:	f000 8135 	beq.w	e18c <_malloc_r+0x4f4>
    df22:	ebc8 0200 	rsb	r2, r8, r0
    df26:	4452      	add	r2, sl
    df28:	f042 0201 	orr.w	r2, r2, #1
    df2c:	f8dc 3000 	ldr.w	r3, [ip]
    df30:	f8c7 8008 	str.w	r8, [r7, #8]
    df34:	4453      	add	r3, sl
    df36:	42bc      	cmp	r4, r7
    df38:	f8c8 2004 	str.w	r2, [r8, #4]
    df3c:	f8cc 3000 	str.w	r3, [ip]
    df40:	f8df a094 	ldr.w	sl, [pc, #148]	; dfd8 <_malloc_r+0x340>
    df44:	d015      	beq.n	df72 <_malloc_r+0x2da>
    df46:	f1b9 0f0f 	cmp.w	r9, #15
    df4a:	f240 80ea 	bls.w	e122 <_malloc_r+0x48a>
    df4e:	6861      	ldr	r1, [r4, #4]
    df50:	f1a9 020c 	sub.w	r2, r9, #12
    df54:	f022 0207 	bic.w	r2, r2, #7
    df58:	f001 0e01 	and.w	lr, r1, #1
    df5c:	18a1      	adds	r1, r4, r2
    df5e:	2005      	movs	r0, #5
    df60:	ea42 0e0e 	orr.w	lr, r2, lr
    df64:	2a0f      	cmp	r2, #15
    df66:	f8c4 e004 	str.w	lr, [r4, #4]
    df6a:	6048      	str	r0, [r1, #4]
    df6c:	6088      	str	r0, [r1, #8]
    df6e:	f200 8111 	bhi.w	e194 <_malloc_r+0x4fc>
    df72:	4a17      	ldr	r2, [pc, #92]	; (dfd0 <_malloc_r+0x338>)
    df74:	68bc      	ldr	r4, [r7, #8]
    df76:	6811      	ldr	r1, [r2, #0]
    df78:	428b      	cmp	r3, r1
    df7a:	bf88      	it	hi
    df7c:	6013      	strhi	r3, [r2, #0]
    df7e:	4a15      	ldr	r2, [pc, #84]	; (dfd4 <_malloc_r+0x33c>)
    df80:	6811      	ldr	r1, [r2, #0]
    df82:	428b      	cmp	r3, r1
    df84:	bf88      	it	hi
    df86:	6013      	strhi	r3, [r2, #0]
    df88:	6862      	ldr	r2, [r4, #4]
    df8a:	f022 0203 	bic.w	r2, r2, #3
    df8e:	4295      	cmp	r5, r2
    df90:	ebc5 0302 	rsb	r3, r5, r2
    df94:	d801      	bhi.n	df9a <_malloc_r+0x302>
    df96:	2b0f      	cmp	r3, #15
    df98:	dc04      	bgt.n	dfa4 <_malloc_r+0x30c>
    df9a:	4630      	mov	r0, r6
    df9c:	f000 fada 	bl	e554 <__malloc_unlock>
    dfa0:	2400      	movs	r4, #0
    dfa2:	e6a5      	b.n	dcf0 <_malloc_r+0x58>
    dfa4:	1962      	adds	r2, r4, r5
    dfa6:	f043 0301 	orr.w	r3, r3, #1
    dfaa:	f045 0501 	orr.w	r5, r5, #1
    dfae:	6065      	str	r5, [r4, #4]
    dfb0:	4630      	mov	r0, r6
    dfb2:	60ba      	str	r2, [r7, #8]
    dfb4:	6053      	str	r3, [r2, #4]
    dfb6:	f000 facd 	bl	e554 <__malloc_unlock>
    dfba:	3408      	adds	r4, #8
    dfbc:	4620      	mov	r0, r4
    dfbe:	b003      	add	sp, #12
    dfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfc4:	1fff88f4 	.word	0x1fff88f4
    dfc8:	1fff9c54 	.word	0x1fff9c54
    dfcc:	1fff8d00 	.word	0x1fff8d00
    dfd0:	1fff9c50 	.word	0x1fff9c50
    dfd4:	1fff9c4c 	.word	0x1fff9c4c
    dfd8:	1fff9c58 	.word	0x1fff9c58
    dfdc:	f1bc 0f14 	cmp.w	ip, #20
    dfe0:	d961      	bls.n	e0a6 <_malloc_r+0x40e>
    dfe2:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    dfe6:	f200 808f 	bhi.w	e108 <_malloc_r+0x470>
    dfea:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    dfee:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    dff2:	ea4f 014c 	mov.w	r1, ip, lsl #1
    dff6:	e697      	b.n	dd28 <_malloc_r+0x90>
    dff8:	0a4b      	lsrs	r3, r1, #9
    dffa:	2b04      	cmp	r3, #4
    dffc:	d958      	bls.n	e0b0 <_malloc_r+0x418>
    dffe:	2b14      	cmp	r3, #20
    e000:	f200 80ae 	bhi.w	e160 <_malloc_r+0x4c8>
    e004:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    e008:	0050      	lsls	r0, r2, #1
    e00a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    e00e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; e1cc <_malloc_r+0x534>
    e012:	6883      	ldr	r3, [r0, #8]
    e014:	4283      	cmp	r3, r0
    e016:	f000 808a 	beq.w	e12e <_malloc_r+0x496>
    e01a:	685a      	ldr	r2, [r3, #4]
    e01c:	f022 0203 	bic.w	r2, r2, #3
    e020:	4291      	cmp	r1, r2
    e022:	d202      	bcs.n	e02a <_malloc_r+0x392>
    e024:	689b      	ldr	r3, [r3, #8]
    e026:	4298      	cmp	r0, r3
    e028:	d1f7      	bne.n	e01a <_malloc_r+0x382>
    e02a:	68d9      	ldr	r1, [r3, #12]
    e02c:	687a      	ldr	r2, [r7, #4]
    e02e:	60e1      	str	r1, [r4, #12]
    e030:	60a3      	str	r3, [r4, #8]
    e032:	608c      	str	r4, [r1, #8]
    e034:	60dc      	str	r4, [r3, #12]
    e036:	e6b7      	b.n	dda8 <_malloc_r+0x110>
    e038:	1961      	adds	r1, r4, r5
    e03a:	f042 0701 	orr.w	r7, r2, #1
    e03e:	f045 0501 	orr.w	r5, r5, #1
    e042:	6065      	str	r5, [r4, #4]
    e044:	4630      	mov	r0, r6
    e046:	6159      	str	r1, [r3, #20]
    e048:	6119      	str	r1, [r3, #16]
    e04a:	f8c1 e00c 	str.w	lr, [r1, #12]
    e04e:	f8c1 e008 	str.w	lr, [r1, #8]
    e052:	604f      	str	r7, [r1, #4]
    e054:	508a      	str	r2, [r1, r2]
    e056:	3408      	adds	r4, #8
    e058:	f000 fa7c 	bl	e554 <__malloc_unlock>
    e05c:	e648      	b.n	dcf0 <_malloc_r+0x58>
    e05e:	685a      	ldr	r2, [r3, #4]
    e060:	e6a2      	b.n	dda8 <_malloc_r+0x110>
    e062:	f109 0901 	add.w	r9, r9, #1
    e066:	f019 0f03 	tst.w	r9, #3
    e06a:	f104 0408 	add.w	r4, r4, #8
    e06e:	f47f aeae 	bne.w	ddce <_malloc_r+0x136>
    e072:	e02d      	b.n	e0d0 <_malloc_r+0x438>
    e074:	f104 0308 	add.w	r3, r4, #8
    e078:	6964      	ldr	r4, [r4, #20]
    e07a:	42a3      	cmp	r3, r4
    e07c:	bf08      	it	eq
    e07e:	f10c 0c02 	addeq.w	ip, ip, #2
    e082:	f43f ae67 	beq.w	dd54 <_malloc_r+0xbc>
    e086:	e623      	b.n	dcd0 <_malloc_r+0x38>
    e088:	4419      	add	r1, r3
    e08a:	461c      	mov	r4, r3
    e08c:	6848      	ldr	r0, [r1, #4]
    e08e:	68db      	ldr	r3, [r3, #12]
    e090:	f854 2f08 	ldr.w	r2, [r4, #8]!
    e094:	f040 0501 	orr.w	r5, r0, #1
    e098:	604d      	str	r5, [r1, #4]
    e09a:	4630      	mov	r0, r6
    e09c:	60d3      	str	r3, [r2, #12]
    e09e:	609a      	str	r2, [r3, #8]
    e0a0:	f000 fa58 	bl	e554 <__malloc_unlock>
    e0a4:	e624      	b.n	dcf0 <_malloc_r+0x58>
    e0a6:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
    e0aa:	ea4f 014c 	mov.w	r1, ip, lsl #1
    e0ae:	e63b      	b.n	dd28 <_malloc_r+0x90>
    e0b0:	098a      	lsrs	r2, r1, #6
    e0b2:	3238      	adds	r2, #56	; 0x38
    e0b4:	0050      	lsls	r0, r2, #1
    e0b6:	e7a8      	b.n	e00a <_malloc_r+0x372>
    e0b8:	42bc      	cmp	r4, r7
    e0ba:	f43f af03 	beq.w	dec4 <_malloc_r+0x22c>
    e0be:	68bc      	ldr	r4, [r7, #8]
    e0c0:	6862      	ldr	r2, [r4, #4]
    e0c2:	f022 0203 	bic.w	r2, r2, #3
    e0c6:	e762      	b.n	df8e <_malloc_r+0x2f6>
    e0c8:	f8d8 8000 	ldr.w	r8, [r8]
    e0cc:	4598      	cmp	r8, r3
    e0ce:	d17b      	bne.n	e1c8 <_malloc_r+0x530>
    e0d0:	f01c 0f03 	tst.w	ip, #3
    e0d4:	f1a8 0308 	sub.w	r3, r8, #8
    e0d8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    e0dc:	d1f4      	bne.n	e0c8 <_malloc_r+0x430>
    e0de:	687b      	ldr	r3, [r7, #4]
    e0e0:	ea23 0300 	bic.w	r3, r3, r0
    e0e4:	607b      	str	r3, [r7, #4]
    e0e6:	0040      	lsls	r0, r0, #1
    e0e8:	4298      	cmp	r0, r3
    e0ea:	f63f aebf 	bhi.w	de6c <_malloc_r+0x1d4>
    e0ee:	2800      	cmp	r0, #0
    e0f0:	f43f aebc 	beq.w	de6c <_malloc_r+0x1d4>
    e0f4:	4203      	tst	r3, r0
    e0f6:	46cc      	mov	ip, r9
    e0f8:	f47f ae65 	bne.w	ddc6 <_malloc_r+0x12e>
    e0fc:	0040      	lsls	r0, r0, #1
    e0fe:	4203      	tst	r3, r0
    e100:	f10c 0c04 	add.w	ip, ip, #4
    e104:	d0fa      	beq.n	e0fc <_malloc_r+0x464>
    e106:	e65e      	b.n	ddc6 <_malloc_r+0x12e>
    e108:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    e10c:	d81a      	bhi.n	e144 <_malloc_r+0x4ac>
    e10e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    e112:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    e116:	ea4f 014c 	mov.w	r1, ip, lsl #1
    e11a:	e605      	b.n	dd28 <_malloc_r+0x90>
    e11c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e120:	e6ef      	b.n	df02 <_malloc_r+0x26a>
    e122:	2301      	movs	r3, #1
    e124:	f8c8 3004 	str.w	r3, [r8, #4]
    e128:	4644      	mov	r4, r8
    e12a:	2200      	movs	r2, #0
    e12c:	e72f      	b.n	df8e <_malloc_r+0x2f6>
    e12e:	1091      	asrs	r1, r2, #2
    e130:	2001      	movs	r0, #1
    e132:	f8d8 2004 	ldr.w	r2, [r8, #4]
    e136:	fa00 f101 	lsl.w	r1, r0, r1
    e13a:	430a      	orrs	r2, r1
    e13c:	f8c8 2004 	str.w	r2, [r8, #4]
    e140:	4619      	mov	r1, r3
    e142:	e774      	b.n	e02e <_malloc_r+0x396>
    e144:	f240 5354 	movw	r3, #1364	; 0x554
    e148:	459c      	cmp	ip, r3
    e14a:	d81b      	bhi.n	e184 <_malloc_r+0x4ec>
    e14c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
    e150:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
    e154:	ea4f 014c 	mov.w	r1, ip, lsl #1
    e158:	e5e6      	b.n	dd28 <_malloc_r+0x90>
    e15a:	f10a 0a10 	add.w	sl, sl, #16
    e15e:	e6a3      	b.n	dea8 <_malloc_r+0x210>
    e160:	2b54      	cmp	r3, #84	; 0x54
    e162:	d81f      	bhi.n	e1a4 <_malloc_r+0x50c>
    e164:	0b0a      	lsrs	r2, r1, #12
    e166:	326e      	adds	r2, #110	; 0x6e
    e168:	0050      	lsls	r0, r2, #1
    e16a:	e74e      	b.n	e00a <_malloc_r+0x372>
    e16c:	f3cb 010b 	ubfx	r1, fp, #0, #12
    e170:	2900      	cmp	r1, #0
    e172:	f47f aeb1 	bne.w	ded8 <_malloc_r+0x240>
    e176:	eb0a 0109 	add.w	r1, sl, r9
    e17a:	68ba      	ldr	r2, [r7, #8]
    e17c:	f041 0101 	orr.w	r1, r1, #1
    e180:	6051      	str	r1, [r2, #4]
    e182:	e6f6      	b.n	df72 <_malloc_r+0x2da>
    e184:	21fc      	movs	r1, #252	; 0xfc
    e186:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    e18a:	e5cd      	b.n	dd28 <_malloc_r+0x90>
    e18c:	2201      	movs	r2, #1
    e18e:	f04f 0a00 	mov.w	sl, #0
    e192:	e6cb      	b.n	df2c <_malloc_r+0x294>
    e194:	f104 0108 	add.w	r1, r4, #8
    e198:	4630      	mov	r0, r6
    e19a:	f003 fb1b 	bl	117d4 <_free_r>
    e19e:	f8da 3000 	ldr.w	r3, [sl]
    e1a2:	e6e6      	b.n	df72 <_malloc_r+0x2da>
    e1a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    e1a8:	d803      	bhi.n	e1b2 <_malloc_r+0x51a>
    e1aa:	0bca      	lsrs	r2, r1, #15
    e1ac:	3277      	adds	r2, #119	; 0x77
    e1ae:	0050      	lsls	r0, r2, #1
    e1b0:	e72b      	b.n	e00a <_malloc_r+0x372>
    e1b2:	f240 5254 	movw	r2, #1364	; 0x554
    e1b6:	4293      	cmp	r3, r2
    e1b8:	d803      	bhi.n	e1c2 <_malloc_r+0x52a>
    e1ba:	0c8a      	lsrs	r2, r1, #18
    e1bc:	327c      	adds	r2, #124	; 0x7c
    e1be:	0050      	lsls	r0, r2, #1
    e1c0:	e723      	b.n	e00a <_malloc_r+0x372>
    e1c2:	20fc      	movs	r0, #252	; 0xfc
    e1c4:	227e      	movs	r2, #126	; 0x7e
    e1c6:	e720      	b.n	e00a <_malloc_r+0x372>
    e1c8:	687b      	ldr	r3, [r7, #4]
    e1ca:	e78c      	b.n	e0e6 <_malloc_r+0x44e>
    e1cc:	1fff88f4 	.word	0x1fff88f4

0000e1d0 <memchr>:
    e1d0:	0783      	lsls	r3, r0, #30
    e1d2:	b470      	push	{r4, r5, r6}
    e1d4:	b2c9      	uxtb	r1, r1
    e1d6:	d03f      	beq.n	e258 <memchr+0x88>
    e1d8:	1e54      	subs	r4, r2, #1
    e1da:	b32a      	cbz	r2, e228 <memchr+0x58>
    e1dc:	7803      	ldrb	r3, [r0, #0]
    e1de:	428b      	cmp	r3, r1
    e1e0:	d023      	beq.n	e22a <memchr+0x5a>
    e1e2:	1c43      	adds	r3, r0, #1
    e1e4:	e004      	b.n	e1f0 <memchr+0x20>
    e1e6:	b1fc      	cbz	r4, e228 <memchr+0x58>
    e1e8:	7804      	ldrb	r4, [r0, #0]
    e1ea:	428c      	cmp	r4, r1
    e1ec:	d01d      	beq.n	e22a <memchr+0x5a>
    e1ee:	4614      	mov	r4, r2
    e1f0:	f013 0f03 	tst.w	r3, #3
    e1f4:	4618      	mov	r0, r3
    e1f6:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
    e1fa:	f103 0301 	add.w	r3, r3, #1
    e1fe:	d1f2      	bne.n	e1e6 <memchr+0x16>
    e200:	2c03      	cmp	r4, #3
    e202:	d814      	bhi.n	e22e <memchr+0x5e>
    e204:	1e65      	subs	r5, r4, #1
    e206:	b34c      	cbz	r4, e25c <memchr+0x8c>
    e208:	7803      	ldrb	r3, [r0, #0]
    e20a:	428b      	cmp	r3, r1
    e20c:	d00d      	beq.n	e22a <memchr+0x5a>
    e20e:	1c42      	adds	r2, r0, #1
    e210:	2300      	movs	r3, #0
    e212:	e002      	b.n	e21a <memchr+0x4a>
    e214:	7804      	ldrb	r4, [r0, #0]
    e216:	428c      	cmp	r4, r1
    e218:	d007      	beq.n	e22a <memchr+0x5a>
    e21a:	42ab      	cmp	r3, r5
    e21c:	4610      	mov	r0, r2
    e21e:	f103 0301 	add.w	r3, r3, #1
    e222:	f102 0201 	add.w	r2, r2, #1
    e226:	d1f5      	bne.n	e214 <memchr+0x44>
    e228:	2000      	movs	r0, #0
    e22a:	bc70      	pop	{r4, r5, r6}
    e22c:	4770      	bx	lr
    e22e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
    e232:	4603      	mov	r3, r0
    e234:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    e238:	4618      	mov	r0, r3
    e23a:	3304      	adds	r3, #4
    e23c:	6802      	ldr	r2, [r0, #0]
    e23e:	4072      	eors	r2, r6
    e240:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
    e244:	ea25 0202 	bic.w	r2, r5, r2
    e248:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    e24c:	d1da      	bne.n	e204 <memchr+0x34>
    e24e:	3c04      	subs	r4, #4
    e250:	2c03      	cmp	r4, #3
    e252:	4618      	mov	r0, r3
    e254:	d8f0      	bhi.n	e238 <memchr+0x68>
    e256:	e7d5      	b.n	e204 <memchr+0x34>
    e258:	4614      	mov	r4, r2
    e25a:	e7d1      	b.n	e200 <memchr+0x30>
    e25c:	4620      	mov	r0, r4
    e25e:	e7e4      	b.n	e22a <memchr+0x5a>

0000e260 <memcmp>:
    e260:	2a03      	cmp	r2, #3
    e262:	b470      	push	{r4, r5, r6}
    e264:	d928      	bls.n	e2b8 <memcmp+0x58>
    e266:	ea40 0301 	orr.w	r3, r0, r1
    e26a:	079b      	lsls	r3, r3, #30
    e26c:	d013      	beq.n	e296 <memcmp+0x36>
    e26e:	7805      	ldrb	r5, [r0, #0]
    e270:	780c      	ldrb	r4, [r1, #0]
    e272:	42a5      	cmp	r5, r4
    e274:	d124      	bne.n	e2c0 <memcmp+0x60>
    e276:	3a01      	subs	r2, #1
    e278:	2300      	movs	r3, #0
    e27a:	e005      	b.n	e288 <memcmp+0x28>
    e27c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    e280:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    e284:	42a5      	cmp	r5, r4
    e286:	d11b      	bne.n	e2c0 <memcmp+0x60>
    e288:	4293      	cmp	r3, r2
    e28a:	f103 0301 	add.w	r3, r3, #1
    e28e:	d1f5      	bne.n	e27c <memcmp+0x1c>
    e290:	2000      	movs	r0, #0
    e292:	bc70      	pop	{r4, r5, r6}
    e294:	4770      	bx	lr
    e296:	460c      	mov	r4, r1
    e298:	4603      	mov	r3, r0
    e29a:	6825      	ldr	r5, [r4, #0]
    e29c:	681e      	ldr	r6, [r3, #0]
    e29e:	42ae      	cmp	r6, r5
    e2a0:	4621      	mov	r1, r4
    e2a2:	4618      	mov	r0, r3
    e2a4:	f104 0404 	add.w	r4, r4, #4
    e2a8:	f103 0304 	add.w	r3, r3, #4
    e2ac:	d104      	bne.n	e2b8 <memcmp+0x58>
    e2ae:	3a04      	subs	r2, #4
    e2b0:	2a03      	cmp	r2, #3
    e2b2:	4618      	mov	r0, r3
    e2b4:	4621      	mov	r1, r4
    e2b6:	d8f0      	bhi.n	e29a <memcmp+0x3a>
    e2b8:	2a00      	cmp	r2, #0
    e2ba:	d1d8      	bne.n	e26e <memcmp+0xe>
    e2bc:	4610      	mov	r0, r2
    e2be:	e7e8      	b.n	e292 <memcmp+0x32>
    e2c0:	1b28      	subs	r0, r5, r4
    e2c2:	bc70      	pop	{r4, r5, r6}
    e2c4:	4770      	bx	lr
    e2c6:	bf00      	nop

0000e2c8 <memcpy>:
    e2c8:	4684      	mov	ip, r0
    e2ca:	ea41 0300 	orr.w	r3, r1, r0
    e2ce:	f013 0303 	ands.w	r3, r3, #3
    e2d2:	d16d      	bne.n	e3b0 <memcpy+0xe8>
    e2d4:	3a40      	subs	r2, #64	; 0x40
    e2d6:	d341      	bcc.n	e35c <memcpy+0x94>
    e2d8:	f851 3b04 	ldr.w	r3, [r1], #4
    e2dc:	f840 3b04 	str.w	r3, [r0], #4
    e2e0:	f851 3b04 	ldr.w	r3, [r1], #4
    e2e4:	f840 3b04 	str.w	r3, [r0], #4
    e2e8:	f851 3b04 	ldr.w	r3, [r1], #4
    e2ec:	f840 3b04 	str.w	r3, [r0], #4
    e2f0:	f851 3b04 	ldr.w	r3, [r1], #4
    e2f4:	f840 3b04 	str.w	r3, [r0], #4
    e2f8:	f851 3b04 	ldr.w	r3, [r1], #4
    e2fc:	f840 3b04 	str.w	r3, [r0], #4
    e300:	f851 3b04 	ldr.w	r3, [r1], #4
    e304:	f840 3b04 	str.w	r3, [r0], #4
    e308:	f851 3b04 	ldr.w	r3, [r1], #4
    e30c:	f840 3b04 	str.w	r3, [r0], #4
    e310:	f851 3b04 	ldr.w	r3, [r1], #4
    e314:	f840 3b04 	str.w	r3, [r0], #4
    e318:	f851 3b04 	ldr.w	r3, [r1], #4
    e31c:	f840 3b04 	str.w	r3, [r0], #4
    e320:	f851 3b04 	ldr.w	r3, [r1], #4
    e324:	f840 3b04 	str.w	r3, [r0], #4
    e328:	f851 3b04 	ldr.w	r3, [r1], #4
    e32c:	f840 3b04 	str.w	r3, [r0], #4
    e330:	f851 3b04 	ldr.w	r3, [r1], #4
    e334:	f840 3b04 	str.w	r3, [r0], #4
    e338:	f851 3b04 	ldr.w	r3, [r1], #4
    e33c:	f840 3b04 	str.w	r3, [r0], #4
    e340:	f851 3b04 	ldr.w	r3, [r1], #4
    e344:	f840 3b04 	str.w	r3, [r0], #4
    e348:	f851 3b04 	ldr.w	r3, [r1], #4
    e34c:	f840 3b04 	str.w	r3, [r0], #4
    e350:	f851 3b04 	ldr.w	r3, [r1], #4
    e354:	f840 3b04 	str.w	r3, [r0], #4
    e358:	3a40      	subs	r2, #64	; 0x40
    e35a:	d2bd      	bcs.n	e2d8 <memcpy+0x10>
    e35c:	3230      	adds	r2, #48	; 0x30
    e35e:	d311      	bcc.n	e384 <memcpy+0xbc>
    e360:	f851 3b04 	ldr.w	r3, [r1], #4
    e364:	f840 3b04 	str.w	r3, [r0], #4
    e368:	f851 3b04 	ldr.w	r3, [r1], #4
    e36c:	f840 3b04 	str.w	r3, [r0], #4
    e370:	f851 3b04 	ldr.w	r3, [r1], #4
    e374:	f840 3b04 	str.w	r3, [r0], #4
    e378:	f851 3b04 	ldr.w	r3, [r1], #4
    e37c:	f840 3b04 	str.w	r3, [r0], #4
    e380:	3a10      	subs	r2, #16
    e382:	d2ed      	bcs.n	e360 <memcpy+0x98>
    e384:	320c      	adds	r2, #12
    e386:	d305      	bcc.n	e394 <memcpy+0xcc>
    e388:	f851 3b04 	ldr.w	r3, [r1], #4
    e38c:	f840 3b04 	str.w	r3, [r0], #4
    e390:	3a04      	subs	r2, #4
    e392:	d2f9      	bcs.n	e388 <memcpy+0xc0>
    e394:	3204      	adds	r2, #4
    e396:	d008      	beq.n	e3aa <memcpy+0xe2>
    e398:	07d2      	lsls	r2, r2, #31
    e39a:	bf1c      	itt	ne
    e39c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e3a0:	f800 3b01 	strbne.w	r3, [r0], #1
    e3a4:	d301      	bcc.n	e3aa <memcpy+0xe2>
    e3a6:	880b      	ldrh	r3, [r1, #0]
    e3a8:	8003      	strh	r3, [r0, #0]
    e3aa:	4660      	mov	r0, ip
    e3ac:	4770      	bx	lr
    e3ae:	bf00      	nop
    e3b0:	2a08      	cmp	r2, #8
    e3b2:	d313      	bcc.n	e3dc <memcpy+0x114>
    e3b4:	078b      	lsls	r3, r1, #30
    e3b6:	d08d      	beq.n	e2d4 <memcpy+0xc>
    e3b8:	f010 0303 	ands.w	r3, r0, #3
    e3bc:	d08a      	beq.n	e2d4 <memcpy+0xc>
    e3be:	f1c3 0304 	rsb	r3, r3, #4
    e3c2:	1ad2      	subs	r2, r2, r3
    e3c4:	07db      	lsls	r3, r3, #31
    e3c6:	bf1c      	itt	ne
    e3c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e3cc:	f800 3b01 	strbne.w	r3, [r0], #1
    e3d0:	d380      	bcc.n	e2d4 <memcpy+0xc>
    e3d2:	f831 3b02 	ldrh.w	r3, [r1], #2
    e3d6:	f820 3b02 	strh.w	r3, [r0], #2
    e3da:	e77b      	b.n	e2d4 <memcpy+0xc>
    e3dc:	3a04      	subs	r2, #4
    e3de:	d3d9      	bcc.n	e394 <memcpy+0xcc>
    e3e0:	3a01      	subs	r2, #1
    e3e2:	f811 3b01 	ldrb.w	r3, [r1], #1
    e3e6:	f800 3b01 	strb.w	r3, [r0], #1
    e3ea:	d2f9      	bcs.n	e3e0 <memcpy+0x118>
    e3ec:	780b      	ldrb	r3, [r1, #0]
    e3ee:	7003      	strb	r3, [r0, #0]
    e3f0:	784b      	ldrb	r3, [r1, #1]
    e3f2:	7043      	strb	r3, [r0, #1]
    e3f4:	788b      	ldrb	r3, [r1, #2]
    e3f6:	7083      	strb	r3, [r0, #2]
    e3f8:	4660      	mov	r0, ip
    e3fa:	4770      	bx	lr

0000e3fc <memmove>:
    e3fc:	4288      	cmp	r0, r1
    e3fe:	b4f0      	push	{r4, r5, r6, r7}
    e400:	d910      	bls.n	e424 <memmove+0x28>
    e402:	188c      	adds	r4, r1, r2
    e404:	42a0      	cmp	r0, r4
    e406:	d20d      	bcs.n	e424 <memmove+0x28>
    e408:	1885      	adds	r5, r0, r2
    e40a:	1e53      	subs	r3, r2, #1
    e40c:	b142      	cbz	r2, e420 <memmove+0x24>
    e40e:	4621      	mov	r1, r4
    e410:	462a      	mov	r2, r5
    e412:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    e416:	f802 4d01 	strb.w	r4, [r2, #-1]!
    e41a:	3b01      	subs	r3, #1
    e41c:	1c5c      	adds	r4, r3, #1
    e41e:	d1f8      	bne.n	e412 <memmove+0x16>
    e420:	bcf0      	pop	{r4, r5, r6, r7}
    e422:	4770      	bx	lr
    e424:	2a0f      	cmp	r2, #15
    e426:	d93f      	bls.n	e4a8 <memmove+0xac>
    e428:	ea40 0301 	orr.w	r3, r0, r1
    e42c:	079b      	lsls	r3, r3, #30
    e42e:	d13f      	bne.n	e4b0 <memmove+0xb4>
    e430:	f1a2 0710 	sub.w	r7, r2, #16
    e434:	093f      	lsrs	r7, r7, #4
    e436:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    e43a:	3610      	adds	r6, #16
    e43c:	460c      	mov	r4, r1
    e43e:	4603      	mov	r3, r0
    e440:	6825      	ldr	r5, [r4, #0]
    e442:	601d      	str	r5, [r3, #0]
    e444:	6865      	ldr	r5, [r4, #4]
    e446:	605d      	str	r5, [r3, #4]
    e448:	68a5      	ldr	r5, [r4, #8]
    e44a:	609d      	str	r5, [r3, #8]
    e44c:	68e5      	ldr	r5, [r4, #12]
    e44e:	60dd      	str	r5, [r3, #12]
    e450:	3310      	adds	r3, #16
    e452:	42b3      	cmp	r3, r6
    e454:	f104 0410 	add.w	r4, r4, #16
    e458:	d1f2      	bne.n	e440 <memmove+0x44>
    e45a:	1c7b      	adds	r3, r7, #1
    e45c:	f002 0c0f 	and.w	ip, r2, #15
    e460:	011b      	lsls	r3, r3, #4
    e462:	f1bc 0f03 	cmp.w	ip, #3
    e466:	4419      	add	r1, r3
    e468:	4403      	add	r3, r0
    e46a:	d923      	bls.n	e4b4 <memmove+0xb8>
    e46c:	460e      	mov	r6, r1
    e46e:	461d      	mov	r5, r3
    e470:	4664      	mov	r4, ip
    e472:	3c04      	subs	r4, #4
    e474:	f856 7b04 	ldr.w	r7, [r6], #4
    e478:	f845 7b04 	str.w	r7, [r5], #4
    e47c:	2c03      	cmp	r4, #3
    e47e:	d8f8      	bhi.n	e472 <memmove+0x76>
    e480:	f1ac 0404 	sub.w	r4, ip, #4
    e484:	f024 0403 	bic.w	r4, r4, #3
    e488:	3404      	adds	r4, #4
    e48a:	f002 0203 	and.w	r2, r2, #3
    e48e:	4423      	add	r3, r4
    e490:	4421      	add	r1, r4
    e492:	2a00      	cmp	r2, #0
    e494:	d0c4      	beq.n	e420 <memmove+0x24>
    e496:	441a      	add	r2, r3
    e498:	f811 4b01 	ldrb.w	r4, [r1], #1
    e49c:	f803 4b01 	strb.w	r4, [r3], #1
    e4a0:	4293      	cmp	r3, r2
    e4a2:	d1f9      	bne.n	e498 <memmove+0x9c>
    e4a4:	bcf0      	pop	{r4, r5, r6, r7}
    e4a6:	4770      	bx	lr
    e4a8:	4603      	mov	r3, r0
    e4aa:	2a00      	cmp	r2, #0
    e4ac:	d1f3      	bne.n	e496 <memmove+0x9a>
    e4ae:	e7b7      	b.n	e420 <memmove+0x24>
    e4b0:	4603      	mov	r3, r0
    e4b2:	e7f0      	b.n	e496 <memmove+0x9a>
    e4b4:	4662      	mov	r2, ip
    e4b6:	2a00      	cmp	r2, #0
    e4b8:	d1ed      	bne.n	e496 <memmove+0x9a>
    e4ba:	e7b1      	b.n	e420 <memmove+0x24>

0000e4bc <memset>:
    e4bc:	b4f0      	push	{r4, r5, r6, r7}
    e4be:	0784      	lsls	r4, r0, #30
    e4c0:	d043      	beq.n	e54a <memset+0x8e>
    e4c2:	1e54      	subs	r4, r2, #1
    e4c4:	2a00      	cmp	r2, #0
    e4c6:	d03e      	beq.n	e546 <memset+0x8a>
    e4c8:	b2cd      	uxtb	r5, r1
    e4ca:	4603      	mov	r3, r0
    e4cc:	e003      	b.n	e4d6 <memset+0x1a>
    e4ce:	1e62      	subs	r2, r4, #1
    e4d0:	2c00      	cmp	r4, #0
    e4d2:	d038      	beq.n	e546 <memset+0x8a>
    e4d4:	4614      	mov	r4, r2
    e4d6:	f803 5b01 	strb.w	r5, [r3], #1
    e4da:	079a      	lsls	r2, r3, #30
    e4dc:	d1f7      	bne.n	e4ce <memset+0x12>
    e4de:	2c03      	cmp	r4, #3
    e4e0:	d92a      	bls.n	e538 <memset+0x7c>
    e4e2:	b2cd      	uxtb	r5, r1
    e4e4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e4e8:	2c0f      	cmp	r4, #15
    e4ea:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e4ee:	d915      	bls.n	e51c <memset+0x60>
    e4f0:	f1a4 0710 	sub.w	r7, r4, #16
    e4f4:	093f      	lsrs	r7, r7, #4
    e4f6:	f103 0610 	add.w	r6, r3, #16
    e4fa:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    e4fe:	461a      	mov	r2, r3
    e500:	6015      	str	r5, [r2, #0]
    e502:	6055      	str	r5, [r2, #4]
    e504:	6095      	str	r5, [r2, #8]
    e506:	60d5      	str	r5, [r2, #12]
    e508:	3210      	adds	r2, #16
    e50a:	42b2      	cmp	r2, r6
    e50c:	d1f8      	bne.n	e500 <memset+0x44>
    e50e:	f004 040f 	and.w	r4, r4, #15
    e512:	3701      	adds	r7, #1
    e514:	2c03      	cmp	r4, #3
    e516:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    e51a:	d90d      	bls.n	e538 <memset+0x7c>
    e51c:	461e      	mov	r6, r3
    e51e:	4622      	mov	r2, r4
    e520:	3a04      	subs	r2, #4
    e522:	2a03      	cmp	r2, #3
    e524:	f846 5b04 	str.w	r5, [r6], #4
    e528:	d8fa      	bhi.n	e520 <memset+0x64>
    e52a:	1f22      	subs	r2, r4, #4
    e52c:	f022 0203 	bic.w	r2, r2, #3
    e530:	3204      	adds	r2, #4
    e532:	4413      	add	r3, r2
    e534:	f004 0403 	and.w	r4, r4, #3
    e538:	b12c      	cbz	r4, e546 <memset+0x8a>
    e53a:	b2c9      	uxtb	r1, r1
    e53c:	441c      	add	r4, r3
    e53e:	f803 1b01 	strb.w	r1, [r3], #1
    e542:	42a3      	cmp	r3, r4
    e544:	d1fb      	bne.n	e53e <memset+0x82>
    e546:	bcf0      	pop	{r4, r5, r6, r7}
    e548:	4770      	bx	lr
    e54a:	4614      	mov	r4, r2
    e54c:	4603      	mov	r3, r0
    e54e:	e7c6      	b.n	e4de <memset+0x22>

0000e550 <__malloc_lock>:
    e550:	4770      	bx	lr
    e552:	bf00      	nop

0000e554 <__malloc_unlock>:
    e554:	4770      	bx	lr
    e556:	bf00      	nop

0000e558 <_putc_r>:
    e558:	b570      	push	{r4, r5, r6, lr}
    e55a:	460d      	mov	r5, r1
    e55c:	4614      	mov	r4, r2
    e55e:	4606      	mov	r6, r0
    e560:	b108      	cbz	r0, e566 <_putc_r+0xe>
    e562:	6b83      	ldr	r3, [r0, #56]	; 0x38
    e564:	b1d3      	cbz	r3, e59c <_putc_r+0x44>
    e566:	68a3      	ldr	r3, [r4, #8]
    e568:	3b01      	subs	r3, #1
    e56a:	2b00      	cmp	r3, #0
    e56c:	60a3      	str	r3, [r4, #8]
    e56e:	db06      	blt.n	e57e <_putc_r+0x26>
    e570:	6823      	ldr	r3, [r4, #0]
    e572:	701d      	strb	r5, [r3, #0]
    e574:	6823      	ldr	r3, [r4, #0]
    e576:	1c5a      	adds	r2, r3, #1
    e578:	6022      	str	r2, [r4, #0]
    e57a:	7818      	ldrb	r0, [r3, #0]
    e57c:	bd70      	pop	{r4, r5, r6, pc}
    e57e:	69a2      	ldr	r2, [r4, #24]
    e580:	4293      	cmp	r3, r2
    e582:	db0e      	blt.n	e5a2 <_putc_r+0x4a>
    e584:	6823      	ldr	r3, [r4, #0]
    e586:	701d      	strb	r5, [r3, #0]
    e588:	6823      	ldr	r3, [r4, #0]
    e58a:	7819      	ldrb	r1, [r3, #0]
    e58c:	290a      	cmp	r1, #10
    e58e:	d1f2      	bne.n	e576 <_putc_r+0x1e>
    e590:	4630      	mov	r0, r6
    e592:	4622      	mov	r2, r4
    e594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e598:	f001 be90 	b.w	102bc <__swbuf_r>
    e59c:	f003 f836 	bl	1160c <__sinit>
    e5a0:	e7e1      	b.n	e566 <_putc_r+0xe>
    e5a2:	4630      	mov	r0, r6
    e5a4:	4629      	mov	r1, r5
    e5a6:	4622      	mov	r2, r4
    e5a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e5ac:	f001 be86 	b.w	102bc <__swbuf_r>

0000e5b0 <realloc>:
    e5b0:	4b02      	ldr	r3, [pc, #8]	; (e5bc <realloc+0xc>)
    e5b2:	460a      	mov	r2, r1
    e5b4:	4601      	mov	r1, r0
    e5b6:	6818      	ldr	r0, [r3, #0]
    e5b8:	f000 b802 	b.w	e5c0 <_realloc_r>
    e5bc:	1fff88f0 	.word	0x1fff88f0

0000e5c0 <_realloc_r>:
    e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5c4:	460c      	mov	r4, r1
    e5c6:	b083      	sub	sp, #12
    e5c8:	4690      	mov	r8, r2
    e5ca:	4681      	mov	r9, r0
    e5cc:	2900      	cmp	r1, #0
    e5ce:	f000 80e2 	beq.w	e796 <_realloc_r+0x1d6>
    e5d2:	f7ff ffbd 	bl	e550 <__malloc_lock>
    e5d6:	f108 060b 	add.w	r6, r8, #11
    e5da:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e5de:	2e16      	cmp	r6, #22
    e5e0:	f023 0503 	bic.w	r5, r3, #3
    e5e4:	f1a4 0708 	sub.w	r7, r4, #8
    e5e8:	d84b      	bhi.n	e682 <_realloc_r+0xc2>
    e5ea:	2110      	movs	r1, #16
    e5ec:	460e      	mov	r6, r1
    e5ee:	45b0      	cmp	r8, r6
    e5f0:	d84c      	bhi.n	e68c <_realloc_r+0xcc>
    e5f2:	428d      	cmp	r5, r1
    e5f4:	da78      	bge.n	e6e8 <_realloc_r+0x128>
    e5f6:	f8df b390 	ldr.w	fp, [pc, #912]	; e988 <_realloc_r+0x3c8>
    e5fa:	f8db e008 	ldr.w	lr, [fp, #8]
    e5fe:	1978      	adds	r0, r7, r5
    e600:	4586      	cmp	lr, r0
    e602:	f000 80ce 	beq.w	e7a2 <_realloc_r+0x1e2>
    e606:	6842      	ldr	r2, [r0, #4]
    e608:	f022 0c01 	bic.w	ip, r2, #1
    e60c:	4484      	add	ip, r0
    e60e:	f8dc c004 	ldr.w	ip, [ip, #4]
    e612:	f01c 0f01 	tst.w	ip, #1
    e616:	d07a      	beq.n	e70e <_realloc_r+0x14e>
    e618:	2200      	movs	r2, #0
    e61a:	4610      	mov	r0, r2
    e61c:	07db      	lsls	r3, r3, #31
    e61e:	f100 8092 	bmi.w	e746 <_realloc_r+0x186>
    e622:	f854 3c08 	ldr.w	r3, [r4, #-8]
    e626:	ebc3 0a07 	rsb	sl, r3, r7
    e62a:	f8da 3004 	ldr.w	r3, [sl, #4]
    e62e:	f023 0303 	bic.w	r3, r3, #3
    e632:	442b      	add	r3, r5
    e634:	b388      	cbz	r0, e69a <_realloc_r+0xda>
    e636:	4570      	cmp	r0, lr
    e638:	f000 80ed 	beq.w	e816 <_realloc_r+0x256>
    e63c:	eb02 0e03 	add.w	lr, r2, r3
    e640:	458e      	cmp	lr, r1
    e642:	db2a      	blt.n	e69a <_realloc_r+0xda>
    e644:	68c3      	ldr	r3, [r0, #12]
    e646:	6882      	ldr	r2, [r0, #8]
    e648:	4657      	mov	r7, sl
    e64a:	60d3      	str	r3, [r2, #12]
    e64c:	609a      	str	r2, [r3, #8]
    e64e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    e652:	f8da 300c 	ldr.w	r3, [sl, #12]
    e656:	60cb      	str	r3, [r1, #12]
    e658:	1f2a      	subs	r2, r5, #4
    e65a:	2a24      	cmp	r2, #36	; 0x24
    e65c:	6099      	str	r1, [r3, #8]
    e65e:	f200 8126 	bhi.w	e8ae <_realloc_r+0x2ee>
    e662:	2a13      	cmp	r2, #19
    e664:	f240 80b3 	bls.w	e7ce <_realloc_r+0x20e>
    e668:	6823      	ldr	r3, [r4, #0]
    e66a:	f8ca 3008 	str.w	r3, [sl, #8]
    e66e:	6863      	ldr	r3, [r4, #4]
    e670:	f8ca 300c 	str.w	r3, [sl, #12]
    e674:	2a1b      	cmp	r2, #27
    e676:	f200 8130 	bhi.w	e8da <_realloc_r+0x31a>
    e67a:	3408      	adds	r4, #8
    e67c:	f10a 0310 	add.w	r3, sl, #16
    e680:	e0a6      	b.n	e7d0 <_realloc_r+0x210>
    e682:	f026 0607 	bic.w	r6, r6, #7
    e686:	2e00      	cmp	r6, #0
    e688:	4631      	mov	r1, r6
    e68a:	dab0      	bge.n	e5ee <_realloc_r+0x2e>
    e68c:	230c      	movs	r3, #12
    e68e:	2000      	movs	r0, #0
    e690:	f8c9 3000 	str.w	r3, [r9]
    e694:	b003      	add	sp, #12
    e696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e69a:	428b      	cmp	r3, r1
    e69c:	db53      	blt.n	e746 <_realloc_r+0x186>
    e69e:	4657      	mov	r7, sl
    e6a0:	f8da 100c 	ldr.w	r1, [sl, #12]
    e6a4:	f857 0f08 	ldr.w	r0, [r7, #8]!
    e6a8:	1f2a      	subs	r2, r5, #4
    e6aa:	2a24      	cmp	r2, #36	; 0x24
    e6ac:	60c1      	str	r1, [r0, #12]
    e6ae:	6088      	str	r0, [r1, #8]
    e6b0:	f200 8109 	bhi.w	e8c6 <_realloc_r+0x306>
    e6b4:	2a13      	cmp	r2, #19
    e6b6:	f240 8104 	bls.w	e8c2 <_realloc_r+0x302>
    e6ba:	6821      	ldr	r1, [r4, #0]
    e6bc:	f8ca 1008 	str.w	r1, [sl, #8]
    e6c0:	6861      	ldr	r1, [r4, #4]
    e6c2:	f8ca 100c 	str.w	r1, [sl, #12]
    e6c6:	2a1b      	cmp	r2, #27
    e6c8:	f200 811c 	bhi.w	e904 <_realloc_r+0x344>
    e6cc:	3408      	adds	r4, #8
    e6ce:	f10a 0210 	add.w	r2, sl, #16
    e6d2:	6821      	ldr	r1, [r4, #0]
    e6d4:	6011      	str	r1, [r2, #0]
    e6d6:	6861      	ldr	r1, [r4, #4]
    e6d8:	6051      	str	r1, [r2, #4]
    e6da:	68a1      	ldr	r1, [r4, #8]
    e6dc:	6091      	str	r1, [r2, #8]
    e6de:	461d      	mov	r5, r3
    e6e0:	f8da 3004 	ldr.w	r3, [sl, #4]
    e6e4:	463c      	mov	r4, r7
    e6e6:	4657      	mov	r7, sl
    e6e8:	1baa      	subs	r2, r5, r6
    e6ea:	2a0f      	cmp	r2, #15
    e6ec:	f003 0301 	and.w	r3, r3, #1
    e6f0:	d819      	bhi.n	e726 <_realloc_r+0x166>
    e6f2:	432b      	orrs	r3, r5
    e6f4:	443d      	add	r5, r7
    e6f6:	607b      	str	r3, [r7, #4]
    e6f8:	686b      	ldr	r3, [r5, #4]
    e6fa:	f043 0301 	orr.w	r3, r3, #1
    e6fe:	606b      	str	r3, [r5, #4]
    e700:	4648      	mov	r0, r9
    e702:	f7ff ff27 	bl	e554 <__malloc_unlock>
    e706:	4620      	mov	r0, r4
    e708:	b003      	add	sp, #12
    e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e70e:	f022 0203 	bic.w	r2, r2, #3
    e712:	eb02 0c05 	add.w	ip, r2, r5
    e716:	458c      	cmp	ip, r1
    e718:	db80      	blt.n	e61c <_realloc_r+0x5c>
    e71a:	68c2      	ldr	r2, [r0, #12]
    e71c:	6881      	ldr	r1, [r0, #8]
    e71e:	4665      	mov	r5, ip
    e720:	60ca      	str	r2, [r1, #12]
    e722:	6091      	str	r1, [r2, #8]
    e724:	e7e0      	b.n	e6e8 <_realloc_r+0x128>
    e726:	19b9      	adds	r1, r7, r6
    e728:	f042 0001 	orr.w	r0, r2, #1
    e72c:	431e      	orrs	r6, r3
    e72e:	440a      	add	r2, r1
    e730:	607e      	str	r6, [r7, #4]
    e732:	6048      	str	r0, [r1, #4]
    e734:	6853      	ldr	r3, [r2, #4]
    e736:	f043 0301 	orr.w	r3, r3, #1
    e73a:	3108      	adds	r1, #8
    e73c:	6053      	str	r3, [r2, #4]
    e73e:	4648      	mov	r0, r9
    e740:	f003 f848 	bl	117d4 <_free_r>
    e744:	e7dc      	b.n	e700 <_realloc_r+0x140>
    e746:	4641      	mov	r1, r8
    e748:	4648      	mov	r0, r9
    e74a:	f7ff faa5 	bl	dc98 <_malloc_r>
    e74e:	4680      	mov	r8, r0
    e750:	b1d0      	cbz	r0, e788 <_realloc_r+0x1c8>
    e752:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e756:	f023 0201 	bic.w	r2, r3, #1
    e75a:	443a      	add	r2, r7
    e75c:	f1a0 0108 	sub.w	r1, r0, #8
    e760:	4291      	cmp	r1, r2
    e762:	f000 809e 	beq.w	e8a2 <_realloc_r+0x2e2>
    e766:	1f2a      	subs	r2, r5, #4
    e768:	2a24      	cmp	r2, #36	; 0x24
    e76a:	d850      	bhi.n	e80e <_realloc_r+0x24e>
    e76c:	2a13      	cmp	r2, #19
    e76e:	d823      	bhi.n	e7b8 <_realloc_r+0x1f8>
    e770:	4603      	mov	r3, r0
    e772:	4622      	mov	r2, r4
    e774:	6811      	ldr	r1, [r2, #0]
    e776:	6019      	str	r1, [r3, #0]
    e778:	6851      	ldr	r1, [r2, #4]
    e77a:	6059      	str	r1, [r3, #4]
    e77c:	6892      	ldr	r2, [r2, #8]
    e77e:	609a      	str	r2, [r3, #8]
    e780:	4621      	mov	r1, r4
    e782:	4648      	mov	r0, r9
    e784:	f003 f826 	bl	117d4 <_free_r>
    e788:	4648      	mov	r0, r9
    e78a:	f7ff fee3 	bl	e554 <__malloc_unlock>
    e78e:	4640      	mov	r0, r8
    e790:	b003      	add	sp, #12
    e792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e796:	4611      	mov	r1, r2
    e798:	b003      	add	sp, #12
    e79a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e79e:	f7ff ba7b 	b.w	dc98 <_malloc_r>
    e7a2:	f8de 2004 	ldr.w	r2, [lr, #4]
    e7a6:	f022 0203 	bic.w	r2, r2, #3
    e7aa:	1950      	adds	r0, r2, r5
    e7ac:	f106 0c10 	add.w	ip, r6, #16
    e7b0:	4560      	cmp	r0, ip
    e7b2:	da19      	bge.n	e7e8 <_realloc_r+0x228>
    e7b4:	4670      	mov	r0, lr
    e7b6:	e731      	b.n	e61c <_realloc_r+0x5c>
    e7b8:	6823      	ldr	r3, [r4, #0]
    e7ba:	6003      	str	r3, [r0, #0]
    e7bc:	6863      	ldr	r3, [r4, #4]
    e7be:	6043      	str	r3, [r0, #4]
    e7c0:	2a1b      	cmp	r2, #27
    e7c2:	d863      	bhi.n	e88c <_realloc_r+0x2cc>
    e7c4:	f100 0308 	add.w	r3, r0, #8
    e7c8:	f104 0208 	add.w	r2, r4, #8
    e7cc:	e7d2      	b.n	e774 <_realloc_r+0x1b4>
    e7ce:	463b      	mov	r3, r7
    e7d0:	6822      	ldr	r2, [r4, #0]
    e7d2:	601a      	str	r2, [r3, #0]
    e7d4:	6862      	ldr	r2, [r4, #4]
    e7d6:	605a      	str	r2, [r3, #4]
    e7d8:	68a2      	ldr	r2, [r4, #8]
    e7da:	609a      	str	r2, [r3, #8]
    e7dc:	463c      	mov	r4, r7
    e7de:	4675      	mov	r5, lr
    e7e0:	f8da 3004 	ldr.w	r3, [sl, #4]
    e7e4:	4657      	mov	r7, sl
    e7e6:	e77f      	b.n	e6e8 <_realloc_r+0x128>
    e7e8:	4437      	add	r7, r6
    e7ea:	1b83      	subs	r3, r0, r6
    e7ec:	f043 0301 	orr.w	r3, r3, #1
    e7f0:	f8cb 7008 	str.w	r7, [fp, #8]
    e7f4:	607b      	str	r3, [r7, #4]
    e7f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e7fa:	f003 0301 	and.w	r3, r3, #1
    e7fe:	431e      	orrs	r6, r3
    e800:	4648      	mov	r0, r9
    e802:	f844 6c04 	str.w	r6, [r4, #-4]
    e806:	f7ff fea5 	bl	e554 <__malloc_unlock>
    e80a:	4620      	mov	r0, r4
    e80c:	e77c      	b.n	e708 <_realloc_r+0x148>
    e80e:	4621      	mov	r1, r4
    e810:	f7ff fdf4 	bl	e3fc <memmove>
    e814:	e7b4      	b.n	e780 <_realloc_r+0x1c0>
    e816:	eb02 0c03 	add.w	ip, r2, r3
    e81a:	f106 0210 	add.w	r2, r6, #16
    e81e:	4594      	cmp	ip, r2
    e820:	f6ff af3b 	blt.w	e69a <_realloc_r+0xda>
    e824:	4657      	mov	r7, sl
    e826:	f8da 300c 	ldr.w	r3, [sl, #12]
    e82a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    e82e:	1f2a      	subs	r2, r5, #4
    e830:	2a24      	cmp	r2, #36	; 0x24
    e832:	60cb      	str	r3, [r1, #12]
    e834:	6099      	str	r1, [r3, #8]
    e836:	f200 8087 	bhi.w	e948 <_realloc_r+0x388>
    e83a:	2a13      	cmp	r2, #19
    e83c:	d978      	bls.n	e930 <_realloc_r+0x370>
    e83e:	6823      	ldr	r3, [r4, #0]
    e840:	f8ca 3008 	str.w	r3, [sl, #8]
    e844:	6863      	ldr	r3, [r4, #4]
    e846:	f8ca 300c 	str.w	r3, [sl, #12]
    e84a:	2a1b      	cmp	r2, #27
    e84c:	f200 8085 	bhi.w	e95a <_realloc_r+0x39a>
    e850:	3408      	adds	r4, #8
    e852:	f10a 0310 	add.w	r3, sl, #16
    e856:	6822      	ldr	r2, [r4, #0]
    e858:	601a      	str	r2, [r3, #0]
    e85a:	6862      	ldr	r2, [r4, #4]
    e85c:	605a      	str	r2, [r3, #4]
    e85e:	68a2      	ldr	r2, [r4, #8]
    e860:	609a      	str	r2, [r3, #8]
    e862:	eb0a 0306 	add.w	r3, sl, r6
    e866:	ebc6 020c 	rsb	r2, r6, ip
    e86a:	f042 0201 	orr.w	r2, r2, #1
    e86e:	f8cb 3008 	str.w	r3, [fp, #8]
    e872:	605a      	str	r2, [r3, #4]
    e874:	f8da 3004 	ldr.w	r3, [sl, #4]
    e878:	f003 0301 	and.w	r3, r3, #1
    e87c:	431e      	orrs	r6, r3
    e87e:	4648      	mov	r0, r9
    e880:	f8ca 6004 	str.w	r6, [sl, #4]
    e884:	f7ff fe66 	bl	e554 <__malloc_unlock>
    e888:	4638      	mov	r0, r7
    e88a:	e73d      	b.n	e708 <_realloc_r+0x148>
    e88c:	68a3      	ldr	r3, [r4, #8]
    e88e:	6083      	str	r3, [r0, #8]
    e890:	68e3      	ldr	r3, [r4, #12]
    e892:	60c3      	str	r3, [r0, #12]
    e894:	2a24      	cmp	r2, #36	; 0x24
    e896:	d02c      	beq.n	e8f2 <_realloc_r+0x332>
    e898:	f100 0310 	add.w	r3, r0, #16
    e89c:	f104 0210 	add.w	r2, r4, #16
    e8a0:	e768      	b.n	e774 <_realloc_r+0x1b4>
    e8a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e8a6:	f022 0203 	bic.w	r2, r2, #3
    e8aa:	4415      	add	r5, r2
    e8ac:	e71c      	b.n	e6e8 <_realloc_r+0x128>
    e8ae:	4621      	mov	r1, r4
    e8b0:	4638      	mov	r0, r7
    e8b2:	4675      	mov	r5, lr
    e8b4:	463c      	mov	r4, r7
    e8b6:	f7ff fda1 	bl	e3fc <memmove>
    e8ba:	4657      	mov	r7, sl
    e8bc:	f8da 3004 	ldr.w	r3, [sl, #4]
    e8c0:	e712      	b.n	e6e8 <_realloc_r+0x128>
    e8c2:	463a      	mov	r2, r7
    e8c4:	e705      	b.n	e6d2 <_realloc_r+0x112>
    e8c6:	4621      	mov	r1, r4
    e8c8:	4638      	mov	r0, r7
    e8ca:	461d      	mov	r5, r3
    e8cc:	463c      	mov	r4, r7
    e8ce:	f7ff fd95 	bl	e3fc <memmove>
    e8d2:	4657      	mov	r7, sl
    e8d4:	f8da 3004 	ldr.w	r3, [sl, #4]
    e8d8:	e706      	b.n	e6e8 <_realloc_r+0x128>
    e8da:	68a3      	ldr	r3, [r4, #8]
    e8dc:	f8ca 3010 	str.w	r3, [sl, #16]
    e8e0:	68e3      	ldr	r3, [r4, #12]
    e8e2:	f8ca 3014 	str.w	r3, [sl, #20]
    e8e6:	2a24      	cmp	r2, #36	; 0x24
    e8e8:	d018      	beq.n	e91c <_realloc_r+0x35c>
    e8ea:	3410      	adds	r4, #16
    e8ec:	f10a 0318 	add.w	r3, sl, #24
    e8f0:	e76e      	b.n	e7d0 <_realloc_r+0x210>
    e8f2:	6923      	ldr	r3, [r4, #16]
    e8f4:	6103      	str	r3, [r0, #16]
    e8f6:	6963      	ldr	r3, [r4, #20]
    e8f8:	6143      	str	r3, [r0, #20]
    e8fa:	f104 0218 	add.w	r2, r4, #24
    e8fe:	f100 0318 	add.w	r3, r0, #24
    e902:	e737      	b.n	e774 <_realloc_r+0x1b4>
    e904:	68a1      	ldr	r1, [r4, #8]
    e906:	f8ca 1010 	str.w	r1, [sl, #16]
    e90a:	68e1      	ldr	r1, [r4, #12]
    e90c:	f8ca 1014 	str.w	r1, [sl, #20]
    e910:	2a24      	cmp	r2, #36	; 0x24
    e912:	d00f      	beq.n	e934 <_realloc_r+0x374>
    e914:	3410      	adds	r4, #16
    e916:	f10a 0218 	add.w	r2, sl, #24
    e91a:	e6da      	b.n	e6d2 <_realloc_r+0x112>
    e91c:	6923      	ldr	r3, [r4, #16]
    e91e:	f8ca 3018 	str.w	r3, [sl, #24]
    e922:	6963      	ldr	r3, [r4, #20]
    e924:	f8ca 301c 	str.w	r3, [sl, #28]
    e928:	3418      	adds	r4, #24
    e92a:	f10a 0320 	add.w	r3, sl, #32
    e92e:	e74f      	b.n	e7d0 <_realloc_r+0x210>
    e930:	463b      	mov	r3, r7
    e932:	e790      	b.n	e856 <_realloc_r+0x296>
    e934:	6922      	ldr	r2, [r4, #16]
    e936:	f8ca 2018 	str.w	r2, [sl, #24]
    e93a:	6962      	ldr	r2, [r4, #20]
    e93c:	f8ca 201c 	str.w	r2, [sl, #28]
    e940:	3418      	adds	r4, #24
    e942:	f10a 0220 	add.w	r2, sl, #32
    e946:	e6c4      	b.n	e6d2 <_realloc_r+0x112>
    e948:	4621      	mov	r1, r4
    e94a:	4638      	mov	r0, r7
    e94c:	f8cd c004 	str.w	ip, [sp, #4]
    e950:	f7ff fd54 	bl	e3fc <memmove>
    e954:	f8dd c004 	ldr.w	ip, [sp, #4]
    e958:	e783      	b.n	e862 <_realloc_r+0x2a2>
    e95a:	68a3      	ldr	r3, [r4, #8]
    e95c:	f8ca 3010 	str.w	r3, [sl, #16]
    e960:	68e3      	ldr	r3, [r4, #12]
    e962:	f8ca 3014 	str.w	r3, [sl, #20]
    e966:	2a24      	cmp	r2, #36	; 0x24
    e968:	d003      	beq.n	e972 <_realloc_r+0x3b2>
    e96a:	3410      	adds	r4, #16
    e96c:	f10a 0318 	add.w	r3, sl, #24
    e970:	e771      	b.n	e856 <_realloc_r+0x296>
    e972:	6923      	ldr	r3, [r4, #16]
    e974:	f8ca 3018 	str.w	r3, [sl, #24]
    e978:	6963      	ldr	r3, [r4, #20]
    e97a:	f8ca 301c 	str.w	r3, [sl, #28]
    e97e:	3418      	adds	r4, #24
    e980:	f10a 0320 	add.w	r3, sl, #32
    e984:	e767      	b.n	e856 <_realloc_r+0x296>
    e986:	bf00      	nop
    e988:	1fff88f4 	.word	0x1fff88f4

0000e98c <_sbrk_r>:
    e98c:	b538      	push	{r3, r4, r5, lr}
    e98e:	4c07      	ldr	r4, [pc, #28]	; (e9ac <_sbrk_r+0x20>)
    e990:	2300      	movs	r3, #0
    e992:	4605      	mov	r5, r0
    e994:	4608      	mov	r0, r1
    e996:	6023      	str	r3, [r4, #0]
    e998:	f7f3 ff12 	bl	27c0 <_sbrk>
    e99c:	1c43      	adds	r3, r0, #1
    e99e:	d000      	beq.n	e9a2 <_sbrk_r+0x16>
    e9a0:	bd38      	pop	{r3, r4, r5, pc}
    e9a2:	6823      	ldr	r3, [r4, #0]
    e9a4:	2b00      	cmp	r3, #0
    e9a6:	d0fb      	beq.n	e9a0 <_sbrk_r+0x14>
    e9a8:	602b      	str	r3, [r5, #0]
    e9aa:	bd38      	pop	{r3, r4, r5, pc}
    e9ac:	1fff9c90 	.word	0x1fff9c90

0000e9b0 <_raise_r>:
    e9b0:	291f      	cmp	r1, #31
    e9b2:	b538      	push	{r3, r4, r5, lr}
    e9b4:	460c      	mov	r4, r1
    e9b6:	4605      	mov	r5, r0
    e9b8:	d820      	bhi.n	e9fc <_raise_r+0x4c>
    e9ba:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
    e9be:	b19a      	cbz	r2, e9e8 <_raise_r+0x38>
    e9c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    e9c4:	b183      	cbz	r3, e9e8 <_raise_r+0x38>
    e9c6:	2b01      	cmp	r3, #1
    e9c8:	d00c      	beq.n	e9e4 <_raise_r+0x34>
    e9ca:	1c59      	adds	r1, r3, #1
    e9cc:	d006      	beq.n	e9dc <_raise_r+0x2c>
    e9ce:	2500      	movs	r5, #0
    e9d0:	4620      	mov	r0, r4
    e9d2:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    e9d6:	4798      	blx	r3
    e9d8:	4628      	mov	r0, r5
    e9da:	bd38      	pop	{r3, r4, r5, pc}
    e9dc:	2316      	movs	r3, #22
    e9de:	6003      	str	r3, [r0, #0]
    e9e0:	2001      	movs	r0, #1
    e9e2:	bd38      	pop	{r3, r4, r5, pc}
    e9e4:	2000      	movs	r0, #0
    e9e6:	bd38      	pop	{r3, r4, r5, pc}
    e9e8:	4628      	mov	r0, r5
    e9ea:	f000 f829 	bl	ea40 <_getpid_r>
    e9ee:	4622      	mov	r2, r4
    e9f0:	4601      	mov	r1, r0
    e9f2:	4628      	mov	r0, r5
    e9f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e9f8:	f000 b80e 	b.w	ea18 <_kill_r>
    e9fc:	2316      	movs	r3, #22
    e9fe:	6003      	str	r3, [r0, #0]
    ea00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ea04:	bd38      	pop	{r3, r4, r5, pc}
    ea06:	bf00      	nop

0000ea08 <raise>:
    ea08:	4b02      	ldr	r3, [pc, #8]	; (ea14 <raise+0xc>)
    ea0a:	4601      	mov	r1, r0
    ea0c:	6818      	ldr	r0, [r3, #0]
    ea0e:	f7ff bfcf 	b.w	e9b0 <_raise_r>
    ea12:	bf00      	nop
    ea14:	1fff88f0 	.word	0x1fff88f0

0000ea18 <_kill_r>:
    ea18:	b538      	push	{r3, r4, r5, lr}
    ea1a:	4c08      	ldr	r4, [pc, #32]	; (ea3c <_kill_r+0x24>)
    ea1c:	2300      	movs	r3, #0
    ea1e:	4605      	mov	r5, r0
    ea20:	4608      	mov	r0, r1
    ea22:	4611      	mov	r1, r2
    ea24:	6023      	str	r3, [r4, #0]
    ea26:	f7f3 fed3 	bl	27d0 <_kill>
    ea2a:	1c43      	adds	r3, r0, #1
    ea2c:	d000      	beq.n	ea30 <_kill_r+0x18>
    ea2e:	bd38      	pop	{r3, r4, r5, pc}
    ea30:	6823      	ldr	r3, [r4, #0]
    ea32:	2b00      	cmp	r3, #0
    ea34:	d0fb      	beq.n	ea2e <_kill_r+0x16>
    ea36:	602b      	str	r3, [r5, #0]
    ea38:	bd38      	pop	{r3, r4, r5, pc}
    ea3a:	bf00      	nop
    ea3c:	1fff9c90 	.word	0x1fff9c90

0000ea40 <_getpid_r>:
    ea40:	f7f3 bec8 	b.w	27d4 <_getpid>

0000ea44 <sprintf>:
    ea44:	b40e      	push	{r1, r2, r3}
    ea46:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea48:	b09c      	sub	sp, #112	; 0x70
    ea4a:	ab21      	add	r3, sp, #132	; 0x84
    ea4c:	490f      	ldr	r1, [pc, #60]	; (ea8c <sprintf+0x48>)
    ea4e:	f853 2b04 	ldr.w	r2, [r3], #4
    ea52:	9301      	str	r3, [sp, #4]
    ea54:	4605      	mov	r5, r0
    ea56:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ea5a:	6808      	ldr	r0, [r1, #0]
    ea5c:	9502      	str	r5, [sp, #8]
    ea5e:	f44f 7702 	mov.w	r7, #520	; 0x208
    ea62:	f64f 76ff 	movw	r6, #65535	; 0xffff
    ea66:	a902      	add	r1, sp, #8
    ea68:	9506      	str	r5, [sp, #24]
    ea6a:	f8ad 7014 	strh.w	r7, [sp, #20]
    ea6e:	9404      	str	r4, [sp, #16]
    ea70:	9407      	str	r4, [sp, #28]
    ea72:	f8ad 6016 	strh.w	r6, [sp, #22]
    ea76:	f000 f973 	bl	ed60 <_svfprintf_r>
    ea7a:	9b02      	ldr	r3, [sp, #8]
    ea7c:	2200      	movs	r2, #0
    ea7e:	701a      	strb	r2, [r3, #0]
    ea80:	b01c      	add	sp, #112	; 0x70
    ea82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ea86:	b003      	add	sp, #12
    ea88:	4770      	bx	lr
    ea8a:	bf00      	nop
    ea8c:	1fff88f0 	.word	0x1fff88f0

0000ea90 <strcmp>:
    ea90:	ea40 0c01 	orr.w	ip, r0, r1
    ea94:	f01c 0f07 	tst.w	ip, #7
    ea98:	d123      	bne.n	eae2 <strcmp+0x52>
    ea9a:	f1bd 0d10 	subs.w	sp, sp, #16
    ea9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
    eaa2:	e9cd 6700 	strd	r6, r7, [sp]
    eaa6:	f06f 0600 	mvn.w	r6, #0
    eaaa:	f04f 0700 	mov.w	r7, #0
    eaae:	bf00      	nop
    eab0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    eab4:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    eab8:	42a2      	cmp	r2, r4
    eaba:	fa82 fc46 	uadd8	ip, r2, r6
    eabe:	faa7 fc86 	sel	ip, r7, r6
    eac2:	bf08      	it	eq
    eac4:	f1bc 0f00 	cmpeq.w	ip, #0
    eac8:	f040 80d7 	bne.w	ec7a <strcmp+0x1ea>
    eacc:	42ab      	cmp	r3, r5
    eace:	fa83 fc46 	uadd8	ip, r3, r6
    ead2:	faa7 fc86 	sel	ip, r7, r6
    ead6:	bf08      	it	eq
    ead8:	f1bc 0f00 	cmpeq.w	ip, #0
    eadc:	f040 80ca 	bne.w	ec74 <strcmp+0x1e4>
    eae0:	e7e6      	b.n	eab0 <strcmp+0x20>
    eae2:	f010 0c03 	ands.w	ip, r0, #3
    eae6:	d021      	beq.n	eb2c <strcmp+0x9c>
    eae8:	f020 0003 	bic.w	r0, r0, #3
    eaec:	f850 2b04 	ldr.w	r2, [r0], #4
    eaf0:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
    eaf4:	d008      	beq.n	eb08 <strcmp+0x78>
    eaf6:	d20f      	bcs.n	eb18 <strcmp+0x88>
    eaf8:	f811 cb01 	ldrb.w	ip, [r1], #1
    eafc:	fa5f f392 	uxtb.w	r3, r2, ror #8
    eb00:	ebb3 0c0c 	subs.w	ip, r3, ip
    eb04:	d110      	bne.n	eb28 <strcmp+0x98>
    eb06:	b17b      	cbz	r3, eb28 <strcmp+0x98>
    eb08:	f811 cb01 	ldrb.w	ip, [r1], #1
    eb0c:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
    eb10:	ebb3 0c0c 	subs.w	ip, r3, ip
    eb14:	d108      	bne.n	eb28 <strcmp+0x98>
    eb16:	b13b      	cbz	r3, eb28 <strcmp+0x98>
    eb18:	f811 cb01 	ldrb.w	ip, [r1], #1
    eb1c:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
    eb20:	ebb3 0c0c 	subs.w	ip, r3, ip
    eb24:	d100      	bne.n	eb28 <strcmp+0x98>
    eb26:	b90b      	cbnz	r3, eb2c <strcmp+0x9c>
    eb28:	4660      	mov	r0, ip
    eb2a:	4770      	bx	lr
    eb2c:	f1bd 0d10 	subs.w	sp, sp, #16
    eb30:	e9cd 4502 	strd	r4, r5, [sp, #8]
    eb34:	e9cd 6700 	strd	r6, r7, [sp]
    eb38:	f06f 0600 	mvn.w	r6, #0
    eb3c:	f04f 0700 	mov.w	r7, #0
    eb40:	f011 0c03 	ands.w	ip, r1, #3
    eb44:	d12d      	bne.n	eba2 <strcmp+0x112>
    eb46:	f010 0f04 	tst.w	r0, #4
    eb4a:	d00d      	beq.n	eb68 <strcmp+0xd8>
    eb4c:	f850 2b04 	ldr.w	r2, [r0], #4
    eb50:	f851 4b04 	ldr.w	r4, [r1], #4
    eb54:	42a2      	cmp	r2, r4
    eb56:	fa82 fc46 	uadd8	ip, r2, r6
    eb5a:	faa7 fc86 	sel	ip, r7, r6
    eb5e:	bf08      	it	eq
    eb60:	f1bc 0f00 	cmpeq.w	ip, #0
    eb64:	f040 8089 	bne.w	ec7a <strcmp+0x1ea>
    eb68:	f011 0f04 	tst.w	r1, #4
    eb6c:	d09f      	beq.n	eaae <strcmp+0x1e>
    eb6e:	f851 5b04 	ldr.w	r5, [r1], #4
    eb72:	bf00      	nop
    eb74:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    eb78:	42aa      	cmp	r2, r5
    eb7a:	fa82 fc46 	uadd8	ip, r2, r6
    eb7e:	faa7 fc86 	sel	ip, r7, r6
    eb82:	bf08      	it	eq
    eb84:	f1bc 0f00 	cmpeq.w	ip, #0
    eb88:	d171      	bne.n	ec6e <strcmp+0x1de>
    eb8a:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    eb8e:	42a3      	cmp	r3, r4
    eb90:	fa83 fc46 	uadd8	ip, r3, r6
    eb94:	faa7 fc86 	sel	ip, r7, r6
    eb98:	bf08      	it	eq
    eb9a:	f1bc 0f00 	cmpeq.w	ip, #0
    eb9e:	d163      	bne.n	ec68 <strcmp+0x1d8>
    eba0:	e7e8      	b.n	eb74 <strcmp+0xe4>
    eba2:	f021 0103 	bic.w	r1, r1, #3
    eba6:	f1bc 0f02 	cmp.w	ip, #2
    ebaa:	d01e      	beq.n	ebea <strcmp+0x15a>
    ebac:	da3b      	bge.n	ec26 <strcmp+0x196>
    ebae:	f851 5b04 	ldr.w	r5, [r1], #4
    ebb2:	bf00      	nop
    ebb4:	f850 3b04 	ldr.w	r3, [r0], #4
    ebb8:	ea4f 2515 	mov.w	r5, r5, lsr #8
    ebbc:	fa83 fc46 	uadd8	ip, r3, r6
    ebc0:	faa7 fc86 	sel	ip, r7, r6
    ebc4:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
    ebc8:	ea03 2216 	and.w	r2, r3, r6, lsr #8
    ebcc:	bf08      	it	eq
    ebce:	42aa      	cmpeq	r2, r5
    ebd0:	d14d      	bne.n	ec6e <strcmp+0x1de>
    ebd2:	f851 5b04 	ldr.w	r5, [r1], #4
    ebd6:	f1bc 0f00 	cmp.w	ip, #0
    ebda:	ea82 0303 	eor.w	r3, r2, r3
    ebde:	ea4f 6205 	mov.w	r2, r5, lsl #24
    ebe2:	bf08      	it	eq
    ebe4:	4293      	cmpeq	r3, r2
    ebe6:	d13c      	bne.n	ec62 <strcmp+0x1d2>
    ebe8:	e7e4      	b.n	ebb4 <strcmp+0x124>
    ebea:	f851 5b04 	ldr.w	r5, [r1], #4
    ebee:	bf00      	nop
    ebf0:	f850 3b04 	ldr.w	r3, [r0], #4
    ebf4:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ebf8:	fa83 fc46 	uadd8	ip, r3, r6
    ebfc:	faa7 fc86 	sel	ip, r7, r6
    ec00:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
    ec04:	ea03 4216 	and.w	r2, r3, r6, lsr #16
    ec08:	bf08      	it	eq
    ec0a:	42aa      	cmpeq	r2, r5
    ec0c:	d12f      	bne.n	ec6e <strcmp+0x1de>
    ec0e:	f851 5b04 	ldr.w	r5, [r1], #4
    ec12:	f1bc 0f00 	cmp.w	ip, #0
    ec16:	ea82 0303 	eor.w	r3, r2, r3
    ec1a:	ea4f 4205 	mov.w	r2, r5, lsl #16
    ec1e:	bf08      	it	eq
    ec20:	4293      	cmpeq	r3, r2
    ec22:	d11e      	bne.n	ec62 <strcmp+0x1d2>
    ec24:	e7e4      	b.n	ebf0 <strcmp+0x160>
    ec26:	f851 5b04 	ldr.w	r5, [r1], #4
    ec2a:	bf00      	nop
    ec2c:	f850 3b04 	ldr.w	r3, [r0], #4
    ec30:	ea4f 6515 	mov.w	r5, r5, lsr #24
    ec34:	fa83 fc46 	uadd8	ip, r3, r6
    ec38:	faa7 fc86 	sel	ip, r7, r6
    ec3c:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
    ec40:	ea03 6216 	and.w	r2, r3, r6, lsr #24
    ec44:	bf08      	it	eq
    ec46:	42aa      	cmpeq	r2, r5
    ec48:	d111      	bne.n	ec6e <strcmp+0x1de>
    ec4a:	f851 5b04 	ldr.w	r5, [r1], #4
    ec4e:	f1bc 0f00 	cmp.w	ip, #0
    ec52:	ea82 0303 	eor.w	r3, r2, r3
    ec56:	ea4f 2205 	mov.w	r2, r5, lsl #8
    ec5a:	bf08      	it	eq
    ec5c:	4293      	cmpeq	r3, r2
    ec5e:	d100      	bne.n	ec62 <strcmp+0x1d2>
    ec60:	e7e4      	b.n	ec2c <strcmp+0x19c>
    ec62:	ba19      	rev	r1, r3
    ec64:	ba12      	rev	r2, r2
    ec66:	e00a      	b.n	ec7e <strcmp+0x1ee>
    ec68:	ba19      	rev	r1, r3
    ec6a:	ba22      	rev	r2, r4
    ec6c:	e007      	b.n	ec7e <strcmp+0x1ee>
    ec6e:	ba11      	rev	r1, r2
    ec70:	ba2a      	rev	r2, r5
    ec72:	e004      	b.n	ec7e <strcmp+0x1ee>
    ec74:	ba19      	rev	r1, r3
    ec76:	ba2a      	rev	r2, r5
    ec78:	e001      	b.n	ec7e <strcmp+0x1ee>
    ec7a:	ba11      	rev	r1, r2
    ec7c:	ba22      	rev	r2, r4
    ec7e:	fa9c f08c 	rev.w	r0, ip
    ec82:	e9dd 6700 	ldrd	r6, r7, [sp]
    ec86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    ec8a:	f11d 0d10 	adds.w	sp, sp, #16
    ec8e:	b138      	cbz	r0, eca0 <strcmp+0x210>
    ec90:	fab0 f080 	clz	r0, r0
    ec94:	f1c0 0018 	rsb	r0, r0, #24
    ec98:	fa21 f100 	lsr.w	r1, r1, r0
    ec9c:	fa22 f200 	lsr.w	r2, r2, r0
    eca0:	2001      	movs	r0, #1
    eca2:	4291      	cmp	r1, r2
    eca4:	bf98      	it	ls
    eca6:	4180      	sbcls	r0, r0
    eca8:	4770      	bx	lr
    ecaa:	bf00      	nop

0000ecac <strncmp>:
    ecac:	b430      	push	{r4, r5}
    ecae:	2a00      	cmp	r2, #0
    ecb0:	d04a      	beq.n	ed48 <strncmp+0x9c>
    ecb2:	ea40 0301 	orr.w	r3, r0, r1
    ecb6:	f013 0303 	ands.w	r3, r3, #3
    ecba:	d12d      	bne.n	ed18 <strncmp+0x6c>
    ecbc:	2a03      	cmp	r2, #3
    ecbe:	d92b      	bls.n	ed18 <strncmp+0x6c>
    ecc0:	6804      	ldr	r4, [r0, #0]
    ecc2:	680d      	ldr	r5, [r1, #0]
    ecc4:	42ac      	cmp	r4, r5
    ecc6:	d127      	bne.n	ed18 <strncmp+0x6c>
    ecc8:	3a04      	subs	r2, #4
    ecca:	d03d      	beq.n	ed48 <strncmp+0x9c>
    eccc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
    ecd0:	ea25 0404 	bic.w	r4, r5, r4
    ecd4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    ecd8:	d13c      	bne.n	ed54 <strncmp+0xa8>
    ecda:	460c      	mov	r4, r1
    ecdc:	4603      	mov	r3, r0
    ecde:	e00e      	b.n	ecfe <strncmp+0x52>
    ece0:	685b      	ldr	r3, [r3, #4]
    ece2:	6864      	ldr	r4, [r4, #4]
    ece4:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
    ece8:	42a3      	cmp	r3, r4
    ecea:	ea25 0503 	bic.w	r5, r5, r3
    ecee:	d113      	bne.n	ed18 <strncmp+0x6c>
    ecf0:	3a04      	subs	r2, #4
    ecf2:	d029      	beq.n	ed48 <strncmp+0x9c>
    ecf4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    ecf8:	d129      	bne.n	ed4e <strncmp+0xa2>
    ecfa:	4603      	mov	r3, r0
    ecfc:	460c      	mov	r4, r1
    ecfe:	2a03      	cmp	r2, #3
    ed00:	f100 0004 	add.w	r0, r0, #4
    ed04:	f101 0104 	add.w	r1, r1, #4
    ed08:	d8ea      	bhi.n	ece0 <strncmp+0x34>
    ed0a:	1e55      	subs	r5, r2, #1
    ed0c:	b92a      	cbnz	r2, ed1a <strncmp+0x6e>
    ed0e:	7918      	ldrb	r0, [r3, #4]
    ed10:	7922      	ldrb	r2, [r4, #4]
    ed12:	1a80      	subs	r0, r0, r2
    ed14:	bc30      	pop	{r4, r5}
    ed16:	4770      	bx	lr
    ed18:	1e55      	subs	r5, r2, #1
    ed1a:	7803      	ldrb	r3, [r0, #0]
    ed1c:	780a      	ldrb	r2, [r1, #0]
    ed1e:	4293      	cmp	r3, r2
    ed20:	d11a      	bne.n	ed58 <strncmp+0xac>
    ed22:	b1dd      	cbz	r5, ed5c <strncmp+0xb0>
    ed24:	b1b3      	cbz	r3, ed54 <strncmp+0xa8>
    ed26:	1c6c      	adds	r4, r5, #1
    ed28:	440c      	add	r4, r1
    ed2a:	1c8b      	adds	r3, r1, #2
    ed2c:	4601      	mov	r1, r0
    ed2e:	e004      	b.n	ed3a <strncmp+0x8e>
    ed30:	42a3      	cmp	r3, r4
    ed32:	d00c      	beq.n	ed4e <strncmp+0xa2>
    ed34:	3301      	adds	r3, #1
    ed36:	2800      	cmp	r0, #0
    ed38:	d0ec      	beq.n	ed14 <strncmp+0x68>
    ed3a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ed3e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    ed42:	4290      	cmp	r0, r2
    ed44:	d0f4      	beq.n	ed30 <strncmp+0x84>
    ed46:	e7e4      	b.n	ed12 <strncmp+0x66>
    ed48:	4610      	mov	r0, r2
    ed4a:	bc30      	pop	{r4, r5}
    ed4c:	4770      	bx	lr
    ed4e:	2000      	movs	r0, #0
    ed50:	bc30      	pop	{r4, r5}
    ed52:	4770      	bx	lr
    ed54:	4618      	mov	r0, r3
    ed56:	e7dd      	b.n	ed14 <strncmp+0x68>
    ed58:	4618      	mov	r0, r3
    ed5a:	e7da      	b.n	ed12 <strncmp+0x66>
    ed5c:	4628      	mov	r0, r5
    ed5e:	e7d9      	b.n	ed14 <strncmp+0x68>

0000ed60 <_svfprintf_r>:
    ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed64:	b0c9      	sub	sp, #292	; 0x124
    ed66:	4691      	mov	r9, r2
    ed68:	9310      	str	r3, [sp, #64]	; 0x40
    ed6a:	910c      	str	r1, [sp, #48]	; 0x30
    ed6c:	900d      	str	r0, [sp, #52]	; 0x34
    ed6e:	f002 fe25 	bl	119bc <_localeconv_r>
    ed72:	6800      	ldr	r0, [r0, #0]
    ed74:	9015      	str	r0, [sp, #84]	; 0x54
    ed76:	f7f3 fd2f 	bl	27d8 <strlen>
    ed7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ed7c:	9018      	str	r0, [sp, #96]	; 0x60
    ed7e:	89a3      	ldrh	r3, [r4, #12]
    ed80:	061a      	lsls	r2, r3, #24
    ed82:	d503      	bpl.n	ed8c <_svfprintf_r+0x2c>
    ed84:	6923      	ldr	r3, [r4, #16]
    ed86:	2b00      	cmp	r3, #0
    ed88:	f001 808d 	beq.w	fea6 <_svfprintf_r+0x1146>
    ed8c:	ac38      	add	r4, sp, #224	; 0xe0
    ed8e:	46a4      	mov	ip, r4
    ed90:	9408      	str	r4, [sp, #32]
    ed92:	942b      	str	r4, [sp, #172]	; 0xac
    ed94:	2500      	movs	r5, #0
    ed96:	2400      	movs	r4, #0
    ed98:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    ed9c:	2300      	movs	r3, #0
    ed9e:	9311      	str	r3, [sp, #68]	; 0x44
    eda0:	932d      	str	r3, [sp, #180]	; 0xb4
    eda2:	932c      	str	r3, [sp, #176]	; 0xb0
    eda4:	931a      	str	r3, [sp, #104]	; 0x68
    eda6:	9319      	str	r3, [sp, #100]	; 0x64
    eda8:	930e      	str	r3, [sp, #56]	; 0x38
    edaa:	4666      	mov	r6, ip
    edac:	f899 3000 	ldrb.w	r3, [r9]
    edb0:	2b00      	cmp	r3, #0
    edb2:	f000 80f8 	beq.w	efa6 <_svfprintf_r+0x246>
    edb6:	2b25      	cmp	r3, #37	; 0x25
    edb8:	f000 80f5 	beq.w	efa6 <_svfprintf_r+0x246>
    edbc:	f109 0201 	add.w	r2, r9, #1
    edc0:	e001      	b.n	edc6 <_svfprintf_r+0x66>
    edc2:	2b25      	cmp	r3, #37	; 0x25
    edc4:	d004      	beq.n	edd0 <_svfprintf_r+0x70>
    edc6:	4614      	mov	r4, r2
    edc8:	3201      	adds	r2, #1
    edca:	7823      	ldrb	r3, [r4, #0]
    edcc:	2b00      	cmp	r3, #0
    edce:	d1f8      	bne.n	edc2 <_svfprintf_r+0x62>
    edd0:	ebc9 0504 	rsb	r5, r9, r4
    edd4:	b17d      	cbz	r5, edf6 <_svfprintf_r+0x96>
    edd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    edd8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    edda:	f8c6 9000 	str.w	r9, [r6]
    edde:	3301      	adds	r3, #1
    ede0:	442a      	add	r2, r5
    ede2:	2b07      	cmp	r3, #7
    ede4:	6075      	str	r5, [r6, #4]
    ede6:	922d      	str	r2, [sp, #180]	; 0xb4
    ede8:	932c      	str	r3, [sp, #176]	; 0xb0
    edea:	f300 80c2 	bgt.w	ef72 <_svfprintf_r+0x212>
    edee:	3608      	adds	r6, #8
    edf0:	980e      	ldr	r0, [sp, #56]	; 0x38
    edf2:	4428      	add	r0, r5
    edf4:	900e      	str	r0, [sp, #56]	; 0x38
    edf6:	7823      	ldrb	r3, [r4, #0]
    edf8:	2b00      	cmp	r3, #0
    edfa:	f000 80c2 	beq.w	ef82 <_svfprintf_r+0x222>
    edfe:	2300      	movs	r3, #0
    ee00:	f894 8001 	ldrb.w	r8, [r4, #1]
    ee04:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    ee08:	461a      	mov	r2, r3
    ee0a:	930f      	str	r3, [sp, #60]	; 0x3c
    ee0c:	9309      	str	r3, [sp, #36]	; 0x24
    ee0e:	f104 0901 	add.w	r9, r4, #1
    ee12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ee16:	940a      	str	r4, [sp, #40]	; 0x28
    ee18:	f109 0901 	add.w	r9, r9, #1
    ee1c:	f1a8 0320 	sub.w	r3, r8, #32
    ee20:	2b58      	cmp	r3, #88	; 0x58
    ee22:	f200 83c7 	bhi.w	f5b4 <_svfprintf_r+0x854>
    ee26:	e8df f013 	tbh	[pc, r3, lsl #1]
    ee2a:	026a      	.short	0x026a
    ee2c:	03c503c5 	.word	0x03c503c5
    ee30:	03c50271 	.word	0x03c50271
    ee34:	03c503c5 	.word	0x03c503c5
    ee38:	03c503c5 	.word	0x03c503c5
    ee3c:	031403c5 	.word	0x031403c5
    ee40:	03c50364 	.word	0x03c50364
    ee44:	00c0009d 	.word	0x00c0009d
    ee48:	027803c5 	.word	0x027803c5
    ee4c:	027f027f 	.word	0x027f027f
    ee50:	027f027f 	.word	0x027f027f
    ee54:	027f027f 	.word	0x027f027f
    ee58:	027f027f 	.word	0x027f027f
    ee5c:	03c5027f 	.word	0x03c5027f
    ee60:	03c503c5 	.word	0x03c503c5
    ee64:	03c503c5 	.word	0x03c503c5
    ee68:	03c503c5 	.word	0x03c503c5
    ee6c:	03c503c5 	.word	0x03c503c5
    ee70:	029003c5 	.word	0x029003c5
    ee74:	03c5036f 	.word	0x03c5036f
    ee78:	03c5036f 	.word	0x03c5036f
    ee7c:	03c503c5 	.word	0x03c503c5
    ee80:	036803c5 	.word	0x036803c5
    ee84:	03c503c5 	.word	0x03c503c5
    ee88:	03c50078 	.word	0x03c50078
    ee8c:	03c503c5 	.word	0x03c503c5
    ee90:	03c503c5 	.word	0x03c503c5
    ee94:	03c50059 	.word	0x03c50059
    ee98:	02af03c5 	.word	0x02af03c5
    ee9c:	03c503c5 	.word	0x03c503c5
    eea0:	03c503c5 	.word	0x03c503c5
    eea4:	03c503c5 	.word	0x03c503c5
    eea8:	03c503c5 	.word	0x03c503c5
    eeac:	03c503c5 	.word	0x03c503c5
    eeb0:	03480337 	.word	0x03480337
    eeb4:	036f036f 	.word	0x036f036f
    eeb8:	02ff036f 	.word	0x02ff036f
    eebc:	03c50348 	.word	0x03c50348
    eec0:	030803c5 	.word	0x030803c5
    eec4:	02c503c5 	.word	0x02c503c5
    eec8:	0321007c 	.word	0x0321007c
    eecc:	03c503a5 	.word	0x03c503a5
    eed0:	03c502d9 	.word	0x03c502d9
    eed4:	03c5005f 	.word	0x03c5005f
    eed8:	00de03c5 	.word	0x00de03c5
    eedc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    eee0:	f04c 0c10 	orr.w	ip, ip, #16
    eee4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    eee8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    eeea:	06a2      	lsls	r2, r4, #26
    eeec:	f100 8356 	bmi.w	f59c <_svfprintf_r+0x83c>
    eef0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    eef2:	06e3      	lsls	r3, r4, #27
    eef4:	f100 85e0 	bmi.w	fab8 <_svfprintf_r+0xd58>
    eef8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    eefc:	f01c 0f40 	tst.w	ip, #64	; 0x40
    ef00:	f000 85da 	beq.w	fab8 <_svfprintf_r+0xd58>
    ef04:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    ef08:	f8bc 4000 	ldrh.w	r4, [ip]
    ef0c:	f10c 0c04 	add.w	ip, ip, #4
    ef10:	2500      	movs	r5, #0
    ef12:	2301      	movs	r3, #1
    ef14:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    ef18:	e08c      	b.n	f034 <_svfprintf_r+0x2d4>
    ef1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ef1c:	f045 0510 	orr.w	r5, r5, #16
    ef20:	9509      	str	r5, [sp, #36]	; 0x24
    ef22:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ef26:	f01c 0320 	ands.w	r3, ip, #32
    ef2a:	f040 832c 	bne.w	f586 <_svfprintf_r+0x826>
    ef2e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ef32:	f01c 0210 	ands.w	r2, ip, #16
    ef36:	f040 85b8 	bne.w	faaa <_svfprintf_r+0xd4a>
    ef3a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ef3e:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
    ef42:	f000 85b2 	beq.w	faaa <_svfprintf_r+0xd4a>
    ef46:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    ef4a:	f8bc 4000 	ldrh.w	r4, [ip]
    ef4e:	f10c 0c04 	add.w	ip, ip, #4
    ef52:	4613      	mov	r3, r2
    ef54:	2500      	movs	r5, #0
    ef56:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    ef5a:	e06b      	b.n	f034 <_svfprintf_r+0x2d4>
    ef5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    ef5e:	9310      	str	r3, [sp, #64]	; 0x40
    ef60:	4264      	negs	r4, r4
    ef62:	940f      	str	r4, [sp, #60]	; 0x3c
    ef64:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ef66:	f045 0504 	orr.w	r5, r5, #4
    ef6a:	9509      	str	r5, [sp, #36]	; 0x24
    ef6c:	f899 8000 	ldrb.w	r8, [r9]
    ef70:	e752      	b.n	ee18 <_svfprintf_r+0xb8>
    ef72:	980d      	ldr	r0, [sp, #52]	; 0x34
    ef74:	990c      	ldr	r1, [sp, #48]	; 0x30
    ef76:	aa2b      	add	r2, sp, #172	; 0xac
    ef78:	f003 f8e0 	bl	1213c <__ssprint_r>
    ef7c:	b940      	cbnz	r0, ef90 <_svfprintf_r+0x230>
    ef7e:	ae38      	add	r6, sp, #224	; 0xe0
    ef80:	e736      	b.n	edf0 <_svfprintf_r+0x90>
    ef82:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ef84:	b123      	cbz	r3, ef90 <_svfprintf_r+0x230>
    ef86:	980d      	ldr	r0, [sp, #52]	; 0x34
    ef88:	990c      	ldr	r1, [sp, #48]	; 0x30
    ef8a:	aa2b      	add	r2, sp, #172	; 0xac
    ef8c:	f003 f8d6 	bl	1213c <__ssprint_r>
    ef90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ef92:	980e      	ldr	r0, [sp, #56]	; 0x38
    ef94:	89a3      	ldrh	r3, [r4, #12]
    ef96:	f013 0f40 	tst.w	r3, #64	; 0x40
    ef9a:	bf18      	it	ne
    ef9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    efa0:	b049      	add	sp, #292	; 0x124
    efa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efa6:	464c      	mov	r4, r9
    efa8:	e725      	b.n	edf6 <_svfprintf_r+0x96>
    efaa:	f899 8000 	ldrb.w	r8, [r9]
    efae:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
    efb2:	f109 0001 	add.w	r0, r9, #1
    efb6:	f001 8118 	beq.w	101ea <_svfprintf_r+0x148a>
    efba:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    efbe:	2b09      	cmp	r3, #9
    efc0:	bf98      	it	ls
    efc2:	2100      	movls	r1, #0
    efc4:	f201 8077 	bhi.w	100b6 <_svfprintf_r+0x1356>
    efc8:	f810 8b01 	ldrb.w	r8, [r0], #1
    efcc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    efd0:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    efd4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    efd8:	2b09      	cmp	r3, #9
    efda:	d9f5      	bls.n	efc8 <_svfprintf_r+0x268>
    efdc:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    efe0:	910a      	str	r1, [sp, #40]	; 0x28
    efe2:	4681      	mov	r9, r0
    efe4:	e71a      	b.n	ee1c <_svfprintf_r+0xbc>
    efe6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    efe8:	4ca1      	ldr	r4, [pc, #644]	; (f270 <_svfprintf_r+0x510>)
    efea:	941a      	str	r4, [sp, #104]	; 0x68
    efec:	06af      	lsls	r7, r5, #26
    efee:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    eff2:	f140 81d1 	bpl.w	f398 <_svfprintf_r+0x638>
    eff6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    effa:	f10c 0307 	add.w	r3, ip, #7
    effe:	f023 0307 	bic.w	r3, r3, #7
    f002:	f103 0408 	add.w	r4, r3, #8
    f006:	9410      	str	r4, [sp, #64]	; 0x40
    f008:	e9d3 4500 	ldrd	r4, r5, [r3]
    f00c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f010:	f01c 0f01 	tst.w	ip, #1
    f014:	f000 8464 	beq.w	f8e0 <_svfprintf_r+0xb80>
    f018:	ea54 0005 	orrs.w	r0, r4, r5
    f01c:	f000 8460 	beq.w	f8e0 <_svfprintf_r+0xb80>
    f020:	2330      	movs	r3, #48	; 0x30
    f022:	f04c 0c02 	orr.w	ip, ip, #2
    f026:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    f02a:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
    f02e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f032:	2302      	movs	r3, #2
    f034:	f04f 0a00 	mov.w	sl, #0
    f038:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    f03c:	990a      	ldr	r1, [sp, #40]	; 0x28
    f03e:	2900      	cmp	r1, #0
    f040:	db05      	blt.n	f04e <_svfprintf_r+0x2ee>
    f042:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f046:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
    f04a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f04e:	ea54 0005 	orrs.w	r0, r4, r5
    f052:	f040 82c7 	bne.w	f5e4 <_svfprintf_r+0x884>
    f056:	990a      	ldr	r1, [sp, #40]	; 0x28
    f058:	2900      	cmp	r1, #0
    f05a:	f040 82c3 	bne.w	f5e4 <_svfprintf_r+0x884>
    f05e:	2b00      	cmp	r3, #0
    f060:	f040 843a 	bne.w	f8d8 <_svfprintf_r+0xb78>
    f064:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f068:	f01c 0f01 	tst.w	ip, #1
    f06c:	f000 8434 	beq.w	f8d8 <_svfprintf_r+0xb78>
    f070:	af48      	add	r7, sp, #288	; 0x120
    f072:	2330      	movs	r3, #48	; 0x30
    f074:	f807 3d41 	strb.w	r3, [r7, #-65]!
    f078:	9d08      	ldr	r5, [sp, #32]
    f07a:	1bec      	subs	r4, r5, r7
    f07c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    f080:	2500      	movs	r5, #0
    f082:	4564      	cmp	r4, ip
    f084:	bfa8      	it	ge
    f086:	46a4      	movge	ip, r4
    f088:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    f08c:	9514      	str	r5, [sp, #80]	; 0x50
    f08e:	f1ba 0f00 	cmp.w	sl, #0
    f092:	d002      	beq.n	f09a <_svfprintf_r+0x33a>
    f094:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    f096:	3501      	adds	r5, #1
    f098:	950b      	str	r5, [sp, #44]	; 0x2c
    f09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f09c:	f013 0302 	ands.w	r3, r3, #2
    f0a0:	9312      	str	r3, [sp, #72]	; 0x48
    f0a2:	d002      	beq.n	f0aa <_svfprintf_r+0x34a>
    f0a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    f0a6:	3502      	adds	r5, #2
    f0a8:	950b      	str	r5, [sp, #44]	; 0x2c
    f0aa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f0ae:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
    f0b2:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    f0b6:	f040 8292 	bne.w	f5de <_svfprintf_r+0x87e>
    f0ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f0bc:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    f0c0:	ebcc 0b05 	rsb	fp, ip, r5
    f0c4:	f1bb 0f00 	cmp.w	fp, #0
    f0c8:	f340 8289 	ble.w	f5de <_svfprintf_r+0x87e>
    f0cc:	f1bb 0f10 	cmp.w	fp, #16
    f0d0:	992d      	ldr	r1, [sp, #180]	; 0xb4
    f0d2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    f0d4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; f278 <_svfprintf_r+0x518>
    f0d8:	dd2c      	ble.n	f134 <_svfprintf_r+0x3d4>
    f0da:	971b      	str	r7, [sp, #108]	; 0x6c
    f0dc:	4630      	mov	r0, r6
    f0de:	4657      	mov	r7, sl
    f0e0:	2510      	movs	r5, #16
    f0e2:	46ca      	mov	sl, r9
    f0e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f0e6:	46a1      	mov	r9, r4
    f0e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    f0ea:	e006      	b.n	f0fa <_svfprintf_r+0x39a>
    f0ec:	f1ab 0b10 	sub.w	fp, fp, #16
    f0f0:	f1bb 0f10 	cmp.w	fp, #16
    f0f4:	f100 0008 	add.w	r0, r0, #8
    f0f8:	dd17      	ble.n	f12a <_svfprintf_r+0x3ca>
    f0fa:	3201      	adds	r2, #1
    f0fc:	3110      	adds	r1, #16
    f0fe:	2a07      	cmp	r2, #7
    f100:	912d      	str	r1, [sp, #180]	; 0xb4
    f102:	922c      	str	r2, [sp, #176]	; 0xb0
    f104:	6007      	str	r7, [r0, #0]
    f106:	6045      	str	r5, [r0, #4]
    f108:	ddf0      	ble.n	f0ec <_svfprintf_r+0x38c>
    f10a:	4620      	mov	r0, r4
    f10c:	4631      	mov	r1, r6
    f10e:	aa2b      	add	r2, sp, #172	; 0xac
    f110:	f003 f814 	bl	1213c <__ssprint_r>
    f114:	2800      	cmp	r0, #0
    f116:	f47f af3b 	bne.w	ef90 <_svfprintf_r+0x230>
    f11a:	f1ab 0b10 	sub.w	fp, fp, #16
    f11e:	f1bb 0f10 	cmp.w	fp, #16
    f122:	992d      	ldr	r1, [sp, #180]	; 0xb4
    f124:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    f126:	a838      	add	r0, sp, #224	; 0xe0
    f128:	dce7      	bgt.n	f0fa <_svfprintf_r+0x39a>
    f12a:	464c      	mov	r4, r9
    f12c:	46d1      	mov	r9, sl
    f12e:	46ba      	mov	sl, r7
    f130:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    f132:	4606      	mov	r6, r0
    f134:	3201      	adds	r2, #1
    f136:	eb0b 0c01 	add.w	ip, fp, r1
    f13a:	2a07      	cmp	r2, #7
    f13c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f140:	922c      	str	r2, [sp, #176]	; 0xb0
    f142:	e886 0c00 	stmia.w	r6, {sl, fp}
    f146:	f300 841c 	bgt.w	f982 <_svfprintf_r+0xc22>
    f14a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f14e:	3608      	adds	r6, #8
    f150:	f1ba 0f00 	cmp.w	sl, #0
    f154:	d00f      	beq.n	f176 <_svfprintf_r+0x416>
    f156:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f158:	3301      	adds	r3, #1
    f15a:	f10c 0c01 	add.w	ip, ip, #1
    f15e:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
    f162:	2201      	movs	r2, #1
    f164:	2b07      	cmp	r3, #7
    f166:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f16a:	932c      	str	r3, [sp, #176]	; 0xb0
    f16c:	e886 0006 	stmia.w	r6, {r1, r2}
    f170:	f300 839a 	bgt.w	f8a8 <_svfprintf_r+0xb48>
    f174:	3608      	adds	r6, #8
    f176:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f178:	b173      	cbz	r3, f198 <_svfprintf_r+0x438>
    f17a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f17c:	3301      	adds	r3, #1
    f17e:	f10c 0c02 	add.w	ip, ip, #2
    f182:	a924      	add	r1, sp, #144	; 0x90
    f184:	2202      	movs	r2, #2
    f186:	2b07      	cmp	r3, #7
    f188:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f18c:	932c      	str	r3, [sp, #176]	; 0xb0
    f18e:	e886 0006 	stmia.w	r6, {r1, r2}
    f192:	f300 8395 	bgt.w	f8c0 <_svfprintf_r+0xb60>
    f196:	3608      	adds	r6, #8
    f198:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    f19a:	2d80      	cmp	r5, #128	; 0x80
    f19c:	f000 82cc 	beq.w	f738 <_svfprintf_r+0x9d8>
    f1a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f1a2:	ebc4 0a05 	rsb	sl, r4, r5
    f1a6:	f1ba 0f00 	cmp.w	sl, #0
    f1aa:	dd3b      	ble.n	f224 <_svfprintf_r+0x4c4>
    f1ac:	f1ba 0f10 	cmp.w	sl, #16
    f1b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f1b2:	4d30      	ldr	r5, [pc, #192]	; (f274 <_svfprintf_r+0x514>)
    f1b4:	dd2b      	ble.n	f20e <_svfprintf_r+0x4ae>
    f1b6:	940a      	str	r4, [sp, #40]	; 0x28
    f1b8:	4632      	mov	r2, r6
    f1ba:	f04f 0b10 	mov.w	fp, #16
    f1be:	462e      	mov	r6, r5
    f1c0:	4661      	mov	r1, ip
    f1c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    f1c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f1c6:	e006      	b.n	f1d6 <_svfprintf_r+0x476>
    f1c8:	f1aa 0a10 	sub.w	sl, sl, #16
    f1cc:	f1ba 0f10 	cmp.w	sl, #16
    f1d0:	f102 0208 	add.w	r2, r2, #8
    f1d4:	dd17      	ble.n	f206 <_svfprintf_r+0x4a6>
    f1d6:	3301      	adds	r3, #1
    f1d8:	3110      	adds	r1, #16
    f1da:	2b07      	cmp	r3, #7
    f1dc:	912d      	str	r1, [sp, #180]	; 0xb4
    f1de:	932c      	str	r3, [sp, #176]	; 0xb0
    f1e0:	e882 0840 	stmia.w	r2, {r6, fp}
    f1e4:	ddf0      	ble.n	f1c8 <_svfprintf_r+0x468>
    f1e6:	4620      	mov	r0, r4
    f1e8:	4629      	mov	r1, r5
    f1ea:	aa2b      	add	r2, sp, #172	; 0xac
    f1ec:	f002 ffa6 	bl	1213c <__ssprint_r>
    f1f0:	2800      	cmp	r0, #0
    f1f2:	f47f aecd 	bne.w	ef90 <_svfprintf_r+0x230>
    f1f6:	f1aa 0a10 	sub.w	sl, sl, #16
    f1fa:	f1ba 0f10 	cmp.w	sl, #16
    f1fe:	992d      	ldr	r1, [sp, #180]	; 0xb4
    f200:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f202:	aa38      	add	r2, sp, #224	; 0xe0
    f204:	dce7      	bgt.n	f1d6 <_svfprintf_r+0x476>
    f206:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f208:	4635      	mov	r5, r6
    f20a:	468c      	mov	ip, r1
    f20c:	4616      	mov	r6, r2
    f20e:	3301      	adds	r3, #1
    f210:	44d4      	add	ip, sl
    f212:	2b07      	cmp	r3, #7
    f214:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f218:	932c      	str	r3, [sp, #176]	; 0xb0
    f21a:	e886 0420 	stmia.w	r6, {r5, sl}
    f21e:	f300 8337 	bgt.w	f890 <_svfprintf_r+0xb30>
    f222:	3608      	adds	r6, #8
    f224:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f226:	05ed      	lsls	r5, r5, #23
    f228:	f100 8226 	bmi.w	f678 <_svfprintf_r+0x918>
    f22c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f22e:	6037      	str	r7, [r6, #0]
    f230:	3301      	adds	r3, #1
    f232:	44a4      	add	ip, r4
    f234:	2b07      	cmp	r3, #7
    f236:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f23a:	6074      	str	r4, [r6, #4]
    f23c:	932c      	str	r3, [sp, #176]	; 0xb0
    f23e:	f300 8311 	bgt.w	f864 <_svfprintf_r+0xb04>
    f242:	3608      	adds	r6, #8
    f244:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f246:	0763      	lsls	r3, r4, #29
    f248:	d549      	bpl.n	f2de <_svfprintf_r+0x57e>
    f24a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f24c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f24e:	1a2c      	subs	r4, r5, r0
    f250:	2c00      	cmp	r4, #0
    f252:	dd44      	ble.n	f2de <_svfprintf_r+0x57e>
    f254:	2c10      	cmp	r4, #16
    f256:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f258:	f8df a01c 	ldr.w	sl, [pc, #28]	; f278 <_svfprintf_r+0x518>
    f25c:	dd2b      	ble.n	f2b6 <_svfprintf_r+0x556>
    f25e:	4657      	mov	r7, sl
    f260:	2510      	movs	r5, #16
    f262:	4662      	mov	r2, ip
    f264:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    f268:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    f26c:	e00b      	b.n	f286 <_svfprintf_r+0x526>
    f26e:	bf00      	nop
    f270:	000142cc 	.word	0x000142cc
    f274:	00014298 	.word	0x00014298
    f278:	000142ec 	.word	0x000142ec
    f27c:	3c10      	subs	r4, #16
    f27e:	2c10      	cmp	r4, #16
    f280:	f106 0608 	add.w	r6, r6, #8
    f284:	dd15      	ble.n	f2b2 <_svfprintf_r+0x552>
    f286:	3301      	adds	r3, #1
    f288:	3210      	adds	r2, #16
    f28a:	2b07      	cmp	r3, #7
    f28c:	922d      	str	r2, [sp, #180]	; 0xb4
    f28e:	932c      	str	r3, [sp, #176]	; 0xb0
    f290:	6037      	str	r7, [r6, #0]
    f292:	6075      	str	r5, [r6, #4]
    f294:	ddf2      	ble.n	f27c <_svfprintf_r+0x51c>
    f296:	4650      	mov	r0, sl
    f298:	4641      	mov	r1, r8
    f29a:	aa2b      	add	r2, sp, #172	; 0xac
    f29c:	f002 ff4e 	bl	1213c <__ssprint_r>
    f2a0:	2800      	cmp	r0, #0
    f2a2:	f47f ae75 	bne.w	ef90 <_svfprintf_r+0x230>
    f2a6:	3c10      	subs	r4, #16
    f2a8:	2c10      	cmp	r4, #16
    f2aa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f2ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f2ae:	ae38      	add	r6, sp, #224	; 0xe0
    f2b0:	dce9      	bgt.n	f286 <_svfprintf_r+0x526>
    f2b2:	4694      	mov	ip, r2
    f2b4:	46ba      	mov	sl, r7
    f2b6:	3301      	adds	r3, #1
    f2b8:	44a4      	add	ip, r4
    f2ba:	2b07      	cmp	r3, #7
    f2bc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f2c0:	932c      	str	r3, [sp, #176]	; 0xb0
    f2c2:	f8c6 a000 	str.w	sl, [r6]
    f2c6:	6074      	str	r4, [r6, #4]
    f2c8:	dd09      	ble.n	f2de <_svfprintf_r+0x57e>
    f2ca:	980d      	ldr	r0, [sp, #52]	; 0x34
    f2cc:	990c      	ldr	r1, [sp, #48]	; 0x30
    f2ce:	aa2b      	add	r2, sp, #172	; 0xac
    f2d0:	f002 ff34 	bl	1213c <__ssprint_r>
    f2d4:	2800      	cmp	r0, #0
    f2d6:	f47f ae5b 	bne.w	ef90 <_svfprintf_r+0x230>
    f2da:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f2de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f2e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f2e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f2e4:	42a8      	cmp	r0, r5
    f2e6:	bfac      	ite	ge
    f2e8:	1824      	addge	r4, r4, r0
    f2ea:	1964      	addlt	r4, r4, r5
    f2ec:	940e      	str	r4, [sp, #56]	; 0x38
    f2ee:	f1bc 0f00 	cmp.w	ip, #0
    f2f2:	f040 82c3 	bne.w	f87c <_svfprintf_r+0xb1c>
    f2f6:	2300      	movs	r3, #0
    f2f8:	932c      	str	r3, [sp, #176]	; 0xb0
    f2fa:	ae38      	add	r6, sp, #224	; 0xe0
    f2fc:	e556      	b.n	edac <_svfprintf_r+0x4c>
    f2fe:	f899 8000 	ldrb.w	r8, [r9]
    f302:	2a00      	cmp	r2, #0
    f304:	f47f ad88 	bne.w	ee18 <_svfprintf_r+0xb8>
    f308:	2220      	movs	r2, #32
    f30a:	e585      	b.n	ee18 <_svfprintf_r+0xb8>
    f30c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f30e:	f045 0501 	orr.w	r5, r5, #1
    f312:	9509      	str	r5, [sp, #36]	; 0x24
    f314:	f899 8000 	ldrb.w	r8, [r9]
    f318:	e57e      	b.n	ee18 <_svfprintf_r+0xb8>
    f31a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f31c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    f320:	9509      	str	r5, [sp, #36]	; 0x24
    f322:	f899 8000 	ldrb.w	r8, [r9]
    f326:	e577      	b.n	ee18 <_svfprintf_r+0xb8>
    f328:	2400      	movs	r4, #0
    f32a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    f32e:	940f      	str	r4, [sp, #60]	; 0x3c
    f330:	4621      	mov	r1, r4
    f332:	f819 8b01 	ldrb.w	r8, [r9], #1
    f336:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f33a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    f33e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    f342:	2b09      	cmp	r3, #9
    f344:	d9f5      	bls.n	f332 <_svfprintf_r+0x5d2>
    f346:	910f      	str	r1, [sp, #60]	; 0x3c
    f348:	e568      	b.n	ee1c <_svfprintf_r+0xbc>
    f34a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f34e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f352:	f04c 0c10 	orr.w	ip, ip, #16
    f356:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f35a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f35c:	06a3      	lsls	r3, r4, #26
    f35e:	f140 80b2 	bpl.w	f4c6 <_svfprintf_r+0x766>
    f362:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f364:	1de9      	adds	r1, r5, #7
    f366:	f021 0107 	bic.w	r1, r1, #7
    f36a:	e9d1 2300 	ldrd	r2, r3, [r1]
    f36e:	3108      	adds	r1, #8
    f370:	9110      	str	r1, [sp, #64]	; 0x40
    f372:	4614      	mov	r4, r2
    f374:	461d      	mov	r5, r3
    f376:	2a00      	cmp	r2, #0
    f378:	f173 0000 	sbcs.w	r0, r3, #0
    f37c:	f2c0 838b 	blt.w	fa96 <_svfprintf_r+0xd36>
    f380:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f384:	2301      	movs	r3, #1
    f386:	e659      	b.n	f03c <_svfprintf_r+0x2dc>
    f388:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f38a:	4cb7      	ldr	r4, [pc, #732]	; (f668 <_svfprintf_r+0x908>)
    f38c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f390:	06af      	lsls	r7, r5, #26
    f392:	941a      	str	r4, [sp, #104]	; 0x68
    f394:	f53f ae2f 	bmi.w	eff6 <_svfprintf_r+0x296>
    f398:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f39a:	06ed      	lsls	r5, r5, #27
    f39c:	f140 845d 	bpl.w	fc5a <_svfprintf_r+0xefa>
    f3a0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f3a4:	f8dc 4000 	ldr.w	r4, [ip]
    f3a8:	f10c 0c04 	add.w	ip, ip, #4
    f3ac:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    f3b0:	2500      	movs	r5, #0
    f3b2:	e62b      	b.n	f00c <_svfprintf_r+0x2ac>
    f3b4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f3b8:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f3bc:	f01c 0f20 	tst.w	ip, #32
    f3c0:	f000 843d 	beq.w	fc3e <_svfprintf_r+0xede>
    f3c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f3c6:	6821      	ldr	r1, [r4, #0]
    f3c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f3ca:	17e5      	asrs	r5, r4, #31
    f3cc:	462b      	mov	r3, r5
    f3ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f3d0:	4622      	mov	r2, r4
    f3d2:	3504      	adds	r5, #4
    f3d4:	9510      	str	r5, [sp, #64]	; 0x40
    f3d6:	e9c1 2300 	strd	r2, r3, [r1]
    f3da:	e4e7      	b.n	edac <_svfprintf_r+0x4c>
    f3dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f3de:	6827      	ldr	r7, [r4, #0]
    f3e0:	f04f 0a00 	mov.w	sl, #0
    f3e4:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    f3e8:	1d25      	adds	r5, r4, #4
    f3ea:	2f00      	cmp	r7, #0
    f3ec:	f000 85f5 	beq.w	ffda <_svfprintf_r+0x127a>
    f3f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f3f2:	2c00      	cmp	r4, #0
    f3f4:	4638      	mov	r0, r7
    f3f6:	f2c0 85a7 	blt.w	ff48 <_svfprintf_r+0x11e8>
    f3fa:	4651      	mov	r1, sl
    f3fc:	4622      	mov	r2, r4
    f3fe:	f7fe fee7 	bl	e1d0 <memchr>
    f402:	2800      	cmp	r0, #0
    f404:	f000 861f 	beq.w	10046 <_svfprintf_r+0x12e6>
    f408:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f40a:	9510      	str	r5, [sp, #64]	; 0x40
    f40c:	1bc0      	subs	r0, r0, r7
    f40e:	42a0      	cmp	r0, r4
    f410:	bfb8      	it	lt
    f412:	4604      	movlt	r4, r0
    f414:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
    f418:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    f41c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    f420:	950b      	str	r5, [sp, #44]	; 0x2c
    f422:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f426:	e632      	b.n	f08e <_svfprintf_r+0x32e>
    f428:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f42c:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
    f430:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f434:	f899 8000 	ldrb.w	r8, [r9]
    f438:	e4ee      	b.n	ee18 <_svfprintf_r+0xb8>
    f43a:	f899 8000 	ldrb.w	r8, [r9]
    f43e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    f442:	464b      	mov	r3, r9
    f444:	f000 848b 	beq.w	fd5e <_svfprintf_r+0xffe>
    f448:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f44a:	f045 0510 	orr.w	r5, r5, #16
    f44e:	9509      	str	r5, [sp, #36]	; 0x24
    f450:	e4e2      	b.n	ee18 <_svfprintf_r+0xb8>
    f452:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f454:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f456:	6824      	ldr	r4, [r4, #0]
    f458:	940f      	str	r4, [sp, #60]	; 0x3c
    f45a:	2c00      	cmp	r4, #0
    f45c:	f105 0304 	add.w	r3, r5, #4
    f460:	f6ff ad7c 	blt.w	ef5c <_svfprintf_r+0x1fc>
    f464:	9310      	str	r3, [sp, #64]	; 0x40
    f466:	f899 8000 	ldrb.w	r8, [r9]
    f46a:	e4d5      	b.n	ee18 <_svfprintf_r+0xb8>
    f46c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f46e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f472:	487e      	ldr	r0, [pc, #504]	; (f66c <_svfprintf_r+0x90c>)
    f474:	6814      	ldr	r4, [r2, #0]
    f476:	901a      	str	r0, [sp, #104]	; 0x68
    f478:	2330      	movs	r3, #48	; 0x30
    f47a:	1d15      	adds	r5, r2, #4
    f47c:	f04f 0878 	mov.w	r8, #120	; 0x78
    f480:	f04c 0c02 	orr.w	ip, ip, #2
    f484:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    f488:	9510      	str	r5, [sp, #64]	; 0x40
    f48a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f48e:	2500      	movs	r5, #0
    f490:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
    f494:	2302      	movs	r3, #2
    f496:	e5cd      	b.n	f034 <_svfprintf_r+0x2d4>
    f498:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f49a:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f49c:	6812      	ldr	r2, [r2, #0]
    f49e:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
    f4a2:	2300      	movs	r3, #0
    f4a4:	2401      	movs	r4, #1
    f4a6:	3504      	adds	r5, #4
    f4a8:	469a      	mov	sl, r3
    f4aa:	940b      	str	r4, [sp, #44]	; 0x2c
    f4ac:	9510      	str	r5, [sp, #64]	; 0x40
    f4ae:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    f4b2:	930a      	str	r3, [sp, #40]	; 0x28
    f4b4:	9314      	str	r3, [sp, #80]	; 0x50
    f4b6:	af2e      	add	r7, sp, #184	; 0xb8
    f4b8:	e5ef      	b.n	f09a <_svfprintf_r+0x33a>
    f4ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f4bc:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f4c0:	06a3      	lsls	r3, r4, #26
    f4c2:	f53f af4e 	bmi.w	f362 <_svfprintf_r+0x602>
    f4c6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f4ca:	f01c 0f10 	tst.w	ip, #16
    f4ce:	f040 82d2 	bne.w	fa76 <_svfprintf_r+0xd16>
    f4d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f4d4:	0667      	lsls	r7, r4, #25
    f4d6:	f140 82ce 	bpl.w	fa76 <_svfprintf_r+0xd16>
    f4da:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f4de:	f9bc 4000 	ldrsh.w	r4, [ip]
    f4e2:	f10c 0c04 	add.w	ip, ip, #4
    f4e6:	17e5      	asrs	r5, r4, #31
    f4e8:	4622      	mov	r2, r4
    f4ea:	462b      	mov	r3, r5
    f4ec:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    f4f0:	e741      	b.n	f376 <_svfprintf_r+0x616>
    f4f2:	f899 8000 	ldrb.w	r8, [r9]
    f4f6:	222b      	movs	r2, #43	; 0x2b
    f4f8:	e48e      	b.n	ee18 <_svfprintf_r+0xb8>
    f4fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f4fc:	f045 0508 	orr.w	r5, r5, #8
    f500:	9509      	str	r5, [sp, #36]	; 0x24
    f502:	f899 8000 	ldrb.w	r8, [r9]
    f506:	e487      	b.n	ee18 <_svfprintf_r+0xb8>
    f508:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f50a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f50c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f510:	1deb      	adds	r3, r5, #7
    f512:	0725      	lsls	r5, r4, #28
    f514:	f023 0307 	bic.w	r3, r3, #7
    f518:	f140 838a 	bpl.w	fc30 <_svfprintf_r+0xed0>
    f51c:	e9d3 4500 	ldrd	r4, r5, [r3]
    f520:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    f524:	f103 0c08 	add.w	ip, r3, #8
    f528:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    f52c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    f530:	f7fc fc7e 	bl	be30 <__fpclassifyd>
    f534:	2801      	cmp	r0, #1
    f536:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    f53a:	f040 835f 	bne.w	fbfc <_svfprintf_r+0xe9c>
    f53e:	2200      	movs	r2, #0
    f540:	2300      	movs	r3, #0
    f542:	f7fd f95d 	bl	c800 <__aeabi_dcmplt>
    f546:	2800      	cmp	r0, #0
    f548:	f040 856d 	bne.w	10026 <_svfprintf_r+0x12c6>
    f54c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f550:	2503      	movs	r5, #3
    f552:	950b      	str	r5, [sp, #44]	; 0x2c
    f554:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f556:	4f46      	ldr	r7, [pc, #280]	; (f670 <_svfprintf_r+0x910>)
    f558:	4b46      	ldr	r3, [pc, #280]	; (f674 <_svfprintf_r+0x914>)
    f55a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    f55e:	2400      	movs	r4, #0
    f560:	9509      	str	r5, [sp, #36]	; 0x24
    f562:	2500      	movs	r5, #0
    f564:	940a      	str	r4, [sp, #40]	; 0x28
    f566:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    f56a:	bfd8      	it	le
    f56c:	461f      	movle	r7, r3
    f56e:	2403      	movs	r4, #3
    f570:	9514      	str	r5, [sp, #80]	; 0x50
    f572:	e58c      	b.n	f08e <_svfprintf_r+0x32e>
    f574:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f578:	f04c 0c20 	orr.w	ip, ip, #32
    f57c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f580:	f899 8000 	ldrb.w	r8, [r9]
    f584:	e448      	b.n	ee18 <_svfprintf_r+0xb8>
    f586:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f588:	1de3      	adds	r3, r4, #7
    f58a:	f023 0307 	bic.w	r3, r3, #7
    f58e:	f103 0508 	add.w	r5, r3, #8
    f592:	9510      	str	r5, [sp, #64]	; 0x40
    f594:	e9d3 4500 	ldrd	r4, r5, [r3]
    f598:	2300      	movs	r3, #0
    f59a:	e54b      	b.n	f034 <_svfprintf_r+0x2d4>
    f59c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f59e:	1deb      	adds	r3, r5, #7
    f5a0:	f023 0307 	bic.w	r3, r3, #7
    f5a4:	f103 0c08 	add.w	ip, r3, #8
    f5a8:	e9d3 4500 	ldrd	r4, r5, [r3]
    f5ac:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    f5b0:	2301      	movs	r3, #1
    f5b2:	e53f      	b.n	f034 <_svfprintf_r+0x2d4>
    f5b4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f5b8:	f1b8 0f00 	cmp.w	r8, #0
    f5bc:	f43f ace1 	beq.w	ef82 <_svfprintf_r+0x222>
    f5c0:	2300      	movs	r3, #0
    f5c2:	f04f 0c01 	mov.w	ip, #1
    f5c6:	469a      	mov	sl, r3
    f5c8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    f5cc:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
    f5d0:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    f5d4:	930a      	str	r3, [sp, #40]	; 0x28
    f5d6:	9314      	str	r3, [sp, #80]	; 0x50
    f5d8:	4664      	mov	r4, ip
    f5da:	af2e      	add	r7, sp, #184	; 0xb8
    f5dc:	e55d      	b.n	f09a <_svfprintf_r+0x33a>
    f5de:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f5e2:	e5b5      	b.n	f150 <_svfprintf_r+0x3f0>
    f5e4:	2b01      	cmp	r3, #1
    f5e6:	f000 80ec 	beq.w	f7c2 <_svfprintf_r+0xa62>
    f5ea:	2b02      	cmp	r3, #2
    f5ec:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
    f5f0:	d118      	bne.n	f624 <_svfprintf_r+0x8c4>
    f5f2:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
    f5f6:	4619      	mov	r1, r3
    f5f8:	f004 000f 	and.w	r0, r4, #15
    f5fc:	0922      	lsrs	r2, r4, #4
    f5fe:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
    f602:	460f      	mov	r7, r1
    f604:	092b      	lsrs	r3, r5, #4
    f606:	f81c 1000 	ldrb.w	r1, [ip, r0]
    f60a:	7039      	strb	r1, [r7, #0]
    f60c:	ea52 0003 	orrs.w	r0, r2, r3
    f610:	4614      	mov	r4, r2
    f612:	461d      	mov	r5, r3
    f614:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
    f618:	d1ee      	bne.n	f5f8 <_svfprintf_r+0x898>
    f61a:	9d08      	ldr	r5, [sp, #32]
    f61c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    f620:	1bec      	subs	r4, r5, r7
    f622:	e52b      	b.n	f07c <_svfprintf_r+0x31c>
    f624:	08e0      	lsrs	r0, r4, #3
    f626:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
    f62a:	f004 0207 	and.w	r2, r4, #7
    f62e:	08e9      	lsrs	r1, r5, #3
    f630:	3230      	adds	r2, #48	; 0x30
    f632:	ea50 0c01 	orrs.w	ip, r0, r1
    f636:	461f      	mov	r7, r3
    f638:	701a      	strb	r2, [r3, #0]
    f63a:	4604      	mov	r4, r0
    f63c:	460d      	mov	r5, r1
    f63e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    f642:	d1ef      	bne.n	f624 <_svfprintf_r+0x8c4>
    f644:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f646:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    f64a:	07e0      	lsls	r0, r4, #31
    f64c:	4639      	mov	r1, r7
    f64e:	f140 80c1 	bpl.w	f7d4 <_svfprintf_r+0xa74>
    f652:	2a30      	cmp	r2, #48	; 0x30
    f654:	f000 80be 	beq.w	f7d4 <_svfprintf_r+0xa74>
    f658:	9d08      	ldr	r5, [sp, #32]
    f65a:	461f      	mov	r7, r3
    f65c:	2330      	movs	r3, #48	; 0x30
    f65e:	1bec      	subs	r4, r5, r7
    f660:	f801 3c01 	strb.w	r3, [r1, #-1]
    f664:	e50a      	b.n	f07c <_svfprintf_r+0x31c>
    f666:	bf00      	nop
    f668:	000142b8 	.word	0x000142b8
    f66c:	000142cc 	.word	0x000142cc
    f670:	000142ac 	.word	0x000142ac
    f674:	000142a8 	.word	0x000142a8
    f678:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    f67c:	f340 80ad 	ble.w	f7da <_svfprintf_r+0xa7a>
    f680:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    f684:	2200      	movs	r2, #0
    f686:	2300      	movs	r3, #0
    f688:	f8cd c01c 	str.w	ip, [sp, #28]
    f68c:	f7fd f8ae 	bl	c7ec <__aeabi_dcmpeq>
    f690:	f8dd c01c 	ldr.w	ip, [sp, #28]
    f694:	2800      	cmp	r0, #0
    f696:	f000 8126 	beq.w	f8e6 <_svfprintf_r+0xb86>
    f69a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f69c:	4aaa      	ldr	r2, [pc, #680]	; (f948 <_svfprintf_r+0xbe8>)
    f69e:	6032      	str	r2, [r6, #0]
    f6a0:	3301      	adds	r3, #1
    f6a2:	f10c 0c01 	add.w	ip, ip, #1
    f6a6:	2201      	movs	r2, #1
    f6a8:	2b07      	cmp	r3, #7
    f6aa:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f6ae:	932c      	str	r3, [sp, #176]	; 0xb0
    f6b0:	6072      	str	r2, [r6, #4]
    f6b2:	f300 82f7 	bgt.w	fca4 <_svfprintf_r+0xf44>
    f6b6:	3608      	adds	r6, #8
    f6b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f6ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
    f6bc:	42a3      	cmp	r3, r4
    f6be:	db03      	blt.n	f6c8 <_svfprintf_r+0x968>
    f6c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f6c2:	07ec      	lsls	r4, r5, #31
    f6c4:	f57f adbe 	bpl.w	f244 <_svfprintf_r+0x4e4>
    f6c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f6ca:	9d18      	ldr	r5, [sp, #96]	; 0x60
    f6cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
    f6ce:	6034      	str	r4, [r6, #0]
    f6d0:	3301      	adds	r3, #1
    f6d2:	44ac      	add	ip, r5
    f6d4:	2b07      	cmp	r3, #7
    f6d6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f6da:	6075      	str	r5, [r6, #4]
    f6dc:	932c      	str	r3, [sp, #176]	; 0xb0
    f6de:	f300 8348 	bgt.w	fd72 <_svfprintf_r+0x1012>
    f6e2:	3608      	adds	r6, #8
    f6e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f6e6:	1e6c      	subs	r4, r5, #1
    f6e8:	2c00      	cmp	r4, #0
    f6ea:	f77f adab 	ble.w	f244 <_svfprintf_r+0x4e4>
    f6ee:	2c10      	cmp	r4, #16
    f6f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f6f2:	4d96      	ldr	r5, [pc, #600]	; (f94c <_svfprintf_r+0xbec>)
    f6f4:	f340 8197 	ble.w	fa26 <_svfprintf_r+0xcc6>
    f6f8:	2710      	movs	r7, #16
    f6fa:	4662      	mov	r2, ip
    f6fc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    f700:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    f704:	e004      	b.n	f710 <_svfprintf_r+0x9b0>
    f706:	3608      	adds	r6, #8
    f708:	3c10      	subs	r4, #16
    f70a:	2c10      	cmp	r4, #16
    f70c:	f340 818a 	ble.w	fa24 <_svfprintf_r+0xcc4>
    f710:	3301      	adds	r3, #1
    f712:	3210      	adds	r2, #16
    f714:	2b07      	cmp	r3, #7
    f716:	922d      	str	r2, [sp, #180]	; 0xb4
    f718:	932c      	str	r3, [sp, #176]	; 0xb0
    f71a:	e886 00a0 	stmia.w	r6, {r5, r7}
    f71e:	ddf2      	ble.n	f706 <_svfprintf_r+0x9a6>
    f720:	4640      	mov	r0, r8
    f722:	4651      	mov	r1, sl
    f724:	aa2b      	add	r2, sp, #172	; 0xac
    f726:	f002 fd09 	bl	1213c <__ssprint_r>
    f72a:	2800      	cmp	r0, #0
    f72c:	f47f ac30 	bne.w	ef90 <_svfprintf_r+0x230>
    f730:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f732:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f734:	ae38      	add	r6, sp, #224	; 0xe0
    f736:	e7e7      	b.n	f708 <_svfprintf_r+0x9a8>
    f738:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f73a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f73c:	ebc0 0a05 	rsb	sl, r0, r5
    f740:	f1ba 0f00 	cmp.w	sl, #0
    f744:	f77f ad2c 	ble.w	f1a0 <_svfprintf_r+0x440>
    f748:	f1ba 0f10 	cmp.w	sl, #16
    f74c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f74e:	4d7f      	ldr	r5, [pc, #508]	; (f94c <_svfprintf_r+0xbec>)
    f750:	dd2b      	ble.n	f7aa <_svfprintf_r+0xa4a>
    f752:	9412      	str	r4, [sp, #72]	; 0x48
    f754:	4632      	mov	r2, r6
    f756:	f04f 0b10 	mov.w	fp, #16
    f75a:	462e      	mov	r6, r5
    f75c:	4661      	mov	r1, ip
    f75e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    f760:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f762:	e006      	b.n	f772 <_svfprintf_r+0xa12>
    f764:	f1aa 0a10 	sub.w	sl, sl, #16
    f768:	f1ba 0f10 	cmp.w	sl, #16
    f76c:	f102 0208 	add.w	r2, r2, #8
    f770:	dd17      	ble.n	f7a2 <_svfprintf_r+0xa42>
    f772:	3301      	adds	r3, #1
    f774:	3110      	adds	r1, #16
    f776:	2b07      	cmp	r3, #7
    f778:	912d      	str	r1, [sp, #180]	; 0xb4
    f77a:	932c      	str	r3, [sp, #176]	; 0xb0
    f77c:	e882 0840 	stmia.w	r2, {r6, fp}
    f780:	ddf0      	ble.n	f764 <_svfprintf_r+0xa04>
    f782:	4620      	mov	r0, r4
    f784:	4629      	mov	r1, r5
    f786:	aa2b      	add	r2, sp, #172	; 0xac
    f788:	f002 fcd8 	bl	1213c <__ssprint_r>
    f78c:	2800      	cmp	r0, #0
    f78e:	f47f abff 	bne.w	ef90 <_svfprintf_r+0x230>
    f792:	f1aa 0a10 	sub.w	sl, sl, #16
    f796:	f1ba 0f10 	cmp.w	sl, #16
    f79a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    f79c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f79e:	aa38      	add	r2, sp, #224	; 0xe0
    f7a0:	dce7      	bgt.n	f772 <_svfprintf_r+0xa12>
    f7a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
    f7a4:	4635      	mov	r5, r6
    f7a6:	468c      	mov	ip, r1
    f7a8:	4616      	mov	r6, r2
    f7aa:	3301      	adds	r3, #1
    f7ac:	44d4      	add	ip, sl
    f7ae:	2b07      	cmp	r3, #7
    f7b0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f7b4:	932c      	str	r3, [sp, #176]	; 0xb0
    f7b6:	e886 0420 	stmia.w	r6, {r5, sl}
    f7ba:	f300 8212 	bgt.w	fbe2 <_svfprintf_r+0xe82>
    f7be:	3608      	adds	r6, #8
    f7c0:	e4ee      	b.n	f1a0 <_svfprintf_r+0x440>
    f7c2:	2d00      	cmp	r5, #0
    f7c4:	bf08      	it	eq
    f7c6:	2c0a      	cmpeq	r4, #10
    f7c8:	f080 8138 	bcs.w	fa3c <_svfprintf_r+0xcdc>
    f7cc:	af48      	add	r7, sp, #288	; 0x120
    f7ce:	3430      	adds	r4, #48	; 0x30
    f7d0:	f807 4d41 	strb.w	r4, [r7, #-65]!
    f7d4:	9d08      	ldr	r5, [sp, #32]
    f7d6:	1bec      	subs	r4, r5, r7
    f7d8:	e450      	b.n	f07c <_svfprintf_r+0x31c>
    f7da:	9c11      	ldr	r4, [sp, #68]	; 0x44
    f7dc:	2c01      	cmp	r4, #1
    f7de:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    f7e0:	f340 81d5 	ble.w	fb8e <_svfprintf_r+0xe2e>
    f7e4:	3401      	adds	r4, #1
    f7e6:	f10c 0301 	add.w	r3, ip, #1
    f7ea:	2201      	movs	r2, #1
    f7ec:	2c07      	cmp	r4, #7
    f7ee:	6037      	str	r7, [r6, #0]
    f7f0:	932d      	str	r3, [sp, #180]	; 0xb4
    f7f2:	942c      	str	r4, [sp, #176]	; 0xb0
    f7f4:	6072      	str	r2, [r6, #4]
    f7f6:	f300 81db 	bgt.w	fbb0 <_svfprintf_r+0xe50>
    f7fa:	3608      	adds	r6, #8
    f7fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    f800:	9d15      	ldr	r5, [sp, #84]	; 0x54
    f802:	6035      	str	r5, [r6, #0]
    f804:	3401      	adds	r4, #1
    f806:	4498      	add	r8, r3
    f808:	9d18      	ldr	r5, [sp, #96]	; 0x60
    f80a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    f80e:	2c07      	cmp	r4, #7
    f810:	942c      	str	r4, [sp, #176]	; 0xb0
    f812:	6075      	str	r5, [r6, #4]
    f814:	f300 81d8 	bgt.w	fbc8 <_svfprintf_r+0xe68>
    f818:	3608      	adds	r6, #8
    f81a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    f81e:	2200      	movs	r2, #0
    f820:	2300      	movs	r3, #0
    f822:	f7fc ffe3 	bl	c7ec <__aeabi_dcmpeq>
    f826:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f828:	2800      	cmp	r0, #0
    f82a:	f040 80b9 	bne.w	f9a0 <_svfprintf_r+0xc40>
    f82e:	1e6b      	subs	r3, r5, #1
    f830:	3401      	adds	r4, #1
    f832:	3701      	adds	r7, #1
    f834:	4498      	add	r8, r3
    f836:	2c07      	cmp	r4, #7
    f838:	942c      	str	r4, [sp, #176]	; 0xb0
    f83a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    f83e:	6037      	str	r7, [r6, #0]
    f840:	6073      	str	r3, [r6, #4]
    f842:	f300 80e2 	bgt.w	fa0a <_svfprintf_r+0xcaa>
    f846:	3608      	adds	r6, #8
    f848:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
    f84c:	9d19      	ldr	r5, [sp, #100]	; 0x64
    f84e:	3401      	adds	r4, #1
    f850:	44c4      	add	ip, r8
    f852:	ab27      	add	r3, sp, #156	; 0x9c
    f854:	2c07      	cmp	r4, #7
    f856:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f85a:	942c      	str	r4, [sp, #176]	; 0xb0
    f85c:	e886 0028 	stmia.w	r6, {r3, r5}
    f860:	f77f acef 	ble.w	f242 <_svfprintf_r+0x4e2>
    f864:	980d      	ldr	r0, [sp, #52]	; 0x34
    f866:	990c      	ldr	r1, [sp, #48]	; 0x30
    f868:	aa2b      	add	r2, sp, #172	; 0xac
    f86a:	f002 fc67 	bl	1213c <__ssprint_r>
    f86e:	2800      	cmp	r0, #0
    f870:	f47f ab8e 	bne.w	ef90 <_svfprintf_r+0x230>
    f874:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f878:	ae38      	add	r6, sp, #224	; 0xe0
    f87a:	e4e3      	b.n	f244 <_svfprintf_r+0x4e4>
    f87c:	980d      	ldr	r0, [sp, #52]	; 0x34
    f87e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f880:	aa2b      	add	r2, sp, #172	; 0xac
    f882:	f002 fc5b 	bl	1213c <__ssprint_r>
    f886:	2800      	cmp	r0, #0
    f888:	f43f ad35 	beq.w	f2f6 <_svfprintf_r+0x596>
    f88c:	f7ff bb80 	b.w	ef90 <_svfprintf_r+0x230>
    f890:	980d      	ldr	r0, [sp, #52]	; 0x34
    f892:	990c      	ldr	r1, [sp, #48]	; 0x30
    f894:	aa2b      	add	r2, sp, #172	; 0xac
    f896:	f002 fc51 	bl	1213c <__ssprint_r>
    f89a:	2800      	cmp	r0, #0
    f89c:	f47f ab78 	bne.w	ef90 <_svfprintf_r+0x230>
    f8a0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f8a4:	ae38      	add	r6, sp, #224	; 0xe0
    f8a6:	e4bd      	b.n	f224 <_svfprintf_r+0x4c4>
    f8a8:	980d      	ldr	r0, [sp, #52]	; 0x34
    f8aa:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8ac:	aa2b      	add	r2, sp, #172	; 0xac
    f8ae:	f002 fc45 	bl	1213c <__ssprint_r>
    f8b2:	2800      	cmp	r0, #0
    f8b4:	f47f ab6c 	bne.w	ef90 <_svfprintf_r+0x230>
    f8b8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f8bc:	ae38      	add	r6, sp, #224	; 0xe0
    f8be:	e45a      	b.n	f176 <_svfprintf_r+0x416>
    f8c0:	980d      	ldr	r0, [sp, #52]	; 0x34
    f8c2:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8c4:	aa2b      	add	r2, sp, #172	; 0xac
    f8c6:	f002 fc39 	bl	1213c <__ssprint_r>
    f8ca:	2800      	cmp	r0, #0
    f8cc:	f47f ab60 	bne.w	ef90 <_svfprintf_r+0x230>
    f8d0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f8d4:	ae38      	add	r6, sp, #224	; 0xe0
    f8d6:	e45f      	b.n	f198 <_svfprintf_r+0x438>
    f8d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f8da:	af38      	add	r7, sp, #224	; 0xe0
    f8dc:	f7ff bbce 	b.w	f07c <_svfprintf_r+0x31c>
    f8e0:	2302      	movs	r3, #2
    f8e2:	f7ff bba7 	b.w	f034 <_svfprintf_r+0x2d4>
    f8e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f8e8:	2b00      	cmp	r3, #0
    f8ea:	f340 81e7 	ble.w	fcbc <_svfprintf_r+0xf5c>
    f8ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
    f8f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
    f8f2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    f8f6:	42ac      	cmp	r4, r5
    f8f8:	bfa8      	it	ge
    f8fa:	462c      	movge	r4, r5
    f8fc:	2c00      	cmp	r4, #0
    f8fe:	44ba      	add	sl, r7
    f900:	dd0b      	ble.n	f91a <_svfprintf_r+0xbba>
    f902:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f904:	6037      	str	r7, [r6, #0]
    f906:	3301      	adds	r3, #1
    f908:	44a4      	add	ip, r4
    f90a:	2b07      	cmp	r3, #7
    f90c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f910:	6074      	str	r4, [r6, #4]
    f912:	932c      	str	r3, [sp, #176]	; 0xb0
    f914:	f300 8328 	bgt.w	ff68 <_svfprintf_r+0x1208>
    f918:	3608      	adds	r6, #8
    f91a:	9d14      	ldr	r5, [sp, #80]	; 0x50
    f91c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    f920:	1b2c      	subs	r4, r5, r4
    f922:	2c00      	cmp	r4, #0
    f924:	f340 80db 	ble.w	fade <_svfprintf_r+0xd7e>
    f928:	2c10      	cmp	r4, #16
    f92a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f92c:	4d07      	ldr	r5, [pc, #28]	; (f94c <_svfprintf_r+0xbec>)
    f92e:	f340 81ad 	ble.w	fc8c <_svfprintf_r+0xf2c>
    f932:	970a      	str	r7, [sp, #40]	; 0x28
    f934:	f04f 0810 	mov.w	r8, #16
    f938:	462f      	mov	r7, r5
    f93a:	4662      	mov	r2, ip
    f93c:	4625      	mov	r5, r4
    f93e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    f942:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f944:	e009      	b.n	f95a <_svfprintf_r+0xbfa>
    f946:	bf00      	nop
    f948:	000142e8 	.word	0x000142e8
    f94c:	00014298 	.word	0x00014298
    f950:	3608      	adds	r6, #8
    f952:	3d10      	subs	r5, #16
    f954:	2d10      	cmp	r5, #16
    f956:	f340 8195 	ble.w	fc84 <_svfprintf_r+0xf24>
    f95a:	3301      	adds	r3, #1
    f95c:	3210      	adds	r2, #16
    f95e:	2b07      	cmp	r3, #7
    f960:	922d      	str	r2, [sp, #180]	; 0xb4
    f962:	932c      	str	r3, [sp, #176]	; 0xb0
    f964:	e886 0180 	stmia.w	r6, {r7, r8}
    f968:	ddf2      	ble.n	f950 <_svfprintf_r+0xbf0>
    f96a:	4658      	mov	r0, fp
    f96c:	4621      	mov	r1, r4
    f96e:	aa2b      	add	r2, sp, #172	; 0xac
    f970:	f002 fbe4 	bl	1213c <__ssprint_r>
    f974:	2800      	cmp	r0, #0
    f976:	f47f ab0b 	bne.w	ef90 <_svfprintf_r+0x230>
    f97a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f97c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f97e:	ae38      	add	r6, sp, #224	; 0xe0
    f980:	e7e7      	b.n	f952 <_svfprintf_r+0xbf2>
    f982:	980d      	ldr	r0, [sp, #52]	; 0x34
    f984:	990c      	ldr	r1, [sp, #48]	; 0x30
    f986:	aa2b      	add	r2, sp, #172	; 0xac
    f988:	f002 fbd8 	bl	1213c <__ssprint_r>
    f98c:	2800      	cmp	r0, #0
    f98e:	f47f aaff 	bne.w	ef90 <_svfprintf_r+0x230>
    f992:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f996:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f99a:	ae38      	add	r6, sp, #224	; 0xe0
    f99c:	f7ff bbd8 	b.w	f150 <_svfprintf_r+0x3f0>
    f9a0:	1e6f      	subs	r7, r5, #1
    f9a2:	2f00      	cmp	r7, #0
    f9a4:	f77f af50 	ble.w	f848 <_svfprintf_r+0xae8>
    f9a8:	2f10      	cmp	r7, #16
    f9aa:	4db3      	ldr	r5, [pc, #716]	; (fc78 <_svfprintf_r+0xf18>)
    f9ac:	dd23      	ble.n	f9f6 <_svfprintf_r+0xc96>
    f9ae:	4643      	mov	r3, r8
    f9b0:	f04f 0a10 	mov.w	sl, #16
    f9b4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    f9b8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    f9bc:	e004      	b.n	f9c8 <_svfprintf_r+0xc68>
    f9be:	3f10      	subs	r7, #16
    f9c0:	2f10      	cmp	r7, #16
    f9c2:	f106 0608 	add.w	r6, r6, #8
    f9c6:	dd15      	ble.n	f9f4 <_svfprintf_r+0xc94>
    f9c8:	3401      	adds	r4, #1
    f9ca:	3310      	adds	r3, #16
    f9cc:	2c07      	cmp	r4, #7
    f9ce:	932d      	str	r3, [sp, #180]	; 0xb4
    f9d0:	942c      	str	r4, [sp, #176]	; 0xb0
    f9d2:	e886 0420 	stmia.w	r6, {r5, sl}
    f9d6:	ddf2      	ble.n	f9be <_svfprintf_r+0xc5e>
    f9d8:	4640      	mov	r0, r8
    f9da:	4659      	mov	r1, fp
    f9dc:	aa2b      	add	r2, sp, #172	; 0xac
    f9de:	f002 fbad 	bl	1213c <__ssprint_r>
    f9e2:	2800      	cmp	r0, #0
    f9e4:	f47f aad4 	bne.w	ef90 <_svfprintf_r+0x230>
    f9e8:	3f10      	subs	r7, #16
    f9ea:	2f10      	cmp	r7, #16
    f9ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f9ee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    f9f0:	ae38      	add	r6, sp, #224	; 0xe0
    f9f2:	dce9      	bgt.n	f9c8 <_svfprintf_r+0xc68>
    f9f4:	4698      	mov	r8, r3
    f9f6:	3401      	adds	r4, #1
    f9f8:	44b8      	add	r8, r7
    f9fa:	2c07      	cmp	r4, #7
    f9fc:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    fa00:	942c      	str	r4, [sp, #176]	; 0xb0
    fa02:	e886 00a0 	stmia.w	r6, {r5, r7}
    fa06:	f77f af1e 	ble.w	f846 <_svfprintf_r+0xae6>
    fa0a:	980d      	ldr	r0, [sp, #52]	; 0x34
    fa0c:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa0e:	aa2b      	add	r2, sp, #172	; 0xac
    fa10:	f002 fb94 	bl	1213c <__ssprint_r>
    fa14:	2800      	cmp	r0, #0
    fa16:	f47f aabb 	bne.w	ef90 <_svfprintf_r+0x230>
    fa1a:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
    fa1e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    fa20:	ae38      	add	r6, sp, #224	; 0xe0
    fa22:	e711      	b.n	f848 <_svfprintf_r+0xae8>
    fa24:	4694      	mov	ip, r2
    fa26:	3301      	adds	r3, #1
    fa28:	44a4      	add	ip, r4
    fa2a:	2b07      	cmp	r3, #7
    fa2c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    fa30:	932c      	str	r3, [sp, #176]	; 0xb0
    fa32:	6035      	str	r5, [r6, #0]
    fa34:	6074      	str	r4, [r6, #4]
    fa36:	f77f ac04 	ble.w	f242 <_svfprintf_r+0x4e2>
    fa3a:	e713      	b.n	f864 <_svfprintf_r+0xb04>
    fa3c:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
    fa40:	4620      	mov	r0, r4
    fa42:	4629      	mov	r1, r5
    fa44:	220a      	movs	r2, #10
    fa46:	2300      	movs	r3, #0
    fa48:	f002 fd00 	bl	1244c <__aeabi_uldivmod>
    fa4c:	3230      	adds	r2, #48	; 0x30
    fa4e:	f88b 2000 	strb.w	r2, [fp]
    fa52:	4620      	mov	r0, r4
    fa54:	4629      	mov	r1, r5
    fa56:	220a      	movs	r2, #10
    fa58:	2300      	movs	r3, #0
    fa5a:	f002 fcf7 	bl	1244c <__aeabi_uldivmod>
    fa5e:	4604      	mov	r4, r0
    fa60:	460d      	mov	r5, r1
    fa62:	ea54 0c05 	orrs.w	ip, r4, r5
    fa66:	465f      	mov	r7, fp
    fa68:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    fa6c:	d1e8      	bne.n	fa40 <_svfprintf_r+0xce0>
    fa6e:	9d08      	ldr	r5, [sp, #32]
    fa70:	1bec      	subs	r4, r5, r7
    fa72:	f7ff bb03 	b.w	f07c <_svfprintf_r+0x31c>
    fa76:	9d10      	ldr	r5, [sp, #64]	; 0x40
    fa78:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    fa7c:	682c      	ldr	r4, [r5, #0]
    fa7e:	17e5      	asrs	r5, r4, #31
    fa80:	4622      	mov	r2, r4
    fa82:	462b      	mov	r3, r5
    fa84:	f10c 0c04 	add.w	ip, ip, #4
    fa88:	2a00      	cmp	r2, #0
    fa8a:	f173 0000 	sbcs.w	r0, r3, #0
    fa8e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    fa92:	f6bf ac75 	bge.w	f380 <_svfprintf_r+0x620>
    fa96:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
    fa9a:	4264      	negs	r4, r4
    fa9c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    faa0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    faa4:	2301      	movs	r3, #1
    faa6:	f7ff bac9 	b.w	f03c <_svfprintf_r+0x2dc>
    faaa:	9d10      	ldr	r5, [sp, #64]	; 0x40
    faac:	682c      	ldr	r4, [r5, #0]
    faae:	3504      	adds	r5, #4
    fab0:	9510      	str	r5, [sp, #64]	; 0x40
    fab2:	2500      	movs	r5, #0
    fab4:	f7ff babe 	b.w	f034 <_svfprintf_r+0x2d4>
    fab8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    faba:	682c      	ldr	r4, [r5, #0]
    fabc:	3504      	adds	r5, #4
    fabe:	9510      	str	r5, [sp, #64]	; 0x40
    fac0:	2301      	movs	r3, #1
    fac2:	2500      	movs	r5, #0
    fac4:	f7ff bab6 	b.w	f034 <_svfprintf_r+0x2d4>
    fac8:	980d      	ldr	r0, [sp, #52]	; 0x34
    faca:	990c      	ldr	r1, [sp, #48]	; 0x30
    facc:	aa2b      	add	r2, sp, #172	; 0xac
    face:	f002 fb35 	bl	1213c <__ssprint_r>
    fad2:	2800      	cmp	r0, #0
    fad4:	f47f aa5c 	bne.w	ef90 <_svfprintf_r+0x230>
    fad8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fadc:	ae38      	add	r6, sp, #224	; 0xe0
    fade:	9d14      	ldr	r5, [sp, #80]	; 0x50
    fae0:	9c25      	ldr	r4, [sp, #148]	; 0x94
    fae2:	442f      	add	r7, r5
    fae4:	9d11      	ldr	r5, [sp, #68]	; 0x44
    fae6:	42ac      	cmp	r4, r5
    fae8:	db42      	blt.n	fb70 <_svfprintf_r+0xe10>
    faea:	9d09      	ldr	r5, [sp, #36]	; 0x24
    faec:	07e9      	lsls	r1, r5, #31
    faee:	d43f      	bmi.n	fb70 <_svfprintf_r+0xe10>
    faf0:	9811      	ldr	r0, [sp, #68]	; 0x44
    faf2:	ebc7 050a 	rsb	r5, r7, sl
    faf6:	1b04      	subs	r4, r0, r4
    faf8:	42ac      	cmp	r4, r5
    fafa:	bfb8      	it	lt
    fafc:	4625      	movlt	r5, r4
    fafe:	2d00      	cmp	r5, #0
    fb00:	dd0b      	ble.n	fb1a <_svfprintf_r+0xdba>
    fb02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fb04:	6037      	str	r7, [r6, #0]
    fb06:	3301      	adds	r3, #1
    fb08:	44ac      	add	ip, r5
    fb0a:	2b07      	cmp	r3, #7
    fb0c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    fb10:	6075      	str	r5, [r6, #4]
    fb12:	932c      	str	r3, [sp, #176]	; 0xb0
    fb14:	f300 8252 	bgt.w	ffbc <_svfprintf_r+0x125c>
    fb18:	3608      	adds	r6, #8
    fb1a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    fb1e:	1b64      	subs	r4, r4, r5
    fb20:	2c00      	cmp	r4, #0
    fb22:	f77f ab8f 	ble.w	f244 <_svfprintf_r+0x4e4>
    fb26:	2c10      	cmp	r4, #16
    fb28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fb2a:	4d53      	ldr	r5, [pc, #332]	; (fc78 <_svfprintf_r+0xf18>)
    fb2c:	f77f af7b 	ble.w	fa26 <_svfprintf_r+0xcc6>
    fb30:	2710      	movs	r7, #16
    fb32:	4662      	mov	r2, ip
    fb34:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    fb38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    fb3c:	e004      	b.n	fb48 <_svfprintf_r+0xde8>
    fb3e:	3608      	adds	r6, #8
    fb40:	3c10      	subs	r4, #16
    fb42:	2c10      	cmp	r4, #16
    fb44:	f77f af6e 	ble.w	fa24 <_svfprintf_r+0xcc4>
    fb48:	3301      	adds	r3, #1
    fb4a:	3210      	adds	r2, #16
    fb4c:	2b07      	cmp	r3, #7
    fb4e:	922d      	str	r2, [sp, #180]	; 0xb4
    fb50:	932c      	str	r3, [sp, #176]	; 0xb0
    fb52:	e886 00a0 	stmia.w	r6, {r5, r7}
    fb56:	ddf2      	ble.n	fb3e <_svfprintf_r+0xdde>
    fb58:	4640      	mov	r0, r8
    fb5a:	4651      	mov	r1, sl
    fb5c:	aa2b      	add	r2, sp, #172	; 0xac
    fb5e:	f002 faed 	bl	1213c <__ssprint_r>
    fb62:	2800      	cmp	r0, #0
    fb64:	f47f aa14 	bne.w	ef90 <_svfprintf_r+0x230>
    fb68:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    fb6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fb6c:	ae38      	add	r6, sp, #224	; 0xe0
    fb6e:	e7e7      	b.n	fb40 <_svfprintf_r+0xde0>
    fb70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fb72:	9d15      	ldr	r5, [sp, #84]	; 0x54
    fb74:	6035      	str	r5, [r6, #0]
    fb76:	9d18      	ldr	r5, [sp, #96]	; 0x60
    fb78:	6075      	str	r5, [r6, #4]
    fb7a:	3301      	adds	r3, #1
    fb7c:	44ac      	add	ip, r5
    fb7e:	2b07      	cmp	r3, #7
    fb80:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    fb84:	932c      	str	r3, [sp, #176]	; 0xb0
    fb86:	f300 81fb 	bgt.w	ff80 <_svfprintf_r+0x1220>
    fb8a:	3608      	adds	r6, #8
    fb8c:	e7b0      	b.n	faf0 <_svfprintf_r+0xd90>
    fb8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fb90:	07ea      	lsls	r2, r5, #31
    fb92:	f53f ae27 	bmi.w	f7e4 <_svfprintf_r+0xa84>
    fb96:	3401      	adds	r4, #1
    fb98:	f10c 0801 	add.w	r8, ip, #1
    fb9c:	2301      	movs	r3, #1
    fb9e:	2c07      	cmp	r4, #7
    fba0:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    fba4:	942c      	str	r4, [sp, #176]	; 0xb0
    fba6:	6037      	str	r7, [r6, #0]
    fba8:	6073      	str	r3, [r6, #4]
    fbaa:	f77f ae4c 	ble.w	f846 <_svfprintf_r+0xae6>
    fbae:	e72c      	b.n	fa0a <_svfprintf_r+0xcaa>
    fbb0:	980d      	ldr	r0, [sp, #52]	; 0x34
    fbb2:	990c      	ldr	r1, [sp, #48]	; 0x30
    fbb4:	aa2b      	add	r2, sp, #172	; 0xac
    fbb6:	f002 fac1 	bl	1213c <__ssprint_r>
    fbba:	2800      	cmp	r0, #0
    fbbc:	f47f a9e8 	bne.w	ef90 <_svfprintf_r+0x230>
    fbc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fbc2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    fbc4:	ae38      	add	r6, sp, #224	; 0xe0
    fbc6:	e619      	b.n	f7fc <_svfprintf_r+0xa9c>
    fbc8:	980d      	ldr	r0, [sp, #52]	; 0x34
    fbca:	990c      	ldr	r1, [sp, #48]	; 0x30
    fbcc:	aa2b      	add	r2, sp, #172	; 0xac
    fbce:	f002 fab5 	bl	1213c <__ssprint_r>
    fbd2:	2800      	cmp	r0, #0
    fbd4:	f47f a9dc 	bne.w	ef90 <_svfprintf_r+0x230>
    fbd8:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
    fbdc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    fbde:	ae38      	add	r6, sp, #224	; 0xe0
    fbe0:	e61b      	b.n	f81a <_svfprintf_r+0xaba>
    fbe2:	980d      	ldr	r0, [sp, #52]	; 0x34
    fbe4:	990c      	ldr	r1, [sp, #48]	; 0x30
    fbe6:	aa2b      	add	r2, sp, #172	; 0xac
    fbe8:	f002 faa8 	bl	1213c <__ssprint_r>
    fbec:	2800      	cmp	r0, #0
    fbee:	f47f a9cf 	bne.w	ef90 <_svfprintf_r+0x230>
    fbf2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fbf6:	ae38      	add	r6, sp, #224	; 0xe0
    fbf8:	f7ff bad2 	b.w	f1a0 <_svfprintf_r+0x440>
    fbfc:	f7fc f918 	bl	be30 <__fpclassifyd>
    fc00:	2800      	cmp	r0, #0
    fc02:	f040 80c2 	bne.w	fd8a <_svfprintf_r+0x102a>
    fc06:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fc08:	4f1c      	ldr	r7, [pc, #112]	; (fc7c <_svfprintf_r+0xf1c>)
    fc0a:	4b1d      	ldr	r3, [pc, #116]	; (fc80 <_svfprintf_r+0xf20>)
    fc0c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    fc10:	900a      	str	r0, [sp, #40]	; 0x28
    fc12:	f04f 0c03 	mov.w	ip, #3
    fc16:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fc1a:	9409      	str	r4, [sp, #36]	; 0x24
    fc1c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    fc20:	9014      	str	r0, [sp, #80]	; 0x50
    fc22:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    fc26:	bfd8      	it	le
    fc28:	461f      	movle	r7, r3
    fc2a:	4664      	mov	r4, ip
    fc2c:	f7ff ba2f 	b.w	f08e <_svfprintf_r+0x32e>
    fc30:	e9d3 4500 	ldrd	r4, r5, [r3]
    fc34:	3308      	adds	r3, #8
    fc36:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    fc3a:	9310      	str	r3, [sp, #64]	; 0x40
    fc3c:	e476      	b.n	f52c <_svfprintf_r+0x7cc>
    fc3e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fc42:	f01c 0f10 	tst.w	ip, #16
    fc46:	f000 8155 	beq.w	fef4 <_svfprintf_r+0x1194>
    fc4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    fc4c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    fc4e:	6823      	ldr	r3, [r4, #0]
    fc50:	3404      	adds	r4, #4
    fc52:	9410      	str	r4, [sp, #64]	; 0x40
    fc54:	601d      	str	r5, [r3, #0]
    fc56:	f7ff b8a9 	b.w	edac <_svfprintf_r+0x4c>
    fc5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fc5c:	0664      	lsls	r4, r4, #25
    fc5e:	f140 8142 	bpl.w	fee6 <_svfprintf_r+0x1186>
    fc62:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    fc66:	f8bc 4000 	ldrh.w	r4, [ip]
    fc6a:	f10c 0c04 	add.w	ip, ip, #4
    fc6e:	2500      	movs	r5, #0
    fc70:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    fc74:	f7ff b9ca 	b.w	f00c <_svfprintf_r+0x2ac>
    fc78:	00014298 	.word	0x00014298
    fc7c:	000142b4 	.word	0x000142b4
    fc80:	000142b0 	.word	0x000142b0
    fc84:	462c      	mov	r4, r5
    fc86:	463d      	mov	r5, r7
    fc88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    fc8a:	4694      	mov	ip, r2
    fc8c:	3301      	adds	r3, #1
    fc8e:	44a4      	add	ip, r4
    fc90:	2b07      	cmp	r3, #7
    fc92:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    fc96:	932c      	str	r3, [sp, #176]	; 0xb0
    fc98:	6035      	str	r5, [r6, #0]
    fc9a:	6074      	str	r4, [r6, #4]
    fc9c:	f73f af14 	bgt.w	fac8 <_svfprintf_r+0xd68>
    fca0:	3608      	adds	r6, #8
    fca2:	e71c      	b.n	fade <_svfprintf_r+0xd7e>
    fca4:	980d      	ldr	r0, [sp, #52]	; 0x34
    fca6:	990c      	ldr	r1, [sp, #48]	; 0x30
    fca8:	aa2b      	add	r2, sp, #172	; 0xac
    fcaa:	f002 fa47 	bl	1213c <__ssprint_r>
    fcae:	2800      	cmp	r0, #0
    fcb0:	f47f a96e 	bne.w	ef90 <_svfprintf_r+0x230>
    fcb4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fcb8:	ae38      	add	r6, sp, #224	; 0xe0
    fcba:	e4fd      	b.n	f6b8 <_svfprintf_r+0x958>
    fcbc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    fcbe:	49b7      	ldr	r1, [pc, #732]	; (ff9c <_svfprintf_r+0x123c>)
    fcc0:	6031      	str	r1, [r6, #0]
    fcc2:	3201      	adds	r2, #1
    fcc4:	f10c 0c01 	add.w	ip, ip, #1
    fcc8:	2101      	movs	r1, #1
    fcca:	2a07      	cmp	r2, #7
    fccc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    fcd0:	922c      	str	r2, [sp, #176]	; 0xb0
    fcd2:	6071      	str	r1, [r6, #4]
    fcd4:	f300 80f7 	bgt.w	fec6 <_svfprintf_r+0x1166>
    fcd8:	3608      	adds	r6, #8
    fcda:	461c      	mov	r4, r3
    fcdc:	b92c      	cbnz	r4, fcea <_svfprintf_r+0xf8a>
    fcde:	9d11      	ldr	r5, [sp, #68]	; 0x44
    fce0:	b91d      	cbnz	r5, fcea <_svfprintf_r+0xf8a>
    fce2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fce4:	07e8      	lsls	r0, r5, #31
    fce6:	f57f aaad 	bpl.w	f244 <_svfprintf_r+0x4e4>
    fcea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fcec:	9918      	ldr	r1, [sp, #96]	; 0x60
    fcee:	9d15      	ldr	r5, [sp, #84]	; 0x54
    fcf0:	6035      	str	r5, [r6, #0]
    fcf2:	3301      	adds	r3, #1
    fcf4:	4461      	add	r1, ip
    fcf6:	9d18      	ldr	r5, [sp, #96]	; 0x60
    fcf8:	912d      	str	r1, [sp, #180]	; 0xb4
    fcfa:	2b07      	cmp	r3, #7
    fcfc:	6075      	str	r5, [r6, #4]
    fcfe:	932c      	str	r3, [sp, #176]	; 0xb0
    fd00:	f300 81de 	bgt.w	100c0 <_svfprintf_r+0x1360>
    fd04:	f106 0208 	add.w	r2, r6, #8
    fd08:	4264      	negs	r4, r4
    fd0a:	2c00      	cmp	r4, #0
    fd0c:	f340 810b 	ble.w	ff26 <_svfprintf_r+0x11c6>
    fd10:	2c10      	cmp	r4, #16
    fd12:	4da3      	ldr	r5, [pc, #652]	; (ffa0 <_svfprintf_r+0x1240>)
    fd14:	f340 8148 	ble.w	ffa8 <_svfprintf_r+0x1248>
    fd18:	46a3      	mov	fp, r4
    fd1a:	2610      	movs	r6, #16
    fd1c:	460c      	mov	r4, r1
    fd1e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    fd22:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    fd26:	e006      	b.n	fd36 <_svfprintf_r+0xfd6>
    fd28:	3208      	adds	r2, #8
    fd2a:	f1ab 0b10 	sub.w	fp, fp, #16
    fd2e:	f1bb 0f10 	cmp.w	fp, #16
    fd32:	f340 8137 	ble.w	ffa4 <_svfprintf_r+0x1244>
    fd36:	3301      	adds	r3, #1
    fd38:	3410      	adds	r4, #16
    fd3a:	2b07      	cmp	r3, #7
    fd3c:	942d      	str	r4, [sp, #180]	; 0xb4
    fd3e:	932c      	str	r3, [sp, #176]	; 0xb0
    fd40:	e882 0060 	stmia.w	r2, {r5, r6}
    fd44:	ddf0      	ble.n	fd28 <_svfprintf_r+0xfc8>
    fd46:	4640      	mov	r0, r8
    fd48:	4651      	mov	r1, sl
    fd4a:	aa2b      	add	r2, sp, #172	; 0xac
    fd4c:	f002 f9f6 	bl	1213c <__ssprint_r>
    fd50:	2800      	cmp	r0, #0
    fd52:	f47f a91d 	bne.w	ef90 <_svfprintf_r+0x230>
    fd56:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
    fd58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fd5a:	aa38      	add	r2, sp, #224	; 0xe0
    fd5c:	e7e5      	b.n	fd2a <_svfprintf_r+0xfca>
    fd5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fd60:	f893 8001 	ldrb.w	r8, [r3, #1]
    fd64:	f044 0420 	orr.w	r4, r4, #32
    fd68:	f109 0901 	add.w	r9, r9, #1
    fd6c:	9409      	str	r4, [sp, #36]	; 0x24
    fd6e:	f7ff b853 	b.w	ee18 <_svfprintf_r+0xb8>
    fd72:	980d      	ldr	r0, [sp, #52]	; 0x34
    fd74:	990c      	ldr	r1, [sp, #48]	; 0x30
    fd76:	aa2b      	add	r2, sp, #172	; 0xac
    fd78:	f002 f9e0 	bl	1213c <__ssprint_r>
    fd7c:	2800      	cmp	r0, #0
    fd7e:	f47f a907 	bne.w	ef90 <_svfprintf_r+0x230>
    fd82:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fd86:	ae38      	add	r6, sp, #224	; 0xe0
    fd88:	e4ac      	b.n	f6e4 <_svfprintf_r+0x984>
    fd8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fd8c:	3501      	adds	r5, #1
    fd8e:	f028 0a20 	bic.w	sl, r8, #32
    fd92:	f000 80a5 	beq.w	fee0 <_svfprintf_r+0x1180>
    fd96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
    fd9a:	d104      	bne.n	fda6 <_svfprintf_r+0x1046>
    fd9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fd9e:	2d00      	cmp	r5, #0
    fda0:	bf08      	it	eq
    fda2:	2501      	moveq	r5, #1
    fda4:	950a      	str	r5, [sp, #40]	; 0x28
    fda6:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    fdaa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fdae:	2b00      	cmp	r3, #0
    fdb0:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
    fdb4:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
    fdb8:	f2c0 819c 	blt.w	100f4 <_svfprintf_r+0x1394>
    fdbc:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    fdc0:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
    fdc4:	f04f 0b00 	mov.w	fp, #0
    fdc8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    fdcc:	f000 819b 	beq.w	10106 <_svfprintf_r+0x13a6>
    fdd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    fdd4:	f000 81a9 	beq.w	1012a <_svfprintf_r+0x13ca>
    fdd8:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
    fddc:	bf0a      	itet	eq
    fdde:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
    fde0:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
    fde2:	1c65      	addeq	r5, r4, #1
    fde4:	2002      	movs	r0, #2
    fde6:	a925      	add	r1, sp, #148	; 0x94
    fde8:	aa26      	add	r2, sp, #152	; 0x98
    fdea:	ab29      	add	r3, sp, #164	; 0xa4
    fdec:	e88d 0021 	stmia.w	sp, {r0, r5}
    fdf0:	9203      	str	r2, [sp, #12]
    fdf2:	9304      	str	r3, [sp, #16]
    fdf4:	9102      	str	r1, [sp, #8]
    fdf6:	980d      	ldr	r0, [sp, #52]	; 0x34
    fdf8:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    fdfc:	f000 fc24 	bl	10648 <_dtoa_r>
    fe00:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
    fe04:	4607      	mov	r7, r0
    fe06:	d002      	beq.n	fe0e <_svfprintf_r+0x10ae>
    fe08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    fe0c:	d105      	bne.n	fe1a <_svfprintf_r+0x10ba>
    fe0e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fe12:	f01c 0f01 	tst.w	ip, #1
    fe16:	f000 819c 	beq.w	10152 <_svfprintf_r+0x13f2>
    fe1a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
    fe1e:	eb07 0405 	add.w	r4, r7, r5
    fe22:	f000 811c 	beq.w	1005e <_svfprintf_r+0x12fe>
    fe26:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
    fe2a:	2200      	movs	r2, #0
    fe2c:	2300      	movs	r3, #0
    fe2e:	f7fc fcdd 	bl	c7ec <__aeabi_dcmpeq>
    fe32:	2800      	cmp	r0, #0
    fe34:	f040 8105 	bne.w	10042 <_svfprintf_r+0x12e2>
    fe38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    fe3a:	429c      	cmp	r4, r3
    fe3c:	d906      	bls.n	fe4c <_svfprintf_r+0x10ec>
    fe3e:	2130      	movs	r1, #48	; 0x30
    fe40:	1c5a      	adds	r2, r3, #1
    fe42:	9229      	str	r2, [sp, #164]	; 0xa4
    fe44:	7019      	strb	r1, [r3, #0]
    fe46:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    fe48:	429c      	cmp	r4, r3
    fe4a:	d8f9      	bhi.n	fe40 <_svfprintf_r+0x10e0>
    fe4c:	1bdb      	subs	r3, r3, r7
    fe4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
    fe52:	9311      	str	r3, [sp, #68]	; 0x44
    fe54:	f000 80ed 	beq.w	10032 <_svfprintf_r+0x12d2>
    fe58:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    fe5c:	f340 81f2 	ble.w	10244 <_svfprintf_r+0x14e4>
    fe60:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    fe64:	f000 8168 	beq.w	10138 <_svfprintf_r+0x13d8>
    fe68:	9c25      	ldr	r4, [sp, #148]	; 0x94
    fe6a:	9414      	str	r4, [sp, #80]	; 0x50
    fe6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
    fe6e:	9d14      	ldr	r5, [sp, #80]	; 0x50
    fe70:	42ac      	cmp	r4, r5
    fe72:	f300 8132 	bgt.w	100da <_svfprintf_r+0x137a>
    fe76:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fe7a:	f01c 0f01 	tst.w	ip, #1
    fe7e:	f040 81ad 	bne.w	101dc <_svfprintf_r+0x147c>
    fe82:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    fe86:	462c      	mov	r4, r5
    fe88:	f04f 0867 	mov.w	r8, #103	; 0x67
    fe8c:	f1bb 0f00 	cmp.w	fp, #0
    fe90:	f040 80b2 	bne.w	fff8 <_svfprintf_r+0x1298>
    fe94:	9d12      	ldr	r5, [sp, #72]	; 0x48
    fe96:	930b      	str	r3, [sp, #44]	; 0x2c
    fe98:	9509      	str	r5, [sp, #36]	; 0x24
    fe9a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fe9e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    fea2:	f7ff b8f4 	b.w	f08e <_svfprintf_r+0x32e>
    fea6:	980d      	ldr	r0, [sp, #52]	; 0x34
    fea8:	2140      	movs	r1, #64	; 0x40
    feaa:	f7fd fef5 	bl	dc98 <_malloc_r>
    feae:	6020      	str	r0, [r4, #0]
    feb0:	6120      	str	r0, [r4, #16]
    feb2:	2800      	cmp	r0, #0
    feb4:	f000 81bf 	beq.w	10236 <_svfprintf_r+0x14d6>
    feb8:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    febc:	2340      	movs	r3, #64	; 0x40
    febe:	f8cc 3014 	str.w	r3, [ip, #20]
    fec2:	f7fe bf63 	b.w	ed8c <_svfprintf_r+0x2c>
    fec6:	980d      	ldr	r0, [sp, #52]	; 0x34
    fec8:	990c      	ldr	r1, [sp, #48]	; 0x30
    feca:	aa2b      	add	r2, sp, #172	; 0xac
    fecc:	f002 f936 	bl	1213c <__ssprint_r>
    fed0:	2800      	cmp	r0, #0
    fed2:	f47f a85d 	bne.w	ef90 <_svfprintf_r+0x230>
    fed6:	9c25      	ldr	r4, [sp, #148]	; 0x94
    fed8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fedc:	ae38      	add	r6, sp, #224	; 0xe0
    fede:	e6fd      	b.n	fcdc <_svfprintf_r+0xf7c>
    fee0:	2406      	movs	r4, #6
    fee2:	940a      	str	r4, [sp, #40]	; 0x28
    fee4:	e75f      	b.n	fda6 <_svfprintf_r+0x1046>
    fee6:	9d10      	ldr	r5, [sp, #64]	; 0x40
    fee8:	682c      	ldr	r4, [r5, #0]
    feea:	3504      	adds	r5, #4
    feec:	9510      	str	r5, [sp, #64]	; 0x40
    feee:	2500      	movs	r5, #0
    fef0:	f7ff b88c 	b.w	f00c <_svfprintf_r+0x2ac>
    fef4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fef8:	f01c 0f40 	tst.w	ip, #64	; 0x40
    fefc:	f000 8087 	beq.w	1000e <_svfprintf_r+0x12ae>
    ff00:	9c10      	ldr	r4, [sp, #64]	; 0x40
    ff02:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ff04:	6823      	ldr	r3, [r4, #0]
    ff06:	3404      	adds	r4, #4
    ff08:	9410      	str	r4, [sp, #64]	; 0x40
    ff0a:	801d      	strh	r5, [r3, #0]
    ff0c:	f7fe bf4e 	b.w	edac <_svfprintf_r+0x4c>
    ff10:	980d      	ldr	r0, [sp, #52]	; 0x34
    ff12:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff14:	aa2b      	add	r2, sp, #172	; 0xac
    ff16:	f002 f911 	bl	1213c <__ssprint_r>
    ff1a:	2800      	cmp	r0, #0
    ff1c:	f47f a838 	bne.w	ef90 <_svfprintf_r+0x230>
    ff20:	992d      	ldr	r1, [sp, #180]	; 0xb4
    ff22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    ff24:	aa38      	add	r2, sp, #224	; 0xe0
    ff26:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    ff2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    ff2c:	6017      	str	r7, [r2, #0]
    ff2e:	3301      	adds	r3, #1
    ff30:	448c      	add	ip, r1
    ff32:	2b07      	cmp	r3, #7
    ff34:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    ff38:	932c      	str	r3, [sp, #176]	; 0xb0
    ff3a:	6054      	str	r4, [r2, #4]
    ff3c:	f73f ac92 	bgt.w	f864 <_svfprintf_r+0xb04>
    ff40:	f102 0608 	add.w	r6, r2, #8
    ff44:	f7ff b97e 	b.w	f244 <_svfprintf_r+0x4e4>
    ff48:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    ff4c:	f7f2 fc44 	bl	27d8 <strlen>
    ff50:	9510      	str	r5, [sp, #64]	; 0x40
    ff52:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    ff56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ff58:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    ff5c:	4604      	mov	r4, r0
    ff5e:	9514      	str	r5, [sp, #80]	; 0x50
    ff60:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    ff64:	f7ff b893 	b.w	f08e <_svfprintf_r+0x32e>
    ff68:	980d      	ldr	r0, [sp, #52]	; 0x34
    ff6a:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff6c:	aa2b      	add	r2, sp, #172	; 0xac
    ff6e:	f002 f8e5 	bl	1213c <__ssprint_r>
    ff72:	2800      	cmp	r0, #0
    ff74:	f47f a80c 	bne.w	ef90 <_svfprintf_r+0x230>
    ff78:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    ff7c:	ae38      	add	r6, sp, #224	; 0xe0
    ff7e:	e4cc      	b.n	f91a <_svfprintf_r+0xbba>
    ff80:	980d      	ldr	r0, [sp, #52]	; 0x34
    ff82:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff84:	aa2b      	add	r2, sp, #172	; 0xac
    ff86:	f002 f8d9 	bl	1213c <__ssprint_r>
    ff8a:	2800      	cmp	r0, #0
    ff8c:	f47f a800 	bne.w	ef90 <_svfprintf_r+0x230>
    ff90:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ff92:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    ff96:	ae38      	add	r6, sp, #224	; 0xe0
    ff98:	e5aa      	b.n	faf0 <_svfprintf_r+0xd90>
    ff9a:	bf00      	nop
    ff9c:	000142e8 	.word	0x000142e8
    ffa0:	00014298 	.word	0x00014298
    ffa4:	4621      	mov	r1, r4
    ffa6:	465c      	mov	r4, fp
    ffa8:	3301      	adds	r3, #1
    ffaa:	4421      	add	r1, r4
    ffac:	2b07      	cmp	r3, #7
    ffae:	912d      	str	r1, [sp, #180]	; 0xb4
    ffb0:	932c      	str	r3, [sp, #176]	; 0xb0
    ffb2:	6015      	str	r5, [r2, #0]
    ffb4:	6054      	str	r4, [r2, #4]
    ffb6:	dcab      	bgt.n	ff10 <_svfprintf_r+0x11b0>
    ffb8:	3208      	adds	r2, #8
    ffba:	e7b4      	b.n	ff26 <_svfprintf_r+0x11c6>
    ffbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    ffbe:	990c      	ldr	r1, [sp, #48]	; 0x30
    ffc0:	aa2b      	add	r2, sp, #172	; 0xac
    ffc2:	f002 f8bb 	bl	1213c <__ssprint_r>
    ffc6:	2800      	cmp	r0, #0
    ffc8:	f47e afe2 	bne.w	ef90 <_svfprintf_r+0x230>
    ffcc:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ffce:	9911      	ldr	r1, [sp, #68]	; 0x44
    ffd0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    ffd4:	1b0c      	subs	r4, r1, r4
    ffd6:	ae38      	add	r6, sp, #224	; 0xe0
    ffd8:	e59f      	b.n	fb1a <_svfprintf_r+0xdba>
    ffda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ffdc:	9714      	str	r7, [sp, #80]	; 0x50
    ffde:	2c06      	cmp	r4, #6
    ffe0:	bf28      	it	cs
    ffe2:	2406      	movcs	r4, #6
    ffe4:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
    ffe8:	46ba      	mov	sl, r7
    ffea:	970a      	str	r7, [sp, #40]	; 0x28
    ffec:	9510      	str	r5, [sp, #64]	; 0x40
    ffee:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    fff2:	4f97      	ldr	r7, [pc, #604]	; (10250 <_svfprintf_r+0x14f0>)
    fff4:	f7ff b84b 	b.w	f08e <_svfprintf_r+0x32e>
    fff8:	9d12      	ldr	r5, [sp, #72]	; 0x48
    fffa:	9509      	str	r5, [sp, #36]	; 0x24
    fffc:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   10000:	2500      	movs	r5, #0
   10002:	930b      	str	r3, [sp, #44]	; 0x2c
   10004:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   10008:	950a      	str	r5, [sp, #40]	; 0x28
   1000a:	f7ff b843 	b.w	f094 <_svfprintf_r+0x334>
   1000e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   10012:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   10014:	f8dc 3000 	ldr.w	r3, [ip]
   10018:	f10c 0c04 	add.w	ip, ip, #4
   1001c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10020:	601c      	str	r4, [r3, #0]
   10022:	f7fe bec3 	b.w	edac <_svfprintf_r+0x4c>
   10026:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1002a:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   1002e:	f7ff ba8f 	b.w	f550 <_svfprintf_r+0x7f0>
   10032:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10034:	1cdc      	adds	r4, r3, #3
   10036:	db19      	blt.n	1006c <_svfprintf_r+0x130c>
   10038:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1003a:	429c      	cmp	r4, r3
   1003c:	db16      	blt.n	1006c <_svfprintf_r+0x130c>
   1003e:	9314      	str	r3, [sp, #80]	; 0x50
   10040:	e714      	b.n	fe6c <_svfprintf_r+0x110c>
   10042:	4623      	mov	r3, r4
   10044:	e702      	b.n	fe4c <_svfprintf_r+0x10ec>
   10046:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   1004a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1004e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10050:	9510      	str	r5, [sp, #64]	; 0x40
   10052:	900a      	str	r0, [sp, #40]	; 0x28
   10054:	9014      	str	r0, [sp, #80]	; 0x50
   10056:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   1005a:	f7ff b818 	b.w	f08e <_svfprintf_r+0x32e>
   1005e:	783b      	ldrb	r3, [r7, #0]
   10060:	2b30      	cmp	r3, #48	; 0x30
   10062:	f000 80ad 	beq.w	101c0 <_svfprintf_r+0x1460>
   10066:	9d25      	ldr	r5, [sp, #148]	; 0x94
   10068:	442c      	add	r4, r5
   1006a:	e6dc      	b.n	fe26 <_svfprintf_r+0x10c6>
   1006c:	f1a8 0802 	sub.w	r8, r8, #2
   10070:	3b01      	subs	r3, #1
   10072:	2b00      	cmp	r3, #0
   10074:	9325      	str	r3, [sp, #148]	; 0x94
   10076:	bfba      	itte	lt
   10078:	425b      	neglt	r3, r3
   1007a:	222d      	movlt	r2, #45	; 0x2d
   1007c:	222b      	movge	r2, #43	; 0x2b
   1007e:	2b09      	cmp	r3, #9
   10080:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
   10084:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
   10088:	dc65      	bgt.n	10156 <_svfprintf_r+0x13f6>
   1008a:	3330      	adds	r3, #48	; 0x30
   1008c:	2230      	movs	r2, #48	; 0x30
   1008e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
   10092:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
   10096:	ab28      	add	r3, sp, #160	; 0xa0
   10098:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1009a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1009c:	aa27      	add	r2, sp, #156	; 0x9c
   1009e:	1a9a      	subs	r2, r3, r2
   100a0:	2d01      	cmp	r5, #1
   100a2:	9219      	str	r2, [sp, #100]	; 0x64
   100a4:	4414      	add	r4, r2
   100a6:	f340 80b7 	ble.w	10218 <_svfprintf_r+0x14b8>
   100aa:	3401      	adds	r4, #1
   100ac:	2500      	movs	r5, #0
   100ae:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   100b2:	9514      	str	r5, [sp, #80]	; 0x50
   100b4:	e6ea      	b.n	fe8c <_svfprintf_r+0x112c>
   100b6:	2400      	movs	r4, #0
   100b8:	4681      	mov	r9, r0
   100ba:	940a      	str	r4, [sp, #40]	; 0x28
   100bc:	f7fe beae 	b.w	ee1c <_svfprintf_r+0xbc>
   100c0:	980d      	ldr	r0, [sp, #52]	; 0x34
   100c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   100c4:	aa2b      	add	r2, sp, #172	; 0xac
   100c6:	f002 f839 	bl	1213c <__ssprint_r>
   100ca:	2800      	cmp	r0, #0
   100cc:	f47e af60 	bne.w	ef90 <_svfprintf_r+0x230>
   100d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
   100d2:	992d      	ldr	r1, [sp, #180]	; 0xb4
   100d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   100d6:	aa38      	add	r2, sp, #224	; 0xe0
   100d8:	e616      	b.n	fd08 <_svfprintf_r+0xfa8>
   100da:	9c14      	ldr	r4, [sp, #80]	; 0x50
   100dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
   100de:	2c00      	cmp	r4, #0
   100e0:	bfd4      	ite	le
   100e2:	f1c4 0402 	rsble	r4, r4, #2
   100e6:	2401      	movgt	r4, #1
   100e8:	442c      	add	r4, r5
   100ea:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   100ee:	f04f 0867 	mov.w	r8, #103	; 0x67
   100f2:	e6cb      	b.n	fe8c <_svfprintf_r+0x112c>
   100f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
   100f6:	9816      	ldr	r0, [sp, #88]	; 0x58
   100f8:	9020      	str	r0, [sp, #128]	; 0x80
   100fa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   100fe:	9121      	str	r1, [sp, #132]	; 0x84
   10100:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   10104:	e660      	b.n	fdc8 <_svfprintf_r+0x1068>
   10106:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10108:	9501      	str	r5, [sp, #4]
   1010a:	2003      	movs	r0, #3
   1010c:	a925      	add	r1, sp, #148	; 0x94
   1010e:	aa26      	add	r2, sp, #152	; 0x98
   10110:	ab29      	add	r3, sp, #164	; 0xa4
   10112:	9000      	str	r0, [sp, #0]
   10114:	9203      	str	r2, [sp, #12]
   10116:	9304      	str	r3, [sp, #16]
   10118:	9102      	str	r1, [sp, #8]
   1011a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1011c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   10120:	f000 fa92 	bl	10648 <_dtoa_r>
   10124:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10126:	4607      	mov	r7, r0
   10128:	e677      	b.n	fe1a <_svfprintf_r+0x10ba>
   1012a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1012c:	9401      	str	r4, [sp, #4]
   1012e:	2003      	movs	r0, #3
   10130:	a925      	add	r1, sp, #148	; 0x94
   10132:	aa26      	add	r2, sp, #152	; 0x98
   10134:	ab29      	add	r3, sp, #164	; 0xa4
   10136:	e7ec      	b.n	10112 <_svfprintf_r+0x13b2>
   10138:	9d25      	ldr	r5, [sp, #148]	; 0x94
   1013a:	9514      	str	r5, [sp, #80]	; 0x50
   1013c:	2d00      	cmp	r5, #0
   1013e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10140:	dd63      	ble.n	1020a <_svfprintf_r+0x14aa>
   10142:	bbb4      	cbnz	r4, 101b2 <_svfprintf_r+0x1452>
   10144:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10146:	07e8      	lsls	r0, r5, #31
   10148:	d433      	bmi.n	101b2 <_svfprintf_r+0x1452>
   1014a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1014c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   10150:	e69c      	b.n	fe8c <_svfprintf_r+0x112c>
   10152:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   10154:	e67a      	b.n	fe4c <_svfprintf_r+0x10ec>
   10156:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
   1015a:	4d3e      	ldr	r5, [pc, #248]	; (10254 <_svfprintf_r+0x14f4>)
   1015c:	17da      	asrs	r2, r3, #31
   1015e:	fb85 5103 	smull	r5, r1, r5, r3
   10162:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
   10166:	eb01 0481 	add.w	r4, r1, r1, lsl #2
   1016a:	4602      	mov	r2, r0
   1016c:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
   10170:	f103 0030 	add.w	r0, r3, #48	; 0x30
   10174:	2909      	cmp	r1, #9
   10176:	7010      	strb	r0, [r2, #0]
   10178:	460b      	mov	r3, r1
   1017a:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
   1017e:	dcec      	bgt.n	1015a <_svfprintf_r+0x13fa>
   10180:	f101 0330 	add.w	r3, r1, #48	; 0x30
   10184:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
   10188:	b2d9      	uxtb	r1, r3
   1018a:	4284      	cmp	r4, r0
   1018c:	f802 1c01 	strb.w	r1, [r2, #-1]
   10190:	d95a      	bls.n	10248 <_svfprintf_r+0x14e8>
   10192:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
   10196:	4613      	mov	r3, r2
   10198:	e001      	b.n	1019e <_svfprintf_r+0x143e>
   1019a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1019e:	42a3      	cmp	r3, r4
   101a0:	f800 1f01 	strb.w	r1, [r0, #1]!
   101a4:	d1f9      	bne.n	1019a <_svfprintf_r+0x143a>
   101a6:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
   101aa:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
   101ae:	3bf6      	subs	r3, #246	; 0xf6
   101b0:	e772      	b.n	10098 <_svfprintf_r+0x1338>
   101b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   101b4:	1c6c      	adds	r4, r5, #1
   101b6:	9d14      	ldr	r5, [sp, #80]	; 0x50
   101b8:	442c      	add	r4, r5
   101ba:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   101be:	e665      	b.n	fe8c <_svfprintf_r+0x112c>
   101c0:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   101c4:	2200      	movs	r2, #0
   101c6:	2300      	movs	r3, #0
   101c8:	f7fc fb10 	bl	c7ec <__aeabi_dcmpeq>
   101cc:	2800      	cmp	r0, #0
   101ce:	f47f af4a 	bne.w	10066 <_svfprintf_r+0x1306>
   101d2:	f1c5 0501 	rsb	r5, r5, #1
   101d6:	9525      	str	r5, [sp, #148]	; 0x94
   101d8:	442c      	add	r4, r5
   101da:	e624      	b.n	fe26 <_svfprintf_r+0x10c6>
   101dc:	9d14      	ldr	r5, [sp, #80]	; 0x50
   101de:	1c6c      	adds	r4, r5, #1
   101e0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   101e4:	f04f 0867 	mov.w	r8, #103	; 0x67
   101e8:	e650      	b.n	fe8c <_svfprintf_r+0x112c>
   101ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
   101ec:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   101f0:	682d      	ldr	r5, [r5, #0]
   101f2:	f899 8001 	ldrb.w	r8, [r9, #1]
   101f6:	950a      	str	r5, [sp, #40]	; 0x28
   101f8:	f10c 0304 	add.w	r3, ip, #4
   101fc:	2d00      	cmp	r5, #0
   101fe:	9310      	str	r3, [sp, #64]	; 0x40
   10200:	4681      	mov	r9, r0
   10202:	f6be ae09 	bge.w	ee18 <_svfprintf_r+0xb8>
   10206:	f7fe be04 	b.w	ee12 <_svfprintf_r+0xb2>
   1020a:	b97c      	cbnz	r4, 1022c <_svfprintf_r+0x14cc>
   1020c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1020e:	07e9      	lsls	r1, r5, #31
   10210:	d40c      	bmi.n	1022c <_svfprintf_r+0x14cc>
   10212:	2301      	movs	r3, #1
   10214:	461c      	mov	r4, r3
   10216:	e639      	b.n	fe8c <_svfprintf_r+0x112c>
   10218:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1021c:	f01c 0301 	ands.w	r3, ip, #1
   10220:	f47f af43 	bne.w	100aa <_svfprintf_r+0x134a>
   10224:	9314      	str	r3, [sp, #80]	; 0x50
   10226:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   1022a:	e62f      	b.n	fe8c <_svfprintf_r+0x112c>
   1022c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1022e:	1cac      	adds	r4, r5, #2
   10230:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   10234:	e62a      	b.n	fe8c <_svfprintf_r+0x112c>
   10236:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10238:	230c      	movs	r3, #12
   1023a:	602b      	str	r3, [r5, #0]
   1023c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10240:	f7fe beae 	b.w	efa0 <_svfprintf_r+0x240>
   10244:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10246:	e713      	b.n	10070 <_svfprintf_r+0x1310>
   10248:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
   1024c:	e724      	b.n	10098 <_svfprintf_r+0x1338>
   1024e:	bf00      	nop
   10250:	000142e0 	.word	0x000142e0
   10254:	66666667 	.word	0x66666667

00010258 <_vdprintf_r>:
   10258:	b5f0      	push	{r4, r5, r6, r7, lr}
   1025a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   1025e:	ad04      	add	r5, sp, #16
   10260:	9300      	str	r3, [sp, #0]
   10262:	f44f 7400 	mov.w	r4, #512	; 0x200
   10266:	4613      	mov	r3, r2
   10268:	460f      	mov	r7, r1
   1026a:	aa03      	add	r2, sp, #12
   1026c:	4629      	mov	r1, r5
   1026e:	9403      	str	r4, [sp, #12]
   10270:	4606      	mov	r6, r0
   10272:	f001 ffe3 	bl	1223c <_vasnprintf_r>
   10276:	4604      	mov	r4, r0
   10278:	b180      	cbz	r0, 1029c <_vdprintf_r+0x44>
   1027a:	4639      	mov	r1, r7
   1027c:	4630      	mov	r0, r6
   1027e:	4622      	mov	r2, r4
   10280:	9b03      	ldr	r3, [sp, #12]
   10282:	f000 f86f 	bl	10364 <_write_r>
   10286:	42ac      	cmp	r4, r5
   10288:	9003      	str	r0, [sp, #12]
   1028a:	d004      	beq.n	10296 <_vdprintf_r+0x3e>
   1028c:	4630      	mov	r0, r6
   1028e:	4621      	mov	r1, r4
   10290:	f001 faa0 	bl	117d4 <_free_r>
   10294:	9803      	ldr	r0, [sp, #12]
   10296:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   1029a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1029c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   102a0:	e7f9      	b.n	10296 <_vdprintf_r+0x3e>
   102a2:	bf00      	nop

000102a4 <vdprintf>:
   102a4:	b430      	push	{r4, r5}
   102a6:	4c04      	ldr	r4, [pc, #16]	; (102b8 <vdprintf+0x14>)
   102a8:	460d      	mov	r5, r1
   102aa:	4613      	mov	r3, r2
   102ac:	4601      	mov	r1, r0
   102ae:	462a      	mov	r2, r5
   102b0:	6820      	ldr	r0, [r4, #0]
   102b2:	bc30      	pop	{r4, r5}
   102b4:	f7ff bfd0 	b.w	10258 <_vdprintf_r>
   102b8:	1fff88f0 	.word	0x1fff88f0

000102bc <__swbuf_r>:
   102bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102be:	460d      	mov	r5, r1
   102c0:	4614      	mov	r4, r2
   102c2:	4607      	mov	r7, r0
   102c4:	b110      	cbz	r0, 102cc <__swbuf_r+0x10>
   102c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   102c8:	2b00      	cmp	r3, #0
   102ca:	d048      	beq.n	1035e <__swbuf_r+0xa2>
   102cc:	89a2      	ldrh	r2, [r4, #12]
   102ce:	69a3      	ldr	r3, [r4, #24]
   102d0:	60a3      	str	r3, [r4, #8]
   102d2:	b293      	uxth	r3, r2
   102d4:	0718      	lsls	r0, r3, #28
   102d6:	d538      	bpl.n	1034a <__swbuf_r+0x8e>
   102d8:	6926      	ldr	r6, [r4, #16]
   102da:	2e00      	cmp	r6, #0
   102dc:	d035      	beq.n	1034a <__swbuf_r+0x8e>
   102de:	0499      	lsls	r1, r3, #18
   102e0:	b2ed      	uxtb	r5, r5
   102e2:	d515      	bpl.n	10310 <__swbuf_r+0x54>
   102e4:	6823      	ldr	r3, [r4, #0]
   102e6:	6962      	ldr	r2, [r4, #20]
   102e8:	1b9e      	subs	r6, r3, r6
   102ea:	4296      	cmp	r6, r2
   102ec:	da1c      	bge.n	10328 <__swbuf_r+0x6c>
   102ee:	3601      	adds	r6, #1
   102f0:	68a2      	ldr	r2, [r4, #8]
   102f2:	1c59      	adds	r1, r3, #1
   102f4:	3a01      	subs	r2, #1
   102f6:	60a2      	str	r2, [r4, #8]
   102f8:	6021      	str	r1, [r4, #0]
   102fa:	701d      	strb	r5, [r3, #0]
   102fc:	6963      	ldr	r3, [r4, #20]
   102fe:	42b3      	cmp	r3, r6
   10300:	d01a      	beq.n	10338 <__swbuf_r+0x7c>
   10302:	89a3      	ldrh	r3, [r4, #12]
   10304:	07db      	lsls	r3, r3, #31
   10306:	d501      	bpl.n	1030c <__swbuf_r+0x50>
   10308:	2d0a      	cmp	r5, #10
   1030a:	d015      	beq.n	10338 <__swbuf_r+0x7c>
   1030c:	4628      	mov	r0, r5
   1030e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10310:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   10316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1031a:	6663      	str	r3, [r4, #100]	; 0x64
   1031c:	6823      	ldr	r3, [r4, #0]
   1031e:	81a2      	strh	r2, [r4, #12]
   10320:	6962      	ldr	r2, [r4, #20]
   10322:	1b9e      	subs	r6, r3, r6
   10324:	4296      	cmp	r6, r2
   10326:	dbe2      	blt.n	102ee <__swbuf_r+0x32>
   10328:	4638      	mov	r0, r7
   1032a:	4621      	mov	r1, r4
   1032c:	f001 f952 	bl	115d4 <_fflush_r>
   10330:	b940      	cbnz	r0, 10344 <__swbuf_r+0x88>
   10332:	6823      	ldr	r3, [r4, #0]
   10334:	2601      	movs	r6, #1
   10336:	e7db      	b.n	102f0 <__swbuf_r+0x34>
   10338:	4638      	mov	r0, r7
   1033a:	4621      	mov	r1, r4
   1033c:	f001 f94a 	bl	115d4 <_fflush_r>
   10340:	2800      	cmp	r0, #0
   10342:	d0e3      	beq.n	1030c <__swbuf_r+0x50>
   10344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1034a:	4638      	mov	r0, r7
   1034c:	4621      	mov	r1, r4
   1034e:	f000 f81d 	bl	1038c <__swsetup_r>
   10352:	2800      	cmp	r0, #0
   10354:	d1f6      	bne.n	10344 <__swbuf_r+0x88>
   10356:	89a2      	ldrh	r2, [r4, #12]
   10358:	6926      	ldr	r6, [r4, #16]
   1035a:	b293      	uxth	r3, r2
   1035c:	e7bf      	b.n	102de <__swbuf_r+0x22>
   1035e:	f001 f955 	bl	1160c <__sinit>
   10362:	e7b3      	b.n	102cc <__swbuf_r+0x10>

00010364 <_write_r>:
   10364:	b570      	push	{r4, r5, r6, lr}
   10366:	4c08      	ldr	r4, [pc, #32]	; (10388 <_write_r+0x24>)
   10368:	4606      	mov	r6, r0
   1036a:	2500      	movs	r5, #0
   1036c:	4608      	mov	r0, r1
   1036e:	4611      	mov	r1, r2
   10370:	461a      	mov	r2, r3
   10372:	6025      	str	r5, [r4, #0]
   10374:	f7f2 fc94 	bl	2ca0 <_write>
   10378:	1c43      	adds	r3, r0, #1
   1037a:	d000      	beq.n	1037e <_write_r+0x1a>
   1037c:	bd70      	pop	{r4, r5, r6, pc}
   1037e:	6823      	ldr	r3, [r4, #0]
   10380:	2b00      	cmp	r3, #0
   10382:	d0fb      	beq.n	1037c <_write_r+0x18>
   10384:	6033      	str	r3, [r6, #0]
   10386:	bd70      	pop	{r4, r5, r6, pc}
   10388:	1fff9c90 	.word	0x1fff9c90

0001038c <__swsetup_r>:
   1038c:	4b2f      	ldr	r3, [pc, #188]	; (1044c <__swsetup_r+0xc0>)
   1038e:	681b      	ldr	r3, [r3, #0]
   10390:	b570      	push	{r4, r5, r6, lr}
   10392:	4606      	mov	r6, r0
   10394:	460c      	mov	r4, r1
   10396:	b113      	cbz	r3, 1039e <__swsetup_r+0x12>
   10398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1039a:	2a00      	cmp	r2, #0
   1039c:	d036      	beq.n	1040c <__swsetup_r+0x80>
   1039e:	89a5      	ldrh	r5, [r4, #12]
   103a0:	b2ab      	uxth	r3, r5
   103a2:	0719      	lsls	r1, r3, #28
   103a4:	d50c      	bpl.n	103c0 <__swsetup_r+0x34>
   103a6:	6922      	ldr	r2, [r4, #16]
   103a8:	b1aa      	cbz	r2, 103d6 <__swsetup_r+0x4a>
   103aa:	f013 0101 	ands.w	r1, r3, #1
   103ae:	d01e      	beq.n	103ee <__swsetup_r+0x62>
   103b0:	6963      	ldr	r3, [r4, #20]
   103b2:	2100      	movs	r1, #0
   103b4:	425b      	negs	r3, r3
   103b6:	61a3      	str	r3, [r4, #24]
   103b8:	60a1      	str	r1, [r4, #8]
   103ba:	b1f2      	cbz	r2, 103fa <__swsetup_r+0x6e>
   103bc:	2000      	movs	r0, #0
   103be:	bd70      	pop	{r4, r5, r6, pc}
   103c0:	06da      	lsls	r2, r3, #27
   103c2:	d53b      	bpl.n	1043c <__swsetup_r+0xb0>
   103c4:	075b      	lsls	r3, r3, #29
   103c6:	d425      	bmi.n	10414 <__swsetup_r+0x88>
   103c8:	6922      	ldr	r2, [r4, #16]
   103ca:	f045 0308 	orr.w	r3, r5, #8
   103ce:	81a3      	strh	r3, [r4, #12]
   103d0:	b29b      	uxth	r3, r3
   103d2:	2a00      	cmp	r2, #0
   103d4:	d1e9      	bne.n	103aa <__swsetup_r+0x1e>
   103d6:	f403 7120 	and.w	r1, r3, #640	; 0x280
   103da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   103de:	d0e4      	beq.n	103aa <__swsetup_r+0x1e>
   103e0:	4630      	mov	r0, r6
   103e2:	4621      	mov	r1, r4
   103e4:	f001 faee 	bl	119c4 <__smakebuf_r>
   103e8:	89a3      	ldrh	r3, [r4, #12]
   103ea:	6922      	ldr	r2, [r4, #16]
   103ec:	e7dd      	b.n	103aa <__swsetup_r+0x1e>
   103ee:	0798      	lsls	r0, r3, #30
   103f0:	bf58      	it	pl
   103f2:	6961      	ldrpl	r1, [r4, #20]
   103f4:	60a1      	str	r1, [r4, #8]
   103f6:	2a00      	cmp	r2, #0
   103f8:	d1e0      	bne.n	103bc <__swsetup_r+0x30>
   103fa:	89a3      	ldrh	r3, [r4, #12]
   103fc:	061a      	lsls	r2, r3, #24
   103fe:	d5dd      	bpl.n	103bc <__swsetup_r+0x30>
   10400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10404:	81a3      	strh	r3, [r4, #12]
   10406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1040a:	bd70      	pop	{r4, r5, r6, pc}
   1040c:	4618      	mov	r0, r3
   1040e:	f001 f8fd 	bl	1160c <__sinit>
   10412:	e7c4      	b.n	1039e <__swsetup_r+0x12>
   10414:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10416:	b149      	cbz	r1, 1042c <__swsetup_r+0xa0>
   10418:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1041c:	4299      	cmp	r1, r3
   1041e:	d003      	beq.n	10428 <__swsetup_r+0x9c>
   10420:	4630      	mov	r0, r6
   10422:	f001 f9d7 	bl	117d4 <_free_r>
   10426:	89a5      	ldrh	r5, [r4, #12]
   10428:	2300      	movs	r3, #0
   1042a:	6323      	str	r3, [r4, #48]	; 0x30
   1042c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   10430:	2300      	movs	r3, #0
   10432:	6922      	ldr	r2, [r4, #16]
   10434:	6063      	str	r3, [r4, #4]
   10436:	b2ad      	uxth	r5, r5
   10438:	6022      	str	r2, [r4, #0]
   1043a:	e7c6      	b.n	103ca <__swsetup_r+0x3e>
   1043c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   10440:	2309      	movs	r3, #9
   10442:	6033      	str	r3, [r6, #0]
   10444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10448:	81a5      	strh	r5, [r4, #12]
   1044a:	bd70      	pop	{r4, r5, r6, pc}
   1044c:	1fff88f0 	.word	0x1fff88f0

00010450 <__register_exitproc>:
   10450:	b5f0      	push	{r4, r5, r6, r7, lr}
   10452:	4c27      	ldr	r4, [pc, #156]	; (104f0 <__register_exitproc+0xa0>)
   10454:	6826      	ldr	r6, [r4, #0]
   10456:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   1045a:	b085      	sub	sp, #20
   1045c:	4607      	mov	r7, r0
   1045e:	2c00      	cmp	r4, #0
   10460:	d041      	beq.n	104e6 <__register_exitproc+0x96>
   10462:	6865      	ldr	r5, [r4, #4]
   10464:	2d1f      	cmp	r5, #31
   10466:	dd1e      	ble.n	104a6 <__register_exitproc+0x56>
   10468:	4822      	ldr	r0, [pc, #136]	; (104f4 <__register_exitproc+0xa4>)
   1046a:	b918      	cbnz	r0, 10474 <__register_exitproc+0x24>
   1046c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10470:	b005      	add	sp, #20
   10472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10474:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10478:	9103      	str	r1, [sp, #12]
   1047a:	9202      	str	r2, [sp, #8]
   1047c:	9301      	str	r3, [sp, #4]
   1047e:	f7fd fbfb 	bl	dc78 <malloc>
   10482:	9903      	ldr	r1, [sp, #12]
   10484:	9a02      	ldr	r2, [sp, #8]
   10486:	9b01      	ldr	r3, [sp, #4]
   10488:	4604      	mov	r4, r0
   1048a:	2800      	cmp	r0, #0
   1048c:	d0ee      	beq.n	1046c <__register_exitproc+0x1c>
   1048e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   10492:	6025      	str	r5, [r4, #0]
   10494:	2000      	movs	r0, #0
   10496:	6060      	str	r0, [r4, #4]
   10498:	4605      	mov	r5, r0
   1049a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   1049e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   104a2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   104a6:	b93f      	cbnz	r7, 104b8 <__register_exitproc+0x68>
   104a8:	1cab      	adds	r3, r5, #2
   104aa:	2000      	movs	r0, #0
   104ac:	3501      	adds	r5, #1
   104ae:	6065      	str	r5, [r4, #4]
   104b0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   104b4:	b005      	add	sp, #20
   104b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104b8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   104bc:	f04f 0c01 	mov.w	ip, #1
   104c0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   104c4:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
   104c8:	fa0c f205 	lsl.w	r2, ip, r5
   104cc:	4316      	orrs	r6, r2
   104ce:	2f02      	cmp	r7, #2
   104d0:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
   104d4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   104d8:	d1e6      	bne.n	104a8 <__register_exitproc+0x58>
   104da:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   104de:	431a      	orrs	r2, r3
   104e0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   104e4:	e7e0      	b.n	104a8 <__register_exitproc+0x58>
   104e6:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   104ea:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   104ee:	e7b8      	b.n	10462 <__register_exitproc+0x12>
   104f0:	00014294 	.word	0x00014294
   104f4:	0000dc79 	.word	0x0000dc79

000104f8 <register_fini>:
   104f8:	4b02      	ldr	r3, [pc, #8]	; (10504 <register_fini+0xc>)
   104fa:	b113      	cbz	r3, 10502 <register_fini+0xa>
   104fc:	4802      	ldr	r0, [pc, #8]	; (10508 <register_fini+0x10>)
   104fe:	f000 b805 	b.w	1050c <atexit>
   10502:	4770      	bx	lr
   10504:	00000000 	.word	0x00000000
   10508:	00011709 	.word	0x00011709

0001050c <atexit>:
   1050c:	4601      	mov	r1, r0
   1050e:	2000      	movs	r0, #0
   10510:	4602      	mov	r2, r0
   10512:	4603      	mov	r3, r0
   10514:	f7ff bf9c 	b.w	10450 <__register_exitproc>

00010518 <quorem>:
   10518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1051c:	6903      	ldr	r3, [r0, #16]
   1051e:	690d      	ldr	r5, [r1, #16]
   10520:	429d      	cmp	r5, r3
   10522:	b083      	sub	sp, #12
   10524:	4683      	mov	fp, r0
   10526:	f300 808b 	bgt.w	10640 <quorem+0x128>
   1052a:	3d01      	subs	r5, #1
   1052c:	f101 0414 	add.w	r4, r1, #20
   10530:	f100 0a14 	add.w	sl, r0, #20
   10534:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   10538:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   1053c:	3201      	adds	r2, #1
   1053e:	fbb3 f8f2 	udiv	r8, r3, r2
   10542:	00aa      	lsls	r2, r5, #2
   10544:	4691      	mov	r9, r2
   10546:	9200      	str	r2, [sp, #0]
   10548:	4452      	add	r2, sl
   1054a:	44a1      	add	r9, r4
   1054c:	9201      	str	r2, [sp, #4]
   1054e:	f1b8 0f00 	cmp.w	r8, #0
   10552:	d03d      	beq.n	105d0 <quorem+0xb8>
   10554:	f04f 0e00 	mov.w	lr, #0
   10558:	4670      	mov	r0, lr
   1055a:	4622      	mov	r2, r4
   1055c:	4653      	mov	r3, sl
   1055e:	468c      	mov	ip, r1
   10560:	f852 6b04 	ldr.w	r6, [r2], #4
   10564:	6819      	ldr	r1, [r3, #0]
   10566:	b2b7      	uxth	r7, r6
   10568:	0c36      	lsrs	r6, r6, #16
   1056a:	fb07 ee08 	mla	lr, r7, r8, lr
   1056e:	fb06 f608 	mul.w	r6, r6, r8
   10572:	eb06 461e 	add.w	r6, r6, lr, lsr #16
   10576:	fa1f f78e 	uxth.w	r7, lr
   1057a:	1bc7      	subs	r7, r0, r7
   1057c:	b2b0      	uxth	r0, r6
   1057e:	fa17 f781 	uxtah	r7, r7, r1
   10582:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
   10586:	eb00 4027 	add.w	r0, r0, r7, asr #16
   1058a:	b2bf      	uxth	r7, r7
   1058c:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   10590:	4591      	cmp	r9, r2
   10592:	f843 7b04 	str.w	r7, [r3], #4
   10596:	ea4f 4020 	mov.w	r0, r0, asr #16
   1059a:	ea4f 4e16 	mov.w	lr, r6, lsr #16
   1059e:	d2df      	bcs.n	10560 <quorem+0x48>
   105a0:	9a00      	ldr	r2, [sp, #0]
   105a2:	f85a 3002 	ldr.w	r3, [sl, r2]
   105a6:	4661      	mov	r1, ip
   105a8:	b993      	cbnz	r3, 105d0 <quorem+0xb8>
   105aa:	9a01      	ldr	r2, [sp, #4]
   105ac:	1f13      	subs	r3, r2, #4
   105ae:	459a      	cmp	sl, r3
   105b0:	d20c      	bcs.n	105cc <quorem+0xb4>
   105b2:	f852 3c04 	ldr.w	r3, [r2, #-4]
   105b6:	b94b      	cbnz	r3, 105cc <quorem+0xb4>
   105b8:	f1a2 0308 	sub.w	r3, r2, #8
   105bc:	e002      	b.n	105c4 <quorem+0xac>
   105be:	681a      	ldr	r2, [r3, #0]
   105c0:	3b04      	subs	r3, #4
   105c2:	b91a      	cbnz	r2, 105cc <quorem+0xb4>
   105c4:	459a      	cmp	sl, r3
   105c6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   105ca:	d3f8      	bcc.n	105be <quorem+0xa6>
   105cc:	f8cb 5010 	str.w	r5, [fp, #16]
   105d0:	4658      	mov	r0, fp
   105d2:	f001 fc85 	bl	11ee0 <__mcmp>
   105d6:	2800      	cmp	r0, #0
   105d8:	db2e      	blt.n	10638 <quorem+0x120>
   105da:	f108 0801 	add.w	r8, r8, #1
   105de:	4653      	mov	r3, sl
   105e0:	2200      	movs	r2, #0
   105e2:	f854 6b04 	ldr.w	r6, [r4], #4
   105e6:	6818      	ldr	r0, [r3, #0]
   105e8:	b2b1      	uxth	r1, r6
   105ea:	1a52      	subs	r2, r2, r1
   105ec:	0c36      	lsrs	r6, r6, #16
   105ee:	fa12 f180 	uxtah	r1, r2, r0
   105f2:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
   105f6:	eb02 4221 	add.w	r2, r2, r1, asr #16
   105fa:	b289      	uxth	r1, r1
   105fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   10600:	45a1      	cmp	r9, r4
   10602:	f843 1b04 	str.w	r1, [r3], #4
   10606:	ea4f 4222 	mov.w	r2, r2, asr #16
   1060a:	d2ea      	bcs.n	105e2 <quorem+0xca>
   1060c:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   10610:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
   10614:	b982      	cbnz	r2, 10638 <quorem+0x120>
   10616:	1f1a      	subs	r2, r3, #4
   10618:	4592      	cmp	sl, r2
   1061a:	d20b      	bcs.n	10634 <quorem+0x11c>
   1061c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   10620:	b942      	cbnz	r2, 10634 <quorem+0x11c>
   10622:	3b08      	subs	r3, #8
   10624:	e002      	b.n	1062c <quorem+0x114>
   10626:	681a      	ldr	r2, [r3, #0]
   10628:	3b04      	subs	r3, #4
   1062a:	b91a      	cbnz	r2, 10634 <quorem+0x11c>
   1062c:	459a      	cmp	sl, r3
   1062e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   10632:	d3f8      	bcc.n	10626 <quorem+0x10e>
   10634:	f8cb 5010 	str.w	r5, [fp, #16]
   10638:	4640      	mov	r0, r8
   1063a:	b003      	add	sp, #12
   1063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10640:	2000      	movs	r0, #0
   10642:	b003      	add	sp, #12
   10644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010648 <_dtoa_r>:
   10648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1064c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1064e:	b09b      	sub	sp, #108	; 0x6c
   10650:	4604      	mov	r4, r0
   10652:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   10654:	4692      	mov	sl, r2
   10656:	469b      	mov	fp, r3
   10658:	b149      	cbz	r1, 1066e <_dtoa_r+0x26>
   1065a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1065c:	604b      	str	r3, [r1, #4]
   1065e:	2201      	movs	r2, #1
   10660:	fa02 f303 	lsl.w	r3, r2, r3
   10664:	608b      	str	r3, [r1, #8]
   10666:	f001 fa43 	bl	11af0 <_Bfree>
   1066a:	2300      	movs	r3, #0
   1066c:	6423      	str	r3, [r4, #64]	; 0x40
   1066e:	f1bb 0f00 	cmp.w	fp, #0
   10672:	46d9      	mov	r9, fp
   10674:	db33      	blt.n	106de <_dtoa_r+0x96>
   10676:	2300      	movs	r3, #0
   10678:	602b      	str	r3, [r5, #0]
   1067a:	4ba5      	ldr	r3, [pc, #660]	; (10910 <_dtoa_r+0x2c8>)
   1067c:	461a      	mov	r2, r3
   1067e:	ea09 0303 	and.w	r3, r9, r3
   10682:	4293      	cmp	r3, r2
   10684:	d014      	beq.n	106b0 <_dtoa_r+0x68>
   10686:	4650      	mov	r0, sl
   10688:	4659      	mov	r1, fp
   1068a:	2200      	movs	r2, #0
   1068c:	2300      	movs	r3, #0
   1068e:	f7fc f8ad 	bl	c7ec <__aeabi_dcmpeq>
   10692:	4680      	mov	r8, r0
   10694:	b348      	cbz	r0, 106ea <_dtoa_r+0xa2>
   10696:	9e26      	ldr	r6, [sp, #152]	; 0x98
   10698:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   1069a:	2301      	movs	r3, #1
   1069c:	6033      	str	r3, [r6, #0]
   1069e:	2d00      	cmp	r5, #0
   106a0:	f000 80c9 	beq.w	10836 <_dtoa_r+0x1ee>
   106a4:	489b      	ldr	r0, [pc, #620]	; (10914 <_dtoa_r+0x2cc>)
   106a6:	6028      	str	r0, [r5, #0]
   106a8:	3801      	subs	r0, #1
   106aa:	b01b      	add	sp, #108	; 0x6c
   106ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106b0:	9d26      	ldr	r5, [sp, #152]	; 0x98
   106b2:	f242 730f 	movw	r3, #9999	; 0x270f
   106b6:	602b      	str	r3, [r5, #0]
   106b8:	f1ba 0f00 	cmp.w	sl, #0
   106bc:	f000 80a4 	beq.w	10808 <_dtoa_r+0x1c0>
   106c0:	4895      	ldr	r0, [pc, #596]	; (10918 <_dtoa_r+0x2d0>)
   106c2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   106c4:	2e00      	cmp	r6, #0
   106c6:	d0f0      	beq.n	106aa <_dtoa_r+0x62>
   106c8:	78c3      	ldrb	r3, [r0, #3]
   106ca:	2b00      	cmp	r3, #0
   106cc:	f000 80b5 	beq.w	1083a <_dtoa_r+0x1f2>
   106d0:	f100 0308 	add.w	r3, r0, #8
   106d4:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   106d6:	602b      	str	r3, [r5, #0]
   106d8:	b01b      	add	sp, #108	; 0x6c
   106da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106de:	2301      	movs	r3, #1
   106e0:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
   106e4:	602b      	str	r3, [r5, #0]
   106e6:	46cb      	mov	fp, r9
   106e8:	e7c7      	b.n	1067a <_dtoa_r+0x32>
   106ea:	aa19      	add	r2, sp, #100	; 0x64
   106ec:	ab18      	add	r3, sp, #96	; 0x60
   106ee:	e88d 000c 	stmia.w	sp, {r2, r3}
   106f2:	4620      	mov	r0, r4
   106f4:	4652      	mov	r2, sl
   106f6:	465b      	mov	r3, fp
   106f8:	f001 fc80 	bl	11ffc <__d2b>
   106fc:	ea5f 5519 	movs.w	r5, r9, lsr #20
   10700:	900a      	str	r0, [sp, #40]	; 0x28
   10702:	f040 808a 	bne.w	1081a <_dtoa_r+0x1d2>
   10706:	9f18      	ldr	r7, [sp, #96]	; 0x60
   10708:	9d19      	ldr	r5, [sp, #100]	; 0x64
   1070a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   1070e:	443d      	add	r5, r7
   10710:	429d      	cmp	r5, r3
   10712:	f2c0 8294 	blt.w	10c3e <_dtoa_r+0x5f6>
   10716:	331f      	adds	r3, #31
   10718:	f205 4212 	addw	r2, r5, #1042	; 0x412
   1071c:	1b5b      	subs	r3, r3, r5
   1071e:	fa09 f303 	lsl.w	r3, r9, r3
   10722:	fa2a f202 	lsr.w	r2, sl, r2
   10726:	ea43 0002 	orr.w	r0, r3, r2
   1072a:	f7fb fd81 	bl	c230 <__aeabi_ui2d>
   1072e:	2601      	movs	r6, #1
   10730:	3d01      	subs	r5, #1
   10732:	46b8      	mov	r8, r7
   10734:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   10738:	9616      	str	r6, [sp, #88]	; 0x58
   1073a:	2200      	movs	r2, #0
   1073c:	4b77      	ldr	r3, [pc, #476]	; (1091c <_dtoa_r+0x2d4>)
   1073e:	f7fb fc39 	bl	bfb4 <__aeabi_dsub>
   10742:	a36d      	add	r3, pc, #436	; (adr r3, 108f8 <_dtoa_r+0x2b0>)
   10744:	e9d3 2300 	ldrd	r2, r3, [r3]
   10748:	f7fb fde8 	bl	c31c <__aeabi_dmul>
   1074c:	a36c      	add	r3, pc, #432	; (adr r3, 10900 <_dtoa_r+0x2b8>)
   1074e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10752:	f7fb fc31 	bl	bfb8 <__adddf3>
   10756:	4606      	mov	r6, r0
   10758:	4628      	mov	r0, r5
   1075a:	460f      	mov	r7, r1
   1075c:	f7fb fd78 	bl	c250 <__aeabi_i2d>
   10760:	a369      	add	r3, pc, #420	; (adr r3, 10908 <_dtoa_r+0x2c0>)
   10762:	e9d3 2300 	ldrd	r2, r3, [r3]
   10766:	f7fb fdd9 	bl	c31c <__aeabi_dmul>
   1076a:	4602      	mov	r2, r0
   1076c:	460b      	mov	r3, r1
   1076e:	4630      	mov	r0, r6
   10770:	4639      	mov	r1, r7
   10772:	f7fb fc21 	bl	bfb8 <__adddf3>
   10776:	4606      	mov	r6, r0
   10778:	460f      	mov	r7, r1
   1077a:	f7fc f869 	bl	c850 <__aeabi_d2iz>
   1077e:	4639      	mov	r1, r7
   10780:	9007      	str	r0, [sp, #28]
   10782:	2200      	movs	r2, #0
   10784:	4630      	mov	r0, r6
   10786:	2300      	movs	r3, #0
   10788:	f7fc f83a 	bl	c800 <__aeabi_dcmplt>
   1078c:	2800      	cmp	r0, #0
   1078e:	f040 8228 	bne.w	10be2 <_dtoa_r+0x59a>
   10792:	9e07      	ldr	r6, [sp, #28]
   10794:	2e16      	cmp	r6, #22
   10796:	f200 8221 	bhi.w	10bdc <_dtoa_r+0x594>
   1079a:	4b61      	ldr	r3, [pc, #388]	; (10920 <_dtoa_r+0x2d8>)
   1079c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   107a0:	e9d3 0100 	ldrd	r0, r1, [r3]
   107a4:	4652      	mov	r2, sl
   107a6:	465b      	mov	r3, fp
   107a8:	f7fc f848 	bl	c83c <__aeabi_dcmpgt>
   107ac:	2800      	cmp	r0, #0
   107ae:	f000 824b 	beq.w	10c48 <_dtoa_r+0x600>
   107b2:	3e01      	subs	r6, #1
   107b4:	9607      	str	r6, [sp, #28]
   107b6:	2600      	movs	r6, #0
   107b8:	960e      	str	r6, [sp, #56]	; 0x38
   107ba:	ebc5 0508 	rsb	r5, r5, r8
   107be:	3d01      	subs	r5, #1
   107c0:	9506      	str	r5, [sp, #24]
   107c2:	f100 8225 	bmi.w	10c10 <_dtoa_r+0x5c8>
   107c6:	2500      	movs	r5, #0
   107c8:	9508      	str	r5, [sp, #32]
   107ca:	9e07      	ldr	r6, [sp, #28]
   107cc:	2e00      	cmp	r6, #0
   107ce:	f2c0 8216 	blt.w	10bfe <_dtoa_r+0x5b6>
   107d2:	9d06      	ldr	r5, [sp, #24]
   107d4:	960d      	str	r6, [sp, #52]	; 0x34
   107d6:	4435      	add	r5, r6
   107d8:	2600      	movs	r6, #0
   107da:	9506      	str	r5, [sp, #24]
   107dc:	960c      	str	r6, [sp, #48]	; 0x30
   107de:	9d24      	ldr	r5, [sp, #144]	; 0x90
   107e0:	2d09      	cmp	r5, #9
   107e2:	d82c      	bhi.n	1083e <_dtoa_r+0x1f6>
   107e4:	2d05      	cmp	r5, #5
   107e6:	bfc4      	itt	gt
   107e8:	3d04      	subgt	r5, #4
   107ea:	9524      	strgt	r5, [sp, #144]	; 0x90
   107ec:	9e24      	ldr	r6, [sp, #144]	; 0x90
   107ee:	f1a6 0302 	sub.w	r3, r6, #2
   107f2:	bfcc      	ite	gt
   107f4:	2500      	movgt	r5, #0
   107f6:	2501      	movle	r5, #1
   107f8:	2b03      	cmp	r3, #3
   107fa:	d822      	bhi.n	10842 <_dtoa_r+0x1fa>
   107fc:	e8df f013 	tbh	[pc, r3, lsl #1]
   10800:	029e03b7 	.word	0x029e03b7
   10804:	049a03c0 	.word	0x049a03c0
   10808:	4a46      	ldr	r2, [pc, #280]	; (10924 <_dtoa_r+0x2dc>)
   1080a:	4b43      	ldr	r3, [pc, #268]	; (10918 <_dtoa_r+0x2d0>)
   1080c:	f3c9 0013 	ubfx	r0, r9, #0, #20
   10810:	2800      	cmp	r0, #0
   10812:	bf0c      	ite	eq
   10814:	4610      	moveq	r0, r2
   10816:	4618      	movne	r0, r3
   10818:	e753      	b.n	106c2 <_dtoa_r+0x7a>
   1081a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1081e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10822:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   10826:	4650      	mov	r0, sl
   10828:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1082c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   10830:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   10834:	e781      	b.n	1073a <_dtoa_r+0xf2>
   10836:	483c      	ldr	r0, [pc, #240]	; (10928 <_dtoa_r+0x2e0>)
   10838:	e737      	b.n	106aa <_dtoa_r+0x62>
   1083a:	1cc3      	adds	r3, r0, #3
   1083c:	e74a      	b.n	106d4 <_dtoa_r+0x8c>
   1083e:	2500      	movs	r5, #0
   10840:	9524      	str	r5, [sp, #144]	; 0x90
   10842:	2500      	movs	r5, #0
   10844:	6465      	str	r5, [r4, #68]	; 0x44
   10846:	4629      	mov	r1, r5
   10848:	4620      	mov	r0, r4
   1084a:	f001 f92b 	bl	11aa4 <_Balloc>
   1084e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   10852:	2601      	movs	r6, #1
   10854:	9009      	str	r0, [sp, #36]	; 0x24
   10856:	9525      	str	r5, [sp, #148]	; 0x94
   10858:	6420      	str	r0, [r4, #64]	; 0x40
   1085a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   1085e:	960b      	str	r6, [sp, #44]	; 0x2c
   10860:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10862:	2b00      	cmp	r3, #0
   10864:	f2c0 80d2 	blt.w	10a0c <_dtoa_r+0x3c4>
   10868:	9e07      	ldr	r6, [sp, #28]
   1086a:	2e0e      	cmp	r6, #14
   1086c:	f300 80ce 	bgt.w	10a0c <_dtoa_r+0x3c4>
   10870:	4b2b      	ldr	r3, [pc, #172]	; (10920 <_dtoa_r+0x2d8>)
   10872:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   10876:	e9d3 0100 	ldrd	r0, r1, [r3]
   1087a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1087e:	9925      	ldr	r1, [sp, #148]	; 0x94
   10880:	2900      	cmp	r1, #0
   10882:	f2c0 8380 	blt.w	10f86 <_dtoa_r+0x93e>
   10886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1088a:	4659      	mov	r1, fp
   1088c:	4650      	mov	r0, sl
   1088e:	f7fb fe6f 	bl	c570 <__aeabi_ddiv>
   10892:	f7fb ffdd 	bl	c850 <__aeabi_d2iz>
   10896:	4605      	mov	r5, r0
   10898:	f7fb fcda 	bl	c250 <__aeabi_i2d>
   1089c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   108a0:	f7fb fd3c 	bl	c31c <__aeabi_dmul>
   108a4:	4602      	mov	r2, r0
   108a6:	460b      	mov	r3, r1
   108a8:	4650      	mov	r0, sl
   108aa:	4659      	mov	r1, fp
   108ac:	f7fb fb82 	bl	bfb4 <__aeabi_dsub>
   108b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   108b2:	f105 0330 	add.w	r3, r5, #48	; 0x30
   108b6:	f1b9 0f01 	cmp.w	r9, #1
   108ba:	4606      	mov	r6, r0
   108bc:	460f      	mov	r7, r1
   108be:	7013      	strb	r3, [r2, #0]
   108c0:	f102 0b01 	add.w	fp, r2, #1
   108c4:	d064      	beq.n	10990 <_dtoa_r+0x348>
   108c6:	2200      	movs	r2, #0
   108c8:	4b18      	ldr	r3, [pc, #96]	; (1092c <_dtoa_r+0x2e4>)
   108ca:	f7fb fd27 	bl	c31c <__aeabi_dmul>
   108ce:	2200      	movs	r2, #0
   108d0:	2300      	movs	r3, #0
   108d2:	4606      	mov	r6, r0
   108d4:	460f      	mov	r7, r1
   108d6:	f7fb ff89 	bl	c7ec <__aeabi_dcmpeq>
   108da:	2800      	cmp	r0, #0
   108dc:	f040 8081 	bne.w	109e2 <_dtoa_r+0x39a>
   108e0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   108e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   108e6:	9403      	str	r4, [sp, #12]
   108e8:	44c8      	add	r8, r9
   108ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   108ee:	f105 0902 	add.w	r9, r5, #2
   108f2:	e028      	b.n	10946 <_dtoa_r+0x2fe>
   108f4:	f3af 8000 	nop.w
   108f8:	636f4361 	.word	0x636f4361
   108fc:	3fd287a7 	.word	0x3fd287a7
   10900:	8b60c8b3 	.word	0x8b60c8b3
   10904:	3fc68a28 	.word	0x3fc68a28
   10908:	509f79fb 	.word	0x509f79fb
   1090c:	3fd34413 	.word	0x3fd34413
   10910:	7ff00000 	.word	0x7ff00000
   10914:	000142e9 	.word	0x000142e9
   10918:	00014308 	.word	0x00014308
   1091c:	3ff80000 	.word	0x3ff80000
   10920:	00014318 	.word	0x00014318
   10924:	000142fc 	.word	0x000142fc
   10928:	000142e8 	.word	0x000142e8
   1092c:	40240000 	.word	0x40240000
   10930:	f7fb fcf4 	bl	c31c <__aeabi_dmul>
   10934:	2200      	movs	r2, #0
   10936:	2300      	movs	r3, #0
   10938:	4606      	mov	r6, r0
   1093a:	460f      	mov	r7, r1
   1093c:	f7fb ff56 	bl	c7ec <__aeabi_dcmpeq>
   10940:	2800      	cmp	r0, #0
   10942:	f040 83c1 	bne.w	110c8 <_dtoa_r+0xa80>
   10946:	4652      	mov	r2, sl
   10948:	465b      	mov	r3, fp
   1094a:	4630      	mov	r0, r6
   1094c:	4639      	mov	r1, r7
   1094e:	f7fb fe0f 	bl	c570 <__aeabi_ddiv>
   10952:	f7fb ff7d 	bl	c850 <__aeabi_d2iz>
   10956:	4605      	mov	r5, r0
   10958:	f7fb fc7a 	bl	c250 <__aeabi_i2d>
   1095c:	4652      	mov	r2, sl
   1095e:	465b      	mov	r3, fp
   10960:	f7fb fcdc 	bl	c31c <__aeabi_dmul>
   10964:	4602      	mov	r2, r0
   10966:	460b      	mov	r3, r1
   10968:	4630      	mov	r0, r6
   1096a:	4639      	mov	r1, r7
   1096c:	f7fb fb22 	bl	bfb4 <__aeabi_dsub>
   10970:	f105 0e30 	add.w	lr, r5, #48	; 0x30
   10974:	45c1      	cmp	r9, r8
   10976:	f809 ec01 	strb.w	lr, [r9, #-1]
   1097a:	464c      	mov	r4, r9
   1097c:	4606      	mov	r6, r0
   1097e:	460f      	mov	r7, r1
   10980:	f04f 0200 	mov.w	r2, #0
   10984:	4ba7      	ldr	r3, [pc, #668]	; (10c24 <_dtoa_r+0x5dc>)
   10986:	f109 0901 	add.w	r9, r9, #1
   1098a:	d1d1      	bne.n	10930 <_dtoa_r+0x2e8>
   1098c:	46a3      	mov	fp, r4
   1098e:	9c03      	ldr	r4, [sp, #12]
   10990:	4632      	mov	r2, r6
   10992:	463b      	mov	r3, r7
   10994:	4630      	mov	r0, r6
   10996:	4639      	mov	r1, r7
   10998:	f7fb fb0e 	bl	bfb8 <__adddf3>
   1099c:	4606      	mov	r6, r0
   1099e:	460f      	mov	r7, r1
   109a0:	4632      	mov	r2, r6
   109a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   109a6:	463b      	mov	r3, r7
   109a8:	f7fb ff2a 	bl	c800 <__aeabi_dcmplt>
   109ac:	b940      	cbnz	r0, 109c0 <_dtoa_r+0x378>
   109ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   109b2:	4632      	mov	r2, r6
   109b4:	463b      	mov	r3, r7
   109b6:	f7fb ff19 	bl	c7ec <__aeabi_dcmpeq>
   109ba:	b190      	cbz	r0, 109e2 <_dtoa_r+0x39a>
   109bc:	07eb      	lsls	r3, r5, #31
   109be:	d510      	bpl.n	109e2 <_dtoa_r+0x39a>
   109c0:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   109c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   109c6:	e005      	b.n	109d4 <_dtoa_r+0x38c>
   109c8:	429a      	cmp	r2, r3
   109ca:	f000 8428 	beq.w	1121e <_dtoa_r+0xbd6>
   109ce:	f813 5c01 	ldrb.w	r5, [r3, #-1]
   109d2:	469b      	mov	fp, r3
   109d4:	2d39      	cmp	r5, #57	; 0x39
   109d6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   109da:	d0f5      	beq.n	109c8 <_dtoa_r+0x380>
   109dc:	1c6a      	adds	r2, r5, #1
   109de:	b2d2      	uxtb	r2, r2
   109e0:	701a      	strb	r2, [r3, #0]
   109e2:	4620      	mov	r0, r4
   109e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   109e6:	f001 f883 	bl	11af0 <_Bfree>
   109ea:	9e07      	ldr	r6, [sp, #28]
   109ec:	9d26      	ldr	r5, [sp, #152]	; 0x98
   109ee:	1c73      	adds	r3, r6, #1
   109f0:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   109f2:	2200      	movs	r2, #0
   109f4:	f88b 2000 	strb.w	r2, [fp]
   109f8:	602b      	str	r3, [r5, #0]
   109fa:	2e00      	cmp	r6, #0
   109fc:	f000 8325 	beq.w	1104a <_dtoa_r+0xa02>
   10a00:	9809      	ldr	r0, [sp, #36]	; 0x24
   10a02:	f8c6 b000 	str.w	fp, [r6]
   10a06:	b01b      	add	sp, #108	; 0x6c
   10a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a0c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10a0e:	2d00      	cmp	r5, #0
   10a10:	f000 8103 	beq.w	10c1a <_dtoa_r+0x5d2>
   10a14:	9e24      	ldr	r6, [sp, #144]	; 0x90
   10a16:	2e01      	cmp	r6, #1
   10a18:	f340 82dc 	ble.w	10fd4 <_dtoa_r+0x98c>
   10a1c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   10a1e:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
   10a22:	42be      	cmp	r6, r7
   10a24:	f2c0 8389 	blt.w	1113a <_dtoa_r+0xaf2>
   10a28:	1bf7      	subs	r7, r6, r7
   10a2a:	f1b9 0f00 	cmp.w	r9, #0
   10a2e:	f2c0 8486 	blt.w	1133e <_dtoa_r+0xcf6>
   10a32:	9d08      	ldr	r5, [sp, #32]
   10a34:	464b      	mov	r3, r9
   10a36:	9e08      	ldr	r6, [sp, #32]
   10a38:	441e      	add	r6, r3
   10a3a:	9608      	str	r6, [sp, #32]
   10a3c:	9e06      	ldr	r6, [sp, #24]
   10a3e:	4620      	mov	r0, r4
   10a40:	441e      	add	r6, r3
   10a42:	2101      	movs	r1, #1
   10a44:	9606      	str	r6, [sp, #24]
   10a46:	f001 f8f7 	bl	11c38 <__i2b>
   10a4a:	4606      	mov	r6, r0
   10a4c:	b165      	cbz	r5, 10a68 <_dtoa_r+0x420>
   10a4e:	9806      	ldr	r0, [sp, #24]
   10a50:	2800      	cmp	r0, #0
   10a52:	dd09      	ble.n	10a68 <_dtoa_r+0x420>
   10a54:	4603      	mov	r3, r0
   10a56:	9908      	ldr	r1, [sp, #32]
   10a58:	42ab      	cmp	r3, r5
   10a5a:	bfa8      	it	ge
   10a5c:	462b      	movge	r3, r5
   10a5e:	1ac9      	subs	r1, r1, r3
   10a60:	1ac0      	subs	r0, r0, r3
   10a62:	9108      	str	r1, [sp, #32]
   10a64:	1aed      	subs	r5, r5, r3
   10a66:	9006      	str	r0, [sp, #24]
   10a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10a6a:	2a00      	cmp	r2, #0
   10a6c:	dd1d      	ble.n	10aaa <_dtoa_r+0x462>
   10a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a70:	2b00      	cmp	r3, #0
   10a72:	f000 8358 	beq.w	11126 <_dtoa_r+0xade>
   10a76:	2f00      	cmp	r7, #0
   10a78:	dd11      	ble.n	10a9e <_dtoa_r+0x456>
   10a7a:	4631      	mov	r1, r6
   10a7c:	463a      	mov	r2, r7
   10a7e:	4620      	mov	r0, r4
   10a80:	f001 f982 	bl	11d88 <__pow5mult>
   10a84:	4606      	mov	r6, r0
   10a86:	4631      	mov	r1, r6
   10a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10a8a:	4620      	mov	r0, r4
   10a8c:	f001 f8de 	bl	11c4c <__multiply>
   10a90:	990a      	ldr	r1, [sp, #40]	; 0x28
   10a92:	4680      	mov	r8, r0
   10a94:	4620      	mov	r0, r4
   10a96:	f001 f82b 	bl	11af0 <_Bfree>
   10a9a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   10a9e:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   10aa2:	ebbe 0207 	subs.w	r2, lr, r7
   10aa6:	f040 828f 	bne.w	10fc8 <_dtoa_r+0x980>
   10aaa:	4620      	mov	r0, r4
   10aac:	2101      	movs	r1, #1
   10aae:	f001 f8c3 	bl	11c38 <__i2b>
   10ab2:	4680      	mov	r8, r0
   10ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
   10ab6:	2800      	cmp	r0, #0
   10ab8:	dd05      	ble.n	10ac6 <_dtoa_r+0x47e>
   10aba:	4641      	mov	r1, r8
   10abc:	4620      	mov	r0, r4
   10abe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10ac0:	f001 f962 	bl	11d88 <__pow5mult>
   10ac4:	4680      	mov	r8, r0
   10ac6:	9924      	ldr	r1, [sp, #144]	; 0x90
   10ac8:	2901      	cmp	r1, #1
   10aca:	f340 82c1 	ble.w	11050 <_dtoa_r+0xa08>
   10ace:	2700      	movs	r7, #0
   10ad0:	980d      	ldr	r0, [sp, #52]	; 0x34
   10ad2:	2800      	cmp	r0, #0
   10ad4:	f040 82af 	bne.w	11036 <_dtoa_r+0x9ee>
   10ad8:	2001      	movs	r0, #1
   10ada:	9b06      	ldr	r3, [sp, #24]
   10adc:	4403      	add	r3, r0
   10ade:	f013 031f 	ands.w	r3, r3, #31
   10ae2:	f000 80a1 	beq.w	10c28 <_dtoa_r+0x5e0>
   10ae6:	f1c3 0220 	rsb	r2, r3, #32
   10aea:	2a04      	cmp	r2, #4
   10aec:	f340 84b5 	ble.w	1145a <_dtoa_r+0xe12>
   10af0:	9908      	ldr	r1, [sp, #32]
   10af2:	9a06      	ldr	r2, [sp, #24]
   10af4:	f1c3 031c 	rsb	r3, r3, #28
   10af8:	4419      	add	r1, r3
   10afa:	441a      	add	r2, r3
   10afc:	9108      	str	r1, [sp, #32]
   10afe:	441d      	add	r5, r3
   10b00:	9206      	str	r2, [sp, #24]
   10b02:	9908      	ldr	r1, [sp, #32]
   10b04:	2900      	cmp	r1, #0
   10b06:	dd05      	ble.n	10b14 <_dtoa_r+0x4cc>
   10b08:	990a      	ldr	r1, [sp, #40]	; 0x28
   10b0a:	9a08      	ldr	r2, [sp, #32]
   10b0c:	4620      	mov	r0, r4
   10b0e:	f001 f989 	bl	11e24 <__lshift>
   10b12:	900a      	str	r0, [sp, #40]	; 0x28
   10b14:	9a06      	ldr	r2, [sp, #24]
   10b16:	2a00      	cmp	r2, #0
   10b18:	dd04      	ble.n	10b24 <_dtoa_r+0x4dc>
   10b1a:	4641      	mov	r1, r8
   10b1c:	4620      	mov	r0, r4
   10b1e:	f001 f981 	bl	11e24 <__lshift>
   10b22:	4680      	mov	r8, r0
   10b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10b26:	2b00      	cmp	r3, #0
   10b28:	f040 826a 	bne.w	11000 <_dtoa_r+0x9b8>
   10b2c:	f1b9 0f00 	cmp.w	r9, #0
   10b30:	f340 82a6 	ble.w	11080 <_dtoa_r+0xa38>
   10b34:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10b36:	2800      	cmp	r0, #0
   10b38:	f040 8088 	bne.w	10c4c <_dtoa_r+0x604>
   10b3c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10b3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10b40:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   10b44:	e006      	b.n	10b54 <_dtoa_r+0x50c>
   10b46:	4639      	mov	r1, r7
   10b48:	4620      	mov	r0, r4
   10b4a:	220a      	movs	r2, #10
   10b4c:	2300      	movs	r3, #0
   10b4e:	f000 ffd9 	bl	11b04 <__multadd>
   10b52:	4607      	mov	r7, r0
   10b54:	4638      	mov	r0, r7
   10b56:	4641      	mov	r1, r8
   10b58:	f7ff fcde 	bl	10518 <quorem>
   10b5c:	3030      	adds	r0, #48	; 0x30
   10b5e:	f80b 0005 	strb.w	r0, [fp, r5]
   10b62:	3501      	adds	r5, #1
   10b64:	45a9      	cmp	r9, r5
   10b66:	dcee      	bgt.n	10b46 <_dtoa_r+0x4fe>
   10b68:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   10b6c:	970a      	str	r7, [sp, #40]	; 0x28
   10b6e:	4682      	mov	sl, r0
   10b70:	f1b9 0f01 	cmp.w	r9, #1
   10b74:	bfac      	ite	ge
   10b76:	44cb      	addge	fp, r9
   10b78:	f10b 0b01 	addlt.w	fp, fp, #1
   10b7c:	2500      	movs	r5, #0
   10b7e:	990a      	ldr	r1, [sp, #40]	; 0x28
   10b80:	2201      	movs	r2, #1
   10b82:	4620      	mov	r0, r4
   10b84:	f001 f94e 	bl	11e24 <__lshift>
   10b88:	4641      	mov	r1, r8
   10b8a:	900a      	str	r0, [sp, #40]	; 0x28
   10b8c:	f001 f9a8 	bl	11ee0 <__mcmp>
   10b90:	2800      	cmp	r0, #0
   10b92:	f340 8309 	ble.w	111a8 <_dtoa_r+0xb60>
   10b96:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   10b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
   10b9c:	e005      	b.n	10baa <_dtoa_r+0x562>
   10b9e:	4299      	cmp	r1, r3
   10ba0:	f000 828b 	beq.w	110ba <_dtoa_r+0xa72>
   10ba4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   10ba8:	469b      	mov	fp, r3
   10baa:	2a39      	cmp	r2, #57	; 0x39
   10bac:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   10bb0:	d0f5      	beq.n	10b9e <_dtoa_r+0x556>
   10bb2:	3201      	adds	r2, #1
   10bb4:	701a      	strb	r2, [r3, #0]
   10bb6:	4641      	mov	r1, r8
   10bb8:	4620      	mov	r0, r4
   10bba:	f000 ff99 	bl	11af0 <_Bfree>
   10bbe:	2e00      	cmp	r6, #0
   10bc0:	f43f af0f 	beq.w	109e2 <_dtoa_r+0x39a>
   10bc4:	b12d      	cbz	r5, 10bd2 <_dtoa_r+0x58a>
   10bc6:	42b5      	cmp	r5, r6
   10bc8:	d003      	beq.n	10bd2 <_dtoa_r+0x58a>
   10bca:	4629      	mov	r1, r5
   10bcc:	4620      	mov	r0, r4
   10bce:	f000 ff8f 	bl	11af0 <_Bfree>
   10bd2:	4631      	mov	r1, r6
   10bd4:	4620      	mov	r0, r4
   10bd6:	f000 ff8b 	bl	11af0 <_Bfree>
   10bda:	e702      	b.n	109e2 <_dtoa_r+0x39a>
   10bdc:	2601      	movs	r6, #1
   10bde:	960e      	str	r6, [sp, #56]	; 0x38
   10be0:	e5eb      	b.n	107ba <_dtoa_r+0x172>
   10be2:	9807      	ldr	r0, [sp, #28]
   10be4:	f7fb fb34 	bl	c250 <__aeabi_i2d>
   10be8:	4632      	mov	r2, r6
   10bea:	463b      	mov	r3, r7
   10bec:	f7fb fdfe 	bl	c7ec <__aeabi_dcmpeq>
   10bf0:	2800      	cmp	r0, #0
   10bf2:	f47f adce 	bne.w	10792 <_dtoa_r+0x14a>
   10bf6:	9e07      	ldr	r6, [sp, #28]
   10bf8:	3e01      	subs	r6, #1
   10bfa:	9607      	str	r6, [sp, #28]
   10bfc:	e5c9      	b.n	10792 <_dtoa_r+0x14a>
   10bfe:	9e07      	ldr	r6, [sp, #28]
   10c00:	9d08      	ldr	r5, [sp, #32]
   10c02:	1bad      	subs	r5, r5, r6
   10c04:	9508      	str	r5, [sp, #32]
   10c06:	4275      	negs	r5, r6
   10c08:	2600      	movs	r6, #0
   10c0a:	950c      	str	r5, [sp, #48]	; 0x30
   10c0c:	960d      	str	r6, [sp, #52]	; 0x34
   10c0e:	e5e6      	b.n	107de <_dtoa_r+0x196>
   10c10:	426d      	negs	r5, r5
   10c12:	2600      	movs	r6, #0
   10c14:	9508      	str	r5, [sp, #32]
   10c16:	9606      	str	r6, [sp, #24]
   10c18:	e5d7      	b.n	107ca <_dtoa_r+0x182>
   10c1a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10c1c:	9d08      	ldr	r5, [sp, #32]
   10c1e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10c20:	e714      	b.n	10a4c <_dtoa_r+0x404>
   10c22:	bf00      	nop
   10c24:	40240000 	.word	0x40240000
   10c28:	231c      	movs	r3, #28
   10c2a:	f8dd e020 	ldr.w	lr, [sp, #32]
   10c2e:	9806      	ldr	r0, [sp, #24]
   10c30:	449e      	add	lr, r3
   10c32:	4418      	add	r0, r3
   10c34:	f8cd e020 	str.w	lr, [sp, #32]
   10c38:	441d      	add	r5, r3
   10c3a:	9006      	str	r0, [sp, #24]
   10c3c:	e761      	b.n	10b02 <_dtoa_r+0x4ba>
   10c3e:	48a7      	ldr	r0, [pc, #668]	; (10edc <_dtoa_r+0x894>)
   10c40:	1b40      	subs	r0, r0, r5
   10c42:	fa0a f000 	lsl.w	r0, sl, r0
   10c46:	e570      	b.n	1072a <_dtoa_r+0xe2>
   10c48:	900e      	str	r0, [sp, #56]	; 0x38
   10c4a:	e5b6      	b.n	107ba <_dtoa_r+0x172>
   10c4c:	2d00      	cmp	r5, #0
   10c4e:	dd05      	ble.n	10c5c <_dtoa_r+0x614>
   10c50:	4631      	mov	r1, r6
   10c52:	462a      	mov	r2, r5
   10c54:	4620      	mov	r0, r4
   10c56:	f001 f8e5 	bl	11e24 <__lshift>
   10c5a:	4606      	mov	r6, r0
   10c5c:	2f00      	cmp	r7, #0
   10c5e:	f040 82e8 	bne.w	11232 <_dtoa_r+0xbea>
   10c62:	4637      	mov	r7, r6
   10c64:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10c66:	9809      	ldr	r0, [sp, #36]	; 0x24
   10c68:	444d      	add	r5, r9
   10c6a:	9508      	str	r5, [sp, #32]
   10c6c:	f00a 0501 	and.w	r5, sl, #1
   10c70:	950b      	str	r5, [sp, #44]	; 0x2c
   10c72:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   10c76:	1c45      	adds	r5, r0, #1
   10c78:	e00a      	b.n	10c90 <_dtoa_r+0x648>
   10c7a:	f000 ff43 	bl	11b04 <__multadd>
   10c7e:	4639      	mov	r1, r7
   10c80:	4606      	mov	r6, r0
   10c82:	220a      	movs	r2, #10
   10c84:	4620      	mov	r0, r4
   10c86:	2300      	movs	r3, #0
   10c88:	f000 ff3c 	bl	11b04 <__multadd>
   10c8c:	4607      	mov	r7, r0
   10c8e:	3501      	adds	r5, #1
   10c90:	4641      	mov	r1, r8
   10c92:	4648      	mov	r0, r9
   10c94:	f7ff fc40 	bl	10518 <quorem>
   10c98:	4631      	mov	r1, r6
   10c9a:	4683      	mov	fp, r0
   10c9c:	4648      	mov	r0, r9
   10c9e:	f001 f91f 	bl	11ee0 <__mcmp>
   10ca2:	4641      	mov	r1, r8
   10ca4:	9003      	str	r0, [sp, #12]
   10ca6:	463a      	mov	r2, r7
   10ca8:	4620      	mov	r0, r4
   10caa:	f001 f93d 	bl	11f28 <__mdiff>
   10cae:	68c2      	ldr	r2, [r0, #12]
   10cb0:	1e69      	subs	r1, r5, #1
   10cb2:	4603      	mov	r3, r0
   10cb4:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
   10cb8:	9106      	str	r1, [sp, #24]
   10cba:	2a00      	cmp	r2, #0
   10cbc:	f040 8193 	bne.w	10fe6 <_dtoa_r+0x99e>
   10cc0:	4619      	mov	r1, r3
   10cc2:	4648      	mov	r0, r9
   10cc4:	9302      	str	r3, [sp, #8]
   10cc6:	f001 f90b 	bl	11ee0 <__mcmp>
   10cca:	9b02      	ldr	r3, [sp, #8]
   10ccc:	4602      	mov	r2, r0
   10cce:	4619      	mov	r1, r3
   10cd0:	4620      	mov	r0, r4
   10cd2:	9202      	str	r2, [sp, #8]
   10cd4:	f000 ff0c 	bl	11af0 <_Bfree>
   10cd8:	9a02      	ldr	r2, [sp, #8]
   10cda:	b92a      	cbnz	r2, 10ce8 <_dtoa_r+0x6a0>
   10cdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   10cde:	b91b      	cbnz	r3, 10ce8 <_dtoa_r+0x6a0>
   10ce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10ce2:	2800      	cmp	r0, #0
   10ce4:	f000 8391 	beq.w	1140a <_dtoa_r+0xdc2>
   10ce8:	9b03      	ldr	r3, [sp, #12]
   10cea:	2b00      	cmp	r3, #0
   10cec:	f2c0 8234 	blt.w	11158 <_dtoa_r+0xb10>
   10cf0:	d105      	bne.n	10cfe <_dtoa_r+0x6b6>
   10cf2:	9824      	ldr	r0, [sp, #144]	; 0x90
   10cf4:	b918      	cbnz	r0, 10cfe <_dtoa_r+0x6b6>
   10cf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10cf8:	2900      	cmp	r1, #0
   10cfa:	f000 822d 	beq.w	11158 <_dtoa_r+0xb10>
   10cfe:	2a00      	cmp	r2, #0
   10d00:	f300 82ab 	bgt.w	1125a <_dtoa_r+0xc12>
   10d04:	f8dd e020 	ldr.w	lr, [sp, #32]
   10d08:	f805 ac01 	strb.w	sl, [r5, #-1]
   10d0c:	4575      	cmp	r5, lr
   10d0e:	46ab      	mov	fp, r5
   10d10:	f000 82b3 	beq.w	1127a <_dtoa_r+0xc32>
   10d14:	4649      	mov	r1, r9
   10d16:	220a      	movs	r2, #10
   10d18:	2300      	movs	r3, #0
   10d1a:	4620      	mov	r0, r4
   10d1c:	f000 fef2 	bl	11b04 <__multadd>
   10d20:	42be      	cmp	r6, r7
   10d22:	4681      	mov	r9, r0
   10d24:	4631      	mov	r1, r6
   10d26:	4620      	mov	r0, r4
   10d28:	f04f 020a 	mov.w	r2, #10
   10d2c:	f04f 0300 	mov.w	r3, #0
   10d30:	d1a3      	bne.n	10c7a <_dtoa_r+0x632>
   10d32:	f000 fee7 	bl	11b04 <__multadd>
   10d36:	4606      	mov	r6, r0
   10d38:	4607      	mov	r7, r0
   10d3a:	e7a8      	b.n	10c8e <_dtoa_r+0x646>
   10d3c:	2600      	movs	r6, #0
   10d3e:	960b      	str	r6, [sp, #44]	; 0x2c
   10d40:	9e07      	ldr	r6, [sp, #28]
   10d42:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
   10d46:	44b6      	add	lr, r6
   10d48:	f10e 0901 	add.w	r9, lr, #1
   10d4c:	f1b9 0f00 	cmp.w	r9, #0
   10d50:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
   10d54:	464e      	mov	r6, r9
   10d56:	f340 8150 	ble.w	10ffa <_dtoa_r+0x9b2>
   10d5a:	2100      	movs	r1, #0
   10d5c:	2e17      	cmp	r6, #23
   10d5e:	6461      	str	r1, [r4, #68]	; 0x44
   10d60:	d90a      	bls.n	10d78 <_dtoa_r+0x730>
   10d62:	2201      	movs	r2, #1
   10d64:	2304      	movs	r3, #4
   10d66:	005b      	lsls	r3, r3, #1
   10d68:	f103 0014 	add.w	r0, r3, #20
   10d6c:	42b0      	cmp	r0, r6
   10d6e:	4611      	mov	r1, r2
   10d70:	f102 0201 	add.w	r2, r2, #1
   10d74:	d9f7      	bls.n	10d66 <_dtoa_r+0x71e>
   10d76:	6461      	str	r1, [r4, #68]	; 0x44
   10d78:	4620      	mov	r0, r4
   10d7a:	f000 fe93 	bl	11aa4 <_Balloc>
   10d7e:	2e0e      	cmp	r6, #14
   10d80:	9009      	str	r0, [sp, #36]	; 0x24
   10d82:	6420      	str	r0, [r4, #64]	; 0x40
   10d84:	f63f ad6c 	bhi.w	10860 <_dtoa_r+0x218>
   10d88:	2d00      	cmp	r5, #0
   10d8a:	f43f ad69 	beq.w	10860 <_dtoa_r+0x218>
   10d8e:	9d07      	ldr	r5, [sp, #28]
   10d90:	2d00      	cmp	r5, #0
   10d92:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
   10d96:	f340 821b 	ble.w	111d0 <_dtoa_r+0xb88>
   10d9a:	4b51      	ldr	r3, [pc, #324]	; (10ee0 <_dtoa_r+0x898>)
   10d9c:	f005 020f 	and.w	r2, r5, #15
   10da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10da4:	112d      	asrs	r5, r5, #4
   10da6:	e9d3 6700 	ldrd	r6, r7, [r3]
   10daa:	06eb      	lsls	r3, r5, #27
   10dac:	f140 81cd 	bpl.w	1114a <_dtoa_r+0xb02>
   10db0:	4b4c      	ldr	r3, [pc, #304]	; (10ee4 <_dtoa_r+0x89c>)
   10db2:	4650      	mov	r0, sl
   10db4:	4659      	mov	r1, fp
   10db6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   10dba:	f7fb fbd9 	bl	c570 <__aeabi_ddiv>
   10dbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10dc2:	f005 050f 	and.w	r5, r5, #15
   10dc6:	f04f 0803 	mov.w	r8, #3
   10dca:	b18d      	cbz	r5, 10df0 <_dtoa_r+0x7a8>
   10dcc:	f8df a114 	ldr.w	sl, [pc, #276]	; 10ee4 <_dtoa_r+0x89c>
   10dd0:	4630      	mov	r0, r6
   10dd2:	4639      	mov	r1, r7
   10dd4:	07ee      	lsls	r6, r5, #31
   10dd6:	d505      	bpl.n	10de4 <_dtoa_r+0x79c>
   10dd8:	e9da 2300 	ldrd	r2, r3, [sl]
   10ddc:	f108 0801 	add.w	r8, r8, #1
   10de0:	f7fb fa9c 	bl	c31c <__aeabi_dmul>
   10de4:	106d      	asrs	r5, r5, #1
   10de6:	f10a 0a08 	add.w	sl, sl, #8
   10dea:	d1f3      	bne.n	10dd4 <_dtoa_r+0x78c>
   10dec:	4606      	mov	r6, r0
   10dee:	460f      	mov	r7, r1
   10df0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10df4:	4632      	mov	r2, r6
   10df6:	463b      	mov	r3, r7
   10df8:	f7fb fbba 	bl	c570 <__aeabi_ddiv>
   10dfc:	4682      	mov	sl, r0
   10dfe:	468b      	mov	fp, r1
   10e00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   10e02:	b145      	cbz	r5, 10e16 <_dtoa_r+0x7ce>
   10e04:	4650      	mov	r0, sl
   10e06:	4659      	mov	r1, fp
   10e08:	2200      	movs	r2, #0
   10e0a:	4b37      	ldr	r3, [pc, #220]	; (10ee8 <_dtoa_r+0x8a0>)
   10e0c:	f7fb fcf8 	bl	c800 <__aeabi_dcmplt>
   10e10:	2800      	cmp	r0, #0
   10e12:	f040 82a9 	bne.w	11368 <_dtoa_r+0xd20>
   10e16:	4640      	mov	r0, r8
   10e18:	f7fb fa1a 	bl	c250 <__aeabi_i2d>
   10e1c:	4652      	mov	r2, sl
   10e1e:	465b      	mov	r3, fp
   10e20:	f7fb fa7c 	bl	c31c <__aeabi_dmul>
   10e24:	2200      	movs	r2, #0
   10e26:	4b31      	ldr	r3, [pc, #196]	; (10eec <_dtoa_r+0x8a4>)
   10e28:	f7fb f8c6 	bl	bfb8 <__adddf3>
   10e2c:	4606      	mov	r6, r0
   10e2e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   10e32:	f1b9 0f00 	cmp.w	r9, #0
   10e36:	f000 815a 	beq.w	110ee <_dtoa_r+0xaa6>
   10e3a:	9d07      	ldr	r5, [sp, #28]
   10e3c:	9517      	str	r5, [sp, #92]	; 0x5c
   10e3e:	46c8      	mov	r8, r9
   10e40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10e42:	2d00      	cmp	r5, #0
   10e44:	f000 8222 	beq.w	1128c <_dtoa_r+0xc44>
   10e48:	4b25      	ldr	r3, [pc, #148]	; (10ee0 <_dtoa_r+0x898>)
   10e4a:	4929      	ldr	r1, [pc, #164]	; (10ef0 <_dtoa_r+0x8a8>)
   10e4c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   10e50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   10e54:	2000      	movs	r0, #0
   10e56:	f7fb fb8b 	bl	c570 <__aeabi_ddiv>
   10e5a:	4632      	mov	r2, r6
   10e5c:	463b      	mov	r3, r7
   10e5e:	f7fb f8a9 	bl	bfb4 <__aeabi_dsub>
   10e62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10e66:	4659      	mov	r1, fp
   10e68:	4650      	mov	r0, sl
   10e6a:	f7fb fcf1 	bl	c850 <__aeabi_d2iz>
   10e6e:	4605      	mov	r5, r0
   10e70:	f7fb f9ee 	bl	c250 <__aeabi_i2d>
   10e74:	4602      	mov	r2, r0
   10e76:	460b      	mov	r3, r1
   10e78:	4650      	mov	r0, sl
   10e7a:	4659      	mov	r1, fp
   10e7c:	f7fb f89a 	bl	bfb4 <__aeabi_dsub>
   10e80:	3530      	adds	r5, #48	; 0x30
   10e82:	9e09      	ldr	r6, [sp, #36]	; 0x24
   10e84:	e9cd 0104 	strd	r0, r1, [sp, #16]
   10e88:	b2ed      	uxtb	r5, r5
   10e8a:	7035      	strb	r5, [r6, #0]
   10e8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10e94:	f106 0b01 	add.w	fp, r6, #1
   10e98:	f7fb fcd0 	bl	c83c <__aeabi_dcmpgt>
   10e9c:	2800      	cmp	r0, #0
   10e9e:	f040 82a9 	bne.w	113f4 <_dtoa_r+0xdac>
   10ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10ea6:	2000      	movs	r0, #0
   10ea8:	490f      	ldr	r1, [pc, #60]	; (10ee8 <_dtoa_r+0x8a0>)
   10eaa:	f7fb f883 	bl	bfb4 <__aeabi_dsub>
   10eae:	4602      	mov	r2, r0
   10eb0:	460b      	mov	r3, r1
   10eb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10eb6:	f7fb fcc1 	bl	c83c <__aeabi_dcmpgt>
   10eba:	2800      	cmp	r0, #0
   10ebc:	f040 82a0 	bne.w	11400 <_dtoa_r+0xdb8>
   10ec0:	f1b8 0f01 	cmp.w	r8, #1
   10ec4:	f340 8180 	ble.w	111c8 <_dtoa_r+0xb80>
   10ec8:	44b0      	add	r8, r6
   10eca:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   10ece:	46a2      	mov	sl, r4
   10ed0:	46c1      	mov	r9, r8
   10ed2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   10ed6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   10eda:	e019      	b.n	10f10 <_dtoa_r+0x8c8>
   10edc:	fffffbee 	.word	0xfffffbee
   10ee0:	00014318 	.word	0x00014318
   10ee4:	000143e0 	.word	0x000143e0
   10ee8:	3ff00000 	.word	0x3ff00000
   10eec:	401c0000 	.word	0x401c0000
   10ef0:	3fe00000 	.word	0x3fe00000
   10ef4:	2000      	movs	r0, #0
   10ef6:	49a8      	ldr	r1, [pc, #672]	; (11198 <_dtoa_r+0xb50>)
   10ef8:	f7fb f85c 	bl	bfb4 <__aeabi_dsub>
   10efc:	4622      	mov	r2, r4
   10efe:	462b      	mov	r3, r5
   10f00:	f7fb fc7e 	bl	c800 <__aeabi_dcmplt>
   10f04:	2800      	cmp	r0, #0
   10f06:	f040 8279 	bne.w	113fc <_dtoa_r+0xdb4>
   10f0a:	45cb      	cmp	fp, r9
   10f0c:	f000 8159 	beq.w	111c2 <_dtoa_r+0xb7a>
   10f10:	4620      	mov	r0, r4
   10f12:	4629      	mov	r1, r5
   10f14:	2200      	movs	r2, #0
   10f16:	4ba1      	ldr	r3, [pc, #644]	; (1119c <_dtoa_r+0xb54>)
   10f18:	f7fb fa00 	bl	c31c <__aeabi_dmul>
   10f1c:	2200      	movs	r2, #0
   10f1e:	4b9f      	ldr	r3, [pc, #636]	; (1119c <_dtoa_r+0xb54>)
   10f20:	4604      	mov	r4, r0
   10f22:	460d      	mov	r5, r1
   10f24:	4630      	mov	r0, r6
   10f26:	4639      	mov	r1, r7
   10f28:	f7fb f9f8 	bl	c31c <__aeabi_dmul>
   10f2c:	460f      	mov	r7, r1
   10f2e:	4606      	mov	r6, r0
   10f30:	f7fb fc8e 	bl	c850 <__aeabi_d2iz>
   10f34:	4680      	mov	r8, r0
   10f36:	f7fb f98b 	bl	c250 <__aeabi_i2d>
   10f3a:	4602      	mov	r2, r0
   10f3c:	460b      	mov	r3, r1
   10f3e:	4630      	mov	r0, r6
   10f40:	4639      	mov	r1, r7
   10f42:	f7fb f837 	bl	bfb4 <__aeabi_dsub>
   10f46:	f108 0830 	add.w	r8, r8, #48	; 0x30
   10f4a:	fa5f f888 	uxtb.w	r8, r8
   10f4e:	4622      	mov	r2, r4
   10f50:	462b      	mov	r3, r5
   10f52:	f80b 8b01 	strb.w	r8, [fp], #1
   10f56:	4606      	mov	r6, r0
   10f58:	460f      	mov	r7, r1
   10f5a:	f7fb fc51 	bl	c800 <__aeabi_dcmplt>
   10f5e:	4632      	mov	r2, r6
   10f60:	463b      	mov	r3, r7
   10f62:	2800      	cmp	r0, #0
   10f64:	d0c6      	beq.n	10ef4 <_dtoa_r+0x8ac>
   10f66:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   10f68:	9607      	str	r6, [sp, #28]
   10f6a:	4654      	mov	r4, sl
   10f6c:	e539      	b.n	109e2 <_dtoa_r+0x39a>
   10f6e:	2600      	movs	r6, #0
   10f70:	960b      	str	r6, [sp, #44]	; 0x2c
   10f72:	9825      	ldr	r0, [sp, #148]	; 0x94
   10f74:	2800      	cmp	r0, #0
   10f76:	dd3c      	ble.n	10ff2 <_dtoa_r+0x9aa>
   10f78:	4606      	mov	r6, r0
   10f7a:	900f      	str	r0, [sp, #60]	; 0x3c
   10f7c:	4681      	mov	r9, r0
   10f7e:	e6ec      	b.n	10d5a <_dtoa_r+0x712>
   10f80:	2601      	movs	r6, #1
   10f82:	960b      	str	r6, [sp, #44]	; 0x2c
   10f84:	e7f5      	b.n	10f72 <_dtoa_r+0x92a>
   10f86:	f1b9 0f00 	cmp.w	r9, #0
   10f8a:	f73f ac7c 	bgt.w	10886 <_dtoa_r+0x23e>
   10f8e:	f040 80c6 	bne.w	1111e <_dtoa_r+0xad6>
   10f92:	2200      	movs	r2, #0
   10f94:	4b82      	ldr	r3, [pc, #520]	; (111a0 <_dtoa_r+0xb58>)
   10f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10f9a:	f7fb f9bf 	bl	c31c <__aeabi_dmul>
   10f9e:	4652      	mov	r2, sl
   10fa0:	465b      	mov	r3, fp
   10fa2:	f7fb fc41 	bl	c828 <__aeabi_dcmpge>
   10fa6:	46c8      	mov	r8, r9
   10fa8:	464e      	mov	r6, r9
   10faa:	2800      	cmp	r0, #0
   10fac:	d07c      	beq.n	110a8 <_dtoa_r+0xa60>
   10fae:	9d25      	ldr	r5, [sp, #148]	; 0x94
   10fb0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   10fb4:	43ed      	mvns	r5, r5
   10fb6:	9507      	str	r5, [sp, #28]
   10fb8:	4641      	mov	r1, r8
   10fba:	4620      	mov	r0, r4
   10fbc:	f000 fd98 	bl	11af0 <_Bfree>
   10fc0:	2e00      	cmp	r6, #0
   10fc2:	f47f ae06 	bne.w	10bd2 <_dtoa_r+0x58a>
   10fc6:	e50c      	b.n	109e2 <_dtoa_r+0x39a>
   10fc8:	990a      	ldr	r1, [sp, #40]	; 0x28
   10fca:	4620      	mov	r0, r4
   10fcc:	f000 fedc 	bl	11d88 <__pow5mult>
   10fd0:	900a      	str	r0, [sp, #40]	; 0x28
   10fd2:	e56a      	b.n	10aaa <_dtoa_r+0x462>
   10fd4:	9d16      	ldr	r5, [sp, #88]	; 0x58
   10fd6:	2d00      	cmp	r5, #0
   10fd8:	f000 81b7 	beq.w	1134a <_dtoa_r+0xd02>
   10fdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   10fe0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10fe2:	9d08      	ldr	r5, [sp, #32]
   10fe4:	e527      	b.n	10a36 <_dtoa_r+0x3ee>
   10fe6:	4601      	mov	r1, r0
   10fe8:	4620      	mov	r0, r4
   10fea:	f000 fd81 	bl	11af0 <_Bfree>
   10fee:	2201      	movs	r2, #1
   10ff0:	e67a      	b.n	10ce8 <_dtoa_r+0x6a0>
   10ff2:	2601      	movs	r6, #1
   10ff4:	9625      	str	r6, [sp, #148]	; 0x94
   10ff6:	960f      	str	r6, [sp, #60]	; 0x3c
   10ff8:	46b1      	mov	r9, r6
   10ffa:	2100      	movs	r1, #0
   10ffc:	6461      	str	r1, [r4, #68]	; 0x44
   10ffe:	e6bb      	b.n	10d78 <_dtoa_r+0x730>
   11000:	980a      	ldr	r0, [sp, #40]	; 0x28
   11002:	4641      	mov	r1, r8
   11004:	f000 ff6c 	bl	11ee0 <__mcmp>
   11008:	2800      	cmp	r0, #0
   1100a:	f6bf ad8f 	bge.w	10b2c <_dtoa_r+0x4e4>
   1100e:	f8dd e01c 	ldr.w	lr, [sp, #28]
   11012:	990a      	ldr	r1, [sp, #40]	; 0x28
   11014:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   11018:	4620      	mov	r0, r4
   1101a:	220a      	movs	r2, #10
   1101c:	2300      	movs	r3, #0
   1101e:	f8cd e01c 	str.w	lr, [sp, #28]
   11022:	f000 fd6f 	bl	11b04 <__multadd>
   11026:	900a      	str	r0, [sp, #40]	; 0x28
   11028:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1102a:	2800      	cmp	r0, #0
   1102c:	f040 8207 	bne.w	1143e <_dtoa_r+0xdf6>
   11030:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   11034:	e57a      	b.n	10b2c <_dtoa_r+0x4e4>
   11036:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1103a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1103e:	6918      	ldr	r0, [r3, #16]
   11040:	f000 fdac 	bl	11b9c <__hi0bits>
   11044:	f1c0 0020 	rsb	r0, r0, #32
   11048:	e547      	b.n	10ada <_dtoa_r+0x492>
   1104a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1104c:	f7ff bb2d 	b.w	106aa <_dtoa_r+0x62>
   11050:	f1ba 0f00 	cmp.w	sl, #0
   11054:	f47f ad3b 	bne.w	10ace <_dtoa_r+0x486>
   11058:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1105c:	2b00      	cmp	r3, #0
   1105e:	f040 817b 	bne.w	11358 <_dtoa_r+0xd10>
   11062:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   11066:	0d3f      	lsrs	r7, r7, #20
   11068:	053f      	lsls	r7, r7, #20
   1106a:	2f00      	cmp	r7, #0
   1106c:	f43f ad30 	beq.w	10ad0 <_dtoa_r+0x488>
   11070:	9a08      	ldr	r2, [sp, #32]
   11072:	9b06      	ldr	r3, [sp, #24]
   11074:	3201      	adds	r2, #1
   11076:	3301      	adds	r3, #1
   11078:	9208      	str	r2, [sp, #32]
   1107a:	9306      	str	r3, [sp, #24]
   1107c:	2701      	movs	r7, #1
   1107e:	e527      	b.n	10ad0 <_dtoa_r+0x488>
   11080:	9924      	ldr	r1, [sp, #144]	; 0x90
   11082:	2902      	cmp	r1, #2
   11084:	f77f ad56 	ble.w	10b34 <_dtoa_r+0x4ec>
   11088:	f1b9 0f00 	cmp.w	r9, #0
   1108c:	d18f      	bne.n	10fae <_dtoa_r+0x966>
   1108e:	4641      	mov	r1, r8
   11090:	464b      	mov	r3, r9
   11092:	2205      	movs	r2, #5
   11094:	4620      	mov	r0, r4
   11096:	f000 fd35 	bl	11b04 <__multadd>
   1109a:	4680      	mov	r8, r0
   1109c:	4641      	mov	r1, r8
   1109e:	980a      	ldr	r0, [sp, #40]	; 0x28
   110a0:	f000 ff1e 	bl	11ee0 <__mcmp>
   110a4:	2800      	cmp	r0, #0
   110a6:	dd82      	ble.n	10fae <_dtoa_r+0x966>
   110a8:	9d07      	ldr	r5, [sp, #28]
   110aa:	3501      	adds	r5, #1
   110ac:	9507      	str	r5, [sp, #28]
   110ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
   110b0:	2331      	movs	r3, #49	; 0x31
   110b2:	702b      	strb	r3, [r5, #0]
   110b4:	f105 0b01 	add.w	fp, r5, #1
   110b8:	e77e      	b.n	10fb8 <_dtoa_r+0x970>
   110ba:	9807      	ldr	r0, [sp, #28]
   110bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   110be:	2331      	movs	r3, #49	; 0x31
   110c0:	3001      	adds	r0, #1
   110c2:	9007      	str	r0, [sp, #28]
   110c4:	700b      	strb	r3, [r1, #0]
   110c6:	e576      	b.n	10bb6 <_dtoa_r+0x56e>
   110c8:	46a3      	mov	fp, r4
   110ca:	9c03      	ldr	r4, [sp, #12]
   110cc:	e489      	b.n	109e2 <_dtoa_r+0x39a>
   110ce:	4640      	mov	r0, r8
   110d0:	f7fb f8be 	bl	c250 <__aeabi_i2d>
   110d4:	4602      	mov	r2, r0
   110d6:	460b      	mov	r3, r1
   110d8:	4650      	mov	r0, sl
   110da:	4659      	mov	r1, fp
   110dc:	f7fb f91e 	bl	c31c <__aeabi_dmul>
   110e0:	2200      	movs	r2, #0
   110e2:	4b30      	ldr	r3, [pc, #192]	; (111a4 <_dtoa_r+0xb5c>)
   110e4:	f7fa ff68 	bl	bfb8 <__adddf3>
   110e8:	4606      	mov	r6, r0
   110ea:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   110ee:	4650      	mov	r0, sl
   110f0:	4659      	mov	r1, fp
   110f2:	2200      	movs	r2, #0
   110f4:	4b2a      	ldr	r3, [pc, #168]	; (111a0 <_dtoa_r+0xb58>)
   110f6:	f7fa ff5d 	bl	bfb4 <__aeabi_dsub>
   110fa:	4632      	mov	r2, r6
   110fc:	463b      	mov	r3, r7
   110fe:	4682      	mov	sl, r0
   11100:	468b      	mov	fp, r1
   11102:	f7fb fb9b 	bl	c83c <__aeabi_dcmpgt>
   11106:	2800      	cmp	r0, #0
   11108:	f040 80bc 	bne.w	11284 <_dtoa_r+0xc3c>
   1110c:	4632      	mov	r2, r6
   1110e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   11112:	4650      	mov	r0, sl
   11114:	4659      	mov	r1, fp
   11116:	f7fb fb73 	bl	c800 <__aeabi_dcmplt>
   1111a:	2800      	cmp	r0, #0
   1111c:	d054      	beq.n	111c8 <_dtoa_r+0xb80>
   1111e:	f04f 0800 	mov.w	r8, #0
   11122:	4646      	mov	r6, r8
   11124:	e743      	b.n	10fae <_dtoa_r+0x966>
   11126:	990a      	ldr	r1, [sp, #40]	; 0x28
   11128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1112a:	4620      	mov	r0, r4
   1112c:	f000 fe2c 	bl	11d88 <__pow5mult>
   11130:	900a      	str	r0, [sp, #40]	; 0x28
   11132:	e4ba      	b.n	10aaa <_dtoa_r+0x462>
   11134:	2601      	movs	r6, #1
   11136:	960b      	str	r6, [sp, #44]	; 0x2c
   11138:	e602      	b.n	10d40 <_dtoa_r+0x6f8>
   1113a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1113c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1113e:	970c      	str	r7, [sp, #48]	; 0x30
   11140:	1b7b      	subs	r3, r7, r5
   11142:	441e      	add	r6, r3
   11144:	960d      	str	r6, [sp, #52]	; 0x34
   11146:	2700      	movs	r7, #0
   11148:	e46f      	b.n	10a2a <_dtoa_r+0x3e2>
   1114a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1114e:	f04f 0802 	mov.w	r8, #2
   11152:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11156:	e638      	b.n	10dca <_dtoa_r+0x782>
   11158:	2a00      	cmp	r2, #0
   1115a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1115e:	46d9      	mov	r9, fp
   11160:	dd11      	ble.n	11186 <_dtoa_r+0xb3e>
   11162:	990a      	ldr	r1, [sp, #40]	; 0x28
   11164:	2201      	movs	r2, #1
   11166:	4620      	mov	r0, r4
   11168:	f000 fe5c 	bl	11e24 <__lshift>
   1116c:	4641      	mov	r1, r8
   1116e:	900a      	str	r0, [sp, #40]	; 0x28
   11170:	f000 feb6 	bl	11ee0 <__mcmp>
   11174:	2800      	cmp	r0, #0
   11176:	f340 815b 	ble.w	11430 <_dtoa_r+0xde8>
   1117a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1117e:	f000 811a 	beq.w	113b6 <_dtoa_r+0xd6e>
   11182:	f109 0a31 	add.w	sl, r9, #49	; 0x31
   11186:	9b06      	ldr	r3, [sp, #24]
   11188:	4635      	mov	r5, r6
   1118a:	f883 a000 	strb.w	sl, [r3]
   1118e:	f103 0b01 	add.w	fp, r3, #1
   11192:	463e      	mov	r6, r7
   11194:	e50f      	b.n	10bb6 <_dtoa_r+0x56e>
   11196:	bf00      	nop
   11198:	3ff00000 	.word	0x3ff00000
   1119c:	40240000 	.word	0x40240000
   111a0:	40140000 	.word	0x40140000
   111a4:	401c0000 	.word	0x401c0000
   111a8:	d103      	bne.n	111b2 <_dtoa_r+0xb6a>
   111aa:	f01a 0f01 	tst.w	sl, #1
   111ae:	f47f acf2 	bne.w	10b96 <_dtoa_r+0x54e>
   111b2:	465b      	mov	r3, fp
   111b4:	469b      	mov	fp, r3
   111b6:	3b01      	subs	r3, #1
   111b8:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   111bc:	2a30      	cmp	r2, #48	; 0x30
   111be:	d0f9      	beq.n	111b4 <_dtoa_r+0xb6c>
   111c0:	e4f9      	b.n	10bb6 <_dtoa_r+0x56e>
   111c2:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   111c6:	4654      	mov	r4, sl
   111c8:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   111cc:	f7ff bb48 	b.w	10860 <_dtoa_r+0x218>
   111d0:	9e07      	ldr	r6, [sp, #28]
   111d2:	4275      	negs	r5, r6
   111d4:	2d00      	cmp	r5, #0
   111d6:	f000 80c2 	beq.w	1135e <_dtoa_r+0xd16>
   111da:	4ba3      	ldr	r3, [pc, #652]	; (11468 <_dtoa_r+0xe20>)
   111dc:	f005 020f 	and.w	r2, r5, #15
   111e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   111e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   111e8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   111ec:	f7fb f896 	bl	c31c <__aeabi_dmul>
   111f0:	112d      	asrs	r5, r5, #4
   111f2:	4682      	mov	sl, r0
   111f4:	468b      	mov	fp, r1
   111f6:	f000 812d 	beq.w	11454 <_dtoa_r+0xe0c>
   111fa:	4e9c      	ldr	r6, [pc, #624]	; (1146c <_dtoa_r+0xe24>)
   111fc:	f04f 0802 	mov.w	r8, #2
   11200:	07ea      	lsls	r2, r5, #31
   11202:	d505      	bpl.n	11210 <_dtoa_r+0xbc8>
   11204:	e9d6 2300 	ldrd	r2, r3, [r6]
   11208:	f108 0801 	add.w	r8, r8, #1
   1120c:	f7fb f886 	bl	c31c <__aeabi_dmul>
   11210:	106d      	asrs	r5, r5, #1
   11212:	f106 0608 	add.w	r6, r6, #8
   11216:	d1f3      	bne.n	11200 <_dtoa_r+0xbb8>
   11218:	4682      	mov	sl, r0
   1121a:	468b      	mov	fp, r1
   1121c:	e5f0      	b.n	10e00 <_dtoa_r+0x7b8>
   1121e:	9e07      	ldr	r6, [sp, #28]
   11220:	9d09      	ldr	r5, [sp, #36]	; 0x24
   11222:	2230      	movs	r2, #48	; 0x30
   11224:	702a      	strb	r2, [r5, #0]
   11226:	3601      	adds	r6, #1
   11228:	2231      	movs	r2, #49	; 0x31
   1122a:	9607      	str	r6, [sp, #28]
   1122c:	701a      	strb	r2, [r3, #0]
   1122e:	f7ff bbd8 	b.w	109e2 <_dtoa_r+0x39a>
   11232:	6871      	ldr	r1, [r6, #4]
   11234:	4620      	mov	r0, r4
   11236:	f000 fc35 	bl	11aa4 <_Balloc>
   1123a:	6933      	ldr	r3, [r6, #16]
   1123c:	1c9a      	adds	r2, r3, #2
   1123e:	4605      	mov	r5, r0
   11240:	0092      	lsls	r2, r2, #2
   11242:	f106 010c 	add.w	r1, r6, #12
   11246:	300c      	adds	r0, #12
   11248:	f7fd f83e 	bl	e2c8 <memcpy>
   1124c:	4620      	mov	r0, r4
   1124e:	4629      	mov	r1, r5
   11250:	2201      	movs	r2, #1
   11252:	f000 fde7 	bl	11e24 <__lshift>
   11256:	4607      	mov	r7, r0
   11258:	e504      	b.n	10c64 <_dtoa_r+0x61c>
   1125a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1125e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   11262:	f000 80a8 	beq.w	113b6 <_dtoa_r+0xd6e>
   11266:	9d06      	ldr	r5, [sp, #24]
   11268:	f10a 0301 	add.w	r3, sl, #1
   1126c:	702b      	strb	r3, [r5, #0]
   1126e:	4635      	mov	r5, r6
   11270:	9e06      	ldr	r6, [sp, #24]
   11272:	f106 0b01 	add.w	fp, r6, #1
   11276:	463e      	mov	r6, r7
   11278:	e49d      	b.n	10bb6 <_dtoa_r+0x56e>
   1127a:	4635      	mov	r5, r6
   1127c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   11280:	463e      	mov	r6, r7
   11282:	e47c      	b.n	10b7e <_dtoa_r+0x536>
   11284:	f04f 0800 	mov.w	r8, #0
   11288:	4646      	mov	r6, r8
   1128a:	e70d      	b.n	110a8 <_dtoa_r+0xa60>
   1128c:	4976      	ldr	r1, [pc, #472]	; (11468 <_dtoa_r+0xe20>)
   1128e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   11292:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   11296:	4632      	mov	r2, r6
   11298:	463b      	mov	r3, r7
   1129a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1129e:	9510      	str	r5, [sp, #64]	; 0x40
   112a0:	f7fb f83c 	bl	c31c <__aeabi_dmul>
   112a4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   112a8:	4659      	mov	r1, fp
   112aa:	4650      	mov	r0, sl
   112ac:	f7fb fad0 	bl	c850 <__aeabi_d2iz>
   112b0:	4605      	mov	r5, r0
   112b2:	f7fa ffcd 	bl	c250 <__aeabi_i2d>
   112b6:	4602      	mov	r2, r0
   112b8:	460b      	mov	r3, r1
   112ba:	4650      	mov	r0, sl
   112bc:	4659      	mov	r1, fp
   112be:	f7fa fe79 	bl	bfb4 <__aeabi_dsub>
   112c2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   112c6:	3530      	adds	r5, #48	; 0x30
   112c8:	f1b8 0f01 	cmp.w	r8, #1
   112cc:	4606      	mov	r6, r0
   112ce:	460f      	mov	r7, r1
   112d0:	f88e 5000 	strb.w	r5, [lr]
   112d4:	f10e 0b01 	add.w	fp, lr, #1
   112d8:	d01e      	beq.n	11318 <_dtoa_r+0xcd0>
   112da:	9d09      	ldr	r5, [sp, #36]	; 0x24
   112dc:	1e6b      	subs	r3, r5, #1
   112de:	eb03 0a08 	add.w	sl, r3, r8
   112e2:	2200      	movs	r2, #0
   112e4:	4b62      	ldr	r3, [pc, #392]	; (11470 <_dtoa_r+0xe28>)
   112e6:	f7fb f819 	bl	c31c <__aeabi_dmul>
   112ea:	460f      	mov	r7, r1
   112ec:	4606      	mov	r6, r0
   112ee:	f7fb faaf 	bl	c850 <__aeabi_d2iz>
   112f2:	4680      	mov	r8, r0
   112f4:	f7fa ffac 	bl	c250 <__aeabi_i2d>
   112f8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   112fc:	4602      	mov	r2, r0
   112fe:	460b      	mov	r3, r1
   11300:	4630      	mov	r0, r6
   11302:	4639      	mov	r1, r7
   11304:	f7fa fe56 	bl	bfb4 <__aeabi_dsub>
   11308:	f805 8f01 	strb.w	r8, [r5, #1]!
   1130c:	4555      	cmp	r5, sl
   1130e:	d1e8      	bne.n	112e2 <_dtoa_r+0xc9a>
   11310:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11312:	4606      	mov	r6, r0
   11314:	460f      	mov	r7, r1
   11316:	44ab      	add	fp, r5
   11318:	2200      	movs	r2, #0
   1131a:	4b56      	ldr	r3, [pc, #344]	; (11474 <_dtoa_r+0xe2c>)
   1131c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   11320:	f7fa fe4a 	bl	bfb8 <__adddf3>
   11324:	4632      	mov	r2, r6
   11326:	463b      	mov	r3, r7
   11328:	f7fb fa6a 	bl	c800 <__aeabi_dcmplt>
   1132c:	2800      	cmp	r0, #0
   1132e:	d04d      	beq.n	113cc <_dtoa_r+0xd84>
   11330:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   11332:	9607      	str	r6, [sp, #28]
   11334:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   11338:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1133a:	f7ff bb4b 	b.w	109d4 <_dtoa_r+0x38c>
   1133e:	9e08      	ldr	r6, [sp, #32]
   11340:	2300      	movs	r3, #0
   11342:	ebc9 0506 	rsb	r5, r9, r6
   11346:	f7ff bb76 	b.w	10a36 <_dtoa_r+0x3ee>
   1134a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1134c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1134e:	9d08      	ldr	r5, [sp, #32]
   11350:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   11354:	f7ff bb6f 	b.w	10a36 <_dtoa_r+0x3ee>
   11358:	4657      	mov	r7, sl
   1135a:	f7ff bbb9 	b.w	10ad0 <_dtoa_r+0x488>
   1135e:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   11362:	f04f 0802 	mov.w	r8, #2
   11366:	e54b      	b.n	10e00 <_dtoa_r+0x7b8>
   11368:	f1b9 0f00 	cmp.w	r9, #0
   1136c:	f43f aeaf 	beq.w	110ce <_dtoa_r+0xa86>
   11370:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   11372:	2e00      	cmp	r6, #0
   11374:	f77f af28 	ble.w	111c8 <_dtoa_r+0xb80>
   11378:	2200      	movs	r2, #0
   1137a:	4b3d      	ldr	r3, [pc, #244]	; (11470 <_dtoa_r+0xe28>)
   1137c:	4650      	mov	r0, sl
   1137e:	4659      	mov	r1, fp
   11380:	f7fa ffcc 	bl	c31c <__aeabi_dmul>
   11384:	4682      	mov	sl, r0
   11386:	f108 0001 	add.w	r0, r8, #1
   1138a:	468b      	mov	fp, r1
   1138c:	f7fa ff60 	bl	c250 <__aeabi_i2d>
   11390:	4602      	mov	r2, r0
   11392:	460b      	mov	r3, r1
   11394:	4650      	mov	r0, sl
   11396:	4659      	mov	r1, fp
   11398:	f7fa ffc0 	bl	c31c <__aeabi_dmul>
   1139c:	2200      	movs	r2, #0
   1139e:	4b36      	ldr	r3, [pc, #216]	; (11478 <_dtoa_r+0xe30>)
   113a0:	f7fa fe0a 	bl	bfb8 <__adddf3>
   113a4:	9d07      	ldr	r5, [sp, #28]
   113a6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   113aa:	3d01      	subs	r5, #1
   113ac:	4606      	mov	r6, r0
   113ae:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   113b2:	9517      	str	r5, [sp, #92]	; 0x5c
   113b4:	e544      	b.n	10e40 <_dtoa_r+0x7f8>
   113b6:	4635      	mov	r5, r6
   113b8:	9b06      	ldr	r3, [sp, #24]
   113ba:	9e06      	ldr	r6, [sp, #24]
   113bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   113be:	2239      	movs	r2, #57	; 0x39
   113c0:	7032      	strb	r2, [r6, #0]
   113c2:	f103 0b01 	add.w	fp, r3, #1
   113c6:	463e      	mov	r6, r7
   113c8:	f7ff bbef 	b.w	10baa <_dtoa_r+0x562>
   113cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   113d0:	2000      	movs	r0, #0
   113d2:	4928      	ldr	r1, [pc, #160]	; (11474 <_dtoa_r+0xe2c>)
   113d4:	f7fa fdee 	bl	bfb4 <__aeabi_dsub>
   113d8:	4632      	mov	r2, r6
   113da:	463b      	mov	r3, r7
   113dc:	f7fb fa2e 	bl	c83c <__aeabi_dcmpgt>
   113e0:	2800      	cmp	r0, #0
   113e2:	f43f aef1 	beq.w	111c8 <_dtoa_r+0xb80>
   113e6:	465b      	mov	r3, fp
   113e8:	469b      	mov	fp, r3
   113ea:	3b01      	subs	r3, #1
   113ec:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   113f0:	2a30      	cmp	r2, #48	; 0x30
   113f2:	d0f9      	beq.n	113e8 <_dtoa_r+0xda0>
   113f4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   113f6:	9507      	str	r5, [sp, #28]
   113f8:	f7ff baf3 	b.w	109e2 <_dtoa_r+0x39a>
   113fc:	4645      	mov	r5, r8
   113fe:	4654      	mov	r4, sl
   11400:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   11402:	9607      	str	r6, [sp, #28]
   11404:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11406:	f7ff bae5 	b.w	109d4 <_dtoa_r+0x38c>
   1140a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1140e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   11412:	d0d0      	beq.n	113b6 <_dtoa_r+0xd6e>
   11414:	9b03      	ldr	r3, [sp, #12]
   11416:	4635      	mov	r5, r6
   11418:	2b00      	cmp	r3, #0
   1141a:	9e06      	ldr	r6, [sp, #24]
   1141c:	bfc8      	it	gt
   1141e:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
   11422:	f886 a000 	strb.w	sl, [r6]
   11426:	f106 0b01 	add.w	fp, r6, #1
   1142a:	463e      	mov	r6, r7
   1142c:	f7ff bbc3 	b.w	10bb6 <_dtoa_r+0x56e>
   11430:	f47f aea9 	bne.w	11186 <_dtoa_r+0xb3e>
   11434:	f01a 0f01 	tst.w	sl, #1
   11438:	f43f aea5 	beq.w	11186 <_dtoa_r+0xb3e>
   1143c:	e69d      	b.n	1117a <_dtoa_r+0xb32>
   1143e:	4631      	mov	r1, r6
   11440:	4620      	mov	r0, r4
   11442:	220a      	movs	r2, #10
   11444:	2300      	movs	r3, #0
   11446:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1144a:	f000 fb5b 	bl	11b04 <__multadd>
   1144e:	4606      	mov	r6, r0
   11450:	f7ff bb6c 	b.w	10b2c <_dtoa_r+0x4e4>
   11454:	f04f 0802 	mov.w	r8, #2
   11458:	e4d2      	b.n	10e00 <_dtoa_r+0x7b8>
   1145a:	f43f ab52 	beq.w	10b02 <_dtoa_r+0x4ba>
   1145e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   11462:	f7ff bbe2 	b.w	10c2a <_dtoa_r+0x5e2>
   11466:	bf00      	nop
   11468:	00014318 	.word	0x00014318
   1146c:	000143e0 	.word	0x000143e0
   11470:	40240000 	.word	0x40240000
   11474:	3fe00000 	.word	0x3fe00000
   11478:	401c0000 	.word	0x401c0000
   1147c:	f3af 8000 	nop.w

00011480 <__sflush_r>:
   11480:	898b      	ldrh	r3, [r1, #12]
   11482:	b29a      	uxth	r2, r3
   11484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11488:	460d      	mov	r5, r1
   1148a:	0711      	lsls	r1, r2, #28
   1148c:	4680      	mov	r8, r0
   1148e:	d43c      	bmi.n	1150a <__sflush_r+0x8a>
   11490:	686a      	ldr	r2, [r5, #4]
   11492:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   11496:	2a00      	cmp	r2, #0
   11498:	81ab      	strh	r3, [r5, #12]
   1149a:	dd59      	ble.n	11550 <__sflush_r+0xd0>
   1149c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1149e:	2c00      	cmp	r4, #0
   114a0:	d04b      	beq.n	1153a <__sflush_r+0xba>
   114a2:	b29b      	uxth	r3, r3
   114a4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   114a8:	2100      	movs	r1, #0
   114aa:	b292      	uxth	r2, r2
   114ac:	f8d8 6000 	ldr.w	r6, [r8]
   114b0:	f8c8 1000 	str.w	r1, [r8]
   114b4:	2a00      	cmp	r2, #0
   114b6:	d04f      	beq.n	11558 <__sflush_r+0xd8>
   114b8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   114ba:	075f      	lsls	r7, r3, #29
   114bc:	d505      	bpl.n	114ca <__sflush_r+0x4a>
   114be:	6869      	ldr	r1, [r5, #4]
   114c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   114c2:	1a52      	subs	r2, r2, r1
   114c4:	b10b      	cbz	r3, 114ca <__sflush_r+0x4a>
   114c6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   114c8:	1ad2      	subs	r2, r2, r3
   114ca:	4640      	mov	r0, r8
   114cc:	69e9      	ldr	r1, [r5, #28]
   114ce:	2300      	movs	r3, #0
   114d0:	47a0      	blx	r4
   114d2:	1c44      	adds	r4, r0, #1
   114d4:	d04a      	beq.n	1156c <__sflush_r+0xec>
   114d6:	89aa      	ldrh	r2, [r5, #12]
   114d8:	692b      	ldr	r3, [r5, #16]
   114da:	602b      	str	r3, [r5, #0]
   114dc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   114e0:	b29b      	uxth	r3, r3
   114e2:	2200      	movs	r2, #0
   114e4:	606a      	str	r2, [r5, #4]
   114e6:	04da      	lsls	r2, r3, #19
   114e8:	81ab      	strh	r3, [r5, #12]
   114ea:	d44c      	bmi.n	11586 <__sflush_r+0x106>
   114ec:	6b29      	ldr	r1, [r5, #48]	; 0x30
   114ee:	f8c8 6000 	str.w	r6, [r8]
   114f2:	b311      	cbz	r1, 1153a <__sflush_r+0xba>
   114f4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   114f8:	4299      	cmp	r1, r3
   114fa:	d002      	beq.n	11502 <__sflush_r+0x82>
   114fc:	4640      	mov	r0, r8
   114fe:	f000 f969 	bl	117d4 <_free_r>
   11502:	2000      	movs	r0, #0
   11504:	6328      	str	r0, [r5, #48]	; 0x30
   11506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1150a:	692e      	ldr	r6, [r5, #16]
   1150c:	b1ae      	cbz	r6, 1153a <__sflush_r+0xba>
   1150e:	682c      	ldr	r4, [r5, #0]
   11510:	602e      	str	r6, [r5, #0]
   11512:	0791      	lsls	r1, r2, #30
   11514:	bf0c      	ite	eq
   11516:	696b      	ldreq	r3, [r5, #20]
   11518:	2300      	movne	r3, #0
   1151a:	1ba4      	subs	r4, r4, r6
   1151c:	60ab      	str	r3, [r5, #8]
   1151e:	e00a      	b.n	11536 <__sflush_r+0xb6>
   11520:	4632      	mov	r2, r6
   11522:	4623      	mov	r3, r4
   11524:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   11526:	69e9      	ldr	r1, [r5, #28]
   11528:	4640      	mov	r0, r8
   1152a:	47b8      	blx	r7
   1152c:	2800      	cmp	r0, #0
   1152e:	ebc0 0404 	rsb	r4, r0, r4
   11532:	4406      	add	r6, r0
   11534:	dd04      	ble.n	11540 <__sflush_r+0xc0>
   11536:	2c00      	cmp	r4, #0
   11538:	dcf2      	bgt.n	11520 <__sflush_r+0xa0>
   1153a:	2000      	movs	r0, #0
   1153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11540:	89ab      	ldrh	r3, [r5, #12]
   11542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11546:	81ab      	strh	r3, [r5, #12]
   11548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11550:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   11552:	2a00      	cmp	r2, #0
   11554:	dca2      	bgt.n	1149c <__sflush_r+0x1c>
   11556:	e7f0      	b.n	1153a <__sflush_r+0xba>
   11558:	2301      	movs	r3, #1
   1155a:	4640      	mov	r0, r8
   1155c:	69e9      	ldr	r1, [r5, #28]
   1155e:	47a0      	blx	r4
   11560:	1c43      	adds	r3, r0, #1
   11562:	4602      	mov	r2, r0
   11564:	d01e      	beq.n	115a4 <__sflush_r+0x124>
   11566:	89ab      	ldrh	r3, [r5, #12]
   11568:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1156a:	e7a6      	b.n	114ba <__sflush_r+0x3a>
   1156c:	f8d8 3000 	ldr.w	r3, [r8]
   11570:	b95b      	cbnz	r3, 1158a <__sflush_r+0x10a>
   11572:	89a9      	ldrh	r1, [r5, #12]
   11574:	606b      	str	r3, [r5, #4]
   11576:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
   1157a:	b29b      	uxth	r3, r3
   1157c:	692a      	ldr	r2, [r5, #16]
   1157e:	81ab      	strh	r3, [r5, #12]
   11580:	04db      	lsls	r3, r3, #19
   11582:	602a      	str	r2, [r5, #0]
   11584:	d5b2      	bpl.n	114ec <__sflush_r+0x6c>
   11586:	6528      	str	r0, [r5, #80]	; 0x50
   11588:	e7b0      	b.n	114ec <__sflush_r+0x6c>
   1158a:	2b1d      	cmp	r3, #29
   1158c:	d001      	beq.n	11592 <__sflush_r+0x112>
   1158e:	2b16      	cmp	r3, #22
   11590:	d119      	bne.n	115c6 <__sflush_r+0x146>
   11592:	89aa      	ldrh	r2, [r5, #12]
   11594:	692b      	ldr	r3, [r5, #16]
   11596:	602b      	str	r3, [r5, #0]
   11598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1159c:	2300      	movs	r3, #0
   1159e:	81aa      	strh	r2, [r5, #12]
   115a0:	606b      	str	r3, [r5, #4]
   115a2:	e7a3      	b.n	114ec <__sflush_r+0x6c>
   115a4:	f8d8 3000 	ldr.w	r3, [r8]
   115a8:	2b00      	cmp	r3, #0
   115aa:	d0dc      	beq.n	11566 <__sflush_r+0xe6>
   115ac:	2b1d      	cmp	r3, #29
   115ae:	d007      	beq.n	115c0 <__sflush_r+0x140>
   115b0:	2b16      	cmp	r3, #22
   115b2:	d005      	beq.n	115c0 <__sflush_r+0x140>
   115b4:	89ab      	ldrh	r3, [r5, #12]
   115b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   115ba:	81ab      	strh	r3, [r5, #12]
   115bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115c0:	f8c8 6000 	str.w	r6, [r8]
   115c4:	e7b9      	b.n	1153a <__sflush_r+0xba>
   115c6:	89ab      	ldrh	r3, [r5, #12]
   115c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   115cc:	81ab      	strh	r3, [r5, #12]
   115ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115d2:	bf00      	nop

000115d4 <_fflush_r>:
   115d4:	b510      	push	{r4, lr}
   115d6:	4604      	mov	r4, r0
   115d8:	b082      	sub	sp, #8
   115da:	b108      	cbz	r0, 115e0 <_fflush_r+0xc>
   115dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   115de:	b153      	cbz	r3, 115f6 <_fflush_r+0x22>
   115e0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   115e4:	b908      	cbnz	r0, 115ea <_fflush_r+0x16>
   115e6:	b002      	add	sp, #8
   115e8:	bd10      	pop	{r4, pc}
   115ea:	4620      	mov	r0, r4
   115ec:	b002      	add	sp, #8
   115ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   115f2:	f7ff bf45 	b.w	11480 <__sflush_r>
   115f6:	9101      	str	r1, [sp, #4]
   115f8:	f000 f808 	bl	1160c <__sinit>
   115fc:	9901      	ldr	r1, [sp, #4]
   115fe:	e7ef      	b.n	115e0 <_fflush_r+0xc>

00011600 <_cleanup_r>:
   11600:	4901      	ldr	r1, [pc, #4]	; (11608 <_cleanup_r+0x8>)
   11602:	f000 b9b5 	b.w	11970 <_fwalk>
   11606:	bf00      	nop
   11608:	000123a1 	.word	0x000123a1

0001160c <__sinit>:
   1160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11610:	6b84      	ldr	r4, [r0, #56]	; 0x38
   11612:	b083      	sub	sp, #12
   11614:	4607      	mov	r7, r0
   11616:	2c00      	cmp	r4, #0
   11618:	d165      	bne.n	116e6 <__sinit+0xda>
   1161a:	6845      	ldr	r5, [r0, #4]
   1161c:	4833      	ldr	r0, [pc, #204]	; (116ec <__sinit+0xe0>)
   1161e:	63f8      	str	r0, [r7, #60]	; 0x3c
   11620:	2304      	movs	r3, #4
   11622:	2103      	movs	r1, #3
   11624:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   11628:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   1162c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   11630:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   11634:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   11638:	81ab      	strh	r3, [r5, #12]
   1163a:	602c      	str	r4, [r5, #0]
   1163c:	606c      	str	r4, [r5, #4]
   1163e:	60ac      	str	r4, [r5, #8]
   11640:	666c      	str	r4, [r5, #100]	; 0x64
   11642:	81ec      	strh	r4, [r5, #14]
   11644:	612c      	str	r4, [r5, #16]
   11646:	616c      	str	r4, [r5, #20]
   11648:	61ac      	str	r4, [r5, #24]
   1164a:	4621      	mov	r1, r4
   1164c:	2208      	movs	r2, #8
   1164e:	f7fc ff35 	bl	e4bc <memset>
   11652:	68be      	ldr	r6, [r7, #8]
   11654:	f8df b098 	ldr.w	fp, [pc, #152]	; 116f0 <__sinit+0xe4>
   11658:	f8df a098 	ldr.w	sl, [pc, #152]	; 116f4 <__sinit+0xe8>
   1165c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 116f8 <__sinit+0xec>
   11660:	f8df 8098 	ldr.w	r8, [pc, #152]	; 116fc <__sinit+0xf0>
   11664:	61ed      	str	r5, [r5, #28]
   11666:	2301      	movs	r3, #1
   11668:	2209      	movs	r2, #9
   1166a:	f8c5 b020 	str.w	fp, [r5, #32]
   1166e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   11672:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   11676:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   1167a:	4621      	mov	r1, r4
   1167c:	81f3      	strh	r3, [r6, #14]
   1167e:	81b2      	strh	r2, [r6, #12]
   11680:	6034      	str	r4, [r6, #0]
   11682:	6074      	str	r4, [r6, #4]
   11684:	60b4      	str	r4, [r6, #8]
   11686:	6674      	str	r4, [r6, #100]	; 0x64
   11688:	6134      	str	r4, [r6, #16]
   1168a:	6174      	str	r4, [r6, #20]
   1168c:	61b4      	str	r4, [r6, #24]
   1168e:	2208      	movs	r2, #8
   11690:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   11694:	9301      	str	r3, [sp, #4]
   11696:	f7fc ff11 	bl	e4bc <memset>
   1169a:	68fd      	ldr	r5, [r7, #12]
   1169c:	61f6      	str	r6, [r6, #28]
   1169e:	2012      	movs	r0, #18
   116a0:	2202      	movs	r2, #2
   116a2:	f8c6 b020 	str.w	fp, [r6, #32]
   116a6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   116aa:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   116ae:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   116b2:	4621      	mov	r1, r4
   116b4:	81a8      	strh	r0, [r5, #12]
   116b6:	81ea      	strh	r2, [r5, #14]
   116b8:	602c      	str	r4, [r5, #0]
   116ba:	606c      	str	r4, [r5, #4]
   116bc:	60ac      	str	r4, [r5, #8]
   116be:	666c      	str	r4, [r5, #100]	; 0x64
   116c0:	612c      	str	r4, [r5, #16]
   116c2:	616c      	str	r4, [r5, #20]
   116c4:	61ac      	str	r4, [r5, #24]
   116c6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   116ca:	2208      	movs	r2, #8
   116cc:	f7fc fef6 	bl	e4bc <memset>
   116d0:	9b01      	ldr	r3, [sp, #4]
   116d2:	61ed      	str	r5, [r5, #28]
   116d4:	f8c5 b020 	str.w	fp, [r5, #32]
   116d8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   116dc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   116e0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   116e4:	63bb      	str	r3, [r7, #56]	; 0x38
   116e6:	b003      	add	sp, #12
   116e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116ec:	00011601 	.word	0x00011601
   116f0:	000120b9 	.word	0x000120b9
   116f4:	000120dd 	.word	0x000120dd
   116f8:	00012115 	.word	0x00012115
   116fc:	00012135 	.word	0x00012135

00011700 <__sfp_lock_acquire>:
   11700:	4770      	bx	lr
   11702:	bf00      	nop

00011704 <__sfp_lock_release>:
   11704:	4770      	bx	lr
   11706:	bf00      	nop

00011708 <__libc_fini_array>:
   11708:	b538      	push	{r3, r4, r5, lr}
   1170a:	4d09      	ldr	r5, [pc, #36]	; (11730 <__libc_fini_array+0x28>)
   1170c:	4c09      	ldr	r4, [pc, #36]	; (11734 <__libc_fini_array+0x2c>)
   1170e:	1b64      	subs	r4, r4, r5
   11710:	10a4      	asrs	r4, r4, #2
   11712:	bf18      	it	ne
   11714:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   11718:	d005      	beq.n	11726 <__libc_fini_array+0x1e>
   1171a:	3c01      	subs	r4, #1
   1171c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   11720:	4798      	blx	r3
   11722:	2c00      	cmp	r4, #0
   11724:	d1f9      	bne.n	1171a <__libc_fini_array+0x12>
   11726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1172a:	f002 be8d 	b.w	14448 <__init_array_end>
   1172e:	bf00      	nop
	...

00011738 <_malloc_trim_r>:
   11738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1173a:	4d23      	ldr	r5, [pc, #140]	; (117c8 <_malloc_trim_r+0x90>)
   1173c:	460f      	mov	r7, r1
   1173e:	4604      	mov	r4, r0
   11740:	f7fc ff06 	bl	e550 <__malloc_lock>
   11744:	68ab      	ldr	r3, [r5, #8]
   11746:	685e      	ldr	r6, [r3, #4]
   11748:	f026 0603 	bic.w	r6, r6, #3
   1174c:	1bf1      	subs	r1, r6, r7
   1174e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   11752:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   11756:	f021 010f 	bic.w	r1, r1, #15
   1175a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   1175e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   11762:	db07      	blt.n	11774 <_malloc_trim_r+0x3c>
   11764:	4620      	mov	r0, r4
   11766:	2100      	movs	r1, #0
   11768:	f7fd f910 	bl	e98c <_sbrk_r>
   1176c:	68ab      	ldr	r3, [r5, #8]
   1176e:	4433      	add	r3, r6
   11770:	4298      	cmp	r0, r3
   11772:	d004      	beq.n	1177e <_malloc_trim_r+0x46>
   11774:	4620      	mov	r0, r4
   11776:	f7fc feed 	bl	e554 <__malloc_unlock>
   1177a:	2000      	movs	r0, #0
   1177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1177e:	4620      	mov	r0, r4
   11780:	4279      	negs	r1, r7
   11782:	f7fd f903 	bl	e98c <_sbrk_r>
   11786:	3001      	adds	r0, #1
   11788:	d00d      	beq.n	117a6 <_malloc_trim_r+0x6e>
   1178a:	4b10      	ldr	r3, [pc, #64]	; (117cc <_malloc_trim_r+0x94>)
   1178c:	68aa      	ldr	r2, [r5, #8]
   1178e:	6819      	ldr	r1, [r3, #0]
   11790:	1bf6      	subs	r6, r6, r7
   11792:	f046 0601 	orr.w	r6, r6, #1
   11796:	4620      	mov	r0, r4
   11798:	1bc9      	subs	r1, r1, r7
   1179a:	6056      	str	r6, [r2, #4]
   1179c:	6019      	str	r1, [r3, #0]
   1179e:	f7fc fed9 	bl	e554 <__malloc_unlock>
   117a2:	2001      	movs	r0, #1
   117a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117a6:	4620      	mov	r0, r4
   117a8:	2100      	movs	r1, #0
   117aa:	f7fd f8ef 	bl	e98c <_sbrk_r>
   117ae:	68ab      	ldr	r3, [r5, #8]
   117b0:	1ac2      	subs	r2, r0, r3
   117b2:	2a0f      	cmp	r2, #15
   117b4:	ddde      	ble.n	11774 <_malloc_trim_r+0x3c>
   117b6:	4d06      	ldr	r5, [pc, #24]	; (117d0 <_malloc_trim_r+0x98>)
   117b8:	4904      	ldr	r1, [pc, #16]	; (117cc <_malloc_trim_r+0x94>)
   117ba:	682d      	ldr	r5, [r5, #0]
   117bc:	f042 0201 	orr.w	r2, r2, #1
   117c0:	1b40      	subs	r0, r0, r5
   117c2:	605a      	str	r2, [r3, #4]
   117c4:	6008      	str	r0, [r1, #0]
   117c6:	e7d5      	b.n	11774 <_malloc_trim_r+0x3c>
   117c8:	1fff88f4 	.word	0x1fff88f4
   117cc:	1fff9c58 	.word	0x1fff9c58
   117d0:	1fff8d00 	.word	0x1fff8d00

000117d4 <_free_r>:
   117d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117d8:	460d      	mov	r5, r1
   117da:	4606      	mov	r6, r0
   117dc:	2900      	cmp	r1, #0
   117de:	d055      	beq.n	1188c <_free_r+0xb8>
   117e0:	f7fc feb6 	bl	e550 <__malloc_lock>
   117e4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   117e8:	f8df c174 	ldr.w	ip, [pc, #372]	; 11960 <_free_r+0x18c>
   117ec:	f021 0301 	bic.w	r3, r1, #1
   117f0:	f1a5 0408 	sub.w	r4, r5, #8
   117f4:	18e2      	adds	r2, r4, r3
   117f6:	f8dc 0008 	ldr.w	r0, [ip, #8]
   117fa:	6857      	ldr	r7, [r2, #4]
   117fc:	4290      	cmp	r0, r2
   117fe:	f027 0703 	bic.w	r7, r7, #3
   11802:	d069      	beq.n	118d8 <_free_r+0x104>
   11804:	f011 0101 	ands.w	r1, r1, #1
   11808:	6057      	str	r7, [r2, #4]
   1180a:	d032      	beq.n	11872 <_free_r+0x9e>
   1180c:	2100      	movs	r1, #0
   1180e:	19d0      	adds	r0, r2, r7
   11810:	6840      	ldr	r0, [r0, #4]
   11812:	07c0      	lsls	r0, r0, #31
   11814:	d406      	bmi.n	11824 <_free_r+0x50>
   11816:	443b      	add	r3, r7
   11818:	6890      	ldr	r0, [r2, #8]
   1181a:	2900      	cmp	r1, #0
   1181c:	d04e      	beq.n	118bc <_free_r+0xe8>
   1181e:	68d2      	ldr	r2, [r2, #12]
   11820:	60c2      	str	r2, [r0, #12]
   11822:	6090      	str	r0, [r2, #8]
   11824:	f043 0201 	orr.w	r2, r3, #1
   11828:	6062      	str	r2, [r4, #4]
   1182a:	50e3      	str	r3, [r4, r3]
   1182c:	b9e1      	cbnz	r1, 11868 <_free_r+0x94>
   1182e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11832:	d32d      	bcc.n	11890 <_free_r+0xbc>
   11834:	0a5a      	lsrs	r2, r3, #9
   11836:	2a04      	cmp	r2, #4
   11838:	d86a      	bhi.n	11910 <_free_r+0x13c>
   1183a:	0998      	lsrs	r0, r3, #6
   1183c:	3038      	adds	r0, #56	; 0x38
   1183e:	0041      	lsls	r1, r0, #1
   11840:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   11844:	4946      	ldr	r1, [pc, #280]	; (11960 <_free_r+0x18c>)
   11846:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1184a:	4562      	cmp	r2, ip
   1184c:	d066      	beq.n	1191c <_free_r+0x148>
   1184e:	6851      	ldr	r1, [r2, #4]
   11850:	f021 0103 	bic.w	r1, r1, #3
   11854:	428b      	cmp	r3, r1
   11856:	d202      	bcs.n	1185e <_free_r+0x8a>
   11858:	6892      	ldr	r2, [r2, #8]
   1185a:	4594      	cmp	ip, r2
   1185c:	d1f7      	bne.n	1184e <_free_r+0x7a>
   1185e:	68d3      	ldr	r3, [r2, #12]
   11860:	60e3      	str	r3, [r4, #12]
   11862:	60a2      	str	r2, [r4, #8]
   11864:	609c      	str	r4, [r3, #8]
   11866:	60d4      	str	r4, [r2, #12]
   11868:	4630      	mov	r0, r6
   1186a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1186e:	f7fc be71 	b.w	e554 <__malloc_unlock>
   11872:	f855 5c08 	ldr.w	r5, [r5, #-8]
   11876:	1b64      	subs	r4, r4, r5
   11878:	f10c 0808 	add.w	r8, ip, #8
   1187c:	68a0      	ldr	r0, [r4, #8]
   1187e:	4540      	cmp	r0, r8
   11880:	442b      	add	r3, r5
   11882:	d043      	beq.n	1190c <_free_r+0x138>
   11884:	68e5      	ldr	r5, [r4, #12]
   11886:	60c5      	str	r5, [r0, #12]
   11888:	60a8      	str	r0, [r5, #8]
   1188a:	e7c0      	b.n	1180e <_free_r+0x3a>
   1188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11890:	08db      	lsrs	r3, r3, #3
   11892:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   11896:	2501      	movs	r5, #1
   11898:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1189c:	6891      	ldr	r1, [r2, #8]
   1189e:	60a1      	str	r1, [r4, #8]
   118a0:	109b      	asrs	r3, r3, #2
   118a2:	fa05 f303 	lsl.w	r3, r5, r3
   118a6:	4318      	orrs	r0, r3
   118a8:	60e2      	str	r2, [r4, #12]
   118aa:	f8cc 0004 	str.w	r0, [ip, #4]
   118ae:	6094      	str	r4, [r2, #8]
   118b0:	4630      	mov	r0, r6
   118b2:	60cc      	str	r4, [r1, #12]
   118b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   118b8:	f7fc be4c 	b.w	e554 <__malloc_unlock>
   118bc:	4d29      	ldr	r5, [pc, #164]	; (11964 <_free_r+0x190>)
   118be:	42a8      	cmp	r0, r5
   118c0:	d1ad      	bne.n	1181e <_free_r+0x4a>
   118c2:	f043 0201 	orr.w	r2, r3, #1
   118c6:	f8cc 4014 	str.w	r4, [ip, #20]
   118ca:	f8cc 4010 	str.w	r4, [ip, #16]
   118ce:	60e0      	str	r0, [r4, #12]
   118d0:	60a0      	str	r0, [r4, #8]
   118d2:	6062      	str	r2, [r4, #4]
   118d4:	50e3      	str	r3, [r4, r3]
   118d6:	e7c7      	b.n	11868 <_free_r+0x94>
   118d8:	441f      	add	r7, r3
   118da:	07cb      	lsls	r3, r1, #31
   118dc:	d407      	bmi.n	118ee <_free_r+0x11a>
   118de:	f855 3c08 	ldr.w	r3, [r5, #-8]
   118e2:	1ae4      	subs	r4, r4, r3
   118e4:	441f      	add	r7, r3
   118e6:	68a2      	ldr	r2, [r4, #8]
   118e8:	68e3      	ldr	r3, [r4, #12]
   118ea:	60d3      	str	r3, [r2, #12]
   118ec:	609a      	str	r2, [r3, #8]
   118ee:	4b1e      	ldr	r3, [pc, #120]	; (11968 <_free_r+0x194>)
   118f0:	681b      	ldr	r3, [r3, #0]
   118f2:	f047 0201 	orr.w	r2, r7, #1
   118f6:	429f      	cmp	r7, r3
   118f8:	6062      	str	r2, [r4, #4]
   118fa:	f8cc 4008 	str.w	r4, [ip, #8]
   118fe:	d3b3      	bcc.n	11868 <_free_r+0x94>
   11900:	4b1a      	ldr	r3, [pc, #104]	; (1196c <_free_r+0x198>)
   11902:	4630      	mov	r0, r6
   11904:	6819      	ldr	r1, [r3, #0]
   11906:	f7ff ff17 	bl	11738 <_malloc_trim_r>
   1190a:	e7ad      	b.n	11868 <_free_r+0x94>
   1190c:	2101      	movs	r1, #1
   1190e:	e77e      	b.n	1180e <_free_r+0x3a>
   11910:	2a14      	cmp	r2, #20
   11912:	d80c      	bhi.n	1192e <_free_r+0x15a>
   11914:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   11918:	0041      	lsls	r1, r0, #1
   1191a:	e791      	b.n	11840 <_free_r+0x6c>
   1191c:	684b      	ldr	r3, [r1, #4]
   1191e:	1080      	asrs	r0, r0, #2
   11920:	2501      	movs	r5, #1
   11922:	fa05 f000 	lsl.w	r0, r5, r0
   11926:	4303      	orrs	r3, r0
   11928:	604b      	str	r3, [r1, #4]
   1192a:	4613      	mov	r3, r2
   1192c:	e798      	b.n	11860 <_free_r+0x8c>
   1192e:	2a54      	cmp	r2, #84	; 0x54
   11930:	d803      	bhi.n	1193a <_free_r+0x166>
   11932:	0b18      	lsrs	r0, r3, #12
   11934:	306e      	adds	r0, #110	; 0x6e
   11936:	0041      	lsls	r1, r0, #1
   11938:	e782      	b.n	11840 <_free_r+0x6c>
   1193a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1193e:	d803      	bhi.n	11948 <_free_r+0x174>
   11940:	0bd8      	lsrs	r0, r3, #15
   11942:	3077      	adds	r0, #119	; 0x77
   11944:	0041      	lsls	r1, r0, #1
   11946:	e77b      	b.n	11840 <_free_r+0x6c>
   11948:	f240 5154 	movw	r1, #1364	; 0x554
   1194c:	428a      	cmp	r2, r1
   1194e:	d803      	bhi.n	11958 <_free_r+0x184>
   11950:	0c98      	lsrs	r0, r3, #18
   11952:	307c      	adds	r0, #124	; 0x7c
   11954:	0041      	lsls	r1, r0, #1
   11956:	e773      	b.n	11840 <_free_r+0x6c>
   11958:	21fc      	movs	r1, #252	; 0xfc
   1195a:	207e      	movs	r0, #126	; 0x7e
   1195c:	e770      	b.n	11840 <_free_r+0x6c>
   1195e:	bf00      	nop
   11960:	1fff88f4 	.word	0x1fff88f4
   11964:	1fff88fc 	.word	0x1fff88fc
   11968:	1fff8cfc 	.word	0x1fff8cfc
   1196c:	1fff9c54 	.word	0x1fff9c54

00011970 <_fwalk>:
   11970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11974:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   11978:	4688      	mov	r8, r1
   1197a:	d01a      	beq.n	119b2 <_fwalk+0x42>
   1197c:	2600      	movs	r6, #0
   1197e:	687d      	ldr	r5, [r7, #4]
   11980:	68bc      	ldr	r4, [r7, #8]
   11982:	3d01      	subs	r5, #1
   11984:	d40f      	bmi.n	119a6 <_fwalk+0x36>
   11986:	89a3      	ldrh	r3, [r4, #12]
   11988:	2b01      	cmp	r3, #1
   1198a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1198e:	d906      	bls.n	1199e <_fwalk+0x2e>
   11990:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   11994:	3301      	adds	r3, #1
   11996:	4620      	mov	r0, r4
   11998:	d001      	beq.n	1199e <_fwalk+0x2e>
   1199a:	47c0      	blx	r8
   1199c:	4306      	orrs	r6, r0
   1199e:	1c6b      	adds	r3, r5, #1
   119a0:	f104 0468 	add.w	r4, r4, #104	; 0x68
   119a4:	d1ef      	bne.n	11986 <_fwalk+0x16>
   119a6:	683f      	ldr	r7, [r7, #0]
   119a8:	2f00      	cmp	r7, #0
   119aa:	d1e8      	bne.n	1197e <_fwalk+0xe>
   119ac:	4630      	mov	r0, r6
   119ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   119b2:	463e      	mov	r6, r7
   119b4:	4630      	mov	r0, r6
   119b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   119ba:	bf00      	nop

000119bc <_localeconv_r>:
   119bc:	4800      	ldr	r0, [pc, #0]	; (119c0 <_localeconv_r+0x4>)
   119be:	4770      	bx	lr
   119c0:	1fff8d04 	.word	0x1fff8d04

000119c4 <__smakebuf_r>:
   119c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   119c6:	898b      	ldrh	r3, [r1, #12]
   119c8:	b29a      	uxth	r2, r3
   119ca:	0796      	lsls	r6, r2, #30
   119cc:	b091      	sub	sp, #68	; 0x44
   119ce:	460c      	mov	r4, r1
   119d0:	4605      	mov	r5, r0
   119d2:	d437      	bmi.n	11a44 <__smakebuf_r+0x80>
   119d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   119d8:	2900      	cmp	r1, #0
   119da:	db17      	blt.n	11a0c <__smakebuf_r+0x48>
   119dc:	aa01      	add	r2, sp, #4
   119de:	f000 fce7 	bl	123b0 <_fstat_r>
   119e2:	2800      	cmp	r0, #0
   119e4:	db10      	blt.n	11a08 <__smakebuf_r+0x44>
   119e6:	9b02      	ldr	r3, [sp, #8]
   119e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   119ec:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   119f0:	424f      	negs	r7, r1
   119f2:	414f      	adcs	r7, r1
   119f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   119f8:	d02c      	beq.n	11a54 <__smakebuf_r+0x90>
   119fa:	89a3      	ldrh	r3, [r4, #12]
   119fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   11a00:	81a3      	strh	r3, [r4, #12]
   11a02:	f44f 6680 	mov.w	r6, #1024	; 0x400
   11a06:	e00b      	b.n	11a20 <__smakebuf_r+0x5c>
   11a08:	89a3      	ldrh	r3, [r4, #12]
   11a0a:	b29a      	uxth	r2, r3
   11a0c:	f012 0f80 	tst.w	r2, #128	; 0x80
   11a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   11a14:	81a3      	strh	r3, [r4, #12]
   11a16:	bf14      	ite	ne
   11a18:	2640      	movne	r6, #64	; 0x40
   11a1a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   11a1e:	2700      	movs	r7, #0
   11a20:	4628      	mov	r0, r5
   11a22:	4631      	mov	r1, r6
   11a24:	f7fc f938 	bl	dc98 <_malloc_r>
   11a28:	89a3      	ldrh	r3, [r4, #12]
   11a2a:	2800      	cmp	r0, #0
   11a2c:	d029      	beq.n	11a82 <__smakebuf_r+0xbe>
   11a2e:	4a1b      	ldr	r2, [pc, #108]	; (11a9c <__smakebuf_r+0xd8>)
   11a30:	63ea      	str	r2, [r5, #60]	; 0x3c
   11a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11a36:	81a3      	strh	r3, [r4, #12]
   11a38:	6020      	str	r0, [r4, #0]
   11a3a:	6120      	str	r0, [r4, #16]
   11a3c:	6166      	str	r6, [r4, #20]
   11a3e:	b9a7      	cbnz	r7, 11a6a <__smakebuf_r+0xa6>
   11a40:	b011      	add	sp, #68	; 0x44
   11a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a44:	f101 0343 	add.w	r3, r1, #67	; 0x43
   11a48:	2201      	movs	r2, #1
   11a4a:	600b      	str	r3, [r1, #0]
   11a4c:	610b      	str	r3, [r1, #16]
   11a4e:	614a      	str	r2, [r1, #20]
   11a50:	b011      	add	sp, #68	; 0x44
   11a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a54:	4a12      	ldr	r2, [pc, #72]	; (11aa0 <__smakebuf_r+0xdc>)
   11a56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11a58:	4293      	cmp	r3, r2
   11a5a:	d1ce      	bne.n	119fa <__smakebuf_r+0x36>
   11a5c:	89a3      	ldrh	r3, [r4, #12]
   11a5e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   11a62:	4333      	orrs	r3, r6
   11a64:	81a3      	strh	r3, [r4, #12]
   11a66:	64e6      	str	r6, [r4, #76]	; 0x4c
   11a68:	e7da      	b.n	11a20 <__smakebuf_r+0x5c>
   11a6a:	4628      	mov	r0, r5
   11a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11a70:	f000 fcb2 	bl	123d8 <_isatty_r>
   11a74:	2800      	cmp	r0, #0
   11a76:	d0e3      	beq.n	11a40 <__smakebuf_r+0x7c>
   11a78:	89a3      	ldrh	r3, [r4, #12]
   11a7a:	f043 0301 	orr.w	r3, r3, #1
   11a7e:	81a3      	strh	r3, [r4, #12]
   11a80:	e7de      	b.n	11a40 <__smakebuf_r+0x7c>
   11a82:	059a      	lsls	r2, r3, #22
   11a84:	d4dc      	bmi.n	11a40 <__smakebuf_r+0x7c>
   11a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
   11a8a:	f043 0302 	orr.w	r3, r3, #2
   11a8e:	2101      	movs	r1, #1
   11a90:	81a3      	strh	r3, [r4, #12]
   11a92:	6022      	str	r2, [r4, #0]
   11a94:	6122      	str	r2, [r4, #16]
   11a96:	6161      	str	r1, [r4, #20]
   11a98:	e7d2      	b.n	11a40 <__smakebuf_r+0x7c>
   11a9a:	bf00      	nop
   11a9c:	00011601 	.word	0x00011601
   11aa0:	00012115 	.word	0x00012115

00011aa4 <_Balloc>:
   11aa4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   11aa6:	b570      	push	{r4, r5, r6, lr}
   11aa8:	4605      	mov	r5, r0
   11aaa:	460c      	mov	r4, r1
   11aac:	b14a      	cbz	r2, 11ac2 <_Balloc+0x1e>
   11aae:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   11ab2:	b180      	cbz	r0, 11ad6 <_Balloc+0x32>
   11ab4:	6801      	ldr	r1, [r0, #0]
   11ab6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   11aba:	2200      	movs	r2, #0
   11abc:	6102      	str	r2, [r0, #16]
   11abe:	60c2      	str	r2, [r0, #12]
   11ac0:	bd70      	pop	{r4, r5, r6, pc}
   11ac2:	2221      	movs	r2, #33	; 0x21
   11ac4:	2104      	movs	r1, #4
   11ac6:	f000 fbe9 	bl	1229c <_calloc_r>
   11aca:	64e8      	str	r0, [r5, #76]	; 0x4c
   11acc:	4602      	mov	r2, r0
   11ace:	2800      	cmp	r0, #0
   11ad0:	d1ed      	bne.n	11aae <_Balloc+0xa>
   11ad2:	2000      	movs	r0, #0
   11ad4:	bd70      	pop	{r4, r5, r6, pc}
   11ad6:	2101      	movs	r1, #1
   11ad8:	fa01 f604 	lsl.w	r6, r1, r4
   11adc:	1d72      	adds	r2, r6, #5
   11ade:	4628      	mov	r0, r5
   11ae0:	0092      	lsls	r2, r2, #2
   11ae2:	f000 fbdb 	bl	1229c <_calloc_r>
   11ae6:	2800      	cmp	r0, #0
   11ae8:	d0f3      	beq.n	11ad2 <_Balloc+0x2e>
   11aea:	6044      	str	r4, [r0, #4]
   11aec:	6086      	str	r6, [r0, #8]
   11aee:	e7e4      	b.n	11aba <_Balloc+0x16>

00011af0 <_Bfree>:
   11af0:	b131      	cbz	r1, 11b00 <_Bfree+0x10>
   11af2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   11af4:	684a      	ldr	r2, [r1, #4]
   11af6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   11afa:	6008      	str	r0, [r1, #0]
   11afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   11b00:	4770      	bx	lr
   11b02:	bf00      	nop

00011b04 <__multadd>:
   11b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11b08:	f8d1 8010 	ldr.w	r8, [r1, #16]
   11b0c:	b082      	sub	sp, #8
   11b0e:	4689      	mov	r9, r1
   11b10:	4682      	mov	sl, r0
   11b12:	f101 0514 	add.w	r5, r1, #20
   11b16:	2400      	movs	r4, #0
   11b18:	682f      	ldr	r7, [r5, #0]
   11b1a:	b2be      	uxth	r6, r7
   11b1c:	0c3f      	lsrs	r7, r7, #16
   11b1e:	fb02 3606 	mla	r6, r2, r6, r3
   11b22:	fb02 f307 	mul.w	r3, r2, r7
   11b26:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   11b2a:	3401      	adds	r4, #1
   11b2c:	b2b6      	uxth	r6, r6
   11b2e:	eb06 4603 	add.w	r6, r6, r3, lsl #16
   11b32:	45a0      	cmp	r8, r4
   11b34:	f845 6b04 	str.w	r6, [r5], #4
   11b38:	ea4f 4313 	mov.w	r3, r3, lsr #16
   11b3c:	dcec      	bgt.n	11b18 <__multadd+0x14>
   11b3e:	b153      	cbz	r3, 11b56 <__multadd+0x52>
   11b40:	f8d9 2008 	ldr.w	r2, [r9, #8]
   11b44:	4590      	cmp	r8, r2
   11b46:	da0a      	bge.n	11b5e <__multadd+0x5a>
   11b48:	eb09 0188 	add.w	r1, r9, r8, lsl #2
   11b4c:	f108 0201 	add.w	r2, r8, #1
   11b50:	614b      	str	r3, [r1, #20]
   11b52:	f8c9 2010 	str.w	r2, [r9, #16]
   11b56:	4648      	mov	r0, r9
   11b58:	b002      	add	sp, #8
   11b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11b5e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   11b62:	9301      	str	r3, [sp, #4]
   11b64:	3101      	adds	r1, #1
   11b66:	4650      	mov	r0, sl
   11b68:	f7ff ff9c 	bl	11aa4 <_Balloc>
   11b6c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   11b70:	3202      	adds	r2, #2
   11b72:	f109 010c 	add.w	r1, r9, #12
   11b76:	4604      	mov	r4, r0
   11b78:	0092      	lsls	r2, r2, #2
   11b7a:	300c      	adds	r0, #12
   11b7c:	f7fc fba4 	bl	e2c8 <memcpy>
   11b80:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
   11b84:	f8d9 1004 	ldr.w	r1, [r9, #4]
   11b88:	9b01      	ldr	r3, [sp, #4]
   11b8a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   11b8e:	f8c9 0000 	str.w	r0, [r9]
   11b92:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
   11b96:	46a1      	mov	r9, r4
   11b98:	e7d6      	b.n	11b48 <__multadd+0x44>
   11b9a:	bf00      	nop

00011b9c <__hi0bits>:
   11b9c:	0c03      	lsrs	r3, r0, #16
   11b9e:	041b      	lsls	r3, r3, #16
   11ba0:	b9b3      	cbnz	r3, 11bd0 <__hi0bits+0x34>
   11ba2:	0400      	lsls	r0, r0, #16
   11ba4:	2310      	movs	r3, #16
   11ba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   11baa:	bf04      	itt	eq
   11bac:	0200      	lsleq	r0, r0, #8
   11bae:	3308      	addeq	r3, #8
   11bb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   11bb4:	bf04      	itt	eq
   11bb6:	0100      	lsleq	r0, r0, #4
   11bb8:	3304      	addeq	r3, #4
   11bba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   11bbe:	bf04      	itt	eq
   11bc0:	0080      	lsleq	r0, r0, #2
   11bc2:	3302      	addeq	r3, #2
   11bc4:	2800      	cmp	r0, #0
   11bc6:	db07      	blt.n	11bd8 <__hi0bits+0x3c>
   11bc8:	0042      	lsls	r2, r0, #1
   11bca:	d403      	bmi.n	11bd4 <__hi0bits+0x38>
   11bcc:	2020      	movs	r0, #32
   11bce:	4770      	bx	lr
   11bd0:	2300      	movs	r3, #0
   11bd2:	e7e8      	b.n	11ba6 <__hi0bits+0xa>
   11bd4:	1c58      	adds	r0, r3, #1
   11bd6:	4770      	bx	lr
   11bd8:	4618      	mov	r0, r3
   11bda:	4770      	bx	lr

00011bdc <__lo0bits>:
   11bdc:	6803      	ldr	r3, [r0, #0]
   11bde:	f013 0207 	ands.w	r2, r3, #7
   11be2:	d007      	beq.n	11bf4 <__lo0bits+0x18>
   11be4:	07d9      	lsls	r1, r3, #31
   11be6:	d420      	bmi.n	11c2a <__lo0bits+0x4e>
   11be8:	079a      	lsls	r2, r3, #30
   11bea:	d420      	bmi.n	11c2e <__lo0bits+0x52>
   11bec:	089b      	lsrs	r3, r3, #2
   11bee:	6003      	str	r3, [r0, #0]
   11bf0:	2002      	movs	r0, #2
   11bf2:	4770      	bx	lr
   11bf4:	b299      	uxth	r1, r3
   11bf6:	b909      	cbnz	r1, 11bfc <__lo0bits+0x20>
   11bf8:	0c1b      	lsrs	r3, r3, #16
   11bfa:	2210      	movs	r2, #16
   11bfc:	f013 0fff 	tst.w	r3, #255	; 0xff
   11c00:	bf04      	itt	eq
   11c02:	0a1b      	lsreq	r3, r3, #8
   11c04:	3208      	addeq	r2, #8
   11c06:	0719      	lsls	r1, r3, #28
   11c08:	bf04      	itt	eq
   11c0a:	091b      	lsreq	r3, r3, #4
   11c0c:	3204      	addeq	r2, #4
   11c0e:	0799      	lsls	r1, r3, #30
   11c10:	bf04      	itt	eq
   11c12:	089b      	lsreq	r3, r3, #2
   11c14:	3202      	addeq	r2, #2
   11c16:	07d9      	lsls	r1, r3, #31
   11c18:	d404      	bmi.n	11c24 <__lo0bits+0x48>
   11c1a:	085b      	lsrs	r3, r3, #1
   11c1c:	d101      	bne.n	11c22 <__lo0bits+0x46>
   11c1e:	2020      	movs	r0, #32
   11c20:	4770      	bx	lr
   11c22:	3201      	adds	r2, #1
   11c24:	6003      	str	r3, [r0, #0]
   11c26:	4610      	mov	r0, r2
   11c28:	4770      	bx	lr
   11c2a:	2000      	movs	r0, #0
   11c2c:	4770      	bx	lr
   11c2e:	085b      	lsrs	r3, r3, #1
   11c30:	6003      	str	r3, [r0, #0]
   11c32:	2001      	movs	r0, #1
   11c34:	4770      	bx	lr
   11c36:	bf00      	nop

00011c38 <__i2b>:
   11c38:	b510      	push	{r4, lr}
   11c3a:	460c      	mov	r4, r1
   11c3c:	2101      	movs	r1, #1
   11c3e:	f7ff ff31 	bl	11aa4 <_Balloc>
   11c42:	2201      	movs	r2, #1
   11c44:	6144      	str	r4, [r0, #20]
   11c46:	6102      	str	r2, [r0, #16]
   11c48:	bd10      	pop	{r4, pc}
   11c4a:	bf00      	nop

00011c4c <__multiply>:
   11c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c50:	690d      	ldr	r5, [r1, #16]
   11c52:	f8d2 9010 	ldr.w	r9, [r2, #16]
   11c56:	454d      	cmp	r5, r9
   11c58:	b085      	sub	sp, #20
   11c5a:	460c      	mov	r4, r1
   11c5c:	4692      	mov	sl, r2
   11c5e:	da04      	bge.n	11c6a <__multiply+0x1e>
   11c60:	462a      	mov	r2, r5
   11c62:	4654      	mov	r4, sl
   11c64:	464d      	mov	r5, r9
   11c66:	468a      	mov	sl, r1
   11c68:	4691      	mov	r9, r2
   11c6a:	68a3      	ldr	r3, [r4, #8]
   11c6c:	6861      	ldr	r1, [r4, #4]
   11c6e:	eb05 0709 	add.w	r7, r5, r9
   11c72:	429f      	cmp	r7, r3
   11c74:	bfc8      	it	gt
   11c76:	3101      	addgt	r1, #1
   11c78:	f7ff ff14 	bl	11aa4 <_Balloc>
   11c7c:	f100 0614 	add.w	r6, r0, #20
   11c80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
   11c84:	4546      	cmp	r6, r8
   11c86:	9001      	str	r0, [sp, #4]
   11c88:	d205      	bcs.n	11c96 <__multiply+0x4a>
   11c8a:	4633      	mov	r3, r6
   11c8c:	2000      	movs	r0, #0
   11c8e:	f843 0b04 	str.w	r0, [r3], #4
   11c92:	4598      	cmp	r8, r3
   11c94:	d8fb      	bhi.n	11c8e <__multiply+0x42>
   11c96:	f10a 0c14 	add.w	ip, sl, #20
   11c9a:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
   11c9e:	3414      	adds	r4, #20
   11ca0:	45cc      	cmp	ip, r9
   11ca2:	9400      	str	r4, [sp, #0]
   11ca4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   11ca8:	d25b      	bcs.n	11d62 <__multiply+0x116>
   11caa:	f8cd 8008 	str.w	r8, [sp, #8]
   11cae:	9703      	str	r7, [sp, #12]
   11cb0:	46c8      	mov	r8, r9
   11cb2:	f85c 3b04 	ldr.w	r3, [ip], #4
   11cb6:	b29c      	uxth	r4, r3
   11cb8:	b324      	cbz	r4, 11d04 <__multiply+0xb8>
   11cba:	9a00      	ldr	r2, [sp, #0]
   11cbc:	4633      	mov	r3, r6
   11cbe:	f04f 0900 	mov.w	r9, #0
   11cc2:	e000      	b.n	11cc6 <__multiply+0x7a>
   11cc4:	460b      	mov	r3, r1
   11cc6:	f852 7b04 	ldr.w	r7, [r2], #4
   11cca:	6819      	ldr	r1, [r3, #0]
   11ccc:	fa1f fb87 	uxth.w	fp, r7
   11cd0:	fa1f fa81 	uxth.w	sl, r1
   11cd4:	0c38      	lsrs	r0, r7, #16
   11cd6:	0c09      	lsrs	r1, r1, #16
   11cd8:	fb04 a70b 	mla	r7, r4, fp, sl
   11cdc:	44b9      	add	r9, r7
   11cde:	fb04 1000 	mla	r0, r4, r0, r1
   11ce2:	eb00 4019 	add.w	r0, r0, r9, lsr #16
   11ce6:	4619      	mov	r1, r3
   11ce8:	fa1f f989 	uxth.w	r9, r9
   11cec:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
   11cf0:	4295      	cmp	r5, r2
   11cf2:	ea4f 4910 	mov.w	r9, r0, lsr #16
   11cf6:	f841 7b04 	str.w	r7, [r1], #4
   11cfa:	d8e3      	bhi.n	11cc4 <__multiply+0x78>
   11cfc:	f8c3 9004 	str.w	r9, [r3, #4]
   11d00:	f85c 3c04 	ldr.w	r3, [ip, #-4]
   11d04:	ea5f 4913 	movs.w	r9, r3, lsr #16
   11d08:	d024      	beq.n	11d54 <__multiply+0x108>
   11d0a:	f8d6 a000 	ldr.w	sl, [r6]
   11d0e:	9b00      	ldr	r3, [sp, #0]
   11d10:	4650      	mov	r0, sl
   11d12:	4631      	mov	r1, r6
   11d14:	f04f 0b00 	mov.w	fp, #0
   11d18:	e000      	b.n	11d1c <__multiply+0xd0>
   11d1a:	4611      	mov	r1, r2
   11d1c:	881a      	ldrh	r2, [r3, #0]
   11d1e:	0c00      	lsrs	r0, r0, #16
   11d20:	fb09 0002 	mla	r0, r9, r2, r0
   11d24:	4483      	add	fp, r0
   11d26:	fa1f fa8a 	uxth.w	sl, sl
   11d2a:	460a      	mov	r2, r1
   11d2c:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
   11d30:	f842 0b04 	str.w	r0, [r2], #4
   11d34:	f853 7b04 	ldr.w	r7, [r3], #4
   11d38:	6848      	ldr	r0, [r1, #4]
   11d3a:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   11d3e:	b284      	uxth	r4, r0
   11d40:	fb09 4a0a 	mla	sl, r9, sl, r4
   11d44:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
   11d48:	429d      	cmp	r5, r3
   11d4a:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
   11d4e:	d8e4      	bhi.n	11d1a <__multiply+0xce>
   11d50:	f8c1 a004 	str.w	sl, [r1, #4]
   11d54:	45e0      	cmp	r8, ip
   11d56:	f106 0604 	add.w	r6, r6, #4
   11d5a:	d8aa      	bhi.n	11cb2 <__multiply+0x66>
   11d5c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   11d60:	9f03      	ldr	r7, [sp, #12]
   11d62:	2f00      	cmp	r7, #0
   11d64:	dd0a      	ble.n	11d7c <__multiply+0x130>
   11d66:	f858 3c04 	ldr.w	r3, [r8, #-4]
   11d6a:	f1a8 0804 	sub.w	r8, r8, #4
   11d6e:	b11b      	cbz	r3, 11d78 <__multiply+0x12c>
   11d70:	e004      	b.n	11d7c <__multiply+0x130>
   11d72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   11d76:	b90b      	cbnz	r3, 11d7c <__multiply+0x130>
   11d78:	3f01      	subs	r7, #1
   11d7a:	d1fa      	bne.n	11d72 <__multiply+0x126>
   11d7c:	9b01      	ldr	r3, [sp, #4]
   11d7e:	4618      	mov	r0, r3
   11d80:	611f      	str	r7, [r3, #16]
   11d82:	b005      	add	sp, #20
   11d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011d88 <__pow5mult>:
   11d88:	f012 0303 	ands.w	r3, r2, #3
   11d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d90:	4614      	mov	r4, r2
   11d92:	4607      	mov	r7, r0
   11d94:	460e      	mov	r6, r1
   11d96:	d12c      	bne.n	11df2 <__pow5mult+0x6a>
   11d98:	10a4      	asrs	r4, r4, #2
   11d9a:	d01c      	beq.n	11dd6 <__pow5mult+0x4e>
   11d9c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   11d9e:	2d00      	cmp	r5, #0
   11da0:	d030      	beq.n	11e04 <__pow5mult+0x7c>
   11da2:	f04f 0800 	mov.w	r8, #0
   11da6:	e004      	b.n	11db2 <__pow5mult+0x2a>
   11da8:	1064      	asrs	r4, r4, #1
   11daa:	d014      	beq.n	11dd6 <__pow5mult+0x4e>
   11dac:	6828      	ldr	r0, [r5, #0]
   11dae:	b1a8      	cbz	r0, 11ddc <__pow5mult+0x54>
   11db0:	4605      	mov	r5, r0
   11db2:	07e3      	lsls	r3, r4, #31
   11db4:	d5f8      	bpl.n	11da8 <__pow5mult+0x20>
   11db6:	4638      	mov	r0, r7
   11db8:	4631      	mov	r1, r6
   11dba:	462a      	mov	r2, r5
   11dbc:	f7ff ff46 	bl	11c4c <__multiply>
   11dc0:	b1ae      	cbz	r6, 11dee <__pow5mult+0x66>
   11dc2:	6872      	ldr	r2, [r6, #4]
   11dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11dc6:	1064      	asrs	r4, r4, #1
   11dc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11dcc:	6031      	str	r1, [r6, #0]
   11dce:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   11dd2:	4606      	mov	r6, r0
   11dd4:	d1ea      	bne.n	11dac <__pow5mult+0x24>
   11dd6:	4630      	mov	r0, r6
   11dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ddc:	4638      	mov	r0, r7
   11dde:	4629      	mov	r1, r5
   11de0:	462a      	mov	r2, r5
   11de2:	f7ff ff33 	bl	11c4c <__multiply>
   11de6:	6028      	str	r0, [r5, #0]
   11de8:	f8c0 8000 	str.w	r8, [r0]
   11dec:	e7e0      	b.n	11db0 <__pow5mult+0x28>
   11dee:	4606      	mov	r6, r0
   11df0:	e7da      	b.n	11da8 <__pow5mult+0x20>
   11df2:	1e5d      	subs	r5, r3, #1
   11df4:	4a0a      	ldr	r2, [pc, #40]	; (11e20 <__pow5mult+0x98>)
   11df6:	2300      	movs	r3, #0
   11df8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   11dfc:	f7ff fe82 	bl	11b04 <__multadd>
   11e00:	4606      	mov	r6, r0
   11e02:	e7c9      	b.n	11d98 <__pow5mult+0x10>
   11e04:	2101      	movs	r1, #1
   11e06:	4638      	mov	r0, r7
   11e08:	f7ff fe4c 	bl	11aa4 <_Balloc>
   11e0c:	f240 2171 	movw	r1, #625	; 0x271
   11e10:	2201      	movs	r2, #1
   11e12:	2300      	movs	r3, #0
   11e14:	6141      	str	r1, [r0, #20]
   11e16:	6102      	str	r2, [r0, #16]
   11e18:	4605      	mov	r5, r0
   11e1a:	64b8      	str	r0, [r7, #72]	; 0x48
   11e1c:	6003      	str	r3, [r0, #0]
   11e1e:	e7c0      	b.n	11da2 <__pow5mult+0x1a>
   11e20:	00014408 	.word	0x00014408

00011e24 <__lshift>:
   11e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e28:	4693      	mov	fp, r2
   11e2a:	690a      	ldr	r2, [r1, #16]
   11e2c:	688b      	ldr	r3, [r1, #8]
   11e2e:	ea4f 1a6b 	mov.w	sl, fp, asr #5
   11e32:	eb0a 0902 	add.w	r9, sl, r2
   11e36:	f109 0601 	add.w	r6, r9, #1
   11e3a:	429e      	cmp	r6, r3
   11e3c:	460f      	mov	r7, r1
   11e3e:	4680      	mov	r8, r0
   11e40:	6849      	ldr	r1, [r1, #4]
   11e42:	dd04      	ble.n	11e4e <__lshift+0x2a>
   11e44:	005b      	lsls	r3, r3, #1
   11e46:	429e      	cmp	r6, r3
   11e48:	f101 0101 	add.w	r1, r1, #1
   11e4c:	dcfa      	bgt.n	11e44 <__lshift+0x20>
   11e4e:	4640      	mov	r0, r8
   11e50:	f7ff fe28 	bl	11aa4 <_Balloc>
   11e54:	f1ba 0f00 	cmp.w	sl, #0
   11e58:	f100 0414 	add.w	r4, r0, #20
   11e5c:	dd09      	ble.n	11e72 <__lshift+0x4e>
   11e5e:	2300      	movs	r3, #0
   11e60:	461a      	mov	r2, r3
   11e62:	4625      	mov	r5, r4
   11e64:	3301      	adds	r3, #1
   11e66:	4553      	cmp	r3, sl
   11e68:	f845 2b04 	str.w	r2, [r5], #4
   11e6c:	d1fa      	bne.n	11e64 <__lshift+0x40>
   11e6e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   11e72:	693a      	ldr	r2, [r7, #16]
   11e74:	f107 0314 	add.w	r3, r7, #20
   11e78:	f01b 0b1f 	ands.w	fp, fp, #31
   11e7c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   11e80:	d021      	beq.n	11ec6 <__lshift+0xa2>
   11e82:	f1cb 0a20 	rsb	sl, fp, #32
   11e86:	2200      	movs	r2, #0
   11e88:	e000      	b.n	11e8c <__lshift+0x68>
   11e8a:	462c      	mov	r4, r5
   11e8c:	6819      	ldr	r1, [r3, #0]
   11e8e:	4625      	mov	r5, r4
   11e90:	fa01 f10b 	lsl.w	r1, r1, fp
   11e94:	430a      	orrs	r2, r1
   11e96:	f845 2b04 	str.w	r2, [r5], #4
   11e9a:	f853 2b04 	ldr.w	r2, [r3], #4
   11e9e:	4563      	cmp	r3, ip
   11ea0:	fa22 f20a 	lsr.w	r2, r2, sl
   11ea4:	d3f1      	bcc.n	11e8a <__lshift+0x66>
   11ea6:	6062      	str	r2, [r4, #4]
   11ea8:	b10a      	cbz	r2, 11eae <__lshift+0x8a>
   11eaa:	f109 0602 	add.w	r6, r9, #2
   11eae:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   11eb2:	687a      	ldr	r2, [r7, #4]
   11eb4:	3e01      	subs	r6, #1
   11eb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11eba:	6106      	str	r6, [r0, #16]
   11ebc:	6039      	str	r1, [r7, #0]
   11ebe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ec6:	f853 2b04 	ldr.w	r2, [r3], #4
   11eca:	f844 2b04 	str.w	r2, [r4], #4
   11ece:	459c      	cmp	ip, r3
   11ed0:	d9ed      	bls.n	11eae <__lshift+0x8a>
   11ed2:	f853 2b04 	ldr.w	r2, [r3], #4
   11ed6:	f844 2b04 	str.w	r2, [r4], #4
   11eda:	459c      	cmp	ip, r3
   11edc:	d8f3      	bhi.n	11ec6 <__lshift+0xa2>
   11ede:	e7e6      	b.n	11eae <__lshift+0x8a>

00011ee0 <__mcmp>:
   11ee0:	6902      	ldr	r2, [r0, #16]
   11ee2:	690b      	ldr	r3, [r1, #16]
   11ee4:	1ad2      	subs	r2, r2, r3
   11ee6:	b410      	push	{r4}
   11ee8:	d115      	bne.n	11f16 <__mcmp+0x36>
   11eea:	009b      	lsls	r3, r3, #2
   11eec:	3014      	adds	r0, #20
   11eee:	3114      	adds	r1, #20
   11ef0:	4419      	add	r1, r3
   11ef2:	4403      	add	r3, r0
   11ef4:	e001      	b.n	11efa <__mcmp+0x1a>
   11ef6:	4298      	cmp	r0, r3
   11ef8:	d211      	bcs.n	11f1e <__mcmp+0x3e>
   11efa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   11efe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   11f02:	42a2      	cmp	r2, r4
   11f04:	d0f7      	beq.n	11ef6 <__mcmp+0x16>
   11f06:	4294      	cmp	r4, r2
   11f08:	bf94      	ite	ls
   11f0a:	2001      	movls	r0, #1
   11f0c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   11f10:	f85d 4b04 	ldr.w	r4, [sp], #4
   11f14:	4770      	bx	lr
   11f16:	4610      	mov	r0, r2
   11f18:	f85d 4b04 	ldr.w	r4, [sp], #4
   11f1c:	4770      	bx	lr
   11f1e:	2000      	movs	r0, #0
   11f20:	f85d 4b04 	ldr.w	r4, [sp], #4
   11f24:	4770      	bx	lr
   11f26:	bf00      	nop

00011f28 <__mdiff>:
   11f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11f2c:	460d      	mov	r5, r1
   11f2e:	4604      	mov	r4, r0
   11f30:	4611      	mov	r1, r2
   11f32:	4628      	mov	r0, r5
   11f34:	4616      	mov	r6, r2
   11f36:	f7ff ffd3 	bl	11ee0 <__mcmp>
   11f3a:	1e07      	subs	r7, r0, #0
   11f3c:	d055      	beq.n	11fea <__mdiff+0xc2>
   11f3e:	db4e      	blt.n	11fde <__mdiff+0xb6>
   11f40:	f04f 0800 	mov.w	r8, #0
   11f44:	6869      	ldr	r1, [r5, #4]
   11f46:	4620      	mov	r0, r4
   11f48:	f7ff fdac 	bl	11aa4 <_Balloc>
   11f4c:	692f      	ldr	r7, [r5, #16]
   11f4e:	6932      	ldr	r2, [r6, #16]
   11f50:	f8c0 800c 	str.w	r8, [r0, #12]
   11f54:	3514      	adds	r5, #20
   11f56:	3614      	adds	r6, #20
   11f58:	f100 0314 	add.w	r3, r0, #20
   11f5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   11f60:	eb06 0882 	add.w	r8, r6, r2, lsl #2
   11f64:	2100      	movs	r1, #0
   11f66:	f856 2b04 	ldr.w	r2, [r6], #4
   11f6a:	f855 4b04 	ldr.w	r4, [r5], #4
   11f6e:	fa1f f982 	uxth.w	r9, r2
   11f72:	fa11 fa84 	uxtah	sl, r1, r4
   11f76:	0c11      	lsrs	r1, r2, #16
   11f78:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
   11f7c:	ebc9 020a 	rsb	r2, r9, sl
   11f80:	eb01 4122 	add.w	r1, r1, r2, asr #16
   11f84:	b292      	uxth	r2, r2
   11f86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   11f8a:	45b0      	cmp	r8, r6
   11f8c:	f843 2b04 	str.w	r2, [r3], #4
   11f90:	ea4f 4121 	mov.w	r1, r1, asr #16
   11f94:	462c      	mov	r4, r5
   11f96:	d8e6      	bhi.n	11f66 <__mdiff+0x3e>
   11f98:	45ac      	cmp	ip, r5
   11f9a:	4698      	mov	r8, r3
   11f9c:	d915      	bls.n	11fca <__mdiff+0xa2>
   11f9e:	f854 6b04 	ldr.w	r6, [r4], #4
   11fa2:	fa11 f186 	uxtah	r1, r1, r6
   11fa6:	0c36      	lsrs	r6, r6, #16
   11fa8:	eb06 4621 	add.w	r6, r6, r1, asr #16
   11fac:	b289      	uxth	r1, r1
   11fae:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   11fb2:	45a4      	cmp	ip, r4
   11fb4:	f843 2b04 	str.w	r2, [r3], #4
   11fb8:	ea4f 4126 	mov.w	r1, r6, asr #16
   11fbc:	d8ef      	bhi.n	11f9e <__mdiff+0x76>
   11fbe:	43eb      	mvns	r3, r5
   11fc0:	4463      	add	r3, ip
   11fc2:	f023 0303 	bic.w	r3, r3, #3
   11fc6:	3304      	adds	r3, #4
   11fc8:	4443      	add	r3, r8
   11fca:	3b04      	subs	r3, #4
   11fcc:	b922      	cbnz	r2, 11fd8 <__mdiff+0xb0>
   11fce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   11fd2:	3f01      	subs	r7, #1
   11fd4:	2a00      	cmp	r2, #0
   11fd6:	d0fa      	beq.n	11fce <__mdiff+0xa6>
   11fd8:	6107      	str	r7, [r0, #16]
   11fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11fde:	462b      	mov	r3, r5
   11fe0:	f04f 0801 	mov.w	r8, #1
   11fe4:	4635      	mov	r5, r6
   11fe6:	461e      	mov	r6, r3
   11fe8:	e7ac      	b.n	11f44 <__mdiff+0x1c>
   11fea:	4620      	mov	r0, r4
   11fec:	4639      	mov	r1, r7
   11fee:	f7ff fd59 	bl	11aa4 <_Balloc>
   11ff2:	2301      	movs	r3, #1
   11ff4:	6147      	str	r7, [r0, #20]
   11ff6:	6103      	str	r3, [r0, #16]
   11ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00011ffc <__d2b>:
   11ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12000:	b083      	sub	sp, #12
   12002:	2101      	movs	r1, #1
   12004:	461d      	mov	r5, r3
   12006:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1200a:	4614      	mov	r4, r2
   1200c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1200e:	f7ff fd49 	bl	11aa4 <_Balloc>
   12012:	f3c5 0313 	ubfx	r3, r5, #0, #20
   12016:	4680      	mov	r8, r0
   12018:	b10e      	cbz	r6, 1201e <__d2b+0x22>
   1201a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1201e:	9301      	str	r3, [sp, #4]
   12020:	b324      	cbz	r4, 1206c <__d2b+0x70>
   12022:	a802      	add	r0, sp, #8
   12024:	f840 4d08 	str.w	r4, [r0, #-8]!
   12028:	4668      	mov	r0, sp
   1202a:	f7ff fdd7 	bl	11bdc <__lo0bits>
   1202e:	2800      	cmp	r0, #0
   12030:	d135      	bne.n	1209e <__d2b+0xa2>
   12032:	e89d 000c 	ldmia.w	sp, {r2, r3}
   12036:	f8c8 2014 	str.w	r2, [r8, #20]
   1203a:	2b00      	cmp	r3, #0
   1203c:	bf0c      	ite	eq
   1203e:	2401      	moveq	r4, #1
   12040:	2402      	movne	r4, #2
   12042:	f8c8 3018 	str.w	r3, [r8, #24]
   12046:	f8c8 4010 	str.w	r4, [r8, #16]
   1204a:	b9de      	cbnz	r6, 12084 <__d2b+0x88>
   1204c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   12050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   12054:	6038      	str	r0, [r7, #0]
   12056:	6918      	ldr	r0, [r3, #16]
   12058:	f7ff fda0 	bl	11b9c <__hi0bits>
   1205c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1205e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   12062:	6018      	str	r0, [r3, #0]
   12064:	4640      	mov	r0, r8
   12066:	b003      	add	sp, #12
   12068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1206c:	a801      	add	r0, sp, #4
   1206e:	f7ff fdb5 	bl	11bdc <__lo0bits>
   12072:	2401      	movs	r4, #1
   12074:	9b01      	ldr	r3, [sp, #4]
   12076:	f8c8 3014 	str.w	r3, [r8, #20]
   1207a:	3020      	adds	r0, #32
   1207c:	f8c8 4010 	str.w	r4, [r8, #16]
   12080:	2e00      	cmp	r6, #0
   12082:	d0e3      	beq.n	1204c <__d2b+0x50>
   12084:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
   12088:	eb09 0300 	add.w	r3, r9, r0
   1208c:	603b      	str	r3, [r7, #0]
   1208e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   12094:	6018      	str	r0, [r3, #0]
   12096:	4640      	mov	r0, r8
   12098:	b003      	add	sp, #12
   1209a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1209e:	e89d 000c 	ldmia.w	sp, {r2, r3}
   120a2:	f1c0 0120 	rsb	r1, r0, #32
   120a6:	fa03 f101 	lsl.w	r1, r3, r1
   120aa:	430a      	orrs	r2, r1
   120ac:	40c3      	lsrs	r3, r0
   120ae:	9301      	str	r3, [sp, #4]
   120b0:	f8c8 2014 	str.w	r2, [r8, #20]
   120b4:	e7c1      	b.n	1203a <__d2b+0x3e>
   120b6:	bf00      	nop

000120b8 <__sread>:
   120b8:	b510      	push	{r4, lr}
   120ba:	460c      	mov	r4, r1
   120bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   120c0:	f000 f9b0 	bl	12424 <_read_r>
   120c4:	2800      	cmp	r0, #0
   120c6:	db03      	blt.n	120d0 <__sread+0x18>
   120c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   120ca:	4403      	add	r3, r0
   120cc:	6523      	str	r3, [r4, #80]	; 0x50
   120ce:	bd10      	pop	{r4, pc}
   120d0:	89a3      	ldrh	r3, [r4, #12]
   120d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   120d6:	81a3      	strh	r3, [r4, #12]
   120d8:	bd10      	pop	{r4, pc}
   120da:	bf00      	nop

000120dc <__swrite>:
   120dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   120e0:	460c      	mov	r4, r1
   120e2:	8989      	ldrh	r1, [r1, #12]
   120e4:	461d      	mov	r5, r3
   120e6:	05cb      	lsls	r3, r1, #23
   120e8:	4616      	mov	r6, r2
   120ea:	4607      	mov	r7, r0
   120ec:	d506      	bpl.n	120fc <__swrite+0x20>
   120ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   120f2:	2200      	movs	r2, #0
   120f4:	2302      	movs	r3, #2
   120f6:	f000 f981 	bl	123fc <_lseek_r>
   120fa:	89a1      	ldrh	r1, [r4, #12]
   120fc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   12100:	81a1      	strh	r1, [r4, #12]
   12102:	4638      	mov	r0, r7
   12104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12108:	4632      	mov	r2, r6
   1210a:	462b      	mov	r3, r5
   1210c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12110:	f7fe b928 	b.w	10364 <_write_r>

00012114 <__sseek>:
   12114:	b510      	push	{r4, lr}
   12116:	460c      	mov	r4, r1
   12118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1211c:	f000 f96e 	bl	123fc <_lseek_r>
   12120:	89a3      	ldrh	r3, [r4, #12]
   12122:	1c42      	adds	r2, r0, #1
   12124:	bf0e      	itee	eq
   12126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1212a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1212e:	6520      	strne	r0, [r4, #80]	; 0x50
   12130:	81a3      	strh	r3, [r4, #12]
   12132:	bd10      	pop	{r4, pc}

00012134 <__sclose>:
   12134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12138:	f000 b8e0 	b.w	122fc <_close_r>

0001213c <__ssprint_r>:
   1213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12140:	6894      	ldr	r4, [r2, #8]
   12142:	6816      	ldr	r6, [r2, #0]
   12144:	b083      	sub	sp, #12
   12146:	4692      	mov	sl, r2
   12148:	4680      	mov	r8, r0
   1214a:	460d      	mov	r5, r1
   1214c:	2c00      	cmp	r4, #0
   1214e:	d06f      	beq.n	12230 <__ssprint_r+0xf4>
   12150:	f04f 0b00 	mov.w	fp, #0
   12154:	6808      	ldr	r0, [r1, #0]
   12156:	688b      	ldr	r3, [r1, #8]
   12158:	465c      	mov	r4, fp
   1215a:	2c00      	cmp	r4, #0
   1215c:	d043      	beq.n	121e6 <__ssprint_r+0xaa>
   1215e:	429c      	cmp	r4, r3
   12160:	461f      	mov	r7, r3
   12162:	d345      	bcc.n	121f0 <__ssprint_r+0xb4>
   12164:	89ab      	ldrh	r3, [r5, #12]
   12166:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1216a:	d044      	beq.n	121f6 <__ssprint_r+0xba>
   1216c:	696f      	ldr	r7, [r5, #20]
   1216e:	6929      	ldr	r1, [r5, #16]
   12170:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   12174:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   12178:	ebc1 0900 	rsb	r9, r1, r0
   1217c:	1c62      	adds	r2, r4, #1
   1217e:	107f      	asrs	r7, r7, #1
   12180:	444a      	add	r2, r9
   12182:	4297      	cmp	r7, r2
   12184:	bf34      	ite	cc
   12186:	4617      	movcc	r7, r2
   12188:	463a      	movcs	r2, r7
   1218a:	055b      	lsls	r3, r3, #21
   1218c:	d535      	bpl.n	121fa <__ssprint_r+0xbe>
   1218e:	4611      	mov	r1, r2
   12190:	4640      	mov	r0, r8
   12192:	f7fb fd81 	bl	dc98 <_malloc_r>
   12196:	2800      	cmp	r0, #0
   12198:	d039      	beq.n	1220e <__ssprint_r+0xd2>
   1219a:	6929      	ldr	r1, [r5, #16]
   1219c:	9001      	str	r0, [sp, #4]
   1219e:	464a      	mov	r2, r9
   121a0:	f7fc f892 	bl	e2c8 <memcpy>
   121a4:	89aa      	ldrh	r2, [r5, #12]
   121a6:	9b01      	ldr	r3, [sp, #4]
   121a8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   121ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   121b0:	81aa      	strh	r2, [r5, #12]
   121b2:	ebc9 0207 	rsb	r2, r9, r7
   121b6:	eb03 0009 	add.w	r0, r3, r9
   121ba:	616f      	str	r7, [r5, #20]
   121bc:	612b      	str	r3, [r5, #16]
   121be:	6028      	str	r0, [r5, #0]
   121c0:	60aa      	str	r2, [r5, #8]
   121c2:	4627      	mov	r7, r4
   121c4:	46a1      	mov	r9, r4
   121c6:	464a      	mov	r2, r9
   121c8:	4659      	mov	r1, fp
   121ca:	f7fc f917 	bl	e3fc <memmove>
   121ce:	f8da 2008 	ldr.w	r2, [sl, #8]
   121d2:	68ab      	ldr	r3, [r5, #8]
   121d4:	6828      	ldr	r0, [r5, #0]
   121d6:	1bdb      	subs	r3, r3, r7
   121d8:	4448      	add	r0, r9
   121da:	1b14      	subs	r4, r2, r4
   121dc:	60ab      	str	r3, [r5, #8]
   121de:	6028      	str	r0, [r5, #0]
   121e0:	f8ca 4008 	str.w	r4, [sl, #8]
   121e4:	b324      	cbz	r4, 12230 <__ssprint_r+0xf4>
   121e6:	f8d6 b000 	ldr.w	fp, [r6]
   121ea:	6874      	ldr	r4, [r6, #4]
   121ec:	3608      	adds	r6, #8
   121ee:	e7b4      	b.n	1215a <__ssprint_r+0x1e>
   121f0:	4627      	mov	r7, r4
   121f2:	46a1      	mov	r9, r4
   121f4:	e7e7      	b.n	121c6 <__ssprint_r+0x8a>
   121f6:	46b9      	mov	r9, r7
   121f8:	e7e5      	b.n	121c6 <__ssprint_r+0x8a>
   121fa:	4640      	mov	r0, r8
   121fc:	f7fc f9e0 	bl	e5c0 <_realloc_r>
   12200:	4603      	mov	r3, r0
   12202:	2800      	cmp	r0, #0
   12204:	d1d5      	bne.n	121b2 <__ssprint_r+0x76>
   12206:	4640      	mov	r0, r8
   12208:	6929      	ldr	r1, [r5, #16]
   1220a:	f7ff fae3 	bl	117d4 <_free_r>
   1220e:	89aa      	ldrh	r2, [r5, #12]
   12210:	230c      	movs	r3, #12
   12212:	f8c8 3000 	str.w	r3, [r8]
   12216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1221a:	2300      	movs	r3, #0
   1221c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12220:	81aa      	strh	r2, [r5, #12]
   12222:	f8ca 3008 	str.w	r3, [sl, #8]
   12226:	f8ca 3004 	str.w	r3, [sl, #4]
   1222a:	b003      	add	sp, #12
   1222c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12230:	4620      	mov	r0, r4
   12232:	f8ca 4004 	str.w	r4, [sl, #4]
   12236:	b003      	add	sp, #12
   12238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001223c <_vasnprintf_r>:
   1223c:	b570      	push	{r4, r5, r6, lr}
   1223e:	4614      	mov	r4, r2
   12240:	b09a      	sub	sp, #104	; 0x68
   12242:	6815      	ldr	r5, [r2, #0]
   12244:	b109      	cbz	r1, 1224a <_vasnprintf_r+0xe>
   12246:	2d00      	cmp	r5, #0
   12248:	d11a      	bne.n	12280 <_vasnprintf_r+0x44>
   1224a:	2500      	movs	r5, #0
   1224c:	f44f 7222 	mov.w	r2, #648	; 0x288
   12250:	f8ad 200c 	strh.w	r2, [sp, #12]
   12254:	9500      	str	r5, [sp, #0]
   12256:	9504      	str	r5, [sp, #16]
   12258:	461a      	mov	r2, r3
   1225a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1225e:	4669      	mov	r1, sp
   12260:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   12262:	9502      	str	r5, [sp, #8]
   12264:	9505      	str	r5, [sp, #20]
   12266:	f8ad 600e 	strh.w	r6, [sp, #14]
   1226a:	f7fc fd79 	bl	ed60 <_svfprintf_r>
   1226e:	2800      	cmp	r0, #0
   12270:	db11      	blt.n	12296 <_vasnprintf_r+0x5a>
   12272:	9b00      	ldr	r3, [sp, #0]
   12274:	6020      	str	r0, [r4, #0]
   12276:	2200      	movs	r2, #0
   12278:	701a      	strb	r2, [r3, #0]
   1227a:	9804      	ldr	r0, [sp, #16]
   1227c:	b01a      	add	sp, #104	; 0x68
   1227e:	bd70      	pop	{r4, r5, r6, pc}
   12280:	f44f 62c1 	mov.w	r2, #1544	; 0x608
   12284:	9100      	str	r1, [sp, #0]
   12286:	9104      	str	r1, [sp, #16]
   12288:	f8ad 200c 	strh.w	r2, [sp, #12]
   1228c:	dae4      	bge.n	12258 <_vasnprintf_r+0x1c>
   1228e:	238b      	movs	r3, #139	; 0x8b
   12290:	6003      	str	r3, [r0, #0]
   12292:	2000      	movs	r0, #0
   12294:	e7f2      	b.n	1227c <_vasnprintf_r+0x40>
   12296:	2000      	movs	r0, #0
   12298:	e7f0      	b.n	1227c <_vasnprintf_r+0x40>
   1229a:	bf00      	nop

0001229c <_calloc_r>:
   1229c:	b510      	push	{r4, lr}
   1229e:	fb02 f101 	mul.w	r1, r2, r1
   122a2:	f7fb fcf9 	bl	dc98 <_malloc_r>
   122a6:	4604      	mov	r4, r0
   122a8:	b168      	cbz	r0, 122c6 <_calloc_r+0x2a>
   122aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
   122ae:	f022 0203 	bic.w	r2, r2, #3
   122b2:	3a04      	subs	r2, #4
   122b4:	2a24      	cmp	r2, #36	; 0x24
   122b6:	d818      	bhi.n	122ea <_calloc_r+0x4e>
   122b8:	2a13      	cmp	r2, #19
   122ba:	d806      	bhi.n	122ca <_calloc_r+0x2e>
   122bc:	4603      	mov	r3, r0
   122be:	2200      	movs	r2, #0
   122c0:	601a      	str	r2, [r3, #0]
   122c2:	605a      	str	r2, [r3, #4]
   122c4:	609a      	str	r2, [r3, #8]
   122c6:	4620      	mov	r0, r4
   122c8:	bd10      	pop	{r4, pc}
   122ca:	2300      	movs	r3, #0
   122cc:	2a1b      	cmp	r2, #27
   122ce:	6003      	str	r3, [r0, #0]
   122d0:	6043      	str	r3, [r0, #4]
   122d2:	d90f      	bls.n	122f4 <_calloc_r+0x58>
   122d4:	2a24      	cmp	r2, #36	; 0x24
   122d6:	6083      	str	r3, [r0, #8]
   122d8:	60c3      	str	r3, [r0, #12]
   122da:	bf05      	ittet	eq
   122dc:	6103      	streq	r3, [r0, #16]
   122de:	6143      	streq	r3, [r0, #20]
   122e0:	f100 0310 	addne.w	r3, r0, #16
   122e4:	f100 0318 	addeq.w	r3, r0, #24
   122e8:	e7e9      	b.n	122be <_calloc_r+0x22>
   122ea:	2100      	movs	r1, #0
   122ec:	f7fc f8e6 	bl	e4bc <memset>
   122f0:	4620      	mov	r0, r4
   122f2:	bd10      	pop	{r4, pc}
   122f4:	f100 0308 	add.w	r3, r0, #8
   122f8:	e7e1      	b.n	122be <_calloc_r+0x22>
   122fa:	bf00      	nop

000122fc <_close_r>:
   122fc:	b538      	push	{r3, r4, r5, lr}
   122fe:	4c07      	ldr	r4, [pc, #28]	; (1231c <_close_r+0x20>)
   12300:	2300      	movs	r3, #0
   12302:	4605      	mov	r5, r0
   12304:	4608      	mov	r0, r1
   12306:	6023      	str	r3, [r4, #0]
   12308:	f7f0 fa23 	bl	2752 <_close>
   1230c:	1c43      	adds	r3, r0, #1
   1230e:	d000      	beq.n	12312 <_close_r+0x16>
   12310:	bd38      	pop	{r3, r4, r5, pc}
   12312:	6823      	ldr	r3, [r4, #0]
   12314:	2b00      	cmp	r3, #0
   12316:	d0fb      	beq.n	12310 <_close_r+0x14>
   12318:	602b      	str	r3, [r5, #0]
   1231a:	bd38      	pop	{r3, r4, r5, pc}
   1231c:	1fff9c90 	.word	0x1fff9c90

00012320 <_fclose_r>:
   12320:	b570      	push	{r4, r5, r6, lr}
   12322:	460c      	mov	r4, r1
   12324:	4605      	mov	r5, r0
   12326:	b131      	cbz	r1, 12336 <_fclose_r+0x16>
   12328:	b110      	cbz	r0, 12330 <_fclose_r+0x10>
   1232a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1232c:	2b00      	cmp	r3, #0
   1232e:	d02f      	beq.n	12390 <_fclose_r+0x70>
   12330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12334:	b90b      	cbnz	r3, 1233a <_fclose_r+0x1a>
   12336:	2000      	movs	r0, #0
   12338:	bd70      	pop	{r4, r5, r6, pc}
   1233a:	4628      	mov	r0, r5
   1233c:	4621      	mov	r1, r4
   1233e:	f7ff f949 	bl	115d4 <_fflush_r>
   12342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12344:	4606      	mov	r6, r0
   12346:	b133      	cbz	r3, 12356 <_fclose_r+0x36>
   12348:	4628      	mov	r0, r5
   1234a:	69e1      	ldr	r1, [r4, #28]
   1234c:	4798      	blx	r3
   1234e:	2800      	cmp	r0, #0
   12350:	bfb8      	it	lt
   12352:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
   12356:	89a3      	ldrh	r3, [r4, #12]
   12358:	061b      	lsls	r3, r3, #24
   1235a:	d41c      	bmi.n	12396 <_fclose_r+0x76>
   1235c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1235e:	b141      	cbz	r1, 12372 <_fclose_r+0x52>
   12360:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12364:	4299      	cmp	r1, r3
   12366:	d002      	beq.n	1236e <_fclose_r+0x4e>
   12368:	4628      	mov	r0, r5
   1236a:	f7ff fa33 	bl	117d4 <_free_r>
   1236e:	2300      	movs	r3, #0
   12370:	6323      	str	r3, [r4, #48]	; 0x30
   12372:	6c61      	ldr	r1, [r4, #68]	; 0x44
   12374:	b121      	cbz	r1, 12380 <_fclose_r+0x60>
   12376:	4628      	mov	r0, r5
   12378:	f7ff fa2c 	bl	117d4 <_free_r>
   1237c:	2300      	movs	r3, #0
   1237e:	6463      	str	r3, [r4, #68]	; 0x44
   12380:	f7ff f9be 	bl	11700 <__sfp_lock_acquire>
   12384:	2300      	movs	r3, #0
   12386:	81a3      	strh	r3, [r4, #12]
   12388:	f7ff f9bc 	bl	11704 <__sfp_lock_release>
   1238c:	4630      	mov	r0, r6
   1238e:	bd70      	pop	{r4, r5, r6, pc}
   12390:	f7ff f93c 	bl	1160c <__sinit>
   12394:	e7cc      	b.n	12330 <_fclose_r+0x10>
   12396:	4628      	mov	r0, r5
   12398:	6921      	ldr	r1, [r4, #16]
   1239a:	f7ff fa1b 	bl	117d4 <_free_r>
   1239e:	e7dd      	b.n	1235c <_fclose_r+0x3c>

000123a0 <fclose>:
   123a0:	4b02      	ldr	r3, [pc, #8]	; (123ac <fclose+0xc>)
   123a2:	4601      	mov	r1, r0
   123a4:	6818      	ldr	r0, [r3, #0]
   123a6:	f7ff bfbb 	b.w	12320 <_fclose_r>
   123aa:	bf00      	nop
   123ac:	1fff88f0 	.word	0x1fff88f0

000123b0 <_fstat_r>:
   123b0:	b538      	push	{r3, r4, r5, lr}
   123b2:	4c08      	ldr	r4, [pc, #32]	; (123d4 <_fstat_r+0x24>)
   123b4:	2300      	movs	r3, #0
   123b6:	4605      	mov	r5, r0
   123b8:	4608      	mov	r0, r1
   123ba:	4611      	mov	r1, r2
   123bc:	6023      	str	r3, [r4, #0]
   123be:	f7f0 f9cb 	bl	2758 <_fstat>
   123c2:	1c43      	adds	r3, r0, #1
   123c4:	d000      	beq.n	123c8 <_fstat_r+0x18>
   123c6:	bd38      	pop	{r3, r4, r5, pc}
   123c8:	6823      	ldr	r3, [r4, #0]
   123ca:	2b00      	cmp	r3, #0
   123cc:	d0fb      	beq.n	123c6 <_fstat_r+0x16>
   123ce:	602b      	str	r3, [r5, #0]
   123d0:	bd38      	pop	{r3, r4, r5, pc}
   123d2:	bf00      	nop
   123d4:	1fff9c90 	.word	0x1fff9c90

000123d8 <_isatty_r>:
   123d8:	b538      	push	{r3, r4, r5, lr}
   123da:	4c07      	ldr	r4, [pc, #28]	; (123f8 <_isatty_r+0x20>)
   123dc:	2300      	movs	r3, #0
   123de:	4605      	mov	r5, r0
   123e0:	4608      	mov	r0, r1
   123e2:	6023      	str	r3, [r4, #0]
   123e4:	f7f0 f9bd 	bl	2762 <_isatty>
   123e8:	1c43      	adds	r3, r0, #1
   123ea:	d000      	beq.n	123ee <_isatty_r+0x16>
   123ec:	bd38      	pop	{r3, r4, r5, pc}
   123ee:	6823      	ldr	r3, [r4, #0]
   123f0:	2b00      	cmp	r3, #0
   123f2:	d0fb      	beq.n	123ec <_isatty_r+0x14>
   123f4:	602b      	str	r3, [r5, #0]
   123f6:	bd38      	pop	{r3, r4, r5, pc}
   123f8:	1fff9c90 	.word	0x1fff9c90

000123fc <_lseek_r>:
   123fc:	b570      	push	{r4, r5, r6, lr}
   123fe:	4c08      	ldr	r4, [pc, #32]	; (12420 <_lseek_r+0x24>)
   12400:	4606      	mov	r6, r0
   12402:	2500      	movs	r5, #0
   12404:	4608      	mov	r0, r1
   12406:	4611      	mov	r1, r2
   12408:	461a      	mov	r2, r3
   1240a:	6025      	str	r5, [r4, #0]
   1240c:	f7f0 f9ab 	bl	2766 <_lseek>
   12410:	1c43      	adds	r3, r0, #1
   12412:	d000      	beq.n	12416 <_lseek_r+0x1a>
   12414:	bd70      	pop	{r4, r5, r6, pc}
   12416:	6823      	ldr	r3, [r4, #0]
   12418:	2b00      	cmp	r3, #0
   1241a:	d0fb      	beq.n	12414 <_lseek_r+0x18>
   1241c:	6033      	str	r3, [r6, #0]
   1241e:	bd70      	pop	{r4, r5, r6, pc}
   12420:	1fff9c90 	.word	0x1fff9c90

00012424 <_read_r>:
   12424:	b570      	push	{r4, r5, r6, lr}
   12426:	4c08      	ldr	r4, [pc, #32]	; (12448 <_read_r+0x24>)
   12428:	4606      	mov	r6, r0
   1242a:	2500      	movs	r5, #0
   1242c:	4608      	mov	r0, r1
   1242e:	4611      	mov	r1, r2
   12430:	461a      	mov	r2, r3
   12432:	6025      	str	r5, [r4, #0]
   12434:	f7f0 f98b 	bl	274e <_read>
   12438:	1c43      	adds	r3, r0, #1
   1243a:	d000      	beq.n	1243e <_read_r+0x1a>
   1243c:	bd70      	pop	{r4, r5, r6, pc}
   1243e:	6823      	ldr	r3, [r4, #0]
   12440:	2b00      	cmp	r3, #0
   12442:	d0fb      	beq.n	1243c <_read_r+0x18>
   12444:	6033      	str	r3, [r6, #0]
   12446:	bd70      	pop	{r4, r5, r6, pc}
   12448:	1fff9c90 	.word	0x1fff9c90

0001244c <__aeabi_uldivmod>:
   1244c:	b94b      	cbnz	r3, 12462 <__aeabi_uldivmod+0x16>
   1244e:	b942      	cbnz	r2, 12462 <__aeabi_uldivmod+0x16>
   12450:	2900      	cmp	r1, #0
   12452:	bf08      	it	eq
   12454:	2800      	cmpeq	r0, #0
   12456:	d002      	beq.n	1245e <__aeabi_uldivmod+0x12>
   12458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1245c:	4608      	mov	r0, r1
   1245e:	f000 b83b 	b.w	124d8 <__aeabi_idiv0>
   12462:	b082      	sub	sp, #8
   12464:	46ec      	mov	ip, sp
   12466:	e92d 5000 	stmdb	sp!, {ip, lr}
   1246a:	f000 f81d 	bl	124a8 <__gnu_uldivmod_helper>
   1246e:	f8dd e004 	ldr.w	lr, [sp, #4]
   12472:	b002      	add	sp, #8
   12474:	bc0c      	pop	{r2, r3}
   12476:	4770      	bx	lr

00012478 <__gnu_ldivmod_helper>:
   12478:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1247c:	9e06      	ldr	r6, [sp, #24]
   1247e:	4614      	mov	r4, r2
   12480:	461d      	mov	r5, r3
   12482:	4680      	mov	r8, r0
   12484:	4689      	mov	r9, r1
   12486:	f000 f829 	bl	124dc <__divdi3>
   1248a:	fb04 f301 	mul.w	r3, r4, r1
   1248e:	fb00 3305 	mla	r3, r0, r5, r3
   12492:	fba4 4500 	umull	r4, r5, r4, r0
   12496:	441d      	add	r5, r3
   12498:	ebb8 0404 	subs.w	r4, r8, r4
   1249c:	eb69 0505 	sbc.w	r5, r9, r5
   124a0:	e9c6 4500 	strd	r4, r5, [r6]
   124a4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000124a8 <__gnu_uldivmod_helper>:
   124a8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   124ac:	9e06      	ldr	r6, [sp, #24]
   124ae:	4614      	mov	r4, r2
   124b0:	4680      	mov	r8, r0
   124b2:	4689      	mov	r9, r1
   124b4:	461d      	mov	r5, r3
   124b6:	f000 f95d 	bl	12774 <__udivdi3>
   124ba:	fb00 f505 	mul.w	r5, r0, r5
   124be:	fb04 5301 	mla	r3, r4, r1, r5
   124c2:	fba0 4504 	umull	r4, r5, r0, r4
   124c6:	441d      	add	r5, r3
   124c8:	ebb8 0404 	subs.w	r4, r8, r4
   124cc:	eb69 0505 	sbc.w	r5, r9, r5
   124d0:	e9c6 4500 	strd	r4, r5, [r6]
   124d4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000124d8 <__aeabi_idiv0>:
   124d8:	4770      	bx	lr
   124da:	bf00      	nop

000124dc <__divdi3>:
   124dc:	2900      	cmp	r1, #0
   124de:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   124e2:	f2c0 809f 	blt.w	12624 <__divdi3+0x148>
   124e6:	2400      	movs	r4, #0
   124e8:	2b00      	cmp	r3, #0
   124ea:	f2c0 8096 	blt.w	1261a <__divdi3+0x13e>
   124ee:	4615      	mov	r5, r2
   124f0:	4606      	mov	r6, r0
   124f2:	460f      	mov	r7, r1
   124f4:	2b00      	cmp	r3, #0
   124f6:	d13e      	bne.n	12576 <__divdi3+0x9a>
   124f8:	428a      	cmp	r2, r1
   124fa:	d957      	bls.n	125ac <__divdi3+0xd0>
   124fc:	fab2 f382 	clz	r3, r2
   12500:	b14b      	cbz	r3, 12516 <__divdi3+0x3a>
   12502:	f1c3 0220 	rsb	r2, r3, #32
   12506:	fa01 f703 	lsl.w	r7, r1, r3
   1250a:	fa20 f202 	lsr.w	r2, r0, r2
   1250e:	409d      	lsls	r5, r3
   12510:	4317      	orrs	r7, r2
   12512:	fa00 f603 	lsl.w	r6, r0, r3
   12516:	0c29      	lsrs	r1, r5, #16
   12518:	fbb7 f2f1 	udiv	r2, r7, r1
   1251c:	0c33      	lsrs	r3, r6, #16
   1251e:	fb01 7c12 	mls	ip, r1, r2, r7
   12522:	b2a8      	uxth	r0, r5
   12524:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
   12528:	fb00 f302 	mul.w	r3, r0, r2
   1252c:	42bb      	cmp	r3, r7
   1252e:	d909      	bls.n	12544 <__divdi3+0x68>
   12530:	197f      	adds	r7, r7, r5
   12532:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   12536:	f080 8101 	bcs.w	1273c <__divdi3+0x260>
   1253a:	42bb      	cmp	r3, r7
   1253c:	f240 80fe 	bls.w	1273c <__divdi3+0x260>
   12540:	3a02      	subs	r2, #2
   12542:	442f      	add	r7, r5
   12544:	1aff      	subs	r7, r7, r3
   12546:	fbb7 f3f1 	udiv	r3, r7, r1
   1254a:	b2b6      	uxth	r6, r6
   1254c:	fb01 7113 	mls	r1, r1, r3, r7
   12550:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   12554:	fb00 f003 	mul.w	r0, r0, r3
   12558:	4288      	cmp	r0, r1
   1255a:	d908      	bls.n	1256e <__divdi3+0x92>
   1255c:	1949      	adds	r1, r1, r5
   1255e:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
   12562:	f080 80ed 	bcs.w	12740 <__divdi3+0x264>
   12566:	4288      	cmp	r0, r1
   12568:	f240 80ea 	bls.w	12740 <__divdi3+0x264>
   1256c:	3b02      	subs	r3, #2
   1256e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   12572:	2300      	movs	r3, #0
   12574:	e003      	b.n	1257e <__divdi3+0xa2>
   12576:	428b      	cmp	r3, r1
   12578:	d90a      	bls.n	12590 <__divdi3+0xb4>
   1257a:	2300      	movs	r3, #0
   1257c:	461a      	mov	r2, r3
   1257e:	4610      	mov	r0, r2
   12580:	4619      	mov	r1, r3
   12582:	b114      	cbz	r4, 1258a <__divdi3+0xae>
   12584:	4240      	negs	r0, r0
   12586:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1258a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1258e:	4770      	bx	lr
   12590:	fab3 f883 	clz	r8, r3
   12594:	f1b8 0f00 	cmp.w	r8, #0
   12598:	f040 8084 	bne.w	126a4 <__divdi3+0x1c8>
   1259c:	428b      	cmp	r3, r1
   1259e:	d302      	bcc.n	125a6 <__divdi3+0xca>
   125a0:	4282      	cmp	r2, r0
   125a2:	f200 80de 	bhi.w	12762 <__divdi3+0x286>
   125a6:	2300      	movs	r3, #0
   125a8:	2201      	movs	r2, #1
   125aa:	e7e8      	b.n	1257e <__divdi3+0xa2>
   125ac:	b912      	cbnz	r2, 125b4 <__divdi3+0xd8>
   125ae:	2301      	movs	r3, #1
   125b0:	fbb3 f5f2 	udiv	r5, r3, r2
   125b4:	fab5 f285 	clz	r2, r5
   125b8:	2a00      	cmp	r2, #0
   125ba:	d139      	bne.n	12630 <__divdi3+0x154>
   125bc:	1b7f      	subs	r7, r7, r5
   125be:	0c28      	lsrs	r0, r5, #16
   125c0:	fa1f fc85 	uxth.w	ip, r5
   125c4:	2301      	movs	r3, #1
   125c6:	fbb7 f1f0 	udiv	r1, r7, r0
   125ca:	0c32      	lsrs	r2, r6, #16
   125cc:	fb00 7711 	mls	r7, r0, r1, r7
   125d0:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
   125d4:	fb0c f201 	mul.w	r2, ip, r1
   125d8:	42ba      	cmp	r2, r7
   125da:	d907      	bls.n	125ec <__divdi3+0x110>
   125dc:	197f      	adds	r7, r7, r5
   125de:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   125e2:	d202      	bcs.n	125ea <__divdi3+0x10e>
   125e4:	42ba      	cmp	r2, r7
   125e6:	f200 80c1 	bhi.w	1276c <__divdi3+0x290>
   125ea:	4641      	mov	r1, r8
   125ec:	1abf      	subs	r7, r7, r2
   125ee:	fbb7 f2f0 	udiv	r2, r7, r0
   125f2:	b2b6      	uxth	r6, r6
   125f4:	fb00 7012 	mls	r0, r0, r2, r7
   125f8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   125fc:	fb0c fc02 	mul.w	ip, ip, r2
   12600:	4584      	cmp	ip, r0
   12602:	d907      	bls.n	12614 <__divdi3+0x138>
   12604:	1940      	adds	r0, r0, r5
   12606:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   1260a:	d202      	bcs.n	12612 <__divdi3+0x136>
   1260c:	4584      	cmp	ip, r0
   1260e:	f200 80ab 	bhi.w	12768 <__divdi3+0x28c>
   12612:	463a      	mov	r2, r7
   12614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   12618:	e7b1      	b.n	1257e <__divdi3+0xa2>
   1261a:	43e4      	mvns	r4, r4
   1261c:	4252      	negs	r2, r2
   1261e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12622:	e764      	b.n	124ee <__divdi3+0x12>
   12624:	4240      	negs	r0, r0
   12626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1262a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1262e:	e75b      	b.n	124e8 <__divdi3+0xc>
   12630:	4095      	lsls	r5, r2
   12632:	f1c2 0320 	rsb	r3, r2, #32
   12636:	fa27 f103 	lsr.w	r1, r7, r3
   1263a:	0c28      	lsrs	r0, r5, #16
   1263c:	fa26 f303 	lsr.w	r3, r6, r3
   12640:	4097      	lsls	r7, r2
   12642:	fbb1 f8f0 	udiv	r8, r1, r0
   12646:	431f      	orrs	r7, r3
   12648:	0c3b      	lsrs	r3, r7, #16
   1264a:	fb00 1118 	mls	r1, r0, r8, r1
   1264e:	fa1f fc85 	uxth.w	ip, r5
   12652:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   12656:	fb0c f308 	mul.w	r3, ip, r8
   1265a:	428b      	cmp	r3, r1
   1265c:	fa06 f602 	lsl.w	r6, r6, r2
   12660:	d908      	bls.n	12674 <__divdi3+0x198>
   12662:	1949      	adds	r1, r1, r5
   12664:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   12668:	d279      	bcs.n	1275e <__divdi3+0x282>
   1266a:	428b      	cmp	r3, r1
   1266c:	d977      	bls.n	1275e <__divdi3+0x282>
   1266e:	f1a8 0802 	sub.w	r8, r8, #2
   12672:	4429      	add	r1, r5
   12674:	1ac9      	subs	r1, r1, r3
   12676:	fbb1 f3f0 	udiv	r3, r1, r0
   1267a:	b2bf      	uxth	r7, r7
   1267c:	fb00 1113 	mls	r1, r0, r3, r1
   12680:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   12684:	fb0c f203 	mul.w	r2, ip, r3
   12688:	42ba      	cmp	r2, r7
   1268a:	d907      	bls.n	1269c <__divdi3+0x1c0>
   1268c:	197f      	adds	r7, r7, r5
   1268e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
   12692:	d260      	bcs.n	12756 <__divdi3+0x27a>
   12694:	42ba      	cmp	r2, r7
   12696:	d95e      	bls.n	12756 <__divdi3+0x27a>
   12698:	3b02      	subs	r3, #2
   1269a:	442f      	add	r7, r5
   1269c:	1abf      	subs	r7, r7, r2
   1269e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   126a2:	e790      	b.n	125c6 <__divdi3+0xea>
   126a4:	f1c8 0220 	rsb	r2, r8, #32
   126a8:	fa03 fc08 	lsl.w	ip, r3, r8
   126ac:	fa25 f302 	lsr.w	r3, r5, r2
   126b0:	ea43 0c0c 	orr.w	ip, r3, ip
   126b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
   126b8:	fa21 f302 	lsr.w	r3, r1, r2
   126bc:	fa01 f708 	lsl.w	r7, r1, r8
   126c0:	fa20 f202 	lsr.w	r2, r0, r2
   126c4:	fbb3 f1f9 	udiv	r1, r3, r9
   126c8:	4317      	orrs	r7, r2
   126ca:	fb09 3311 	mls	r3, r9, r1, r3
   126ce:	0c3a      	lsrs	r2, r7, #16
   126d0:	fa1f fb8c 	uxth.w	fp, ip
   126d4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   126d8:	fb0b fa01 	mul.w	sl, fp, r1
   126dc:	459a      	cmp	sl, r3
   126de:	fa05 f008 	lsl.w	r0, r5, r8
   126e2:	d908      	bls.n	126f6 <__divdi3+0x21a>
   126e4:	eb13 030c 	adds.w	r3, r3, ip
   126e8:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   126ec:	d235      	bcs.n	1275a <__divdi3+0x27e>
   126ee:	459a      	cmp	sl, r3
   126f0:	d933      	bls.n	1275a <__divdi3+0x27e>
   126f2:	3902      	subs	r1, #2
   126f4:	4463      	add	r3, ip
   126f6:	ebca 0303 	rsb	r3, sl, r3
   126fa:	fbb3 f2f9 	udiv	r2, r3, r9
   126fe:	fb09 3312 	mls	r3, r9, r2, r3
   12702:	b2bf      	uxth	r7, r7
   12704:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   12708:	fb0b f902 	mul.w	r9, fp, r2
   1270c:	45b9      	cmp	r9, r7
   1270e:	d908      	bls.n	12722 <__divdi3+0x246>
   12710:	eb17 070c 	adds.w	r7, r7, ip
   12714:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   12718:	d21b      	bcs.n	12752 <__divdi3+0x276>
   1271a:	45b9      	cmp	r9, r7
   1271c:	d919      	bls.n	12752 <__divdi3+0x276>
   1271e:	3a02      	subs	r2, #2
   12720:	4467      	add	r7, ip
   12722:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   12726:	fba5 0100 	umull	r0, r1, r5, r0
   1272a:	ebc9 0707 	rsb	r7, r9, r7
   1272e:	428f      	cmp	r7, r1
   12730:	f04f 0300 	mov.w	r3, #0
   12734:	d30a      	bcc.n	1274c <__divdi3+0x270>
   12736:	d005      	beq.n	12744 <__divdi3+0x268>
   12738:	462a      	mov	r2, r5
   1273a:	e720      	b.n	1257e <__divdi3+0xa2>
   1273c:	4662      	mov	r2, ip
   1273e:	e701      	b.n	12544 <__divdi3+0x68>
   12740:	463b      	mov	r3, r7
   12742:	e714      	b.n	1256e <__divdi3+0x92>
   12744:	fa06 f608 	lsl.w	r6, r6, r8
   12748:	4286      	cmp	r6, r0
   1274a:	d2f5      	bcs.n	12738 <__divdi3+0x25c>
   1274c:	1e6a      	subs	r2, r5, #1
   1274e:	2300      	movs	r3, #0
   12750:	e715      	b.n	1257e <__divdi3+0xa2>
   12752:	461a      	mov	r2, r3
   12754:	e7e5      	b.n	12722 <__divdi3+0x246>
   12756:	460b      	mov	r3, r1
   12758:	e7a0      	b.n	1269c <__divdi3+0x1c0>
   1275a:	4611      	mov	r1, r2
   1275c:	e7cb      	b.n	126f6 <__divdi3+0x21a>
   1275e:	4690      	mov	r8, r2
   12760:	e788      	b.n	12674 <__divdi3+0x198>
   12762:	4643      	mov	r3, r8
   12764:	4642      	mov	r2, r8
   12766:	e70a      	b.n	1257e <__divdi3+0xa2>
   12768:	3a02      	subs	r2, #2
   1276a:	e753      	b.n	12614 <__divdi3+0x138>
   1276c:	3902      	subs	r1, #2
   1276e:	442f      	add	r7, r5
   12770:	e73c      	b.n	125ec <__divdi3+0x110>
   12772:	bf00      	nop

00012774 <__udivdi3>:
   12774:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   12778:	4614      	mov	r4, r2
   1277a:	4605      	mov	r5, r0
   1277c:	460e      	mov	r6, r1
   1277e:	2b00      	cmp	r3, #0
   12780:	d143      	bne.n	1280a <__udivdi3+0x96>
   12782:	428a      	cmp	r2, r1
   12784:	d953      	bls.n	1282e <__udivdi3+0xba>
   12786:	fab2 f782 	clz	r7, r2
   1278a:	b157      	cbz	r7, 127a2 <__udivdi3+0x2e>
   1278c:	f1c7 0620 	rsb	r6, r7, #32
   12790:	fa20 f606 	lsr.w	r6, r0, r6
   12794:	fa01 f307 	lsl.w	r3, r1, r7
   12798:	fa02 f407 	lsl.w	r4, r2, r7
   1279c:	431e      	orrs	r6, r3
   1279e:	fa00 f507 	lsl.w	r5, r0, r7
   127a2:	0c21      	lsrs	r1, r4, #16
   127a4:	fbb6 f2f1 	udiv	r2, r6, r1
   127a8:	0c2b      	lsrs	r3, r5, #16
   127aa:	fb01 6712 	mls	r7, r1, r2, r6
   127ae:	b2a0      	uxth	r0, r4
   127b0:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
   127b4:	fb00 f302 	mul.w	r3, r0, r2
   127b8:	42b3      	cmp	r3, r6
   127ba:	d909      	bls.n	127d0 <__udivdi3+0x5c>
   127bc:	1936      	adds	r6, r6, r4
   127be:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   127c2:	f080 80f6 	bcs.w	129b2 <__udivdi3+0x23e>
   127c6:	42b3      	cmp	r3, r6
   127c8:	f240 80f3 	bls.w	129b2 <__udivdi3+0x23e>
   127cc:	3a02      	subs	r2, #2
   127ce:	4426      	add	r6, r4
   127d0:	1af6      	subs	r6, r6, r3
   127d2:	fbb6 f3f1 	udiv	r3, r6, r1
   127d6:	b2ad      	uxth	r5, r5
   127d8:	fb01 6113 	mls	r1, r1, r3, r6
   127dc:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   127e0:	fb00 f003 	mul.w	r0, r0, r3
   127e4:	4288      	cmp	r0, r1
   127e6:	d908      	bls.n	127fa <__udivdi3+0x86>
   127e8:	1909      	adds	r1, r1, r4
   127ea:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
   127ee:	f080 80e2 	bcs.w	129b6 <__udivdi3+0x242>
   127f2:	4288      	cmp	r0, r1
   127f4:	f240 80df 	bls.w	129b6 <__udivdi3+0x242>
   127f8:	3b02      	subs	r3, #2
   127fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   127fe:	2300      	movs	r3, #0
   12800:	4610      	mov	r0, r2
   12802:	4619      	mov	r1, r3
   12804:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   12808:	4770      	bx	lr
   1280a:	428b      	cmp	r3, r1
   1280c:	d84a      	bhi.n	128a4 <__udivdi3+0x130>
   1280e:	fab3 f683 	clz	r6, r3
   12812:	2e00      	cmp	r6, #0
   12814:	d14d      	bne.n	128b2 <__udivdi3+0x13e>
   12816:	428b      	cmp	r3, r1
   12818:	d302      	bcc.n	12820 <__udivdi3+0xac>
   1281a:	4282      	cmp	r2, r0
   1281c:	f200 80d6 	bhi.w	129cc <__udivdi3+0x258>
   12820:	2300      	movs	r3, #0
   12822:	2201      	movs	r2, #1
   12824:	4610      	mov	r0, r2
   12826:	4619      	mov	r1, r3
   12828:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1282c:	4770      	bx	lr
   1282e:	b912      	cbnz	r2, 12836 <__udivdi3+0xc2>
   12830:	2401      	movs	r4, #1
   12832:	fbb4 f4f2 	udiv	r4, r4, r2
   12836:	fab4 f284 	clz	r2, r4
   1283a:	2a00      	cmp	r2, #0
   1283c:	d17c      	bne.n	12938 <__udivdi3+0x1c4>
   1283e:	1b09      	subs	r1, r1, r4
   12840:	0c26      	lsrs	r6, r4, #16
   12842:	b2a7      	uxth	r7, r4
   12844:	2301      	movs	r3, #1
   12846:	fbb1 f0f6 	udiv	r0, r1, r6
   1284a:	0c2a      	lsrs	r2, r5, #16
   1284c:	fb06 1110 	mls	r1, r6, r0, r1
   12850:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   12854:	fb07 f200 	mul.w	r2, r7, r0
   12858:	428a      	cmp	r2, r1
   1285a:	d907      	bls.n	1286c <__udivdi3+0xf8>
   1285c:	1909      	adds	r1, r1, r4
   1285e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   12862:	d202      	bcs.n	1286a <__udivdi3+0xf6>
   12864:	428a      	cmp	r2, r1
   12866:	f200 80c3 	bhi.w	129f0 <__udivdi3+0x27c>
   1286a:	4660      	mov	r0, ip
   1286c:	1a89      	subs	r1, r1, r2
   1286e:	fbb1 f2f6 	udiv	r2, r1, r6
   12872:	b2ad      	uxth	r5, r5
   12874:	fb06 1112 	mls	r1, r6, r2, r1
   12878:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   1287c:	fb07 f702 	mul.w	r7, r7, r2
   12880:	42af      	cmp	r7, r5
   12882:	d908      	bls.n	12896 <__udivdi3+0x122>
   12884:	192c      	adds	r4, r5, r4
   12886:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
   1288a:	f080 8096 	bcs.w	129ba <__udivdi3+0x246>
   1288e:	42a7      	cmp	r7, r4
   12890:	f240 8093 	bls.w	129ba <__udivdi3+0x246>
   12894:	3a02      	subs	r2, #2
   12896:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   1289a:	4610      	mov	r0, r2
   1289c:	4619      	mov	r1, r3
   1289e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   128a2:	4770      	bx	lr
   128a4:	2300      	movs	r3, #0
   128a6:	461a      	mov	r2, r3
   128a8:	4610      	mov	r0, r2
   128aa:	4619      	mov	r1, r3
   128ac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   128b0:	4770      	bx	lr
   128b2:	f1c6 0520 	rsb	r5, r6, #32
   128b6:	fa22 f405 	lsr.w	r4, r2, r5
   128ba:	40b3      	lsls	r3, r6
   128bc:	431c      	orrs	r4, r3
   128be:	ea4f 4814 	mov.w	r8, r4, lsr #16
   128c2:	fa21 f305 	lsr.w	r3, r1, r5
   128c6:	fa01 f706 	lsl.w	r7, r1, r6
   128ca:	fa20 f505 	lsr.w	r5, r0, r5
   128ce:	fbb3 fcf8 	udiv	ip, r3, r8
   128d2:	432f      	orrs	r7, r5
   128d4:	fb08 331c 	mls	r3, r8, ip, r3
   128d8:	0c3d      	lsrs	r5, r7, #16
   128da:	fa1f fa84 	uxth.w	sl, r4
   128de:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   128e2:	fb0a f90c 	mul.w	r9, sl, ip
   128e6:	4599      	cmp	r9, r3
   128e8:	fa02 fb06 	lsl.w	fp, r2, r6
   128ec:	d904      	bls.n	128f8 <__udivdi3+0x184>
   128ee:	191b      	adds	r3, r3, r4
   128f0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   128f4:	d36d      	bcc.n	129d2 <__udivdi3+0x25e>
   128f6:	4694      	mov	ip, r2
   128f8:	ebc9 0303 	rsb	r3, r9, r3
   128fc:	fbb3 f5f8 	udiv	r5, r3, r8
   12900:	fb08 3315 	mls	r3, r8, r5, r3
   12904:	b2bf      	uxth	r7, r7
   12906:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   1290a:	fb0a f805 	mul.w	r8, sl, r5
   1290e:	45b8      	cmp	r8, r7
   12910:	d904      	bls.n	1291c <__udivdi3+0x1a8>
   12912:	193f      	adds	r7, r7, r4
   12914:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
   12918:	d361      	bcc.n	129de <__udivdi3+0x26a>
   1291a:	461d      	mov	r5, r3
   1291c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   12920:	fbac 230b 	umull	r2, r3, ip, fp
   12924:	ebc8 0707 	rsb	r7, r8, r7
   12928:	429f      	cmp	r7, r3
   1292a:	f04f 0500 	mov.w	r5, #0
   1292e:	d349      	bcc.n	129c4 <__udivdi3+0x250>
   12930:	d045      	beq.n	129be <__udivdi3+0x24a>
   12932:	4662      	mov	r2, ip
   12934:	462b      	mov	r3, r5
   12936:	e763      	b.n	12800 <__udivdi3+0x8c>
   12938:	4094      	lsls	r4, r2
   1293a:	f1c2 0320 	rsb	r3, r2, #32
   1293e:	fa21 fc03 	lsr.w	ip, r1, r3
   12942:	0c26      	lsrs	r6, r4, #16
   12944:	fa20 f303 	lsr.w	r3, r0, r3
   12948:	fa01 f502 	lsl.w	r5, r1, r2
   1294c:	fbbc f8f6 	udiv	r8, ip, r6
   12950:	ea43 0105 	orr.w	r1, r3, r5
   12954:	0c0b      	lsrs	r3, r1, #16
   12956:	fb06 cc18 	mls	ip, r6, r8, ip
   1295a:	b2a7      	uxth	r7, r4
   1295c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
   12960:	fb07 f308 	mul.w	r3, r7, r8
   12964:	4563      	cmp	r3, ip
   12966:	fa00 f502 	lsl.w	r5, r0, r2
   1296a:	d909      	bls.n	12980 <__udivdi3+0x20c>
   1296c:	eb1c 0c04 	adds.w	ip, ip, r4
   12970:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   12974:	d23a      	bcs.n	129ec <__udivdi3+0x278>
   12976:	4563      	cmp	r3, ip
   12978:	d938      	bls.n	129ec <__udivdi3+0x278>
   1297a:	f1a8 0802 	sub.w	r8, r8, #2
   1297e:	44a4      	add	ip, r4
   12980:	ebc3 0c0c 	rsb	ip, r3, ip
   12984:	fbbc f3f6 	udiv	r3, ip, r6
   12988:	b289      	uxth	r1, r1
   1298a:	fb06 cc13 	mls	ip, r6, r3, ip
   1298e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
   12992:	fb07 f203 	mul.w	r2, r7, r3
   12996:	428a      	cmp	r2, r1
   12998:	d907      	bls.n	129aa <__udivdi3+0x236>
   1299a:	1909      	adds	r1, r1, r4
   1299c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   129a0:	d222      	bcs.n	129e8 <__udivdi3+0x274>
   129a2:	428a      	cmp	r2, r1
   129a4:	d920      	bls.n	129e8 <__udivdi3+0x274>
   129a6:	3b02      	subs	r3, #2
   129a8:	4421      	add	r1, r4
   129aa:	1a89      	subs	r1, r1, r2
   129ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   129b0:	e749      	b.n	12846 <__udivdi3+0xd2>
   129b2:	463a      	mov	r2, r7
   129b4:	e70c      	b.n	127d0 <__udivdi3+0x5c>
   129b6:	4633      	mov	r3, r6
   129b8:	e71f      	b.n	127fa <__udivdi3+0x86>
   129ba:	460a      	mov	r2, r1
   129bc:	e76b      	b.n	12896 <__udivdi3+0x122>
   129be:	40b0      	lsls	r0, r6
   129c0:	4290      	cmp	r0, r2
   129c2:	d2b6      	bcs.n	12932 <__udivdi3+0x1be>
   129c4:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   129c8:	2300      	movs	r3, #0
   129ca:	e719      	b.n	12800 <__udivdi3+0x8c>
   129cc:	4633      	mov	r3, r6
   129ce:	4632      	mov	r2, r6
   129d0:	e716      	b.n	12800 <__udivdi3+0x8c>
   129d2:	4599      	cmp	r9, r3
   129d4:	d98f      	bls.n	128f6 <__udivdi3+0x182>
   129d6:	f1ac 0c02 	sub.w	ip, ip, #2
   129da:	4423      	add	r3, r4
   129dc:	e78c      	b.n	128f8 <__udivdi3+0x184>
   129de:	45b8      	cmp	r8, r7
   129e0:	d99b      	bls.n	1291a <__udivdi3+0x1a6>
   129e2:	3d02      	subs	r5, #2
   129e4:	4427      	add	r7, r4
   129e6:	e799      	b.n	1291c <__udivdi3+0x1a8>
   129e8:	4603      	mov	r3, r0
   129ea:	e7de      	b.n	129aa <__udivdi3+0x236>
   129ec:	4690      	mov	r8, r2
   129ee:	e7c7      	b.n	12980 <__udivdi3+0x20c>
   129f0:	3802      	subs	r0, #2
   129f2:	4421      	add	r1, r4
   129f4:	e73a      	b.n	1286c <__udivdi3+0xf8>
   129f6:	bf00      	nop

000129f8 <FastLED>:
   129f8:	8d5c 1fff                                   \...

000129fc <_ZL1p>:
   129fc:	a097 5b89 0f5a 0d83 5fc9 3560 e9c2 e107     ...[Z...._`5....
   12a0c:	248c 1e67 8e45 6308 f025 0a15 be17 9406     .$g.E..c%.......
   12a1c:	78f7 4bea 1a00 3ec5 fc5e cbdb 2375 200b     .x.K...>^...u#. 
   12a2c:	b139 5821 95ed 5738 14ae 887d a8ab af44     9.!X..8W..}...D.
   12a3c:	a54a 8647 308b a61b 924d e79e 6f53 7ae5     J.G..0..M...So.z
   12a4c:	d33c e685 69dc 295c 2e37 28f5 66f4 368f     <....i\)7..(.f.6
   12a5c:	1941 a13f d801 4950 4cd1 bb84 59d0 a912     A.?...PI.L...Y..
   12a6c:	c4c8 8287 bc74 569f 64a4 c66d baad 4003     ....t..V.dm....@
   12a7c:	d934 fae2 7b7c ca05 9326 7e76 52ff d455     4...|{..&.v~.RU.
   12a8c:	cecf e33b 102f 113a bdb6 2a1c b7df d5aa     ..;./.:....*....
   12a9c:	f877 0298 9a2c 46a3 99dd 9b65 2ba7 09ac     w...,..F..e..+..
   12aac:	1681 fd27 6213 6e6c 714f e8e0 b9b2 6870     ..'..blnOq....ph
   12abc:	f6da e461 22fb c1f2 d2ee 0c90 b3bf f1a2     ..a.."..........
   12acc:	3351 eb91 0ef9 6bef c031 1fd6 c7b5 9d6a     Q3.....k1.....j.
   12adc:	54b8 b0cc 7973 2d32 047f fe96 ec8a 5dcd     .T..sy2-.......]
   12aec:	72de 1d43 4818 8df3 c380 424e 3dd7 b49c     .rC..H....NB.=..
   12afc:	ffff ffff                                   ....

00012b00 <_ZTV7Perlins>:
	...
   12b08:	06a5 0000 06b1 0000                         ........

00012b10 <_ZTV14CLEDController>:
	...
   12b18:	276f 0000 276f 0000 276f 0000 276f 0000     o'..o'..o'..o'..

00012b28 <_ZTV15P9813ControllerILh6ELh7EL6EOrder10ELh4EE>:
	...
   12b30:	1861 0000 1559 0000 11cd 0000 0ae5 0000     a...Y...........

00012b40 <_ZTV15P9813ControllerILh8ELh9EL6EOrder10ELh4EE>:
	...
   12b48:	1777 0000 145d 0000 10ad 0000 0ab9 0000     w...]...........

00012b58 <_ZTV15P9813ControllerILh10ELh11EL6EOrder10ELh4EE>:
	...
   12b60:	168d 0000 1361 0000 0f95 0000 0a8d 0000     ....a...........
   12b70:	7570 7072 656c 6f00 6172 676e 0065 6877     purple.orange.wh
   12b80:	7469 0065 6f6d 6564 4920 646e 7865 203a     ite.mode Index: 
   12b90:	6425 6320 7275 6572 746e 6d20 646f 3a65     %d current mode:
   12ba0:	2520 0a73 6100 2074 6162 6b63 202c 7473      %s..at back, st
   12bb0:	7261 6974 676e 6f20 6576 0072 ffff ffff     arting over.....

00012bc0 <_ZTV8BaseMode>:
	...
   12bc8:	1969 0000 1975 0000 276f 0000 276f 0000     i...u...o'..o'..

00012bd8 <_ZTV9ColorMode>:
	...
   12be0:	1999 0000 19ad 0000 19c1 0000 1995 0000     ................
   12bf0:	656d 746c ff00 ffff                         melt....

00012bf8 <_ZTV8MeltMode>:
	...
   12c00:	1ac1 0000 1ae1 0000 1af9 0000 1ab9 0000     ................

00012c10 <channel2sc1a>:
   12c10:	0e05 0908 0c0d 0706 040f 1300 9303 921a     ................
   12c20:	c517 8485 8786 ffc4 f06f 037f 7003 7803     ........o....p.x
   12c30:	f013 0f80 d0fb 4770                         ......pG

00012c38 <_ZTV14HardwareSerial>:
	...
   12c40:	23bb 0000 23d3 0000 23a7 0000 23af 0000     .#...#...#...#..
   12c50:	23ab 0000 23b3 0000 2369 0000 237d 0000     .#...#..i#..}#..
   12c60:	239d 0000 23a1 0000 23b7 0000 2339 0000     .#...#...#..9#..
   12c70:	2345 0000 2351 0000 235d 0000 23e3 0000     E#..Q#..]#...#..
   12c80:	23c7 0000 0000 0000                         .#......

00012c88 <_ZTV15HardwareSerial2>:
	...
   12c90:	2495 0000 24ad 0000 2481 0000 2489 0000     .$...$...$...$..
   12ca0:	2485 0000 248d 0000 2449 0000 245d 0000     .$...$..I$..]$..
   12cb0:	247d 0000 23a1 0000 2491 0000 2419 0000     }$...#...$...$..
   12cc0:	2425 0000 2431 0000 243d 0000 24bd 0000     %$..1$..=$...$..
   12cd0:	24a1 0000 0000 0000                         .$......

00012cd8 <_ZTV15HardwareSerial3>:
	...
   12ce0:	256d 0000 2585 0000 2559 0000 2561 0000     m%...%..Y%..a%..
   12cf0:	255d 0000 2565 0000 2521 0000 2535 0000     ]%..e%..!%..5%..
   12d00:	2555 0000 23a1 0000 2569 0000 24f1 0000     U%...#..i%...$..
   12d10:	24fd 0000 2509 0000 2515 0000 2595 0000     .$...%...%...%..
   12d20:	2579 0000 0000 0000                         y%......

00012d28 <_ZTV9IPAddress>:
	...
   12d30:	2697 0000 0000 0000                         .&......

00012d38 <digital_pin_to_info_PGM>:
   12d38:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
   12d48:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
   12d58:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
   12d68:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
   12d78:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
   12d88:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
   12d98:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
   12da8:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
   12db8:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
   12dc8:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
   12dd8:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
   12de8:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
   12df8:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
   12e08:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
   12e18:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
   12e28:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
   12e38:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
   12e48:	0a0d                                        ..

00012e4a <usb_endpoint_config_table>:
   12e4a:	1500 1519 ffff                              ......

00012e50 <usb_descriptor_list>:
   12e50:	0100 0000 841c 1fff 0012 0000 0200 0000     ................
   12e60:	8446 1fff 0043 0000 0300 0000 84a0 1fff     F...C...........
   12e70:	0000 0000 0301 0409 842e 1fff 0000 0000     ................
   12e80:	0302 0409 848a 1fff 0000 0000 0303 0409     ................
   12e90:	84a4 1fff 0000 0000 0000 0000 0000 0000     ................
   12ea0:	0000 0000 ffff ffff                         ........

00012ea8 <_ZTV16usb_serial_class>:
	...
   12eb0:	4121 0000 4127 0000 4111 0000 4115 0000     !A..'A...A...A..
   12ec0:	4119 0000 411d 0000                         .A...A..

00012ec8 <_ZTVSt9bad_alloc>:
   12ec8:	0000 0000 2ee0 0001 44d5 0000 44e9 0000     .........D...D..
   12ed8:	44cd 0000 0000 0000                         .D......

00012ee0 <_ZTISt9bad_alloc>:
   12ee0:	3000 0001 2efc 0001 2f30 0001 7473 3a64     .0......0/..std:
   12ef0:	623a 6461 615f 6c6c 636f ff00               :bad_alloc..

00012efc <_ZTSSt9bad_alloc>:
   12efc:	7453 6239 6461 615f 6c6c 636f 0000 0000     St9bad_alloc....
   12f0c:	ffff ffff                                   ....

00012f10 <_ZTVSt9exception>:
   12f10:	0000 0000 2f30 0001 4969 0000 4991 0000     ....0/..iI...I..
   12f20:	4981 0000 0000 0000                         .I......

00012f28 <_ZTIN10__cxxabiv115__forced_unwindE>:
   12f28:	30a0 0001 2fc8 0001                         .0.../..

00012f30 <_ZTISt9exception>:
   12f30:	30a0 0001 2fb8 0001                         .0.../..

00012f38 <_ZTSSt13bad_exception>:
   12f38:	7453 3331 6162 5f64 7865 6563 7470 6f69     St13bad_exceptio
   12f48:	006e 0000 7473 3a64 653a 6378 7065 6974     n...std::excepti
   12f58:	6e6f 0000 7473 3a64 623a 6461 655f 6378     on..std::bad_exc
   12f68:	7065 6974 6e6f ff00                         eption..

00012f70 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   12f70:	314e 5f30 635f 7878 6261 7669 3131 5f39     N10__cxxabiv119_
   12f80:	665f 726f 6965 6e67 655f 6378 7065 6974     _foreign_excepti
   12f90:	6e6f 0045                                   onE.

00012f94 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   12f94:	30a0 0001 2f70 0001 ffff ffff               .0..p/......

00012fa0 <_ZTVSt13bad_exception>:
   12fa0:	0000 0000 2fe8 0001 4975 0000 49a5 0000     ...../..uI...I..
   12fb0:	4989 0000 0000 0000                         .I......

00012fb8 <_ZTSSt9exception>:
   12fb8:	7453 6539 6378 7065 6974 6e6f 0000 0000     St9exception....

00012fc8 <_ZTSN10__cxxabiv115__forced_unwindE>:
   12fc8:	314e 5f30 635f 7878 6261 7669 3131 5f35     N10__cxxabiv115_
   12fd8:	665f 726f 6563 5f64 6e75 6977 646e 0045     _forced_unwindE.

00012fe8 <_ZTISt13bad_exception>:
   12fe8:	3000 0001 2f38 0001 2f30 0001 ffff ffff     .0..8/..0/......

00012ff8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   12ff8:	0000 0000 3028 0001 512d 0000 5141 0000     ....(0..-Q..AQ..
   13008:	5255 0000 5259 0000 5335 0000 52a9 0000     UR..YR..5S...R..
   13018:	5229 0000 5191 0000 515d 0000 0000 0000     )R...Q..]Q......

00013028 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   13028:	3000 0001 3034 0001 30c8 0001               .0..40...0..

00013034 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   13034:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   13044:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   13054:	666e 456f 0000 0000                         nfoE....

0001305c <_ZTISt9type_info>:
   1305c:	30a0 0001 3064 0001                         .0..d0..

00013064 <_ZTSSt9type_info>:
   13064:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   13074:	ffff ffff                                   ....

00013078 <_ZTVSt9type_info>:
   13078:	0000 0000 305c 0001 5249 0000 5261 0000     ....\0..IR..aR..
   13088:	5255 0000 5259 0000 52a5 0000 525d 0000     UR..YR...R..]R..

00013098 <_ZTVN10__cxxabiv117__class_type_infoE>:
   13098:	0000 0000 30c8 0001 52ed 0000 5301 0000     .....0...R...S..
   130a8:	5255 0000 5259 0000 5335 0000 52a9 0000     UR..YR..5S...R..
   130b8:	531d 0000 5359 0000 52e1 0000 0000 0000     .S..YS...R......

000130c8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   130c8:	3000 0001 30d4 0001 305c 0001               .0...0..\0..

000130d4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   130d4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   130e4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   130f4:	0045 0000 6574 6d72 6e69 7461 2065 6163     E...terminate ca
   13104:	6c6c 6465 7220 6365 7275 6973 6576 796c     lled recursively
   13114:	000a 0000 6574 6d72 6e69 7461 2065 6163     ....terminate ca
   13124:	6c6c 6465 6120 7466 7265 7420 7268 776f     lled after throw
   13134:	6e69 2067 6e61 6920 736e 6174 636e 2065     ing an instance 
   13144:	666f 2720 0000 0000 0a27 0000 6574 6d72     of '....'...term
   13154:	6e69 7461 2065 6163 6c6c 6465 7720 7469     inate called wit
   13164:	6f68 7475 6120 206e 6361 6974 6576 6520     hout an active e
   13174:	6378 7065 6974 6e6f 000a 0000 2020 6877     xception....  wh
   13184:	7461 2928 203a 0020                         at():  .

0001318c <standard_subs>:
   1318c:	0074 0000 38f8 0001 0003 0000 38f8 0001     t....8.......8..
   1319c:	0003 0000 0000 0000 0000 0000 0061 0000     ............a...
   131ac:	3be4 0001 000e 0000 3be4 0001 000e 0000     .;.......;......
   131bc:	3bf4 0001 0009 0000 0062 0000 3c00 0001     .;......b....<..
   131cc:	0011 0000 3c00 0001 0011 0000 3c14 0001     .....<.......<..
   131dc:	000c 0000 0073 0000 3c24 0001 000b 0000     ....s...$<......
   131ec:	3c30 0001 0046 0000 3c14 0001 000c 0000     0<..F....<......
   131fc:	0069 0000 3c78 0001 000c 0000 3c88 0001     i...x<.......<..
   1320c:	0031 0000 3cbc 0001 000d 0000 006f 0000     1....<......o...
   1321c:	3ccc 0001 000c 0000 3cdc 0001 0031 0000     .<.......<..1...
   1322c:	3d10 0001 000d 0000 0064 0000 3d20 0001     .=......d... =..
   1323c:	000d 0000 3d30 0001 0032 0000 3d64 0001     ....0=..2...d=..
   1324c:	000e 0000                                   ....

00013250 <cplus_demangle_builtin_types>:
   13250:	3f5c 0001 000b 0000 3f5c 0001 000b 0000     \?......\?......
   13260:	0000 0000 3f68 0001 0004 0000 3f70 0001     ....h?......p?..
   13270:	0007 0000 0007 0000 3f78 0001 0004 0000     ........x?......
   13280:	3f80 0001 0004 0000 0000 0000 3f88 0001     .?...........?..
   13290:	0006 0000 3f88 0001 0006 0000 0008 0000     .....?..........
   132a0:	3f90 0001 000b 0000 3f90 0001 000b 0000     .?.......?......
   132b0:	0008 0000 3f9c 0001 0005 0000 3f9c 0001     .....?.......?..
   132c0:	0005 0000 0008 0000 3fa4 0001 000a 0000     .........?......
   132d0:	3fa4 0001 000a 0000 0008 0000 3fb0 0001     .?...........?..
   132e0:	000d 0000 3fb0 0001 000d 0000 0000 0000     .....?..........
   132f0:	3fc0 0001 0003 0000 3fc0 0001 0003 0000     .?.......?......
   13300:	0001 0000 3fc4 0001 000c 0000 3fd4 0001     .....?.......?..
   13310:	0008 0000 0002 0000 0000 0000 0000 0000     ................
	...
   1332c:	3fe0 0001 0004 0000 3fe0 0001 0004 0000     .?.......?......
   1333c:	0003 0000 3fe8 0001 000d 0000 3fe8 0001     .....?.......?..
   1334c:	000d 0000 0004 0000 3ff8 0001 0008 0000     .........?......
   1335c:	3ff8 0001 0008 0000 0000 0000 4004 0001     .?...........@..
   1336c:	0011 0000 4004 0001 0011 0000 0000 0000     .....@..........
	...
   133b8:	4018 0001 0005 0000 4018 0001 0005 0000     .@.......@......
   133c8:	0000 0000 4020 0001 000e 0000 4020 0001     .... @...... @..
   133d8:	000e 0000 0000 0000 0000 0000 0000 0000     ................
	...
   133f4:	4030 0001 0004 0000 4030 0001 0004 0000     0@......0@......
   13404:	0009 0000 4038 0001 0007 0000 3f78 0001     ....8@......x?..
   13414:	0004 0000 0000 0000 4040 0001 0009 0000     ........@@......
   13424:	3fe0 0001 0004 0000 0005 0000 404c 0001     .?..........L@..
   13434:	0012 0000 404c 0001 0012 0000 0006 0000     ....L@..........
   13444:	3b14 0001 0003 0000 3b14 0001 0003 0000     .;.......;......
   13454:	0000 0000 4060 0001 0009 0000 4060 0001     ....`@......`@..
   13464:	0009 0000 0000 0000 406c 0001 0009 0000     ........l@......
   13474:	406c 0001 0009 0000 0000 0000 4078 0001     l@..........x@..
   13484:	000a 0000 4078 0001 000a 0000 0000 0000     ....x@..........
   13494:	4084 0001 0004 0000 4084 0001 0004 0000     .@.......@......
   134a4:	0008 0000 408c 0001 0008 0000 408c 0001     .....@.......@..
   134b4:	0008 0000 0000 0000 4098 0001 0008 0000     .........@......
   134c4:	4098 0001 0008 0000 0000 0000 40a4 0001     .@...........@..
   134d4:	0011 0000 40a4 0001 0011 0000 0000 0000     .....@..........

000134e4 <cplus_demangle_operators>:
   134e4:	3d74 0001 3d78 0001 0002 0000 0002 0000     t=..x=..........
   134f4:	3d7c 0001 3d80 0001 0001 0000 0002 0000     |=...=..........
   13504:	3d84 0001 3bb8 0001 0002 0000 0002 0000     .=...;..........
   13514:	3ac4 0001 3d88 0001 0001 0000 0001 0000     .:...=..........
   13524:	3d8c 0001 3d88 0001 0001 0000 0002 0000     .=...=..........
   13534:	3d90 0001 3d94 0001 0008 0000 0001 0000     .=...=..........
   13544:	3da0 0001 3d94 0001 0008 0000 0001 0000     .=...=..........
   13554:	3da4 0001 3da8 0001 000a 0000 0002 0000     .=...=..........
   13564:	3908 0001 3db4 0001 0002 0000 0002 0000     .9...=..........
   13574:	3db8 0001 3dbc 0001 0001 0000 0002 0000     .=...=..........
   13584:	3dc0 0001 3dc4 0001 0001 0000 0001 0000     .=...=..........
   13594:	3dc8 0001 3dcc 0001 0002 0000 0002 0000     .=...=..........
   135a4:	3dd0 0001 3dd4 0001 0009 0000 0001 0000     .=...=..........
   135b4:	3de0 0001 3de4 0001 000c 0000 0002 0000     .=...=..........
   135c4:	3df4 0001 3df8 0001 0001 0000 0001 0000     .=...=..........
   135d4:	3dfc 0001 3e00 0001 0007 0000 0001 0000     .=...>..........
   135e4:	3e08 0001 3e0c 0001 0002 0000 0002 0000     .>...>..........
   135f4:	390c 0001 3e10 0001 0001 0000 0002 0000     .9...>..........
   13604:	3e14 0001 3e18 0001 0001 0000 0002 0000     .>...>..........
   13614:	3e1c 0001 3e20 0001 0002 0000 0002 0000     .>.. >..........
   13624:	3e24 0001 3e28 0001 0001 0000 0002 0000     $>..(>..........
   13634:	3e2c 0001 3e30 0001 0002 0000 0002 0000     ,>..0>..........
   13644:	3e34 0001 3e38 0001 0002 0000 0002 0000     4>..8>..........
   13654:	3ac8 0001 3920 0001 0002 0000 0001 0000     .:.. 9..........
   13664:	3e3c 0001 3cb8 0001 0001 0000 0002 0000     <>...<..........
   13674:	3acc 0001 3944 0001 0002 0000 0002 0000     .:..D9..........
   13684:	3e40 0001 3e44 0001 0003 0000 0002 0000     @>..D>..........
   13694:	3f8c 0001 3e48 0001 0002 0000 0002 0000     .?..H>..........
   136a4:	3904 0001 3e4c 0001 000b 0000 0001 0000     .9..L>..........
   136b4:	3e58 0001 3e5c 0001 0002 0000 0002 0000     X>..\>..........
   136c4:	3e60 0001 3e64 0001 0001 0000 0002 0000     `>..d>..........
   136d4:	3e68 0001 3e6c 0001 0002 0000 0002 0000     h>..l>..........
   136e4:	3e70 0001 3e74 0001 0002 0000 0002 0000     p>..t>..........
   136f4:	3e78 0001 3e7c 0001 0001 0000 0002 0000     x>..|>..........
   13704:	3e80 0001 3df8 0001 0001 0000 0002 0000     .>...=..........
   13714:	3e84 0001 3e88 0001 0002 0000 0001 0000     .>...>..........
   13724:	3e8c 0001 3e90 0001 0005 0000 0003 0000     .>...>..........
   13734:	3e98 0001 3e9c 0001 0002 0000 0002 0000     .>...>..........
   13744:	405c 0001 3e7c 0001 0001 0000 0001 0000     \@..|>..........
   13754:	3ea0 0001 3ea4 0001 0001 0000 0001 0000     .>...>..........
   13764:	3ea8 0001 3eac 0001 0003 0000 0003 0000     .>...>..........
   13774:	3eb0 0001 3eb4 0001 0002 0000 0002 0000     .>...>..........
   13784:	3eb8 0001 3ebc 0001 0002 0000 0002 0000     .>...>..........
   13794:	3bf0 0001 3ec0 0001 0001 0000 0002 0000     .;...>..........
   137a4:	3ec4 0001 3ec8 0001 0002 0000 0002 0000     .>...>..........
   137b4:	3ecc 0001 3ed0 0001 0001 0000 0002 0000     .>...>..........
   137c4:	3ed4 0001 3ed8 0001 0003 0000 0002 0000     .>...>..........
   137d4:	3edc 0001 3ee0 0001 0002 0000 0001 0000     .>...>..........
   137e4:	3ee4 0001 3ed0 0001 0001 0000 0001 0000     .>...>..........
   137f4:	3910 0001 3ee8 0001 0002 0000 0002 0000     .9...>..........
   13804:	3914 0001 3eec 0001 0001 0000 0003 0000     .9...>..........
   13814:	3ef0 0001 3ef4 0001 0002 0000 0002 0000     .>...>..........
   13824:	3ef8 0001 3efc 0001 0003 0000 0002 0000     .>...>..........
   13834:	3f00 0001 3f04 0001 0010 0000 0002 0000     .?...?..........
   13844:	3f18 0001 3f1c 0001 0001 0000 0002 0000     .?...?..........
   13854:	3f20 0001 3f24 0001 0002 0000 0002 0000      ?..$?..........
   13864:	3f28 0001 3f2c 0001 000b 0000 0002 0000     (?..,?..........
   13874:	3db0 0001 3f38 0001 0007 0000 0001 0000     .=..8?..........
   13884:	3f40 0001 3f38 0001 0007 0000 0001 0000     @?..8?..........
   13894:	3f44 0001 3f48 0001 0005 0000 0000 0000     D?..H?..........
   138a4:	3f50 0001 3f54 0001 0006 0000 0001 0000     P?..T?..........
	...
   138c4:	475f 4f4c 4142 5f4c 0000 0000 6128 6f6e     _GLOBAL_....(ano
   138d4:	796e 6f6d 7375 6e20 6d61 7365 6170 6563     nymous namespace
   138e4:	0029 0000 7473 6972 676e 6c20 7469 7265     )...string liter
   138f4:	6c61 0000 7473 0064 7561 6f74 0000 0000     al..std.auto....
   13904:	696c 0000 6c63 0000 7464 0000 7470 0000     li..cl..dt..pt..
   13914:	7571 0000 615b 6962 003a 0000 3a3a 0000     qu..[abi:...::..
   13924:	647b 6665 7561 746c 6120 6772 0023 0000     {default arg#...
   13934:	6c25 0064 3a7d 003a 414a 7272 7961 0000     %ld.}::.JArray..
   13944:	5d5b 0000 7476 6261 656c 6620 726f 0020     []..vtable for .
   13954:	5456 2054 6f66 2072 0000 0000 6f63 736e     VTT for ....cons
   13964:	7274 6375 6974 6e6f 7620 6174 6c62 2065     truction vtable 
   13974:	6f66 2072 0000 0000 692d 2d6e 0000 0000     for ....-in-....
   13984:	7974 6570 6e69 6f66 6620 726f 0020 0000     typeinfo for ...
   13994:	7974 6570 6e69 6f66 6e20 6d61 2065 6f66     typeinfo name fo
   139a4:	2072 0000 7974 6570 6e69 6f66 6620 206e     r ..typeinfo fn 
   139b4:	6f66 2072 0000 0000 6f6e 2d6e 6976 7472     for ....non-virt
   139c4:	6175 206c 6874 6e75 206b 6f74 0020 0000     ual thunk to ...
   139d4:	6f63 6176 6972 6e61 2074 6572 7574 6e72     covariant return
   139e4:	7420 7568 6b6e 7420 206f 0000 616a 6176      thunk to ..java
   139f4:	4320 616c 7373 6620 726f 0020 7567 7261      Class for .guar
   13a04:	2064 6176 6972 6261 656c 6620 726f 0020     d variable for .
   13a14:	4c54 2053 6e69 7469 6620 6e75 7463 6f69     TLS init functio
   13a24:	206e 6f66 2072 0000 4c54 2053 7277 7061     n for ..TLS wrap
   13a34:	6570 2072 7566 636e 6974 6e6f 6620 726f     per function for
   13a44:	0020 0000 6572 6566 6572 636e 2065 6574      ...reference te
   13a54:	706d 726f 7261 2079 0023 0000 6968 6464     mporary #...hidd
   13a64:	6e65 6120 696c 7361 6620 726f 0020 0000     en alias for ...
   13a74:	6f6e 2d6e 7274 6e61 6173 7463 6f69 206e     non-transaction 
   13a84:	6c63 6e6f 2065 6f66 2072 0000 535f 7461     clone for .._Sat
   13a94:	0020 0000 415f 6363 6d75 0000 465f 6172      ..._Accum.._Fra
   13aa4:	7463 0000 202c 0000 706f 7265 7461 726f     ct.., ..operator
   13ab4:	0000 0000 706f 7265 7461 726f 0020 0000     ....operator ...
   13ac4:	6461 0000 7367 0000 7869 0000 3a20 0020     ad..gs..ix.. : .
   13ad4:	656e 2077 0000 0000 6c75 0000 6c6c 0000     new ....ul..ll..
   13ae4:	6c75 006c 6166 736c 0065 0000 7274 6575     ull.false...true
   13af4:	0000 0000 616a 6176 7220 7365 756f 6372     ....java resourc
   13b04:	2065 0000 6564 6c63 7974 6570 2820 0000     e ..decltype (..
   13b14:	2e2e 002e 6874 7369 0000 0000 707b 7261     ....this....{par
   13b24:	236d 0000 6c67 626f 6c61 6320 6e6f 7473     m#..global const
   13b34:	7572 7463 726f 2073 656b 6579 2064 6f74     ructors keyed to
   13b44:	0020 0000 6c67 626f 6c61 6420 7365 7274      ...global destr
   13b54:	6375 6f74 7372 6b20 7965 6465 7420 206f     uctors keyed to 
   13b64:	0000 0000 6c7b 6d61 6462 2861 0000 0000     ....{lambda(....
   13b74:	2329 0000 757b 6e6e 6d61 6465 7420 7079     )#..{unnamed typ
   13b84:	2365 0000 5b20 6c63 6e6f 2065 0000 0000     e#.. [clone ....
   13b94:	283e 0000 7220 7365 7274 6369 0074 0000     >(.. restrict...
   13ba4:	7620 6c6f 7461 6c69 0065 0000 6320 6e6f      volatile... con
   13bb4:	7473 0000 2626 0000 6f63 706d 656c 2078     st..&&..complex 
   13bc4:	0000 0000 6d69 6761 6e69 7261 2079 0000     ....imaginary ..
   13bd4:	3a3a 002a 5f20 765f 6365 6f74 2872 0000     ::*. __vector(..
   13be4:	7473 3a64 613a 6c6c 636f 7461 726f 0000     std::allocator..
   13bf4:	6c61 6f6c 6163 6f74 0072 0000 7473 3a64     allocator...std:
   13c04:	623a 7361 6369 735f 7274 6e69 0067 0000     :basic_string...
   13c14:	6162 6973 5f63 7473 6972 676e 0000 0000     basic_string....
   13c24:	7473 3a64 733a 7274 6e69 0067 7473 3a64     std::string.std:
   13c34:	623a 7361 6369 735f 7274 6e69 3c67 6863     :basic_string<ch
   13c44:	7261 202c 7473 3a64 633a 6168 5f72 7274     ar, std::char_tr
   13c54:	6961 7374 633c 6168 3e72 202c 7473 3a64     aits<char>, std:
   13c64:	613a 6c6c 636f 7461 726f 633c 6168 3e72     :allocator<char>
   13c74:	3e20 0000 7473 3a64 693a 7473 6572 6d61      >..std::istream
   13c84:	0000 0000 7473 3a64 623a 7361 6369 695f     ....std::basic_i
   13c94:	7473 6572 6d61 633c 6168 2c72 7320 6474     stream<char, std
   13ca4:	3a3a 6863 7261 745f 6172 7469 3c73 6863     ::char_traits<ch
   13cb4:	7261 203e 003e 0000 6162 6973 5f63 7369     ar> >...basic_is
   13cc4:	7274 6165 006d 0000 7473 3a64 6f3a 7473     tream...std::ost
   13cd4:	6572 6d61 0000 0000 7473 3a64 623a 7361     ream....std::bas
   13ce4:	6369 6f5f 7473 6572 6d61 633c 6168 2c72     ic_ostream<char,
   13cf4:	7320 6474 3a3a 6863 7261 745f 6172 7469      std::char_trait
   13d04:	3c73 6863 7261 203e 003e 0000 6162 6973     s<char> >...basi
   13d14:	5f63 736f 7274 6165 006d 0000 7473 3a64     c_ostream...std:
   13d24:	693a 736f 7274 6165 006d 0000 7473 3a64     :iostream...std:
   13d34:	623a 7361 6369 695f 736f 7274 6165 3c6d     :basic_iostream<
   13d44:	6863 7261 202c 7473 3a64 633a 6168 5f72     char, std::char_
   13d54:	7274 6961 7374 633c 6168 3e72 3e20 0000     traits<char> >..
   13d64:	6162 6973 5f63 6f69 7473 6572 6d61 0000     basic_iostream..
   13d74:	4e61 0000 3d26 0000 5361 0000 003d 0000     aN..&=..aS..=...
   13d84:	6161 0000 0026 0000 6e61 0000 7461 0000     aa..&...an..at..
   13d94:	6c61 6769 6f6e 2066 0000 0000 7a61 0000     alignof ....az..
   13da4:	6363 0000 6f63 736e 5f74 6163 7473 0000     cc..const_cast..
   13db4:	2928 0000 6d63 0000 002c 0000 6f63 0000     ()..cm..,...co..
   13dc4:	007e 0000 5664 0000 3d2f 0000 6164 0000     ~...dV../=..da..
   13dd4:	6564 656c 6574 5d5b 0020 0000 6364 0000     delete[] ...dc..
   13de4:	7964 616e 696d 5f63 6163 7473 0000 0000     dynamic_cast....
   13df4:	6564 0000 002a 0000 6c64 0000 6564 656c     de..*...dl..dele
   13e04:	6574 0020 7364 0000 2a2e 0000 002e 0000     te .ds...*......
   13e14:	7664 0000 002f 0000 4f65 0000 3d5e 0000     dv../...eO..^=..
   13e24:	6f65 0000 005e 0000 7165 0000 3d3d 0000     eo..^...eq..==..
   13e34:	6567 0000 3d3e 0000 7467 0000 536c 0000     ge..>=..gt..lS..
   13e44:	3c3c 003d 3d3c 0000 706f 7265 7461 726f     <<=.<=..operator
   13e54:	2222 0020 736c 0000 3c3c 0000 746c 0000     "" .ls..<<..lt..
   13e64:	003c 0000 496d 0000 3d2d 0000 4c6d 0000     <...mI..-=..mL..
   13e74:	3d2a 0000 696d 0000 002d 0000 6c6d 0000     *=..mi..-...ml..
   13e84:	6d6d 0000 2d2d 0000 616e 0000 656e 5b77     mm..--..na..new[
   13e94:	005d 0000 656e 0000 3d21 0000 746e 0000     ]...ne..!=..nt..
   13ea4:	0021 0000 776e 0000 656e 0077 526f 0000     !...nw..new.oR..
   13eb4:	3d7c 0000 6f6f 0000 7c7c 0000 007c 0000     |=..oo..||..|...
   13ec4:	4c70 0000 3d2b 0000 6c70 0000 002b 0000     pL..+=..pl..+...
   13ed4:	6d70 0000 3e2d 002a 7070 0000 2b2b 0000     pm..->*.pp..++..
   13ee4:	7370 0000 3e2d 0000 003f 0000 4d72 0000     ps..->..?...rM..
   13ef4:	3d25 0000 5372 0000 3e3e 003d 6372 0000     %=..rS..>>=.rc..
   13f04:	6572 6e69 6574 7072 6572 5f74 6163 7473     reinterpret_cast
   13f14:	0000 0000 6d72 0000 0025 0000 7372 0000     ....rm..%...rs..
   13f24:	3e3e 0000 6373 0000 7473 7461 6369 635f     >>..sc..static_c
   13f34:	7361 0074 6973 657a 666f 0020 7a73 0000     ast.sizeof .sz..
   13f44:	7274 0000 6874 6f72 0077 0000 7774 0000     tr..throw...tw..
   13f54:	6874 6f72 2077 0000 6973 6e67 6465 6320     throw ..signed c
   13f64:	6168 0072 6f62 6c6f 0000 0000 6f62 6c6f     har.bool....bool
   13f74:	6165 006e 6863 7261 0000 0000 7962 6574     ean.char....byte
   13f84:	0000 0000 6f64 6275 656c 0000 6f6c 676e     ....double..long
   13f94:	6420 756f 6c62 0065 6c66 616f 0074 0000      double.float...
   13fa4:	5f5f 6c66 616f 3174 3832 0000 6e75 6973     __float128..unsi
   13fb4:	6e67 6465 6320 6168 0072 0000 6e69 0074     gned char...int.
   13fc4:	6e75 6973 6e67 6465 6920 746e 0000 0000     unsigned int....
   13fd4:	6e75 6973 6e67 6465 0000 0000 6f6c 676e     unsigned....long
   13fe4:	0000 0000 6e75 6973 6e67 6465 6c20 6e6f     ....unsigned lon
   13ff4:	0067 0000 5f5f 6e69 3174 3832 0000 0000     g...__int128....
   14004:	6e75 6973 6e67 6465 5f20 695f 746e 3231     unsigned __int12
   14014:	0038 0000 6873 726f 0074 0000 6e75 6973     8...short...unsi
   14024:	6e67 6465 7320 6f68 7472 0000 6f76 6469     gned short..void
   14034:	0000 0000 6377 6168 5f72 0074 6f6c 676e     ....wchar_t.long
   14044:	6c20 6e6f 0067 0000 6e75 6973 6e67 6465      long...unsigned
   14054:	6c20 6e6f 2067 6f6c 676e 0000 6564 6963      long long..deci
   14064:	616d 336c 0032 0000 6564 6963 616d 366c     mal32...decimal6
   14074:	0034 0000 6564 6963 616d 316c 3832 0000     4...decimal128..
   14084:	6168 666c 0000 0000 6863 7261 3631 745f     half....char16_t
   14094:	0000 0000 6863 7261 3233 745f 0000 0000     ....char32_t....
   140a4:	6564 6c63 7974 6570 6e28 6c75 706c 7274     decltype(nullptr
   140b4:	0029 ffff                                   )...

000140b8 <npio2_hw>:
   140b8:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   140c8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   140d8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   140e8:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   140f8:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   14108:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   14118:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   14128:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

00014138 <two_over_pi>:
   14138:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   14148:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   14158:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   14168:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   14178:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   14188:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   14198:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   141a8:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   141b8:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   141c8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   141d8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   141e8:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   141f8:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   14208:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   14218:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   14228:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   14238:	e27b 0060 8c6b 00c0                         {.`.k...

00014240 <init_jk>:
   14240:	0002 0000 0003 0000 0004 0000 0006 0000     ................

00014250 <PIo2>:
   14250:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   14260:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   14270:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   14280:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5
   14290:	0043 ffff                                   C...

00014294 <_global_impure_ptr>:
   14294:	84c8 1fff                                   ....

00014298 <zeroes.6763>:
   14298:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   142a8:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
   142b8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   142c8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   142d8:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
   142e8:	0030 ffff                                   0...

000142ec <blanks.6762>:
   142ec:	2020 2020 2020 2020 2020 2020 2020 2020                     
   142fc:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   1430c:	4f50 4953 0058 0000 ffff ffff               POSIX.......

00014318 <__mprec_tens>:
   14318:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   14328:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   14338:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   14348:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   14358:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   14368:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   14378:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   14388:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   14398:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   143a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   143b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   143c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   143d8:	9db4 79d9 7843 44ea                         ...yCx.D

000143e0 <__mprec_bigtens>:
   143e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   143f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   14400:	bf3c 7f73 4fdd 7515                         <.s..O.u

00014408 <p05.5269>:
   14408:	0005 0000 0019 0000 007d 0000               ........}...

00014414 <_init>:
   14414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14416:	bf00      	nop
   14418:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1441a:	bc08      	pop	{r3}
   1441c:	469e      	mov	lr, r3
   1441e:	4770      	bx	lr

00014420 <__init_array_start>:
   14420:	000104f9 	.word	0x000104f9

00014424 <__frame_dummy_init_array_entry>:
   14424:	00000435 000004f1 0000194d 000023fd     5.......M....#..
   14434:	000024d5 000025ad 000026d9 00003865     .$...%...&..e8..
   14444:	00004131                                1A..

Disassembly of section .fini:

00014448 <_fini>:
   14448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1444a:	bf00      	nop
