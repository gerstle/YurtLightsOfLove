
main.elf:     file format elf32-littlearm
main.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
0x70000001 off    0x0001c314 vaddr 0x00014314 paddr 0x00014314 align 2**2
         filesz 0x000001b8 memsz 0x000001b8 flags r--
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x000145fc memsz 0x000145fc flags r-x
    LOAD off    0x00020400 vaddr 0x1fff8400 paddr 0x000145fc align 2**15
         filesz 0x0000093c memsz 0x0000093c flags rw-
    LOAD off    0x00020d40 vaddr 0x1fff8d40 paddr 0x00014f40 align 2**15
         filesz 0x00000000 memsz 0x00000f54 flags rw-
    LOAD off    0x00028000 vaddr 0x1fff8000 paddr 0x1fff8000 align 2**15
         filesz 0x00000000 memsz 0x00000400 flags rw-
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014310  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fini         00000004  00014310  00014310  0001c310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    000001b8  00014314  00014314  0001c314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000130  000144cc  000144cc  0001c4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .usbdescriptortable 000000a0  1fff8000  1fff8000  00028000  2**2
                  ALLOC
  5 .usbbuffers   00000360  1fff80a0  1fff80a0  00028000  2**0
                  ALLOC
  6 .data         0000093c  1fff8400  000145fc  00020400  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f54  1fff8d40  00014f40  00020d40  2**3
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020d3c  2**0
                  CONTENTS, READONLY
  9 .comment      00000070  00000000  00000000  00020d66  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027f1a  00000000  00000000  00020dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006436  00000000  00000000  00048cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000092b4  00000000  00000000  0004f126  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dc8  00000000  00000000  000583da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001be0  00000000  00000000  000591a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000650c  00000000  00000000  0005ad82  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000df15  00000000  00000000  0006128e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000041dc  00000000  00000000  0006f1a4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00014310 l    d  .fini	00000000 .fini
00014314 l    d  .ARM.exidx	00000000 .ARM.exidx
000144cc l    d  .ARM.extab	00000000 .ARM.extab
1fff8000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff80a0 l    d  .usbbuffers	00000000 .usbbuffers
1fff8400 l    d  .data	00000000 .data
1fff8d40 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00002604 l     F .text	0000000c startup_default_early_hook
00002610 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff8d40 l       .bss	00000000 completed.7863
00000434 l     F .text	00000000 frame_dummy
1fff8d44 l       .bss	00000000 object.7868
000142ec l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 FastLED.cpp
000004f0 l     F .text	0000000c _GLOBAL__sub_I_LEDS
00000000 l    df *ABS*	00000000 hsv2rgb.cpp
000004fc l     F .text	0000003a _ZL15nscale8x3_videoRhS_S_h
00000000 l    df *ABS*	00000000 Perlins.cpp
000128c4 l     O .text	00000100 _ZL1p
00000000 l    df *ABS*	00000000 main.cpp
00001090 l     F .text	0000001c _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.26
000011b0 l     F .text	0000001c _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.29
000012c8 l     F .text	0000001c _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.31
00001968 l     F .text	0000001c _GLOBAL__sub_I_modeChange
1fff90b8 l     O .bss	00000001 _ZZ4mainE6reboot
00000000 l    df *ABS*	00000000 BaseMode.cpp
00000000 l    df *ABS*	00000000 ColorMode.cpp
00000000 l    df *ABS*	00000000 MeltMode.cpp
00001ad8 l     F .text	0000001c _ZL8random16v
00000000 l    df *ABS*	00000000 analog.c
00001f0c l     F .text	000000e4 wait_for_cal
00012ae8 l     O .text	00000017 channel2sc1a
1fff90c1 l     O .bss	00000001 analog_right_shift
1fff90c2 l     O .bss	00000001 calibrating
1fff8414 l     O .data	00000001 analog_config_bits
1fff90c3 l     O .bss	00000001 analogReadBusyADC1
1fff90c4 l     O .bss	00000001 analogReadBusyADC0
1fff90c5 l     O .bss	00000001 analog_reference_internal
1fff8415 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
000022c0 l     F .text	0000001c _GLOBAL__sub_I_Serial1
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00002398 l     F .text	0000001c _GLOBAL__sub_I_Serial2
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00002470 l     F .text	0000001c _GLOBAL__sub_I_Serial3
00000000 l    df *ABS*	00000000 IntervalTimer.cpp
00000000 l    df *ABS*	00000000 IPAddress.cpp
0000259c l     F .text	0000001c _GLOBAL__sub_I__ZN9IPAddressC2Ev
1fff9118 l     O .bss	00000008 _ZL11INADDR_NONE
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pins_teensy.c
1fff9120 l     O .bss	00000088 intFunc
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 serial1.c
1fff91ac l     O .bss	00000001 transmitting
1fff91ad l     O .bss	00000001 rx_buffer_tail
1fff91ae l     O .bss	00000040 tx_buffer
1fff91ee l     O .bss	00000040 rx_buffer
1fff922e l     O .bss	00000001 rx_buffer_head
1fff922f l     O .bss	00000001 tx_buffer_tail
1fff9230 l     O .bss	00000004 transmit_pin
1fff9234 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff9235 l     O .bss	00000001 transmitting
1fff9236 l     O .bss	00000001 rx_buffer_tail
1fff9237 l     O .bss	00000028 tx_buffer
1fff925f l     O .bss	00000040 rx_buffer
1fff929f l     O .bss	00000001 rx_buffer_head
1fff92a0 l     O .bss	00000001 tx_buffer_tail
1fff92a1 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial3.c
1fff92a2 l     O .bss	00000001 transmitting
1fff92a3 l     O .bss	00000001 rx_buffer_tail
1fff92a4 l     O .bss	00000028 tx_buffer
1fff92cc l     O .bss	00000040 rx_buffer
1fff930c l     O .bss	00000001 rx_buffer_head
1fff930d l     O .bss	00000001 tx_buffer_tail
1fff930e l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 Tone.cpp
00003728 l     F .text	0000001c _GLOBAL__sub_I_tone_timer
00000000 l    df *ABS*	00000000 usb_desc.c
1fff841c l     O .data	00000012 device_descriptor
1fff8446 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 usb_dev.c
000037b4 l     F .text	00000040 endpoint0_transmit
1fff9324 l     O .bss	00000004 ep0_tx_ptr
1fff9328 l     O .bss	00000010 rx_last
1fff9338 l     O .bss	00000004 tx_state
1fff933c l     O .bss	00000040 ep0_rx0_buf
1fff937c l     O .bss	00000010 rx_first
1fff938c l     O .bss	00000001 ep0_tx_bdt_bank
1fff9390 l     O .bss	00000040 ep0_rx1_buf
1fff93d0 l     O .bss	00000010 tx_first
1fff8000 l     O .usbdescriptortable	000000a0 table
1fff93e0 l     O .bss	00000010 tx_last
1fff93f0 l     O .bss	00000008 setup
1fff93f8 l     O .bss	00000002 ep0_tx_len
1fff93fb l     O .bss	00000008 reply_buffer
1fff9404 l     O .bss	00000001 ep0_tx_data_toggle
00000000 l    df *ABS*	00000000 usb_inst.cpp
00003ff4 l     F .text	0000001c _GLOBAL__sub_I_Serial
00000000 l    df *ABS*	00000000 usb_mem.c
1fff84bc l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_serial.c
1fff9419 l     O .bss	00000001 tx_noautoflush
1fff941c l     O .bss	00000004 tx_packet
1fff9420 l     O .bss	00000001 transmit_previous_timeout
1fff9424 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 WMath.cpp
1fff942c l     O .bss	00000004 _ZL4seed
00000000 l    df *ABS*	00000000 yield.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
1fff9430 l     O .bss	00000004 _ZL14emergency_used
1fff9438 l     O .bss	00000800 _ZL16emergency_buffer
00000000 l    df *ABS*	00000000 eh_arm.cc
00000000 l    df *ABS*	00000000 eh_call.cc
000045e0 l     F .text	0000003a _ZN10__cxxabiv1L24__is_gxx_exception_classEPc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
1fff9c38 l     O .bss	0000000c _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_personality.cc
0000488c l     F .text	00000032 _ZL12read_sleb128PKhPl
000048c0 l     F .text	000000b0 _ZL28read_encoded_value_with_basehjPKhPj
00004970 l     F .text	0000004a _ZL21base_of_encoded_valuehP15_Unwind_Context
000049bc l     F .text	00000096 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00004eac l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 vterminate.cc
1fff9c48 l     O .bss	00000001 _ZZN9__gnu_cxx27__verbose_terminate_handlerEvE11terminating
00000000 l    df *ABS*	00000000 cp-demangle.c
00005370 l     F .text	00000096 d_make_comp
00005408 l     F .text	00000032 d_make_name
0000543c l     F .text	000000b2 d_cv_qualifiers
000054f0 l     F .text	00000038 d_ref_qualifier
00005528 l     F .text	00000086 d_clone_suffix
000055b0 l     F .text	00000154 d_substitution
00005704 l     F .text	00000046 d_append_char
0000574c l     F .text	0000004c d_number.isra.0
00005798 l     F .text	00000038 d_number_component
000057d0 l     F .text	00000030 d_compact_number
00005800 l     F .text	00000044 d_template_param
00005844 l     F .text	0000001e d_discriminator
00005864 l     F .text	00000084 d_source_name
000058e8 l     F .text	00000054 d_call_offset
0000593c l     F .text	00000044 d_lookup_template_argument.isra.6
00005980 l     F .text	00000086 d_find_pack
00005a08 l     F .text	0000007c d_growable_string_callback_adapter
00005a84 l     F .text	000000cc d_expr_primary
00006698 l     F .text	0000065e d_encoding
00005ecc l     F .text	00000708 d_type
00005b50 l     F .text	000000bc d_template_args
00007070 l     F .text	000003bc d_expression
00005c0c l     F .text	000002c0 d_name
00006df4 l     F .text	0000027c d_unqualified_name
0000665c l     F .text	0000003c d_bare_function_type
000065d4 l     F .text	00000088 d_parmlist
00006cf8 l     F .text	000000fc d_operator_name
0000742c l     F .text	00000064 d_exprlist
00007490 l     F .text	00000068 d_append_string
000074f8 l     F .text	0000252c d_print_comp.part.10
00009a24 l     F .text	00000016 d_print_comp
00009a3c l     F .text	00000546 d_print_mod
0000a6e8 l     F .text	00000074 d_print_expr_op
0000a75c l     F .text	000000aa d_print_subexpr
0000a1e8 l     F .text	000001a0 d_print_array_type.isra.9
0000a388 l     F .text	000001d8 d_print_function_type.isra.11
0000a560 l     F .text	00000186 d_print_cast.isra.12
00009f84 l     F .text	00000264 d_print_mod_list
0000a808 l     F .text	0000020c d_demangle_callback.constprop.16
00013054 l     O .text	000000c4 standard_subs
00013118 l     O .text	00000294 cplus_demangle_builtin_types
000133ac l     O .text	000003e0 cplus_demangle_operators
00000000 l    df *ABS*	00000000 eh_type.cc
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00013f80 l     O .text	00000080 npio2_hw
00014000 l     O .text	00000108 two_over_pi
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00014108 l     O .text	00000010 init_jk
00014118 l     O .text	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 unwind-arm.c
0000c7a8 l     F .text	00000012 selfrel_offset31
0000c7bc l     F .text	00000072 search_EIT_table
0000c830 l     F .text	00000028 __gnu_unwind_get_pr_addr
0000c858 l     F .text	000000ac get_eit_entry
0000c904 l     F .text	00000058 restore_non_core_regs
0000c95c l     F .text	0000000c _Unwind_decode_typeinfo_ptr.isra.0
0000c968 l     F .text	00000004 __gnu_unwind_24bit.isra.1
0000c96c l     F .text	00000002 _Unwind_DebugHook
0000c970 l     F .text	0000003e unwind_phase2
0000c9b0 l     F .text	000000da unwind_phase2_forced
0000cba0 l     F .text	0000001a _Unwind_GetGR
0000cbf0 l     F .text	0000001c _Unwind_SetGR
0000cc7c l     F .text	000002e4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
0000d370 l     F .text	00000032 next_unwind_byte
0000d3a4 l     F .text	0000001a _Unwind_GetGR.constprop.0
0000d3c0 l     F .text	00000004 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014160 l     O .text	00000010 zeroes.6763
000141b4 l     O .text	00000010 blanks.6762
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000103c0 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000103e0 l     F .text	00000130 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
1fff8d04 l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mprec.c
000142d0 l     O .text	0000000c p05.5269
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
1fff84c8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 /Applications/Arduino.app/Contents/Java/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/crti.o
00000000 l    df *ABS*	00000000 /Applications/Arduino.app/Contents/Java/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/crtn.o
00000000 l    df *ABS*	00000000 lib8tion.cpp
00000000 l    df *ABS*	00000000 leds.cpp
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00004420 g     F .text	00000034 __cxa_free_exception
0000d328 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
0000ca90 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
000025fc  w    F .text	00000006 adc0_isr
00001b1c g     F .text	00000012 _ZN8MeltModeD0Ev
0000511c g     F .text	00000004 _ZNKSt9type_info15__is_function_pEv
00004114 g     F .text	0000001c usb_serial_available
00004e9c g     F .text	00000010 _ZSt10unexpectedv
000122a0 g     F .text	00000024 _isatty_r
0000c6dc g     F .text	00000012 .hidden __aeabi_dcmple
000022a6  w    F .text	00000018 _ZN14HardwareSerial5writeEPKc
00012370 g     F .text	00000030 .hidden __gnu_uldivmod_helper
00002698 g     F .text	00000004 _getpid
0000371c  w    F .text	0000000c _ZN13IntervalTimerD2Ev
00012a08  w    O .text	00000018 _ZTV15P9813ControllerILh8ELh9EL6EOrder10ELh4EE
00001a9c g     F .text	0000003c _ZN9ColorModeC1EPKc4CHSVl
0000c618 g     F .text	0000007a .hidden __cmpdf2
0000bcf0 g     F .text	00000006 fabs
000122c4 g     F .text	00000028 _lseek_r
00004320  w    F .text	00000002 yield
00012a20  w    O .text	00000018 _ZTV15P9813ControllerILh10ELh11EL6EOrder10ELh4EE
0000176e  w    F .text	000000fc _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_
0000aa14 g     F .text	000000c4 __cxa_demangle
00002430  w    F .text	0000000c _ZN15HardwareSerial35writeEh
0000c618 g     F .text	0000007a .hidden __eqdf2
000123a4 g     F .text	00000296 .hidden __divdi3
00004f80 g     F .text	00000070 __cxa_rethrow
1fff842e g     O .data	00000002 usb_string_manufacturer_name_default
00002ef8 g     F .text	00000020 serial_available
00002264  w    F .text	00000006 _ZN14HardwareSerial17transmitterEnableEh
0000c188 g     F .text	0000005a .hidden __floatdidf
000025fc  w    F .text	00000006 hard_fault_isr
000023e4  w    F .text	00000014 _ZN15HardwareSerial35beginEm
000025fc  w    F .text	00000006 dma_ch6_isr
0000e8e0 g     F .text	00000028 _kill_r
00001984 g     F .text	0000000c _ZN8BaseModeD1Ev
00004398 g     F .text	00000014 _ZNSt9bad_allocD2Ev
00004454 g     F .text	00000000 __cxa_end_cleanup
000010ba  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv
00003524 g     F .text	00000090 serial3_putchar
00002b44 g     F .text	00000020 _ZN5Print7printlnEv
000032ac g     F .text	00000020 serial2_available
00011fdc g     F .text	00000020 __sseek
000114d4 g     F .text	000000f4 __sinit
000025fc  w    F .text	00000006 uart0_lon_isr
00003850 g     F .text	00000078 usb_rx_memory
00001afc g     F .text	00000020 _ZN8MeltModeD2Ev
00010184 g     F .text	000000a8 __swbuf_r
00004ff0 g     F .text	00000014 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00012efc g     O .text	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000025fc  w    F .text	00000006 dma_ch8_isr
0000e41c g     F .text	00000002 __malloc_unlock
000011da  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv
000023d8  w    F .text	0000000c _ZN15HardwareSerial35writeEi
00003198 g     F .text	00000058 serial2_end
00001ff0 g     F .text	000000b8 analog_init
000038c8 g     F .text	00000080 usb_tx
00010120 g     F .text	0000004a _vdprintf_r
00001990 g     F .text	00000014 _ZN8BaseModeD0Ev
1fff9056  w    O .bss	00000001 _ZZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEvE1R
0000242c  w    F .text	00000004 _ZN15HardwareSerial35clearEv
0000e2c4 g     F .text	000000c0 memmove
0000d1e4 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
0000482c g     F .text	0000000c _ZNSt9exceptionD2Ev
0000d304 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
0000226e  w    F .text	00000004 _ZN14HardwareSerial4peekEv
000026e8 g     F .text	00000028 init_pin_interrupts
0001196c g     F .text	0000004c _Balloc
1fff90c0 g     O .bss	00000001 modeChange
000144cc g       .ARM.exidx	00000000 __exidx_end
000025fc  w    F .text	00000006 dma_error_isr
000129f0  w    O .text	00000018 _ZTV15P9813ControllerILh6ELh7EL6EOrder10ELh4EE
000025fc  w    F .text	00000006 i2c0_isr
0000cf60 g     F .text	00000006 .hidden __aeabi_unwind_cpp_pr0
0000c608 g     F .text	0000008a .hidden __gtdf2
00012e68 g     O .text	00000014 _ZTVSt13bad_exception
00002458  w    F .text	00000018 _ZN15HardwareSerial35writeEPKc
000028f8 g     F .text	00000084 portd_isr
00002f7c g     F .text	00000040 serial_clear
00002340  w    F .text	00000004 _ZN15HardwareSerial23endEv
0000d67c g     F .text	0000000a .hidden _Unwind_GetRegionStart
1fff90d0 g     O .bss	00000010 Serial1
0000d304 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00003fea  w    F .text	00000008 _ZN16usb_serial_class5writeEPKhj
00012278 g     F .text	00000028 _fstat_r
00012c00 g     O .text	00000110 digital_pin_to_info_PGM
1fff9c90 g     O .bss	00000004 errno
0000ab88 g     F .text	00000120 floor
000145fc g       .ARM.extab	00000000 _etext
00001208  w    F .text	000000c0 _ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh
1fff8d40 g       .bss	00000000 _sbss
0000d34c g     F .text	00000022 .hidden _Unwind_Backtrace
0000c6a4 g     F .text	00000010 .hidden __aeabi_cdcmple
000021fc  w    F .text	0000000c _ZN14HardwareSerial5writeEm
0000226a  w    F .text	00000004 _ZN14HardwareSerial9availableEv
00002a0c g     F .text	0000001c digitalRead
0000450c g     F .text	00000064 __cxa_begin_cleanup
0000297c g     F .text	00000030 porte_isr
000027b4 g     F .text	00000088 portb_isr
00001af4  w    F .text	00000008 _ZN8MeltMode4nameEv
0000d1c4 g     F .text	00000018 .hidden __restore_core_regs
0000d204 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
000025fc  w    F .text	00000006 spi1_isr
0000463c g     F .text	000000d8 __cxa_call_unexpected
000025fc  w    F .text	00000006 uart3_status_isr
000025fc  w    F .text	00000006 mcm_isr
00002300  w    F .text	0000000c _ZN15HardwareSerial25writeEi
00001a9c g     F .text	0000003c _ZN9ColorModeC2EPKc4CHSVl
0000255a g     F .text	00000042 _ZNK9IPAddress7printToER5Print
0000227e  w    F .text	0000000c _ZN14HardwareSerial5writeEh
0000ad40 g     F .text	0000043c __ieee754_rem_pio2
00001b30 g     F .text	00000388 _ZN8MeltMode5frameEv
00003344 g     F .text	000000a4 uart1_status_isr
0000ca8c g     F .text	00000004 .hidden _Unwind_GetCFA
0000e190 g     F .text	00000134 memcpy
00003330 g     F .text	00000014 serial2_clear
0000c694 g     F .text	00000020 .hidden __aeabi_cdrcmple
000004b8 g     F .text	00000038 _ZN8CFastLED4showEh
0000cbbc g     F .text	00000034 .hidden _Unwind_VRS_Set
000114c8 g     F .text	0000000c _cleanup_r
000051a4 g     F .text	0000000c _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0000ec28 g     F .text	000014f8 _svfprintf_r
0000c118 g     F .text	00000022 .hidden __floatsidf
1fff91a8 g     O .bss	00000004 systick_millis_count
0000c610 g     F .text	00000082 .hidden __ltdf2
000025fc  w    F .text	00000006 bus_fault_isr
00000b70  w    F .text	00000040 _ZN14CLEDControllerC2Ev
000025fc  w    F .text	00000006 watchdog_isr
000051b0 g     F .text	00000014 _ZN10__cxxabiv117__class_type_infoD1Ev
00012314 g     F .text	00000000 .hidden __aeabi_uldivmod
00002648 g     F .text	0000003c nvic_execution_priority
000025fc  w    F .text	00000006 i2c1_isr
1fff9310 g     O .bss	00000014 tone_timer
1fff9403 g     O .bss	00000001 usb_configuration
000025fc  w    F .text	00000006 dma_ch11_isr
00001eb8 g     F .text	00000054 _ZN8MeltModeC1Ev
00002364  w    F .text	0000000c _ZN15HardwareSerial29write9bitEm
00000000  w      *UND*	00000000 __fini_array_end
000022f4  w    F .text	0000000c _ZN15HardwareSerial25writeEj
0000bcf8 g     F .text	00000050 __fpclassifyd
000025fc  w    F .text	00000006 i2c2_isr
1fff842e  w    O .data	00000002 usb_string_manufacturer_name
1fff9c80 g     O .bss	00000008 usb_rx_byte_count_data
000024a4 g     F .text	00000018 pit1_isr
0000db40 g     F .text	00000010 malloc
00000fa2  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv
000025fc  w    F .text	00000006 dma_ch4_isr
00002188 g     F .text	00000074 software_isr
0000e878 g     F .text	00000056 _raise_r
0000261c  w    F .text	0000000a _fstat
000025fc  w    F .text	00000006 dma_ch7_isr
000141e0 g     O .text	000000c8 __mprec_tens
00003f34 g     F .text	000000a0 usb_init
1fff9090  w    O .bss	0000001c _ZZN8CFastLED7addLedsIL12ESPIChipsets4ELh6ELh7EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
0000b180 g     F .text	00000250 __kernel_cos
000034cc g     F .text	00000058 serial3_end
0000c768 g     F .text	00000040 .hidden __fixunsdfsi
000025fc  w    F .text	00000006 lptmr_isr
1fff9c54 g     O .bss	00000004 __malloc_top_pad
000029ac g     F .text	00000020 rtc_set
1fff9104 g     O .bss	00000001 _ZN13IntervalTimer11PIT_enabledE
0000e908 g     F .text	00000004 _getpid_r
1fff90b0  w    O .bss	00000004 _ZGVZN8CFastLED7addLedsIL12ESPIChipsets4ELh8ELh9EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
0000cc0c g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
1fff8404 g     O .data	00000002 rand16seed
1fff8400 g     O .data	00000000 .hidden __dso_handle
0000c0f8 g     F .text	0000001e .hidden __aeabi_ui2d
00011884 g     F .text	00000008 _localeconv_r
0000313c g     F .text	0000005c serial2_format
00004570 g     F .text	00000070 __gnu_end_cleanup
00011b00 g     F .text	00000012 __i2b
0000d754 g     F .text	00000318 __sfvwrite_r
000051f8 g     F .text	00000024 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00012b50  w    O .text	0000004c _ZTV15HardwareSerial2
00003600 g     F .text	00000034 serial3_getchar
00002208  w    F .text	0000000c _ZN14HardwareSerial5writeEl
1fff8400 g       .data	00000000 _sdata
0000be74 g     F .text	00000000 .hidden __aeabi_drsub
0000e854 g     F .text	00000024 _sbrk_r
00002ee4 g     F .text	00000014 serial_flush
000001bc g     F .text	00000188 ResetHandler
00004090 g     F .text	0000004c usb_serial_getchar
0000d1f4 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00012f40 g     O .text	00000020 _ZTVSt9type_info
000025fc  w    F .text	00000006 ftm2_isr
000011cc  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv
1fff9c88 g     O .bss	00000008 usb_cdc_line_coding
000029cc g     F .text	00000040 digitalWrite
000025fc  w    F .text	00000006 uart5_status_isr
1fff9058  w    O .bss	0000001c _ZZN8CFastLED7addLedsIL12ESPIChipsets4ELh10ELh11EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
000122ec g     F .text	00000028 _read_r
00004844 g     F .text	00000008 _ZNKSt9exception4whatEv
00012d12 g     O .text	00000004 usb_endpoint_config_table
000025fc  w    F .text	00000006 dma_ch9_isr
0000222c  w    F .text	00000014 _ZN14HardwareSerial5beginEm
00001eb8 g     F .text	00000054 _ZN8MeltModeC2Ev
000006a4 g     F .text	0000000c _ZN7PerlinsD1Ev
000024bc g     F .text	00000018 pit2_isr
000030b4 g     F .text	00000088 serial2_begin
0000c6c8 g     F .text	00000012 .hidden __aeabi_dcmplt
000035e0 g     F .text	00000020 serial3_available
0000cf78 g     F .text	0000024a .hidden _Unwind_VRS_Pop
000121e8 g     F .text	00000080 _fclose_r
00000f94  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv
0000cf70  w    F .text	00000006 .hidden __aeabi_unwind_cpp_pr2
00012da8 g     O .text	0000000c _ZTISt9bad_alloc
1fff9c50 g     O .bss	00000004 __malloc_max_sbrked_mem
00000fd0  w    F .text	000000c0 _ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh
00002354  w    F .text	00000004 _ZN15HardwareSerial25clearEv
000010e8  w    F .text	000000c8 _ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh
0000d34c g     F .text	00000022 .hidden ___Unwind_Backtrace
00002a28 g     F .text	00000038 pinMode
0000404c g     F .text	00000044 usb_free
0000bb80 g     F .text	0000016c __kernel_sin
0000c13c g     F .text	0000003a .hidden __extendsfdf2
0000163a  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h
0000c438 g     F .text	000001d0 .hidden __aeabi_ddiv
000128c0 g     O .text	00000004 FastLED
0000be80 g     F .text	00000276 .hidden __adddf3
000031f0 g     F .text	00000090 serial2_putchar
1fff8408 g     O .data	00000004 leds_three
00012ec0 g     O .text	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00002344  w    F .text	00000004 _ZN15HardwareSerial29availableEv
000032cc g     F .text	00000034 serial2_getchar
1fff8d64 g     O .bss	00000004 _ZN14CLEDController7m_pTailE
00014314 g       .ARM.exidx	00000000 __exidx_start
0000c1e4 g     F .text	00000254 .hidden __aeabi_dmul
0000248c g     F .text	00000018 pit0_isr
00002448  w    F .text	00000010 _ZN15HardwareSerial35writeEPKhj
00001afc g     F .text	00000020 _ZN8MeltModeD1Ev
000019b4 g     F .text	00000014 _ZN9ColorModeD1Ev
00002626  w    F .text	00000004 _isatty
000051e0 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00004330 g     F .text	00000008 _ZdlPv
0001415c g     O .text	00000004 _global_impure_ptr
000023b4  w    F .text	0000000c _ZN15HardwareSerial35writeEm
0000e488 g     F .text	000003cc _realloc_r
0000daf0 g     F .text	00000050 __libc_init_array
000025fc  w    F .text	00000006 can0_wakeup_isr
0001263c g     F .text	00000282 .hidden __udivdi3
0000d2bc g     F .text	00000022 .hidden ___Unwind_RaiseException
00002380  w    F .text	00000018 _ZN15HardwareSerial25writeEPKc
000025fc  w    F .text	00000006 flash_cmd_isr
00002370  w    F .text	00000010 _ZN15HardwareSerial25writeEPKhj
000033e8 g     F .text	00000088 serial3_begin
000142a8 g     O .text	00000028 __mprec_bigtens
0000d6ac g     F .text	0000000e abort
0000d2e0 g     F .text	00000022 .hidden ___Unwind_Resume
0000c0f8 g     F .text	0000001e .hidden __floatunsidf
00003678 g     F .text	000000a4 uart2_status_isr
00002684 g     F .text	00000010 _sbrk
1fff9074  w    O .bss	0000001c _ZZN8CFastLED7addLedsIL12ESPIChipsets4ELh8ELh9EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
00011da8 g     F .text	00000046 __mcmp
00002710 g     F .text	00000054 attachInterrupt
1fff8418 g     O .data	00000004 __brkval
000047a0 g     F .text	0000008c __cxa_end_catch
1fff9428 g     O .bss	00000001 usb_cdc_line_rtsdtr
00004274 g     F .text	00000048 usb_serial_flush_callback
00004838 g     F .text	0000000c _ZNSt13bad_exceptionD2Ev
00002320  w    F .text	00000020 _ZN15HardwareSerial25beginEmm
0000137c  w    F .text	000000ea _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_
000142dc g     F .text	00000000 _init
00012a80 g     O .text	00000018 _ZTV8BaseMode
000035b4 g     F .text	00000016 serial3_write
000025fc  w    F .text	00000006 svcall_isr
000006d0 g     F .text	0000005c _ZN7Perlins4fadeEd
000025fc  w    F .text	00000006 dma_ch15_isr
00004e84 g     F .text	00000010 _ZSt9terminatev
00002bfc g     F .text	0000009c serial_begin
0000d20c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00002240  w    F .text	00000020 _ZN14HardwareSerial5beginEmm
000010ac  w    F .text	0000000e _ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv
0000b3d0 g     F .text	000007ae __kernel_rem_pio2
000019c8 g     F .text	00000012 _ZN9ColorModeD0Ev
000025fc  w    F .text	00000006 uart1_error_isr
000115d0 g     F .text	00000030 __libc_fini_array
1fff9c94 g       .bss	00000000 _ebss
1fff90f0 g     O .bss	00000010 Serial3
00002418  w    F .text	00000004 _ZN15HardwareSerial33endEv
00012f9c g     O .text	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00000a8c  w    F .text	0000002c _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9clearLedsEi
00011a64 g     F .text	00000040 __hi0bits
1fff90bc g     O .bss	00000004 lastActionTime
00004a54 g     F .text	00000406 __gxx_personality_v0
00012df8 g     O .text	00000008 _ZTISt9exception
0000c718 g     F .text	0000004e .hidden __fixdfsi
000025fc g     F .text	00000006 unused_isr
000025fc  w    F .text	00000006 spi0_isr
000006c4 g     F .text	0000000c _ZN7PerlinsC1Ev
00002424  w    F .text	00000004 _ZN15HardwareSerial34readEv
000025fc  w    F .text	00000006 dma_ch3_isr
0000510c g     F .text	0000000c _ZNSt9type_infoD1Ev
1fff9c44 g     O .bss	00000004 __new_handler
0000e420 g     F .text	00000058 _putc_r
0000228a  w    F .text	0000000c _ZN14HardwareSerial9write9bitEm
00005124 g     F .text	00000014 _ZNSt9type_infoD0Ev
00000c22  w    F .text	00000020 _ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_
000025fc  w    F .text	00000006 flash_error_isr
0000227a  w    F .text	00000004 _ZN14HardwareSerial5clearEv
0000be80 g     F .text	00000276 .hidden __aeabi_dadd
0000c610 g     F .text	00000082 .hidden __ledf2
00002276  w    F .text	00000004 _ZN14HardwareSerial5flushEv
00002d84 g     F .text	0000009c serial_putchar
000025fc  w    F .text	00000006 uart5_error_isr
000025fc  w    F .text	00000006 rtc_seconds_isr
000025fc  w    F .text	00000006 pdb_isr
00011c50 g     F .text	0000009c __pow5mult
0000c178 g     F .text	0000006a .hidden __aeabi_ul2d
000025fc  w    F .text	00000006 usage_fault_isr
00005120 g     F .text	00000004 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000d1dc g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
000025fc  w    F .text	00000006 dac1_isr
000025fc  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
00000b4c  w    F .text	00000024 _ZN5Print7printlnEPKc
1fff8d68 g     O .bss	000002ee leds
000025b8  w    F .text	00000010 systick_isr
000035cc g     F .text	00000014 serial3_flush
1fff90ac  w    O .bss	00000004 _ZGVZN8CFastLED7addLedsIL12ESPIChipsets4ELh10ELh11EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
000025fc  w    F .text	00000006 rtc_alarm_isr
0000d2e0 g     F .text	00000022 .hidden _Unwind_Resume
1fff90c8 g     O .bss	00000004 _ZN11AudioStream12first_updateE
000025fc  w    F .text	00000006 dma_ch2_isr
1fff9408 g     O .bss	00000010 Serial
0000cb5c g     F .text	0000000e .hidden _Unwind_DeleteException
0000cb58 g     F .text	00000002 .hidden _Unwind_Complete
000025fc  w    F .text	00000006 ftm1_isr
00012b00  w    O .text	0000004c _ZTV14HardwareSerial
00003fe4  w    F .text	00000006 _ZN16usb_serial_class5writeEh
00002604  w    F .text	0000000c startup_early_hook
000025fc  w    F .text	00000006 dma_ch13_isr
00002350  w    F .text	00000004 _ZN15HardwareSerial25flushEv
0000521c g     F .text	0000003e _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
000025fc  w    F .text	00000006 uart2_error_isr
0000c704 g     F .text	00000012 .hidden __aeabi_dcmpgt
000040dc g     F .text	00000038 usb_serial_peekchar
0000516c g     F .text	00000036 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0000ab10 g     F .text	00000074 cos
000115c8 g     F .text	00000002 __sfp_lock_acquire
00012e00 g     O .text	00000012 _ZTSSt13bad_exception
0000e098 g     F .text	00000090 memchr
1fff84a4 g     O .data	00000002 usb_string_serial_number_default
000025c8 g     F .text	00000034 fault_isr
0001169c g     F .text	0000019c _free_r
0000072c g     F .text	00000052 _ZN7Perlins4gradEiddd
0000c6f0 g     F .text	00000012 .hidden __aeabi_dcmpge
000025fc  w    F .text	00000006 usb_charge_isr
00003fe0  w    F .text	00000004 _ZN16usb_serial_class5flushEv
000025fc  w    F .text	00000006 cmt_isr
0000be7c g     F .text	0000027a .hidden __aeabi_dsub
000019b4 g     F .text	00000014 _ZN9ColorModeD2Ev
1fff8d00 g     O .data	00000004 __malloc_sbrk_base
00003fd8  w    F .text	00000004 _ZN16usb_serial_class4readEv
000025fc  w    F .text	00000006 ftm3_isr
000025fc  w    F .text	00000006 tsi0_isr
00012f2c g     O .text	0000000d _ZTSSt9type_info
00002260  w    F .text	00000004 _ZN14HardwareSerial3endEv
0000aca8 g     F .text	00000094 sin
0000c178 g     F .text	0000006a .hidden __floatundidf
00004390 g     F .text	00000008 _ZNKSt9bad_alloc4whatEv
0000262a  w    F .text	00000006 _lseek
00002632  w    F .text	00000002 __cxa_pure_virtual
00011cec g     F .text	000000bc __lshift
00012d90 g     O .text	00000014 _ZTVSt9bad_alloc
000025fc  w    F .text	00000006 spi2_isr
00012004 g     F .text	00000100 __ssprint_r
0000d3c4 g     F .text	0000028c .hidden __gnu_unwind_execute
00012104 g     F .text	0000005e _vasnprintf_r
00012bf0 g     O .text	0000000c _ZTV9IPAddress
00001344  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h
1fff938d g     O .bss	00000001 usb_reboot_timer
00010318 g     F .text	000000a8 __register_exitproc
00012dc4 g     O .text	0000000d _ZTSSt9bad_alloc
0000eb74 g     F .text	000000b4 strncmp
00005054 g     F .text	00000096 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000d1ec g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00001466  w    F .text	000000ea _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_
00011b14 g     F .text	0000013c __multiply
00000ab8  w    F .text	0000002c _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9clearLedsEi
00004200 g     F .text	00000016 usb_serial_putchar
00000490 g     F .text	00000026 _ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii
1fff9c58 g     O .bss	00000028 __malloc_current_mallinfo
00011ec4 g     F .text	000000ba __d2b
0000510c g     F .text	0000000c _ZNSt9type_infoD2Ev
00004460 g     F .text	000000ac __cxa_type_match
000025fc  w    F .text	00000006 can0_bus_off_isr
00003280 g     F .text	00000016 serial2_write
00002358  w    F .text	0000000c _ZN15HardwareSerial25writeEh
000050ec g     F .text	00000020 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000022dc  w    F .text	0000000c _ZN15HardwareSerial25writeEm
0000e478 g     F .text	00000010 realloc
000010c8  w    F .text	0000001e _ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4initEv
1fff93fa g     O .bss	00000001 usb_rx_memory_needed
0000cb04 g     F .text	00000044 .hidden __gnu_Unwind_Resume
00003948 g     F .text	000005ec usb_isr
0000d6bc g     F .text	00000014 __cxa_atexit
00012e5c g     O .text	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
000121c4 g     F .text	00000024 _close_r
0000c118 g     F .text	00000022 .hidden __aeabi_i2d
0000d1fc g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
0000e128 g     F .text	00000066 memcmp
00012d70  w    O .text	00000020 _ZTV16usb_serial_class
000025fc  w    F .text	00000006 uart3_error_isr
0000da6c g     F .text	00000062 _fwrite_r
000043ac g     F .text	0000001c _ZNSt9bad_allocD0Ev
00001984 g     F .text	0000000c _ZN8BaseModeD2Ev
00004ff0 g     F .text	00000014 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00000bb0  w    F .text	00000072 _ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_
00002c98 g     F .text	0000005c serial_format
000042c8 g     F .text	00000044 _Z6randomv
00010254 g     F .text	000000c4 __swsetup_r
0000d2bc g     F .text	00000022 .hidden _Unwind_RaiseException
000123a0  w    F .text	00000002 .hidden __aeabi_ldiv0
00002764 g     F .text	00000050 porta_isr
0000c438 g     F .text	000001d0 .hidden __divdf3
00005118 g     F .text	00000004 _ZNKSt9type_info14__is_pointer_pEv
1fff80a0 g     O .usbbuffers	00000360 usb_buffer_memory
000025fc  w    F .text	00000006 low_voltage_isr
1fff88f4 g     O .data	00000408 __malloc_av_
000025fc  w    F .text	00000006 can0_error_isr
00002e20 g     F .text	000000c4 serial_write
00002ac8 g     F .text	0000007c _init_Teensyduino_internal_
0000c1e4 g     F .text	00000254 .hidden __muldf3
00011f80 g     F .text	00000022 __sread
00012dd8 g     O .text	00000014 _ZTVSt9exception
00003664 g     F .text	00000014 serial3_clear
00004218 g     F .text	0000005c usb_serial_flush_output
000025fc  w    F .text	00000006 dma_ch12_isr
0000e418 g     F .text	00000002 __malloc_lock
00000780 g     F .text	0000030a _ZN7Perlins6pnoiseEddd
00000000  w      *UND*	00000000 __fini_array_start
00012f60 g     O .text	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00004ef0 g     F .text	00000090 __cxa_throw
0001149c g     F .text	0000002c _fflush_r
00012164 g     F .text	0000005e _calloc_r
0000230c  w    F .text	00000014 _ZN15HardwareSerial25beginEm
000024d4 g     F .text	00000018 pit3_isr
0000283c g     F .text	000000bc portc_isr
0000e384 g     F .text	00000094 memset
00000c44 g     F .text	00000350 main
1fff9c4c g     O .bss	00000004 __malloc_max_total_mem
00012ab0 g     O .text	00000018 _ZTV9ColorMode
1fff8d5c g     O .bss	00000001 LEDS
00003300 g     F .text	00000030 serial2_peek
0000487c g     F .text	00000008 __cxa_get_globals_fast
00000c22  w    F .text	00000020 _ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIJS1_EEEvDpOT_
000025fc  w    F .text	00000006 memmanage_fault_isr
00011ffc g     F .text	00000008 __sclose
00003744 g     F .text	00000070 usb_init_serialnumber
00012268 g     F .text	00000010 fclose
00014310 g       .text	00000000 __init_array_end
00010510 g     F .text	00000e34 _dtoa_r
0000db60 g     F .text	00000538 _malloc_r
000025fc  w    F .text	00000006 debugmonitor_isr
00000fb0  w    F .text	0000001e _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4initEv
0000484c g     F .text	00000008 _ZNKSt13bad_exception4whatEv
0000c188 g     F .text	0000005a .hidden __aeabi_l2d
00012f90 g     O .text	0000000c _ZTIN10__cxxabiv117__class_type_infoE
0000243c  w    F .text	0000000c _ZN15HardwareSerial39write9bitEm
00011838 g     F .text	0000004a _fwalk
00002a60 g     F .text	00000040 micros
00000000  w      *UND*	00000000 __libc_fini
00004838 g     F .text	0000000c _ZNSt13bad_exceptionD1Ev
000025fc  w    F .text	00000006 cmp1_isr
000025fc  w    F .text	00000006 ftm0_isr
00011600 g     F .text	0000009c _malloc_trim_r
0000caf0 g     F .text	00000014 .hidden __gnu_Unwind_ForcedUnwind
00004130 g     F .text	000000d0 usb_serial_write
1fff84a0 g     O .data	00000002 string0
00002610  w    F .text	00000002 startup_late_hook
00002420  w    F .text	00000004 _ZN15HardwareSerial34peekEv
00003fd4  w    F .text	00000004 _ZN16usb_serial_class9availableEv
0000e958 g     F .text	00000000 strcmp
000023cc  w    F .text	0000000c _ZN15HardwareSerial35writeEj
000023f8  w    F .text	00000020 _ZN15HardwareSerial35beginEmm
0000cb48 g     F .text	00000010 .hidden __gnu_Unwind_Resume_or_Rethrow
000023c0  w    F .text	0000000c _ZN15HardwareSerial35writeEl
1fff848a  w    O .data	00000002 usb_string_product_name
00000000  w      *UND*	00000000 __gnu_Unwind_Find_exidx
0000be60 g     F .text	00000012 copysign
00002cf4 g     F .text	00000058 serial_end
00002aa0 g     F .text	00000028 delay
0000c618 g     F .text	0000007a .hidden __nedf2
00014310 g     F .fini	00000000 _fini
00002214  w    F .text	0000000c _ZN14HardwareSerial5writeEj
0000d1c4 g     F .text	00000018 .hidden restore_core_regs
0000d2a8 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00005004 g     F .text	0000001c _ZN10__cxxabiv120__si_class_type_infoD0Ev
000006b0 g     F .text	00000014 _ZN7PerlinsD0Ev
0000e90c g     F .text	0000004c sprintf
00002b70 g     F .text	0000001a _ZN5Print6printfEPKcz
000025fc  w    F .text	00000006 i2s0_rx_isr
000025fc  w    F .text	00000006 uart4_error_isr
00002510 g     F .text	00000038 _ZN13IntervalTimer8stop_PITEv
000103d4 g     F .text	0000000c atexit
00002640  w    F .text	00000006 __cxa_guard_release
0001022c g     F .text	00000028 _write_r
0000d6a4 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
0000461c g     F .text	0000001e __cxa_call_terminate
00000b70  w    F .text	00000040 _ZN14CLEDControllerC1Ev
00001672  w    F .text	000000fc _ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_
000025fc  w    F .text	00000006 can0_message_isr
1fff88f0 g     O .data	00000004 _impure_ptr
00012df0 g     O .text	00000008 _ZTIN10__cxxabiv115__forced_unwindE
1fff8410 g     O .data	00000004 leds_one
00011348 g     F .text	00000152 __sflush_r
0000bd48 g     F .text	00000114 scalbn
000025fc  w    F .text	00000006 nmi_isr
00002348  w    F .text	00000004 _ZN15HardwareSerial24peekEv
00002548 g     F .text	00000012 _ZN13IntervalTimer3endEv
000142e8 g       .text	00000000 __preinit_array_end
000006a4 g     F .text	0000000c _ZN7PerlinsD2Ev
000042bc g     F .text	0000000c _Z10randomSeedm
000025fc  w    F .text	00000006 sdhc_isr
00012ba0  w    O .text	0000004c _ZTV15HardwareSerial3
00002428  w    F .text	00000004 _ZN15HardwareSerial35flushEv
0000d6d0 g     F .text	00000028 fputc
00000464  w    F .text	0000002c _ZN14CLEDController13getAdjustmentEh
000037f4 g     F .text	00000038 usb_rx
00012d18 g     O .text	00000054 usb_descriptor_list
00012e38 g     O .text	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000025fc  w    F .text	00000006 dma_ch10_isr
000024ec g     F .text	00000024 _ZN13IntervalTimer11disable_PITEv
00002220  w    F .text	0000000c _ZN14HardwareSerial5writeEi
0000d688 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
000129c8 g     O .text	00000010 _ZTV7Perlins
0000c768 g     F .text	00000040 .hidden __aeabi_d2uiz
000025fc  w    F .text	00000006 uart0_error_isr
00004714 g     F .text	0000008c __cxa_begin_catch
000051b0 g     F .text	00000014 _ZN10__cxxabiv117__class_type_infoD2Ev
00004e94 g     F .text	00000008 _ZN10__cxxabiv112__unexpectedEPFvvE
00001550  w    F .text	000000ea _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_
00004010 g     F .text	0000003c usb_malloc
0000186a  w    F .text	000000fc _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_
1fff9108 g     O .bss	00000010 _ZN13IntervalTimer7PIT_ISRE
0000163a  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC2EPK4CRGBiRS2_h
0000cb6c g     F .text	00000034 .hidden _Unwind_VRS_Get
20008000 g       *ABS*	00000000 _estack
00004868 g     F .text	00000014 _ZNSt13bad_exceptionD0Ev
1fff84c4 g     O .data	00000004 _ZN10__cxxabiv119__terminate_handlerE
0000d294 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
0000aad8 g     F .text	0000001c __gcclibcxx_demangle_callback
0000c6b4 g     F .text	00000012 .hidden __aeabi_dcmpeq
000043c8 g     F .text	00000058 __cxa_allocate_exception
0000dad0 g     F .text	00000020 fwrite
00012ef0 g     O .text	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00002b64  w    F .text	0000000c _write
0000d650 g     F .text	0000002a .hidden __gnu_unwind_frame
0000d328 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
1fff8d3c g       .data	00000000 _edata
000025fc  w    F .text	00000006 i2s0_tx_isr
000025fc  w    F .text	00000006 adc1_isr
00000b10 g     F .text	0000003c _Z16modeButtonChangev
0000d6f8 g     F .text	0000004c _fputs_r
000025fc  w    F .text	00000006 cmp0_isr
000026aa g     F .text	0000003c ultoa
00001344  w    F .text	00000038 _ZN15PixelControllerIL6EOrder10EEC2ERK4CRGBiRS2_h
0000482c g     F .text	0000000c _ZNSt9exceptionD1Ev
1fff840c g     O .data	00000004 leds_two
00011fa4 g     F .text	00000038 __swrite
00004338 g     F .text	00000058 _Znwj
1fff8cfc g     O .data	00000004 __malloc_trim_threshold
00003fdc  w    F .text	00000004 _ZN16usb_serial_class4peekEv
000012e4  w    F .text	00000060 _ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv
000129d8  w    O .text	00000018 _ZTV14CLEDController
000025b8 g     F .text	00000010 systick_default_isr
00005020 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00011df0 g     F .text	000000d4 __mdiff
0000c718 g     F .text	0000004e .hidden __aeabi_d2iz
00004e5c g     F .text	00000026 _ZN10__cxxabiv111__terminateEPFvvE
0000d250 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00002272  w    F .text	00000004 _ZN14HardwareSerial4readEv
0000234c  w    F .text	00000004 _ZN15HardwareSerial24readEv
1fff9418 g     O .bss	00000001 usb_cdc_transmit_flush_timer
00002694 g     F .text	00000004 _kill
00004398 g     F .text	00000014 _ZNSt9bad_allocD1Ev
000144cc g       .ARM.extab	00000000 __extab_start
1fff90ce g     O .bss	00000002 _ZN11AudioStream16cpu_cycles_totalE
000019dc g     F .text	000000c0 _ZN9ColorMode5frameEv
0000430c g     F .text	00000014 _Z3maplllll
000115cc g     F .text	00000002 __sfp_lock_release
00012eb0 g     O .text	0000000c _ZTISt13bad_exception
000019b0  w    F .text	00000004 _ZN9ColorMode4nameEv
000025fc  w    F .text	00000006 dac0_isr
000011e8  w    F .text	0000001e _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4initEv
00003298 g     F .text	00000014 serial2_flush
00000bb0  w    F .text	00000072 _ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIJS1_EEEvDpOT_
00002612  w    F .text	00000004 _read
000123a0  w    F .text	00000002 .hidden __aeabi_idiv0
000142e8 g       .text	00000000 __init_array_start
000006c4 g     F .text	0000000c _ZN7PerlinsC2Ev
1fff8d60 g     O .bss	00000004 _ZN14CLEDController7m_pHeadE
000020a8 g     F .text	000000e0 analogRead
00012ad0 g     O .text	00000018 _ZTV8MeltMode
00002fbc g     F .text	000000f8 uart0_status_isr
00002630  w    F .text	00000002 _exit
000025fc  w    F .text	00000006 mcg_isr
00003634 g     F .text	00000030 serial3_peek
00004884 g     F .text	00000008 __cxa_get_globals
00000400 g     O .text	00000010 flashconfigbytes
0001188c g     F .text	000000e0 __smakebuf_r
1fff84c0 g     O .data	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0000269c g     F .text	0000000e strlen
00012f24 g     O .text	00000008 _ZTISt9type_info
0000cf68  w    F .text	00000006 .hidden __aeabi_unwind_cpp_pr1
0000c6a4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000c608 g     F .text	0000008a .hidden __gedf2
0000371c  w    F .text	0000000c _ZN13IntervalTimerD1Ev
00012e80 g     O .text	0000000d _ZTSSt9exception
1fff848a g     O .data	00000002 usb_string_product_name_default
1fff90b4  w    O .bss	00000004 _ZGVZN8CFastLED7addLedsIL12ESPIChipsets4ELh6ELh7EL6EOrder10ELh4EEER14CLEDControllerP4CRGBiiE1c_3
00002296  w    F .text	00000010 _ZN14HardwareSerial5writeEPKhj
0001016c g     F .text	00000018 vdprintf
000025fc  w    F .text	00000006 dma_ch1_isr
0000aaf4 g     F .text	0000001a __cxa_current_exception_type
00012340 g     F .text	00000030 .hidden __gnu_ldivmod_helper
00004854 g     F .text	00000014 _ZNSt9exceptionD0Ev
000145fc g       .ARM.extab	00000000 __extab_end
000019a4 g     F .text	0000000c _ZN8BaseModeC2Ev
0000382c g     F .text	00000024 usb_tx_packet_count
000022e8  w    F .text	0000000c _ZN15HardwareSerial25writeEl
0000c13c g     F .text	0000003a .hidden __aeabi_f2d
000025fc  w    F .text	00000006 dma_ch5_isr
0000d744 g     F .text	00000010 fputs
0000d69c g     F .text	00000006 .hidden _Unwind_GetDataRelBase
000025fc  w    F .text	00000006 can0_rx_warn_isr
1fff9100 g     O .bss	00000004 _ZN13IntervalTimer8PIT_usedE
00002f18 g     F .text	00000034 serial_getchar
00000ae4  w    F .text	0000002c _ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9clearLedsEi
0000241c  w    F .text	00000004 _ZN15HardwareSerial39availableEv
000025fc  w    F .text	00000006 can0_tx_warn_isr
000025fc  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1fff90cc g     O .bss	00000002 _ZN11AudioStream20cpu_cycles_total_maxE
0000be7c g     F .text	0000027a .hidden __subdf3
000142e8 g       .text	00000000 __preinit_array_start
00011aa4 g     F .text	0000005a __lo0bits
00002f4c g     F .text	00000030 serial_peek
00004324 g     F .text	0000000a __aeabi_atexit
00005138 g     F .text	0000002e _ZNKSt9type_infoeqERKS_
00002634  w    F .text	0000000c __cxa_guard_acquire
00000000  w      *UND*	00000000 __register_frame_info
00002d4c g     F .text	00000038 serial_set_transmit_pin
000025fc  w    F .text	00000006 cmp2_isr
000025fc  w    F .text	00000006 pendablesrvreq_isr
000025fc  w    F .text	00000006 wakeup_isr
00012e90 g     O .text	00000020 _ZTSN10__cxxabiv115__forced_unwindE
000019a4 g     F .text	0000000c _ZN8BaseModeC1Ev
00005168 g     F .text	00000004 _ZNKSt9type_info10__do_catchEPKS_PPvj
00000000 g     O .text	000001bc gVectors
00002b8a g     F .text	00000070 _ZN5Print11printNumberEmhh
00003470 g     F .text	0000005c serial3_format
0000e8d0 g     F .text	00000010 raise
00002616  w    F .text	00000006 _close
0000db50 g     F .text	00000010 free
0000525c g     F .text	00000114 _ZN9__gnu_cxx27__verbose_terminate_handlerEv
000119cc g     F .text	00000096 __multadd
000051c4 g     F .text	0000001c _ZN10__cxxabiv117__class_type_infoD0Ev
000119b8 g     F .text	00000012 _Bfree
1fff90e0 g     O .bss	00000010 Serial2
00000536 g     F .text	0000016e _Z15hsv2rgb_rainbowRK4CHSVR4CRGB
000025fc  w    F .text	00000006 dma_ch0_isr
1fff84a4  w    O .data	00000002 usb_string_serial_number



Disassembly of section .text:

00000000 <gVectors>:
       0:	00 80 00 20 bd 01 00 00 fd 25 00 00 fd 25 00 00     ... .....%...%..
      10:	fd 25 00 00 fd 25 00 00 fd 25 00 00 c9 25 00 00     .%...%...%...%..
      20:	c9 25 00 00 c9 25 00 00 c9 25 00 00 fd 25 00 00     .%...%...%...%..
      30:	fd 25 00 00 c9 25 00 00 fd 25 00 00 b9 25 00 00     .%...%...%...%..
      40:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      50:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      60:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      70:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      80:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      90:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      a0:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      b0:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      c0:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      d0:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      e0:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
      f0:	fd 25 00 00 bd 2f 00 00 fd 25 00 00 45 33 00 00     .%.../...%..E3..
     100:	fd 25 00 00 79 36 00 00 fd 25 00 00 fd 25 00 00     .%..y6...%...%..
     110:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
     120:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
     130:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
     140:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
     150:	8d 24 00 00 a5 24 00 00 bd 24 00 00 d5 24 00 00     .$...$...$...$..
     160:	fd 25 00 00 49 39 00 00 fd 25 00 00 fd 25 00 00     .%..I9...%...%..
     170:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
     180:	fd 25 00 00 fd 25 00 00 fd 25 00 00 fd 25 00 00     .%...%...%...%..
     190:	fd 25 00 00 fd 25 00 00 fd 25 00 00 65 27 00 00     .%...%...%..e'..
     1a0:	b5 27 00 00 3d 28 00 00 f9 28 00 00 7d 29 00 00     .'..=(...(..})..
     1b0:	fd 25 00 00 fd 25 00 00 89 21 00 00                 .%...%...!..

000001bc <ResetHandler>:
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));

__attribute__ ((section(".startup")))
void ResetHandler(void)
{
     1bc:	b508      	push	{r3, lr}
	unsigned int i;
#if F_CPU <= 2000000
	volatile int n;
#endif

	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1be:	4b49      	ldr	r3, [pc, #292]	; (2e4 <ResetHandler+0x128>)
     1c0:	f24c 5220 	movw	r2, #50464	; 0xc520
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f002 fa18 	bl	2604 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b44      	ldr	r3, [pc, #272]	; (2e8 <ResetHandler+0x12c>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a43      	ldr	r2, [pc, #268]	; (2ec <ResetHandler+0x130>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a43      	ldr	r2, [pc, #268]	; (2f0 <ResetHandler+0x134>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	f5a3 4330 	sub.w	r3, r3, #45056	; 0xb000
     1e8:	3b20      	subs	r3, #32
     1ea:	681a      	ldr	r2, [r3, #0]
     1ec:	f412 7280 	ands.w	r2, r2, #256	; 0x100
     1f0:	d104      	bne.n	1fc <ResetHandler+0x40>
		RTC_SR = 0;
     1f2:	4940      	ldr	r1, [pc, #256]	; (2f4 <ResetHandler+0x138>)
     1f4:	600a      	str	r2, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f6:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
     1fa:	601a      	str	r2, [r3, #0]
	}

	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1fc:	4b3e      	ldr	r3, [pc, #248]	; (2f8 <ResetHandler+0x13c>)
     1fe:	781a      	ldrb	r2, [r3, #0]
     200:	0711      	lsls	r1, r2, #28
     202:	d503      	bpl.n	20c <ResetHandler+0x50>
     204:	781a      	ldrb	r2, [r3, #0]
     206:	f042 0208 	orr.w	r2, r2, #8
     20a:	701a      	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	4b3b      	ldr	r3, [pc, #236]	; (2fc <ResetHandler+0x140>)
     20e:	222a      	movs	r2, #42	; 0x2a
     210:	701a      	strb	r2, [r3, #0]
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     212:	2300      	movs	r3, #0
     214:	4a3a      	ldr	r2, [pc, #232]	; (300 <ResetHandler+0x144>)
     216:	493b      	ldr	r1, [pc, #236]	; (304 <ResetHandler+0x148>)
     218:	1898      	adds	r0, r3, r2
     21a:	4288      	cmp	r0, r1
     21c:	d204      	bcs.n	228 <ResetHandler+0x6c>
     21e:	493a      	ldr	r1, [pc, #232]	; (308 <ResetHandler+0x14c>)
     220:	5859      	ldr	r1, [r3, r1]
     222:	5099      	str	r1, [r3, r2]
     224:	3304      	adds	r3, #4
     226:	e7f5      	b.n	214 <ResetHandler+0x58>
     228:	4b38      	ldr	r3, [pc, #224]	; (30c <ResetHandler+0x150>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     22a:	4a39      	ldr	r2, [pc, #228]	; (310 <ResetHandler+0x154>)
     22c:	4293      	cmp	r3, r2
     22e:	f04f 0200 	mov.w	r2, #0
     232:	d202      	bcs.n	23a <ResetHandler+0x7e>
     234:	f843 2b04 	str.w	r2, [r3], #4
     238:	e7f7      	b.n	22a <ResetHandler+0x6e>
	SCB_VTOR = 0;	// use vector table in flash
     23a:	4b36      	ldr	r3, [pc, #216]	; (314 <ResetHandler+0x158>)
     23c:	601a      	str	r2, [r3, #0]
     23e:	f6a3 1308 	subw	r3, r3, #2312	; 0x908

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     242:	2280      	movs	r2, #128	; 0x80
     244:	f803 2b01 	strb.w	r2, [r3], #1
     248:	4a33      	ldr	r2, [pc, #204]	; (318 <ResetHandler+0x15c>)
     24a:	4293      	cmp	r3, r2
     24c:	d1f9      	bne.n	242 <ResetHandler+0x86>
	//  C1[IREFS] bit is written to 1
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
     24e:	4b33      	ldr	r3, [pc, #204]	; (31c <ResetHandler+0x160>)
     250:	220a      	movs	r2, #10
     252:	701a      	strb	r2, [r3, #0]
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     254:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
     258:	2224      	movs	r2, #36	; 0x24
     25a:	701a      	strb	r2, [r3, #0]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     25c:	22a0      	movs	r2, #160	; 0xa0
     25e:	f803 2c01 	strb.w	r2, [r3, #-1]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     262:	4b2f      	ldr	r3, [pc, #188]	; (320 <ResetHandler+0x164>)
     264:	781a      	ldrb	r2, [r3, #0]
     266:	0792      	lsls	r2, r2, #30
     268:	d5fb      	bpl.n	262 <ResetHandler+0xa6>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     26a:	781a      	ldrb	r2, [r3, #0]
     26c:	06d0      	lsls	r0, r2, #27
     26e:	d4fc      	bmi.n	26a <ResetHandler+0xae>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     270:	781a      	ldrb	r2, [r3, #0]
     272:	f002 020c 	and.w	r2, r2, #12
     276:	2a08      	cmp	r2, #8
     278:	d1fa      	bne.n	270 <ResetHandler+0xb4>
	//   C1[IREFS] bit is written to 0
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
     27a:	4b2a      	ldr	r3, [pc, #168]	; (324 <ResetHandler+0x168>)
     27c:	2205      	movs	r2, #5
     27e:	701a      	strb	r2, [r3, #0]
    #elif F_CPU == 144000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(12); // config PLL for 144 MHz output
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
     280:	2243      	movs	r2, #67	; 0x43
     282:	705a      	strb	r2, [r3, #1]
    #else
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
    #endif
	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     284:	4b26      	ldr	r3, [pc, #152]	; (320 <ResetHandler+0x164>)
     286:	781a      	ldrb	r2, [r3, #0]
     288:	0691      	lsls	r1, r2, #26
     28a:	d5fb      	bpl.n	284 <ResetHandler+0xc8>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     28c:	781a      	ldrb	r2, [r3, #0]
     28e:	0652      	lsls	r2, r2, #25
     290:	d5fc      	bpl.n	28c <ResetHandler+0xd0>
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) |	 SIM_CLKDIV1_OUTDIV4(3);
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash, USB = 72 * 2 / 3
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) |	 SIM_CLKDIV1_OUTDIV4(2);
     292:	4b25      	ldr	r3, [pc, #148]	; (328 <ResetHandler+0x16c>)
     294:	f04f 7281 	mov.w	r2, #16908288	; 0x1020000
     298:	601a      	str	r2, [r3, #0]
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(2) | SIM_CLKDIV2_USBFRAC;
     29a:	2205      	movs	r2, #5
     29c:	605a      	str	r2, [r3, #4]
#error "Error, F_CPU must be 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     29e:	4b23      	ldr	r3, [pc, #140]	; (32c <ResetHandler+0x170>)
     2a0:	2220      	movs	r2, #32
     2a2:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	781b      	ldrb	r3, [r3, #0]
     2a8:	f003 030c 	and.w	r3, r3, #12
     2ac:	2b0c      	cmp	r3, #12
     2ae:	d1f9      	bne.n	2a4 <ResetHandler+0xe8>
	// now we're in PEE mode
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b0:	4b1f      	ldr	r3, [pc, #124]	; (330 <ResetHandler+0x174>)
     2b2:	4a20      	ldr	r2, [pc, #128]	; (334 <ResetHandler+0x178>)
     2b4:	601a      	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2b6:	4b20      	ldr	r3, [pc, #128]	; (338 <ResetHandler+0x17c>)
     2b8:	4a20      	ldr	r2, [pc, #128]	; (33c <ResetHandler+0x180>)
     2ba:	601a      	str	r2, [r3, #0]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2bc:	2207      	movs	r2, #7
     2be:	f843 2c04 	str.w	r2, [r3, #-4]

	//init_pins();
	__enable_irq();
     2c2:	b662      	cpsie	i
	__libc_init_array();
     2c4:	f00d fc14 	bl	daf0 <__libc_init_array>

	_init_Teensyduino_internal_();
     2c8:	f002 fbfe 	bl	2ac8 <_init_Teensyduino_internal_>
	if (RTC_SR & RTC_SR_TIF) {
     2cc:	4b09      	ldr	r3, [pc, #36]	; (2f4 <ResetHandler+0x138>)
     2ce:	681b      	ldr	r3, [r3, #0]
     2d0:	07db      	lsls	r3, r3, #31
     2d2:	d502      	bpl.n	2da <ResetHandler+0x11e>
		// TODO: this should probably set the time more agressively, if
		// we could reliably detect the first reboot after programming.
		rtc_set(TIME_T);
     2d4:	481a      	ldr	r0, [pc, #104]	; (340 <ResetHandler+0x184>)
     2d6:	f002 fb69 	bl	29ac <rtc_set>
	}

	startup_late_hook();
     2da:	f002 f999 	bl	2610 <startup_late_hook>
	main();
     2de:	f000 fcb1 	bl	c44 <main>
     2e2:	e7fe      	b.n	2e2 <ResetHandler+0x126>
     2e4:	4005200e 	.word	0x4005200e
     2e8:	40048030 	.word	0x40048030
     2ec:	00043f82 	.word	0x00043f82
     2f0:	2b000001 	.word	0x2b000001
     2f4:	4003d014 	.word	0x4003d014
     2f8:	4007d002 	.word	0x4007d002
     2fc:	4007e000 	.word	0x4007e000
     300:	1fff8400 	.word	0x1fff8400
     304:	1fff8d3c 	.word	0x1fff8d3c
     308:	000145fc 	.word	0x000145fc
     30c:	1fff8d40 	.word	0x1fff8d40
     310:	1fff9c94 	.word	0x1fff9c94
     314:	e000ed08 	.word	0xe000ed08
     318:	e000e45f 	.word	0xe000e45f
     31c:	40065000 	.word	0x40065000
     320:	40064006 	.word	0x40064006
     324:	40064004 	.word	0x40064004
     328:	40048044 	.word	0x40048044
     32c:	40064000 	.word	0x40064000
     330:	40048004 	.word	0x40048004
     334:	000510c0 	.word	0x000510c0
     338:	e000e014 	.word	0xe000e014
     33c:	0001193f 	.word	0x0001193f
     340:	5068dd00 	.word	0x5068dd00
     344:	ffffffff 	.word	0xffffffff
     348:	ffffffff 	.word	0xffffffff
     34c:	ffffffff 	.word	0xffffffff
     350:	ffffffff 	.word	0xffffffff
     354:	ffffffff 	.word	0xffffffff
     358:	ffffffff 	.word	0xffffffff
     35c:	ffffffff 	.word	0xffffffff
     360:	ffffffff 	.word	0xffffffff
     364:	ffffffff 	.word	0xffffffff
     368:	ffffffff 	.word	0xffffffff
     36c:	ffffffff 	.word	0xffffffff
     370:	ffffffff 	.word	0xffffffff
     374:	ffffffff 	.word	0xffffffff
     378:	ffffffff 	.word	0xffffffff
     37c:	ffffffff 	.word	0xffffffff
     380:	ffffffff 	.word	0xffffffff
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffffffe     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8d40 	.word	0x1fff8d40
     42c:	00000000 	.word	0x00000000
     430:	000145fc 	.word	0x000145fc

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b06      	ldr	r3, [pc, #24]	; (450 <frame_dummy+0x1c>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4806      	ldr	r0, [pc, #24]	; (454 <frame_dummy+0x20>)
     43c:	4906      	ldr	r1, [pc, #24]	; (458 <frame_dummy+0x24>)
     43e:	f3af 8000 	nop.w
     442:	4806      	ldr	r0, [pc, #24]	; (45c <frame_dummy+0x28>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b113      	cbz	r3, 44e <frame_dummy+0x1a>
     448:	4b05      	ldr	r3, [pc, #20]	; (460 <frame_dummy+0x2c>)
     44a:	b103      	cbz	r3, 44e <frame_dummy+0x1a>
     44c:	4798      	blx	r3
     44e:	bd08      	pop	{r3, pc}
     450:	00000000 	.word	0x00000000
     454:	000145fc 	.word	0x000145fc
     458:	1fff8d44 	.word	0x1fff8d44
     45c:	1fff8d3c 	.word	0x1fff8d3c
     460:	00000000 	.word	0x00000000

00000464 <_ZN14CLEDController13getAdjustmentEh>:
    {
    }

    // allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     464:	2300      	movs	r3, #0

    CLEDController & setTemperature(CRGB temperature) { m_ColorTemperature = temperature; return *this; }
    CLEDController & setTemperature(ColorTemperature temperature) { m_ColorTemperature = temperature; return *this; }
    CRGB getTemperature() { return m_ColorTemperature; }

    CRGB getAdjustment(uint8_t scale) {
     466:	b530      	push	{r4, r5, lr}
     468:	7003      	strb	r3, [r0, #0]
     46a:	7043      	strb	r3, [r0, #1]
     46c:	7083      	strb	r3, [r0, #2]
#if defined(NO_CORRECTION) && (NO_CORRECTION==1)
        return CRGB(scale,scale,scale);
#else
        CRGB adj(0,0,0);

        if(scale > 0) {
     46e:	b172      	cbz	r2, 48e <_ZN14CLEDController13getAdjustmentEh+0x2a>
            for(uint8_t i = 0; i < 3; i++) {
                uint8_t cc = m_ColorCorrection.raw[i];
     470:	7b0d      	ldrb	r5, [r1, #12]
                uint8_t ct = m_ColorTemperature.raw[i];
     472:	7bcc      	ldrb	r4, [r1, #15]
                if(cc > 0 && ct > 0) {
     474:	b135      	cbz	r5, 484 <_ZN14CLEDController13getAdjustmentEh+0x20>
     476:	b12c      	cbz	r4, 484 <_ZN14CLEDController13getAdjustmentEh+0x20>
                    uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
     478:	3401      	adds	r4, #1
     47a:	fb05 4404 	mla	r4, r5, r4, r4
     47e:	4354      	muls	r4, r2
                    work /= 0x10000L;
     480:	0c24      	lsrs	r4, r4, #16
                    adj.raw[i] = work & 0xFF;
     482:	54c4      	strb	r4, [r0, r3]
     484:	3301      	adds	r3, #1
        return CRGB(scale,scale,scale);
#else
        CRGB adj(0,0,0);

        if(scale > 0) {
            for(uint8_t i = 0; i < 3; i++) {
     486:	2b03      	cmp	r3, #3
     488:	f101 0101 	add.w	r1, r1, #1
     48c:	d1f0      	bne.n	470 <_ZN14CLEDController13getAdjustmentEh+0xc>
            }
        }

        return adj;
#endif
    }
     48e:	bd30      	pop	{r4, r5, pc}

00000490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>:
	m_Scale = 255;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
     490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
     492:	1e1e      	subs	r6, r3, #0
	m_Scale = 255;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
     494:	4615      	mov	r5, r2
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
     496:	6803      	ldr	r3, [r0, #0]
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
     498:	bfd8      	it	le
     49a:	2500      	movle	r5, #0
	m_Scale = 255;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
     49c:	4604      	mov	r4, r0
     49e:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
     4a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
     4a4:	bfd8      	it	le
     4a6:	4616      	movle	r6, r2

	pLed->init();
     4a8:	689b      	ldr	r3, [r3, #8]
	pLed->setLeds(data + nOffset, nLeds);
     4aa:	442f      	add	r7, r5
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
     4ac:	4798      	blx	r3
        show(data, nLeds, getAdjustment(brightness))
    }
#endif

    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
     4ae:	6067      	str	r7, [r4, #4]
        m_nLeds = nLeds;
     4b0:	6166      	str	r6, [r4, #20]
	pLed->setLeds(data + nOffset, nLeds);
	return *pLed;
}
     4b2:	4620      	mov	r0, r4
     4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4b6:	ffff 4b0c 	vtbl.8	d20, {d15-d18}, d12

000004b8 <_ZN8CFastLED4showEh>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    // navigating the list of controllers
    static CLEDController *head() { return m_pHead; }
     4b8:	4b0c      	ldr	r3, [pc, #48]	; (4ec <_ZN8CFastLED4showEh+0x34>)

void CFastLED::show(uint8_t scale) {
     4ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
     4be:	681c      	ldr	r4, [r3, #0]
     4c0:	460e      	mov	r6, r1
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
     4c2:	b184      	cbz	r4, 4e6 <_ZN8CFastLED4showEh+0x2e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    // show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
     4c4:	6823      	ldr	r3, [r4, #0]
     4c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
     4ca:	6967      	ldr	r7, [r4, #20]
     4cc:	685d      	ldr	r5, [r3, #4]
     4ce:	4621      	mov	r1, r4
     4d0:	a801      	add	r0, sp, #4
     4d2:	4632      	mov	r2, r6
     4d4:	f7ff ffc6 	bl	464 <_ZN14CLEDController13getAdjustmentEh>
     4d8:	4620      	mov	r0, r4
     4da:	4641      	mov	r1, r8
     4dc:	463a      	mov	r2, r7
     4de:	ab01      	add	r3, sp, #4
     4e0:	47a8      	blx	r5
	pLed->setLeds(data + nOffset, nLeds);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	CLEDController *pCur = CLEDController::head();
     4e2:	68a4      	ldr	r4, [r4, #8]
     4e4:	e7ed      	b.n	4c2 <_ZN8CFastLED4showEh+0xa>
	while(pCur) {
		pCur->showLeds(scale);
		pCur = pCur->next();
	}
}
     4e6:	b002      	add	sp, #8
     4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4ec:	1fff8d60 	.word	0x1fff8d60

000004f0 <_GLOBAL__sub_I_LEDS>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
     4f0:	4b01      	ldr	r3, [pc, #4]	; (4f8 <_GLOBAL__sub_I_LEDS+0x8>)
     4f2:	22ff      	movs	r2, #255	; 0xff
     4f4:	701a      	strb	r2, [r3, #0]
     4f6:	4770      	bx	lr
     4f8:	1fff8d5c 	.word	0x1fff8d5c

000004fc <_ZL15nscale8x3_videoRhS_S_h>:
#endif
}


LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
     4fc:	b530      	push	{r4, r5, lr}
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
     4fe:	7805      	ldrb	r5, [r0, #0]


LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
     500:	1c1c      	adds	r4, r3, #0
     502:	bf18      	it	ne
     504:	2401      	movne	r4, #1
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
     506:	b125      	cbz	r5, 512 <_ZL15nscale8x3_videoRhS_S_h+0x16>
     508:	fb15 f503 	smulbb	r5, r5, r3
     50c:	eb04 2515 	add.w	r5, r4, r5, lsr #8
     510:	b2ed      	uxtb	r5, r5
     512:	7005      	strb	r5, [r0, #0]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
     514:	7808      	ldrb	r0, [r1, #0]
     516:	b120      	cbz	r0, 522 <_ZL15nscale8x3_videoRhS_S_h+0x26>
     518:	fb10 f003 	smulbb	r0, r0, r3
     51c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
     520:	b2c0      	uxtb	r0, r0
     522:	7008      	strb	r0, [r1, #0]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
     524:	7811      	ldrb	r1, [r2, #0]
     526:	b121      	cbz	r1, 532 <_ZL15nscale8x3_videoRhS_S_h+0x36>
     528:	fb11 f103 	smulbb	r1, r1, r3
     52c:	eb04 2111 	add.w	r1, r4, r1, lsr #8
     530:	b2c9      	uxtb	r1, r1
     532:	7011      	strb	r1, [r2, #0]
     534:	bd30      	pop	{r4, r5, pc}

00000536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>:
#define K255 255
#define K171 171
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
     536:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;

    
    uint8_t hue = hsv.hue;
     53a:	7807      	ldrb	r7, [r0, #0]
    uint8_t sat = hsv.sat;
     53c:	f890 9001 	ldrb.w	r9, [r0, #1]
    uint8_t val = hsv.val;
     540:	7884      	ldrb	r4, [r0, #2]
        
    uint8_t offset = hue & 0x1F; // 0..31
     542:	f007 051f 	and.w	r5, r7, #31
#define K255 255
#define K171 171
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
     546:	4688      	mov	r8, r1
    uint8_t offset = hue & 0x1F; // 0..31
    
    // offset8 = offset * 8
    uint8_t offset8 = offset;
    {
        offset8 <<= 1;
     548:	006d      	lsls	r5, r5, #1
        asm volatile("");
        offset8 <<= 1;
     54a:	006d      	lsls	r5, r5, #1
        asm volatile("");
        offset8 <<= 1;
     54c:	006d      	lsls	r5, r5, #1
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
     54e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
     552:	eb02 1202 	add.w	r2, r2, r2, lsl #4
     556:	f007 0640 	and.w	r6, r7, #64	; 0x40
    
    uint8_t third = scale8( offset8, (256 / 3));
        
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
     55a:	f017 0f80 	tst.w	r7, #128	; 0x80
     55e:	f3c2 2207 	ubfx	r2, r2, #8, #8
     562:	f007 0020 	and.w	r0, r7, #32
        // 0XX
        if( ! (hue & 0x40) ) {
     566:	f006 03ff 	and.w	r3, r6, #255	; 0xff
    
    uint8_t third = scale8( offset8, (256 / 3));
        
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
     56a:	d128      	bne.n	5be <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x88>
        // 0XX
        if( ! (hue & 0x40) ) {
     56c:	b97e      	cbnz	r6, 58e <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x58>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
     56e:	f000 01ff 	and.w	r1, r0, #255	; 0xff
     572:	b938      	cbnz	r0, 584 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x4e>
                // 000
                //case 0: // R -> O
                r = K255 - third;
     574:	43d3      	mvns	r3, r2
     576:	f88d 3005 	strb.w	r3, [sp, #5]
                g = third;
     57a:	f88d 2006 	strb.w	r2, [sp, #6]
                b = 0;
     57e:	f88d 1007 	strb.w	r1, [sp, #7]
                FORCE_REFERENCE(b);
     582:	e04b      	b.n	61c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe6>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
     584:	21ab      	movs	r1, #171	; 0xab
     586:	f88d 1005 	strb.w	r1, [sp, #5]
                    g = K85 + third ;
     58a:	3255      	adds	r2, #85	; 0x55
     58c:	e00b      	b.n	5a6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x70>
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
     58e:	f000 03ff 	and.w	r3, r0, #255	; 0xff
     592:	b968      	cbnz	r0, 5b0 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x7a>
     594:	21aa      	movs	r1, #170	; 0xaa
     596:	fb15 f501 	smulbb	r5, r5, r1
     59a:	122d      	asrs	r5, r5, #8
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3));
                    r = K171 - twothirds;
     59c:	f1c5 05ab 	rsb	r5, r5, #171	; 0xab
     5a0:	f88d 5005 	strb.w	r5, [sp, #5]
                    g = K171 + third;
     5a4:	3a55      	subs	r2, #85	; 0x55
     5a6:	f88d 2006 	strb.w	r2, [sp, #6]
                    b = 0;
     5aa:	f88d 3007 	strb.w	r3, [sp, #7]
                    FORCE_REFERENCE(b);
     5ae:	e035      	b.n	61c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe6>
                    FORCE_REFERENCE(b);
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
     5b0:	2300      	movs	r3, #0
     5b2:	f88d 3005 	strb.w	r3, [sp, #5]
                FORCE_REFERENCE(r);
                g = K255 - third;
     5b6:	43d3      	mvns	r3, r2
     5b8:	f88d 3006 	strb.w	r3, [sp, #6]
     5bc:	e02c      	b.n	618 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe2>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
     5be:	b9b6      	cbnz	r6, 5ee <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xb8>
            // 10X
            if( ! ( hue & 0x20) ) {
     5c0:	f000 01ff 	and.w	r1, r0, #255	; 0xff
     5c4:	b968      	cbnz	r0, 5e2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xac>
                // 100
                //case 4: // A -> B
                r = 0;
     5c6:	f88d 1005 	strb.w	r1, [sp, #5]
     5ca:	23aa      	movs	r3, #170	; 0xaa
     5cc:	fb15 f503 	smulbb	r5, r5, r3
     5d0:	0a2d      	lsrs	r5, r5, #8
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3));
                g = K171 - twothirds;
     5d2:	f1c5 03ab 	rsb	r3, r5, #171	; 0xab
                b = K85  + twothirds;
     5d6:	3555      	adds	r5, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3));
                g = K171 - twothirds;
     5d8:	f88d 3006 	strb.w	r3, [sp, #6]
                b = K85  + twothirds;
     5dc:	f88d 5007 	strb.w	r5, [sp, #7]
     5e0:	e01c      	b.n	61c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe6>

            } else {
                // 101
                //case 5: // B -> P
                r = third;
     5e2:	f88d 2005 	strb.w	r2, [sp, #5]
                g = 0;
     5e6:	f88d 3006 	strb.w	r3, [sp, #6]
                FORCE_REFERENCE(g);
                b = K255 - third;
     5ea:	43d2      	mvns	r2, r2
     5ec:	e014      	b.n	618 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe2>

            }
        } else {
            if( !  (hue & 0x20)  ) {
     5ee:	f000 03ff 	and.w	r3, r0, #255	; 0xff
     5f2:	b940      	cbnz	r0, 606 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xd0>
                // 110
                //case 6: // P -- K
                r = K85 + third;
     5f4:	f102 0155 	add.w	r1, r2, #85	; 0x55
     5f8:	f88d 1005 	strb.w	r1, [sp, #5]
                g = 0;
     5fc:	f88d 3006 	strb.w	r3, [sp, #6]
                FORCE_REFERENCE(g);
                b = K171 - third;
     600:	f1c2 02ab 	rsb	r2, r2, #171	; 0xab
     604:	e008      	b.n	618 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xe2>

            } else {
                // 111
                //case 7: // K -> R
                r = K171 + third;
     606:	f1a2 0355 	sub.w	r3, r2, #85	; 0x55
     60a:	f88d 3005 	strb.w	r3, [sp, #5]
                g = 0;
     60e:	2300      	movs	r3, #0
     610:	f88d 3006 	strb.w	r3, [sp, #6]
                FORCE_REFERENCE(g);
                b = K85 - third;
     614:	f1c2 0255 	rsb	r2, r2, #85	; 0x55
     618:	f88d 2007 	strb.w	r2, [sp, #7]
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
     61c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
     620:	d01f      	beq.n	662 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x12c>

        nscale8x3_video( r, g, b, sat);
     622:	464b      	mov	r3, r9

        uint8_t desat = 255 - sat;
     624:	ea6f 0909 	mvn.w	r9, r9
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {

        nscale8x3_video( r, g, b, sat);
     628:	f10d 0005 	add.w	r0, sp, #5
     62c:	f10d 0106 	add.w	r1, sp, #6
     630:	f10d 0207 	add.w	r2, sp, #7

        uint8_t desat = 255 - sat;
     634:	fa5f f989 	uxtb.w	r9, r9
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {

        nscale8x3_video( r, g, b, sat);
     638:	f7ff ff60 	bl	4fc <_ZL15nscale8x3_videoRhS_S_h>
     63c:	fb19 f909 	smulbb	r9, r9, r9

        uint8_t desat = 255 - sat;
        desat = scale8( desat, desat);
        
        uint8_t brightness_floor = desat;
        r += brightness_floor;
     640:	f89d 3005 	ldrb.w	r3, [sp, #5]
     644:	ea4f 2919 	mov.w	r9, r9, lsr #8
     648:	444b      	add	r3, r9
     64a:	f88d 3005 	strb.w	r3, [sp, #5]
        g += brightness_floor;
     64e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     652:	444b      	add	r3, r9
     654:	f88d 3006 	strb.w	r3, [sp, #6]
        b += brightness_floor;
     658:	f89d 3007 	ldrb.w	r3, [sp, #7]
     65c:	4499      	add	r9, r3
     65e:	f88d 9007 	strb.w	r9, [sp, #7]
    }

    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
     662:	2cff      	cmp	r4, #255	; 0xff
     664:	d00f      	beq.n	686 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x150>


LIB8STATIC uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
     666:	fb14 f304 	smulbb	r3, r4, r4
     66a:	3400      	adds	r4, #0
     66c:	bf18      	it	ne
     66e:	2401      	movne	r4, #1
     670:	eb04 2313 	add.w	r3, r4, r3, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        nscale8x3_video( r, g, b, val);
     674:	f10d 0005 	add.w	r0, sp, #5
     678:	f10d 0106 	add.w	r1, sp, #6
     67c:	f10d 0207 	add.w	r2, sp, #7
     680:	b2db      	uxtb	r3, r3
     682:	f7ff ff3b 	bl	4fc <_ZL15nscale8x3_videoRhS_S_h>
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
     686:	f89d 3005 	ldrb.w	r3, [sp, #5]
     68a:	f888 3000 	strb.w	r3, [r8]
    rgb.g = g;
     68e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     692:	f888 3001 	strb.w	r3, [r8, #1]
    rgb.b = b;
     696:	f89d 3007 	ldrb.w	r3, [sp, #7]
     69a:	f888 3002 	strb.w	r3, [r8, #2]
}
     69e:	b003      	add	sp, #12
     6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000006a4 <_ZN7PerlinsD1Ev>:
};

Perlins::Perlins() {
}

Perlins::~Perlins() {
     6a4:	4b01      	ldr	r3, [pc, #4]	; (6ac <_ZN7PerlinsD1Ev+0x8>)
     6a6:	6003      	str	r3, [r0, #0]
}
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	000129d0 	.word	0x000129d0

000006b0 <_ZN7PerlinsD0Ev>:
};

Perlins::Perlins() {
}

Perlins::~Perlins() {
     6b0:	b510      	push	{r4, lr}
     6b2:	4b03      	ldr	r3, [pc, #12]	; (6c0 <_ZN7PerlinsD0Ev+0x10>)
     6b4:	6003      	str	r3, [r0, #0]
     6b6:	4604      	mov	r4, r0
}
     6b8:	f003 fe3a 	bl	4330 <_ZdlPv>
     6bc:	4620      	mov	r0, r4
     6be:	bd10      	pop	{r4, pc}
     6c0:	000129d0 	.word	0x000129d0

000006c4 <_ZN7PerlinsC1Ev>:
49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,
150,254,138,236,205, 93,222,114, 67,29,24, 72,243,141,128,195,78,66,
215,61,156,180
};

Perlins::Perlins() {
     6c4:	4b01      	ldr	r3, [pc, #4]	; (6cc <_ZN7PerlinsC1Ev+0x8>)
     6c6:	6003      	str	r3, [r0, #0]
}
     6c8:	4770      	bx	lr
     6ca:	bf00      	nop
     6cc:	000129d0 	.word	0x000129d0

000006d0 <_ZN7Perlins4fadeEd>:
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
     6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6d2:	4610      	mov	r0, r2
     6d4:	4614      	mov	r4, r2
     6d6:	461d      	mov	r5, r3
     6d8:	4619      	mov	r1, r3
     6da:	f00b fd83 	bl	c1e4 <__aeabi_dmul>
     6de:	4622      	mov	r2, r4
     6e0:	462b      	mov	r3, r5
     6e2:	f00b fd7f 	bl	c1e4 <__aeabi_dmul>
     6e6:	2200      	movs	r2, #0
     6e8:	4606      	mov	r6, r0
     6ea:	460f      	mov	r7, r1
     6ec:	4620      	mov	r0, r4
     6ee:	4629      	mov	r1, r5
     6f0:	4b0b      	ldr	r3, [pc, #44]	; (720 <_ZN7Perlins4fadeEd+0x50>)
     6f2:	f00b fd77 	bl	c1e4 <__aeabi_dmul>
     6f6:	2200      	movs	r2, #0
     6f8:	4b0a      	ldr	r3, [pc, #40]	; (724 <_ZN7Perlins4fadeEd+0x54>)
     6fa:	f00b fbbf 	bl	be7c <__aeabi_dsub>
     6fe:	4602      	mov	r2, r0
     700:	460b      	mov	r3, r1
     702:	4620      	mov	r0, r4
     704:	4629      	mov	r1, r5
     706:	f00b fd6d 	bl	c1e4 <__aeabi_dmul>
     70a:	2200      	movs	r2, #0
     70c:	4b06      	ldr	r3, [pc, #24]	; (728 <_ZN7Perlins4fadeEd+0x58>)
     70e:	f00b fbb7 	bl	be80 <__adddf3>
     712:	4602      	mov	r2, r0
     714:	460b      	mov	r3, r1
     716:	4630      	mov	r0, r6
     718:	4639      	mov	r1, r7
     71a:	f00b fd63 	bl	c1e4 <__aeabi_dmul>
     71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     720:	40180000 	.word	0x40180000
     724:	402e0000 	.word	0x402e0000
     728:	40240000 	.word	0x40240000

0000072c <_ZN7Perlins4gradEiddd>:
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
     72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     72e:	468e      	mov	lr, r1
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
     730:	f001 010f 	and.w	r1, r1, #15
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     734:	2907      	cmp	r1, #7
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
     736:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     73a:	dc04      	bgt.n	746 <_ZN7Perlins4gradEiddd+0x1a>
    		v = h < 4 ? y : h==12||h==14 ? x : z;
     73c:	2903      	cmp	r1, #3
double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     73e:	4616      	mov	r6, r2
     740:	461f      	mov	r7, r3
    		v = h < 4 ? y : h==12||h==14 ? x : z;
     742:	dd0b      	ble.n	75c <_ZN7Perlins4gradEiddd+0x30>
     744:	e001      	b.n	74a <_ZN7Perlins4gradEiddd+0x1e>
double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
double Perlins::grad(int hash, double x, double y, double z)
{
    int     h = hash & 15;          /* CONVERT LO 4 BITS OF HASH CODE */
    double  u = h < 8 ? x : y,      /* INTO 12 GRADIENT DIRECTIONS.   */
     746:	4626      	mov	r6, r4
     748:	462f      	mov	r7, r5
    		v = h < 4 ? y : h==12||h==14 ? x : z;
     74a:	f00e 010d 	and.w	r1, lr, #13
     74e:	290c      	cmp	r1, #12
     750:	d002      	beq.n	758 <_ZN7Perlins4gradEiddd+0x2c>
     752:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
     756:	e001      	b.n	75c <_ZN7Perlins4gradEiddd+0x30>
     758:	4614      	mov	r4, r2
     75a:	461d      	mov	r5, r3
    return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
     75c:	f01e 0f01 	tst.w	lr, #1
     760:	bf14      	ite	ne
     762:	f107 4100 	addne.w	r1, r7, #2147483648	; 0x80000000
     766:	4639      	moveq	r1, r7
     768:	f01e 0f02 	tst.w	lr, #2
     76c:	4630      	mov	r0, r6
     76e:	4622      	mov	r2, r4
     770:	bf14      	ite	ne
     772:	f105 4300 	addne.w	r3, r5, #2147483648	; 0x80000000
     776:	462b      	moveq	r3, r5
     778:	f00b fb82 	bl	be80 <__adddf3>
}
     77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     77e:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00000780 <_ZN7Perlins6pnoiseEddd>:

Perlins::~Perlins() {
}

double Perlins::pnoise(double x, double y, double z)
{
     780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
     784:	4619      	mov	r1, r3

Perlins::~Perlins() {
}

double Perlins::pnoise(double x, double y, double z)
{
     786:	b099      	sub	sp, #100	; 0x64
     788:	4680      	mov	r8, r0
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
     78a:	4610      	mov	r0, r2

Perlins::~Perlins() {
}

double Perlins::pnoise(double x, double y, double z)
{
     78c:	4614      	mov	r4, r2
     78e:	461d      	mov	r5, r3
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
     790:	f00a f9fa 	bl	ab88 <floor>
     794:	9104      	str	r1, [sp, #16]
     796:	9005      	str	r0, [sp, #20]
     798:	f00b ffbe 	bl	c718 <__aeabi_d2iz>
     79c:	fa5f fb80 	uxtb.w	fp, r0
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
     7a0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
     7a4:	f00a f9f0 	bl	ab88 <floor>
     7a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
     7ac:	f00b ffb4 	bl	c718 <__aeabi_d2iz>
     7b0:	fa5f fa80 	uxtb.w	sl, r0
          Z = (int)floor(z) & 255;
     7b4:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
     7b8:	f00a f9e6 	bl	ab88 <floor>
     7bc:	460f      	mov	r7, r1
     7be:	4606      	mov	r6, r0
     7c0:	f00b ffaa 	bl	c718 <__aeabi_d2iz>
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
     7c4:	9a05      	ldr	r2, [sp, #20]
     7c6:	9b04      	ldr	r3, [sp, #16]

double Perlins::pnoise(double x, double y, double z)
{
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
     7c8:	fa5f f980 	uxtb.w	r9, r0
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
     7cc:	4629      	mov	r1, r5
     7ce:	4620      	mov	r0, r4
     7d0:	f00b fb54 	bl	be7c <__aeabi_dsub>
    y -= floor(y);                             /* OF POINT IN CUBE.   */
     7d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
double Perlins::pnoise(double x, double y, double z)
{
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
     7d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    y -= floor(y);                             /* OF POINT IN CUBE.   */
     7dc:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
     7e0:	f00b fb4c 	bl	be7c <__aeabi_dsub>
    z -= floor(z);
     7e4:	4632      	mov	r2, r6
{
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
     7e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    z -= floor(z);
     7ea:	463b      	mov	r3, r7
     7ec:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
     7f0:	f00b fb44 	bl	be7c <__aeabi_dsub>

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
     7f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
          Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);
     7f8:	e9cd 0108 	strd	r0, r1, [sp, #32]

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
     7fc:	4640      	mov	r0, r8
     7fe:	f7ff ff67 	bl	6d0 <_ZN7Perlins4fadeEd>
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
     802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
          Z = (int)floor(z) & 255;
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
     806:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
     80a:	4640      	mov	r0, r8
     80c:	f7ff ff60 	bl	6d0 <_ZN7Perlins4fadeEd>
            w = fade(z);

    int  A = P(X)+Y,
     810:	4c98      	ldr	r4, [pc, #608]	; (a74 <_ZN7Perlins6pnoiseEddd+0x2f4>)
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);
     812:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
     816:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
            w = fade(z);
     81a:	4640      	mov	r0, r8
     81c:	f7ff ff58 	bl	6d0 <_ZN7Perlins4fadeEd>

    int  A = P(X)+Y,
     820:	f814 300b 	ldrb.w	r3, [r4, fp]
     824:	4453      	add	r3, sl
         AA = P(A)+Z,
     826:	b2da      	uxtb	r2, r3
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
     828:	3301      	adds	r3, #1
     82a:	b2db      	uxtb	r3, r3
         B = P(X+1)+Y,
     82c:	f10b 0b01 	add.w	fp, fp, #1
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
     830:	5ce3      	ldrb	r3, [r4, r3]
    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
     832:	5ca7      	ldrb	r7, [r4, r2]
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
         B = P(X+1)+Y,
     834:	fa5f fb8b 	uxtb.w	fp, fp
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
     838:	eb03 0509 	add.w	r5, r3, r9
         B = P(X+1)+Y,
     83c:	f814 300b 	ldrb.w	r3, [r4, fp]
     840:	449a      	add	sl, r3
         BA = P(B)+Z,
     842:	fa5f f38a 	uxtb.w	r3, sl
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */
     846:	f10a 0a01 	add.w	sl, sl, #1
     84a:	fa5f fa8a 	uxtb.w	sl, sl

    int  A = P(X)+Y,
         AA = P(A)+Z,
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
         B = P(X+1)+Y,
         BA = P(B)+Z,
     84e:	5ce6      	ldrb	r6, [r4, r3]
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */
     850:	f814 300a 	ldrb.w	r3, [r4, sl]
    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);

    int  A = P(X)+Y,
         AA = P(A)+Z,
     854:	444f      	add	r7, r9
         AB = P(A+1)+Z,                        /* HASH COORDINATES OF */
         B = P(X+1)+Y,
         BA = P(B)+Z,
     856:	444e      	add	r6, r9
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */
     858:	4499      	add	r9, r3

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
     85a:	b2fb      	uxtb	r3, r7
    y -= floor(y);                             /* OF POINT IN CUBE.   */
    z -= floor(z);

    double  u = fade(x),                       /* COMPUTE FADE CURVES */
            v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
            w = fade(z);
     85c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     860:	5ce1      	ldrb	r1, [r4, r3]
     862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     866:	e9cd 2300 	strd	r2, r3, [sp]
     86a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     86e:	4640      	mov	r0, r8
     870:	e9cd 2302 	strd	r2, r3, [sp, #8]
     874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     878:	f7ff ff58 	bl	72c <_ZN7Perlins4gradEiddd>
     87c:	2200      	movs	r2, #0
     87e:	4682      	mov	sl, r0
     880:	468b      	mov	fp, r1
     882:	4b7d      	ldr	r3, [pc, #500]	; (a78 <_ZN7Perlins6pnoiseEddd+0x2f8>)
     884:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     888:	f00b faf8 	bl	be7c <__aeabi_dsub>
         B = P(X+1)+Y,
         BA = P(B)+Z,
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
     88c:	b2f3      	uxtb	r3, r6
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     88e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
     892:	5ce1      	ldrb	r1, [r4, r3]
     894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     898:	e9cd 2300 	strd	r2, r3, [sp]
     89c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     8a0:	4640      	mov	r0, r8
     8a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
     8a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     8aa:	f7ff ff3f 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     8ae:	4652      	mov	r2, sl
     8b0:	465b      	mov	r3, fp
     8b2:	f00b fae3 	bl	be7c <__aeabi_dsub>
     8b6:	4602      	mov	r2, r0
     8b8:	460b      	mov	r3, r1
     8ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     8be:	f00b fc91 	bl	c1e4 <__aeabi_dmul>
     8c2:	4602      	mov	r2, r0
     8c4:	460b      	mov	r3, r1
     8c6:	4650      	mov	r0, sl
     8c8:	4659      	mov	r1, fp
     8ca:	f00b fad9 	bl	be80 <__adddf3>
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     8ce:	2200      	movs	r2, #0
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     8d0:	4682      	mov	sl, r0
     8d2:	468b      	mov	fp, r1
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     8d4:	4b68      	ldr	r3, [pc, #416]	; (a78 <_ZN7Perlins6pnoiseEddd+0x2f8>)
     8d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     8da:	f00b facf 	bl	be7c <__aeabi_dsub>
         BA = P(B)+Z,
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
     8de:	b2eb      	uxtb	r3, r5
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     8e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
     8e4:	5ce1      	ldrb	r1, [r4, r3]
     8e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     8ea:	e9cd 2300 	strd	r2, r3, [sp]
     8ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     8f2:	4640      	mov	r0, r8
     8f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
     8f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     8fc:	f7ff ff16 	bl	72c <_ZN7Perlins4gradEiddd>
         BB = P(B+1)+Z;                        /* THE 8 CUBE CORNERS, */

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
     900:	fa5f f389 	uxtb.w	r3, r9
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     904:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
     908:	5ce1      	ldrb	r1, [r4, r3]
     90a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     90e:	e9cd 2300 	strd	r2, r3, [sp]
     912:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     916:	4640      	mov	r0, r8
     918:	e9cd 2302 	strd	r2, r3, [sp, #8]
     91c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     920:	f7ff ff04 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     924:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
     928:	f00b faa8 	bl	be7c <__aeabi_dsub>
     92c:	4602      	mov	r2, r0
     92e:	460b      	mov	r3, r1
     930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     934:	f00b fc56 	bl	c1e4 <__aeabi_dmul>
     938:	4602      	mov	r2, r0
     93a:	460b      	mov	r3, r1
     93c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     940:	f00b fa9e 	bl	be80 <__adddf3>
     944:	4652      	mov	r2, sl
     946:	465b      	mov	r3, fp
     948:	f00b fa98 	bl	be7c <__aeabi_dsub>
     94c:	4602      	mov	r2, r0
     94e:	460b      	mov	r3, r1
     950:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
     954:	f00b fc46 	bl	c1e4 <__aeabi_dmul>
     958:	4602      	mov	r2, r0
     95a:	460b      	mov	r3, r1
     95c:	4650      	mov	r0, sl
     95e:	4659      	mov	r1, fp
     960:	f00b fa8e 	bl	be80 <__adddf3>
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     964:	2200      	movs	r2, #0
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     966:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     96a:	4b43      	ldr	r3, [pc, #268]	; (a78 <_ZN7Perlins6pnoiseEddd+0x2f8>)
     96c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
     970:	f00b fa84 	bl	be7c <__aeabi_dsub>

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
     974:	3701      	adds	r7, #1
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     976:	e9dd 2306 	ldrd	r2, r3, [sp, #24]

    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
     97a:	b2ff      	uxtb	r7, r7
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     97c:	4682      	mov	sl, r0
     97e:	468b      	mov	fp, r1
     980:	e9cd 2300 	strd	r2, r3, [sp]
     984:	5de1      	ldrb	r1, [r4, r7]
     986:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     98a:	e9cd ab02 	strd	sl, fp, [sp, #8]
     98e:	4640      	mov	r0, r8
     990:	f7ff fecc 	bl	72c <_ZN7Perlins4gradEiddd>
    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
     994:	3601      	adds	r6, #1
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     996:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    return lerp(w,lerp(v,lerp(u, grad(P(AA  ), x, y, z),   /* AND ADD */
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
     99a:	b2f6      	uxtb	r6, r6
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     99c:	e9cd 0108 	strd	r0, r1, [sp, #32]
     9a0:	e9cd 2300 	strd	r2, r3, [sp]
     9a4:	5da1      	ldrb	r1, [r4, r6]
     9a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     9aa:	e9cd ab02 	strd	sl, fp, [sp, #8]
     9ae:	4640      	mov	r0, r8
     9b0:	f7ff febc 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     9b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     9b8:	f00b fa60 	bl	be7c <__aeabi_dsub>
     9bc:	4602      	mov	r2, r0
     9be:	460b      	mov	r3, r1
     9c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     9c4:	f00b fc0e 	bl	c1e4 <__aeabi_dmul>
     9c8:	4602      	mov	r2, r0
     9ca:	460b      	mov	r3, r1
     9cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
     9d0:	f00b fa56 	bl	be80 <__adddf3>
                              grad(P(BA  ), x-1, y, z)),   /* BLENDED */
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
     9d4:	1c6b      	adds	r3, r5, #1
     9d6:	b2db      	uxtb	r3, r3
                       grad(P(BB+1), x-1, y-1, z-1))));
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     9d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
                  lerp(u, grad(P(AB  ), x, y-1, z),        /* RESULTS */
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
     9dc:	5ce1      	ldrb	r1, [r4, r3]
     9de:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     9e2:	e9cd ab02 	strd	sl, fp, [sp, #8]
     9e6:	e9cd 2300 	strd	r2, r3, [sp]
     9ea:	4640      	mov	r0, r8
     9ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     9f0:	f7ff fe9c 	bl	72c <_ZN7Perlins4gradEiddd>
     9f4:	f109 0901 	add.w	r9, r9, #1
     9f8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
     9fc:	fa5f f989 	uxtb.w	r9, r9
     a00:	4606      	mov	r6, r0
     a02:	460f      	mov	r7, r1
     a04:	e9cd 2300 	strd	r2, r3, [sp]
     a08:	f814 1009 	ldrb.w	r1, [r4, r9]
     a0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     a10:	e9cd ab02 	strd	sl, fp, [sp, #8]
     a14:	4640      	mov	r0, r8
     a16:	f7ff fe89 	bl	72c <_ZN7Perlins4gradEiddd>
}

double Perlins::fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }
double Perlins::lerp(double t, double a, double b){ return a + t * (b - a); }
     a1a:	4632      	mov	r2, r6
     a1c:	463b      	mov	r3, r7
     a1e:	f00b fa2d 	bl	be7c <__aeabi_dsub>
     a22:	4602      	mov	r2, r0
     a24:	460b      	mov	r3, r1
     a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     a2a:	f00b fbdb 	bl	c1e4 <__aeabi_dmul>
     a2e:	4602      	mov	r2, r0
     a30:	460b      	mov	r3, r1
     a32:	4630      	mov	r0, r6
     a34:	4639      	mov	r1, r7
     a36:	f00b fa23 	bl	be80 <__adddf3>
     a3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     a3e:	f00b fa1d 	bl	be7c <__aeabi_dsub>
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
     a4a:	f00b fbcb 	bl	c1e4 <__aeabi_dmul>
     a4e:	4602      	mov	r2, r0
     a50:	460b      	mov	r3, r1
     a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     a56:	f00b fa13 	bl	be80 <__adddf3>
     a5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
     a5e:	f00b fa0d 	bl	be7c <__aeabi_dsub>
     a62:	4602      	mov	r2, r0
     a64:	460b      	mov	r3, r1
     a66:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
     a6a:	f00b fbbb 	bl	c1e4 <__aeabi_dmul>
     a6e:	4602      	mov	r2, r0
     a70:	460b      	mov	r3, r1
     a72:	e003      	b.n	a7c <_ZN7Perlins6pnoiseEddd+0x2fc>
     a74:	000128c4 	.word	0x000128c4
     a78:	3ff00000 	.word	0x3ff00000
     a7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     a80:	f00b f9fe 	bl	be80 <__adddf3>
                       grad(P(BB  ), x-1, y-1, z))),       /* FROM  8 */
                lerp(v, lerp(u, grad(P(AA+1), x, y, z-1),  /* CORNERS */
                     grad(P(BA+1), x-1, y, z-1)),          /* OF CUBE */
                  lerp(u, grad(P(AB+1), x, y-1, z-1),
                       grad(P(BB+1), x-1, y-1, z-1))));
}
     a84:	b019      	add	sp, #100	; 0x64
     a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a8a:	bf00      	nop

00000a8c <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9clearLedsEi>:

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     a8c:	b513      	push	{r0, r1, r4, lr}
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     a8e:	6803      	ldr	r3, [r0, #0]
     a90:	681c      	ldr	r4, [r3, #0]
     a92:	2300      	movs	r3, #0

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     a94:	460a      	mov	r2, r1
     a96:	f88d 3000 	strb.w	r3, [sp]
     a9a:	f88d 3001 	strb.w	r3, [sp, #1]
     a9e:	f88d 3002 	strb.w	r3, [sp, #2]
     aa2:	f88d 3004 	strb.w	r3, [sp, #4]
     aa6:	f88d 3005 	strb.w	r3, [sp, #5]
     aaa:	f88d 3006 	strb.w	r3, [sp, #6]
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     aae:	4669      	mov	r1, sp
     ab0:	ab01      	add	r3, sp, #4
     ab2:	47a0      	blx	r4
	}
     ab4:	b002      	add	sp, #8
     ab6:	bd10      	pop	{r4, pc}

00000ab8 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9clearLedsEi>:

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     ab8:	b513      	push	{r0, r1, r4, lr}
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     aba:	6803      	ldr	r3, [r0, #0]
     abc:	681c      	ldr	r4, [r3, #0]
     abe:	2300      	movs	r3, #0

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     ac0:	460a      	mov	r2, r1
     ac2:	f88d 3000 	strb.w	r3, [sp]
     ac6:	f88d 3001 	strb.w	r3, [sp, #1]
     aca:	f88d 3002 	strb.w	r3, [sp, #2]
     ace:	f88d 3004 	strb.w	r3, [sp, #4]
     ad2:	f88d 3005 	strb.w	r3, [sp, #5]
     ad6:	f88d 3006 	strb.w	r3, [sp, #6]
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     ada:	4669      	mov	r1, sp
     adc:	ab01      	add	r3, sp, #4
     ade:	47a0      	blx	r4
	}
     ae0:	b002      	add	sp, #8
     ae2:	bd10      	pop	{r4, pc}

00000ae4 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9clearLedsEi>:

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     ae4:	b513      	push	{r0, r1, r4, lr}
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     ae6:	6803      	ldr	r3, [r0, #0]
     ae8:	681c      	ldr	r4, [r3, #0]
     aea:	2300      	movs	r3, #0

	virtual void init() {
		mSPI.init();
	}

	virtual void clearLeds(int nLeds) {
     aec:	460a      	mov	r2, r1
     aee:	f88d 3000 	strb.w	r3, [sp]
     af2:	f88d 3001 	strb.w	r3, [sp, #1]
     af6:	f88d 3002 	strb.w	r3, [sp, #2]
     afa:	f88d 3004 	strb.w	r3, [sp, #4]
     afe:	f88d 3005 	strb.w	r3, [sp, #5]
     b02:	f88d 3006 	strb.w	r3, [sp, #6]
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
     b06:	4669      	mov	r1, sp
     b08:	ab01      	add	r3, sp, #4
     b0a:	47a0      	blx	r4
	}
     b0c:	b002      	add	sp, #8
     b0e:	bd10      	pop	{r4, pc}

00000b10 <_Z16modeButtonChangev>:
#define MODE_PIN 0
#define RANDOM_PIN 3

bool modeChange = false;
unsigned long lastActionTime = millis();
void modeButtonChange() {
     b10:	b513      	push	{r0, r1, r4, lr}
    if ((digitalRead(MODE_PIN) == HIGH) && (millis() >= lastActionTime + 200)) {
     b12:	2000      	movs	r0, #0
     b14:	f001 ff7a 	bl	2a0c <digitalRead>
     b18:	2801      	cmp	r0, #1
     b1a:	d10e      	bne.n	b3a <_Z16modeButtonChangev+0x2a>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
     b1c:	4a08      	ldr	r2, [pc, #32]	; (b40 <_Z16modeButtonChangev+0x30>)
     b1e:	6813      	ldr	r3, [r2, #0]
     b20:	9300      	str	r3, [sp, #0]
     b22:	4b08      	ldr	r3, [pc, #32]	; (b44 <_Z16modeButtonChangev+0x34>)
	return ret;
     b24:	9c00      	ldr	r4, [sp, #0]
     b26:	6819      	ldr	r1, [r3, #0]
     b28:	31c8      	adds	r1, #200	; 0xc8
     b2a:	428c      	cmp	r4, r1
     b2c:	d305      	bcc.n	b3a <_Z16modeButtonChangev+0x2a>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
     b2e:	6812      	ldr	r2, [r2, #0]
        modeChange = true;
     b30:	4905      	ldr	r1, [pc, #20]	; (b48 <_Z16modeButtonChangev+0x38>)
     b32:	9201      	str	r2, [sp, #4]
	return ret;
     b34:	9a01      	ldr	r2, [sp, #4]
     b36:	7008      	strb	r0, [r1, #0]
        lastActionTime = millis();
     b38:	601a      	str	r2, [r3, #0]
    }
}
     b3a:	b002      	add	sp, #8
     b3c:	bd10      	pop	{r4, pc}
     b3e:	bf00      	nop
     b40:	1fff91a8 	.word	0x1fff91a8
     b44:	1fff90bc 	.word	0x1fff90bc
     b48:	1fff90c0 	.word	0x1fff90c0

00000b4c <_ZN5Print7printlnEPKc>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     b4c:	b538      	push	{r3, r4, r5, lr}
     b4e:	4604      	mov	r4, r0
class Print
{
  public:
	Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     b50:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     b52:	460d      	mov	r5, r1
class Print
{
  public:
	Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     b54:	f001 fda2 	bl	269c <strlen>
     b58:	6823      	ldr	r3, [r4, #0]
     b5a:	4602      	mov	r2, r0
     b5c:	4629      	mov	r1, r5
     b5e:	685b      	ldr	r3, [r3, #4]
     b60:	4620      	mov	r0, r4
     b62:	4798      	blx	r3
     b64:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     b66:	4620      	mov	r0, r4
     b68:	f001 ffec 	bl	2b44 <_ZN5Print7printlnEv>
     b6c:	4428      	add	r0, r5
     b6e:	bd38      	pop	{r3, r4, r5, pc}

00000b70 <_ZN14CLEDControllerC1Ev>:
#ifdef SUPPORT_ARGB
    // as above, but every 4th uint8_t is assumed to be alpha channel data, and will be skipped
    virtual void show(const struct CARGB *data, int nLeds, CRGB scale) = 0;
#endif
public:
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     b70:	4b0c      	ldr	r3, [pc, #48]	; (ba4 <_ZN14CLEDControllerC1Ev+0x34>)
     b72:	6003      	str	r3, [r0, #0]
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    {
    }

    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b74:	23ff      	movs	r3, #255	; 0xff
     b76:	7303      	strb	r3, [r0, #12]
     b78:	7343      	strb	r3, [r0, #13]
     b7a:	7383      	strb	r3, [r0, #14]
    {

    }

    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b7c:	73c3      	strb	r3, [r0, #15]
     b7e:	7403      	strb	r3, [r0, #16]
     b80:	7443      	strb	r3, [r0, #17]
     b82:	2301      	movs	r3, #1
     b84:	7483      	strb	r3, [r0, #18]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     b86:	4b08      	ldr	r3, [pc, #32]	; (ba8 <_ZN14CLEDControllerC1Ev+0x38>)
#ifdef SUPPORT_ARGB
    // as above, but every 4th uint8_t is assumed to be alpha channel data, and will be skipped
    virtual void show(const struct CARGB *data, int nLeds, CRGB scale) = 0;
#endif
public:
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     b88:	2200      	movs	r2, #0
     b8a:	6042      	str	r2, [r0, #4]
     b8c:	6142      	str	r2, [r0, #20]
        m_pNext = NULL;
     b8e:	6082      	str	r2, [r0, #8]
        if(m_pHead==NULL) { m_pHead = this; }
     b90:	681a      	ldr	r2, [r3, #0]
     b92:	b902      	cbnz	r2, b96 <_ZN14CLEDControllerC1Ev+0x26>
     b94:	6018      	str	r0, [r3, #0]
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     b96:	4a05      	ldr	r2, [pc, #20]	; (bac <_ZN14CLEDControllerC1Ev+0x3c>)
     b98:	6813      	ldr	r3, [r2, #0]
     b9a:	b103      	cbz	r3, b9e <_ZN14CLEDControllerC1Ev+0x2e>
     b9c:	6098      	str	r0, [r3, #8]
        m_pTail = this;
     b9e:	6010      	str	r0, [r2, #0]
    }
     ba0:	4770      	bx	lr
     ba2:	bf00      	nop
     ba4:	000129e0 	.word	0x000129e0
     ba8:	1fff8d60 	.word	0x1fff8d60
     bac:	1fff8d64 	.word	0x1fff8d64

00000bb0 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
     bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     bb2:	e890 0048 	ldmia.w	r0, {r3, r6}
     bb6:	1af6      	subs	r6, r6, r3
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
     bb8:	10b6      	asrs	r6, r6, #2
     bba:	bf14      	ite	ne
     bbc:	4633      	movne	r3, r6
     bbe:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
     bc0:	199b      	adds	r3, r3, r6
     bc2:	4604      	mov	r4, r0
     bc4:	460f      	mov	r7, r1
     bc6:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
     bca:	d203      	bcs.n	bd4 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x24>
     bcc:	42b3      	cmp	r3, r6
     bce:	bf38      	it	cc
     bd0:	461e      	movcc	r6, r3
    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
     bd2:	b126      	cbz	r6, bde <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x2e>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
     bd4:	00b0      	lsls	r0, r6, #2
     bd6:	f003 fbaf 	bl	4338 <_Znwj>
     bda:	4605      	mov	r5, r0
     bdc:	e000      	b.n	be0 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x30>
     bde:	4635      	mov	r5, r6

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     be0:	6862      	ldr	r2, [r4, #4]
     be2:	6823      	ldr	r3, [r4, #0]
     be4:	1ad3      	subs	r3, r2, r3
     be6:	109b      	asrs	r3, r3, #2
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
     be8:	eb05 0183 	add.w	r1, r5, r3, lsl #2

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     bec:	683a      	ldr	r2, [r7, #0]
     bee:	b109      	cbz	r1, bf4 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x44>
     bf0:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
	  const ptrdiff_t _Num = __last - __first;
     bf4:	e894 0082 	ldmia.w	r4, {r1, r7}
     bf8:	1a7f      	subs	r7, r7, r1
	  if (_Num)
     bfa:	10bf      	asrs	r7, r7, #2
     bfc:	ea4f 0787 	mov.w	r7, r7, lsl #2
     c00:	d003      	beq.n	c0a <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
     c02:	4628      	mov	r0, r5
     c04:	463a      	mov	r2, r7
     c06:	f00d fb5d 	bl	e2c4 <memmove>
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
     c0a:	6820      	ldr	r0, [r4, #0]
	  return __result + _Num;
     c0c:	442f      	add	r7, r5
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
     c0e:	3704      	adds	r7, #4
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
     c10:	b108      	cbz	r0, c16 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x66>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
     c12:	f003 fb8d 	bl	4330 <_ZdlPv>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
     c16:	e884 00a0 	stmia.w	r4, {r5, r7}
	this->_M_impl._M_end_of_storage = __new_start + __len;
     c1a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
     c1e:	60a5      	str	r5, [r4, #8]
     c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000c22 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
     c22:	b538      	push	{r3, r4, r5, lr}
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     c24:	6842      	ldr	r2, [r0, #4]
     c26:	6884      	ldr	r4, [r0, #8]
     c28:	42a2      	cmp	r2, r4

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
     c2a:	4603      	mov	r3, r0
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     c2c:	d006      	beq.n	c3c <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_+0x1a>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     c2e:	6809      	ldr	r1, [r1, #0]
     c30:	b102      	cbz	r2, c34 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_+0x12>
     c32:	6011      	str	r1, [r2, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
     c34:	685a      	ldr	r2, [r3, #4]
     c36:	3204      	adds	r2, #4
     c38:	605a      	str	r2, [r3, #4]
     c3a:	bd38      	pop	{r3, r4, r5, pc}
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
     c3c:	f7ff ffb8 	bl	bb0 <_ZNSt6vectorIP8BaseModeSaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_>
     c40:	bd38      	pop	{r3, r4, r5, pc}
     c42:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00000c44 <main>:

extern "C" int main(void)
{
     c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Serial.begin(9600);
	static bool reboot = false;
	int brightness = LED_DEFAULT_BRIGHTNESS;

    pinMode(RANDOM_PIN, INPUT);
     c48:	2100      	movs	r1, #0
        lastActionTime = millis();
    }
}

extern "C" int main(void)
{
     c4a:	b088      	sub	sp, #32
    Serial.begin(9600);
	static bool reboot = false;
	int brightness = LED_DEFAULT_BRIGHTNESS;

    pinMode(RANDOM_PIN, INPUT);
     c4c:	2003      	movs	r0, #3
     c4e:	f001 feeb 	bl	2a28 <pinMode>
    randomSeed(analogRead(RANDOM_PIN));
     c52:	2003      	movs	r0, #3
     c54:	f001 fa28 	bl	20a8 <analogRead>
     c58:	f003 fb30 	bl	42bc <_Z10randomSeedm>
    random16_add_entropy(random());
     c5c:	f003 fb34 	bl	42c8 <_Z6randomv>
    return rand16seed;
}

LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
     c60:	4bb3      	ldr	r3, [pc, #716]	; (f30 <main+0x2ec>)
     c62:	881a      	ldrh	r2, [r3, #0]
     c64:	4410      	add	r0, r2
     c66:	8018      	strh	r0, [r3, #0]

//	analogReference(DEFAULT);
//	analogReadResolution(10); // anything more seemed like overkill
//	analogReadAveraging(10);

	pinMode(LED_PIN, OUTPUT);
     c68:	2101      	movs	r1, #1
     c6a:	200d      	movs	r0, #13
     c6c:	f001 fedc 	bl	2a28 <pinMode>
	pinMode(15, INPUT);
     c70:	200f      	movs	r0, #15
     c72:	2100      	movs	r1, #0
     c74:	f001 fed8 	bl	2a28 <pinMode>

    // <cgerstle> button
    pinMode(MODE_PIN, INPUT);
     c78:	2000      	movs	r0, #0
     c7a:	4601      	mov	r1, r0
     c7c:	f001 fed4 	bl	2a28 <pinMode>
    attachInterrupt(MODE_PIN, modeButtonChange, RISING);
     c80:	2000      	movs	r0, #0
     c82:	49ac      	ldr	r1, [pc, #688]	; (f34 <main+0x2f0>)
     c84:	2203      	movs	r2, #3
     c86:	f001 fd43 	bl	2710 <attachInterrupt>

	begin:

	FastLED.setBrightness(LED_DEFAULT_BRIGHTNESS);
     c8a:	4bab      	ldr	r3, [pc, #684]	; (f38 <main+0x2f4>)
     c8c:	681c      	ldr	r4, [r3, #0]
			case WS2811_PORTC: return addLeds(new BlockClocklessController<NUM_LANES, NS(350), NS(350), NS(550)>(), data, nLedsOrOffset, nLedsIfOffset);
		}
	}
#endif

	void setBrightness(uint8_t scale) { m_Scale = scale; }
     c8e:	2364      	movs	r3, #100	; 0x64
     c90:	7023      	strb	r3, [r4, #0]
     c92:	2500      	movs	r5, #0
     c94:	f8df 82f8 	ldr.w	r8, [pc, #760]	; f90 <main+0x34c>
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     c98:	2300      	movs	r3, #0
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     c9a:	eb08 0105 	add.w	r1, r8, r5
     c9e:	a804      	add	r0, sp, #16
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     ca0:	f88d 3010 	strb.w	r3, [sp, #16]
     ca4:	f88d 3011 	strb.w	r3, [sp, #17]
     ca8:	f88d 3012 	strb.w	r3, [sp, #18]
     cac:	3503      	adds	r5, #3
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     cae:	f7ff fc42 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
	for (uint8_t i = 0; i < nLEDS; i++)
     cb2:	f240 23ee 	movw	r3, #750	; 0x2ee
     cb6:	429d      	cmp	r5, r3
     cb8:	4647      	mov	r7, r8
     cba:	d1eb      	bne.n	c94 <main+0x50>
	    leds[i] = CHSV(0, 0, 0);
	led_init();
     cbc:	4b9f      	ldr	r3, [pc, #636]	; (f3c <main+0x2f8>)
		switch(CHIPSET) {
			case LPD8806: { static LPD8806Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     cbe:	4da0      	ldr	r5, [pc, #640]	; (f40 <main+0x2fc>)
     cc0:	f8d3 9000 	ldr.w	r9, [r3]
     cc4:	682b      	ldr	r3, [r5, #0]
     cc6:	f013 0a01 	ands.w	sl, r3, #1
     cca:	d10e      	bne.n	cea <main+0xa6>
     ccc:	4628      	mov	r0, r5
     cce:	f001 fcb1 	bl	2634 <__cxa_guard_acquire>
     cd2:	b150      	cbz	r0, cea <main+0xa6>
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
	}

public:
	P9813Controller() {}
     cd4:	4e9b      	ldr	r6, [pc, #620]	; (f44 <main+0x300>)
     cd6:	4630      	mov	r0, r6
     cd8:	f7ff ff4a 	bl	b70 <_ZN14CLEDControllerC1Ev>
     cdc:	4b9a      	ldr	r3, [pc, #616]	; (f48 <main+0x304>)
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
     cde:	f8c6 a018 	str.w	sl, [r6, #24]
     ce2:	4628      	mov	r0, r5
     ce4:	6033      	str	r3, [r6, #0]
     ce6:	f001 fcab 	bl	2640 <__cxa_guard_release>
     cea:	4649      	mov	r1, r9
     cec:	2300      	movs	r3, #0
     cee:	4895      	ldr	r0, [pc, #596]	; (f44 <main+0x300>)
     cf0:	4d96      	ldr	r5, [pc, #600]	; (f4c <main+0x308>)
     cf2:	2264      	movs	r2, #100	; 0x64
     cf4:	f7ff fbcc 	bl	490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
     cf8:	4b95      	ldr	r3, [pc, #596]	; (f50 <main+0x30c>)
     cfa:	f8d3 9000 	ldr.w	r9, [r3]
     cfe:	682b      	ldr	r3, [r5, #0]
     d00:	f013 0a01 	ands.w	sl, r3, #1
     d04:	d10e      	bne.n	d24 <main+0xe0>
     d06:	4628      	mov	r0, r5
     d08:	f001 fc94 	bl	2634 <__cxa_guard_acquire>
     d0c:	b150      	cbz	r0, d24 <main+0xe0>
     d0e:	4e91      	ldr	r6, [pc, #580]	; (f54 <main+0x310>)
     d10:	4630      	mov	r0, r6
     d12:	f7ff ff2d 	bl	b70 <_ZN14CLEDControllerC1Ev>
     d16:	4b90      	ldr	r3, [pc, #576]	; (f58 <main+0x314>)
     d18:	f8c6 a018 	str.w	sl, [r6, #24]
     d1c:	4628      	mov	r0, r5
     d1e:	6033      	str	r3, [r6, #0]
     d20:	f001 fc8e 	bl	2640 <__cxa_guard_release>
     d24:	4649      	mov	r1, r9
     d26:	2300      	movs	r3, #0
     d28:	488a      	ldr	r0, [pc, #552]	; (f54 <main+0x310>)
     d2a:	4d8c      	ldr	r5, [pc, #560]	; (f5c <main+0x318>)
     d2c:	2264      	movs	r2, #100	; 0x64
     d2e:	f7ff fbaf 	bl	490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
     d32:	4b8b      	ldr	r3, [pc, #556]	; (f60 <main+0x31c>)
     d34:	f8d3 9000 	ldr.w	r9, [r3]
     d38:	682b      	ldr	r3, [r5, #0]
     d3a:	f013 0a01 	ands.w	sl, r3, #1
     d3e:	d10e      	bne.n	d5e <main+0x11a>
     d40:	4628      	mov	r0, r5
     d42:	f001 fc77 	bl	2634 <__cxa_guard_acquire>
     d46:	b150      	cbz	r0, d5e <main+0x11a>
     d48:	4e86      	ldr	r6, [pc, #536]	; (f64 <main+0x320>)
     d4a:	4630      	mov	r0, r6
     d4c:	f7ff ff10 	bl	b70 <_ZN14CLEDControllerC1Ev>
     d50:	4b85      	ldr	r3, [pc, #532]	; (f68 <main+0x324>)
     d52:	f8c6 a018 	str.w	sl, [r6, #24]
     d56:	4628      	mov	r0, r5
     d58:	6033      	str	r3, [r6, #0]
     d5a:	f001 fc71 	bl	2640 <__cxa_guard_release>
     d5e:	2232      	movs	r2, #50	; 0x32
     d60:	4649      	mov	r1, r9
     d62:	2300      	movs	r3, #0
     d64:	487f      	ldr	r0, [pc, #508]	; (f64 <main+0x320>)
     d66:	f7ff fb93 	bl	490 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
     d6a:	2500      	movs	r5, #0


    std::vector<BaseMode*> modes;
    modes.push_back(new MeltMode());
     d6c:	2030      	movs	r0, #48	; 0x30
     d6e:	9505      	str	r5, [sp, #20]
     d70:	9506      	str	r5, [sp, #24]
     d72:	9507      	str	r5, [sp, #28]
     d74:	f003 fae0 	bl	4338 <_Znwj>
     d78:	4606      	mov	r6, r0
     d7a:	f001 f89d 	bl	1eb8 <_ZN8MeltModeC1Ev>
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }
     d7e:	a904      	add	r1, sp, #16
     d80:	a805      	add	r0, sp, #20
     d82:	9604      	str	r6, [sp, #16]
     d84:	f7ff ff4d 	bl	c22 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     d88:	26ff      	movs	r6, #255	; 0xff
     d8a:	23c0      	movs	r3, #192	; 0xc0
    modes.push_back(new ColorMode("purple", CHSV(192, 255, 255), 125));
     d8c:	2014      	movs	r0, #20
     d8e:	f88d 300c 	strb.w	r3, [sp, #12]
     d92:	f88d 600d 	strb.w	r6, [sp, #13]
     d96:	f88d 600e 	strb.w	r6, [sp, #14]
     d9a:	f003 facd 	bl	4338 <_Znwj>
     d9e:	aa03      	add	r2, sp, #12
     da0:	237d      	movs	r3, #125	; 0x7d
     da2:	4972      	ldr	r1, [pc, #456]	; (f6c <main+0x328>)
     da4:	4681      	mov	r9, r0
     da6:	f000 fe79 	bl	1a9c <_ZN9ColorModeC1EPKc4CHSVl>
     daa:	a904      	add	r1, sp, #16
     dac:	a805      	add	r0, sp, #20
     dae:	f8cd 9010 	str.w	r9, [sp, #16]
     db2:	f7ff ff36 	bl	c22 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
     db6:	2320      	movs	r3, #32
    modes.push_back(new ColorMode("orange", CHSV(32, 255, 255), 125));
     db8:	2014      	movs	r0, #20
     dba:	f88d 300c 	strb.w	r3, [sp, #12]
     dbe:	f88d 600d 	strb.w	r6, [sp, #13]
     dc2:	f88d 600e 	strb.w	r6, [sp, #14]
     dc6:	f003 fab7 	bl	4338 <_Znwj>
     dca:	aa03      	add	r2, sp, #12
     dcc:	237d      	movs	r3, #125	; 0x7d
     dce:	4968      	ldr	r1, [pc, #416]	; (f70 <main+0x32c>)
     dd0:	4681      	mov	r9, r0
     dd2:	f000 fe63 	bl	1a9c <_ZN9ColorModeC1EPKc4CHSVl>
     dd6:	a904      	add	r1, sp, #16
     dd8:	a805      	add	r0, sp, #20
     dda:	f8cd 9010 	str.w	r9, [sp, #16]
     dde:	f7ff ff20 	bl	c22 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
    modes.push_back(new ColorMode("white", CHSV(0, 0, 255), 0));
     de2:	2014      	movs	r0, #20
     de4:	f88d 500c 	strb.w	r5, [sp, #12]
     de8:	f88d 500d 	strb.w	r5, [sp, #13]
     dec:	f88d 600e 	strb.w	r6, [sp, #14]
     df0:	f003 faa2 	bl	4338 <_Znwj>
     df4:	462b      	mov	r3, r5
     df6:	aa03      	add	r2, sp, #12
     df8:	495e      	ldr	r1, [pc, #376]	; (f74 <main+0x330>)
     dfa:	4606      	mov	r6, r0
     dfc:	f000 fe4e 	bl	1a9c <_ZN9ColorModeC1EPKc4CHSVl>
     e00:	a805      	add	r0, sp, #20
     e02:	a904      	add	r1, sp, #16
     e04:	9604      	str	r6, [sp, #16]
     e06:	f7ff ff0c 	bl	c22 <_ZNSt6vectorIP8BaseModeSaIS1_EE12emplace_backIIS1_EEEvDpOT_>
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
     e0a:	9d05      	ldr	r5, [sp, #20]

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     e0c:	9a06      	ldr	r2, [sp, #24]
    std::vector<BaseMode*>::iterator modeIterator = modes.begin();

    Serial.printf("mode count: %d\n", modes.size());
     e0e:	485a      	ldr	r0, [pc, #360]	; (f78 <main+0x334>)
     e10:	495a      	ldr	r1, [pc, #360]	; (f7c <main+0x338>)
     e12:	1b52      	subs	r2, r2, r5
     e14:	1092      	asrs	r2, r2, #2
     e16:	f001 feab 	bl	2b70 <_ZN5Print6printfEPKcz>
     e1a:	9e05      	ldr	r6, [sp, #20]
    for (std::vector<BaseMode*>::iterator it = modes.begin() ; it != modes.end(); ++it)
     e1c:	9b06      	ldr	r3, [sp, #24]
     e1e:	429e      	cmp	r6, r3
     e20:	d00a      	beq.n	e38 <main+0x1f4>
    {
        Serial.printf("mode: %s\n", (*it)->name());
     e22:	f856 0b04 	ldr.w	r0, [r6], #4
     e26:	6803      	ldr	r3, [r0, #0]
     e28:	68db      	ldr	r3, [r3, #12]
     e2a:	4798      	blx	r3
     e2c:	4954      	ldr	r1, [pc, #336]	; (f80 <main+0x33c>)
     e2e:	4602      	mov	r2, r0
     e30:	4851      	ldr	r0, [pc, #324]	; (f78 <main+0x334>)
     e32:	f001 fe9d 	bl	2b70 <_ZN5Print6printfEPKcz>
     e36:	e7f1      	b.n	e1c <main+0x1d8>
    modes.push_back(new ColorMode("orange", CHSV(32, 255, 255), 125));
    modes.push_back(new ColorMode("white", CHSV(0, 0, 255), 0));
    std::vector<BaseMode*>::iterator modeIterator = modes.begin();

    Serial.printf("mode count: %d\n", modes.size());
    for (std::vector<BaseMode*>::iterator it = modes.begin() ; it != modes.end(); ++it)
     e38:	2600      	movs	r6, #0
     e3a:	2300      	movs	r3, #0
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     e3c:	eb08 0106 	add.w	r1, r8, r6
     e40:	a804      	add	r0, sp, #16
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     e42:	f88d 3010 	strb.w	r3, [sp, #16]
     e46:	f88d 3011 	strb.w	r3, [sp, #17]
     e4a:	f88d 3012 	strb.w	r3, [sp, #18]
     e4e:	3603      	adds	r6, #3
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     e50:	f7ff fb71 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
    {
        Serial.printf("mode: %s\n", (*it)->name());
    }

	for (uint8_t i = 0; i < nLEDS; i++)
     e54:	f240 23ee 	movw	r3, #750	; 0x2ee
     e58:	429e      	cmp	r6, r3
     e5a:	d1ee      	bne.n	e3a <main+0x1f6>

	/// Update all our controllers with the current led colors, using the passed in brightness
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     e5c:	4620      	mov	r0, r4
     e5e:	7821      	ldrb	r1, [r4, #0]
     e60:	f7ff fb2a 	bl	4b8 <_ZN8CFastLED4showEh>
	    leds[i] = CHSV(0, 0, 0);
	led_show();

	// Get a random seed
	randomSeed(analogRead(8));
     e64:	2008      	movs	r0, #8
     e66:	f001 f91f 	bl	20a8 <analogRead>
     e6a:	f003 fa27 	bl	42bc <_Z10randomSeedm>

	while (1) {
		if (reboot)
     e6e:	4b45      	ldr	r3, [pc, #276]	; (f84 <main+0x340>)
     e70:	781e      	ldrb	r6, [r3, #0]
     e72:	2e00      	cmp	r6, #0
     e74:	d136      	bne.n	ee4 <main+0x2a0>
			goto reboot;

		brightness = analogRead(BRIGHTNESS_PIN);
     e76:	2001      	movs	r0, #1
     e78:	f001 f916 	bl	20a8 <analogRead>
		//Serial.print(brightness); Serial.print("\t");
		brightness = map(brightness, 525, 1023, 0, 255);
     e7c:	23ff      	movs	r3, #255	; 0xff
     e7e:	f240 32ff 	movw	r2, #1023	; 0x3ff
     e82:	f240 210d 	movw	r1, #525	; 0x20d
     e86:	9300      	str	r3, [sp, #0]
     e88:	4633      	mov	r3, r6
     e8a:	f003 fa3f 	bl	430c <_Z3maplllll>
		if (brightness < 15)
		    brightness = 0;
     e8e:	280e      	cmp	r0, #14
     e90:	bfd8      	it	le
     e92:	2000      	movle	r0, #0
		//Serial.println(brightness);
		FastLED.setBrightness(brightness);
     e94:	7020      	strb	r0, [r4, #0]

		(*modeIterator)->frame();
     e96:	6828      	ldr	r0, [r5, #0]
     e98:	6803      	ldr	r3, [r0, #0]
     e9a:	689b      	ldr	r3, [r3, #8]
     e9c:	4798      	blx	r3
     e9e:	4620      	mov	r0, r4
     ea0:	7821      	ldrb	r1, [r4, #0]
     ea2:	f7ff fb09 	bl	4b8 <_ZN8CFastLED4showEh>
		led_show();

		if (modeChange)
     ea6:	4b38      	ldr	r3, [pc, #224]	; (f88 <main+0x344>)
     ea8:	781a      	ldrb	r2, [r3, #0]
     eaa:	2a00      	cmp	r2, #0
     eac:	d0df      	beq.n	e6e <main+0x22a>
		{
		    modeChange = false;
		    digitalWrite(LED_PIN, HIGH);   // set the LED on
     eae:	200d      	movs	r0, #13
     eb0:	2101      	movs	r1, #1
		(*modeIterator)->frame();
		led_show();

		if (modeChange)
		{
		    modeChange = false;
     eb2:	701e      	strb	r6, [r3, #0]
		    digitalWrite(LED_PIN, HIGH);   // set the LED on
     eb4:	f001 fd8a 	bl	29cc <digitalWrite>

		    modeIterator++;
		    if (modeIterator == modes.end())
     eb8:	9b06      	ldr	r3, [sp, #24]
	return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }
     eba:	3504      	adds	r5, #4
     ebc:	429d      	cmp	r5, r3
     ebe:	d104      	bne.n	eca <main+0x286>
		    {
		        Serial.println("at back, starting over");
     ec0:	482d      	ldr	r0, [pc, #180]	; (f78 <main+0x334>)
     ec2:	4932      	ldr	r1, [pc, #200]	; (f8c <main+0x348>)
     ec4:	f7ff fe42 	bl	b4c <_ZN5Print7printlnEPKc>
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
     ec8:	9d05      	ldr	r5, [sp, #20]
		        modeIterator = modes.begin();
		    }

		    Serial.println((*modeIterator)->name());
     eca:	6828      	ldr	r0, [r5, #0]
     ecc:	6803      	ldr	r3, [r0, #0]
     ece:	68db      	ldr	r3, [r3, #12]
     ed0:	4798      	blx	r3
     ed2:	4601      	mov	r1, r0
     ed4:	4828      	ldr	r0, [pc, #160]	; (f78 <main+0x334>)
     ed6:	f7ff fe39 	bl	b4c <_ZN5Print7printlnEPKc>
		    digitalWrite(LED_PIN, LOW);    // set the LED off
     eda:	200d      	movs	r0, #13
     edc:	2100      	movs	r1, #0
     ede:	f001 fd75 	bl	29cc <digitalWrite>
     ee2:	e7c4      	b.n	e6e <main+0x22a>
	}

	reboot:

	// Attempt teardown
	reboot = false;
     ee4:	2200      	movs	r2, #0
     ee6:	9d05      	ldr	r5, [sp, #20]
     ee8:	701a      	strb	r2, [r3, #0]
	for(std::vector<BaseMode*>::iterator i = modes.begin(); i != modes.end(); ++i )
     eea:	9b06      	ldr	r3, [sp, #24]
     eec:	429d      	cmp	r5, r3
     eee:	d007      	beq.n	f00 <main+0x2bc>
	{
    	delete *i;
     ef0:	f855 0b04 	ldr.w	r0, [r5], #4
     ef4:	2800      	cmp	r0, #0
     ef6:	d0f8      	beq.n	eea <main+0x2a6>
     ef8:	6803      	ldr	r3, [r0, #0]
     efa:	685b      	ldr	r3, [r3, #4]
     efc:	4798      	blx	r3
     efe:	e7f4      	b.n	eea <main+0x2a6>
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos)
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
     f00:	9b05      	ldr	r3, [sp, #20]
     f02:	9306      	str	r3, [sp, #24]
     f04:	2300      	movs	r3, #0
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     f06:	18f9      	adds	r1, r7, r3
     f08:	2200      	movs	r2, #0
     f0a:	54fa      	strb	r2, [r7, r3]
        g = (colorcode >>  8) & 0xFF;
     f0c:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
     f0e:	708a      	strb	r2, [r1, #2]
     f10:	3303      	adds	r3, #3
	}
	modes.clear();

    for (int i = 0; i < nLEDS; i++)
     f12:	f240 22ee 	movw	r2, #750	; 0x2ee
     f16:	4293      	cmp	r3, r2
     f18:	d1f5      	bne.n	f06 <main+0x2c2>
     f1a:	4620      	mov	r0, r4
     f1c:	7821      	ldrb	r1, [r4, #0]
     f1e:	f7ff facb 	bl	4b8 <_ZN8CFastLED4showEh>
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
     f22:	9805      	ldr	r0, [sp, #20]
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
     f24:	2800      	cmp	r0, #0
     f26:	f43f aeb0 	beq.w	c8a <main+0x46>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
     f2a:	f003 fa01 	bl	4330 <_ZdlPv>
     f2e:	e6ac      	b.n	c8a <main+0x46>
     f30:	1fff8404 	.word	0x1fff8404
     f34:	00000b11 	.word	0x00000b11
     f38:	000128c0 	.word	0x000128c0
     f3c:	1fff8410 	.word	0x1fff8410
     f40:	1fff90b4 	.word	0x1fff90b4
     f44:	1fff9090 	.word	0x1fff9090
     f48:	000129f8 	.word	0x000129f8
     f4c:	1fff90b0 	.word	0x1fff90b0
     f50:	1fff840c 	.word	0x1fff840c
     f54:	1fff9074 	.word	0x1fff9074
     f58:	00012a10 	.word	0x00012a10
     f5c:	1fff90ac 	.word	0x1fff90ac
     f60:	1fff8408 	.word	0x1fff8408
     f64:	1fff9058 	.word	0x1fff9058
     f68:	00012a28 	.word	0x00012a28
     f6c:	00012a38 	.word	0x00012a38
     f70:	00012a3f 	.word	0x00012a3f
     f74:	00012a46 	.word	0x00012a46
     f78:	1fff9408 	.word	0x1fff9408
     f7c:	00012a4c 	.word	0x00012a4c
     f80:	00012a5c 	.word	0x00012a5c
     f84:	1fff90b8 	.word	0x1fff90b8
     f88:	1fff90c0 	.word	0x1fff90c0
     f8c:	00012a66 	.word	0x00012a66
     f90:	1fff8d68 	.word	0x1fff8d68

00000f94 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     f94:	6800      	ldr	r0, [r0, #0]
     f96:	b508      	push	{r3, lr}
     f98:	b110      	cbz	r0, fa0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv+0xc>
     f9a:	6803      	ldr	r3, [r0, #0]
     f9c:	681b      	ldr	r3, [r3, #0]
     f9e:	4798      	blx	r3
     fa0:	bd08      	pop	{r3, pc}

00000fa2 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>:

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     fa2:	6800      	ldr	r0, [r0, #0]
     fa4:	b508      	push	{r3, lr}
     fa6:	b110      	cbz	r0, fae <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv+0xc>
     fa8:	6803      	ldr	r3, [r0, #0]
     faa:	685b      	ldr	r3, [r3, #4]
     fac:	4798      	blx	r3
     fae:	bd08      	pop	{r3, pc}

00000fb0 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4initEv>:

	virtual void init() {
     fb0:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN { 
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     fb2:	2101      	movs	r1, #1
     fb4:	4604      	mov	r4, r0
     fb6:	200a      	movs	r0, #10
     fb8:	f001 fd36 	bl	2a28 <pinMode>
     fbc:	200b      	movs	r0, #11
     fbe:	2101      	movs	r1, #1
     fc0:	f001 fd32 	bl	2a28 <pinMode>
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
     fc4:	f104 0018 	add.w	r0, r4, #24
     fc8:	f7ff ffeb 	bl	fa2 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>
     fcc:	bd10      	pop	{r4, pc}
     fce:	ffff 4a2d 	vtbl.8	d20, {d15-d17}, d29

00000fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
     fd0:	4a2d      	ldr	r2, [pc, #180]	; (1088 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh+0xb8>)
     fd2:	4b2e      	ldr	r3, [pc, #184]	; (108c <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh+0xbc>)
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
     fd4:	f010 0f80 	tst.w	r0, #128	; 0x80
     fd8:	f04f 0110 	mov.w	r1, #16
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     fdc:	bf14      	ite	ne
     fde:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     fe0:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     fe2:	2140      	movs	r1, #64	; 0x40
     fe4:	6011      	str	r1, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {NOP;}
     fe6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     fe8:	6019      	str	r1, [r3, #0]
     fea:	bf00      	nop
     fec:	2110      	movs	r1, #16
     fee:	f010 0f40 	tst.w	r0, #64	; 0x40
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ff2:	bf14      	ite	ne
     ff4:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ff6:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ff8:	2140      	movs	r1, #64	; 0x40
     ffa:	6011      	str	r1, [r2, #0]
     ffc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ffe:	6019      	str	r1, [r3, #0]
    1000:	bf00      	nop
    1002:	2110      	movs	r1, #16
    1004:	f010 0f20 	tst.w	r0, #32
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1008:	bf14      	ite	ne
    100a:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    100c:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    100e:	2140      	movs	r1, #64	; 0x40
    1010:	6011      	str	r1, [r2, #0]
    1012:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1014:	6019      	str	r1, [r3, #0]
    1016:	bf00      	nop
    1018:	2110      	movs	r1, #16
    101a:	f010 0f10 	tst.w	r0, #16
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    101e:	bf14      	ite	ne
    1020:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1022:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1024:	2140      	movs	r1, #64	; 0x40
    1026:	6011      	str	r1, [r2, #0]
    1028:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    102a:	6019      	str	r1, [r3, #0]
    102c:	bf00      	nop
    102e:	2110      	movs	r1, #16
    1030:	f010 0f08 	tst.w	r0, #8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1034:	bf14      	ite	ne
    1036:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1038:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    103a:	2140      	movs	r1, #64	; 0x40
    103c:	6011      	str	r1, [r2, #0]
    103e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1040:	6019      	str	r1, [r3, #0]
    1042:	bf00      	nop
    1044:	2110      	movs	r1, #16
    1046:	f010 0f04 	tst.w	r0, #4
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    104a:	bf14      	ite	ne
    104c:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    104e:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1050:	2140      	movs	r1, #64	; 0x40
    1052:	6011      	str	r1, [r2, #0]
    1054:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1056:	6019      	str	r1, [r3, #0]
    1058:	bf00      	nop
    105a:	2110      	movs	r1, #16
    105c:	f010 0f02 	tst.w	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1060:	bf14      	ite	ne
    1062:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1064:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1066:	2140      	movs	r1, #64	; 0x40
    1068:	6011      	str	r1, [r2, #0]
    106a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    106c:	6019      	str	r1, [r3, #0]
    106e:	bf00      	nop
    1070:	2110      	movs	r1, #16
    1072:	f010 0f01 	tst.w	r0, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1076:	bf14      	ite	ne
    1078:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    107a:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    107c:	2140      	movs	r1, #64	; 0x40
    107e:	6011      	str	r1, [r2, #0]
    1080:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1082:	6019      	str	r1, [r3, #0]
    1084:	bf00      	nop
    1086:	4770      	bx	lr
    1088:	400ff084 	.word	0x400ff084
    108c:	400ff088 	.word	0x400ff088

00001090 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.26>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(15)>
class P9813Controller : public CLEDController {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
    1090:	b508      	push	{r3, lr}
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    1092:	2000      	movs	r0, #0
    1094:	f7ff ff9c 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1098:	2000      	movs	r0, #0
    109a:	f7ff ff99 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    109e:	2000      	movs	r0, #0
    10a0:	f7ff ff96 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    10a4:	2000      	movs	r0, #0
    10a6:	f7ff ff93 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    10aa:	bd08      	pop	{r3, pc}

000010ac <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    10ac:	6800      	ldr	r0, [r0, #0]
    10ae:	b508      	push	{r3, lr}
    10b0:	b110      	cbz	r0, 10b8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv+0xc>
    10b2:	6803      	ldr	r3, [r0, #0]
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	4798      	blx	r3
    10b8:	bd08      	pop	{r3, pc}

000010ba <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>:

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    10ba:	6800      	ldr	r0, [r0, #0]
    10bc:	b508      	push	{r3, lr}
    10be:	b110      	cbz	r0, 10c6 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv+0xc>
    10c0:	6803      	ldr	r3, [r0, #0]
    10c2:	685b      	ldr	r3, [r3, #4]
    10c4:	4798      	blx	r3
    10c6:	bd08      	pop	{r3, pc}

000010c8 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4initEv>:
	}

public:
	P9813Controller() {}

	virtual void init() {
    10c8:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN { 
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
    10ca:	2101      	movs	r1, #1
    10cc:	4604      	mov	r4, r0
    10ce:	2008      	movs	r0, #8
    10d0:	f001 fcaa 	bl	2a28 <pinMode>
    10d4:	2009      	movs	r0, #9
    10d6:	2101      	movs	r1, #1
    10d8:	f001 fca6 	bl	2a28 <pinMode>
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
    10dc:	f104 0018 	add.w	r0, r4, #24
    10e0:	f7ff ffeb 	bl	10ba <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>
    10e4:	bd10      	pop	{r4, pc}
    10e6:	ffff f010 	vshr.u32	d31, d0, #1

000010e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>:
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    10e8:	f010 0f80 	tst.w	r0, #128	; 0x80
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    10ec:	b510      	push	{r4, lr}
    10ee:	4a2c      	ldr	r2, [pc, #176]	; (11a0 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xb8>)
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10f0:	bf14      	ite	ne
    10f2:	4c2c      	ldrne	r4, [pc, #176]	; (11a4 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    10f4:	4c2c      	ldreq	r4, [pc, #176]	; (11a8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    10f6:	4b2d      	ldr	r3, [pc, #180]	; (11ac <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc4>)
    10f8:	2108      	movs	r1, #8
    10fa:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    10fc:	6011      	str	r1, [r2, #0]
    10fe:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1100:	6019      	str	r1, [r3, #0]
    1102:	bf00      	nop
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    1104:	f010 0f40 	tst.w	r0, #64	; 0x40
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1108:	bf14      	ite	ne
    110a:	4c26      	ldrne	r4, [pc, #152]	; (11a4 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    110c:	4c26      	ldreq	r4, [pc, #152]	; (11a8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    110e:	2108      	movs	r1, #8
    1110:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1112:	6011      	str	r1, [r2, #0]
    1114:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1116:	6019      	str	r1, [r3, #0]
    1118:	bf00      	nop
    111a:	f010 0f20 	tst.w	r0, #32
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    111e:	bf14      	ite	ne
    1120:	4c20      	ldrne	r4, [pc, #128]	; (11a4 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1122:	4c21      	ldreq	r4, [pc, #132]	; (11a8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1124:	2108      	movs	r1, #8
    1126:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1128:	6011      	str	r1, [r2, #0]
    112a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    112c:	6019      	str	r1, [r3, #0]
    112e:	bf00      	nop
    1130:	f010 0f10 	tst.w	r0, #16
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1134:	bf14      	ite	ne
    1136:	4c1b      	ldrne	r4, [pc, #108]	; (11a4 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1138:	4c1b      	ldreq	r4, [pc, #108]	; (11a8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    113a:	2108      	movs	r1, #8
    113c:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    113e:	6011      	str	r1, [r2, #0]
    1140:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1142:	6019      	str	r1, [r3, #0]
    1144:	bf00      	nop
    1146:	f010 0f08 	tst.w	r0, #8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    114a:	bf14      	ite	ne
    114c:	4c15      	ldrne	r4, [pc, #84]	; (11a4 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    114e:	4c16      	ldreq	r4, [pc, #88]	; (11a8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1150:	2108      	movs	r1, #8
    1152:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1154:	6011      	str	r1, [r2, #0]
    1156:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1158:	6019      	str	r1, [r3, #0]
    115a:	bf00      	nop
    115c:	f010 0f04 	tst.w	r0, #4
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1160:	bf14      	ite	ne
    1162:	4c10      	ldrne	r4, [pc, #64]	; (11a4 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1164:	4c10      	ldreq	r4, [pc, #64]	; (11a8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1166:	2108      	movs	r1, #8
    1168:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    116a:	6011      	str	r1, [r2, #0]
    116c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    116e:	6019      	str	r1, [r3, #0]
    1170:	bf00      	nop
    1172:	f010 0f02 	tst.w	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1176:	bf14      	ite	ne
    1178:	4c0a      	ldrne	r4, [pc, #40]	; (11a4 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    117a:	4c0b      	ldreq	r4, [pc, #44]	; (11a8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    117c:	2108      	movs	r1, #8
    117e:	6021      	str	r1, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1180:	6011      	str	r1, [r2, #0]
    1182:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1184:	6019      	str	r1, [r3, #0]
    1186:	bf00      	nop
    1188:	f010 0f01 	tst.w	r0, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    118c:	bf14      	ite	ne
    118e:	4805      	ldrne	r0, [pc, #20]	; (11a4 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xbc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1190:	4805      	ldreq	r0, [pc, #20]	; (11a8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh+0xc0>)
    1192:	2108      	movs	r1, #8
    1194:	6001      	str	r1, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1196:	6011      	str	r1, [r2, #0]
    1198:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    119a:	6019      	str	r1, [r3, #0]
    119c:	bf00      	nop
    119e:	bd10      	pop	{r4, pc}
    11a0:	400ff084 	.word	0x400ff084
    11a4:	400ff0c4 	.word	0x400ff0c4
    11a8:	400ff0c8 	.word	0x400ff0c8
    11ac:	400ff088 	.word	0x400ff088

000011b0 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.29>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(15)>
class P9813Controller : public CLEDController {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
    11b0:	b508      	push	{r3, lr}
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    11b2:	2000      	movs	r0, #0
    11b4:	f7ff ff98 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    11b8:	2000      	movs	r0, #0
    11ba:	f7ff ff95 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    11be:	2000      	movs	r0, #0
    11c0:	f7ff ff92 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    11c4:	2000      	movs	r0, #0
    11c6:	f7ff ff8f 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    11ca:	bd08      	pop	{r3, pc}

000011cc <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    11cc:	6800      	ldr	r0, [r0, #0]
    11ce:	b508      	push	{r3, lr}
    11d0:	b110      	cbz	r0, 11d8 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv+0xc>
    11d2:	6803      	ldr	r3, [r0, #0]
    11d4:	681b      	ldr	r3, [r3, #0]
    11d6:	4798      	blx	r3
    11d8:	bd08      	pop	{r3, pc}

000011da <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>:

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    11da:	6800      	ldr	r0, [r0, #0]
    11dc:	b508      	push	{r3, lr}
    11de:	b110      	cbz	r0, 11e6 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv+0xc>
    11e0:	6803      	ldr	r3, [r0, #0]
    11e2:	685b      	ldr	r3, [r3, #4]
    11e4:	4798      	blx	r3
    11e6:	bd08      	pop	{r3, pc}

000011e8 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4initEv>:
	}

public:
	P9813Controller() {}

	virtual void init() {
    11e8:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN { 
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
    11ea:	2101      	movs	r1, #1
    11ec:	4604      	mov	r4, r0
    11ee:	2006      	movs	r0, #6
    11f0:	f001 fc1a 	bl	2a28 <pinMode>
    11f4:	2007      	movs	r0, #7
    11f6:	2101      	movs	r1, #1
    11f8:	f001 fc16 	bl	2a28 <pinMode>
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
    11fc:	f104 0018 	add.w	r0, r4, #24
    1200:	f7ff ffeb 	bl	11da <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>
    1204:	bd10      	pop	{r4, pc}
    1206:	ffff 4a2d 	vtbl.8	d20, {d15-d17}, d29

00001208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    1208:	4a2d      	ldr	r2, [pc, #180]	; (12c0 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh+0xb8>)
    120a:	4b2e      	ldr	r3, [pc, #184]	; (12c4 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh+0xbc>)
public:
	#define SPI_DELAY delaycycles< (SPI_SPEED-2) / 2>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		if(b & (1 << BIT)) {
    120c:	f010 0f80 	tst.w	r0, #128	; 0x80
    1210:	f04f 0110 	mov.w	r1, #16
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1214:	bf14      	ite	ne
    1216:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1218:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    121a:	2104      	movs	r1, #4
    121c:	6011      	str	r1, [r2, #0]
    121e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1220:	6019      	str	r1, [r3, #0]
    1222:	bf00      	nop
    1224:	2110      	movs	r1, #16
    1226:	f010 0f40 	tst.w	r0, #64	; 0x40
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    122a:	bf14      	ite	ne
    122c:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    122e:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1230:	2104      	movs	r1, #4
    1232:	6011      	str	r1, [r2, #0]
    1234:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1236:	6019      	str	r1, [r3, #0]
    1238:	bf00      	nop
    123a:	2110      	movs	r1, #16
    123c:	f010 0f20 	tst.w	r0, #32
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1240:	bf14      	ite	ne
    1242:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1244:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1246:	2104      	movs	r1, #4
    1248:	6011      	str	r1, [r2, #0]
    124a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    124c:	6019      	str	r1, [r3, #0]
    124e:	bf00      	nop
    1250:	2110      	movs	r1, #16
    1252:	f010 0f10 	tst.w	r0, #16
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1256:	bf14      	ite	ne
    1258:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    125a:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    125c:	2104      	movs	r1, #4
    125e:	6011      	str	r1, [r2, #0]
    1260:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1262:	6019      	str	r1, [r3, #0]
    1264:	bf00      	nop
    1266:	2110      	movs	r1, #16
    1268:	f010 0f08 	tst.w	r0, #8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    126c:	bf14      	ite	ne
    126e:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1270:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1272:	2104      	movs	r1, #4
    1274:	6011      	str	r1, [r2, #0]
    1276:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1278:	6019      	str	r1, [r3, #0]
    127a:	bf00      	nop
    127c:	2110      	movs	r1, #16
    127e:	f010 0f04 	tst.w	r0, #4
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1282:	bf14      	ite	ne
    1284:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    1286:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1288:	2104      	movs	r1, #4
    128a:	6011      	str	r1, [r2, #0]
    128c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    128e:	6019      	str	r1, [r3, #0]
    1290:	bf00      	nop
    1292:	2110      	movs	r1, #16
    1294:	f010 0f02 	tst.w	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    1298:	bf14      	ite	ne
    129a:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    129c:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    129e:	2104      	movs	r1, #4
    12a0:	6011      	str	r1, [r2, #0]
    12a2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12a4:	6019      	str	r1, [r3, #0]
    12a6:	bf00      	nop
    12a8:	2110      	movs	r1, #16
    12aa:	f010 0f01 	tst.w	r0, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12ae:	bf14      	ite	ne
    12b0:	6011      	strne	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12b2:	6019      	streq	r1, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    12b4:	2104      	movs	r1, #4
    12b6:	6011      	str	r1, [r2, #0]
    12b8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    12ba:	6019      	str	r1, [r3, #0]
    12bc:	bf00      	nop
    12be:	4770      	bx	lr
    12c0:	400ff0c4 	.word	0x400ff0c4
    12c4:	400ff0c8 	.word	0x400ff0c8

000012c8 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.31>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(15)>
class P9813Controller : public CLEDController {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
    12c8:	b508      	push	{r3, lr}
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    12ca:	2000      	movs	r0, #0
    12cc:	f7ff ff9c 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    12d0:	2000      	movs	r0, #0
    12d2:	f7ff ff99 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    12d6:	2000      	movs	r0, #0
    12d8:	f7ff ff96 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    12dc:	2000      	movs	r0, #0
    12de:	f7ff ff93 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    12e2:	bd08      	pop	{r3, pc}

000012e4 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv>:
            mData += 1;
            mAdvance = 4;
        }
#endif

        void init_binary_dithering() {
    12e4:	b510      	push	{r4, lr}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>64) + \
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS
            // R is the digther signal 'counter'.
            static byte R = 0;
            R++;
    12e6:	4b16      	ldr	r3, [pc, #88]	; (1340 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x5c>)
    12e8:	781a      	ldrb	r2, [r3, #0]
    12ea:	3201      	adds	r2, #1

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    12ec:	f002 0207 	and.w	r2, r2, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
    12f0:	f012 0f01 	tst.w	r2, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    12f4:	701a      	strb	r2, [r3, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
    12f6:	bf14      	ite	ne
    12f8:	2380      	movne	r3, #128	; 0x80
    12fa:	2300      	moveq	r3, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    12fc:	0791      	lsls	r1, r2, #30
    12fe:	bf44      	itt	mi
    1300:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
    1304:	b2db      	uxtbmi	r3, r3
                if(R & 0x04) { Q |= 0x20; }
    1306:	0752      	lsls	r2, r2, #29
    1308:	bf48      	it	mi
    130a:	f043 0320 	orrmi.w	r3, r3, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    130e:	3310      	adds	r3, #16
    1310:	b2d9      	uxtb	r1, r3
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1312:	2200      	movs	r2, #0
                    byte s = mScale.raw[i];
    1314:	7b83      	ldrb	r3, [r0, #14]
                    e[i] = s ? (256/s) + 1 : 0;
    1316:	b12b      	cbz	r3, 1324 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x40>
    1318:	f44f 7480 	mov.w	r4, #256	; 0x100
    131c:	fb94 f3f3 	sdiv	r3, r4, r3
    1320:	3301      	adds	r3, #1
    1322:	b2db      	uxtb	r3, r3
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1324:	fb11 f403 	smulbb	r4, r1, r3
    1328:	1224      	asrs	r4, r4, #8
    132a:	72c3      	strb	r3, [r0, #11]
    132c:	7204      	strb	r4, [r0, #8]
                    d[i] = scale8(Q, e[i]);
                    if(e[i]) e[i]--;
    132e:	b10b      	cbz	r3, 1334 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x50>
    1330:	3b01      	subs	r3, #1
    1332:	72c3      	strb	r3, [r0, #11]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1334:	3201      	adds	r2, #1
    1336:	2a03      	cmp	r2, #3
    1338:	f100 0001 	add.w	r0, r0, #1
    133c:	d1ea      	bne.n	1314 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv+0x30>
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
                    if(e[i]) e[i]--;
            }
#endif
        }
    133e:	bd10      	pop	{r4, pc}
    1340:	1fff9056 	.word	0x1fff9056

00001344 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>:
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
    1344:	b510      	push	{r4, lr}
    1346:	e880 0006 	stmia.w	r0, {r1, r2}
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    134a:	781a      	ldrb	r2, [r3, #0]
    134c:	7382      	strb	r2, [r0, #14]
        g = rhs.g;
    134e:	785a      	ldrb	r2, [r3, #1]
        b = rhs.b;
    1350:	789b      	ldrb	r3, [r3, #2]
    1352:	7403      	strb	r3, [r0, #16]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1354:	f89d 3008 	ldrb.w	r3, [sp, #8]

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1358:	73c2      	strb	r2, [r0, #15]
    135a:	2b01      	cmp	r3, #1
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
    135c:	4604      	mov	r4, r0
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    135e:	d102      	bne.n	1366 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h+0x22>
                case BINARY_DITHER: init_binary_dithering(); break;
    1360:	f7ff ffc0 	bl	12e4 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv>
    1364:	e006      	b.n	1374 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h+0x30>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    1366:	2300      	movs	r3, #0
    1368:	7343      	strb	r3, [r0, #13]
    136a:	7303      	strb	r3, [r0, #12]
    136c:	72c3      	strb	r3, [r0, #11]
    136e:	7283      	strb	r3, [r0, #10]
    1370:	7243      	strb	r3, [r0, #9]
    1372:	7203      	strb	r3, [r0, #8]
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1374:	2300      	movs	r3, #0
    1376:	7463      	strb	r3, [r4, #17]
        }
    1378:	4620      	mov	r0, r4
    137a:	bd10      	pop	{r4, pc}

0000137c <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_>:

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    137c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1380:	b089      	sub	sp, #36	; 0x24
    1382:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1384:	7c80      	ldrb	r0, [r0, #18]
    1386:	9000      	str	r0, [sp, #0]

		mSPI.select();
    1388:	3518      	adds	r5, #24
	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    138a:	a803      	add	r0, sp, #12

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    138c:	4614      	mov	r4, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    138e:	f7ff ffd9 	bl	1344 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>

		mSPI.select();
    1392:	4628      	mov	r0, r5
    1394:	f7ff fdfe 	bl	f94 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv>

		writeBoundary();
    1398:	f7ff fe7a 	bl	1090 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.26>
		while(nLeds--) {
    139c:	2c00      	cmp	r4, #0
    139e:	d05a      	beq.n	1456 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0xda>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    13a0:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    13a2:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    13a4:	b122      	cbz	r2, 13b0 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x34>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    13a6:	f89d 1014 	ldrb.w	r1, [sp, #20]
    13aa:	fa82 f251 	uqadd8	r2, r2, r1
    13ae:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    13b0:	f89d 701a 	ldrb.w	r7, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    13b4:	fb12 f207 	smulbb	r2, r2, r7
    13b8:	1217      	asrs	r7, r2, #8
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    13ba:	785a      	ldrb	r2, [r3, #1]
    13bc:	fa5f f887 	uxtb.w	r8, r7
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    13c0:	b122      	cbz	r2, 13cc <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x50>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    13c2:	f89d 1015 	ldrb.w	r1, [sp, #21]
    13c6:	fa82 f251 	uqadd8	r2, r2, r1
    13ca:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    13cc:	f89d 101b 	ldrb.w	r1, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    13d0:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    13d2:	fb12 f201 	smulbb	r2, r2, r1
    13d6:	1211      	asrs	r1, r2, #8
    13d8:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    13dc:	b123      	cbz	r3, 13e8 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x6c>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    13de:	f89d 2016 	ldrb.w	r2, [sp, #22]
    13e2:	fa83 f352 	uqadd8	r3, r3, r2
    13e6:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    13e8:	f89d 601c 	ldrb.w	r6, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    13ec:	43ff      	mvns	r7, r7
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    13ee:	fb13 f306 	smulbb	r3, r3, r6
    13f2:	121e      	asrs	r6, r3, #8
    13f4:	f3c7 1781 	ubfx	r7, r7, #6, #2
    13f8:	43c9      	mvns	r1, r1
    13fa:	f067 073f 	orn	r7, r7, #63	; 0x3f
    13fe:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    1402:	43f0      	mvns	r0, r6
    1404:	ea47 1111 	orr.w	r1, r7, r1, lsr #4
    1408:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    140c:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    1410:	b2c0      	uxtb	r0, r0
    1412:	f7ff fddd 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1416:	4630      	mov	r0, r6
    1418:	f7ff fdda 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    141c:	4648      	mov	r0, r9
    141e:	f7ff fdd7 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1422:	4640      	mov	r0, r8
    1424:	f7ff fdd4 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1428:	f89d 2017 	ldrb.w	r2, [sp, #23]
    142c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1430:	1ad3      	subs	r3, r2, r3
    1432:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    1436:	f89d 2018 	ldrb.w	r2, [sp, #24]
    143a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    143e:	1ad3      	subs	r3, r2, r3
    1440:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    1444:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1448:	f89d 3016 	ldrb.w	r3, [sp, #22]
    144c:	1ad3      	subs	r3, r2, r3
    144e:	f88d 3016 	strb.w	r3, [sp, #22]
    1452:	3c01      	subs	r4, #1
    1454:	e7a2      	b.n	139c <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x20>
		writeBoundary();
		while(nLeds--) {
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.stepDithering();
		}
		writeBoundary();
    1456:	f7ff fe1b 	bl	1090 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.26>

		mSPI.waitFully();
		mSPI.release();
    145a:	4628      	mov	r0, r5
    145c:	f7ff fda1 	bl	fa2 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>
	}
    1460:	b009      	add	sp, #36	; 0x24
    1462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001466 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_>:

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1466:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    146a:	b089      	sub	sp, #36	; 0x24
    146c:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    146e:	7c80      	ldrb	r0, [r0, #18]
    1470:	9000      	str	r0, [sp, #0]

		mSPI.select();
    1472:	3518      	adds	r5, #24
	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1474:	a803      	add	r0, sp, #12

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1476:	4614      	mov	r4, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1478:	f7ff ff64 	bl	1344 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>

		mSPI.select();
    147c:	4628      	mov	r0, r5
    147e:	f7ff fe15 	bl	10ac <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv>

		writeBoundary();
    1482:	f7ff fe95 	bl	11b0 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.29>
		while(nLeds--) {
    1486:	2c00      	cmp	r4, #0
    1488:	d05a      	beq.n	1540 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0xda>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    148a:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    148c:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    148e:	b122      	cbz	r2, 149a <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x34>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1490:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1494:	fa82 f251 	uqadd8	r2, r2, r1
    1498:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    149a:	f89d 701a 	ldrb.w	r7, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    149e:	fb12 f207 	smulbb	r2, r2, r7
    14a2:	1217      	asrs	r7, r2, #8
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    14a4:	785a      	ldrb	r2, [r3, #1]
    14a6:	fa5f f887 	uxtb.w	r8, r7
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    14aa:	b122      	cbz	r2, 14b6 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x50>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    14ac:	f89d 1015 	ldrb.w	r1, [sp, #21]
    14b0:	fa82 f251 	uqadd8	r2, r2, r1
    14b4:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    14b6:	f89d 101b 	ldrb.w	r1, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    14ba:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    14bc:	fb12 f201 	smulbb	r2, r2, r1
    14c0:	1211      	asrs	r1, r2, #8
    14c2:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    14c6:	b123      	cbz	r3, 14d2 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x6c>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    14c8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    14cc:	fa83 f352 	uqadd8	r3, r3, r2
    14d0:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    14d2:	f89d 601c 	ldrb.w	r6, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    14d6:	43ff      	mvns	r7, r7
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    14d8:	fb13 f306 	smulbb	r3, r3, r6
    14dc:	121e      	asrs	r6, r3, #8
    14de:	f3c7 1781 	ubfx	r7, r7, #6, #2
    14e2:	43c9      	mvns	r1, r1
    14e4:	f067 073f 	orn	r7, r7, #63	; 0x3f
    14e8:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    14ec:	43f0      	mvns	r0, r6
    14ee:	ea47 1111 	orr.w	r1, r7, r1, lsr #4
    14f2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    14f6:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    14fa:	b2c0      	uxtb	r0, r0
    14fc:	f7ff fdf4 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1500:	4630      	mov	r0, r6
    1502:	f7ff fdf1 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1506:	4648      	mov	r0, r9
    1508:	f7ff fdee 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    150c:	4640      	mov	r0, r8
    150e:	f7ff fdeb 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1512:	f89d 2017 	ldrb.w	r2, [sp, #23]
    1516:	f89d 3014 	ldrb.w	r3, [sp, #20]
    151a:	1ad3      	subs	r3, r2, r3
    151c:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    1520:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1524:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1528:	1ad3      	subs	r3, r2, r3
    152a:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    152e:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1532:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1536:	1ad3      	subs	r3, r2, r3
    1538:	f88d 3016 	strb.w	r3, [sp, #22]
    153c:	3c01      	subs	r4, #1
    153e:	e7a2      	b.n	1486 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x20>
		writeBoundary();
		while(nLeds--) {
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.stepDithering();
		}
		writeBoundary();
    1540:	f7ff fe36 	bl	11b0 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.29>

		mSPI.waitFully();
		mSPI.release();
    1544:	4628      	mov	r0, r5
    1546:	f7ff fdb8 	bl	10ba <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>
	}
    154a:	b009      	add	sp, #36	; 0x24
    154c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001550 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_>:

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1554:	b089      	sub	sp, #36	; 0x24
    1556:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1558:	7c80      	ldrb	r0, [r0, #18]
    155a:	9000      	str	r0, [sp, #0]

		mSPI.select();
    155c:	3518      	adds	r5, #24
	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    155e:	a803      	add	r0, sp, #12

	virtual void clearLeds(int nLeds) {
		showColor(CRGB(0,0,0), nLeds, CRGB(0,0,0));
	}

	virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1560:	4614      	mov	r4, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1562:	f7ff feef 	bl	1344 <_ZN15PixelControllerIL6EOrder10EEC1ERK4CRGBiRS2_h>

		mSPI.select();
    1566:	4628      	mov	r0, r5
    1568:	f7ff fe30 	bl	11cc <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv>

		writeBoundary();
    156c:	f7ff feac 	bl	12c8 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.31>
		while(nLeds--) {
    1570:	2c00      	cmp	r4, #0
    1572:	d05a      	beq.n	162a <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0xda>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1574:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1576:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1578:	b122      	cbz	r2, 1584 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x34>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    157a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    157e:	fa82 f251 	uqadd8	r2, r2, r1
    1582:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1584:	f89d 701a 	ldrb.w	r7, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1588:	fb12 f207 	smulbb	r2, r2, r7
    158c:	1217      	asrs	r7, r2, #8
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    158e:	785a      	ldrb	r2, [r3, #1]
    1590:	fa5f f887 	uxtb.w	r8, r7
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1594:	b122      	cbz	r2, 15a0 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x50>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1596:	f89d 1015 	ldrb.w	r1, [sp, #21]
    159a:	fa82 f251 	uqadd8	r2, r2, r1
    159e:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    15a0:	f89d 101b 	ldrb.w	r1, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    15a4:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    15a6:	fb12 f201 	smulbb	r2, r2, r1
    15aa:	1211      	asrs	r1, r2, #8
    15ac:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    15b0:	b123      	cbz	r3, 15bc <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x6c>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    15b2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    15b6:	fa83 f352 	uqadd8	r3, r3, r2
    15ba:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    15bc:	f89d 601c 	ldrb.w	r6, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    15c0:	43ff      	mvns	r7, r7
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    15c2:	fb13 f306 	smulbb	r3, r3, r6
    15c6:	121e      	asrs	r6, r3, #8
    15c8:	f3c7 1781 	ubfx	r7, r7, #6, #2
    15cc:	43c9      	mvns	r1, r1
    15ce:	f067 073f 	orn	r7, r7, #63	; 0x3f
    15d2:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    15d6:	43f0      	mvns	r0, r6
    15d8:	ea47 1111 	orr.w	r1, r7, r1, lsr #4
    15dc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    15e0:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    15e4:	b2c0      	uxtb	r0, r0
    15e6:	f7ff fe0f 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    15ea:	4630      	mov	r0, r6
    15ec:	f7ff fe0c 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    15f0:	4648      	mov	r0, r9
    15f2:	f7ff fe09 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    15f6:	4640      	mov	r0, r8
    15f8:	f7ff fe06 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    15fc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    1600:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1604:	1ad3      	subs	r3, r2, r3
    1606:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    160a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    160e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1612:	1ad3      	subs	r3, r2, r3
    1614:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    1618:	f89d 2019 	ldrb.w	r2, [sp, #25]
    161c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1620:	1ad3      	subs	r3, r2, r3
    1622:	f88d 3016 	strb.w	r3, [sp, #22]
    1626:	3c01      	subs	r4, #1
    1628:	e7a2      	b.n	1570 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE9showColorERK4CRGBiS2_+0x20>
		writeBoundary();
		while(nLeds--) {
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.stepDithering();
		}
		writeBoundary();
    162a:	f7ff fe4d 	bl	12c8 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.31>

		mSPI.waitFully();
		mSPI.release();
    162e:	4628      	mov	r0, r5
    1630:	f7ff fdd3 	bl	11da <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>
	}
    1634:	b009      	add	sp, #36	; 0x24
    1636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000163a <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>:
            enable_dithering(dither);
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
    163a:	b510      	push	{r4, lr}
    163c:	e880 0006 	stmia.w	r0, {r1, r2}
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1640:	781a      	ldrb	r2, [r3, #0]
    1642:	7382      	strb	r2, [r0, #14]
        g = rhs.g;
    1644:	785a      	ldrb	r2, [r3, #1]
        b = rhs.b;
    1646:	789b      	ldrb	r3, [r3, #2]
    1648:	7403      	strb	r3, [r0, #16]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    164a:	f89d 3008 	ldrb.w	r3, [sp, #8]

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    164e:	73c2      	strb	r2, [r0, #15]
    1650:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
    1652:	4604      	mov	r4, r0
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1654:	d102      	bne.n	165c <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h+0x22>
                case BINARY_DITHER: init_binary_dithering(); break;
    1656:	f7ff fe45 	bl	12e4 <_ZN15PixelControllerIL6EOrder10EE21init_binary_ditheringEv>
    165a:	e006      	b.n	166a <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h+0x30>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    165c:	2300      	movs	r3, #0
    165e:	7343      	strb	r3, [r0, #13]
    1660:	7303      	strb	r3, [r0, #12]
    1662:	72c3      	strb	r3, [r0, #11]
    1664:	7283      	strb	r3, [r0, #10]
    1666:	7243      	strb	r3, [r0, #9]
    1668:	7203      	strb	r3, [r0, #8]
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    166a:	2303      	movs	r3, #3
    166c:	7463      	strb	r3, [r4, #17]
        }
    166e:	4620      	mov	r0, r4
    1670:	bd10      	pop	{r4, pc}

00001672 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_>:

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    1672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1676:	b089      	sub	sp, #36	; 0x24
    1678:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    167a:	7c80      	ldrb	r0, [r0, #18]
    167c:	9000      	str	r0, [sp, #0]

		mSPI.select();
    167e:	3518      	adds	r5, #24
		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1680:	a803      	add	r0, sp, #12

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    1682:	4616      	mov	r6, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1684:	f7ff ffd9 	bl	163a <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>

		mSPI.select();
    1688:	4628      	mov	r0, r5
    168a:	f7ff fc83 	bl	f94 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE6selectEv>

		writeBoundary();
    168e:	f7ff fcff 	bl	1090 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.26>
		for(int i = 0; i < nLeds; i++) {
    1692:	2400      	movs	r4, #0
    1694:	42b4      	cmp	r4, r6
    1696:	da62      	bge.n	175e <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0xec>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1698:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    169a:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    169c:	b122      	cbz	r2, 16a8 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x36>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    169e:	f89d 1014 	ldrb.w	r1, [sp, #20]
    16a2:	fa82 f251 	uqadd8	r2, r2, r1
    16a6:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    16a8:	f89d 101a 	ldrb.w	r1, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    16ac:	fb12 f201 	smulbb	r2, r2, r1
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    16b0:	7859      	ldrb	r1, [r3, #1]
    16b2:	1212      	asrs	r2, r2, #8
    16b4:	fa5f f882 	uxtb.w	r8, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    16b8:	b121      	cbz	r1, 16c4 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x52>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    16ba:	f89d 0015 	ldrb.w	r0, [sp, #21]
    16be:	fa81 f150 	uqadd8	r1, r1, r0
    16c2:	b2c9      	uxtb	r1, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    16c4:	f89d 001b 	ldrb.w	r0, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    16c8:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    16ca:	fb11 f100 	smulbb	r1, r1, r0
    16ce:	1209      	asrs	r1, r1, #8
    16d0:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    16d4:	b123      	cbz	r3, 16e0 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x6e>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    16d6:	f89d 0016 	ldrb.w	r0, [sp, #22]
    16da:	fa83 f350 	uqadd8	r3, r3, r0
    16de:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    16e0:	f89d 701c 	ldrb.w	r7, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    16e4:	43d2      	mvns	r2, r2
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    16e6:	fb13 f307 	smulbb	r3, r3, r7
    16ea:	121f      	asrs	r7, r3, #8
    16ec:	f3c2 1281 	ubfx	r2, r2, #6, #2
    16f0:	43c9      	mvns	r1, r1
    16f2:	f062 023f 	orn	r2, r2, #63	; 0x3f
    16f6:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    16fa:	43f8      	mvns	r0, r7
    16fc:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
    1700:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    1704:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    1708:	b2c0      	uxtb	r0, r0
    170a:	f7ff fc61 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    170e:	4638      	mov	r0, r7
    1710:	f7ff fc5e 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    1714:	4648      	mov	r0, r9
    1716:	f7ff fc5b 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>
    171a:	4640      	mov	r0, r8
    171c:	f7ff fc58 	bl	fd0 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE9writeByteEh>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    1720:	f89d 201d 	ldrb.w	r2, [sp, #29]
    1724:	9b03      	ldr	r3, [sp, #12]
    1726:	4413      	add	r3, r2
    1728:	9303      	str	r3, [sp, #12]
    172a:	9b04      	ldr	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    172c:	f89d 2017 	ldrb.w	r2, [sp, #23]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    1730:	3b01      	subs	r3, #1
    1732:	9304      	str	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1734:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1738:	1ad3      	subs	r3, r2, r3
    173a:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    173e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1742:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1746:	1ad3      	subs	r3, r2, r3
    1748:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    174c:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1750:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1754:	1ad3      	subs	r3, r2, r3
    1756:	f88d 3016 	strb.w	r3, [sp, #22]
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());

		mSPI.select();

		writeBoundary();
		for(int i = 0; i < nLeds; i++) {
    175a:	3401      	adds	r4, #1
    175c:	e79a      	b.n	1694 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x22>
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.advanceData();
			pixels.stepDithering();
		}
		writeBoundary();
    175e:	f7ff fc97 	bl	1090 <_ZN15P9813ControllerILh10ELh11EL6EOrder10ELh4EE13writeBoundaryEv.isra.26>

		mSPI.release();
    1762:	4628      	mov	r0, r5
    1764:	f7ff fc1d 	bl	fa2 <_ZN20AVRSoftwareSPIOutputILh10ELh11ELh4EE7releaseEv>
	}
    1768:	b009      	add	sp, #36	; 0x24
    176a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000176e <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_>:

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    176e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1772:	b089      	sub	sp, #36	; 0x24
    1774:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1776:	7c80      	ldrb	r0, [r0, #18]
    1778:	9000      	str	r0, [sp, #0]

		mSPI.select();
    177a:	3518      	adds	r5, #24
		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    177c:	a803      	add	r0, sp, #12

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    177e:	4616      	mov	r6, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1780:	f7ff ff5b 	bl	163a <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>

		mSPI.select();
    1784:	4628      	mov	r0, r5
    1786:	f7ff fc91 	bl	10ac <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE6selectEv>

		writeBoundary();
    178a:	f7ff fd11 	bl	11b0 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.29>
		for(int i = 0; i < nLeds; i++) {
    178e:	2400      	movs	r4, #0
    1790:	42b4      	cmp	r4, r6
    1792:	da62      	bge.n	185a <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0xec>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1794:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1796:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1798:	b122      	cbz	r2, 17a4 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x36>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    179a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    179e:	fa82 f251 	uqadd8	r2, r2, r1
    17a2:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    17a4:	f89d 101a 	ldrb.w	r1, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    17a8:	fb12 f201 	smulbb	r2, r2, r1
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    17ac:	7859      	ldrb	r1, [r3, #1]
    17ae:	1212      	asrs	r2, r2, #8
    17b0:	fa5f f882 	uxtb.w	r8, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    17b4:	b121      	cbz	r1, 17c0 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x52>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    17b6:	f89d 0015 	ldrb.w	r0, [sp, #21]
    17ba:	fa81 f150 	uqadd8	r1, r1, r0
    17be:	b2c9      	uxtb	r1, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    17c0:	f89d 001b 	ldrb.w	r0, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    17c4:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    17c6:	fb11 f100 	smulbb	r1, r1, r0
    17ca:	1209      	asrs	r1, r1, #8
    17cc:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    17d0:	b123      	cbz	r3, 17dc <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x6e>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    17d2:	f89d 0016 	ldrb.w	r0, [sp, #22]
    17d6:	fa83 f350 	uqadd8	r3, r3, r0
    17da:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    17dc:	f89d 701c 	ldrb.w	r7, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    17e0:	43d2      	mvns	r2, r2
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    17e2:	fb13 f307 	smulbb	r3, r3, r7
    17e6:	121f      	asrs	r7, r3, #8
    17e8:	f3c2 1281 	ubfx	r2, r2, #6, #2
    17ec:	43c9      	mvns	r1, r1
    17ee:	f062 023f 	orn	r2, r2, #63	; 0x3f
    17f2:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    17f6:	43f8      	mvns	r0, r7
    17f8:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
    17fc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    1800:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    1804:	b2c0      	uxtb	r0, r0
    1806:	f7ff fc6f 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    180a:	4638      	mov	r0, r7
    180c:	f7ff fc6c 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1810:	4648      	mov	r0, r9
    1812:	f7ff fc69 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>
    1816:	4640      	mov	r0, r8
    1818:	f7ff fc66 	bl	10e8 <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE9writeByteEh>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    181c:	f89d 201d 	ldrb.w	r2, [sp, #29]
    1820:	9b03      	ldr	r3, [sp, #12]
    1822:	4413      	add	r3, r2
    1824:	9303      	str	r3, [sp, #12]
    1826:	9b04      	ldr	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1828:	f89d 2017 	ldrb.w	r2, [sp, #23]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    182c:	3b01      	subs	r3, #1
    182e:	9304      	str	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1830:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1834:	1ad3      	subs	r3, r2, r3
    1836:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    183a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    183e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1842:	1ad3      	subs	r3, r2, r3
    1844:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    1848:	f89d 2019 	ldrb.w	r2, [sp, #25]
    184c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1850:	1ad3      	subs	r3, r2, r3
    1852:	f88d 3016 	strb.w	r3, [sp, #22]
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());

		mSPI.select();

		writeBoundary();
		for(int i = 0; i < nLeds; i++) {
    1856:	3401      	adds	r4, #1
    1858:	e79a      	b.n	1790 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x22>
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.advanceData();
			pixels.stepDithering();
		}
		writeBoundary();
    185a:	f7ff fca9 	bl	11b0 <_ZN15P9813ControllerILh8ELh9EL6EOrder10ELh4EE13writeBoundaryEv.isra.29>

		mSPI.release();
    185e:	4628      	mov	r0, r5
    1860:	f7ff fc2b 	bl	10ba <_ZN20AVRSoftwareSPIOutputILh8ELh9ELh4EE7releaseEv>
	}
    1864:	b009      	add	sp, #36	; 0x24
    1866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000186a <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_>:

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    186a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    186e:	b089      	sub	sp, #36	; 0x24
    1870:	4605      	mov	r5, r0
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1872:	7c80      	ldrb	r0, [r0, #18]
    1874:	9000      	str	r0, [sp, #0]

		mSPI.select();
    1876:	3518      	adds	r5, #24
		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    1878:	a803      	add	r0, sp, #12

		mSPI.waitFully();
		mSPI.release();
	}

	virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    187a:	4616      	mov	r6, r2
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());
    187c:	f7ff fedd 	bl	163a <_ZN15PixelControllerIL6EOrder10EEC1EPK4CRGBiRS2_h>

		mSPI.select();
    1880:	4628      	mov	r0, r5
    1882:	f7ff fca3 	bl	11cc <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE6selectEv>

		writeBoundary();
    1886:	f7ff fd1f 	bl	12c8 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.31>
		for(int i = 0; i < nLeds; i++) {
    188a:	2400      	movs	r4, #0
    188c:	42b4      	cmp	r4, r6
    188e:	da62      	bge.n	1956 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0xec>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    1890:	9b03      	ldr	r3, [sp, #12]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1892:	781a      	ldrb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1894:	b122      	cbz	r2, 18a0 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x36>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1896:	f89d 1014 	ldrb.w	r1, [sp, #20]
    189a:	fa82 f251 	uqadd8	r2, r2, r1
    189e:	b2d2      	uxtb	r2, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    18a0:	f89d 101a 	ldrb.w	r1, [sp, #26]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    18a4:	fb12 f201 	smulbb	r2, r2, r1
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    18a8:	7859      	ldrb	r1, [r3, #1]
    18aa:	1212      	asrs	r2, r2, #8
    18ac:	fa5f f882 	uxtb.w	r8, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    18b0:	b121      	cbz	r1, 18bc <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x52>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    18b2:	f89d 0015 	ldrb.w	r0, [sp, #21]
    18b6:	fa81 f150 	uqadd8	r1, r1, r0
    18ba:	b2c9      	uxtb	r1, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    18bc:	f89d 001b 	ldrb.w	r0, [sp, #27]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    18c0:	789b      	ldrb	r3, [r3, #2]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    18c2:	fb11 f100 	smulbb	r1, r1, r0
    18c6:	1209      	asrs	r1, r1, #8
    18c8:	fa5f f981 	uxtb.w	r9, r1
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    18cc:	b123      	cbz	r3, 18d8 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x6e>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    18ce:	f89d 0016 	ldrb.w	r0, [sp, #22]
    18d2:	fa83 f350 	uqadd8	r3, r3, r0
    18d6:	b2db      	uxtb	r3, r3
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }

        // composite shortcut functions for loading, dithering, and scaling
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }
    18d8:	f89d 701c 	ldrb.w	r7, [sp, #28]
	SPI mSPI;

	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }

	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {
		register uint8_t top = 0xC0 | ((~b & 0xC0) >> 2) | ((~g & 0xC0) >> 4) | ((~r & 0xC0) >> 6);
    18dc:	43d2      	mvns	r2, r2
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    18de:	fb13 f307 	smulbb	r3, r3, r7
    18e2:	121f      	asrs	r7, r3, #8
    18e4:	f3c2 1281 	ubfx	r2, r2, #6, #2
    18e8:	43c9      	mvns	r1, r1
    18ea:	f062 023f 	orn	r2, r2, #63	; 0x3f
    18ee:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    18f2:	43f8      	mvns	r0, r7
    18f4:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
    18f8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    18fc:	ea41 0090 	orr.w	r0, r1, r0, lsr #2
		mSPI.writeByte(top); mSPI.writeByte(b); mSPI.writeByte(g); mSPI.writeByte(r);
    1900:	b2c0      	uxtb	r0, r0
    1902:	f7ff fc81 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1906:	4638      	mov	r0, r7
    1908:	f7ff fc7e 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    190c:	4648      	mov	r0, r9
    190e:	f7ff fc7b 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>
    1912:	4640      	mov	r0, r8
    1914:	f7ff fc78 	bl	1208 <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE9writeByteEh>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    1918:	f89d 201d 	ldrb.w	r2, [sp, #29]
    191c:	9b03      	ldr	r3, [sp, #12]
    191e:	4413      	add	r3, r2
    1920:	9303      	str	r3, [sp, #12]
    1922:	9b04      	ldr	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    1924:	f89d 2017 	ldrb.w	r2, [sp, #23]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
    1928:	3b01      	subs	r3, #1
    192a:	9304      	str	r3, [sp, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
    192c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1930:	1ad3      	subs	r3, r2, r3
    1932:	f88d 3014 	strb.w	r3, [sp, #20]
                d[1] = e[1] - d[1];
    1936:	f89d 2018 	ldrb.w	r2, [sp, #24]
    193a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    193e:	1ad3      	subs	r3, r2, r3
    1940:	f88d 3015 	strb.w	r3, [sp, #21]
                d[2] = e[2] - d[2];
    1944:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1948:	f89d 3016 	ldrb.w	r3, [sp, #22]
    194c:	1ad3      	subs	r3, r2, r3
    194e:	f88d 3016 	strb.w	r3, [sp, #22]
		PixelController<RGB_ORDER> pixels(data, nLeds, scale, getDither());

		mSPI.select();

		writeBoundary();
		for(int i = 0; i < nLeds; i++) {
    1952:	3401      	adds	r4, #1
    1954:	e79a      	b.n	188c <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE4showEPK4CRGBiS2_+0x22>
			writeLed(pixels.loadAndScale0(), pixels.loadAndScale1(), pixels.loadAndScale2());
			pixels.advanceData();
			pixels.stepDithering();
		}
		writeBoundary();
    1956:	f7ff fcb7 	bl	12c8 <_ZN15P9813ControllerILh6ELh7EL6EOrder10ELh4EE13writeBoundaryEv.isra.31>

		mSPI.release();
    195a:	4628      	mov	r0, r5
    195c:	f7ff fc3d 	bl	11da <_ZN20AVRSoftwareSPIOutputILh6ELh7ELh4EE7releaseEv>
	}
    1960:	b009      	add	sp, #36	; 0x24
    1962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1966:	ffff 4b04 	vtbl.8	d20, {d15-d18}, d4

00001968 <_GLOBAL__sub_I_modeChange>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    1968:	4b04      	ldr	r3, [pc, #16]	; (197c <_GLOBAL__sub_I_modeChange+0x14>)
        leds[i] = 0;
	led_show();

    goto begin;
}
    196a:	b082      	sub	sp, #8
    196c:	681b      	ldr	r3, [r3, #0]
    196e:	9301      	str	r3, [sp, #4]
	return ret;
    1970:	9a01      	ldr	r2, [sp, #4]
#define BRIGHTNESS_PIN 1
#define MODE_PIN 0
#define RANDOM_PIN 3

bool modeChange = false;
unsigned long lastActionTime = millis();
    1972:	4b03      	ldr	r3, [pc, #12]	; (1980 <_GLOBAL__sub_I_modeChange+0x18>)
    1974:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < nLEDS; i++)
        leds[i] = 0;
	led_show();

    goto begin;
}
    1976:	b002      	add	sp, #8
    1978:	4770      	bx	lr
    197a:	bf00      	nop
    197c:	1fff91a8 	.word	0x1fff91a8
    1980:	1fff90bc 	.word	0x1fff90bc

00001984 <_ZN8BaseModeD1Ev>:
#include "BaseMode.h"

BaseMode::BaseMode() {
}

BaseMode::~BaseMode() {
    1984:	4b01      	ldr	r3, [pc, #4]	; (198c <_ZN8BaseModeD1Ev+0x8>)
    1986:	6003      	str	r3, [r0, #0]
}
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	00012a88 	.word	0x00012a88

00001990 <_ZN8BaseModeD0Ev>:
#include "BaseMode.h"

BaseMode::BaseMode() {
}

BaseMode::~BaseMode() {
    1990:	b510      	push	{r4, lr}
    1992:	4b03      	ldr	r3, [pc, #12]	; (19a0 <_ZN8BaseModeD0Ev+0x10>)
    1994:	6003      	str	r3, [r0, #0]
    1996:	4604      	mov	r4, r0
}
    1998:	f002 fcca 	bl	4330 <_ZdlPv>
    199c:	4620      	mov	r0, r4
    199e:	bd10      	pop	{r4, pc}
    19a0:	00012a88 	.word	0x00012a88

000019a4 <_ZN8BaseModeC1Ev>:
#include "BaseMode.h"

BaseMode::BaseMode() {
    19a4:	4b01      	ldr	r3, [pc, #4]	; (19ac <_ZN8BaseModeC1Ev+0x8>)
    19a6:	6003      	str	r3, [r0, #0]
}
    19a8:	4770      	bx	lr
    19aa:	bf00      	nop
    19ac:	00012a88 	.word	0x00012a88

000019b0 <_ZN9ColorMode4nameEv>:
    ColorMode(const char *name, CHSV color, long delay);
    virtual ~ColorMode();

public:
    virtual void frame();
    virtual const char* name() { return _name; }
    19b0:	6840      	ldr	r0, [r0, #4]
    19b2:	4770      	bx	lr

000019b4 <_ZN9ColorModeD1Ev>:
    _color = color;
    _lastChange = millis();
    _delay = delay;
}

ColorMode::~ColorMode() {
    19b4:	b510      	push	{r4, lr}
    19b6:	4b03      	ldr	r3, [pc, #12]	; (19c4 <_ZN9ColorModeD1Ev+0x10>)
    19b8:	6003      	str	r3, [r0, #0]
    19ba:	4604      	mov	r4, r0
}
    19bc:	f7ff ffe2 	bl	1984 <_ZN8BaseModeD1Ev>
    19c0:	4620      	mov	r0, r4
    19c2:	bd10      	pop	{r4, pc}
    19c4:	00012ab8 	.word	0x00012ab8

000019c8 <_ZN9ColorModeD0Ev>:
    _color = color;
    _lastChange = millis();
    _delay = delay;
}

ColorMode::~ColorMode() {
    19c8:	b510      	push	{r4, lr}
    19ca:	4604      	mov	r4, r0
}
    19cc:	f7ff fff2 	bl	19b4 <_ZN9ColorModeD1Ev>
    19d0:	4620      	mov	r0, r4
    19d2:	f002 fcad 	bl	4330 <_ZdlPv>
    19d6:	4620      	mov	r0, r4
    19d8:	bd10      	pop	{r4, pc}
    19da:	ffff b57f 	vsli.32	<illegal reg q13.5>, <illegal reg q15.5>, #31

000019dc <_ZN9ColorMode5frameEv>:

void ColorMode::frame() {
    19dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    19de:	4b2a      	ldr	r3, [pc, #168]	; (1a88 <_ZN9ColorMode5frameEv+0xac>)
    unsigned long currentTime = millis();
    if (currentTime <= _lastChange + _delay)
    19e0:	6901      	ldr	r1, [r0, #16]
    19e2:	681b      	ldr	r3, [r3, #0]
    19e4:	9303      	str	r3, [sp, #12]
    19e6:	68c2      	ldr	r2, [r0, #12]
	return ret;
    19e8:	9b03      	ldr	r3, [sp, #12]
    19ea:	440a      	add	r2, r1
    19ec:	4293      	cmp	r3, r2
}

ColorMode::~ColorMode() {
}

void ColorMode::frame() {
    19ee:	4604      	mov	r4, r0
    unsigned long currentTime = millis();
    if (currentTime <= _lastChange + _delay)
    19f0:	d947      	bls.n	1a82 <_ZN9ColorMode5frameEv+0xa6>
        return;

    _lastChange = currentTime;
    19f2:	60c3      	str	r3, [r0, #12]
    19f4:	2500      	movs	r5, #0
extern uint16_t rand16seed;// = RAND16_SEED;


LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * RAND16_2053) + RAND16_13849;
    19f6:	4a25      	ldr	r2, [pc, #148]	; (1a8c <_ZN9ColorMode5frameEv+0xb0>)
    19f8:	8813      	ldrh	r3, [r2, #0]
    19fa:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    19fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1a02:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1a06:	3319      	adds	r3, #25
    1a08:	b29b      	uxth	r3, r3

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS; i++) {
	    dice = random8();
    1a0a:	b2d9      	uxtb	r1, r3

	    if ((dice <= 10) && (_delay > 0))
    1a0c:	290a      	cmp	r1, #10
    1a0e:	8013      	strh	r3, [r2, #0]
    1a10:	dc19      	bgt.n	1a46 <_ZN9ColorMode5frameEv+0x6a>
    1a12:	6921      	ldr	r1, [r4, #16]
    1a14:	2900      	cmp	r1, #0
    1a16:	dd16      	ble.n	1a46 <_ZN9ColorMode5frameEv+0x6a>
    1a18:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    1a1c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    1a20:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1a24:	3319      	adds	r3, #25
    1a26:	b29b      	uxth	r3, r3
    1a28:	8013      	strh	r3, [r2, #0]
//         4 clocks AVR, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return
    ((int)i * (int)(scale) ) >> 8;
    1a2a:	b2db      	uxtb	r3, r3
    1a2c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    1a30:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
            tmp = CHSV(_color.hue, _color.sat, random8(200, 255));
    1a34:	7a20      	ldrb	r0, [r4, #8]
    1a36:	7a61      	ldrb	r1, [r4, #9]
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1a38:	f88d 0008 	strb.w	r0, [sp, #8]
    1a3c:	121b      	asrs	r3, r3, #8
        s = rhs.s;
    1a3e:	f88d 1009 	strb.w	r1, [sp, #9]
}

LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1a42:	3b38      	subs	r3, #56	; 0x38
    1a44:	e006      	b.n	1a54 <_ZN9ColorMode5frameEv+0x78>
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1a46:	7a23      	ldrb	r3, [r4, #8]
    1a48:	f88d 3008 	strb.w	r3, [sp, #8]
        s = rhs.s;
    1a4c:	7a63      	ldrb	r3, [r4, #9]
    1a4e:	f88d 3009 	strb.w	r3, [sp, #9]
        v = rhs.v;
    1a52:	7aa3      	ldrb	r3, [r4, #10]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1a54:	490e      	ldr	r1, [pc, #56]	; (1a90 <_ZN9ColorMode5frameEv+0xb4>)

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
        s = rhs.s;
        v = rhs.v;
    1a56:	f88d 300a 	strb.w	r3, [sp, #10]
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1a5a:	4429      	add	r1, r5
    1a5c:	a802      	add	r0, sp, #8
    1a5e:	f7fe fd6a 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
	    else
	        tmp = _color;
	    leds[i] = tmp;
	    //led_print(i);
	    hsv_print(tmp);
    1a62:	f89d 100a 	ldrb.w	r1, [sp, #10]
    1a66:	f89d 3009 	ldrb.w	r3, [sp, #9]
    1a6a:	9100      	str	r1, [sp, #0]
    1a6c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1a70:	4808      	ldr	r0, [pc, #32]	; (1a94 <_ZN9ColorMode5frameEv+0xb8>)
    1a72:	4909      	ldr	r1, [pc, #36]	; (1a98 <_ZN9ColorMode5frameEv+0xbc>)
    1a74:	f001 f87c 	bl	2b70 <_ZN5Print6printfEPKcz>
    1a78:	3503      	adds	r5, #3

    _lastChange = currentTime;

    int dice = 0;
    CHSV tmp;
	for (int i = 0; i < nLEDS; i++) {
    1a7a:	f240 23ee 	movw	r3, #750	; 0x2ee
    1a7e:	429d      	cmp	r5, r3
    1a80:	d1b9      	bne.n	19f6 <_ZN9ColorMode5frameEv+0x1a>
	        tmp = _color;
	    leds[i] = tmp;
	    //led_print(i);
	    hsv_print(tmp);
	}
}
    1a82:	b004      	add	sp, #16
    1a84:	bd70      	pop	{r4, r5, r6, pc}
    1a86:	bf00      	nop
    1a88:	1fff91a8 	.word	0x1fff91a8
    1a8c:	1fff8404 	.word	0x1fff8404
    1a90:	1fff8d68 	.word	0x1fff8d68
    1a94:	1fff9408 	.word	0x1fff9408
    1a98:	00012a98 	.word	0x00012a98

00001a9c <_ZN9ColorModeC1EPKc4CHSVl>:
#include "ColorMode.h"

ColorMode::ColorMode(const char *name, CHSV color, long delay) {
    1a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a9e:	4604      	mov	r4, r0
    1aa0:	4615      	mov	r5, r2
    1aa2:	461f      	mov	r7, r3
    1aa4:	460e      	mov	r6, r1
    1aa6:	f7ff ff7d 	bl	19a4 <_ZN8BaseModeC1Ev>
    1aaa:	4b09      	ldr	r3, [pc, #36]	; (1ad0 <_ZN9ColorModeC1EPKc4CHSVl+0x34>)
    _name = name;
    1aac:	e884 0048 	stmia.w	r4, {r3, r6}
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    1ab0:	782b      	ldrb	r3, [r5, #0]
    1ab2:	7223      	strb	r3, [r4, #8]
        s = rhs.s;
    1ab4:	786b      	ldrb	r3, [r5, #1]
    1ab6:	7263      	strb	r3, [r4, #9]
        v = rhs.v;
    1ab8:	78ab      	ldrb	r3, [r5, #2]
    1aba:	72a3      	strb	r3, [r4, #10]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic;
    1abc:	4b05      	ldr	r3, [pc, #20]	; (1ad4 <_ZN9ColorModeC1EPKc4CHSVl+0x38>)
    _color = color;
    _lastChange = millis();
    _delay = delay;
    1abe:	6127      	str	r7, [r4, #16]
    1ac0:	681b      	ldr	r3, [r3, #0]
    1ac2:	9301      	str	r3, [sp, #4]
	return ret;
    1ac4:	9a01      	ldr	r2, [sp, #4]
#include "ColorMode.h"

ColorMode::ColorMode(const char *name, CHSV color, long delay) {
    _name = name;
    _color = color;
    _lastChange = millis();
    1ac6:	60e2      	str	r2, [r4, #12]
    _delay = delay;
}
    1ac8:	4620      	mov	r0, r4
    1aca:	b003      	add	sp, #12
    1acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ace:	bf00      	nop
    1ad0:	00012ab8 	.word	0x00012ab8
    1ad4:	1fff91a8 	.word	0x1fff91a8

00001ad8 <_ZL8random16v>:
    return rand16seed;
}

LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * RAND16_2053) + RAND16_13849;
    1ad8:	4a05      	ldr	r2, [pc, #20]	; (1af0 <_ZL8random16v+0x18>)
    1ada:	8813      	ldrh	r3, [r2, #0]
    1adc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    1ae0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ae4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1ae8:	3019      	adds	r0, #25
    1aea:	b280      	uxth	r0, r0
    1aec:	8010      	strh	r0, [r2, #0]
    return rand16seed;
}
    1aee:	4770      	bx	lr
    1af0:	1fff8404 	.word	0x1fff8404

00001af4 <_ZN8MeltMode4nameEv>:
    MeltMode();
    virtual ~MeltMode();

public:
    virtual void frame();
    virtual const char* name() { return "melt"; }
    1af4:	4800      	ldr	r0, [pc, #0]	; (1af8 <_ZN8MeltMode4nameEv+0x4>)
    1af6:	4770      	bx	lr
    1af8:	00012ac8 	.word	0x00012ac8

00001afc <_ZN8MeltModeD1Ev>:
    threeValueTracker = random16();

    perlins = new Perlins();
}

MeltMode::~MeltMode() {
    1afc:	4b06      	ldr	r3, [pc, #24]	; (1b18 <_ZN8MeltModeD1Ev+0x1c>)
    1afe:	b510      	push	{r4, lr}
    1b00:	4604      	mov	r4, r0
    1b02:	6003      	str	r3, [r0, #0]
    delete perlins;
    1b04:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1b06:	b110      	cbz	r0, 1b0e <_ZN8MeltModeD1Ev+0x12>
    1b08:	6803      	ldr	r3, [r0, #0]
    1b0a:	685b      	ldr	r3, [r3, #4]
    1b0c:	4798      	blx	r3
}
    1b0e:	4620      	mov	r0, r4
    1b10:	f7ff ff38 	bl	1984 <_ZN8BaseModeD1Ev>
    1b14:	4620      	mov	r0, r4
    1b16:	bd10      	pop	{r4, pc}
    1b18:	00012ad8 	.word	0x00012ad8

00001b1c <_ZN8MeltModeD0Ev>:
    threeValueTracker = random16();

    perlins = new Perlins();
}

MeltMode::~MeltMode() {
    1b1c:	b510      	push	{r4, lr}
    1b1e:	4604      	mov	r4, r0
    delete perlins;
}
    1b20:	f7ff ffec 	bl	1afc <_ZN8MeltModeD1Ev>
    1b24:	4620      	mov	r0, r4
    1b26:	f002 fc03 	bl	4330 <_ZdlPv>
    1b2a:	4620      	mov	r0, r4
    1b2c:	bd10      	pop	{r4, pc}
    1b2e:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00001b30 <_ZN8MeltMode5frameEv>:

void MeltMode::frame() {
    1b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    1b34:	a3a6      	add	r3, pc, #664	; (adr r3, 1dd0 <_ZN8MeltMode5frameEv+0x2a0>)
    1b36:	e9d3 2300 	ldrd	r2, r3, [r3]

MeltMode::~MeltMode() {
    delete perlins;
}

void MeltMode::frame() {
    1b3a:	4682      	mov	sl, r0
    1b3c:	b08b      	sub	sp, #44	; 0x2c
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    1b3e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    1b42:	f00a f99d 	bl	be80 <__adddf3>
    valueTracker += 0.001;
    1b46:	a3a2      	add	r3, pc, #648	; (adr r3, 1dd0 <_ZN8MeltMode5frameEv+0x2a0>)
    1b48:	e9d3 2300 	ldrd	r2, r3, [r3]
}

void MeltMode::frame() {
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    1b4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
    valueTracker += 0.001;
    1b50:	e9da 0104 	ldrd	r0, r1, [sl, #16]
    1b54:	f00a f994 	bl	be80 <__adddf3>
    1b58:	e9ca 0104 	strd	r0, r1, [sl, #16]
    for (j = 0; j < nLEDS_ONE; j++)
    1b5c:	f04f 0b00 	mov.w	fp, #0
    {
        valueTracker += 0.0001;
    1b60:	e9da 0104 	ldrd	r0, r1, [sl, #16]
    1b64:	a39c      	add	r3, pc, #624	; (adr r3, 1dd8 <_ZN8MeltMode5frameEv+0x2a8>)
    1b66:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b6a:	f00a f989 	bl	be80 <__adddf3>
    1b6e:	4604      	mov	r4, r0
    1b70:	460d      	mov	r5, r1
        hueTracker += 0.00001;
    1b72:	a39b      	add	r3, pc, #620	; (adr r3, 1de0 <_ZN8MeltMode5frameEv+0x2b0>)
    1b74:	e9d3 2300 	ldrd	r2, r3, [r3]
    int j = 0;
    hueTracker += 0.001;
    valueTracker += 0.001;
    for (j = 0; j < nLEDS_ONE; j++)
    {
        valueTracker += 0.0001;
    1b78:	e9ca 4504 	strd	r4, r5, [sl, #16]
        hueTracker += 0.00001;
    1b7c:	e9da 0102 	ldrd	r0, r1, [sl, #8]
    1b80:	f00a f97e 	bl	be80 <__adddf3>
    1b84:	e9ca 0102 	strd	r0, r1, [sl, #8]

        value = perlins->pnoise(valueTracker + sin((j + valueTracker) / 2) , cos(valueTracker), valueTracker);
    1b88:	4658      	mov	r0, fp
    1b8a:	f00a fac5 	bl	c118 <__aeabi_i2d>
    1b8e:	4622      	mov	r2, r4
    1b90:	462b      	mov	r3, r5
    1b92:	4606      	mov	r6, r0
    1b94:	460f      	mov	r7, r1
    1b96:	f00a f973 	bl	be80 <__adddf3>
    1b9a:	2200      	movs	r2, #0
    1b9c:	4b98      	ldr	r3, [pc, #608]	; (1e00 <_ZN8MeltMode5frameEv+0x2d0>)
    1b9e:	f00a fb21 	bl	c1e4 <__aeabi_dmul>
    1ba2:	f009 f881 	bl	aca8 <sin>
    1ba6:	4680      	mov	r8, r0
    1ba8:	4689      	mov	r9, r1
    1baa:	4620      	mov	r0, r4
    1bac:	4629      	mov	r1, r5
    1bae:	f008 ffaf 	bl	ab10 <cos>
    1bb2:	4642      	mov	r2, r8
    1bb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1bb8:	464b      	mov	r3, r9
    1bba:	4620      	mov	r0, r4
    1bbc:	4629      	mov	r1, r5
    1bbe:	f00a f95f 	bl	be80 <__adddf3>
    1bc2:	4602      	mov	r2, r0
    1bc4:	460b      	mov	r3, r1
    1bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1bca:	e9cd 4502 	strd	r4, r5, [sp, #8]
    1bce:	e9cd 0100 	strd	r0, r1, [sp]
    1bd2:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    1bd6:	f7fe fdd3 	bl	780 <_ZN7Perlins6pnoiseEddd>
        hue = perlins->pnoise(cos(hueTracker / 2.0) + sin((j + hueTracker) / 10.0) , cos(hueTracker / 5.0), hueTracker);
    1bda:	e9da 8902 	ldrd	r8, r9, [sl, #8]
    for (j = 0; j < nLEDS_ONE; j++)
    {
        valueTracker += 0.0001;
        hueTracker += 0.00001;

        value = perlins->pnoise(valueTracker + sin((j + valueTracker) / 2) , cos(valueTracker), valueTracker);
    1bde:	e9cd 0104 	strd	r0, r1, [sp, #16]
        hue = perlins->pnoise(cos(hueTracker / 2.0) + sin((j + hueTracker) / 10.0) , cos(hueTracker / 5.0), hueTracker);
    1be2:	2200      	movs	r2, #0
    1be4:	4b86      	ldr	r3, [pc, #536]	; (1e00 <_ZN8MeltMode5frameEv+0x2d0>)
    1be6:	4640      	mov	r0, r8
    1be8:	4649      	mov	r1, r9
    1bea:	f00a fafb 	bl	c1e4 <__aeabi_dmul>
    1bee:	f008 ff8f 	bl	ab10 <cos>
    1bf2:	4642      	mov	r2, r8
    1bf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1bf8:	464b      	mov	r3, r9
    1bfa:	4630      	mov	r0, r6
    1bfc:	4639      	mov	r1, r7
    1bfe:	f00a f93f 	bl	be80 <__adddf3>
    1c02:	2200      	movs	r2, #0
    1c04:	4b7f      	ldr	r3, [pc, #508]	; (1e04 <_ZN8MeltMode5frameEv+0x2d4>)
    1c06:	f00a fc17 	bl	c438 <__aeabi_ddiv>
    1c0a:	f009 f84d 	bl	aca8 <sin>
    1c0e:	2200      	movs	r2, #0
    1c10:	4606      	mov	r6, r0
    1c12:	460f      	mov	r7, r1
    1c14:	4b7c      	ldr	r3, [pc, #496]	; (1e08 <_ZN8MeltMode5frameEv+0x2d8>)
    1c16:	4640      	mov	r0, r8
    1c18:	4649      	mov	r1, r9
    1c1a:	f00a fc0d 	bl	c438 <__aeabi_ddiv>
    1c1e:	f008 ff77 	bl	ab10 <cos>
    1c22:	4632      	mov	r2, r6
    1c24:	4604      	mov	r4, r0
    1c26:	460d      	mov	r5, r1
    1c28:	463b      	mov	r3, r7
    1c2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1c2e:	f00a f927 	bl	be80 <__adddf3>
    1c32:	e9cd 4500 	strd	r4, r5, [sp]
    1c36:	4602      	mov	r2, r0
    1c38:	e9cd 8902 	strd	r8, r9, [sp, #8]
    1c3c:	460b      	mov	r3, r1
    1c3e:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    1c42:	f7fe fd9d 	bl	780 <_ZN7Perlins6pnoiseEddd>

        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1c46:	4b71      	ldr	r3, [pc, #452]	; (1e0c <_ZN8MeltMode5frameEv+0x2dc>)
    1c48:	681b      	ldr	r3, [r3, #0]
    1c4a:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
    {
        valueTracker += 0.0001;
        hueTracker += 0.00001;

        value = perlins->pnoise(valueTracker + sin((j + valueTracker) / 2) , cos(valueTracker), valueTracker);
        hue = perlins->pnoise(cos(hueTracker / 2.0) + sin((j + hueTracker) / 10.0) , cos(hueTracker / 5.0), hueTracker);
    1c4e:	4604      	mov	r4, r0
    1c50:	460d      	mov	r5, r1

        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1c52:	eb03 0806 	add.w	r8, r3, r6
    1c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1c5a:	a363      	add	r3, pc, #396	; (adr r3, 1de8 <_ZN8MeltMode5frameEv+0x2b8>)
    1c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c60:	f00a fac0 	bl	c1e4 <__aeabi_dmul>
    1c64:	2200      	movs	r2, #0
    1c66:	4b6a      	ldr	r3, [pc, #424]	; (1e10 <_ZN8MeltMode5frameEv+0x2e0>)
    1c68:	f00a f90a 	bl	be80 <__adddf3>
    1c6c:	27ff      	movs	r7, #255	; 0xff
    1c6e:	f00a fd53 	bl	c718 <__aeabi_d2iz>
    1c72:	2100      	movs	r1, #0
    1c74:	463a      	mov	r2, r7
    1c76:	2364      	movs	r3, #100	; 0x64
    1c78:	9700      	str	r7, [sp, #0]
    1c7a:	f002 fb47 	bl	430c <_Z3maplllll>
    1c7e:	a35a      	add	r3, pc, #360	; (adr r3, 1de8 <_ZN8MeltMode5frameEv+0x2b8>)
    1c80:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c84:	4681      	mov	r9, r0
    1c86:	4629      	mov	r1, r5
    1c88:	4620      	mov	r0, r4
    1c8a:	f00a faab 	bl	c1e4 <__aeabi_dmul>
    1c8e:	2200      	movs	r2, #0
    1c90:	4b5f      	ldr	r3, [pc, #380]	; (1e10 <_ZN8MeltMode5frameEv+0x2e0>)
    1c92:	f00a f8f5 	bl	be80 <__adddf3>
    1c96:	f00a fd67 	bl	c768 <__aeabi_d2uiz>
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1c9a:	4641      	mov	r1, r8
    1c9c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    1ca0:	a809      	add	r0, sp, #36	; 0x24
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1ca2:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    1ca6:	f88d 9026 	strb.w	r9, [sp, #38]	; 0x26
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1caa:	f7fe fc44 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
        if (j < nLEDS_TWO)
            leds_two[j] = leds[j];
    1cae:	4b59      	ldr	r3, [pc, #356]	; (1e14 <_ZN8MeltMode5frameEv+0x2e4>)
    }

    // allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1cb0:	4859      	ldr	r0, [pc, #356]	; (1e18 <_ZN8MeltMode5frameEv+0x2e8>)
    1cb2:	6819      	ldr	r1, [r3, #0]
    1cb4:	1832      	adds	r2, r6, r0
    1cb6:	5c30      	ldrb	r0, [r6, r0]
    1cb8:	5588      	strb	r0, [r1, r6]
    1cba:	198b      	adds	r3, r1, r6
        g = rhs.g;
    1cbc:	7851      	ldrb	r1, [r2, #1]
    1cbe:	7059      	strb	r1, [r3, #1]
void MeltMode::frame() {
    double hue, value;
    int j = 0;
    hueTracker += 0.001;
    valueTracker += 0.001;
    for (j = 0; j < nLEDS_ONE; j++)
    1cc0:	f10b 0b01 	add.w	fp, fp, #1
        b = rhs.b;
    1cc4:	7892      	ldrb	r2, [r2, #2]
    1cc6:	709a      	strb	r2, [r3, #2]
    1cc8:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
    1ccc:	f47f af48 	bne.w	1b60 <_ZN8MeltMode5frameEv+0x30>
        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
        if (j < nLEDS_TWO)
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    1cd0:	e9da 0106 	ldrd	r0, r1, [sl, #24]
    1cd4:	a346      	add	r3, pc, #280	; (adr r3, 1df0 <_ZN8MeltMode5frameEv+0x2c0>)
    1cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cda:	f00a f8d1 	bl	be80 <__adddf3>
    threeValueTracker += 0.008;
    1cde:	a346      	add	r3, pc, #280	; (adr r3, 1df8 <_ZN8MeltMode5frameEv+0x2c8>)
    1ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
        leds_one[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
        if (j < nLEDS_TWO)
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    1ce4:	e9ca 0106 	strd	r0, r1, [sl, #24]
    threeValueTracker += 0.008;
    1ce8:	e9da 0108 	ldrd	r0, r1, [sl, #32]
    1cec:	f00a f8c8 	bl	be80 <__adddf3>
    1cf0:	e9ca 0108 	strd	r0, r1, [sl, #32]
    for (j = 0; j < nLEDS_THREE; j++)
    1cf4:	f04f 0b00 	mov.w	fp, #0
    {
        threeValueTracker += 0.001;
    1cf8:	e9da 0108 	ldrd	r0, r1, [sl, #32]
    1cfc:	a334      	add	r3, pc, #208	; (adr r3, 1dd0 <_ZN8MeltMode5frameEv+0x2a0>)
    1cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d02:	f00a f8bd 	bl	be80 <__adddf3>
    1d06:	4604      	mov	r4, r0
    1d08:	460d      	mov	r5, r1
        threeHueTracker += 0.0001;
    1d0a:	a333      	add	r3, pc, #204	; (adr r3, 1dd8 <_ZN8MeltMode5frameEv+0x2a8>)
    1d0c:	e9d3 2300 	ldrd	r2, r3, [r3]

    threeHueTracker += 0.01;
    threeValueTracker += 0.008;
    for (j = 0; j < nLEDS_THREE; j++)
    {
        threeValueTracker += 0.001;
    1d10:	e9ca 4508 	strd	r4, r5, [sl, #32]
        threeHueTracker += 0.0001;
    1d14:	e9da 0106 	ldrd	r0, r1, [sl, #24]
    1d18:	f00a f8b2 	bl	be80 <__adddf3>
    1d1c:	e9ca 0106 	strd	r0, r1, [sl, #24]

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
    1d20:	4658      	mov	r0, fp
    1d22:	f00a f9f9 	bl	c118 <__aeabi_i2d>
    1d26:	4622      	mov	r2, r4
    1d28:	462b      	mov	r3, r5
    1d2a:	4606      	mov	r6, r0
    1d2c:	460f      	mov	r7, r1
    1d2e:	f00a f8a7 	bl	be80 <__adddf3>
    1d32:	2200      	movs	r2, #0
    1d34:	4b32      	ldr	r3, [pc, #200]	; (1e00 <_ZN8MeltMode5frameEv+0x2d0>)
    1d36:	f00a fa55 	bl	c1e4 <__aeabi_dmul>
    1d3a:	f008 ffb5 	bl	aca8 <sin>
    1d3e:	4680      	mov	r8, r0
    1d40:	4689      	mov	r9, r1
    1d42:	4620      	mov	r0, r4
    1d44:	4629      	mov	r1, r5
    1d46:	f008 fee3 	bl	ab10 <cos>
    1d4a:	4642      	mov	r2, r8
    1d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1d50:	464b      	mov	r3, r9
    1d52:	4620      	mov	r0, r4
    1d54:	4629      	mov	r1, r5
    1d56:	f00a f893 	bl	be80 <__adddf3>
    1d5a:	4602      	mov	r2, r0
    1d5c:	460b      	mov	r3, r1
    1d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1d62:	e9cd 4502 	strd	r4, r5, [sp, #8]
    1d66:	e9cd 0100 	strd	r0, r1, [sp]
    1d6a:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    1d6e:	f7fe fd07 	bl	780 <_ZN7Perlins6pnoiseEddd>
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);
    1d72:	e9da 8906 	ldrd	r8, r9, [sl, #24]
    for (j = 0; j < nLEDS_THREE; j++)
    {
        threeValueTracker += 0.001;
        threeHueTracker += 0.0001;

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
    1d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);
    1d7a:	2200      	movs	r2, #0
    1d7c:	4b20      	ldr	r3, [pc, #128]	; (1e00 <_ZN8MeltMode5frameEv+0x2d0>)
    1d7e:	4640      	mov	r0, r8
    1d80:	4649      	mov	r1, r9
    1d82:	f00a fa2f 	bl	c1e4 <__aeabi_dmul>
    1d86:	f008 fec3 	bl	ab10 <cos>
    1d8a:	4642      	mov	r2, r8
    1d8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1d90:	464b      	mov	r3, r9
    1d92:	4630      	mov	r0, r6
    1d94:	4639      	mov	r1, r7
    1d96:	f00a f873 	bl	be80 <__adddf3>
    1d9a:	2200      	movs	r2, #0
    1d9c:	4b19      	ldr	r3, [pc, #100]	; (1e04 <_ZN8MeltMode5frameEv+0x2d4>)
    1d9e:	f00a fb4b 	bl	c438 <__aeabi_ddiv>
    1da2:	f008 ff81 	bl	aca8 <sin>
    1da6:	2200      	movs	r2, #0
    1da8:	4606      	mov	r6, r0
    1daa:	460f      	mov	r7, r1
    1dac:	4b16      	ldr	r3, [pc, #88]	; (1e08 <_ZN8MeltMode5frameEv+0x2d8>)
    1dae:	4640      	mov	r0, r8
    1db0:	4649      	mov	r1, r9
    1db2:	f00a fb41 	bl	c438 <__aeabi_ddiv>
    1db6:	f008 feab 	bl	ab10 <cos>
    1dba:	4632      	mov	r2, r6
    1dbc:	4604      	mov	r4, r0
    1dbe:	460d      	mov	r5, r1
    1dc0:	463b      	mov	r3, r7
    1dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1dc6:	f00a f85b 	bl	be80 <__adddf3>
    1dca:	e027      	b.n	1e1c <_ZN8MeltMode5frameEv+0x2ec>
    1dcc:	f3af 8000 	nop.w
    1dd0:	d2f1a9fc 	.word	0xd2f1a9fc
    1dd4:	3f50624d 	.word	0x3f50624d
    1dd8:	eb1c432d 	.word	0xeb1c432d
    1ddc:	3f1a36e2 	.word	0x3f1a36e2
    1de0:	88e368f1 	.word	0x88e368f1
    1de4:	3ee4f8b5 	.word	0x3ee4f8b5
    1de8:	00000000 	.word	0x00000000
    1dec:	405fc000 	.word	0x405fc000
    1df0:	47ae147b 	.word	0x47ae147b
    1df4:	3f847ae1 	.word	0x3f847ae1
    1df8:	d2f1a9fc 	.word	0xd2f1a9fc
    1dfc:	3f80624d 	.word	0x3f80624d
    1e00:	3fe00000 	.word	0x3fe00000
    1e04:	40240000 	.word	0x40240000
    1e08:	40140000 	.word	0x40140000
    1e0c:	1fff8410 	.word	0x1fff8410
    1e10:	40600000 	.word	0x40600000
    1e14:	1fff840c 	.word	0x1fff840c
    1e18:	1fff8d68 	.word	0x1fff8d68
    1e1c:	e9cd 4500 	strd	r4, r5, [sp]
    1e20:	4602      	mov	r2, r0
    1e22:	460b      	mov	r3, r1
    1e24:	e9cd 8902 	strd	r8, r9, [sp, #8]
    1e28:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    1e2c:	f7fe fca8 	bl	780 <_ZN7Perlins6pnoiseEddd>

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1e30:	4a1f      	ldr	r2, [pc, #124]	; (1eb0 <_ZN8MeltMode5frameEv+0x380>)
    1e32:	6817      	ldr	r7, [r2, #0]
    1e34:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    {
        threeValueTracker += 0.001;
        threeHueTracker += 0.0001;

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);
    1e38:	4604      	mov	r4, r0
    1e3a:	460d      	mov	r5, r1

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1e3c:	441f      	add	r7, r3
    1e3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e42:	a319      	add	r3, pc, #100	; (adr r3, 1ea8 <_ZN8MeltMode5frameEv+0x378>)
    1e44:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e48:	f00a f9cc 	bl	c1e4 <__aeabi_dmul>
    1e4c:	2200      	movs	r2, #0
    1e4e:	4b19      	ldr	r3, [pc, #100]	; (1eb4 <_ZN8MeltMode5frameEv+0x384>)
    1e50:	f00a f816 	bl	be80 <__adddf3>
    1e54:	26ff      	movs	r6, #255	; 0xff
    1e56:	f00a fc5f 	bl	c718 <__aeabi_d2iz>
    1e5a:	2100      	movs	r1, #0
    1e5c:	4632      	mov	r2, r6
    1e5e:	2364      	movs	r3, #100	; 0x64
    1e60:	9600      	str	r6, [sp, #0]
    1e62:	f002 fa53 	bl	430c <_Z3maplllll>
    1e66:	a310      	add	r3, pc, #64	; (adr r3, 1ea8 <_ZN8MeltMode5frameEv+0x378>)
    1e68:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e6c:	4680      	mov	r8, r0
    1e6e:	4629      	mov	r1, r5
    1e70:	4620      	mov	r0, r4
    1e72:	f00a f9b7 	bl	c1e4 <__aeabi_dmul>
    1e76:	2200      	movs	r2, #0
    1e78:	4b0e      	ldr	r3, [pc, #56]	; (1eb4 <_ZN8MeltMode5frameEv+0x384>)
    1e7a:	f00a f801 	bl	be80 <__adddf3>
    1e7e:	f00a fc73 	bl	c768 <__aeabi_d2uiz>
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    threeValueTracker += 0.008;
    for (j = 0; j < nLEDS_THREE; j++)
    1e82:	f10b 0b01 	add.w	fp, fp, #1
        threeHueTracker += 0.0001;

        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    1e86:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1e8a:	4639      	mov	r1, r7
    1e8c:	a809      	add	r0, sp, #36	; 0x24
    {
    }

    // allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1e8e:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
    1e92:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    // allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1e96:	f7fe fb4e 	bl	536 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
            leds_two[j] = leds[j];
    }

    threeHueTracker += 0.01;
    threeValueTracker += 0.008;
    for (j = 0; j < nLEDS_THREE; j++)
    1e9a:	f1bb 0f32 	cmp.w	fp, #50	; 0x32
    1e9e:	f47f af2b 	bne.w	1cf8 <_ZN8MeltMode5frameEv+0x1c8>
        value = perlins->pnoise(threeValueTracker + sin((j + threeValueTracker) / 2) , cos(threeValueTracker), threeValueTracker);
        hue = perlins->pnoise(cos(threeHueTracker / 2.0) + sin((j + threeHueTracker) / 10.0) , cos(threeHueTracker / 5.0), threeHueTracker);

        leds_three[j] = CHSV((hue * (double)127) + 128, 255, map((value * (double)127) + 128, 0, 255, 100, 255));
    }
}
    1ea2:	b00b      	add	sp, #44	; 0x2c
    1ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ea8:	00000000 	.word	0x00000000
    1eac:	405fc000 	.word	0x405fc000
    1eb0:	1fff8408 	.word	0x1fff8408
    1eb4:	40600000 	.word	0x40600000

00001eb8 <_ZN8MeltModeC1Ev>:
#include "MeltMode.h"

MeltMode::MeltMode() {
    1eb8:	b538      	push	{r3, r4, r5, lr}
    1eba:	4604      	mov	r4, r0
    1ebc:	f7ff fd72 	bl	19a4 <_ZN8BaseModeC1Ev>
    1ec0:	4b11      	ldr	r3, [pc, #68]	; (1f08 <_ZN8MeltModeC1Ev+0x50>)
    1ec2:	6023      	str	r3, [r4, #0]
    hueTracker = random16();
    1ec4:	f7ff fe08 	bl	1ad8 <_ZL8random16v>
    1ec8:	f00a f916 	bl	c0f8 <__aeabi_ui2d>
    1ecc:	e9c4 0102 	strd	r0, r1, [r4, #8]
    valueTracker = random16();
    1ed0:	f7ff fe02 	bl	1ad8 <_ZL8random16v>
    1ed4:	f00a f910 	bl	c0f8 <__aeabi_ui2d>
    1ed8:	e9c4 0104 	strd	r0, r1, [r4, #16]

    threeHueTracker = random16();
    1edc:	f7ff fdfc 	bl	1ad8 <_ZL8random16v>
    1ee0:	f00a f90a 	bl	c0f8 <__aeabi_ui2d>
    1ee4:	e9c4 0106 	strd	r0, r1, [r4, #24]
    threeValueTracker = random16();
    1ee8:	f7ff fdf6 	bl	1ad8 <_ZL8random16v>
    1eec:	f00a f904 	bl	c0f8 <__aeabi_ui2d>
    1ef0:	e9c4 0108 	strd	r0, r1, [r4, #32]

    perlins = new Perlins();
    1ef4:	2004      	movs	r0, #4
    1ef6:	f002 fa1f 	bl	4338 <_Znwj>
    1efa:	4605      	mov	r5, r0
    1efc:	f7fe fbe2 	bl	6c4 <_ZN7PerlinsC1Ev>
    1f00:	62a5      	str	r5, [r4, #40]	; 0x28
}
    1f02:	4620      	mov	r0, r4
    1f04:	bd38      	pop	{r3, r4, r5, pc}
    1f06:	bf00      	nop
    1f08:	00012ad8 	.word	0x00012ad8

00001f0c <wait_for_cal>:
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(__MK20DX128__)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#elif defined(__MK20DX256__)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1f0e:	4b30      	ldr	r3, [pc, #192]	; (1fd0 <wait_for_cal+0xc4>)
    1f10:	681b      	ldr	r3, [r3, #0]
    1f12:	061b      	lsls	r3, r3, #24
    1f14:	d4fb      	bmi.n	1f0e <wait_for_cal+0x2>
    1f16:	4b2f      	ldr	r3, [pc, #188]	; (1fd4 <wait_for_cal+0xc8>)
    1f18:	681b      	ldr	r3, [r3, #0]
    1f1a:	f013 0280 	ands.w	r2, r3, #128	; 0x80
    1f1e:	d1f6      	bne.n	1f0e <wait_for_cal+0x2>
		// wait
	}
#endif
	__disable_irq();
    1f20:	b672      	cpsid	i
	if (calibrating) {
    1f22:	4b2d      	ldr	r3, [pc, #180]	; (1fd8 <wait_for_cal+0xcc>)
    1f24:	7819      	ldrb	r1, [r3, #0]
    1f26:	2900      	cmp	r1, #0
    1f28:	d050      	beq.n	1fcc <wait_for_cal+0xc0>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1f2a:	492c      	ldr	r1, [pc, #176]	; (1fdc <wait_for_cal+0xd0>)
    1f2c:	6808      	ldr	r0, [r1, #0]
    1f2e:	684f      	ldr	r7, [r1, #4]
    1f30:	688e      	ldr	r6, [r1, #8]
    1f32:	68cd      	ldr	r5, [r1, #12]
    1f34:	690c      	ldr	r4, [r1, #16]
    1f36:	4438      	add	r0, r7
    1f38:	3114      	adds	r1, #20
    1f3a:	4430      	add	r0, r6
    1f3c:	6809      	ldr	r1, [r1, #0]
    1f3e:	4428      	add	r0, r5
    1f40:	4420      	add	r0, r4
    1f42:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    1f44:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC0_PG = sum;
    1f48:	4925      	ldr	r1, [pc, #148]	; (1fe0 <wait_for_cal+0xd4>)
    1f4a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    1f4e:	6008      	str	r0, [r1, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1f50:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    1f52:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    1f54:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    1f56:	6b8d      	ldr	r5, [r1, #56]	; 0x38
    1f58:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    1f5a:	4438      	add	r0, r7
    1f5c:	3140      	adds	r1, #64	; 0x40
    1f5e:	4430      	add	r0, r6
    1f60:	6809      	ldr	r1, [r1, #0]
    1f62:	4428      	add	r0, r5
    1f64:	4420      	add	r0, r4
    1f66:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    1f68:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC0_MG = sum;
    1f6c:	491d      	ldr	r1, [pc, #116]	; (1fe4 <wait_for_cal+0xd8>)
    1f6e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    1f72:	6008      	str	r0, [r1, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#if defined(__MK20DX256__)
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f74:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
    1f78:	3114      	adds	r1, #20
    1f7a:	f851 0c14 	ldr.w	r0, [r1, #-20]
    1f7e:	f851 7c10 	ldr.w	r7, [r1, #-16]
    1f82:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    1f86:	f851 5c08 	ldr.w	r5, [r1, #-8]
    1f8a:	f851 4c04 	ldr.w	r4, [r1, #-4]
    1f8e:	6809      	ldr	r1, [r1, #0]
    1f90:	4438      	add	r0, r7
    1f92:	4430      	add	r0, r6
    1f94:	4428      	add	r0, r5
    1f96:	4420      	add	r0, r4
    1f98:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    1f9a:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC1_PG = sum;
    1f9e:	4912      	ldr	r1, [pc, #72]	; (1fe8 <wait_for_cal+0xdc>)
    1fa0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    1fa4:	6008      	str	r0, [r1, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1fa6:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    1fa8:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    1faa:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    1fac:	6b8d      	ldr	r5, [r1, #56]	; 0x38
    1fae:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    1fb0:	4438      	add	r0, r7
    1fb2:	3140      	adds	r1, #64	; 0x40
    1fb4:	4430      	add	r0, r6
    1fb6:	6809      	ldr	r1, [r1, #0]
    1fb8:	4428      	add	r0, r5
    1fba:	4420      	add	r0, r4
    1fbc:	4408      	add	r0, r1
		sum = (sum / 2) | 0x8000;
    1fbe:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC1_MG = sum;
    1fc2:	490a      	ldr	r1, [pc, #40]	; (1fec <wait_for_cal+0xe0>)
    1fc4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    1fc8:	6008      	str	r0, [r1, #0]
#endif
		calibrating = 0;
    1fca:	701a      	strb	r2, [r3, #0]
	}
	__enable_irq();
    1fcc:	b662      	cpsie	i
    1fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fd0:	4003b024 	.word	0x4003b024
    1fd4:	400bb024 	.word	0x400bb024
    1fd8:	1fff90c2 	.word	0x1fff90c2
    1fdc:	4003b038 	.word	0x4003b038
    1fe0:	4003b02c 	.word	0x4003b02c
    1fe4:	4003b030 	.word	0x4003b030
    1fe8:	400bb02c 	.word	0x400bb02c
    1fec:	400bb030 	.word	0x400bb030

00001ff0 <analog_init>:
#else
#error "F_BUS must be 60, 56, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1ff0:	b510      	push	{r4, lr}
	uint32_t num;

	VREF_TRM = 0x60;
    1ff2:	4b20      	ldr	r3, [pc, #128]	; (2074 <analog_init+0x84>)
    1ff4:	4820      	ldr	r0, [pc, #128]	; (2078 <analog_init+0x88>)
    1ff6:	4921      	ldr	r1, [pc, #132]	; (207c <analog_init+0x8c>)
    1ff8:	2260      	movs	r2, #96	; 0x60
    1ffa:	701a      	strb	r2, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1ffc:	22e1      	movs	r2, #225	; 0xe1
    1ffe:	705a      	strb	r2, [r3, #1]

	if (analog_config_bits == 8) {
    2000:	4b1f      	ldr	r3, [pc, #124]	; (2080 <analog_init+0x90>)
    2002:	4a20      	ldr	r2, [pc, #128]	; (2084 <analog_init+0x94>)
    2004:	781c      	ldrb	r4, [r3, #0]
    2006:	4b20      	ldr	r3, [pc, #128]	; (2088 <analog_init+0x98>)
    2008:	2c08      	cmp	r4, #8
    200a:	d101      	bne.n	2010 <analog_init+0x20>
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    200c:	2401      	movs	r4, #1
    200e:	e002      	b.n	2016 <analog_init+0x26>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2010:	2c0a      	cmp	r4, #10
    2012:	d103      	bne.n	201c <analog_init+0x2c>
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2014:	2419      	movs	r4, #25
    2016:	6004      	str	r4, [r0, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2018:	2013      	movs	r0, #19
    201a:	e005      	b.n	2028 <analog_init+0x38>
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    201c:	2c0c      	cmp	r4, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    201e:	bf0c      	ite	eq
    2020:	2415      	moveq	r4, #21
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2022:	243d      	movne	r4, #61	; 0x3d
    2024:	6004      	str	r4, [r0, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2026:	2012      	movs	r0, #18
    2028:	6008      	str	r0, [r1, #0]
		#if defined(__MK20DX256__)
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    202a:	6014      	str	r4, [r2, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    202c:	6018      	str	r0, [r3, #0]
		#endif
	}

	if (analog_reference_internal) {
    202e:	4b17      	ldr	r3, [pc, #92]	; (208c <analog_init+0x9c>)
    2030:	4917      	ldr	r1, [pc, #92]	; (2090 <analog_init+0xa0>)
    2032:	781b      	ldrb	r3, [r3, #0]
    2034:	4a17      	ldr	r2, [pc, #92]	; (2094 <analog_init+0xa4>)
    2036:	b103      	cbz	r3, 203a <analog_init+0x4a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2038:	2301      	movs	r3, #1
		#if defined(__MK20DX256__)
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		#endif
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    203a:	600b      	str	r3, [r1, #0]
		#if defined(__MK20DX256__)
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    203c:	6013      	str	r3, [r2, #0]
		#endif
	}

	num = analog_num_average;
    203e:	4b16      	ldr	r3, [pc, #88]	; (2098 <analog_init+0xa8>)
    2040:	4a16      	ldr	r2, [pc, #88]	; (209c <analog_init+0xac>)
    2042:	7819      	ldrb	r1, [r3, #0]
    2044:	4b16      	ldr	r3, [pc, #88]	; (20a0 <analog_init+0xb0>)
	if (num <= 1) {
    2046:	2901      	cmp	r1, #1
    2048:	d801      	bhi.n	204e <analog_init+0x5e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    204a:	2180      	movs	r1, #128	; 0x80
    204c:	e00b      	b.n	2066 <analog_init+0x76>
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    204e:	2904      	cmp	r1, #4
    2050:	d801      	bhi.n	2056 <analog_init+0x66>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2052:	2184      	movs	r1, #132	; 0x84
    2054:	e007      	b.n	2066 <analog_init+0x76>
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2056:	2908      	cmp	r1, #8
    2058:	d801      	bhi.n	205e <analog_init+0x6e>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    205a:	2185      	movs	r1, #133	; 0x85
    205c:	e003      	b.n	2066 <analog_init+0x76>
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    205e:	2910      	cmp	r1, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2060:	bf94      	ite	ls
    2062:	2186      	movls	r1, #134	; 0x86
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2064:	2187      	movhi	r1, #135	; 0x87
    2066:	6011      	str	r1, [r2, #0]
		#if defined(__MK20DX256__)
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2068:	6019      	str	r1, [r3, #0]
		#endif
	}
	calibrating = 1;
    206a:	4b0e      	ldr	r3, [pc, #56]	; (20a4 <analog_init+0xb4>)
    206c:	2201      	movs	r2, #1
    206e:	701a      	strb	r2, [r3, #0]
    2070:	bd10      	pop	{r4, pc}
    2072:	bf00      	nop
    2074:	40074000 	.word	0x40074000
    2078:	4003b008 	.word	0x4003b008
    207c:	4003b00c 	.word	0x4003b00c
    2080:	1fff8414 	.word	0x1fff8414
    2084:	400bb008 	.word	0x400bb008
    2088:	400bb00c 	.word	0x400bb00c
    208c:	1fff90c5 	.word	0x1fff90c5
    2090:	4003b020 	.word	0x4003b020
    2094:	400bb020 	.word	0x400bb020
    2098:	1fff8415 	.word	0x1fff8415
    209c:	4003b024 	.word	0x4003b024
    20a0:	400bb024 	.word	0x400bb024
    20a4:	1fff90c2 	.word	0x1fff90c2

000020a8 <analogRead>:
	uint8_t index, channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin <= 13) {
    20a8:	280d      	cmp	r0, #13
#if defined(__MK20DX256__)
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    20aa:	b538      	push	{r3, r4, r5, lr}
	uint8_t index, channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin <= 13) {
    20ac:	d90f      	bls.n	20ce <analogRead+0x26>
		index = pin;      // 0-13 refer to A0-A13
	} else if (pin <= 23) {
    20ae:	2817      	cmp	r0, #23
    20b0:	d801      	bhi.n	20b6 <analogRead+0xe>
		index = pin - 14; // 14-23 are A0-A9
    20b2:	380e      	subs	r0, #14
    20b4:	e00a      	b.n	20cc <analogRead+0x24>
#if defined(__MK20DX256__)
	} else if (pin >= 26 && pin <= 31) {
    20b6:	f1a0 031a 	sub.w	r3, r0, #26
    20ba:	2b05      	cmp	r3, #5
    20bc:	d801      	bhi.n	20c2 <analogRead+0x1a>
		index = pin - 9;  // 26-31 are A15-A20
    20be:	3809      	subs	r0, #9
    20c0:	e004      	b.n	20cc <analogRead+0x24>
#endif
	} else if (pin >= 34 && pin <= 40) {
    20c2:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    20c6:	2b06      	cmp	r3, #6
    20c8:	d847      	bhi.n	215a <analogRead+0xb2>
		index = pin - 24;  // 34-37 are A10-A13, 38 is temp sensor,
    20ca:	3818      	subs	r0, #24
    20cc:	b2c0      	uxtb	r0, r0
	}

	//serial_phex(index);
	//serial_print(" ");

	channel = channel2sc1a[index];
    20ce:	4b24      	ldr	r3, [pc, #144]	; (2160 <analogRead+0xb8>)
    20d0:	5c1c      	ldrb	r4, [r3, r0]
	//serial_phex(channel);
	//serial_print(" ");

	//serial_print("analogRead");
	//return 0;
	if (calibrating) wait_for_cal();
    20d2:	4b24      	ldr	r3, [pc, #144]	; (2164 <analogRead+0xbc>)
    20d4:	781b      	ldrb	r3, [r3, #0]
    20d6:	b10b      	cbz	r3, 20dc <analogRead+0x34>
    20d8:	f7ff ff18 	bl	1f0c <wait_for_cal>
	//pin = 5; // PTD1/SE5b, pin 14, analog 0

#if defined(__MK20DX256__)
	if (channel & 0x80) goto beginADC1;
    20dc:	0621      	lsls	r1, r4, #24
    20de:	d414      	bmi.n	210a <analogRead+0x62>
#endif

	__disable_irq();
    20e0:	b672      	cpsid	i
startADC0:
	//serial_print("startADC0\n");
	ADC0_SC1A = channel;
    20e2:	4b21      	ldr	r3, [pc, #132]	; (2168 <analogRead+0xc0>)
	analogReadBusyADC0 = 1;
    20e4:	4d21      	ldr	r5, [pc, #132]	; (216c <analogRead+0xc4>)
#endif

	__disable_irq();
startADC0:
	//serial_print("startADC0\n");
	ADC0_SC1A = channel;
    20e6:	601c      	str	r4, [r3, #0]
	analogReadBusyADC0 = 1;
    20e8:	2301      	movs	r3, #1
    20ea:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    20ec:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    20ee:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    20f0:	4b1d      	ldr	r3, [pc, #116]	; (2168 <analogRead+0xc0>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	061a      	lsls	r2, r3, #24
    20f6:	d501      	bpl.n	20fc <analogRead+0x54>
			result = ADC0_RA;
    20f8:	4b1d      	ldr	r3, [pc, #116]	; (2170 <analogRead+0xc8>)
    20fa:	e01f      	b.n	213c <analogRead+0x94>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    20fc:	782b      	ldrb	r3, [r5, #0]
    20fe:	2b00      	cmp	r3, #0
    2100:	d0ef      	beq.n	20e2 <analogRead+0x3a>
		__enable_irq();
    2102:	b662      	cpsie	i
		yield();
    2104:	f002 f90c 	bl	4320 <yield>
	}
    2108:	e7f1      	b.n	20ee <analogRead+0x46>

#if defined(__MK20DX256__)
beginADC1:
	__disable_irq();
    210a:	b672      	cpsid	i
    210c:	4b19      	ldr	r3, [pc, #100]	; (2174 <analogRead+0xcc>)
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    210e:	4d1a      	ldr	r5, [pc, #104]	; (2178 <analogRead+0xd0>)
	__disable_irq();
startADC1:
	//serial_print("startADC0\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2110:	681a      	ldr	r2, [r3, #0]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC0\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2112:	f014 0f40 	tst.w	r4, #64	; 0x40
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2116:	bf14      	ite	ne
    2118:	f022 0210 	bicne.w	r2, r2, #16
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    211c:	f042 0210 	orreq.w	r2, r2, #16
    2120:	601a      	str	r2, [r3, #0]
	}
	ADC1_SC1A = channel & 0x3F;
    2122:	4b16      	ldr	r3, [pc, #88]	; (217c <analogRead+0xd4>)
    2124:	f004 023f 	and.w	r2, r4, #63	; 0x3f
    2128:	601a      	str	r2, [r3, #0]
	analogReadBusyADC1 = 1;
    212a:	2301      	movs	r3, #1
    212c:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    212e:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    2130:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2132:	4b12      	ldr	r3, [pc, #72]	; (217c <analogRead+0xd4>)
    2134:	681b      	ldr	r3, [r3, #0]
    2136:	061b      	lsls	r3, r3, #24
    2138:	d508      	bpl.n	214c <analogRead+0xa4>
			result = ADC1_RA;
    213a:	4b11      	ldr	r3, [pc, #68]	; (2180 <analogRead+0xd8>)
    213c:	6818      	ldr	r0, [r3, #0]
			analogReadBusyADC1 = 0;
    213e:	2300      	movs	r3, #0
    2140:	702b      	strb	r3, [r5, #0]
			__enable_irq();
    2142:	b662      	cpsie	i
			result >>= analog_right_shift;
    2144:	4b0f      	ldr	r3, [pc, #60]	; (2184 <analogRead+0xdc>)
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	4118      	asrs	r0, r3
			return result;
    214a:	bd38      	pop	{r3, r4, r5, pc}
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    214c:	782b      	ldrb	r3, [r5, #0]
    214e:	2b00      	cmp	r3, #0
    2150:	d0dc      	beq.n	210c <analogRead+0x64>
		__enable_irq();
    2152:	b662      	cpsie	i
		yield();
    2154:	f002 f8e4 	bl	4320 <yield>
	}
    2158:	e7ea      	b.n	2130 <analogRead+0x88>
#endif
	} else if (pin >= 34 && pin <= 40) {
		index = pin - 24;  // 34-37 are A10-A13, 38 is temp sensor,
			    // 39 is vref, 40 is unused (A14 on Teensy 3.1)
	} else {
		return 0;   // all others are invalid
    215a:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    215c:	bd38      	pop	{r3, r4, r5, pc}
    215e:	bf00      	nop
    2160:	00012ae8 	.word	0x00012ae8
    2164:	1fff90c2 	.word	0x1fff90c2
    2168:	4003b000 	.word	0x4003b000
    216c:	1fff90c4 	.word	0x1fff90c4
    2170:	4003b010 	.word	0x4003b010
    2174:	400bb00c 	.word	0x400bb00c
    2178:	1fff90c3 	.word	0x1fff90c3
    217c:	400bb000 	.word	0x400bb000
    2180:	400bb010 	.word	0x400bb010
    2184:	1fff90c1 	.word	0x1fff90c1

00002188 <software_isr>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    2188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    218a:	4b16      	ldr	r3, [pc, #88]	; (21e4 <software_isr+0x5c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    218c:	4d16      	ldr	r5, [pc, #88]	; (21e8 <software_isr+0x60>)

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    218e:	681a      	ldr	r2, [r3, #0]
    2190:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    2194:	601a      	str	r2, [r3, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2196:	4b15      	ldr	r3, [pc, #84]	; (21ec <software_isr+0x64>)
    2198:	681a      	ldr	r2, [r3, #0]
    219a:	f042 0201 	orr.w	r2, r2, #1
    219e:	601a      	str	r2, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    21a0:	4b13      	ldr	r3, [pc, #76]	; (21f0 <software_isr+0x68>)
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    21a2:	682e      	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    21a4:	681c      	ldr	r4, [r3, #0]
    21a6:	b18c      	cbz	r4, 21cc <software_isr+0x44>
		if (p->active) {
    21a8:	7a23      	ldrb	r3, [r4, #8]
    21aa:	b16b      	cbz	r3, 21c8 <software_isr+0x40>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    21ac:	6823      	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    21ae:	682f      	ldr	r7, [r5, #0]
			p->update();
    21b0:	681b      	ldr	r3, [r3, #0]
    21b2:	4620      	mov	r0, r4
    21b4:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    21b6:	682a      	ldr	r2, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    21b8:	88e1      	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    21ba:	1bd2      	subs	r2, r2, r7
    21bc:	0912      	lsrs	r2, r2, #4
			p->cpu_cycles = cycles;
    21be:	b293      	uxth	r3, r2
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    21c0:	428a      	cmp	r2, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    21c2:	80a3      	strh	r3, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    21c4:	bf88      	it	hi
    21c6:	80e3      	strhhi	r3, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    21c8:	6964      	ldr	r4, [r4, #20]
    21ca:	e7ec      	b.n	21a6 <software_isr+0x1e>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    21cc:	6829      	ldr	r1, [r5, #0]
	AudioStream::cpu_cycles_total = totalcycles;
    21ce:	4b09      	ldr	r3, [pc, #36]	; (21f4 <software_isr+0x6c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    21d0:	1b89      	subs	r1, r1, r6
    21d2:	0909      	lsrs	r1, r1, #4
	AudioStream::cpu_cycles_total = totalcycles;
    21d4:	b28a      	uxth	r2, r1
    21d6:	801a      	strh	r2, [r3, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    21d8:	4b07      	ldr	r3, [pc, #28]	; (21f8 <software_isr+0x70>)
    21da:	8818      	ldrh	r0, [r3, #0]
    21dc:	4281      	cmp	r1, r0
		AudioStream::cpu_cycles_total_max = totalcycles;
    21de:	bf88      	it	hi
    21e0:	801a      	strhhi	r2, [r3, #0]
    21e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21e4:	e000edfc 	.word	0xe000edfc
    21e8:	e0001004 	.word	0xe0001004
    21ec:	e0001000 	.word	0xe0001000
    21f0:	1fff90c8 	.word	0x1fff90c8
    21f4:	1fff90ce 	.word	0x1fff90ce
    21f8:	1fff90cc 	.word	0x1fff90cc

000021fc <_ZN14HardwareSerial5writeEm>:
	virtual int peek(void)          { return serial_peek(); }
	virtual int read(void)          { return serial_getchar(); }
	virtual void flush(void)        { serial_flush(); }
	virtual void clear(void)	{ serial_clear(); }
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    21fc:	b508      	push	{r3, lr}
    21fe:	6803      	ldr	r3, [r0, #0]
    2200:	b2c9      	uxtb	r1, r1
    2202:	681b      	ldr	r3, [r3, #0]
    2204:	4798      	blx	r3
    2206:	bd08      	pop	{r3, pc}

00002208 <_ZN14HardwareSerial5writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    2208:	b508      	push	{r3, lr}
    220a:	6803      	ldr	r3, [r0, #0]
    220c:	b2c9      	uxtb	r1, r1
    220e:	681b      	ldr	r3, [r3, #0]
    2210:	4798      	blx	r3
    2212:	bd08      	pop	{r3, pc}

00002214 <_ZN14HardwareSerial5writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    2214:	b508      	push	{r3, lr}
    2216:	6803      	ldr	r3, [r0, #0]
    2218:	b2c9      	uxtb	r1, r1
    221a:	681b      	ldr	r3, [r3, #0]
    221c:	4798      	blx	r3
    221e:	bd08      	pop	{r3, pc}

00002220 <_ZN14HardwareSerial5writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    2220:	b508      	push	{r3, lr}
    2222:	6803      	ldr	r3, [r0, #0]
    2224:	b2c9      	uxtb	r1, r1
    2226:	681b      	ldr	r3, [r3, #0]
    2228:	4798      	blx	r3
    222a:	bd08      	pop	{r3, pc}

0000222c <_ZN14HardwareSerial5beginEm>:
#ifdef __cplusplus
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
    222c:	4803      	ldr	r0, [pc, #12]	; (223c <_ZN14HardwareSerial5beginEm+0x10>)
    222e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    2232:	fbb0 f0f1 	udiv	r0, r0, r1
    2236:	f000 bce1 	b.w	2bfc <serial_begin>
    223a:	bf00      	nop
    223c:	08954400 	.word	0x08954400

00002240 <_ZN14HardwareSerial5beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    2240:	b510      	push	{r4, lr}
					  serial_begin(BAUD2DIV(baud));
    2242:	4806      	ldr	r0, [pc, #24]	; (225c <_ZN14HardwareSerial5beginEmm+0x1c>)
    2244:	eb00 0051 	add.w	r0, r0, r1, lsr #1
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    2248:	4614      	mov	r4, r2
					  serial_begin(BAUD2DIV(baud));
    224a:	fbb0 f0f1 	udiv	r0, r0, r1
    224e:	f000 fcd5 	bl	2bfc <serial_begin>
					  serial_format(format); }
    2252:	4620      	mov	r0, r4
    2254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2258:	f000 bd1e 	b.w	2c98 <serial_format>
    225c:	08954400 	.word	0x08954400

00002260 <_ZN14HardwareSerial3endEv>:
	virtual void end(void)		{ serial_end(); }
    2260:	f000 bd48 	b.w	2cf4 <serial_end>

00002264 <_ZN14HardwareSerial17transmitterEnableEh>:
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
    2264:	4608      	mov	r0, r1
    2266:	f000 bd71 	b.w	2d4c <serial_set_transmit_pin>

0000226a <_ZN14HardwareSerial9availableEv>:
	virtual int available(void)     { return serial_available(); }
    226a:	f000 be45 	b.w	2ef8 <serial_available>

0000226e <_ZN14HardwareSerial4peekEv>:
	virtual int peek(void)          { return serial_peek(); }
    226e:	f000 be6d 	b.w	2f4c <serial_peek>

00002272 <_ZN14HardwareSerial4readEv>:
	virtual int read(void)          { return serial_getchar(); }
    2272:	f000 be51 	b.w	2f18 <serial_getchar>

00002276 <_ZN14HardwareSerial5flushEv>:
	virtual void flush(void)        { serial_flush(); }
    2276:	f000 be35 	b.w	2ee4 <serial_flush>

0000227a <_ZN14HardwareSerial5clearEv>:
	virtual void clear(void)	{ serial_clear(); }
    227a:	f000 be7f 	b.w	2f7c <serial_clear>

0000227e <_ZN14HardwareSerial5writeEh>:
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
    227e:	b508      	push	{r3, lr}
    2280:	4608      	mov	r0, r1
    2282:	f000 fd7f 	bl	2d84 <serial_putchar>
    2286:	2001      	movs	r0, #1
    2288:	bd08      	pop	{r3, pc}

0000228a <_ZN14HardwareSerial9write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
    228a:	b508      	push	{r3, lr}
    228c:	4608      	mov	r0, r1
    228e:	f000 fd79 	bl	2d84 <serial_putchar>
    2292:	2001      	movs	r0, #1
    2294:	bd08      	pop	{r3, pc}

00002296 <_ZN14HardwareSerial5writeEPKhj>:
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    2296:	b510      	push	{r4, lr}
					{ serial_write(buffer, size); return size; }
    2298:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    229a:	4614      	mov	r4, r2
					{ serial_write(buffer, size); return size; }
    229c:	4611      	mov	r1, r2
    229e:	f000 fdbf 	bl	2e20 <serial_write>
    22a2:	4620      	mov	r0, r4
    22a4:	bd10      	pop	{r4, pc}

000022a6 <_ZN14HardwareSerial5writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    22a6:	b538      	push	{r3, r4, r5, lr}
    22a8:	4608      	mov	r0, r1
    22aa:	460d      	mov	r5, r1
    22ac:	f000 f9f6 	bl	269c <strlen>
    22b0:	4604      	mov	r4, r0
					  serial_write((const uint8_t *)str, len);
    22b2:	4621      	mov	r1, r4
    22b4:	4628      	mov	r0, r5
    22b6:	f000 fdb3 	bl	2e20 <serial_write>
					  return len; }
    22ba:	4620      	mov	r0, r4
    22bc:	bd38      	pop	{r3, r4, r5, pc}
    22be:	ffff 4b04 	vtbl.8	d20, {d15-d18}, d4

000022c0 <_GLOBAL__sub_I_Serial1>:
class __FlashStringHelper;

class Print
{
  public:
	Print() : write_error(0) {}
    22c0:	4b04      	ldr	r3, [pc, #16]	; (22d4 <_GLOBAL__sub_I_Serial1+0x14>)
    22c2:	2200      	movs	r2, #0
    22c4:	711a      	strb	r2, [r3, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    22c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    22ca:	731a      	strb	r2, [r3, #12]

// C++ interface
//
#ifdef __cplusplus
#include "Stream.h"
class HardwareSerial : public Stream
    22cc:	4a02      	ldr	r2, [pc, #8]	; (22d8 <_GLOBAL__sub_I_Serial1+0x18>)
    22ce:	6099      	str	r1, [r3, #8]
    22d0:	601a      	str	r2, [r3, #0]
    22d2:	4770      	bx	lr
    22d4:	1fff90d0 	.word	0x1fff90d0
    22d8:	00012b08 	.word	0x00012b08

000022dc <_ZN15HardwareSerial25writeEm>:
	virtual int peek(void)          { return serial2_peek(); }
	virtual int read(void)          { return serial2_getchar(); }
	virtual void flush(void)        { serial2_flush(); }
	virtual void clear(void)	{ serial2_clear(); }
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    22dc:	b508      	push	{r3, lr}
    22de:	6803      	ldr	r3, [r0, #0]
    22e0:	b2c9      	uxtb	r1, r1
    22e2:	681b      	ldr	r3, [r3, #0]
    22e4:	4798      	blx	r3
    22e6:	bd08      	pop	{r3, pc}

000022e8 <_ZN15HardwareSerial25writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    22e8:	b508      	push	{r3, lr}
    22ea:	6803      	ldr	r3, [r0, #0]
    22ec:	b2c9      	uxtb	r1, r1
    22ee:	681b      	ldr	r3, [r3, #0]
    22f0:	4798      	blx	r3
    22f2:	bd08      	pop	{r3, pc}

000022f4 <_ZN15HardwareSerial25writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    22f4:	b508      	push	{r3, lr}
    22f6:	6803      	ldr	r3, [r0, #0]
    22f8:	b2c9      	uxtb	r1, r1
    22fa:	681b      	ldr	r3, [r3, #0]
    22fc:	4798      	blx	r3
    22fe:	bd08      	pop	{r3, pc}

00002300 <_ZN15HardwareSerial25writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    2300:	b508      	push	{r3, lr}
    2302:	6803      	ldr	r3, [r0, #0]
    2304:	b2c9      	uxtb	r1, r1
    2306:	681b      	ldr	r3, [r3, #0]
    2308:	4798      	blx	r3
    230a:	bd08      	pop	{r3, pc}

0000230c <_ZN15HardwareSerial25beginEm>:
extern HardwareSerial Serial1;

class HardwareSerial2 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial2_begin(BAUD2DIV(baud)); }
    230c:	4803      	ldr	r0, [pc, #12]	; (231c <_ZN15HardwareSerial25beginEm+0x10>)
    230e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    2312:	fbb0 f0f1 	udiv	r0, r0, r1
    2316:	f000 becd 	b.w	30b4 <serial2_begin>
    231a:	bf00      	nop
    231c:	08954400 	.word	0x08954400

00002320 <_ZN15HardwareSerial25beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    2320:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV(baud));
    2322:	4806      	ldr	r0, [pc, #24]	; (233c <_ZN15HardwareSerial25beginEmm+0x1c>)
    2324:	eb00 0051 	add.w	r0, r0, r1, lsr #1

class HardwareSerial2 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial2_begin(BAUD2DIV(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    2328:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV(baud));
    232a:	fbb0 f0f1 	udiv	r0, r0, r1
    232e:	f000 fec1 	bl	30b4 <serial2_begin>
					  serial2_format(format); }
    2332:	4620      	mov	r0, r4
    2334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2338:	f000 bf00 	b.w	313c <serial2_format>
    233c:	08954400 	.word	0x08954400

00002340 <_ZN15HardwareSerial23endEv>:
	virtual void end(void)		{ serial2_end(); }
    2340:	f000 bf2a 	b.w	3198 <serial2_end>

00002344 <_ZN15HardwareSerial29availableEv>:
	virtual int available(void)     { return serial2_available(); }
    2344:	f000 bfb2 	b.w	32ac <serial2_available>

00002348 <_ZN15HardwareSerial24peekEv>:
	virtual int peek(void)          { return serial2_peek(); }
    2348:	f000 bfda 	b.w	3300 <serial2_peek>

0000234c <_ZN15HardwareSerial24readEv>:
	virtual int read(void)          { return serial2_getchar(); }
    234c:	f000 bfbe 	b.w	32cc <serial2_getchar>

00002350 <_ZN15HardwareSerial25flushEv>:
	virtual void flush(void)        { serial2_flush(); }
    2350:	f000 bfa2 	b.w	3298 <serial2_flush>

00002354 <_ZN15HardwareSerial25clearEv>:
	virtual void clear(void)	{ serial2_clear(); }
    2354:	f000 bfec 	b.w	3330 <serial2_clear>

00002358 <_ZN15HardwareSerial25writeEh>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    2358:	b508      	push	{r3, lr}
    235a:	4608      	mov	r0, r1
    235c:	f000 ff48 	bl	31f0 <serial2_putchar>
    2360:	2001      	movs	r0, #1
    2362:	bd08      	pop	{r3, pc}

00002364 <_ZN15HardwareSerial29write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    2364:	b508      	push	{r3, lr}
    2366:	4608      	mov	r0, r1
    2368:	f000 ff42 	bl	31f0 <serial2_putchar>
    236c:	2001      	movs	r0, #1
    236e:	bd08      	pop	{r3, pc}

00002370 <_ZN15HardwareSerial25writeEPKhj>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    2370:	b510      	push	{r4, lr}
					{ serial2_write(buffer, size); return size; }
    2372:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    2374:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    2376:	4611      	mov	r1, r2
    2378:	f000 ff82 	bl	3280 <serial2_write>
    237c:	4620      	mov	r0, r4
    237e:	bd10      	pop	{r4, pc}

00002380 <_ZN15HardwareSerial25writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    2380:	b538      	push	{r3, r4, r5, lr}
    2382:	4608      	mov	r0, r1
    2384:	460d      	mov	r5, r1
    2386:	f000 f989 	bl	269c <strlen>
    238a:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    238c:	4621      	mov	r1, r4
    238e:	4628      	mov	r0, r5
    2390:	f000 ff76 	bl	3280 <serial2_write>
					  return len; }
    2394:	4620      	mov	r0, r4
    2396:	bd38      	pop	{r3, r4, r5, pc}

00002398 <_GLOBAL__sub_I_Serial2>:
    2398:	4b04      	ldr	r3, [pc, #16]	; (23ac <_GLOBAL__sub_I_Serial2+0x14>)
    239a:	2200      	movs	r2, #0
    239c:	711a      	strb	r2, [r3, #4]
    239e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    23a2:	731a      	strb	r2, [r3, #12]
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
};
extern HardwareSerial Serial1;

class HardwareSerial2 : public HardwareSerial
    23a4:	4a02      	ldr	r2, [pc, #8]	; (23b0 <_GLOBAL__sub_I_Serial2+0x18>)
    23a6:	6099      	str	r1, [r3, #8]
    23a8:	601a      	str	r2, [r3, #0]
    23aa:	4770      	bx	lr
    23ac:	1fff90e0 	.word	0x1fff90e0
    23b0:	00012b58 	.word	0x00012b58

000023b4 <_ZN15HardwareSerial35writeEm>:
	virtual int peek(void)          { return serial3_peek(); }
	virtual int read(void)          { return serial3_getchar(); }
	virtual void flush(void)        { serial3_flush(); }
	virtual void clear(void)	{ serial3_clear(); }
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    23b4:	b508      	push	{r3, lr}
    23b6:	6803      	ldr	r3, [r0, #0]
    23b8:	b2c9      	uxtb	r1, r1
    23ba:	681b      	ldr	r3, [r3, #0]
    23bc:	4798      	blx	r3
    23be:	bd08      	pop	{r3, pc}

000023c0 <_ZN15HardwareSerial35writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    23c0:	b508      	push	{r3, lr}
    23c2:	6803      	ldr	r3, [r0, #0]
    23c4:	b2c9      	uxtb	r1, r1
    23c6:	681b      	ldr	r3, [r3, #0]
    23c8:	4798      	blx	r3
    23ca:	bd08      	pop	{r3, pc}

000023cc <_ZN15HardwareSerial35writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    23cc:	b508      	push	{r3, lr}
    23ce:	6803      	ldr	r3, [r0, #0]
    23d0:	b2c9      	uxtb	r1, r1
    23d2:	681b      	ldr	r3, [r3, #0]
    23d4:	4798      	blx	r3
    23d6:	bd08      	pop	{r3, pc}

000023d8 <_ZN15HardwareSerial35writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    23d8:	b508      	push	{r3, lr}
    23da:	6803      	ldr	r3, [r0, #0]
    23dc:	b2c9      	uxtb	r1, r1
    23de:	681b      	ldr	r3, [r3, #0]
    23e0:	4798      	blx	r3
    23e2:	bd08      	pop	{r3, pc}

000023e4 <_ZN15HardwareSerial35beginEm>:
extern HardwareSerial2 Serial2;

class HardwareSerial3 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
    23e4:	4803      	ldr	r0, [pc, #12]	; (23f4 <_ZN15HardwareSerial35beginEm+0x10>)
    23e6:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    23ea:	fbb0 f0f1 	udiv	r0, r0, r1
    23ee:	f000 bffb 	b.w	33e8 <serial3_begin>
    23f2:	bf00      	nop
    23f4:	044aa200 	.word	0x044aa200

000023f8 <_ZN15HardwareSerial35beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    23f8:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    23fa:	4806      	ldr	r0, [pc, #24]	; (2414 <_ZN15HardwareSerial35beginEmm+0x1c>)
    23fc:	eb00 0051 	add.w	r0, r0, r1, lsr #1

class HardwareSerial3 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    2400:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    2402:	fbb0 f0f1 	udiv	r0, r0, r1
    2406:	f000 ffef 	bl	33e8 <serial3_begin>
					  serial3_format(format); }
    240a:	4620      	mov	r0, r4
    240c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2410:	f001 b82e 	b.w	3470 <serial3_format>
    2414:	044aa200 	.word	0x044aa200

00002418 <_ZN15HardwareSerial33endEv>:
	virtual void end(void)          { serial3_end(); }
    2418:	f001 b858 	b.w	34cc <serial3_end>

0000241c <_ZN15HardwareSerial39availableEv>:
	virtual int available(void)     { return serial3_available(); }
    241c:	f001 b8e0 	b.w	35e0 <serial3_available>

00002420 <_ZN15HardwareSerial34peekEv>:
	virtual int peek(void)          { return serial3_peek(); }
    2420:	f001 b908 	b.w	3634 <serial3_peek>

00002424 <_ZN15HardwareSerial34readEv>:
	virtual int read(void)          { return serial3_getchar(); }
    2424:	f001 b8ec 	b.w	3600 <serial3_getchar>

00002428 <_ZN15HardwareSerial35flushEv>:
	virtual void flush(void)        { serial3_flush(); }
    2428:	f001 b8d0 	b.w	35cc <serial3_flush>

0000242c <_ZN15HardwareSerial35clearEv>:
	virtual void clear(void)	{ serial3_clear(); }
    242c:	f001 b91a 	b.w	3664 <serial3_clear>

00002430 <_ZN15HardwareSerial35writeEh>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    2430:	b508      	push	{r3, lr}
    2432:	4608      	mov	r0, r1
    2434:	f001 f876 	bl	3524 <serial3_putchar>
    2438:	2001      	movs	r0, #1
    243a:	bd08      	pop	{r3, pc}

0000243c <_ZN15HardwareSerial39write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    243c:	b508      	push	{r3, lr}
    243e:	4608      	mov	r0, r1
    2440:	f001 f870 	bl	3524 <serial3_putchar>
    2444:	2001      	movs	r0, #1
    2446:	bd08      	pop	{r3, pc}

00002448 <_ZN15HardwareSerial35writeEPKhj>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    2448:	b510      	push	{r4, lr}
					{ serial3_write(buffer, size); return size; }
    244a:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    244c:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    244e:	4611      	mov	r1, r2
    2450:	f001 f8b0 	bl	35b4 <serial3_write>
    2454:	4620      	mov	r0, r4
    2456:	bd10      	pop	{r4, pc}

00002458 <_ZN15HardwareSerial35writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    2458:	b538      	push	{r3, r4, r5, lr}
    245a:	4608      	mov	r0, r1
    245c:	460d      	mov	r5, r1
    245e:	f000 f91d 	bl	269c <strlen>
    2462:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    2464:	4621      	mov	r1, r4
    2466:	4628      	mov	r0, r5
    2468:	f001 f8a4 	bl	35b4 <serial3_write>
					  return len; }
    246c:	4620      	mov	r0, r4
    246e:	bd38      	pop	{r3, r4, r5, pc}

00002470 <_GLOBAL__sub_I_Serial3>:
    2470:	4b04      	ldr	r3, [pc, #16]	; (2484 <_GLOBAL__sub_I_Serial3+0x14>)
    2472:	2200      	movs	r2, #0
    2474:	711a      	strb	r2, [r3, #4]
    2476:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    247a:	731a      	strb	r2, [r3, #12]
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
};
extern HardwareSerial2 Serial2;

class HardwareSerial3 : public HardwareSerial
    247c:	4a02      	ldr	r2, [pc, #8]	; (2488 <_GLOBAL__sub_I_Serial3+0x18>)
    247e:	6099      	str	r1, [r3, #8]
    2480:	601a      	str	r2, [r3, #0]
    2482:	4770      	bx	lr
    2484:	1fff90f0 	.word	0x1fff90f0
    2488:	00012ba8 	.word	0x00012ba8

0000248c <pit0_isr>:
// these are the ISRs (Interrupt Service Routines) that get
// called by each PIT timer when it fires. they're defined here
// so that they can auto-clear themselves and so the user can
// specify a custom ISR and reassign it as needed
// ------------------------------------------------------------
void pit0_isr() { PIT_TFLG0 = 1; IntervalTimer::PIT_ISR[0](); }
    248c:	b508      	push	{r3, lr}
    248e:	4b03      	ldr	r3, [pc, #12]	; (249c <pit0_isr+0x10>)
    2490:	2201      	movs	r2, #1
    2492:	601a      	str	r2, [r3, #0]
    2494:	4b02      	ldr	r3, [pc, #8]	; (24a0 <pit0_isr+0x14>)
    2496:	681b      	ldr	r3, [r3, #0]
    2498:	4798      	blx	r3
    249a:	bd08      	pop	{r3, pc}
    249c:	4003710c 	.word	0x4003710c
    24a0:	1fff9108 	.word	0x1fff9108

000024a4 <pit1_isr>:
void pit1_isr() { PIT_TFLG1 = 1; IntervalTimer::PIT_ISR[1](); }
    24a4:	b508      	push	{r3, lr}
    24a6:	4b03      	ldr	r3, [pc, #12]	; (24b4 <pit1_isr+0x10>)
    24a8:	2201      	movs	r2, #1
    24aa:	601a      	str	r2, [r3, #0]
    24ac:	4b02      	ldr	r3, [pc, #8]	; (24b8 <pit1_isr+0x14>)
    24ae:	685b      	ldr	r3, [r3, #4]
    24b0:	4798      	blx	r3
    24b2:	bd08      	pop	{r3, pc}
    24b4:	4003711c 	.word	0x4003711c
    24b8:	1fff9108 	.word	0x1fff9108

000024bc <pit2_isr>:
void pit2_isr() { PIT_TFLG2 = 1; IntervalTimer::PIT_ISR[2](); }
    24bc:	b508      	push	{r3, lr}
    24be:	4b03      	ldr	r3, [pc, #12]	; (24cc <pit2_isr+0x10>)
    24c0:	2201      	movs	r2, #1
    24c2:	601a      	str	r2, [r3, #0]
    24c4:	4b02      	ldr	r3, [pc, #8]	; (24d0 <pit2_isr+0x14>)
    24c6:	689b      	ldr	r3, [r3, #8]
    24c8:	4798      	blx	r3
    24ca:	bd08      	pop	{r3, pc}
    24cc:	4003712c 	.word	0x4003712c
    24d0:	1fff9108 	.word	0x1fff9108

000024d4 <pit3_isr>:
void pit3_isr() { PIT_TFLG3 = 1; IntervalTimer::PIT_ISR[3](); }
    24d4:	b508      	push	{r3, lr}
    24d6:	4b03      	ldr	r3, [pc, #12]	; (24e4 <pit3_isr+0x10>)
    24d8:	2201      	movs	r2, #1
    24da:	601a      	str	r2, [r3, #0]
    24dc:	4b02      	ldr	r3, [pc, #8]	; (24e8 <pit3_isr+0x14>)
    24de:	68db      	ldr	r3, [r3, #12]
    24e0:	4798      	blx	r3
    24e2:	bd08      	pop	{r3, pc}
    24e4:	4003713c 	.word	0x4003713c
    24e8:	1fff9108 	.word	0x1fff9108

000024ec <_ZN13IntervalTimer11disable_PITEv>:

// ------------------------------------------------------------
// disables the master PIT reg, the PIT clock bit, and unsets flag
// ------------------------------------------------------------
void IntervalTimer::disable_PIT() {
  PIT_MCR = 1;
    24ec:	4b06      	ldr	r3, [pc, #24]	; (2508 <_ZN13IntervalTimer11disable_PITEv+0x1c>)
    24ee:	2201      	movs	r2, #1
    24f0:	601a      	str	r2, [r3, #0]
  SIM_SCGC6 &= ~SIM_SCGC6_PIT;
    24f2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    24f6:	333c      	adds	r3, #60	; 0x3c
    24f8:	681a      	ldr	r2, [r3, #0]
    24fa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    24fe:	601a      	str	r2, [r3, #0]
  PIT_enabled = false;
    2500:	4b02      	ldr	r3, [pc, #8]	; (250c <_ZN13IntervalTimer11disable_PITEv+0x20>)
    2502:	2200      	movs	r2, #0
    2504:	701a      	strb	r2, [r3, #0]
    2506:	4770      	bx	lr
    2508:	40037000 	.word	0x40037000
    250c:	1fff9104 	.word	0x1fff9104

00002510 <_ZN13IntervalTimer8stop_PITEv>:
// also, if no PITs remain in use, disables the core PIT clock
// ------------------------------------------------------------
void IntervalTimer::stop_PIT() {
  
  // disable interrupt and PIT
  NVIC_DISABLE_IRQ(IRQ_PIT_CH);
    2510:	7b03      	ldrb	r3, [r0, #12]
    2512:	2201      	movs	r2, #1
    2514:	1159      	asrs	r1, r3, #5
    2516:	f003 031f 	and.w	r3, r3, #31
    251a:	fa02 f303 	lsl.w	r3, r2, r3
    251e:	4a08      	ldr	r2, [pc, #32]	; (2540 <_ZN13IntervalTimer8stop_PITEv+0x30>)
    2520:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  *PIT_TCTRL = 0;
    2524:	6882      	ldr	r2, [r0, #8]
    2526:	2300      	movs	r3, #0
    2528:	6013      	str	r3, [r2, #0]
  
  // free PIT for future use
  PIT_used[PIT_id] = false;
    252a:	7841      	ldrb	r1, [r0, #1]
    252c:	4a05      	ldr	r2, [pc, #20]	; (2544 <_ZN13IntervalTimer8stop_PITEv+0x34>)
    252e:	5453      	strb	r3, [r2, r1]
  
  // check if we're still using any PIT
  for (uint8_t id = 0; id < NUM_PIT; id++) {
    if (PIT_used[id]) return;
    2530:	5cd1      	ldrb	r1, [r2, r3]
    2532:	b921      	cbnz	r1, 253e <_ZN13IntervalTimer8stop_PITEv+0x2e>
    2534:	3301      	adds	r3, #1
  
  // free PIT for future use
  PIT_used[PIT_id] = false;
  
  // check if we're still using any PIT
  for (uint8_t id = 0; id < NUM_PIT; id++) {
    2536:	2b04      	cmp	r3, #4
    2538:	d1fa      	bne.n	2530 <_ZN13IntervalTimer8stop_PITEv+0x20>
    if (PIT_used[id]) return;
  }
  
  // none used, disable PIT clock
  disable_PIT();
    253a:	f7ff bfd7 	b.w	24ec <_ZN13IntervalTimer11disable_PITEv>
    253e:	4770      	bx	lr
    2540:	e000e180 	.word	0xe000e180
    2544:	1fff9100 	.word	0x1fff9100

00002548 <_ZN13IntervalTimer3endEv>:
// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
  if (status == TIMER_PIT) stop_PIT();
    2548:	7803      	ldrb	r3, [r0, #0]

// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
    254a:	b510      	push	{r4, lr}
    254c:	4604      	mov	r4, r0
  if (status == TIMER_PIT) stop_PIT();
    254e:	b10b      	cbz	r3, 2554 <_ZN13IntervalTimer3endEv+0xc>
    2550:	f7ff ffde 	bl	2510 <_ZN13IntervalTimer8stop_PITEv>
  status = TIMER_OFF;
    2554:	2300      	movs	r3, #0
    2556:	7023      	strb	r3, [r4, #0]
    2558:	bd10      	pop	{r4, pc}

0000255a <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    255a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t n = 0;
    for (int i =0; i < 3; i++)
    255e:	2400      	movs	r4, #0
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    2560:	4607      	mov	r7, r0
    2562:	460d      	mov	r5, r1
    size_t n = 0;
    2564:	4626      	mov	r6, r4
    2566:	193b      	adds	r3, r7, r4
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    2568:	220a      	movs	r2, #10
    256a:	7919      	ldrb	r1, [r3, #4]
    256c:	4628      	mov	r0, r5
    256e:	2300      	movs	r3, #0
    2570:	f000 fb0b 	bl	2b8a <_ZN5Print11printNumberEmhh>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
    2574:	682b      	ldr	r3, [r5, #0]
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    2576:	4680      	mov	r8, r0
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
    2578:	681b      	ldr	r3, [r3, #0]
    257a:	4628      	mov	r0, r5
    257c:	212e      	movs	r1, #46	; 0x2e
    257e:	4798      	blx	r3
    for (int i =0; i < 3; i++)
    2580:	3401      	adds	r4, #1
    {
        n += p.print(_address[i], DEC);
    2582:	4440      	add	r0, r8
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    2584:	2c03      	cmp	r4, #3
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    2586:	4406      	add	r6, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    2588:	d1ed      	bne.n	2566 <_ZNK9IPAddress7printToER5Print+0xc>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    258a:	4628      	mov	r0, r5
    258c:	79f9      	ldrb	r1, [r7, #7]
    258e:	220a      	movs	r2, #10
    2590:	2300      	movs	r3, #0
    2592:	f000 fafa 	bl	2b8a <_ZN5Print11printNumberEmhh>
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    2596:	4430      	add	r0, r6
    2598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000259c <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    259c:	4b04      	ldr	r3, [pc, #16]	; (25b0 <_GLOBAL__sub_I__ZN9IPAddressC2Ev+0x14>)
    259e:	4a05      	ldr	r2, [pc, #20]	; (25b4 <_GLOBAL__sub_I__ZN9IPAddressC2Ev+0x18>)
    25a0:	601a      	str	r2, [r3, #0]
{
    _address[0] = first_octet;
    25a2:	2200      	movs	r2, #0
    25a4:	711a      	strb	r2, [r3, #4]
    _address[1] = second_octet;
    25a6:	715a      	strb	r2, [r3, #5]
    _address[2] = third_octet;
    25a8:	719a      	strb	r2, [r3, #6]
    _address[3] = fourth_octet;
    25aa:	71da      	strb	r2, [r3, #7]
    25ac:	4770      	bx	lr
    25ae:	bf00      	nop
    25b0:	1fff9118 	.word	0x1fff9118
    25b4:	00012bf8 	.word	0x00012bf8

000025b8 <systick_default_isr>:
}

extern volatile uint32_t systick_millis_count;
void systick_default_isr(void)
{
	systick_millis_count++;
    25b8:	4b02      	ldr	r3, [pc, #8]	; (25c4 <systick_default_isr+0xc>)
    25ba:	681a      	ldr	r2, [r3, #0]
    25bc:	3201      	adds	r2, #1
    25be:	601a      	str	r2, [r3, #0]
    25c0:	4770      	bx	lr
    25c2:	bf00      	nop
    25c4:	1fff91a8 	.word	0x1fff91a8

000025c8 <fault_isr>:
void _init_Teensyduino_internal_(void);
void __libc_init_array(void);


void fault_isr(void)
{
    25c8:	b508      	push	{r3, lr}
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    25ca:	4c0b      	ldr	r4, [pc, #44]	; (25f8 <fault_isr+0x30>)
    25cc:	6823      	ldr	r3, [r4, #0]
    25ce:	0358      	lsls	r0, r3, #13
    25d0:	d501      	bpl.n	25d6 <fault_isr+0xe>
    25d2:	f001 f9b9 	bl	3948 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    25d6:	6823      	ldr	r3, [r4, #0]
    25d8:	0559      	lsls	r1, r3, #21
    25da:	d501      	bpl.n	25e0 <fault_isr+0x18>
    25dc:	f000 fcee 	bl	2fbc <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    25e0:	6823      	ldr	r3, [r4, #0]
    25e2:	051a      	lsls	r2, r3, #20
    25e4:	d501      	bpl.n	25ea <fault_isr+0x22>
    25e6:	f000 fead 	bl	3344 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    25ea:	6823      	ldr	r3, [r4, #0]
    25ec:	04db      	lsls	r3, r3, #19
    25ee:	d5ec      	bpl.n	25ca <fault_isr+0x2>
    25f0:	f001 f842 	bl	3678 <uart2_status_isr>
    25f4:	e7e9      	b.n	25ca <fault_isr+0x2>
    25f6:	bf00      	nop
    25f8:	40048034 	.word	0x40048034

000025fc <unused_isr>:
	}
}

void unused_isr(void)
{
    25fc:	b508      	push	{r3, lr}
	fault_isr();
    25fe:	f7ff ffe3 	bl	25c8 <fault_isr>
    2602:	ffff 4b01 	vtbl.8	d20, {d15-d18}, d1

00002604 <startup_early_hook>:
#define TIME_T 1349049600 // default 1 Oct 2012 (never used, Arduino sets this)
#endif
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) { WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE; }
    2604:	4b01      	ldr	r3, [pc, #4]	; (260c <startup_early_hook+0x8>)
    2606:	2210      	movs	r2, #16
    2608:	801a      	strh	r2, [r3, #0]
    260a:	4770      	bx	lr
    260c:	40052000 	.word	0x40052000

00002610 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    2610:	4770      	bx	lr

00002612 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    2612:	2000      	movs	r0, #0
    2614:	4770      	bx	lr

00002616 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    2616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    261a:	4770      	bx	lr

0000261c <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    261c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2620:	604b      	str	r3, [r1, #4]
	return 0;
}
    2622:	2000      	movs	r0, #0
    2624:	4770      	bx	lr

00002626 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    2626:	2001      	movs	r0, #1
    2628:	4770      	bx	lr

0000262a <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    262a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    262e:	4770      	bx	lr

00002630 <_exit>:

__attribute__((weak)) 
void _exit(int status)
{
    2630:	e7fe      	b.n	2630 <_exit>

00002632 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    2632:	e7fe      	b.n	2632 <__cxa_pure_virtual>

00002634 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    2634:	7800      	ldrb	r0, [r0, #0]
}
    2636:	f1d0 0001 	rsbs	r0, r0, #1
    263a:	bf38      	it	cc
    263c:	2000      	movcc	r0, #0
    263e:	4770      	bx	lr

00002640 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    2640:	2301      	movs	r3, #1
    2642:	7003      	strb	r3, [r0, #0]
    2644:	4770      	bx	lr
    2646:	ffff f3ef 			; <UNDEFINED> instruction: 0xfffff3ef

00002648 <nvic_execution_priority>:
	int priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    2648:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    264c:	b99b      	cbnz	r3, 2676 <nvic_execution_priority+0x2e>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    264e:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    2652:	b998      	cbnz	r0, 267c <nvic_execution_priority+0x34>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2654:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    2658:	b123      	cbz	r3, 2664 <nvic_execution_priority+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    265a:	2b0f      	cmp	r3, #15
    265c:	d904      	bls.n	2668 <nvic_execution_priority+0x20>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    265e:	4a08      	ldr	r2, [pc, #32]	; (2680 <nvic_execution_priority+0x38>)
    2660:	5c98      	ldrb	r0, [r3, r2]
    2662:	e001      	b.n	2668 <nvic_execution_priority+0x20>
	*g = 1;
}

int nvic_execution_priority(void)
{
	int priority=256;
    2664:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2668:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    266c:	b13b      	cbz	r3, 267e <nvic_execution_priority+0x36>
    266e:	4283      	cmp	r3, r0
    2670:	bf38      	it	cc
    2672:	4618      	movcc	r0, r3
    2674:	4770      	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    2676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    267a:	4770      	bx	lr
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
    267c:	4618      	mov	r0, r3
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
	if (basepri > 0 && basepri < priority) priority = basepri;
	return priority;
}
    267e:	4770      	bx	lr
    2680:	e000e3f0 	.word	0xe000e3f0

00002684 <_sbrk>:
	return 0;
}

void * _sbrk(int incr)
{
	char *prev = __brkval;
    2684:	4a02      	ldr	r2, [pc, #8]	; (2690 <_sbrk+0xc>)
    2686:	6813      	ldr	r3, [r2, #0]
	__brkval += incr;
    2688:	4418      	add	r0, r3
    268a:	6010      	str	r0, [r2, #0]
	return prev;
}
    268c:	4618      	mov	r0, r3
    268e:	4770      	bx	lr
    2690:	1fff8418 	.word	0x1fff8418

00002694 <_kill>:

int _kill(int pid, int sig)
{
	// duuh.
	return 0;
}
    2694:	2000      	movs	r0, #0
    2696:	4770      	bx	lr

00002698 <_getpid>:

int _getpid()
{
	return 0;
}
    2698:	2000      	movs	r0, #0
    269a:	4770      	bx	lr

0000269c <strlen>:
#include <string.h>
#include <stdio.h>

size_t strlen(const char *s)
{
	size_t n=0;
    269c:	2300      	movs	r3, #0

	while (*s++) n++;
    269e:	5cc2      	ldrb	r2, [r0, r3]
    26a0:	b10a      	cbz	r2, 26a6 <strlen+0xa>
    26a2:	3301      	adds	r3, #1
    26a4:	e7fb      	b.n	269e <strlen+0x2>
	return n;
}
    26a6:	4618      	mov	r0, r3
    26a8:	4770      	bx	lr

000026aa <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix) 	
{
    26aa:	b510      	push	{r4, lr}
	unsigned digit;
	int i=0, j;
    26ac:	2300      	movs	r3, #0
	char t;

	while (1) {
		digit = val % radix;
    26ae:	fbb0 f4f2 	udiv	r4, r0, r2
    26b2:	fb02 0014 	mls	r0, r2, r4, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    26b6:	2809      	cmp	r0, #9
    26b8:	bf94      	ite	ls
    26ba:	3030      	addls	r0, #48	; 0x30
    26bc:	3037      	addhi	r0, #55	; 0x37
    26be:	b2c0      	uxtb	r0, r0
    26c0:	54c8      	strb	r0, [r1, r3]
		val /= radix;
		if (val == 0) break;
    26c2:	4620      	mov	r0, r4
    26c4:	b10c      	cbz	r4, 26ca <ultoa+0x20>
		i++;
    26c6:	3301      	adds	r3, #1
	}
    26c8:	e7f1      	b.n	26ae <ultoa+0x4>
	buf[i + 1] = 0;
    26ca:	18ca      	adds	r2, r1, r3
    26cc:	7054      	strb	r4, [r2, #1]
	for (j=0; j < i; j++, i--) {
    26ce:	4622      	mov	r2, r4
    26d0:	429a      	cmp	r2, r3
    26d2:	da06      	bge.n	26e2 <ultoa+0x38>
		t = buf[j];
    26d4:	5c88      	ldrb	r0, [r1, r2]
		buf[j] = buf[i];
    26d6:	5ccc      	ldrb	r4, [r1, r3]
    26d8:	548c      	strb	r4, [r1, r2]
		buf[i] = t;
    26da:	54c8      	strb	r0, [r1, r3]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    26dc:	3201      	adds	r2, #1
    26de:	3b01      	subs	r3, #1
    26e0:	e7f6      	b.n	26d0 <ultoa+0x26>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    26e2:	4608      	mov	r0, r1
    26e4:	bd10      	pop	{r4, pc}
    26e6:	ffff 4b08 	vtbl.8	d20, {d15-d18}, d8

000026e8 <init_pin_interrupts>:
volatile static voidFuncPtr intFunc[CORE_NUM_DIGITAL];

void init_pin_interrupts(void)
{
	//SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    26e8:	4b08      	ldr	r3, [pc, #32]	; (270c <init_pin_interrupts+0x24>)
    26ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    26ee:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    26f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    26f4:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    26f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    26fa:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    26fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    2700:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    2706:	601a      	str	r2, [r3, #0]
    2708:	4770      	bx	lr
    270a:	bf00      	nop
    270c:	e000e108 	.word	0xe000e108

00002710 <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    2710:	2821      	cmp	r0, #33	; 0x21
	// so if the user puts lots of slow code on attachInterrupt
	// fast interrupts will still be serviced quickly?
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    2712:	b530      	push	{r4, r5, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    2714:	d821      	bhi.n	275a <attachInterrupt+0x4a>
	switch (mode) {
    2716:	2a04      	cmp	r2, #4
    2718:	d81f      	bhi.n	275a <attachInterrupt+0x4a>
    271a:	e8df f002 	tbb	[pc, r2]
    271e:	0907      	.short	0x0907
    2720:	0b05      	.short	0x0b05
    2722:	03          	.byte	0x03
    2723:	00          	.byte	0x00
	  case CHANGE:	mask = 0x0B; break;
    2724:	230b      	movs	r3, #11
    2726:	e006      	b.n	2736 <attachInterrupt+0x26>
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
    2728:	230a      	movs	r3, #10
    272a:	e004      	b.n	2736 <attachInterrupt+0x26>
	  case LOW:	mask = 0x08; break;
    272c:	2308      	movs	r3, #8
    272e:	e002      	b.n	2736 <attachInterrupt+0x26>
	  case HIGH:	mask = 0x0C; break;
    2730:	230c      	movs	r3, #12
    2732:	e000      	b.n	2736 <attachInterrupt+0x26>
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
    2734:	2309      	movs	r3, #9
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);
    2736:	4a09      	ldr	r2, [pc, #36]	; (275c <attachInterrupt+0x4c>)
    2738:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    273c:	6852      	ldr	r2, [r2, #4]

	__disable_irq();
    273e:	b672      	cpsid	i
	cfg = *config;
    2740:	6814      	ldr	r4, [r2, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	intFunc[pin] = function;	// set the function pointer
    2742:	4d07      	ldr	r5, [pc, #28]	; (2760 <attachInterrupt+0x50>)
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);

	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
    2744:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
	*config = cfg;
    2748:	6014      	str	r4, [r2, #0]
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
    274a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	intFunc[pin] = function;	// set the function pointer
	cfg |= mask;
    274e:	ea44 4303 	orr.w	r3, r4, r3, lsl #16

	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	intFunc[pin] = function;	// set the function pointer
    2752:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
    2756:	6013      	str	r3, [r2, #0]
	__enable_irq();
    2758:	b662      	cpsie	i
    275a:	bd30      	pop	{r4, r5, pc}
    275c:	00012c00 	.word	0x00012c00
    2760:	1fff9120 	.word	0x1fff9120

00002764 <porta_isr>:
}


void porta_isr(void)
{
	uint32_t isfr = PORTA_ISFR;
    2764:	4b11      	ldr	r3, [pc, #68]	; (27ac <porta_isr+0x48>)
	__enable_irq();
}


void porta_isr(void)
{
    2766:	b510      	push	{r4, lr}
	uint32_t isfr = PORTA_ISFR;
    2768:	681c      	ldr	r4, [r3, #0]
	PORTA_ISFR = isfr;
    276a:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN3_BITMASK) && intFunc[3]) intFunc[3]();
    276c:	04e0      	lsls	r0, r4, #19
    276e:	d504      	bpl.n	277a <porta_isr+0x16>
    2770:	4b0f      	ldr	r3, [pc, #60]	; (27b0 <porta_isr+0x4c>)
    2772:	68da      	ldr	r2, [r3, #12]
    2774:	b10a      	cbz	r2, 277a <porta_isr+0x16>
    2776:	68db      	ldr	r3, [r3, #12]
    2778:	4798      	blx	r3
	if ((isfr & CORE_PIN4_BITMASK) && intFunc[4]) intFunc[4]();
    277a:	04a1      	lsls	r1, r4, #18
    277c:	d504      	bpl.n	2788 <porta_isr+0x24>
    277e:	4b0c      	ldr	r3, [pc, #48]	; (27b0 <porta_isr+0x4c>)
    2780:	691a      	ldr	r2, [r3, #16]
    2782:	b10a      	cbz	r2, 2788 <porta_isr+0x24>
    2784:	691b      	ldr	r3, [r3, #16]
    2786:	4798      	blx	r3
	if ((isfr & CORE_PIN24_BITMASK) && intFunc[24]) intFunc[24]();
    2788:	06a2      	lsls	r2, r4, #26
    278a:	d504      	bpl.n	2796 <porta_isr+0x32>
    278c:	4b08      	ldr	r3, [pc, #32]	; (27b0 <porta_isr+0x4c>)
    278e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2790:	b10a      	cbz	r2, 2796 <porta_isr+0x32>
    2792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2794:	4798      	blx	r3
	if ((isfr & CORE_PIN33_BITMASK) && intFunc[33]) intFunc[33]();
    2796:	06e3      	lsls	r3, r4, #27
    2798:	d506      	bpl.n	27a8 <porta_isr+0x44>
    279a:	4b05      	ldr	r3, [pc, #20]	; (27b0 <porta_isr+0x4c>)
    279c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    27a0:	b112      	cbz	r2, 27a8 <porta_isr+0x44>
    27a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    27a6:	4798      	blx	r3
    27a8:	bd10      	pop	{r4, pc}
    27aa:	bf00      	nop
    27ac:	400490a0 	.word	0x400490a0
    27b0:	1fff9120 	.word	0x1fff9120

000027b4 <portb_isr>:
}

void portb_isr(void)
{
	uint32_t isfr = PORTB_ISFR;
    27b4:	4b1f      	ldr	r3, [pc, #124]	; (2834 <portb_isr+0x80>)
	if ((isfr & CORE_PIN24_BITMASK) && intFunc[24]) intFunc[24]();
	if ((isfr & CORE_PIN33_BITMASK) && intFunc[33]) intFunc[33]();
}

void portb_isr(void)
{
    27b6:	b510      	push	{r4, lr}
	uint32_t isfr = PORTB_ISFR;
    27b8:	681c      	ldr	r4, [r3, #0]
	PORTB_ISFR = isfr;
    27ba:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN0_BITMASK) && intFunc[0]) intFunc[0]();
    27bc:	03e0      	lsls	r0, r4, #15
    27be:	d504      	bpl.n	27ca <portb_isr+0x16>
    27c0:	4b1d      	ldr	r3, [pc, #116]	; (2838 <portb_isr+0x84>)
    27c2:	681a      	ldr	r2, [r3, #0]
    27c4:	b10a      	cbz	r2, 27ca <portb_isr+0x16>
    27c6:	681b      	ldr	r3, [r3, #0]
    27c8:	4798      	blx	r3
	if ((isfr & CORE_PIN1_BITMASK) && intFunc[1]) intFunc[1]();
    27ca:	03a1      	lsls	r1, r4, #14
    27cc:	d504      	bpl.n	27d8 <portb_isr+0x24>
    27ce:	4b1a      	ldr	r3, [pc, #104]	; (2838 <portb_isr+0x84>)
    27d0:	685a      	ldr	r2, [r3, #4]
    27d2:	b10a      	cbz	r2, 27d8 <portb_isr+0x24>
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	4798      	blx	r3
	if ((isfr & CORE_PIN16_BITMASK) && intFunc[16]) intFunc[16]();
    27d8:	07e2      	lsls	r2, r4, #31
    27da:	d504      	bpl.n	27e6 <portb_isr+0x32>
    27dc:	4b16      	ldr	r3, [pc, #88]	; (2838 <portb_isr+0x84>)
    27de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    27e0:	b10a      	cbz	r2, 27e6 <portb_isr+0x32>
    27e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    27e4:	4798      	blx	r3
	if ((isfr & CORE_PIN17_BITMASK) && intFunc[17]) intFunc[17]();
    27e6:	07a3      	lsls	r3, r4, #30
    27e8:	d504      	bpl.n	27f4 <portb_isr+0x40>
    27ea:	4b13      	ldr	r3, [pc, #76]	; (2838 <portb_isr+0x84>)
    27ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    27ee:	b10a      	cbz	r2, 27f4 <portb_isr+0x40>
    27f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    27f2:	4798      	blx	r3
	if ((isfr & CORE_PIN18_BITMASK) && intFunc[18]) intFunc[18]();
    27f4:	0720      	lsls	r0, r4, #28
    27f6:	d504      	bpl.n	2802 <portb_isr+0x4e>
    27f8:	4b0f      	ldr	r3, [pc, #60]	; (2838 <portb_isr+0x84>)
    27fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    27fc:	b10a      	cbz	r2, 2802 <portb_isr+0x4e>
    27fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2800:	4798      	blx	r3
	if ((isfr & CORE_PIN19_BITMASK) && intFunc[19]) intFunc[19]();
    2802:	0761      	lsls	r1, r4, #29
    2804:	d504      	bpl.n	2810 <portb_isr+0x5c>
    2806:	4b0c      	ldr	r3, [pc, #48]	; (2838 <portb_isr+0x84>)
    2808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    280a:	b10a      	cbz	r2, 2810 <portb_isr+0x5c>
    280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    280e:	4798      	blx	r3
	if ((isfr & CORE_PIN25_BITMASK) && intFunc[25]) intFunc[25]();
    2810:	0322      	lsls	r2, r4, #12
    2812:	d504      	bpl.n	281e <portb_isr+0x6a>
    2814:	4b08      	ldr	r3, [pc, #32]	; (2838 <portb_isr+0x84>)
    2816:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    2818:	b10a      	cbz	r2, 281e <portb_isr+0x6a>
    281a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    281c:	4798      	blx	r3
	if ((isfr & CORE_PIN32_BITMASK) && intFunc[32]) intFunc[32]();
    281e:	0363      	lsls	r3, r4, #13
    2820:	d506      	bpl.n	2830 <portb_isr+0x7c>
    2822:	4b05      	ldr	r3, [pc, #20]	; (2838 <portb_isr+0x84>)
    2824:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    2828:	b112      	cbz	r2, 2830 <portb_isr+0x7c>
    282a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    282e:	4798      	blx	r3
    2830:	bd10      	pop	{r4, pc}
    2832:	bf00      	nop
    2834:	4004a0a0 	.word	0x4004a0a0
    2838:	1fff9120 	.word	0x1fff9120

0000283c <portc_isr>:
}

void portc_isr(void)
{
	// TODO: these are inefficent.  Use CLZ somehow....
	uint32_t isfr = PORTC_ISFR;
    283c:	4b2c      	ldr	r3, [pc, #176]	; (28f0 <portc_isr+0xb4>)
	if ((isfr & CORE_PIN25_BITMASK) && intFunc[25]) intFunc[25]();
	if ((isfr & CORE_PIN32_BITMASK) && intFunc[32]) intFunc[32]();
}

void portc_isr(void)
{
    283e:	b510      	push	{r4, lr}
	// TODO: these are inefficent.  Use CLZ somehow....
	uint32_t isfr = PORTC_ISFR;
    2840:	681c      	ldr	r4, [r3, #0]
	PORTC_ISFR = isfr;
    2842:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN9_BITMASK) && intFunc[9]) intFunc[9]();
    2844:	0720      	lsls	r0, r4, #28
    2846:	d504      	bpl.n	2852 <portc_isr+0x16>
    2848:	4b2a      	ldr	r3, [pc, #168]	; (28f4 <portc_isr+0xb8>)
    284a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    284c:	b10a      	cbz	r2, 2852 <portc_isr+0x16>
    284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2850:	4798      	blx	r3
	if ((isfr & CORE_PIN10_BITMASK) && intFunc[10]) intFunc[10]();
    2852:	06e1      	lsls	r1, r4, #27
    2854:	d504      	bpl.n	2860 <portc_isr+0x24>
    2856:	4b27      	ldr	r3, [pc, #156]	; (28f4 <portc_isr+0xb8>)
    2858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    285a:	b10a      	cbz	r2, 2860 <portc_isr+0x24>
    285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    285e:	4798      	blx	r3
	if ((isfr & CORE_PIN11_BITMASK) && intFunc[11]) intFunc[11]();
    2860:	0662      	lsls	r2, r4, #25
    2862:	d504      	bpl.n	286e <portc_isr+0x32>
    2864:	4b23      	ldr	r3, [pc, #140]	; (28f4 <portc_isr+0xb8>)
    2866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2868:	b10a      	cbz	r2, 286e <portc_isr+0x32>
    286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    286c:	4798      	blx	r3
	if ((isfr & CORE_PIN12_BITMASK) && intFunc[12]) intFunc[12]();
    286e:	0623      	lsls	r3, r4, #24
    2870:	d504      	bpl.n	287c <portc_isr+0x40>
    2872:	4b20      	ldr	r3, [pc, #128]	; (28f4 <portc_isr+0xb8>)
    2874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2876:	b10a      	cbz	r2, 287c <portc_isr+0x40>
    2878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    287a:	4798      	blx	r3
	if ((isfr & CORE_PIN13_BITMASK) && intFunc[13]) intFunc[13]();
    287c:	06a0      	lsls	r0, r4, #26
    287e:	d504      	bpl.n	288a <portc_isr+0x4e>
    2880:	4b1c      	ldr	r3, [pc, #112]	; (28f4 <portc_isr+0xb8>)
    2882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2884:	b10a      	cbz	r2, 288a <portc_isr+0x4e>
    2886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2888:	4798      	blx	r3
	if ((isfr & CORE_PIN15_BITMASK) && intFunc[15]) intFunc[15]();
    288a:	07e1      	lsls	r1, r4, #31
    288c:	d504      	bpl.n	2898 <portc_isr+0x5c>
    288e:	4b19      	ldr	r3, [pc, #100]	; (28f4 <portc_isr+0xb8>)
    2890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2892:	b10a      	cbz	r2, 2898 <portc_isr+0x5c>
    2894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2896:	4798      	blx	r3
	if ((isfr & CORE_PIN22_BITMASK) && intFunc[22]) intFunc[22]();
    2898:	07a2      	lsls	r2, r4, #30
    289a:	d504      	bpl.n	28a6 <portc_isr+0x6a>
    289c:	4b15      	ldr	r3, [pc, #84]	; (28f4 <portc_isr+0xb8>)
    289e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    28a0:	b10a      	cbz	r2, 28a6 <portc_isr+0x6a>
    28a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    28a4:	4798      	blx	r3
	if ((isfr & CORE_PIN23_BITMASK) && intFunc[23]) intFunc[23]();
    28a6:	0763      	lsls	r3, r4, #29
    28a8:	d504      	bpl.n	28b4 <portc_isr+0x78>
    28aa:	4b12      	ldr	r3, [pc, #72]	; (28f4 <portc_isr+0xb8>)
    28ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    28ae:	b10a      	cbz	r2, 28b4 <portc_isr+0x78>
    28b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    28b2:	4798      	blx	r3
	if ((isfr & CORE_PIN27_BITMASK) && intFunc[27]) intFunc[27]();
    28b4:	05a0      	lsls	r0, r4, #22
    28b6:	d504      	bpl.n	28c2 <portc_isr+0x86>
    28b8:	4b0e      	ldr	r3, [pc, #56]	; (28f4 <portc_isr+0xb8>)
    28ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    28bc:	b10a      	cbz	r2, 28c2 <portc_isr+0x86>
    28be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    28c0:	4798      	blx	r3
	if ((isfr & CORE_PIN28_BITMASK) && intFunc[28]) intFunc[28]();
    28c2:	05e1      	lsls	r1, r4, #23
    28c4:	d504      	bpl.n	28d0 <portc_isr+0x94>
    28c6:	4b0b      	ldr	r3, [pc, #44]	; (28f4 <portc_isr+0xb8>)
    28c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    28ca:	b10a      	cbz	r2, 28d0 <portc_isr+0x94>
    28cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    28ce:	4798      	blx	r3
	if ((isfr & CORE_PIN29_BITMASK) && intFunc[29]) intFunc[29]();
    28d0:	0562      	lsls	r2, r4, #21
    28d2:	d504      	bpl.n	28de <portc_isr+0xa2>
    28d4:	4b07      	ldr	r3, [pc, #28]	; (28f4 <portc_isr+0xb8>)
    28d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    28d8:	b10a      	cbz	r2, 28de <portc_isr+0xa2>
    28da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    28dc:	4798      	blx	r3
	if ((isfr & CORE_PIN30_BITMASK) && intFunc[30]) intFunc[30]();
    28de:	0523      	lsls	r3, r4, #20
    28e0:	d504      	bpl.n	28ec <portc_isr+0xb0>
    28e2:	4b04      	ldr	r3, [pc, #16]	; (28f4 <portc_isr+0xb8>)
    28e4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    28e6:	b10a      	cbz	r2, 28ec <portc_isr+0xb0>
    28e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    28ea:	4798      	blx	r3
    28ec:	bd10      	pop	{r4, pc}
    28ee:	bf00      	nop
    28f0:	4004b0a0 	.word	0x4004b0a0
    28f4:	1fff9120 	.word	0x1fff9120

000028f8 <portd_isr>:
}

void portd_isr(void)
{
	uint32_t isfr = PORTD_ISFR;
    28f8:	4b1e      	ldr	r3, [pc, #120]	; (2974 <portd_isr+0x7c>)
	if ((isfr & CORE_PIN29_BITMASK) && intFunc[29]) intFunc[29]();
	if ((isfr & CORE_PIN30_BITMASK) && intFunc[30]) intFunc[30]();
}

void portd_isr(void)
{
    28fa:	b510      	push	{r4, lr}
	uint32_t isfr = PORTD_ISFR;
    28fc:	681c      	ldr	r4, [r3, #0]
	PORTD_ISFR = isfr;
    28fe:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN2_BITMASK) && intFunc[2]) intFunc[2]();
    2900:	07e0      	lsls	r0, r4, #31
    2902:	d504      	bpl.n	290e <portd_isr+0x16>
    2904:	4b1c      	ldr	r3, [pc, #112]	; (2978 <portd_isr+0x80>)
    2906:	689a      	ldr	r2, [r3, #8]
    2908:	b10a      	cbz	r2, 290e <portd_isr+0x16>
    290a:	689b      	ldr	r3, [r3, #8]
    290c:	4798      	blx	r3
	if ((isfr & CORE_PIN5_BITMASK) && intFunc[5]) intFunc[5]();
    290e:	0621      	lsls	r1, r4, #24
    2910:	d504      	bpl.n	291c <portd_isr+0x24>
    2912:	4b19      	ldr	r3, [pc, #100]	; (2978 <portd_isr+0x80>)
    2914:	695a      	ldr	r2, [r3, #20]
    2916:	b10a      	cbz	r2, 291c <portd_isr+0x24>
    2918:	695b      	ldr	r3, [r3, #20]
    291a:	4798      	blx	r3
	if ((isfr & CORE_PIN6_BITMASK) && intFunc[6]) intFunc[6]();
    291c:	06e2      	lsls	r2, r4, #27
    291e:	d504      	bpl.n	292a <portd_isr+0x32>
    2920:	4b15      	ldr	r3, [pc, #84]	; (2978 <portd_isr+0x80>)
    2922:	699a      	ldr	r2, [r3, #24]
    2924:	b10a      	cbz	r2, 292a <portd_isr+0x32>
    2926:	699b      	ldr	r3, [r3, #24]
    2928:	4798      	blx	r3
	if ((isfr & CORE_PIN7_BITMASK) && intFunc[7]) intFunc[7]();
    292a:	0763      	lsls	r3, r4, #29
    292c:	d504      	bpl.n	2938 <portd_isr+0x40>
    292e:	4b12      	ldr	r3, [pc, #72]	; (2978 <portd_isr+0x80>)
    2930:	69da      	ldr	r2, [r3, #28]
    2932:	b10a      	cbz	r2, 2938 <portd_isr+0x40>
    2934:	69db      	ldr	r3, [r3, #28]
    2936:	4798      	blx	r3
	if ((isfr & CORE_PIN8_BITMASK) && intFunc[8]) intFunc[8]();
    2938:	0720      	lsls	r0, r4, #28
    293a:	d504      	bpl.n	2946 <portd_isr+0x4e>
    293c:	4b0e      	ldr	r3, [pc, #56]	; (2978 <portd_isr+0x80>)
    293e:	6a1a      	ldr	r2, [r3, #32]
    2940:	b10a      	cbz	r2, 2946 <portd_isr+0x4e>
    2942:	6a1b      	ldr	r3, [r3, #32]
    2944:	4798      	blx	r3
	if ((isfr & CORE_PIN14_BITMASK) && intFunc[14]) intFunc[14]();
    2946:	07a1      	lsls	r1, r4, #30
    2948:	d504      	bpl.n	2954 <portd_isr+0x5c>
    294a:	4b0b      	ldr	r3, [pc, #44]	; (2978 <portd_isr+0x80>)
    294c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    294e:	b10a      	cbz	r2, 2954 <portd_isr+0x5c>
    2950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2952:	4798      	blx	r3
	if ((isfr & CORE_PIN20_BITMASK) && intFunc[20]) intFunc[20]();
    2954:	06a2      	lsls	r2, r4, #26
    2956:	d504      	bpl.n	2962 <portd_isr+0x6a>
    2958:	4b07      	ldr	r3, [pc, #28]	; (2978 <portd_isr+0x80>)
    295a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    295c:	b10a      	cbz	r2, 2962 <portd_isr+0x6a>
    295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2960:	4798      	blx	r3
	if ((isfr & CORE_PIN21_BITMASK) && intFunc[21]) intFunc[21]();
    2962:	0663      	lsls	r3, r4, #25
    2964:	d504      	bpl.n	2970 <portd_isr+0x78>
    2966:	4b04      	ldr	r3, [pc, #16]	; (2978 <portd_isr+0x80>)
    2968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    296a:	b10a      	cbz	r2, 2970 <portd_isr+0x78>
    296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    296e:	4798      	blx	r3
    2970:	bd10      	pop	{r4, pc}
    2972:	bf00      	nop
    2974:	4004c0a0 	.word	0x4004c0a0
    2978:	1fff9120 	.word	0x1fff9120

0000297c <porte_isr>:
}

void porte_isr(void)
{
	uint32_t isfr = PORTE_ISFR;
    297c:	4b09      	ldr	r3, [pc, #36]	; (29a4 <porte_isr+0x28>)
	if ((isfr & CORE_PIN20_BITMASK) && intFunc[20]) intFunc[20]();
	if ((isfr & CORE_PIN21_BITMASK) && intFunc[21]) intFunc[21]();
}

void porte_isr(void)
{
    297e:	b510      	push	{r4, lr}
	uint32_t isfr = PORTE_ISFR;
    2980:	681c      	ldr	r4, [r3, #0]
	PORTE_ISFR = isfr;
    2982:	601c      	str	r4, [r3, #0]
	if ((isfr & CORE_PIN26_BITMASK) && intFunc[26]) intFunc[26]();
    2984:	07a2      	lsls	r2, r4, #30
    2986:	d504      	bpl.n	2992 <porte_isr+0x16>
    2988:	4b07      	ldr	r3, [pc, #28]	; (29a8 <porte_isr+0x2c>)
    298a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    298c:	b10a      	cbz	r2, 2992 <porte_isr+0x16>
    298e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2990:	4798      	blx	r3
	if ((isfr & CORE_PIN31_BITMASK) && intFunc[31]) intFunc[31]();
    2992:	07e3      	lsls	r3, r4, #31
    2994:	d504      	bpl.n	29a0 <porte_isr+0x24>
    2996:	4b04      	ldr	r3, [pc, #16]	; (29a8 <porte_isr+0x2c>)
    2998:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    299a:	b10a      	cbz	r2, 29a0 <porte_isr+0x24>
    299c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    299e:	4798      	blx	r3
    29a0:	bd10      	pop	{r4, pc}
    29a2:	bf00      	nop
    29a4:	4004d0a0 	.word	0x4004d0a0
    29a8:	1fff9120 	.word	0x1fff9120

000029ac <rtc_set>:
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    29ac:	4b04      	ldr	r3, [pc, #16]	; (29c0 <rtc_set+0x14>)
	RTC_TPR = 0;
    29ae:	4905      	ldr	r1, [pc, #20]	; (29c4 <rtc_set+0x18>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    29b0:	2200      	movs	r2, #0
    29b2:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    29b4:	600a      	str	r2, [r1, #0]
	RTC_TSR = t;
    29b6:	4a04      	ldr	r2, [pc, #16]	; (29c8 <rtc_set+0x1c>)
    29b8:	6010      	str	r0, [r2, #0]
	RTC_SR = RTC_SR_TCE;
    29ba:	2210      	movs	r2, #16
    29bc:	601a      	str	r2, [r3, #0]
    29be:	4770      	bx	lr
    29c0:	4003d014 	.word	0x4003d014
    29c4:	4003d004 	.word	0x4003d004
    29c8:	4003d000 	.word	0x4003d000

000029cc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    29cc:	2821      	cmp	r0, #33	; 0x21


// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
    29ce:	b510      	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    29d0:	d818      	bhi.n	2a04 <digitalWrite+0x38>
	if (*portModeRegister(pin)) {
    29d2:	4a0d      	ldr	r2, [pc, #52]	; (2a08 <digitalWrite+0x3c>)
    29d4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    29d8:	f893 4280 	ldrb.w	r4, [r3, #640]	; 0x280
    29dc:	b13c      	cbz	r4, 29ee <digitalWrite+0x22>
    29de:	2201      	movs	r2, #1
		if (val) {
    29e0:	b111      	cbz	r1, 29e8 <digitalWrite+0x1c>
			*portSetRegister(pin) = 1;
    29e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    29e6:	bd10      	pop	{r4, pc}
		} else {
			*portClearRegister(pin) = 1;
    29e8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    29ec:	bd10      	pop	{r4, pc}
		}
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    29ee:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    29f2:	6843      	ldr	r3, [r0, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    29f4:	681a      	ldr	r2, [r3, #0]
		} else {
			*portClearRegister(pin) = 1;
		}
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    29f6:	b111      	cbz	r1, 29fe <digitalWrite+0x32>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    29f8:	f042 0203 	orr.w	r2, r2, #3
    29fc:	e001      	b.n	2a02 <digitalWrite+0x36>
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    29fe:	f022 0202 	bic.w	r2, r2, #2
    2a02:	601a      	str	r2, [r3, #0]
    2a04:	bd10      	pop	{r4, pc}
    2a06:	bf00      	nop
    2a08:	00012c00 	.word	0x00012c00

00002a0c <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2a0c:	2821      	cmp	r0, #33	; 0x21
    2a0e:	d806      	bhi.n	2a1e <digitalRead+0x12>
	return *portInputRegister(pin);
    2a10:	4b04      	ldr	r3, [pc, #16]	; (2a24 <digitalRead+0x18>)
    2a12:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    2a16:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    2a1a:	b2c0      	uxtb	r0, r0
    2a1c:	4770      	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2a1e:	2000      	movs	r0, #0
	return *portInputRegister(pin);
}
    2a20:	4770      	bx	lr
    2a22:	bf00      	nop
    2a24:	00012c00 	.word	0x00012c00

00002a28 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2a28:	2821      	cmp	r0, #33	; 0x21
    2a2a:	d816      	bhi.n	2a5a <pinMode+0x32>
	config = portConfigRegister(pin);
    2a2c:	4a0b      	ldr	r2, [pc, #44]	; (2a5c <pinMode+0x34>)
    2a2e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT) {
    2a32:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2a34:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT) {
		*portModeRegister(pin) = 1;
    2a36:	f852 2030 	ldr.w	r2, [r2, r0, lsl #3]
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT) {
    2a3a:	d104      	bne.n	2a46 <pinMode+0x1e>
		*portModeRegister(pin) = 1;
    2a3c:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2a40:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2a44:	e008      	b.n	2a58 <pinMode+0x30>
	} else {
		*portModeRegister(pin) = 0;
    2a46:	2000      	movs	r0, #0
    2a48:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		if (mode == INPUT) {
    2a4c:	b911      	cbnz	r1, 2a54 <pinMode+0x2c>
			*config = PORT_PCR_MUX(1);
    2a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
    2a52:	e001      	b.n	2a58 <pinMode+0x30>
		} else {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS; // pullup
    2a54:	f240 1203 	movw	r2, #259	; 0x103
    2a58:	601a      	str	r2, [r3, #0]
    2a5a:	4770      	bx	lr
    2a5c:	00012c00 	.word	0x00012c00

00002a60 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2a60:	b672      	cpsid	i
	current = SYST_CVR;
    2a62:	4b0c      	ldr	r3, [pc, #48]	; (2a94 <micros+0x34>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2a64:	490c      	ldr	r1, [pc, #48]	; (2a98 <micros+0x38>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2a66:	681a      	ldr	r2, [r3, #0]
	count = systick_millis_count;
    2a68:	4b0c      	ldr	r3, [pc, #48]	; (2a9c <micros+0x3c>)
    2a6a:	681b      	ldr	r3, [r3, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2a6c:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    2a6e:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2a70:	0149      	lsls	r1, r1, #5
    2a72:	d502      	bpl.n	2a7a <micros+0x1a>
    2a74:	2a32      	cmp	r2, #50	; 0x32
    2a76:	bf88      	it	hi
    2a78:	3301      	addhi	r3, #1
	current = ((F_CPU / 1000) - 1) - current;
    2a7a:	f5c2 328c 	rsb	r2, r2, #71680	; 0x11800
	return count * 1000 + current / (F_CPU / 1000000);
    2a7e:	2148      	movs	r1, #72	; 0x48
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
	current = ((F_CPU / 1000) - 1) - current;
    2a80:	f202 123f 	addw	r2, r2, #319	; 0x13f
	return count * 1000 + current / (F_CPU / 1000000);
    2a84:	fbb2 f2f1 	udiv	r2, r2, r1
}
    2a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2a8c:	fb00 2003 	mla	r0, r0, r3, r2
    2a90:	4770      	bx	lr
    2a92:	bf00      	nop
    2a94:	e000e018 	.word	0xe000e018
    2a98:	e000ed04 	.word	0xe000ed04
    2a9c:	1fff91a8 	.word	0x1fff91a8

00002aa0 <delay>:

void delay(uint32_t ms)
{
    2aa0:	b538      	push	{r3, r4, r5, lr}
    2aa2:	4604      	mov	r4, r0
	uint32_t start = micros();
    2aa4:	f7ff ffdc 	bl	2a60 <micros>
    2aa8:	4605      	mov	r5, r0

	if (ms > 0) {
    2aaa:	b164      	cbz	r4, 2ac6 <delay+0x26>
		while (1) {
			if ((micros() - start) >= 1000) {
    2aac:	f7ff ffd8 	bl	2a60 <micros>
    2ab0:	1b40      	subs	r0, r0, r5
    2ab2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    2ab6:	d303      	bcc.n	2ac0 <delay+0x20>
				ms--;
				if (ms == 0) return;
    2ab8:	3c01      	subs	r4, #1
    2aba:	d004      	beq.n	2ac6 <delay+0x26>
				start += 1000;
    2abc:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
			}
			yield();
    2ac0:	f001 fc2e 	bl	4320 <yield>
		}
    2ac4:	e7f2      	b.n	2aac <delay+0xc>
    2ac6:	bd38      	pop	{r3, r4, r5, pc}

00002ac8 <_init_Teensyduino_internal_>:
#define DEFAULT_FTM_PRESCALE 0
#endif

//void init_pins(void)
void _init_Teensyduino_internal_(void)
{
    2ac8:	b510      	push	{r4, lr}
	init_pin_interrupts();
    2aca:	f7ff fe0d 	bl	26e8 <init_pin_interrupts>

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2ace:	4b17      	ldr	r3, [pc, #92]	; (2b2c <_init_Teensyduino_internal_+0x64>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2ad0:	4a17      	ldr	r2, [pc, #92]	; (2b30 <_init_Teensyduino_internal_+0x68>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2ad2:	4c18      	ldr	r4, [pc, #96]	; (2b34 <_init_Teensyduino_internal_+0x6c>)
{
	init_pin_interrupts();

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2ad4:	2000      	movs	r0, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    2ad6:	f648 71ff 	movw	r1, #36863	; 0x8fff
{
	init_pin_interrupts();

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2ada:	6018      	str	r0, [r3, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
    2adc:	6059      	str	r1, [r3, #4]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2ade:	2328      	movs	r3, #40	; 0x28
    2ae0:	6013      	str	r3, [r2, #0]
	FTM0_C1SC = 0x28;
    2ae2:	6093      	str	r3, [r2, #8]
	FTM0_C2SC = 0x28;
    2ae4:	6113      	str	r3, [r2, #16]
	FTM0_C3SC = 0x28;
    2ae6:	6193      	str	r3, [r2, #24]
	FTM0_C4SC = 0x28;
    2ae8:	6213      	str	r3, [r2, #32]
	FTM0_C5SC = 0x28;
    2aea:	6293      	str	r3, [r2, #40]	; 0x28
	FTM0_C6SC = 0x28;
    2aec:	6313      	str	r3, [r2, #48]	; 0x30
	FTM0_C7SC = 0x28;
    2aee:	6393      	str	r3, [r2, #56]	; 0x38
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2af0:	2209      	movs	r2, #9
    2af2:	6022      	str	r2, [r4, #0]
	FTM1_CNT = 0;
    2af4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    2af8:	3404      	adds	r4, #4
    2afa:	6020      	str	r0, [r4, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2afc:	6061      	str	r1, [r4, #4]
	FTM1_C0SC = 0x28;
    2afe:	60a3      	str	r3, [r4, #8]
	FTM1_C1SC = 0x28;
    2b00:	6123      	str	r3, [r4, #16]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2b02:	f844 2c04 	str.w	r2, [r4, #-4]
#if defined(__MK20DX256__)
	FTM2_CNT = 0;
    2b06:	f504 24fe 	add.w	r4, r4, #520192	; 0x7f000
    2b0a:	6020      	str	r0, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2b0c:	480a      	ldr	r0, [pc, #40]	; (2b38 <_init_Teensyduino_internal_+0x70>)
    2b0e:	6001      	str	r1, [r0, #0]
	FTM2_C0SC = 0x28;
    2b10:	490a      	ldr	r1, [pc, #40]	; (2b3c <_init_Teensyduino_internal_+0x74>)
    2b12:	600b      	str	r3, [r1, #0]
	FTM2_C1SC = 0x28;
    2b14:	608b      	str	r3, [r1, #8]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2b16:	4b0a      	ldr	r3, [pc, #40]	; (2b40 <_init_Teensyduino_internal_+0x78>)
    2b18:	601a      	str	r2, [r3, #0]
#endif

	analog_init();
    2b1a:	f7ff fa69 	bl	1ff0 <analog_init>
	//delay(100); // TODO: this is not necessary, right?
	delay(4);
    2b1e:	2004      	movs	r0, #4
    2b20:	f7ff ffbe 	bl	2aa0 <delay>
	usb_init();
}
    2b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

	analog_init();
	//delay(100); // TODO: this is not necessary, right?
	delay(4);
	usb_init();
    2b28:	f001 ba04 	b.w	3f34 <usb_init>
    2b2c:	40038004 	.word	0x40038004
    2b30:	4003800c 	.word	0x4003800c
    2b34:	40038000 	.word	0x40038000
    2b38:	400b8008 	.word	0x400b8008
    2b3c:	400b800c 	.word	0x400b800c
    2b40:	400b8000 	.word	0x400b8000

00002b44 <_ZN5Print7printlnEv>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2b44:	b507      	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    2b46:	4b06      	ldr	r3, [pc, #24]	; (2b60 <_ZN5Print7printlnEv+0x1c>)
    2b48:	881b      	ldrh	r3, [r3, #0]
    2b4a:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    2b4e:	6803      	ldr	r3, [r0, #0]
    2b50:	a901      	add	r1, sp, #4
    2b52:	685b      	ldr	r3, [r3, #4]
    2b54:	2202      	movs	r2, #2
    2b56:	4798      	blx	r3
}
    2b58:	b003      	add	sp, #12
    2b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b5e:	bf00      	nop
    2b60:	00012d10 	.word	0x00012d10

00002b64 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    2b64:	b508      	push	{r3, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    2b66:	6803      	ldr	r3, [r0, #0]
    2b68:	685b      	ldr	r3, [r3, #4]
    2b6a:	4798      	blx	r3
	return 0;
}
    2b6c:	2000      	movs	r0, #0
    2b6e:	bd08      	pop	{r3, pc}

00002b70 <_ZN5Print6printfEPKcz>:
}

int Print::printf(const char *format, ...)
{
    2b70:	b40e      	push	{r1, r2, r3}
    2b72:	b503      	push	{r0, r1, lr}
    2b74:	aa03      	add	r2, sp, #12
    2b76:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    2b7a:	9201      	str	r2, [sp, #4]
	return vdprintf((int)this, format, ap);
    2b7c:	f00d faf6 	bl	1016c <vdprintf>
}
    2b80:	b002      	add	sp, #8
    2b82:	f85d eb04 	ldr.w	lr, [sp], #4
    2b86:	b003      	add	sp, #12
    2b88:	4770      	bx	lr

00002b8a <_ZN5Print11printNumberEmhh>:
	return vdprintf((int)this, (const char *)format, ap);
}


size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2b8a:	b570      	push	{r4, r5, r6, lr}
    2b8c:	4605      	mov	r5, r0
    2b8e:	b08a      	sub	sp, #40	; 0x28
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2b90:	b922      	cbnz	r2, 2b9c <_ZN5Print11printNumberEmhh+0x12>
		return write((uint8_t)n);
    2b92:	6803      	ldr	r3, [r0, #0]
    2b94:	b2c9      	uxtb	r1, r1
    2b96:	681b      	ldr	r3, [r3, #0]
    2b98:	4798      	blx	r3
    2b9a:	e02c      	b.n	2bf6 <_ZN5Print11printNumberEmhh+0x6c>
	} else if (base == 1) {
		base = 10;
    2b9c:	2a01      	cmp	r2, #1
    2b9e:	bf08      	it	eq
    2ba0:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    2ba2:	b921      	cbnz	r1, 2bae <_ZN5Print11printNumberEmhh+0x24>
		buf[sizeof(buf) - 1] = '0';
    2ba4:	2230      	movs	r2, #48	; 0x30
    2ba6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2baa:	2421      	movs	r4, #33	; 0x21
    2bac:	e013      	b.n	2bd6 <_ZN5Print11printNumberEmhh+0x4c>
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    2bae:	2421      	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2bb0:	fbb1 f0f2 	udiv	r0, r1, r2
    2bb4:	fb02 1110 	mls	r1, r2, r0, r1
    2bb8:	b2c9      	uxtb	r1, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2bba:	2909      	cmp	r1, #9
    2bbc:	ae0a      	add	r6, sp, #40	; 0x28
    2bbe:	bf94      	ite	ls
    2bc0:	3130      	addls	r1, #48	; 0x30
    2bc2:	3137      	addhi	r1, #55	; 0x37
    2bc4:	4426      	add	r6, r4
    2bc6:	b2c9      	uxtb	r1, r1
    2bc8:	f806 1c24 	strb.w	r1, [r6, #-36]
			n /= base;
			if (n == 0) break;
    2bcc:	4601      	mov	r1, r0
    2bce:	b110      	cbz	r0, 2bd6 <_ZN5Print11printNumberEmhh+0x4c>
			i--;
    2bd0:	3c01      	subs	r4, #1
    2bd2:	b2e4      	uxtb	r4, r4
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    2bd4:	e7ec      	b.n	2bb0 <_ZN5Print11printNumberEmhh+0x26>
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    2bd6:	b133      	cbz	r3, 2be6 <_ZN5Print11printNumberEmhh+0x5c>
		i--;
    2bd8:	3c01      	subs	r4, #1
    2bda:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    2bdc:	ab0a      	add	r3, sp, #40	; 0x28
    2bde:	4423      	add	r3, r4
    2be0:	222d      	movs	r2, #45	; 0x2d
    2be2:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2be6:	682b      	ldr	r3, [r5, #0]
    2be8:	a901      	add	r1, sp, #4
    2bea:	685b      	ldr	r3, [r3, #4]
    2bec:	4628      	mov	r0, r5
    2bee:	4421      	add	r1, r4
    2bf0:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    2bf4:	4798      	blx	r3
}
    2bf6:	b00a      	add	sp, #40	; 0x28
    2bf8:	bd70      	pop	{r4, r5, r6, pc}
    2bfa:	ffff 4b1b 			; <UNDEFINED> instruction: 0xffff4b1b

00002bfc <serial_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    2bfc:	4b1b      	ldr	r3, [pc, #108]	; (2c6c <serial_begin+0x70>)
    2bfe:	681a      	ldr	r2, [r3, #0]
    2c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2c04:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
    2c06:	4a1a      	ldr	r2, [pc, #104]	; (2c70 <serial_begin+0x74>)
    2c08:	2300      	movs	r3, #0
    2c0a:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    2c0c:	4a19      	ldr	r2, [pc, #100]	; (2c74 <serial_begin+0x78>)
    2c0e:	7013      	strb	r3, [r2, #0]
	tx_buffer_head = 0;
    2c10:	4a19      	ldr	r2, [pc, #100]	; (2c78 <serial_begin+0x7c>)
    2c12:	7013      	strb	r3, [r2, #0]
	tx_buffer_tail = 0;
    2c14:	4a19      	ldr	r2, [pc, #100]	; (2c7c <serial_begin+0x80>)
    2c16:	7013      	strb	r3, [r2, #0]
	transmitting = 0;
    2c18:	4a19      	ldr	r2, [pc, #100]	; (2c80 <serial_begin+0x84>)
    2c1a:	7013      	strb	r3, [r2, #0]
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    2c1c:	4b19      	ldr	r3, [pc, #100]	; (2c84 <serial_begin+0x88>)
    2c1e:	f240 3213 	movw	r2, #787	; 0x313
    2c22:	601a      	str	r2, [r3, #0]
	CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    2c24:	f44f 7251 	mov.w	r2, #836	; 0x344
    2c28:	605a      	str	r2, [r3, #4]
	UART0_BDH = (divisor >> 13) & 0x1F;
    2c2a:	4b17      	ldr	r3, [pc, #92]	; (2c88 <serial_begin+0x8c>)
    2c2c:	f3c0 3244 	ubfx	r2, r0, #13, #5
    2c30:	701a      	strb	r2, [r3, #0]
	UART0_BDL = (divisor >> 5) & 0xFF;
    2c32:	f3c0 1247 	ubfx	r2, r0, #5, #8
    2c36:	705a      	strb	r2, [r3, #1]
	UART0_C4 = divisor & 0x1F;
    2c38:	f000 001f 	and.w	r0, r0, #31
	//UART0_C1 = 0;
	UART0_C1 = UART_C1_ILT;
    2c3c:	4a13      	ldr	r2, [pc, #76]	; (2c8c <serial_begin+0x90>)
	transmitting = 0;
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
    2c3e:	7298      	strb	r0, [r3, #10]
	//UART0_C1 = 0;
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    2c40:	2102      	movs	r1, #2
	CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
	//UART0_C1 = 0;
	UART0_C1 = UART_C1_ILT;
    2c42:	2304      	movs	r3, #4
    2c44:	7013      	strb	r3, [r2, #0]
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    2c46:	7451      	strb	r1, [r2, #17]
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    2c48:	74d3      	strb	r3, [r2, #19]
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    2c4a:	4b11      	ldr	r3, [pc, #68]	; (2c90 <serial_begin+0x94>)
    2c4c:	2288      	movs	r2, #136	; 0x88
    2c4e:	701a      	strb	r2, [r3, #0]
	UART0_C2 = C2_TX_INACTIVE;
    2c50:	223c      	movs	r2, #60	; 0x3c
    2c52:	f803 2c0d 	strb.w	r2, [r3, #-13]
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    2c56:	4b0f      	ldr	r3, [pc, #60]	; (2c94 <serial_begin+0x98>)
    2c58:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    2c5a:	f46f 714a 	mvn.w	r1, #808	; 0x328
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    2c5e:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    2c60:	440b      	add	r3, r1
    2c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    2c66:	601a      	str	r2, [r3, #0]
    2c68:	4770      	bx	lr
    2c6a:	bf00      	nop
    2c6c:	40048034 	.word	0x40048034
    2c70:	1fff922e 	.word	0x1fff922e
    2c74:	1fff91ad 	.word	0x1fff91ad
    2c78:	1fff9234 	.word	0x1fff9234
    2c7c:	1fff922f 	.word	0x1fff922f
    2c80:	1fff91ac 	.word	0x1fff91ac
    2c84:	4004a040 	.word	0x4004a040
    2c88:	4006a000 	.word	0x4006a000
    2c8c:	4006a002 	.word	0x4006a002
    2c90:	4006a010 	.word	0x4006a010
    2c94:	e000e42d 	.word	0xe000e42d

00002c98 <serial_format>:

void serial_format(uint32_t format)
{
        uint8_t c;

        c = UART0_C1;
    2c98:	4a13      	ldr	r2, [pc, #76]	; (2ce8 <serial_format+0x50>)
    2c9a:	7813      	ldrb	r3, [r2, #0]
        c = (c & ~0x13) | (format & 0x03);      // configure parity
    2c9c:	f000 0103 	and.w	r1, r0, #3
    2ca0:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    2ca4:	430b      	orrs	r3, r1
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
    2ca6:	0741      	lsls	r1, r0, #29
    2ca8:	bf48      	it	mi
    2caa:	f043 0310 	orrmi.w	r3, r3, #16
        UART0_C1 = c;
    2cae:	7013      	strb	r3, [r2, #0]
        if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    2cb0:	f000 030f 	and.w	r3, r0, #15
    2cb4:	2b04      	cmp	r3, #4
    2cb6:	4b0d      	ldr	r3, [pc, #52]	; (2cec <serial_format+0x54>)
    2cb8:	d103      	bne.n	2cc2 <serial_format+0x2a>
    2cba:	781a      	ldrb	r2, [r3, #0]
    2cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2cc0:	701a      	strb	r2, [r3, #0]
        c = UART0_S2 & ~0x10;
    2cc2:	490b      	ldr	r1, [pc, #44]	; (2cf0 <serial_format+0x58>)
    2cc4:	780a      	ldrb	r2, [r1, #0]
        if (format & 0x10) c |= 0x10;           // rx invert
    2cc6:	f010 0f10 	tst.w	r0, #16
        c = UART0_C1;
        c = (c & ~0x13) | (format & 0x03);      // configure parity
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
        UART0_C1 = c;
        if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART0_S2 & ~0x10;
    2cca:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x10) c |= 0x10;           // rx invert
    2cce:	bf18      	it	ne
    2cd0:	f042 0210 	orrne.w	r2, r2, #16
        UART0_S2 = c;
    2cd4:	700a      	strb	r2, [r1, #0]
        c = UART0_C3 & ~0x10;
    2cd6:	781a      	ldrb	r2, [r3, #0]
        if (format & 0x20) c |= 0x10;           // tx invert
    2cd8:	0681      	lsls	r1, r0, #26
        UART0_C1 = c;
        if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART0_S2 & ~0x10;
        if (format & 0x10) c |= 0x10;           // rx invert
        UART0_S2 = c;
        c = UART0_C3 & ~0x10;
    2cda:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x20) c |= 0x10;           // tx invert
    2cde:	bf48      	it	mi
    2ce0:	f042 0210 	orrmi.w	r2, r2, #16
        UART0_C3 = c;
    2ce4:	701a      	strb	r2, [r3, #0]
    2ce6:	4770      	bx	lr
    2ce8:	4006a002 	.word	0x4006a002
    2cec:	4006a006 	.word	0x4006a006
    2cf0:	4006a005 	.word	0x4006a005

00002cf4 <serial_end>:
        use9Bits = format & 0x80;
#endif
}

void serial_end(void)
{
    2cf4:	b508      	push	{r3, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2cf6:	4b0e      	ldr	r3, [pc, #56]	; (2d30 <serial_end+0x3c>)
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	055b      	lsls	r3, r3, #21
    2cfc:	d400      	bmi.n	2d00 <serial_end+0xc>
    2cfe:	bd08      	pop	{r3, pc}
	while (transmitting) yield();  // wait for buffered data to send
    2d00:	4b0c      	ldr	r3, [pc, #48]	; (2d34 <serial_end+0x40>)
    2d02:	781a      	ldrb	r2, [r3, #0]
    2d04:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2d08:	b112      	cbz	r2, 2d10 <serial_end+0x1c>
    2d0a:	f001 fb09 	bl	4320 <yield>
    2d0e:	e7f7      	b.n	2d00 <serial_end+0xc>
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    2d10:	4a09      	ldr	r2, [pc, #36]	; (2d38 <serial_end+0x44>)
    2d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    2d16:	6011      	str	r1, [r2, #0]
	UART0_C2 = 0;
    2d18:	4a08      	ldr	r2, [pc, #32]	; (2d3c <serial_end+0x48>)
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2d1a:	4909      	ldr	r1, [pc, #36]	; (2d40 <serial_end+0x4c>)
void serial_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
	UART0_C2 = 0;
    2d1c:	7013      	strb	r3, [r2, #0]
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2d1e:	f240 1203 	movw	r2, #259	; 0x103
    2d22:	600a      	str	r2, [r1, #0]
	CORE_PIN1_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2d24:	604a      	str	r2, [r1, #4]
	rx_buffer_head = 0;
    2d26:	4a07      	ldr	r2, [pc, #28]	; (2d44 <serial_end+0x50>)
    2d28:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    2d2a:	4a07      	ldr	r2, [pc, #28]	; (2d48 <serial_end+0x54>)
    2d2c:	7013      	strb	r3, [r2, #0]
    2d2e:	bd08      	pop	{r3, pc}
    2d30:	40048034 	.word	0x40048034
    2d34:	1fff91ac 	.word	0x1fff91ac
    2d38:	e000e184 	.word	0xe000e184
    2d3c:	4006a003 	.word	0x4006a003
    2d40:	4004a040 	.word	0x4004a040
    2d44:	1fff922e 	.word	0x1fff922e
    2d48:	1fff91ad 	.word	0x1fff91ad

00002d4c <serial_set_transmit_pin>:
}

void serial_set_transmit_pin(uint8_t pin)
{
    2d4c:	b538      	push	{r3, r4, r5, lr}
    2d4e:	4604      	mov	r4, r0
	while (transmitting) ;
    2d50:	4b09      	ldr	r3, [pc, #36]	; (2d78 <serial_set_transmit_pin+0x2c>)
    2d52:	781b      	ldrb	r3, [r3, #0]
    2d54:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d1f9      	bne.n	2d50 <serial_set_transmit_pin+0x4>
	pinMode(pin, OUTPUT);
    2d5c:	4620      	mov	r0, r4
    2d5e:	2101      	movs	r1, #1
    2d60:	f7ff fe62 	bl	2a28 <pinMode>
	digitalWrite(pin, LOW);
    2d64:	4620      	mov	r0, r4
    2d66:	4629      	mov	r1, r5
    2d68:	f7ff fe30 	bl	29cc <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    2d6c:	4b03      	ldr	r3, [pc, #12]	; (2d7c <serial_set_transmit_pin+0x30>)
    2d6e:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    2d72:	4b03      	ldr	r3, [pc, #12]	; (2d80 <serial_set_transmit_pin+0x34>)
    2d74:	601a      	str	r2, [r3, #0]
    2d76:	bd38      	pop	{r3, r4, r5, pc}
    2d78:	1fff91ac 	.word	0x1fff91ac
    2d7c:	00012c00 	.word	0x00012c00
    2d80:	1fff9230 	.word	0x1fff9230

00002d84 <serial_putchar>:
}

void serial_putchar(uint32_t c)
{
    2d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2d86:	4b1d      	ldr	r3, [pc, #116]	; (2dfc <serial_putchar+0x78>)
    2d88:	681b      	ldr	r3, [r3, #0]
    2d8a:	055a      	lsls	r2, r3, #21
	digitalWrite(pin, LOW);
	transmit_pin = portOutputRegister(pin);
}

void serial_putchar(uint32_t c)
{
    2d8c:	4607      	mov	r7, r0
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2d8e:	d534      	bpl.n	2dfa <serial_putchar+0x76>
	if (transmit_pin) *transmit_pin = 1;
    2d90:	4b1b      	ldr	r3, [pc, #108]	; (2e00 <serial_putchar+0x7c>)
    2d92:	681b      	ldr	r3, [r3, #0]
    2d94:	b10b      	cbz	r3, 2d9a <serial_putchar+0x16>
    2d96:	2201      	movs	r2, #1
    2d98:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    2d9a:	4b1a      	ldr	r3, [pc, #104]	; (2e04 <serial_putchar+0x80>)
    2d9c:	781c      	ldrb	r4, [r3, #0]
	if (++head >= TX_BUFFER_SIZE) head = 0;
    2d9e:	3401      	adds	r4, #1
    2da0:	2c40      	cmp	r4, #64	; 0x40
    2da2:	461e      	mov	r6, r3
    2da4:	bf28      	it	cs
    2da6:	2400      	movcs	r4, #0
	while (tx_buffer_tail == head) {
    2da8:	4d17      	ldr	r5, [pc, #92]	; (2e08 <serial_putchar+0x84>)
    2daa:	782b      	ldrb	r3, [r5, #0]
    2dac:	42a3      	cmp	r3, r4
    2dae:	d119      	bne.n	2de4 <serial_putchar+0x60>
		int priority = nvic_execution_priority();
    2db0:	f7ff fc4a 	bl	2648 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    2db4:	2840      	cmp	r0, #64	; 0x40
    2db6:	dc10      	bgt.n	2dda <serial_putchar+0x56>
			if ((UART0_S1 & UART_S1_TDRE)) {
    2db8:	4b14      	ldr	r3, [pc, #80]	; (2e0c <serial_putchar+0x88>)
    2dba:	781b      	ldrb	r3, [r3, #0]
    2dbc:	061b      	lsls	r3, r3, #24
    2dbe:	d5f3      	bpl.n	2da8 <serial_putchar+0x24>
				uint32_t tail = tx_buffer_tail;
    2dc0:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    2dc2:	4a13      	ldr	r2, [pc, #76]	; (2e10 <serial_putchar+0x8c>)
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
    2dc4:	3301      	adds	r3, #1
    2dc6:	2b40      	cmp	r3, #64	; 0x40
    2dc8:	bf28      	it	cs
    2dca:	2300      	movcs	r3, #0
				n = tx_buffer[tail];
    2dcc:	5cd1      	ldrb	r1, [r2, r3]
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
    2dce:	4a11      	ldr	r2, [pc, #68]	; (2e14 <serial_putchar+0x90>)
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    2dd0:	b2c9      	uxtb	r1, r1
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
				tx_buffer_tail = tail;
    2dd2:	b2db      	uxtb	r3, r3
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
    2dd4:	7011      	strb	r1, [r2, #0]
				tx_buffer_tail = tail;
    2dd6:	702b      	strb	r3, [r5, #0]
    2dd8:	e7e6      	b.n	2da8 <serial_putchar+0x24>
			}
		} else if (priority >= 256) {
    2dda:	28ff      	cmp	r0, #255	; 0xff
    2ddc:	dde4      	ble.n	2da8 <serial_putchar+0x24>
			yield();
    2dde:	f001 fa9f 	bl	4320 <yield>
    2de2:	e7e1      	b.n	2da8 <serial_putchar+0x24>
		}
	}
	tx_buffer[head] = c;
    2de4:	4b0a      	ldr	r3, [pc, #40]	; (2e10 <serial_putchar+0x8c>)
    2de6:	b2ff      	uxtb	r7, r7
    2de8:	551f      	strb	r7, [r3, r4]
	transmitting = 1;
    2dea:	4b0b      	ldr	r3, [pc, #44]	; (2e18 <serial_putchar+0x94>)
    2dec:	2201      	movs	r2, #1
    2dee:	701a      	strb	r2, [r3, #0]
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
    2df0:	4b0a      	ldr	r3, [pc, #40]	; (2e1c <serial_putchar+0x98>)
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    2df2:	b2e4      	uxtb	r4, r4
	UART0_C2 = C2_TX_ACTIVE;
    2df4:	22bc      	movs	r2, #188	; 0xbc
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    2df6:	7034      	strb	r4, [r6, #0]
	UART0_C2 = C2_TX_ACTIVE;
    2df8:	701a      	strb	r2, [r3, #0]
    2dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dfc:	40048034 	.word	0x40048034
    2e00:	1fff9230 	.word	0x1fff9230
    2e04:	1fff9234 	.word	0x1fff9234
    2e08:	1fff922f 	.word	0x1fff922f
    2e0c:	4006a004 	.word	0x4006a004
    2e10:	1fff91ae 	.word	0x1fff91ae
    2e14:	4006a007 	.word	0x4006a007
    2e18:	1fff91ac 	.word	0x1fff91ac
    2e1c:	4006a003 	.word	0x4006a003

00002e20 <serial_write>:
{
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2e20:	4b27      	ldr	r3, [pc, #156]	; (2ec0 <serial_write+0xa0>)
    2e22:	681b      	ldr	r3, [r3, #0]
    2e24:	055a      	lsls	r2, r3, #21
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
}

void serial_write(const void *buf, unsigned int count)
{
    2e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e2a:	4607      	mov	r7, r0
    2e2c:	468a      	mov	sl, r1
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2e2e:	d545      	bpl.n	2ebc <serial_write+0x9c>
	if (transmit_pin) *transmit_pin = 1;
    2e30:	4b24      	ldr	r3, [pc, #144]	; (2ec4 <serial_write+0xa4>)
    2e32:	681b      	ldr	r3, [r3, #0]
    2e34:	b10b      	cbz	r3, 2e3a <serial_write+0x1a>
    2e36:	2201      	movs	r2, #1
    2e38:	701a      	strb	r2, [r3, #0]
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
    2e3a:	463d      	mov	r5, r7
}

void serial_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
    2e3c:	eb07 030a 	add.w	r3, r7, sl
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) *transmit_pin = 1;
	while (p < end) {
    2e40:	429d      	cmp	r5, r3
    2e42:	d238      	bcs.n	2eb6 <serial_write+0x96>
        	head = tx_buffer_head;
    2e44:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2ee0 <serial_write+0xc0>
        	if (++head >= TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
    2e48:	4e1f      	ldr	r6, [pc, #124]	; (2ec8 <serial_write+0xa8>)
        uint32_t head, n;

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) *transmit_pin = 1;
	while (p < end) {
        	head = tx_buffer_head;
    2e4a:	f898 4000 	ldrb.w	r4, [r8]
        	if (++head >= TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
    2e4e:	f896 9000 	ldrb.w	r9, [r6]

        if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) *transmit_pin = 1;
	while (p < end) {
        	head = tx_buffer_head;
        	if (++head >= TX_BUFFER_SIZE) head = 0;
    2e52:	3401      	adds	r4, #1
    2e54:	2c40      	cmp	r4, #64	; 0x40
    2e56:	bf28      	it	cs
    2e58:	2400      	movcs	r4, #0
		if (tx_buffer_tail == head) {
    2e5a:	fa5f f989 	uxtb.w	r9, r9
    2e5e:	45a1      	cmp	r9, r4
    2e60:	d11e      	bne.n	2ea0 <serial_write+0x80>
        		UART0_C2 = C2_TX_ACTIVE;
    2e62:	4b1a      	ldr	r3, [pc, #104]	; (2ecc <serial_write+0xac>)
    2e64:	22bc      	movs	r2, #188	; 0xbc
    2e66:	701a      	strb	r2, [r3, #0]
			do {
				int priority = nvic_execution_priority();
    2e68:	f7ff fbee 	bl	2648 <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    2e6c:	2840      	cmp	r0, #64	; 0x40
    2e6e:	dc10      	bgt.n	2e92 <serial_write+0x72>
					if ((UART0_S1 & UART_S1_TDRE)) {
    2e70:	4b17      	ldr	r3, [pc, #92]	; (2ed0 <serial_write+0xb0>)
    2e72:	781b      	ldrb	r3, [r3, #0]
    2e74:	061b      	lsls	r3, r3, #24
    2e76:	d510      	bpl.n	2e9a <serial_write+0x7a>
						uint32_t tail = tx_buffer_tail;
    2e78:	7833      	ldrb	r3, [r6, #0]
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
    2e7a:	4a16      	ldr	r2, [pc, #88]	; (2ed4 <serial_write+0xb4>)
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
    2e7c:	3301      	adds	r3, #1
    2e7e:	2b40      	cmp	r3, #64	; 0x40
    2e80:	bf28      	it	cs
    2e82:	2300      	movcs	r3, #0
						n = tx_buffer[tail];
    2e84:	5cd1      	ldrb	r1, [r2, r3]
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
    2e86:	4a14      	ldr	r2, [pc, #80]	; (2ed8 <serial_write+0xb8>)
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
    2e88:	b2c9      	uxtb	r1, r1
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
						tx_buffer_tail = tail;
    2e8a:	b2db      	uxtb	r3, r3
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
    2e8c:	7011      	strb	r1, [r2, #0]
						tx_buffer_tail = tail;
    2e8e:	7033      	strb	r3, [r6, #0]
    2e90:	e003      	b.n	2e9a <serial_write+0x7a>
					}
				} else if (priority >= 256) {
    2e92:	28ff      	cmp	r0, #255	; 0xff
    2e94:	dd01      	ble.n	2e9a <serial_write+0x7a>
					yield();
    2e96:	f001 fa43 	bl	4320 <yield>
				}
			} while (tx_buffer_tail == head);
    2e9a:	7833      	ldrb	r3, [r6, #0]
    2e9c:	454b      	cmp	r3, r9
    2e9e:	d0e3      	beq.n	2e68 <serial_write+0x48>
		}
        	tx_buffer[head] = *p++;
    2ea0:	4b0c      	ldr	r3, [pc, #48]	; (2ed4 <serial_write+0xb4>)
    2ea2:	f815 2b01 	ldrb.w	r2, [r5], #1
    2ea6:	551a      	strb	r2, [r3, r4]
        	transmitting = 1;
    2ea8:	4b0c      	ldr	r3, [pc, #48]	; (2edc <serial_write+0xbc>)
    2eaa:	2201      	movs	r2, #1
        	tx_buffer_head = head;
    2eac:	b2e4      	uxtb	r4, r4
					yield();
				}
			} while (tx_buffer_tail == head);
		}
        	tx_buffer[head] = *p++;
        	transmitting = 1;
    2eae:	701a      	strb	r2, [r3, #0]
        	tx_buffer_head = head;
    2eb0:	f888 4000 	strb.w	r4, [r8]
    2eb4:	e7c2      	b.n	2e3c <serial_write+0x1c>
	}
        UART0_C2 = C2_TX_ACTIVE;
    2eb6:	4b05      	ldr	r3, [pc, #20]	; (2ecc <serial_write+0xac>)
    2eb8:	22bc      	movs	r2, #188	; 0xbc
    2eba:	701a      	strb	r2, [r3, #0]
    2ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ec0:	40048034 	.word	0x40048034
    2ec4:	1fff9230 	.word	0x1fff9230
    2ec8:	1fff922f 	.word	0x1fff922f
    2ecc:	4006a003 	.word	0x4006a003
    2ed0:	4006a004 	.word	0x4006a004
    2ed4:	1fff91ae 	.word	0x1fff91ae
    2ed8:	4006a007 	.word	0x4006a007
    2edc:	1fff91ac 	.word	0x1fff91ac
    2ee0:	1fff9234 	.word	0x1fff9234

00002ee4 <serial_flush>:
}

void serial_flush(void)
{
    2ee4:	b508      	push	{r3, lr}
	while (transmitting) yield(); // wait
    2ee6:	4b03      	ldr	r3, [pc, #12]	; (2ef4 <serial_flush+0x10>)
    2ee8:	781b      	ldrb	r3, [r3, #0]
    2eea:	b113      	cbz	r3, 2ef2 <serial_flush+0xe>
    2eec:	f001 fa18 	bl	4320 <yield>
    2ef0:	e7f9      	b.n	2ee6 <serial_flush+0x2>
}
    2ef2:	bd08      	pop	{r3, pc}
    2ef4:	1fff91ac 	.word	0x1fff91ac

00002ef8 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ef8:	4b05      	ldr	r3, [pc, #20]	; (2f10 <serial_available+0x18>)
    2efa:	7818      	ldrb	r0, [r3, #0]
	tail = rx_buffer_tail;
    2efc:	4b05      	ldr	r3, [pc, #20]	; (2f14 <serial_available+0x1c>)
    2efe:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f00:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    2f02:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2f04:	4298      	cmp	r0, r3
	return RX_BUFFER_SIZE + head - tail;
    2f06:	bf38      	it	cc
    2f08:	3040      	addcc	r0, #64	; 0x40
    2f0a:	1ac0      	subs	r0, r0, r3
}
    2f0c:	4770      	bx	lr
    2f0e:	bf00      	nop
    2f10:	1fff922e 	.word	0x1fff922e
    2f14:	1fff91ad 	.word	0x1fff91ad

00002f18 <serial_getchar>:
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    2f18:	4b09      	ldr	r3, [pc, #36]	; (2f40 <serial_getchar+0x28>)
	tail = rx_buffer_tail;
    2f1a:	4a0a      	ldr	r2, [pc, #40]	; (2f44 <serial_getchar+0x2c>)
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    2f1c:	7819      	ldrb	r1, [r3, #0]
	tail = rx_buffer_tail;
    2f1e:	7813      	ldrb	r3, [r2, #0]
    2f20:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    2f22:	4299      	cmp	r1, r3
    2f24:	d008      	beq.n	2f38 <serial_getchar+0x20>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    2f26:	3301      	adds	r3, #1
    2f28:	2b40      	cmp	r3, #64	; 0x40
    2f2a:	bf28      	it	cs
    2f2c:	2300      	movcs	r3, #0
	c = rx_buffer[tail];
    2f2e:	4906      	ldr	r1, [pc, #24]	; (2f48 <serial_getchar+0x30>)
    2f30:	5cc8      	ldrb	r0, [r1, r3]
	rx_buffer_tail = tail;
    2f32:	b2db      	uxtb	r3, r3
    2f34:	7013      	strb	r3, [r2, #0]
	return c;
    2f36:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    2f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
	return c;
}
    2f3c:	4770      	bx	lr
    2f3e:	bf00      	nop
    2f40:	1fff922e 	.word	0x1fff922e
    2f44:	1fff91ad 	.word	0x1fff91ad
    2f48:	1fff91ee 	.word	0x1fff91ee

00002f4c <serial_peek>:

int serial_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f4c:	4b08      	ldr	r3, [pc, #32]	; (2f70 <serial_peek+0x24>)
    2f4e:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    2f50:	4b08      	ldr	r3, [pc, #32]	; (2f74 <serial_peek+0x28>)
    2f52:	781b      	ldrb	r3, [r3, #0]
    2f54:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    2f56:	429a      	cmp	r2, r3
    2f58:	d007      	beq.n	2f6a <serial_peek+0x1e>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    2f5a:	3301      	adds	r3, #1
    2f5c:	2b40      	cmp	r3, #64	; 0x40
    2f5e:	bf28      	it	cs
    2f60:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    2f62:	4a05      	ldr	r2, [pc, #20]	; (2f78 <serial_peek+0x2c>)
    2f64:	5cd0      	ldrb	r0, [r2, r3]
    2f66:	b2c0      	uxtb	r0, r0
    2f68:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    2f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    2f6e:	4770      	bx	lr
    2f70:	1fff922e 	.word	0x1fff922e
    2f74:	1fff91ad 	.word	0x1fff91ad
    2f78:	1fff91ee 	.word	0x1fff91ee

00002f7c <serial_clear>:

void serial_clear(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2f7c:	4b0a      	ldr	r3, [pc, #40]	; (2fa8 <serial_clear+0x2c>)
    2f7e:	681b      	ldr	r3, [r3, #0]
    2f80:	055b      	lsls	r3, r3, #21
    2f82:	d510      	bpl.n	2fa6 <serial_clear+0x2a>
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    2f84:	4b09      	ldr	r3, [pc, #36]	; (2fac <serial_clear+0x30>)
    2f86:	781a      	ldrb	r2, [r3, #0]
    2f88:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    2f8c:	701a      	strb	r2, [r3, #0]
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2f8e:	4a08      	ldr	r2, [pc, #32]	; (2fb0 <serial_clear+0x34>)
    2f90:	2140      	movs	r1, #64	; 0x40
    2f92:	7011      	strb	r1, [r2, #0]
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    2f94:	781a      	ldrb	r2, [r3, #0]
    2f96:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    2f9a:	701a      	strb	r2, [r3, #0]
	rx_buffer_head = rx_buffer_tail;
    2f9c:	4b05      	ldr	r3, [pc, #20]	; (2fb4 <serial_clear+0x38>)
    2f9e:	781a      	ldrb	r2, [r3, #0]
    2fa0:	4b05      	ldr	r3, [pc, #20]	; (2fb8 <serial_clear+0x3c>)
    2fa2:	b2d2      	uxtb	r2, r2
    2fa4:	701a      	strb	r2, [r3, #0]
    2fa6:	4770      	bx	lr
    2fa8:	40048034 	.word	0x40048034
    2fac:	4006a003 	.word	0x4006a003
    2fb0:	4006a011 	.word	0x4006a011
    2fb4:	1fff91ad 	.word	0x1fff91ad
    2fb8:	1fff922e 	.word	0x1fff922e

00002fbc <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect               UART_S2_LBKDIF
//   RxD pin active edge            UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    2fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t head, newhead, tail, n;
	uint8_t avail, c;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2fbe:	4a30      	ldr	r2, [pc, #192]	; (3080 <uart0_status_isr+0xc4>)
    2fc0:	7813      	ldrb	r3, [r2, #0]
    2fc2:	f013 0f30 	tst.w	r3, #48	; 0x30
    2fc6:	d025      	beq.n	3014 <uart0_status_isr+0x58>
		__disable_irq();
    2fc8:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    2fca:	4b2e      	ldr	r3, [pc, #184]	; (3084 <uart0_status_isr+0xc8>)
    2fcc:	4c2e      	ldr	r4, [pc, #184]	; (3088 <uart0_status_isr+0xcc>)
    2fce:	781b      	ldrb	r3, [r3, #0]
		if (avail == 0) {
    2fd0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    2fd4:	b92b      	cbnz	r3, 2fe2 <uart0_status_isr+0x26>
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    2fd6:	7823      	ldrb	r3, [r4, #0]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2fd8:	4b2c      	ldr	r3, [pc, #176]	; (308c <uart0_status_isr+0xd0>)
    2fda:	2140      	movs	r1, #64	; 0x40
    2fdc:	7019      	strb	r1, [r3, #0]
			__enable_irq();
    2fde:	b662      	cpsie	i
    2fe0:	e018      	b.n	3014 <uart0_status_isr+0x58>
		} else {
			__enable_irq();
    2fe2:	b662      	cpsie	i
			head = rx_buffer_head;
    2fe4:	4b2a      	ldr	r3, [pc, #168]	; (3090 <uart0_status_isr+0xd4>)
			tail = rx_buffer_tail;
    2fe6:	4d2b      	ldr	r5, [pc, #172]	; (3094 <uart0_status_isr+0xd8>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2fe8:	7819      	ldrb	r1, [r3, #0]
			tail = rx_buffer_tail;
    2fea:	782e      	ldrb	r6, [r5, #0]
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2fec:	b2c9      	uxtb	r1, r1
			tail = rx_buffer_tail;
    2fee:	b2f6      	uxtb	r6, r6
    2ff0:	461d      	mov	r5, r3
			do {
				n = UART0_D;
				if (use9Bits && (UART0_C3 & 0x80)) n |= 0x100;
				newhead = head + 1;
    2ff2:	1c4b      	adds	r3, r1, #1
				if (newhead >= RX_BUFFER_SIZE) newhead = 0;
    2ff4:	2b40      	cmp	r3, #64	; 0x40
		} else {
			__enable_irq();
			head = rx_buffer_head;
			tail = rx_buffer_tail;
			do {
				n = UART0_D;
    2ff6:	7827      	ldrb	r7, [r4, #0]
				if (use9Bits && (UART0_C3 & 0x80)) n |= 0x100;
				newhead = head + 1;
				if (newhead >= RX_BUFFER_SIZE) newhead = 0;
    2ff8:	bf28      	it	cs
    2ffa:	2300      	movcs	r3, #0
				if (newhead != tail) {
    2ffc:	42b3      	cmp	r3, r6
		} else {
			__enable_irq();
			head = rx_buffer_head;
			tail = rx_buffer_tail;
			do {
				n = UART0_D;
    2ffe:	b2ff      	uxtb	r7, r7
				if (use9Bits && (UART0_C3 & 0x80)) n |= 0x100;
				newhead = head + 1;
				if (newhead >= RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
    3000:	d002      	beq.n	3008 <uart0_status_isr+0x4c>
					head = newhead;
					rx_buffer[head] = n;
    3002:	4925      	ldr	r1, [pc, #148]	; (3098 <uart0_status_isr+0xdc>)
    3004:	54cf      	strb	r7, [r1, r3]
    3006:	4619      	mov	r1, r3
				}
			} while (--avail > 0);
    3008:	1e43      	subs	r3, r0, #1
    300a:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
    300e:	d1f0      	bne.n	2ff2 <uart0_status_isr+0x36>
			rx_buffer_head = head;
    3010:	b2c9      	uxtb	r1, r1
    3012:	7029      	strb	r1, [r5, #0]
		}
	}
	c = UART0_C2;
    3014:	4b21      	ldr	r3, [pc, #132]	; (309c <uart0_status_isr+0xe0>)
    3016:	7819      	ldrb	r1, [r3, #0]
    3018:	b2c9      	uxtb	r1, r1
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    301a:	060d      	lsls	r5, r1, #24
    301c:	d520      	bpl.n	3060 <uart0_status_isr+0xa4>
    301e:	7813      	ldrb	r3, [r2, #0]
    3020:	061c      	lsls	r4, r3, #24
    3022:	d51d      	bpl.n	3060 <uart0_status_isr+0xa4>
		head = tx_buffer_head;
    3024:	4b1e      	ldr	r3, [pc, #120]	; (30a0 <uart0_status_isr+0xe4>)
		tail = tx_buffer_tail;
    3026:	481f      	ldr	r0, [pc, #124]	; (30a4 <uart0_status_isr+0xe8>)
			rx_buffer_head = head;
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3028:	781e      	ldrb	r6, [r3, #0]
		tail = tx_buffer_tail;
    302a:	7803      	ldrb	r3, [r0, #0]
			rx_buffer_head = head;
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    302c:	b2f6      	uxtb	r6, r6
		tail = tx_buffer_tail;
    302e:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    3030:	42b3      	cmp	r3, r6
    3032:	d00d      	beq.n	3050 <uart0_status_isr+0x94>
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3034:	3301      	adds	r3, #1
    3036:	2b40      	cmp	r3, #64	; 0x40
			avail = UART0_S1;
    3038:	7814      	ldrb	r4, [r2, #0]
			n = tx_buffer[tail];
    303a:	4c1b      	ldr	r4, [pc, #108]	; (30a8 <uart0_status_isr+0xec>)
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    303c:	bf28      	it	cs
    303e:	2300      	movcs	r3, #0
			avail = UART0_S1;
			n = tx_buffer[tail];
    3040:	5ce5      	ldrb	r5, [r4, r3]
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3042:	4c11      	ldr	r4, [pc, #68]	; (3088 <uart0_status_isr+0xcc>)
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			avail = UART0_S1;
			n = tx_buffer[tail];
    3044:	b2ed      	uxtb	r5, r5
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3046:	7025      	strb	r5, [r4, #0]
		} while (UART0_TCFIFO < 8);
    3048:	340d      	adds	r4, #13
    304a:	7824      	ldrb	r4, [r4, #0]
    304c:	2c07      	cmp	r4, #7
    304e:	d9ef      	bls.n	3030 <uart0_status_isr+0x74>
		tx_buffer_tail = tail;
    3050:	b2db      	uxtb	r3, r3
    3052:	7003      	strb	r3, [r0, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3054:	7813      	ldrb	r3, [r2, #0]
    3056:	0618      	lsls	r0, r3, #24
    3058:	d502      	bpl.n	3060 <uart0_status_isr+0xa4>
    305a:	4b10      	ldr	r3, [pc, #64]	; (309c <uart0_status_isr+0xe0>)
    305c:	207c      	movs	r0, #124	; 0x7c
    305e:	7018      	strb	r0, [r3, #0]
	}
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3060:	0649      	lsls	r1, r1, #25
    3062:	d50c      	bpl.n	307e <uart0_status_isr+0xc2>
    3064:	7813      	ldrb	r3, [r2, #0]
    3066:	065b      	lsls	r3, r3, #25
    3068:	d509      	bpl.n	307e <uart0_status_isr+0xc2>
		transmitting = 0;
    306a:	4b10      	ldr	r3, [pc, #64]	; (30ac <uart0_status_isr+0xf0>)
    306c:	2200      	movs	r2, #0
    306e:	701a      	strb	r2, [r3, #0]
		if (transmit_pin) *transmit_pin = 0;
    3070:	4b0f      	ldr	r3, [pc, #60]	; (30b0 <uart0_status_isr+0xf4>)
    3072:	681b      	ldr	r3, [r3, #0]
    3074:	b103      	cbz	r3, 3078 <uart0_status_isr+0xbc>
    3076:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3078:	4b08      	ldr	r3, [pc, #32]	; (309c <uart0_status_isr+0xe0>)
    307a:	223c      	movs	r2, #60	; 0x3c
    307c:	701a      	strb	r2, [r3, #0]
    307e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3080:	4006a004 	.word	0x4006a004
    3084:	4006a016 	.word	0x4006a016
    3088:	4006a007 	.word	0x4006a007
    308c:	4006a011 	.word	0x4006a011
    3090:	1fff922e 	.word	0x1fff922e
    3094:	1fff91ad 	.word	0x1fff91ad
    3098:	1fff91ee 	.word	0x1fff91ee
    309c:	4006a003 	.word	0x4006a003
    30a0:	1fff9234 	.word	0x1fff9234
    30a4:	1fff922f 	.word	0x1fff922f
    30a8:	1fff91ae 	.word	0x1fff91ae
    30ac:	1fff91ac 	.word	0x1fff91ac
    30b0:	1fff9230 	.word	0x1fff9230

000030b4 <serial2_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    30b4:	4b17      	ldr	r3, [pc, #92]	; (3114 <serial2_begin+0x60>)
    30b6:	681a      	ldr	r2, [r3, #0]
    30b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    30bc:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
    30be:	4a16      	ldr	r2, [pc, #88]	; (3118 <serial2_begin+0x64>)
    30c0:	2300      	movs	r3, #0
    30c2:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    30c4:	4a15      	ldr	r2, [pc, #84]	; (311c <serial2_begin+0x68>)
    30c6:	7013      	strb	r3, [r2, #0]
	tx_buffer_head = 0;
    30c8:	4a15      	ldr	r2, [pc, #84]	; (3120 <serial2_begin+0x6c>)
    30ca:	7013      	strb	r3, [r2, #0]
	tx_buffer_tail = 0;
    30cc:	4a15      	ldr	r2, [pc, #84]	; (3124 <serial2_begin+0x70>)
    30ce:	7013      	strb	r3, [r2, #0]
	transmitting = 0;
    30d0:	4a15      	ldr	r2, [pc, #84]	; (3128 <serial2_begin+0x74>)
    30d2:	7013      	strb	r3, [r2, #0]
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    30d4:	4a15      	ldr	r2, [pc, #84]	; (312c <serial2_begin+0x78>)
    30d6:	f240 3113 	movw	r1, #787	; 0x313
    30da:	6011      	str	r1, [r2, #0]
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    30dc:	f44f 7151 	mov.w	r1, #836	; 0x344
    30e0:	6051      	str	r1, [r2, #4]
	UART1_BDH = (divisor >> 13) & 0x1F;
    30e2:	4a13      	ldr	r2, [pc, #76]	; (3130 <serial2_begin+0x7c>)
    30e4:	f3c0 3144 	ubfx	r1, r0, #13, #5
    30e8:	7011      	strb	r1, [r2, #0]
	UART1_BDL = (divisor >> 5) & 0xFF;
    30ea:	f3c0 1147 	ubfx	r1, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    30ee:	f000 001f 	and.w	r0, r0, #31
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART1_BDH = (divisor >> 13) & 0x1F;
	UART1_BDL = (divisor >> 5) & 0xFF;
    30f2:	7051      	strb	r1, [r2, #1]
	UART1_C4 = divisor & 0x1F;
    30f4:	7290      	strb	r0, [r2, #10]
	UART1_C1 = 0;
    30f6:	7093      	strb	r3, [r2, #2]
	UART1_PFIFO = 0;
    30f8:	7413      	strb	r3, [r2, #16]
	UART1_C2 = C2_TX_INACTIVE;
    30fa:	4b0e      	ldr	r3, [pc, #56]	; (3134 <serial2_begin+0x80>)
    30fc:	222c      	movs	r2, #44	; 0x2c
    30fe:	701a      	strb	r2, [r3, #0]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    3100:	4b0d      	ldr	r3, [pc, #52]	; (3138 <serial2_begin+0x84>)
    3102:	2240      	movs	r2, #64	; 0x40
    3104:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    3106:	f2a3 332b 	subw	r3, r3, #811	; 0x32b
    310a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    310e:	601a      	str	r2, [r3, #0]
    3110:	4770      	bx	lr
    3112:	bf00      	nop
    3114:	40048034 	.word	0x40048034
    3118:	1fff929f 	.word	0x1fff929f
    311c:	1fff9236 	.word	0x1fff9236
    3120:	1fff92a1 	.word	0x1fff92a1
    3124:	1fff92a0 	.word	0x1fff92a0
    3128:	1fff9235 	.word	0x1fff9235
    312c:	4004b00c 	.word	0x4004b00c
    3130:	4006b000 	.word	0x4006b000
    3134:	4006b003 	.word	0x4006b003
    3138:	e000e42f 	.word	0xe000e42f

0000313c <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    313c:	4a13      	ldr	r2, [pc, #76]	; (318c <serial2_format+0x50>)
    313e:	7813      	ldrb	r3, [r2, #0]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    3140:	f000 0103 	and.w	r1, r0, #3
    3144:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    3148:	430b      	orrs	r3, r1
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    314a:	0741      	lsls	r1, r0, #29
    314c:	bf48      	it	mi
    314e:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_C1 = c;
    3152:	7013      	strb	r3, [r2, #0]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    3154:	f000 030f 	and.w	r3, r0, #15
    3158:	2b04      	cmp	r3, #4
    315a:	4b0d      	ldr	r3, [pc, #52]	; (3190 <serial2_format+0x54>)
    315c:	d103      	bne.n	3166 <serial2_format+0x2a>
    315e:	781a      	ldrb	r2, [r3, #0]
    3160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3164:	701a      	strb	r2, [r3, #0]
	c = UART1_S2 & ~0x10;
    3166:	490b      	ldr	r1, [pc, #44]	; (3194 <serial2_format+0x58>)
    3168:	780a      	ldrb	r2, [r1, #0]
	if (format & 0x10) c |= 0x10;		// rx invert
    316a:	f010 0f10 	tst.w	r0, #16
	c = UART1_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART1_S2 & ~0x10;
    316e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    3172:	bf18      	it	ne
    3174:	f042 0210 	orrne.w	r2, r2, #16
	UART1_S2 = c;
    3178:	700a      	strb	r2, [r1, #0]
	c = UART1_C3 & ~0x10;
    317a:	781a      	ldrb	r2, [r3, #0]
	if (format & 0x20) c |= 0x10;		// tx invert
    317c:	0681      	lsls	r1, r0, #26
	UART1_C1 = c;
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART1_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
	c = UART1_C3 & ~0x10;
    317e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x20) c |= 0x10;		// tx invert
    3182:	bf48      	it	mi
    3184:	f042 0210 	orrmi.w	r2, r2, #16
	UART1_C3 = c;
    3188:	701a      	strb	r2, [r3, #0]
    318a:	4770      	bx	lr
    318c:	4006b002 	.word	0x4006b002
    3190:	4006b006 	.word	0x4006b006
    3194:	4006b005 	.word	0x4006b005

00003198 <serial2_end>:
	// UART1_C3.4 = txinv, 0=normal, 1=inverted
	// UART1_S2.4 = rxinv, 0=normal, 1=inverted
}

void serial2_end(void)
{
    3198:	b508      	push	{r3, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    319a:	4b0e      	ldr	r3, [pc, #56]	; (31d4 <serial2_end+0x3c>)
    319c:	681b      	ldr	r3, [r3, #0]
    319e:	051b      	lsls	r3, r3, #20
    31a0:	d400      	bmi.n	31a4 <serial2_end+0xc>
    31a2:	bd08      	pop	{r3, pc}
	while (transmitting) yield();  // wait for buffered data to send
    31a4:	4b0c      	ldr	r3, [pc, #48]	; (31d8 <serial2_end+0x40>)
    31a6:	781a      	ldrb	r2, [r3, #0]
    31a8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    31ac:	b112      	cbz	r2, 31b4 <serial2_end+0x1c>
    31ae:	f001 f8b7 	bl	4320 <yield>
    31b2:	e7f7      	b.n	31a4 <serial2_end+0xc>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    31b4:	4a09      	ldr	r2, [pc, #36]	; (31dc <serial2_end+0x44>)
    31b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    31ba:	6011      	str	r1, [r2, #0]
	UART1_C2 = 0;
    31bc:	4a08      	ldr	r2, [pc, #32]	; (31e0 <serial2_end+0x48>)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    31be:	4909      	ldr	r1, [pc, #36]	; (31e4 <serial2_end+0x4c>)
void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    31c0:	7013      	strb	r3, [r2, #0]
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    31c2:	f240 1203 	movw	r2, #259	; 0x103
    31c6:	600a      	str	r2, [r1, #0]
	CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    31c8:	604a      	str	r2, [r1, #4]
	rx_buffer_head = 0;
    31ca:	4a07      	ldr	r2, [pc, #28]	; (31e8 <serial2_end+0x50>)
    31cc:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    31ce:	4a07      	ldr	r2, [pc, #28]	; (31ec <serial2_end+0x54>)
    31d0:	7013      	strb	r3, [r2, #0]
    31d2:	bd08      	pop	{r3, pc}
    31d4:	40048034 	.word	0x40048034
    31d8:	1fff9235 	.word	0x1fff9235
    31dc:	e000e184 	.word	0xe000e184
    31e0:	4006b003 	.word	0x4006b003
    31e4:	4004b00c 	.word	0x4004b00c
    31e8:	1fff929f 	.word	0x1fff929f
    31ec:	1fff9236 	.word	0x1fff9236

000031f0 <serial2_putchar>:
}

void serial2_putchar(uint32_t c)
{
    31f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    31f2:	4b1b      	ldr	r3, [pc, #108]	; (3260 <serial2_putchar+0x70>)
    31f4:	681b      	ldr	r3, [r3, #0]
    31f6:	051a      	lsls	r2, r3, #20
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
}

void serial2_putchar(uint32_t c)
{
    31f8:	4607      	mov	r7, r0
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    31fa:	d52f      	bpl.n	325c <serial2_putchar+0x6c>
	head = tx_buffer_head;
    31fc:	4b19      	ldr	r3, [pc, #100]	; (3264 <serial2_putchar+0x74>)
    31fe:	781c      	ldrb	r4, [r3, #0]
	if (++head >= TX_BUFFER_SIZE) head = 0;
    3200:	3401      	adds	r4, #1
    3202:	2c28      	cmp	r4, #40	; 0x28
    3204:	461e      	mov	r6, r3
    3206:	bf28      	it	cs
    3208:	2400      	movcs	r4, #0
	while (tx_buffer_tail == head) {
    320a:	4d17      	ldr	r5, [pc, #92]	; (3268 <serial2_putchar+0x78>)
    320c:	782b      	ldrb	r3, [r5, #0]
    320e:	42a3      	cmp	r3, r4
    3210:	d119      	bne.n	3246 <serial2_putchar+0x56>
		int priority = nvic_execution_priority();
    3212:	f7ff fa19 	bl	2648 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    3216:	2840      	cmp	r0, #64	; 0x40
    3218:	dc10      	bgt.n	323c <serial2_putchar+0x4c>
			if ((UART1_S1 & UART_S1_TDRE)) {
    321a:	4b14      	ldr	r3, [pc, #80]	; (326c <serial2_putchar+0x7c>)
    321c:	781b      	ldrb	r3, [r3, #0]
    321e:	061b      	lsls	r3, r3, #24
    3220:	d5f3      	bpl.n	320a <serial2_putchar+0x1a>
				uint32_t tail = tx_buffer_tail;
    3222:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART1_D = tx_buffer[tail];
    3224:	4a12      	ldr	r2, [pc, #72]	; (3270 <serial2_putchar+0x80>)
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART1_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3226:	3301      	adds	r3, #1
    3228:	2b28      	cmp	r3, #40	; 0x28
    322a:	bf28      	it	cs
    322c:	2300      	movcs	r3, #0
				UART1_D = tx_buffer[tail];
    322e:	5cd1      	ldrb	r1, [r2, r3]
    3230:	4a10      	ldr	r2, [pc, #64]	; (3274 <serial2_putchar+0x84>)
    3232:	b2c9      	uxtb	r1, r1
				tx_buffer_tail = tail;
    3234:	b2db      	uxtb	r3, r3
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART1_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART1_D = tx_buffer[tail];
    3236:	7011      	strb	r1, [r2, #0]
				tx_buffer_tail = tail;
    3238:	702b      	strb	r3, [r5, #0]
    323a:	e7e6      	b.n	320a <serial2_putchar+0x1a>
			}
		} else if (priority >= 256) {
    323c:	28ff      	cmp	r0, #255	; 0xff
    323e:	dde4      	ble.n	320a <serial2_putchar+0x1a>
			yield(); // wait
    3240:	f001 f86e 	bl	4320 <yield>
    3244:	e7e1      	b.n	320a <serial2_putchar+0x1a>
		}
	}
	tx_buffer[head] = c;
    3246:	4b0a      	ldr	r3, [pc, #40]	; (3270 <serial2_putchar+0x80>)
    3248:	b2ff      	uxtb	r7, r7
    324a:	551f      	strb	r7, [r3, r4]
	transmitting = 1;
    324c:	4b0a      	ldr	r3, [pc, #40]	; (3278 <serial2_putchar+0x88>)
    324e:	2201      	movs	r2, #1
    3250:	701a      	strb	r2, [r3, #0]
	tx_buffer_head = head;
	UART1_C2 = C2_TX_ACTIVE;
    3252:	4b0a      	ldr	r3, [pc, #40]	; (327c <serial2_putchar+0x8c>)
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    3254:	b2e4      	uxtb	r4, r4
	UART1_C2 = C2_TX_ACTIVE;
    3256:	22ac      	movs	r2, #172	; 0xac
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    3258:	7034      	strb	r4, [r6, #0]
	UART1_C2 = C2_TX_ACTIVE;
    325a:	701a      	strb	r2, [r3, #0]
    325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    325e:	bf00      	nop
    3260:	40048034 	.word	0x40048034
    3264:	1fff92a1 	.word	0x1fff92a1
    3268:	1fff92a0 	.word	0x1fff92a0
    326c:	4006b004 	.word	0x4006b004
    3270:	1fff9237 	.word	0x1fff9237
    3274:	4006b007 	.word	0x4006b007
    3278:	1fff9235 	.word	0x1fff9235
    327c:	4006b003 	.word	0x4006b003

00003280 <serial2_write>:
}

void serial2_write(const void *buf, unsigned int count)
{
    3280:	b538      	push	{r3, r4, r5, lr}
    3282:	4604      	mov	r4, r0
    3284:	1845      	adds	r5, r0, r1
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial2_putchar(*p++);
    3286:	42ac      	cmp	r4, r5
    3288:	d004      	beq.n	3294 <serial2_write+0x14>
    328a:	f814 0b01 	ldrb.w	r0, [r4], #1
    328e:	f7ff ffaf 	bl	31f0 <serial2_putchar>
    3292:	e7f8      	b.n	3286 <serial2_write+0x6>
}
    3294:	bd38      	pop	{r3, r4, r5, pc}
    3296:	ffff b508 	vabal.u<illegal width 64>	<illegal reg q13.5>, d15, d8

00003298 <serial2_flush>:

void serial2_flush(void)
{
    3298:	b508      	push	{r3, lr}
	while (transmitting) yield(); // wait
    329a:	4b03      	ldr	r3, [pc, #12]	; (32a8 <serial2_flush+0x10>)
    329c:	781b      	ldrb	r3, [r3, #0]
    329e:	b113      	cbz	r3, 32a6 <serial2_flush+0xe>
    32a0:	f001 f83e 	bl	4320 <yield>
    32a4:	e7f9      	b.n	329a <serial2_flush+0x2>
}
    32a6:	bd08      	pop	{r3, pc}
    32a8:	1fff9235 	.word	0x1fff9235

000032ac <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    32ac:	4b05      	ldr	r3, [pc, #20]	; (32c4 <serial2_available+0x18>)
    32ae:	7818      	ldrb	r0, [r3, #0]
	tail = rx_buffer_tail;
    32b0:	4b05      	ldr	r3, [pc, #20]	; (32c8 <serial2_available+0x1c>)
    32b2:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    32b4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    32b6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    32b8:	4298      	cmp	r0, r3
	return RX_BUFFER_SIZE + head - tail;
    32ba:	bf38      	it	cc
    32bc:	3040      	addcc	r0, #64	; 0x40
    32be:	1ac0      	subs	r0, r0, r3
}
    32c0:	4770      	bx	lr
    32c2:	bf00      	nop
    32c4:	1fff929f 	.word	0x1fff929f
    32c8:	1fff9236 	.word	0x1fff9236

000032cc <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    32cc:	4b09      	ldr	r3, [pc, #36]	; (32f4 <serial2_getchar+0x28>)
	tail = rx_buffer_tail;
    32ce:	4a0a      	ldr	r2, [pc, #40]	; (32f8 <serial2_getchar+0x2c>)
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    32d0:	7819      	ldrb	r1, [r3, #0]
	tail = rx_buffer_tail;
    32d2:	7813      	ldrb	r3, [r2, #0]
    32d4:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    32d6:	4299      	cmp	r1, r3
    32d8:	d008      	beq.n	32ec <serial2_getchar+0x20>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    32da:	3301      	adds	r3, #1
    32dc:	2b40      	cmp	r3, #64	; 0x40
    32de:	bf28      	it	cs
    32e0:	2300      	movcs	r3, #0
	c = rx_buffer[tail];
    32e2:	4906      	ldr	r1, [pc, #24]	; (32fc <serial2_getchar+0x30>)
    32e4:	5cc8      	ldrb	r0, [r1, r3]
	rx_buffer_tail = tail;
    32e6:	b2db      	uxtb	r3, r3
    32e8:	7013      	strb	r3, [r2, #0]
	return c;
    32ea:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    32ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
	return c;
}
    32f0:	4770      	bx	lr
    32f2:	bf00      	nop
    32f4:	1fff929f 	.word	0x1fff929f
    32f8:	1fff9236 	.word	0x1fff9236
    32fc:	1fff925f 	.word	0x1fff925f

00003300 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3300:	4b08      	ldr	r3, [pc, #32]	; (3324 <serial2_peek+0x24>)
    3302:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    3304:	4b08      	ldr	r3, [pc, #32]	; (3328 <serial2_peek+0x28>)
    3306:	781b      	ldrb	r3, [r3, #0]
    3308:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    330a:	429a      	cmp	r2, r3
    330c:	d007      	beq.n	331e <serial2_peek+0x1e>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    330e:	3301      	adds	r3, #1
    3310:	2b40      	cmp	r3, #64	; 0x40
    3312:	bf28      	it	cs
    3314:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    3316:	4a05      	ldr	r2, [pc, #20]	; (332c <serial2_peek+0x2c>)
    3318:	5cd0      	ldrb	r0, [r2, r3]
    331a:	b2c0      	uxtb	r0, r0
    331c:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    331e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    3322:	4770      	bx	lr
    3324:	1fff929f 	.word	0x1fff929f
    3328:	1fff9236 	.word	0x1fff9236
    332c:	1fff925f 	.word	0x1fff925f

00003330 <serial2_clear>:

void serial2_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    3330:	4b02      	ldr	r3, [pc, #8]	; (333c <serial2_clear+0xc>)
    3332:	781a      	ldrb	r2, [r3, #0]
    3334:	4b02      	ldr	r3, [pc, #8]	; (3340 <serial2_clear+0x10>)
    3336:	b2d2      	uxtb	r2, r2
    3338:	701a      	strb	r2, [r3, #0]
    333a:	4770      	bx	lr
    333c:	1fff9236 	.word	0x1fff9236
    3340:	1fff929f 	.word	0x1fff929f

00003344 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect               UART_S2_LBKDIF
//   RxD pin active edge            UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3344:	b570      	push	{r4, r5, r6, lr}
	uint32_t head, tail, n;
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
    3346:	491e      	ldr	r1, [pc, #120]	; (33c0 <uart1_status_isr+0x7c>)
    3348:	780b      	ldrb	r3, [r1, #0]
    334a:	069e      	lsls	r6, r3, #26
    334c:	d510      	bpl.n	3370 <uart1_status_isr+0x2c>
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
    334e:	4b1d      	ldr	r3, [pc, #116]	; (33c4 <uart1_status_isr+0x80>)
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    3350:	4a1d      	ldr	r2, [pc, #116]	; (33c8 <uart1_status_isr+0x84>)
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
    3352:	781c      	ldrb	r4, [r3, #0]
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    3354:	7813      	ldrb	r3, [r2, #0]
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3356:	481d      	ldr	r0, [pc, #116]	; (33cc <uart1_status_isr+0x88>)
	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    3358:	3301      	adds	r3, #1
		if (head >= RX_BUFFER_SIZE) head = 0;
    335a:	2b40      	cmp	r3, #64	; 0x40
		if (head != rx_buffer_tail) {
    335c:	7800      	ldrb	r0, [r0, #0]
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
    335e:	bf28      	it	cs
    3360:	2300      	movcs	r3, #0
		if (head != rx_buffer_tail) {
    3362:	4283      	cmp	r3, r0
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART1_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART1_D;
    3364:	b2e4      	uxtb	r4, r4
		if (use9Bits && (UART1_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3366:	d003      	beq.n	3370 <uart1_status_isr+0x2c>
			rx_buffer[head] = n;
    3368:	4819      	ldr	r0, [pc, #100]	; (33d0 <uart1_status_isr+0x8c>)
    336a:	54c4      	strb	r4, [r0, r3]
			rx_buffer_head = head; 
    336c:	b2db      	uxtb	r3, r3
    336e:	7013      	strb	r3, [r2, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	c = UART1_C2;
    3370:	4a18      	ldr	r2, [pc, #96]	; (33d4 <uart1_status_isr+0x90>)
    3372:	7810      	ldrb	r0, [r2, #0]
    3374:	b2c0      	uxtb	r0, r0
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3376:	0605      	lsls	r5, r0, #24
    3378:	d517      	bpl.n	33aa <uart1_status_isr+0x66>
    337a:	780b      	ldrb	r3, [r1, #0]
    337c:	061c      	lsls	r4, r3, #24
    337e:	d514      	bpl.n	33aa <uart1_status_isr+0x66>
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    3380:	4b15      	ldr	r3, [pc, #84]	; (33d8 <uart1_status_isr+0x94>)
		tail = tx_buffer_tail;
    3382:	4c16      	ldr	r4, [pc, #88]	; (33dc <uart1_status_isr+0x98>)
		//digitalWriteFast(5, LOW);
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    3384:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    3386:	7823      	ldrb	r3, [r4, #0]
    3388:	b2db      	uxtb	r3, r3
		if (head == tail) {
    338a:	429d      	cmp	r5, r3
    338c:	d102      	bne.n	3394 <uart1_status_isr+0x50>
			UART1_C2 = C2_TX_COMPLETING;
    338e:	236c      	movs	r3, #108	; 0x6c
    3390:	7013      	strb	r3, [r2, #0]
    3392:	e00a      	b.n	33aa <uart1_status_isr+0x66>
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    3394:	3301      	adds	r3, #1
    3396:	2b28      	cmp	r3, #40	; 0x28
    3398:	bf28      	it	cs
    339a:	2300      	movcs	r3, #0
			n = tx_buffer[tail];
    339c:	4d10      	ldr	r5, [pc, #64]	; (33e0 <uart1_status_isr+0x9c>)
    339e:	5cee      	ldrb	r6, [r5, r3]
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    33a0:	4d08      	ldr	r5, [pc, #32]	; (33c4 <uart1_status_isr+0x80>)
		tail = tx_buffer_tail;
		if (head == tail) {
			UART1_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    33a2:	b2f6      	uxtb	r6, r6
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
			tx_buffer_tail = tail;
    33a4:	b2db      	uxtb	r3, r3
			UART1_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    33a6:	702e      	strb	r6, [r5, #0]
			tx_buffer_tail = tail;
    33a8:	7023      	strb	r3, [r4, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    33aa:	0640      	lsls	r0, r0, #25
    33ac:	d507      	bpl.n	33be <uart1_status_isr+0x7a>
    33ae:	780b      	ldrb	r3, [r1, #0]
    33b0:	065b      	lsls	r3, r3, #25
    33b2:	d504      	bpl.n	33be <uart1_status_isr+0x7a>
		transmitting = 0;
    33b4:	4b0b      	ldr	r3, [pc, #44]	; (33e4 <uart1_status_isr+0xa0>)
    33b6:	2100      	movs	r1, #0
    33b8:	7019      	strb	r1, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    33ba:	232c      	movs	r3, #44	; 0x2c
    33bc:	7013      	strb	r3, [r2, #0]
    33be:	bd70      	pop	{r4, r5, r6, pc}
    33c0:	4006b004 	.word	0x4006b004
    33c4:	4006b007 	.word	0x4006b007
    33c8:	1fff929f 	.word	0x1fff929f
    33cc:	1fff9236 	.word	0x1fff9236
    33d0:	1fff925f 	.word	0x1fff925f
    33d4:	4006b003 	.word	0x4006b003
    33d8:	1fff92a1 	.word	0x1fff92a1
    33dc:	1fff92a0 	.word	0x1fff92a0
    33e0:	1fff9237 	.word	0x1fff9237
    33e4:	1fff9235 	.word	0x1fff9235

000033e8 <serial3_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    33e8:	4b17      	ldr	r3, [pc, #92]	; (3448 <serial3_begin+0x60>)
    33ea:	681a      	ldr	r2, [r3, #0]
    33ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    33f0:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
    33f2:	4a16      	ldr	r2, [pc, #88]	; (344c <serial3_begin+0x64>)
    33f4:	2300      	movs	r3, #0
    33f6:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    33f8:	4a15      	ldr	r2, [pc, #84]	; (3450 <serial3_begin+0x68>)
    33fa:	7013      	strb	r3, [r2, #0]
	tx_buffer_head = 0;
    33fc:	4a15      	ldr	r2, [pc, #84]	; (3454 <serial3_begin+0x6c>)
    33fe:	7013      	strb	r3, [r2, #0]
	tx_buffer_tail = 0;
    3400:	4a15      	ldr	r2, [pc, #84]	; (3458 <serial3_begin+0x70>)
    3402:	7013      	strb	r3, [r2, #0]
	transmitting = 0;
    3404:	4a15      	ldr	r2, [pc, #84]	; (345c <serial3_begin+0x74>)
    3406:	7013      	strb	r3, [r2, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    3408:	4a15      	ldr	r2, [pc, #84]	; (3460 <serial3_begin+0x78>)
    340a:	f240 3113 	movw	r1, #787	; 0x313
    340e:	6011      	str	r1, [r2, #0]
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    3410:	f44f 7151 	mov.w	r1, #836	; 0x344
    3414:	6051      	str	r1, [r2, #4]
	UART2_BDH = (divisor >> 13) & 0x1F;
    3416:	4a13      	ldr	r2, [pc, #76]	; (3464 <serial3_begin+0x7c>)
    3418:	f3c0 3144 	ubfx	r1, r0, #13, #5
    341c:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    341e:	f3c0 1147 	ubfx	r1, r0, #5, #8
	UART2_C4 = divisor & 0x1F;
    3422:	f000 001f 	and.w	r0, r0, #31
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
    3426:	7051      	strb	r1, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    3428:	7290      	strb	r0, [r2, #10]
	UART2_C1 = 0;
    342a:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    342c:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    342e:	4b0e      	ldr	r3, [pc, #56]	; (3468 <serial3_begin+0x80>)
    3430:	222c      	movs	r2, #44	; 0x2c
    3432:	701a      	strb	r2, [r3, #0]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    3434:	4b0d      	ldr	r3, [pc, #52]	; (346c <serial3_begin+0x84>)
    3436:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    3438:	f46f 714b 	mvn.w	r1, #812	; 0x32c
	UART2_BDL = (divisor >> 5) & 0xFF;
	UART2_C4 = divisor & 0x1F;
	UART2_C1 = 0;
	UART2_PFIFO = 0;
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    343c:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    343e:	440b      	add	r3, r1
    3440:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3444:	601a      	str	r2, [r3, #0]
    3446:	4770      	bx	lr
    3448:	40048034 	.word	0x40048034
    344c:	1fff930c 	.word	0x1fff930c
    3450:	1fff92a3 	.word	0x1fff92a3
    3454:	1fff930e 	.word	0x1fff930e
    3458:	1fff930d 	.word	0x1fff930d
    345c:	1fff92a2 	.word	0x1fff92a2
    3460:	4004c008 	.word	0x4004c008
    3464:	4006c000 	.word	0x4006c000
    3468:	4006c003 	.word	0x4006c003
    346c:	e000e431 	.word	0xe000e431

00003470 <serial3_format>:

void serial3_format(uint32_t format)
{
        uint8_t c;

        c = UART2_C1;
    3470:	4a13      	ldr	r2, [pc, #76]	; (34c0 <serial3_format+0x50>)
    3472:	7813      	ldrb	r3, [r2, #0]
        c = (c & ~0x13) | (format & 0x03);      // configure parity
    3474:	f000 0103 	and.w	r1, r0, #3
    3478:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    347c:	430b      	orrs	r3, r1
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
    347e:	0741      	lsls	r1, r0, #29
    3480:	bf48      	it	mi
    3482:	f043 0310 	orrmi.w	r3, r3, #16
        UART2_C1 = c;
    3486:	7013      	strb	r3, [r2, #0]
        if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    3488:	f000 030f 	and.w	r3, r0, #15
    348c:	2b04      	cmp	r3, #4
    348e:	4b0d      	ldr	r3, [pc, #52]	; (34c4 <serial3_format+0x54>)
    3490:	d103      	bne.n	349a <serial3_format+0x2a>
    3492:	781a      	ldrb	r2, [r3, #0]
    3494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3498:	701a      	strb	r2, [r3, #0]
        c = UART2_S2 & ~0x10;
    349a:	490b      	ldr	r1, [pc, #44]	; (34c8 <serial3_format+0x58>)
    349c:	780a      	ldrb	r2, [r1, #0]
        if (format & 0x10) c |= 0x10;           // rx invert
    349e:	f010 0f10 	tst.w	r0, #16
        c = UART2_C1;
        c = (c & ~0x13) | (format & 0x03);      // configure parity
        if (format & 0x04) c |= 0x10;           // 9 bits (might include parity)
        UART2_C1 = c;
        if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART2_S2 & ~0x10;
    34a2:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x10) c |= 0x10;           // rx invert
    34a6:	bf18      	it	ne
    34a8:	f042 0210 	orrne.w	r2, r2, #16
        UART2_S2 = c;
    34ac:	700a      	strb	r2, [r1, #0]
        c = UART2_C3 & ~0x10;
    34ae:	781a      	ldrb	r2, [r3, #0]
        if (format & 0x20) c |= 0x10;           // tx invert
    34b0:	0681      	lsls	r1, r0, #26
        UART2_C1 = c;
        if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
        c = UART2_S2 & ~0x10;
        if (format & 0x10) c |= 0x10;           // rx invert
        UART2_S2 = c;
        c = UART2_C3 & ~0x10;
    34b2:	f002 02ef 	and.w	r2, r2, #239	; 0xef
        if (format & 0x20) c |= 0x10;           // tx invert
    34b6:	bf48      	it	mi
    34b8:	f042 0210 	orrmi.w	r2, r2, #16
        UART2_C3 = c;
    34bc:	701a      	strb	r2, [r3, #0]
    34be:	4770      	bx	lr
    34c0:	4006c002 	.word	0x4006c002
    34c4:	4006c006 	.word	0x4006c006
    34c8:	4006c005 	.word	0x4006c005

000034cc <serial3_end>:
        use9Bits = format & 0x80;
#endif
}

void serial3_end(void)
{
    34cc:	b508      	push	{r3, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    34ce:	4b0e      	ldr	r3, [pc, #56]	; (3508 <serial3_end+0x3c>)
    34d0:	681b      	ldr	r3, [r3, #0]
    34d2:	04db      	lsls	r3, r3, #19
    34d4:	d400      	bmi.n	34d8 <serial3_end+0xc>
    34d6:	bd08      	pop	{r3, pc}
	while (transmitting) yield();  // wait for buffered data to send
    34d8:	4b0c      	ldr	r3, [pc, #48]	; (350c <serial3_end+0x40>)
    34da:	781a      	ldrb	r2, [r3, #0]
    34dc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    34e0:	b112      	cbz	r2, 34e8 <serial3_end+0x1c>
    34e2:	f000 ff1d 	bl	4320 <yield>
    34e6:	e7f7      	b.n	34d8 <serial3_end+0xc>
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    34e8:	4a09      	ldr	r2, [pc, #36]	; (3510 <serial3_end+0x44>)
    34ea:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    34ee:	6011      	str	r1, [r2, #0]
	UART2_C2 = 0;
    34f0:	4a08      	ldr	r2, [pc, #32]	; (3514 <serial3_end+0x48>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    34f2:	4909      	ldr	r1, [pc, #36]	; (3518 <serial3_end+0x4c>)
void serial3_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
	UART2_C2 = 0;
    34f4:	7013      	strb	r3, [r2, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    34f6:	f240 1203 	movw	r2, #259	; 0x103
    34fa:	600a      	str	r2, [r1, #0]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    34fc:	604a      	str	r2, [r1, #4]
	rx_buffer_head = 0;
    34fe:	4a07      	ldr	r2, [pc, #28]	; (351c <serial3_end+0x50>)
    3500:	7013      	strb	r3, [r2, #0]
	rx_buffer_tail = 0;
    3502:	4a07      	ldr	r2, [pc, #28]	; (3520 <serial3_end+0x54>)
    3504:	7013      	strb	r3, [r2, #0]
    3506:	bd08      	pop	{r3, pc}
    3508:	40048034 	.word	0x40048034
    350c:	1fff92a2 	.word	0x1fff92a2
    3510:	e000e184 	.word	0xe000e184
    3514:	4006c003 	.word	0x4006c003
    3518:	4004c008 	.word	0x4004c008
    351c:	1fff930c 	.word	0x1fff930c
    3520:	1fff92a3 	.word	0x1fff92a3

00003524 <serial3_putchar>:
}

void serial3_putchar(uint32_t c)
{
    3524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    3526:	4b1b      	ldr	r3, [pc, #108]	; (3594 <serial3_putchar+0x70>)
    3528:	681b      	ldr	r3, [r3, #0]
    352a:	04da      	lsls	r2, r3, #19
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
}

void serial3_putchar(uint32_t c)
{
    352c:	4607      	mov	r7, r0
	uint32_t head;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    352e:	d52f      	bpl.n	3590 <serial3_putchar+0x6c>
	head = tx_buffer_head;
    3530:	4b19      	ldr	r3, [pc, #100]	; (3598 <serial3_putchar+0x74>)
    3532:	781c      	ldrb	r4, [r3, #0]
	if (++head >= TX_BUFFER_SIZE) head = 0;
    3534:	3401      	adds	r4, #1
    3536:	2c28      	cmp	r4, #40	; 0x28
    3538:	461e      	mov	r6, r3
    353a:	bf28      	it	cs
    353c:	2400      	movcs	r4, #0
	while (tx_buffer_tail == head) {
    353e:	4d17      	ldr	r5, [pc, #92]	; (359c <serial3_putchar+0x78>)
    3540:	782b      	ldrb	r3, [r5, #0]
    3542:	42a3      	cmp	r3, r4
    3544:	d119      	bne.n	357a <serial3_putchar+0x56>
		int priority = nvic_execution_priority();
    3546:	f7ff f87f 	bl	2648 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    354a:	2840      	cmp	r0, #64	; 0x40
    354c:	dc10      	bgt.n	3570 <serial3_putchar+0x4c>
			if ((UART2_S1 & UART_S1_TDRE)) {
    354e:	4b14      	ldr	r3, [pc, #80]	; (35a0 <serial3_putchar+0x7c>)
    3550:	781b      	ldrb	r3, [r3, #0]
    3552:	061b      	lsls	r3, r3, #24
    3554:	d5f3      	bpl.n	353e <serial3_putchar+0x1a>
				uint32_t tail = tx_buffer_tail;
    3556:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART2_D = tx_buffer[tail];
    3558:	4a12      	ldr	r2, [pc, #72]	; (35a4 <serial3_putchar+0x80>)
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
    355a:	3301      	adds	r3, #1
    355c:	2b28      	cmp	r3, #40	; 0x28
    355e:	bf28      	it	cs
    3560:	2300      	movcs	r3, #0
				UART2_D = tx_buffer[tail];
    3562:	5cd1      	ldrb	r1, [r2, r3]
    3564:	4a10      	ldr	r2, [pc, #64]	; (35a8 <serial3_putchar+0x84>)
    3566:	b2c9      	uxtb	r1, r1
				tx_buffer_tail = tail;
    3568:	b2db      	uxtb	r3, r3
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= TX_BUFFER_SIZE) tail = 0;
				UART2_D = tx_buffer[tail];
    356a:	7011      	strb	r1, [r2, #0]
				tx_buffer_tail = tail;
    356c:	702b      	strb	r3, [r5, #0]
    356e:	e7e6      	b.n	353e <serial3_putchar+0x1a>
			}
		} else if (priority >= 256) {
    3570:	28ff      	cmp	r0, #255	; 0xff
    3572:	dde4      	ble.n	353e <serial3_putchar+0x1a>
			yield(); // wait
    3574:	f000 fed4 	bl	4320 <yield>
    3578:	e7e1      	b.n	353e <serial3_putchar+0x1a>
		}
	}
	tx_buffer[head] = c;
    357a:	4b0a      	ldr	r3, [pc, #40]	; (35a4 <serial3_putchar+0x80>)
    357c:	b2ff      	uxtb	r7, r7
    357e:	551f      	strb	r7, [r3, r4]
	transmitting = 1;
    3580:	4b0a      	ldr	r3, [pc, #40]	; (35ac <serial3_putchar+0x88>)
    3582:	2201      	movs	r2, #1
    3584:	701a      	strb	r2, [r3, #0]
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    3586:	4b0a      	ldr	r3, [pc, #40]	; (35b0 <serial3_putchar+0x8c>)
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    3588:	b2e4      	uxtb	r4, r4
	UART2_C2 = C2_TX_ACTIVE;
    358a:	22ac      	movs	r2, #172	; 0xac
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    358c:	7034      	strb	r4, [r6, #0]
	UART2_C2 = C2_TX_ACTIVE;
    358e:	701a      	strb	r2, [r3, #0]
    3590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3592:	bf00      	nop
    3594:	40048034 	.word	0x40048034
    3598:	1fff930e 	.word	0x1fff930e
    359c:	1fff930d 	.word	0x1fff930d
    35a0:	4006c004 	.word	0x4006c004
    35a4:	1fff92a4 	.word	0x1fff92a4
    35a8:	4006c007 	.word	0x4006c007
    35ac:	1fff92a2 	.word	0x1fff92a2
    35b0:	4006c003 	.word	0x4006c003

000035b4 <serial3_write>:
}

void serial3_write(const void *buf, unsigned int count)
{
    35b4:	b538      	push	{r3, r4, r5, lr}
    35b6:	4604      	mov	r4, r0
    35b8:	1845      	adds	r5, r0, r1
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    35ba:	42ac      	cmp	r4, r5
    35bc:	d004      	beq.n	35c8 <serial3_write+0x14>
    35be:	f814 0b01 	ldrb.w	r0, [r4], #1
    35c2:	f7ff ffaf 	bl	3524 <serial3_putchar>
    35c6:	e7f8      	b.n	35ba <serial3_write+0x6>
}
    35c8:	bd38      	pop	{r3, r4, r5, pc}
    35ca:	ffff b508 	vabal.u<illegal width 64>	<illegal reg q13.5>, d15, d8

000035cc <serial3_flush>:

void serial3_flush(void)
{
    35cc:	b508      	push	{r3, lr}
	while (transmitting) yield(); // wait
    35ce:	4b03      	ldr	r3, [pc, #12]	; (35dc <serial3_flush+0x10>)
    35d0:	781b      	ldrb	r3, [r3, #0]
    35d2:	b113      	cbz	r3, 35da <serial3_flush+0xe>
    35d4:	f000 fea4 	bl	4320 <yield>
    35d8:	e7f9      	b.n	35ce <serial3_flush+0x2>
}
    35da:	bd08      	pop	{r3, pc}
    35dc:	1fff92a2 	.word	0x1fff92a2

000035e0 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35e0:	4b05      	ldr	r3, [pc, #20]	; (35f8 <serial3_available+0x18>)
    35e2:	7818      	ldrb	r0, [r3, #0]
	tail = rx_buffer_tail;
    35e4:	4b05      	ldr	r3, [pc, #20]	; (35fc <serial3_available+0x1c>)
    35e6:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35e8:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    35ea:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    35ec:	4298      	cmp	r0, r3
	return RX_BUFFER_SIZE + head - tail;
    35ee:	bf38      	it	cc
    35f0:	3040      	addcc	r0, #64	; 0x40
    35f2:	1ac0      	subs	r0, r0, r3
}
    35f4:	4770      	bx	lr
    35f6:	bf00      	nop
    35f8:	1fff930c 	.word	0x1fff930c
    35fc:	1fff92a3 	.word	0x1fff92a3

00003600 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    3600:	4b09      	ldr	r3, [pc, #36]	; (3628 <serial3_getchar+0x28>)
	tail = rx_buffer_tail;
    3602:	4a0a      	ldr	r2, [pc, #40]	; (362c <serial3_getchar+0x2c>)
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    3604:	7819      	ldrb	r1, [r3, #0]
	tail = rx_buffer_tail;
    3606:	7813      	ldrb	r3, [r2, #0]
    3608:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    360a:	4299      	cmp	r1, r3
    360c:	d008      	beq.n	3620 <serial3_getchar+0x20>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    360e:	3301      	adds	r3, #1
    3610:	2b40      	cmp	r3, #64	; 0x40
    3612:	bf28      	it	cs
    3614:	2300      	movcs	r3, #0
	c = rx_buffer[tail];
    3616:	4906      	ldr	r1, [pc, #24]	; (3630 <serial3_getchar+0x30>)
    3618:	5cc8      	ldrb	r0, [r1, r3]
	rx_buffer_tail = tail;
    361a:	b2db      	uxtb	r3, r3
    361c:	7013      	strb	r3, [r2, #0]
	return c;
    361e:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    3620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
	return c;
}
    3624:	4770      	bx	lr
    3626:	bf00      	nop
    3628:	1fff930c 	.word	0x1fff930c
    362c:	1fff92a3 	.word	0x1fff92a3
    3630:	1fff92cc 	.word	0x1fff92cc

00003634 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3634:	4b08      	ldr	r3, [pc, #32]	; (3658 <serial3_peek+0x24>)
    3636:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    3638:	4b08      	ldr	r3, [pc, #32]	; (365c <serial3_peek+0x28>)
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    363e:	429a      	cmp	r2, r3
    3640:	d007      	beq.n	3652 <serial3_peek+0x1e>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    3642:	3301      	adds	r3, #1
    3644:	2b40      	cmp	r3, #64	; 0x40
    3646:	bf28      	it	cs
    3648:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    364a:	4a05      	ldr	r2, [pc, #20]	; (3660 <serial3_peek+0x2c>)
    364c:	5cd0      	ldrb	r0, [r2, r3]
    364e:	b2c0      	uxtb	r0, r0
    3650:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    3652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    3656:	4770      	bx	lr
    3658:	1fff930c 	.word	0x1fff930c
    365c:	1fff92a3 	.word	0x1fff92a3
    3660:	1fff92cc 	.word	0x1fff92cc

00003664 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    3664:	4b02      	ldr	r3, [pc, #8]	; (3670 <serial3_clear+0xc>)
    3666:	781a      	ldrb	r2, [r3, #0]
    3668:	4b02      	ldr	r3, [pc, #8]	; (3674 <serial3_clear+0x10>)
    366a:	b2d2      	uxtb	r2, r2
    366c:	701a      	strb	r2, [r3, #0]
    366e:	4770      	bx	lr
    3670:	1fff92a3 	.word	0x1fff92a3
    3674:	1fff930c 	.word	0x1fff930c

00003678 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect               UART_S2_LBKDIF
//   RxD pin active edge            UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3678:	b570      	push	{r4, r5, r6, lr}
	uint32_t head, tail, n;
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
    367a:	491e      	ldr	r1, [pc, #120]	; (36f4 <uart2_status_isr+0x7c>)
    367c:	780b      	ldrb	r3, [r1, #0]
    367e:	069e      	lsls	r6, r3, #26
    3680:	d510      	bpl.n	36a4 <uart2_status_isr+0x2c>
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
    3682:	4b1d      	ldr	r3, [pc, #116]	; (36f8 <uart2_status_isr+0x80>)
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    3684:	4a1d      	ldr	r2, [pc, #116]	; (36fc <uart2_status_isr+0x84>)
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
    3686:	781c      	ldrb	r4, [r3, #0]
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    3688:	7813      	ldrb	r3, [r2, #0]
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    368a:	481d      	ldr	r0, [pc, #116]	; (3700 <uart2_status_isr+0x88>)
	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
    368c:	3301      	adds	r3, #1
		if (head >= RX_BUFFER_SIZE) head = 0;
    368e:	2b40      	cmp	r3, #64	; 0x40
		if (head != rx_buffer_tail) {
    3690:	7800      	ldrb	r0, [r0, #0]
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
    3692:	bf28      	it	cs
    3694:	2300      	movcs	r3, #0
		if (head != rx_buffer_tail) {
    3696:	4283      	cmp	r3, r0
	uint8_t c;

	//digitalWriteFast(4, HIGH);
	if (UART2_S1 & UART_S1_RDRF) {
		//digitalWriteFast(5, HIGH);
		n = UART2_D;
    3698:	b2e4      	uxtb	r4, r4
		if (use9Bits && (UART2_C3 & 0x80)) n |= 0x100;
		head = rx_buffer_head + 1;
		if (head >= RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    369a:	d003      	beq.n	36a4 <uart2_status_isr+0x2c>
			rx_buffer[head] = n;
    369c:	4819      	ldr	r0, [pc, #100]	; (3704 <uart2_status_isr+0x8c>)
    369e:	54c4      	strb	r4, [r0, r3]
			rx_buffer_head = head; 
    36a0:	b2db      	uxtb	r3, r3
    36a2:	7013      	strb	r3, [r2, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	c = UART2_C2;
    36a4:	4a18      	ldr	r2, [pc, #96]	; (3708 <uart2_status_isr+0x90>)
    36a6:	7810      	ldrb	r0, [r2, #0]
    36a8:	b2c0      	uxtb	r0, r0
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    36aa:	0605      	lsls	r5, r0, #24
    36ac:	d517      	bpl.n	36de <uart2_status_isr+0x66>
    36ae:	780b      	ldrb	r3, [r1, #0]
    36b0:	061c      	lsls	r4, r3, #24
    36b2:	d514      	bpl.n	36de <uart2_status_isr+0x66>
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    36b4:	4b15      	ldr	r3, [pc, #84]	; (370c <uart2_status_isr+0x94>)
		tail = tx_buffer_tail;
    36b6:	4c16      	ldr	r4, [pc, #88]	; (3710 <uart2_status_isr+0x98>)
		//digitalWriteFast(5, LOW);
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		//digitalWriteFast(5, HIGH);
		head = tx_buffer_head;
    36b8:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    36ba:	7823      	ldrb	r3, [r4, #0]
    36bc:	b2db      	uxtb	r3, r3
		if (head == tail) {
    36be:	429d      	cmp	r5, r3
    36c0:	d102      	bne.n	36c8 <uart2_status_isr+0x50>
			UART2_C2 = C2_TX_COMPLETING;
    36c2:	236c      	movs	r3, #108	; 0x6c
    36c4:	7013      	strb	r3, [r2, #0]
    36c6:	e00a      	b.n	36de <uart2_status_isr+0x66>
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
    36c8:	3301      	adds	r3, #1
    36ca:	2b28      	cmp	r3, #40	; 0x28
    36cc:	bf28      	it	cs
    36ce:	2300      	movcs	r3, #0
			n = tx_buffer[tail];
    36d0:	4d10      	ldr	r5, [pc, #64]	; (3714 <uart2_status_isr+0x9c>)
    36d2:	5cee      	ldrb	r6, [r5, r3]
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    36d4:	4d08      	ldr	r5, [pc, #32]	; (36f8 <uart2_status_isr+0x80>)
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    36d6:	b2f6      	uxtb	r6, r6
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
    36d8:	b2db      	uxtb	r3, r3
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    36da:	702e      	strb	r6, [r5, #0]
			tx_buffer_tail = tail;
    36dc:	7023      	strb	r3, [r4, #0]
		}
		//digitalWriteFast(5, LOW);
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    36de:	0640      	lsls	r0, r0, #25
    36e0:	d507      	bpl.n	36f2 <uart2_status_isr+0x7a>
    36e2:	780b      	ldrb	r3, [r1, #0]
    36e4:	065b      	lsls	r3, r3, #25
    36e6:	d504      	bpl.n	36f2 <uart2_status_isr+0x7a>
		transmitting = 0;
    36e8:	4b0b      	ldr	r3, [pc, #44]	; (3718 <uart2_status_isr+0xa0>)
    36ea:	2100      	movs	r1, #0
    36ec:	7019      	strb	r1, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    36ee:	232c      	movs	r3, #44	; 0x2c
    36f0:	7013      	strb	r3, [r2, #0]
    36f2:	bd70      	pop	{r4, r5, r6, pc}
    36f4:	4006c004 	.word	0x4006c004
    36f8:	4006c007 	.word	0x4006c007
    36fc:	1fff930c 	.word	0x1fff930c
    3700:	1fff92a3 	.word	0x1fff92a3
    3704:	1fff92cc 	.word	0x1fff92cc
    3708:	4006c003 	.word	0x4006c003
    370c:	1fff930e 	.word	0x1fff930e
    3710:	1fff930d 	.word	0x1fff930d
    3714:	1fff92a4 	.word	0x1fff92a4
    3718:	1fff92a2 	.word	0x1fff92a2

0000371c <_ZN13IntervalTimerD1Ev>:
    uint8_t IRQ_PIT_CH;
    ISR myISR;
    bool beginCycles(ISR newISR, uint32_t cycles);
  public:
    IntervalTimer() { status = TIMER_OFF; }
    ~IntervalTimer() { end(); }
    371c:	b510      	push	{r4, lr}
    371e:	4604      	mov	r4, r0
    3720:	f7fe ff12 	bl	2548 <_ZN13IntervalTimer3endEv>
    3724:	4620      	mov	r0, r4
    3726:	bd10      	pop	{r4, pc}

00003728 <_GLOBAL__sub_I_tone_timer>:
    reg PIT_TCTRL;
    uint8_t IRQ_PIT_CH;
    ISR myISR;
    bool beginCycles(ISR newISR, uint32_t cycles);
  public:
    IntervalTimer() { status = TIMER_OFF; }
    3728:	4803      	ldr	r0, [pc, #12]	; (3738 <_GLOBAL__sub_I_tone_timer+0x10>)

static uint32_t tone_toggle_count;
static volatile uint8_t *tone_reg;
static uint8_t tone_pin=255;
static uint16_t tone_frequency=0;
IntervalTimer tone_timer;
    372a:	4904      	ldr	r1, [pc, #16]	; (373c <_GLOBAL__sub_I_tone_timer+0x14>)
    372c:	4a04      	ldr	r2, [pc, #16]	; (3740 <_GLOBAL__sub_I_tone_timer+0x18>)
    372e:	2300      	movs	r3, #0
    3730:	7003      	strb	r3, [r0, #0]
    3732:	f000 bdf7 	b.w	4324 <__aeabi_atexit>
    3736:	bf00      	nop
    3738:	1fff9310 	.word	0x1fff9310
    373c:	0000371d 	.word	0x0000371d
    3740:	1fff8400 	.word	0x1fff8400

00003744 <usb_init_serialnumber>:
        3,
        {0,0,0,0,0,0,0,0,0,0}
};

void usb_init_serialnumber(void)
{
    3744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3746:	b672      	cpsid	i
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3748:	4b15      	ldr	r3, [pc, #84]	; (37a0 <usb_init_serialnumber+0x5c>)
    374a:	2270      	movs	r2, #112	; 0x70
    374c:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    374e:	4a15      	ldr	r2, [pc, #84]	; (37a4 <usb_init_serialnumber+0x60>)
    3750:	2141      	movs	r1, #65	; 0x41
    3752:	7011      	strb	r1, [r2, #0]
	FTFL_FCCOB1 = 15;
    3754:	210f      	movs	r1, #15
    3756:	f802 1c01 	strb.w	r1, [r2, #-1]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    375a:	2280      	movs	r2, #128	; 0x80
    375c:	701a      	strb	r2, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    375e:	781a      	ldrb	r2, [r3, #0]
    3760:	0612      	lsls	r2, r2, #24
    3762:	d5fc      	bpl.n	375e <usb_init_serialnumber+0x1a>
	num = *(uint32_t *)&FTFL_FCCOB7;
    3764:	4b10      	ldr	r3, [pc, #64]	; (37a8 <usb_init_serialnumber+0x64>)
    3766:	6818      	ldr	r0, [r3, #0]
	__enable_irq();
    3768:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    376a:	4b10      	ldr	r3, [pc, #64]	; (37ac <usb_init_serialnumber+0x68>)
    376c:	4298      	cmp	r0, r3
    376e:	bf98      	it	ls
    3770:	230a      	movls	r3, #10
	ultoa(num, buf, 10);
    3772:	ac01      	add	r4, sp, #4
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3774:	bf98      	it	ls
    3776:	4358      	mulls	r0, r3
	ultoa(num, buf, 10);
    3778:	4621      	mov	r1, r4
    377a:	220a      	movs	r2, #10
    377c:	f7fe ff95 	bl	26aa <ultoa>
	for (i=0; i<10; i++) {
    3780:	2300      	movs	r3, #0
		char c = buf[i];
    3782:	5ce1      	ldrb	r1, [r4, r3]
    3784:	4a0a      	ldr	r2, [pc, #40]	; (37b0 <usb_init_serialnumber+0x6c>)
		if (!c) break;
    3786:	b129      	cbz	r1, 3794 <usb_init_serialnumber+0x50>
    3788:	eb02 0043 	add.w	r0, r2, r3, lsl #1
	num = *(uint32_t *)&FTFL_FCCOB7;
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    378c:	3301      	adds	r3, #1
    378e:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3790:	8041      	strh	r1, [r0, #2]
	num = *(uint32_t *)&FTFL_FCCOB7;
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3792:	d1f6      	bne.n	3782 <usb_init_serialnumber+0x3e>
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3794:	3301      	adds	r3, #1
    3796:	005b      	lsls	r3, r3, #1
    3798:	7013      	strb	r3, [r2, #0]
}
    379a:	b004      	add	sp, #16
    379c:	bd10      	pop	{r4, pc}
    379e:	bf00      	nop
    37a0:	40020000 	.word	0x40020000
    37a4:	40020007 	.word	0x40020007
    37a8:	40020008 	.word	0x40020008
    37ac:	0098967f 	.word	0x0098967f
    37b0:	1fff84a4 	.word	0x1fff84a4

000037b4 <endpoint0_transmit>:
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}


static void endpoint0_transmit(const void *data, uint32_t len)
{
    37b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    37b6:	4b0c      	ldr	r3, [pc, #48]	; (37e8 <endpoint0_transmit+0x34>)
    37b8:	4c0c      	ldr	r4, [pc, #48]	; (37ec <endpoint0_transmit+0x38>)
    37ba:	781a      	ldrb	r2, [r3, #0]
    37bc:	f042 0502 	orr.w	r5, r2, #2
    37c0:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    37c4:	f082 0201 	eor.w	r2, r2, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    37c8:	6070      	str	r0, [r6, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37ca:	4809      	ldr	r0, [pc, #36]	; (37f0 <endpoint0_transmit+0x3c>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    37cc:	701a      	strb	r2, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37ce:	7806      	ldrb	r6, [r0, #0]
    37d0:	2e00      	cmp	r6, #0
    37d2:	bf0c      	ite	eq
    37d4:	2788      	moveq	r7, #136	; 0x88
    37d6:	27c8      	movne	r7, #200	; 0xc8
	ep0_tx_data_toggle ^= 1;
    37d8:	f086 0601 	eor.w	r6, r6, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37dc:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
	ep0_tx_data_toggle ^= 1;
    37e0:	7006      	strb	r6, [r0, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37e2:	f844 1035 	str.w	r1, [r4, r5, lsl #3]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    37e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37e8:	1fff938c 	.word	0x1fff938c
    37ec:	1fff8000 	.word	0x1fff8000
    37f0:	1fff9404 	.word	0x1fff9404

000037f4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    37f4:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    37f6:	2b03      	cmp	r3, #3




usb_packet_t *usb_rx(uint32_t endpoint)
{
    37f8:	b510      	push	{r4, lr}
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    37fa:	d810      	bhi.n	381e <usb_rx+0x2a>
	__disable_irq();
    37fc:	b672      	cpsid	i
	ret = rx_first[endpoint];
    37fe:	4a09      	ldr	r2, [pc, #36]	; (3824 <usb_rx+0x30>)
    3800:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if (ret) {
    3804:	b148      	cbz	r0, 381a <usb_rx+0x26>
		rx_first[endpoint] = ret->next;
    3806:	6841      	ldr	r1, [r0, #4]
    3808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    380c:	4a06      	ldr	r2, [pc, #24]	; (3828 <usb_rx+0x34>)
    380e:	8801      	ldrh	r1, [r0, #0]
    3810:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
    3814:	1a61      	subs	r1, r4, r1
    3816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	__enable_irq();
    381a:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    381c:	bd10      	pop	{r4, pc}

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    381e:	2000      	movs	r0, #0
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3820:	bd10      	pop	{r4, pc}
    3822:	bf00      	nop
    3824:	1fff937c 	.word	0x1fff937c
    3828:	1fff9c80 	.word	0x1fff9c80

0000382c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    382c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    382e:	2803      	cmp	r0, #3
    3830:	d80a      	bhi.n	3848 <usb_tx_packet_count+0x1c>
	__disable_irq();
    3832:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3834:	4b05      	ldr	r3, [pc, #20]	; (384c <usb_tx_packet_count+0x20>)
    3836:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    383a:	2000      	movs	r0, #0

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    383c:	b113      	cbz	r3, 3844 <usb_tx_packet_count+0x18>
    383e:	3001      	adds	r0, #1
    3840:	685b      	ldr	r3, [r3, #4]
    3842:	e7fb      	b.n	383c <usb_tx_packet_count+0x10>
	__enable_irq();
    3844:	b662      	cpsie	i
	return count;
    3846:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3848:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    384a:	4770      	bx	lr
    384c:	1fff93d0 	.word	0x1fff93d0

00003850 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    3850:	b510      	push	{r4, lr}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    3852:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    3854:	2301      	movs	r3, #1
    3856:	4a17      	ldr	r2, [pc, #92]	; (38b4 <usb_rx_memory+0x64>)
    3858:	441a      	add	r2, r3
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    385a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    385e:	0712      	lsls	r2, r2, #28
    3860:	d51c      	bpl.n	389c <usb_rx_memory+0x4c>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3862:	0099      	lsls	r1, r3, #2
    3864:	4a14      	ldr	r2, [pc, #80]	; (38b8 <usb_rx_memory+0x68>)
    3866:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    386a:	b92c      	cbnz	r4, 3878 <usb_rx_memory+0x28>
				table[index(i, RX, EVEN)].addr = packet->buf;
    386c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
    3870:	3008      	adds	r0, #8
    3872:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3874:	4b11      	ldr	r3, [pc, #68]	; (38bc <usb_rx_memory+0x6c>)
    3876:	e009      	b.n	388c <usb_rx_memory+0x3c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3878:	f041 0101 	orr.w	r1, r1, #1
    387c:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    3880:	b964      	cbnz	r4, 389c <usb_rx_memory+0x4c>
				table[index(i, RX, ODD)].addr = packet->buf;
    3882:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    3886:	3008      	adds	r0, #8
    3888:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    388a:	4b0d      	ldr	r3, [pc, #52]	; (38c0 <usb_rx_memory+0x70>)
    388c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
				usb_rx_memory_needed--;
    3890:	4b0c      	ldr	r3, [pc, #48]	; (38c4 <usb_rx_memory+0x74>)
    3892:	781a      	ldrb	r2, [r3, #0]
    3894:	3a01      	subs	r2, #1
    3896:	701a      	strb	r2, [r3, #0]
				__enable_irq();
    3898:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    389a:	bd10      	pop	{r4, pc}
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    389c:	3301      	adds	r3, #1
    389e:	2b05      	cmp	r3, #5
    38a0:	d1d9      	bne.n	3856 <usb_rx_memory+0x6>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    38a2:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    38a4:	4b07      	ldr	r3, [pc, #28]	; (38c4 <usb_rx_memory+0x74>)
    38a6:	2200      	movs	r2, #0
    38a8:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    38aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    38ae:	f000 bbcd 	b.w	404c <usb_free>
    38b2:	bf00      	nop
    38b4:	00012d12 	.word	0x00012d12
    38b8:	1fff8000 	.word	0x1fff8000
    38bc:	00400088 	.word	0x00400088
    38c0:	004000c8 	.word	0x004000c8
    38c4:	1fff93fa 	.word	0x1fff93fa

000038c8 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    38c8:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    38ca:	2b03      	cmp	r3, #3

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    38cc:	b530      	push	{r4, r5, lr}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
    38ce:	d832      	bhi.n	3936 <usb_tx+0x6e>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    38d0:	4a19      	ldr	r2, [pc, #100]	; (3938 <usb_tx+0x70>)
    38d2:	0140      	lsls	r0, r0, #5
    38d4:	f040 0010 	orr.w	r0, r0, #16
    38d8:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    38da:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    38dc:	4c17      	ldr	r4, [pc, #92]	; (393c <usb_tx+0x74>)
    38de:	5ce2      	ldrb	r2, [r4, r3]
    38e0:	2a03      	cmp	r2, #3
    38e2:	d809      	bhi.n	38f8 <usb_tx+0x30>
    38e4:	e8df f002 	tbb	[pc, r2]
    38e8:	05180216 	.word	0x05180216
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    38ec:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    38ee:	2202      	movs	r2, #2
		break;
    38f0:	e013      	b.n	391a <usb_tx+0x52>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    38f2:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    38f4:	2204      	movs	r2, #4
		break;
    38f6:	e010      	b.n	391a <usb_tx+0x52>
	  default:
		if (tx_first[endpoint] == NULL) {
    38f8:	4811      	ldr	r0, [pc, #68]	; (3940 <usb_tx+0x78>)
    38fa:	4a12      	ldr	r2, [pc, #72]	; (3944 <usb_tx+0x7c>)
    38fc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    3900:	b914      	cbnz	r4, 3908 <usb_tx+0x40>
			tx_first[endpoint] = packet;
    3902:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    3906:	e002      	b.n	390e <usb_tx+0x46>
		} else {
			tx_last[endpoint]->next = packet;
    3908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    390c:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    390e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    3912:	e00f      	b.n	3934 <usb_tx+0x6c>
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3914:	2203      	movs	r2, #3
    3916:	e000      	b.n	391a <usb_tx+0x52>
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    3918:	2205      	movs	r2, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    391a:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    391c:	f010 0f08 	tst.w	r0, #8
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3920:	f101 0308 	add.w	r3, r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3924:	880a      	ldrh	r2, [r1, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3926:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3928:	bf0c      	ite	eq
    392a:	2388      	moveq	r3, #136	; 0x88
    392c:	23c8      	movne	r3, #200	; 0xc8
    392e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3932:	6003      	str	r3, [r0, #0]
	__enable_irq();
    3934:	b662      	cpsie	i
    3936:	bd30      	pop	{r4, r5, pc}
    3938:	1fff8000 	.word	0x1fff8000
    393c:	1fff9338 	.word	0x1fff9338
    3940:	1fff93d0 	.word	0x1fff93d0
    3944:	1fff93e0 	.word	0x1fff93e0

00003948 <usb_isr>:
}



void usb_isr(void)
{
    3948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    394c:	4fab      	ldr	r7, [pc, #684]	; (3bfc <usb_isr+0x2b4>)
    394e:	783c      	ldrb	r4, [r7, #0]
    3950:	b2e4      	uxtb	r4, r4

	if ((status & USB_INTEN_SOFTOKEN /* 04 */ )) {
    3952:	f014 0f04 	tst.w	r4, #4
    3956:	463d      	mov	r5, r7
    3958:	d019      	beq.n	398e <usb_isr+0x46>
		if (usb_configuration) {
    395a:	4ba9      	ldr	r3, [pc, #676]	; (3c00 <usb_isr+0x2b8>)
    395c:	781b      	ldrb	r3, [r3, #0]
    395e:	b1a3      	cbz	r3, 398a <usb_isr+0x42>
			t = usb_reboot_timer;
    3960:	4aa8      	ldr	r2, [pc, #672]	; (3c04 <usb_isr+0x2bc>)
    3962:	7811      	ldrb	r1, [r2, #0]
			if (t) {
    3964:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    3968:	b121      	cbz	r1, 3974 <usb_isr+0x2c>
				usb_reboot_timer = --t;
    396a:	3b01      	subs	r3, #1
    396c:	b2db      	uxtb	r3, r3
    396e:	7013      	strb	r3, [r2, #0]
				if (!t) _reboot_Teensyduino_();
    3970:	b903      	cbnz	r3, 3974 <usb_isr+0x2c>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3972:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3974:	4aa4      	ldr	r2, [pc, #656]	; (3c08 <usb_isr+0x2c0>)
    3976:	7811      	ldrb	r1, [r2, #0]
			if (t) {
    3978:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    397c:	b129      	cbz	r1, 398a <usb_isr+0x42>
				usb_cdc_transmit_flush_timer = --t;
    397e:	3b01      	subs	r3, #1
    3980:	b2db      	uxtb	r3, r3
    3982:	7013      	strb	r3, [r2, #0]
				if (t == 0) usb_serial_flush_callback();
    3984:	b90b      	cbnz	r3, 398a <usb_isr+0x42>
    3986:	f000 fc75 	bl	4274 <usb_serial_flush_callback>
#endif
#ifdef FLIGHTSIM_INTERFACE
			usb_flightsim_flush_callback();
#endif
		}
		USB0_ISTAT = USB_INTEN_SOFTOKEN;
    398a:	2304      	movs	r3, #4
    398c:	703b      	strb	r3, [r7, #0]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    398e:	f004 0308 	and.w	r3, r4, #8
    3992:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3996:	2b00      	cmp	r3, #0
    3998:	f000 8263 	beq.w	3e62 <usb_isr+0x51a>
		uint8_t endpoint;
		stat = USB0_STAT;
    399c:	4b9b      	ldr	r3, [pc, #620]	; (3c0c <usb_isr+0x2c4>)
    399e:	4c9c      	ldr	r4, [pc, #624]	; (3c10 <usb_isr+0x2c8>)
    39a0:	781a      	ldrb	r2, [r3, #0]
    39a2:	b2d2      	uxtb	r2, r2
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    39a4:	0915      	lsrs	r5, r2, #4
    39a6:	ea4f 0892 	mov.w	r8, r2, lsr #2
    39aa:	f040 81e0 	bne.w	3d6e <usb_isr+0x426>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    39ae:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    39b2:	6859      	ldr	r1, [r3, #4]
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
    39b4:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
    39b8:	f3c3 0383 	ubfx	r3, r3, #2, #4
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    39bc:	3b01      	subs	r3, #1
    39be:	2b0c      	cmp	r3, #12
    39c0:	f200 81d2 	bhi.w	3d68 <usb_isr+0x420>
    39c4:	e8df f013 	tbh	[pc, r3, lsl #1]
    39c8:	01910191 	.word	0x01910191
    39cc:	01d001d0 	.word	0x01d001d0
    39d0:	01d001d0 	.word	0x01d001d0
    39d4:	01d001d0 	.word	0x01d001d0
    39d8:	01d001ac 	.word	0x01d001ac
    39dc:	01d001d0 	.word	0x01d001d0
    39e0:	000d      	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    39e2:	4d8c      	ldr	r5, [pc, #560]	; (3c14 <usb_isr+0x2cc>)
    39e4:	680a      	ldr	r2, [r1, #0]
		setup.word2 = *(uint32_t *)(buf + 4);
    39e6:	684b      	ldr	r3, [r1, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    39e8:	488b      	ldr	r0, [pc, #556]	; (3c18 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    39ea:	606b      	str	r3, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    39ec:	2101      	movs	r1, #1
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    39ee:	4b8b      	ldr	r3, [pc, #556]	; (3c1c <usb_isr+0x2d4>)
    39f0:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    39f4:	602a      	str	r2, [r5, #0]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    39f6:	f8df 8250 	ldr.w	r8, [pc, #592]	; 3c48 <usb_isr+0x300>
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    39fa:	7001      	strb	r1, [r0, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    39fc:	b292      	uxth	r2, r2
    39fe:	f240 6081 	movw	r0, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3a02:	2300      	movs	r3, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a04:	4282      	cmp	r2, r0
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3a06:	f8c8 3000 	str.w	r3, [r8]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3a0a:	6123      	str	r3, [r4, #16]
		table[index(0, TX, ODD)].desc = 0;
    3a0c:	61a3      	str	r3, [r4, #24]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a0e:	d817      	bhi.n	3a40 <usb_isr+0xf8>
    3a10:	f5b2 6fd0 	cmp.w	r2, #1664	; 0x680
    3a14:	f080 811e 	bcs.w	3c54 <usb_isr+0x30c>
    3a18:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    3a1c:	f000 80cf 	beq.w	3bbe <usb_isr+0x276>
    3a20:	d806      	bhi.n	3a30 <usb_isr+0xe8>
    3a22:	2a80      	cmp	r2, #128	; 0x80
    3a24:	f000 80ba 	beq.w	3b9c <usb_isr+0x254>
    3a28:	2a82      	cmp	r2, #130	; 0x82
    3a2a:	f000 80bb 	beq.w	3ba4 <usb_isr+0x25c>
    3a2e:	e12d      	b.n	3c8c <usb_isr+0x344>
    3a30:	f240 3302 	movw	r3, #770	; 0x302
    3a34:	429a      	cmp	r2, r3
    3a36:	f000 80d1 	beq.w	3bdc <usb_isr+0x294>
    3a3a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3a3e:	e01c      	b.n	3a7a <usb_isr+0x132>
    3a40:	f242 0021 	movw	r0, #8225	; 0x2021
    3a44:	4282      	cmp	r2, r0
    3a46:	f000 814d 	beq.w	3ce4 <usb_isr+0x39c>
    3a4a:	d80e      	bhi.n	3a6a <usb_isr+0x122>
    3a4c:	f5b2 6f08 	cmp.w	r2, #2176	; 0x880
    3a50:	f000 809e 	beq.w	3b90 <usb_isr+0x248>
    3a54:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    3a58:	f040 8118 	bne.w	3c8c <usb_isr+0x344>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3a5c:	4b68      	ldr	r3, [pc, #416]	; (3c00 <usb_isr+0x2b8>)
    3a5e:	4e6c      	ldr	r6, [pc, #432]	; (3c10 <usb_isr+0x2c8>)
    3a60:	78aa      	ldrb	r2, [r5, #2]
    3a62:	701a      	strb	r2, [r3, #0]
    3a64:	f106 0980 	add.w	r9, r6, #128	; 0x80
    3a68:	e00a      	b.n	3a80 <usb_isr+0x138>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a6a:	f242 2121 	movw	r1, #8737	; 0x2221
    3a6e:	428a      	cmp	r2, r1
    3a70:	f000 8108 	beq.w	3c84 <usb_isr+0x33c>
    3a74:	f242 3321 	movw	r3, #8993	; 0x2321
    3a78:	429a      	cmp	r2, r3
    3a7a:	f000 810b 	beq.w	3c94 <usb_isr+0x34c>
    3a7e:	e105      	b.n	3c8c <usb_isr+0x344>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    3a80:	6a33      	ldr	r3, [r6, #32]
    3a82:	061b      	lsls	r3, r3, #24
    3a84:	d503      	bpl.n	3a8e <usb_isr+0x146>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3a86:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3a88:	3808      	subs	r0, #8
    3a8a:	f000 fadf 	bl	404c <usb_free>
    3a8e:	3608      	adds	r6, #8
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3a90:	454e      	cmp	r6, r9
    3a92:	d1f5      	bne.n	3a80 <usb_isr+0x138>
    3a94:	2600      	movs	r6, #0
    3a96:	46b1      	mov	r9, r6
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3a98:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 3c4c <usb_isr+0x304>
    3a9c:	f856 000a 	ldr.w	r0, [r6, sl]
			while (p) {
    3aa0:	b128      	cbz	r0, 3aae <usb_isr+0x166>
				n = p->next;
    3aa2:	f8d0 b004 	ldr.w	fp, [r0, #4]
				usb_free(p);
    3aa6:	f000 fad1 	bl	404c <usb_free>
				p = n;
    3aaa:	4658      	mov	r0, fp
    3aac:	e7f8      	b.n	3aa0 <usb_isr+0x158>
			}
			rx_first[i] = NULL;
    3aae:	f84a 0006 	str.w	r0, [sl, r6]
			rx_last[i] = NULL;
    3ab2:	4b5b      	ldr	r3, [pc, #364]	; (3c20 <usb_isr+0x2d8>)
			p = tx_first[i];
    3ab4:	f8df a198 	ldr.w	sl, [pc, #408]	; 3c50 <usb_isr+0x308>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3ab8:	50f0      	str	r0, [r6, r3]
			p = tx_first[i];
    3aba:	f856 000a 	ldr.w	r0, [r6, sl]
			while (p) {
    3abe:	b128      	cbz	r0, 3acc <usb_isr+0x184>
				n = p->next;
    3ac0:	f8d0 b004 	ldr.w	fp, [r0, #4]
				usb_free(p);
    3ac4:	f000 fac2 	bl	404c <usb_free>
				p = n;
    3ac8:	4658      	mov	r0, fp
    3aca:	e7f8      	b.n	3abe <usb_isr+0x176>
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3acc:	4b55      	ldr	r3, [pc, #340]	; (3c24 <usb_isr+0x2dc>)
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3ace:	f84a 0006 	str.w	r0, [sl, r6]
			tx_last[i] = NULL;
    3ad2:	50f0      	str	r0, [r6, r3]
			usb_rx_byte_count_data[i] = 0;
    3ad4:	4b54      	ldr	r3, [pc, #336]	; (3c28 <usb_isr+0x2e0>)
    3ad6:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
			switch (tx_state[i]) {
    3ada:	4b54      	ldr	r3, [pc, #336]	; (3c2c <usb_isr+0x2e4>)
    3adc:	f819 2003 	ldrb.w	r2, [r9, r3]
    3ae0:	3a02      	subs	r2, #2
    3ae2:	2a03      	cmp	r2, #3
    3ae4:	d808      	bhi.n	3af8 <usb_isr+0x1b0>
    3ae6:	e8df f002 	tbb	[pc, r2]
    3aea:	0402      	.short	0x0402
    3aec:	0402      	.short	0x0402
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3aee:	2200      	movs	r2, #0
    3af0:	e000      	b.n	3af4 <usb_isr+0x1ac>
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3af2:	2201      	movs	r2, #1
    3af4:	f803 2009 	strb.w	r2, [r3, r9]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3af8:	f109 0901 	add.w	r9, r9, #1
    3afc:	f1b9 0f04 	cmp.w	r9, #4
    3b00:	f106 0604 	add.w	r6, r6, #4
    3b04:	d1c8      	bne.n	3a98 <usb_isr+0x150>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3b06:	4b4a      	ldr	r3, [pc, #296]	; (3c30 <usb_isr+0x2e8>)
    3b08:	2200      	movs	r2, #0
    3b0a:	701a      	strb	r2, [r3, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3b0c:	2601      	movs	r6, #1
    3b0e:	469a      	mov	sl, r3
    3b10:	4a48      	ldr	r2, [pc, #288]	; (3c34 <usb_isr+0x2ec>)
    3b12:	4b49      	ldr	r3, [pc, #292]	; (3c38 <usb_isr+0x2f0>)
    3b14:	4432      	add	r2, r6
    3b16:	4433      	add	r3, r6
			epconf = *cfg++;
    3b18:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    3b1c:	009b      	lsls	r3, r3, #2
			*reg = epconf;
			reg += 4;
			if (epconf & USB_ENDPT_EPRXEN) {
    3b1e:	f012 0f08 	tst.w	r2, #8
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3b22:	701a      	strb	r2, [r3, #0]
    3b24:	ea4f 0986 	mov.w	r9, r6, lsl #2
			reg += 4;
			if (epconf & USB_ENDPT_EPRXEN) {
    3b28:	d025      	beq.n	3b76 <usb_isr+0x22e>
				usb_packet_t *p;
				p = usb_malloc();
    3b2a:	f000 fa71 	bl	4010 <usb_malloc>
				if (p) {
    3b2e:	b138      	cbz	r0, 3b40 <usb_isr+0x1f8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3b30:	eb04 1346 	add.w	r3, r4, r6, lsl #5
    3b34:	3008      	adds	r0, #8
    3b36:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b38:	4b40      	ldr	r3, [pc, #256]	; (3c3c <usb_isr+0x2f4>)
    3b3a:	f844 3039 	str.w	r3, [r4, r9, lsl #3]
    3b3e:	e006      	b.n	3b4e <usb_isr+0x206>
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3b40:	f89a 3000 	ldrb.w	r3, [sl]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3b44:	f844 0039 	str.w	r0, [r4, r9, lsl #3]
					usb_rx_memory_needed++;
    3b48:	3301      	adds	r3, #1
    3b4a:	f88a 3000 	strb.w	r3, [sl]
				}
				p = usb_malloc();
    3b4e:	f000 fa5f 	bl	4010 <usb_malloc>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3b52:	f049 0301 	orr.w	r3, r9, #1
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
    3b56:	b138      	cbz	r0, 3b68 <usb_isr+0x220>
					table[index(i, RX, ODD)].addr = p->buf;
    3b58:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3b5c:	3008      	adds	r0, #8
    3b5e:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b60:	4a2e      	ldr	r2, [pc, #184]	; (3c1c <usb_isr+0x2d4>)
    3b62:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
    3b66:	e006      	b.n	3b76 <usb_isr+0x22e>
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3b68:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
					usb_rx_memory_needed++;
    3b6c:	f89a 3000 	ldrb.w	r3, [sl]
    3b70:	3301      	adds	r3, #1
    3b72:	f88a 3000 	strb.w	r3, [sl]
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3b76:	f049 0202 	orr.w	r2, r9, #2
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3b7a:	3601      	adds	r6, #1
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
			table[index(i, TX, ODD)].desc = 0;
    3b7c:	f049 0903 	orr.w	r9, r9, #3
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3b80:	2300      	movs	r3, #0
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3b82:	2e05      	cmp	r6, #5
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3b84:	f844 3032 	str.w	r3, [r4, r2, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    3b88:	f844 3039 	str.w	r3, [r4, r9, lsl #3]
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3b8c:	d1c0      	bne.n	3b10 <usb_isr+0x1c8>
    3b8e:	e082      	b.n	3c96 <usb_isr+0x34e>
			table[index(i, TX, EVEN)].desc = 0;
			table[index(i, TX, ODD)].desc = 0;
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3b90:	4b1b      	ldr	r3, [pc, #108]	; (3c00 <usb_isr+0x2b8>)
    3b92:	4c2b      	ldr	r4, [pc, #172]	; (3c40 <usb_isr+0x2f8>)
    3b94:	781b      	ldrb	r3, [r3, #0]
    3b96:	7023      	strb	r3, [r4, #0]
		datalen = 1;
    3b98:	460b      	mov	r3, r1
    3b9a:	e07f      	b.n	3c9c <usb_isr+0x354>
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3b9c:	4c28      	ldr	r4, [pc, #160]	; (3c40 <usb_isr+0x2f8>)
    3b9e:	7023      	strb	r3, [r4, #0]
		reply_buffer[1] = 0;
    3ba0:	7063      	strb	r3, [r4, #1]
    3ba2:	e07a      	b.n	3c9a <usb_isr+0x352>
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		if (setup.wIndex > NUM_ENDPOINTS) {
    3ba4:	88aa      	ldrh	r2, [r5, #4]
    3ba6:	2a04      	cmp	r2, #4
    3ba8:	d870      	bhi.n	3c8c <usb_isr+0x344>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3baa:	4c25      	ldr	r4, [pc, #148]	; (3c40 <usb_isr+0x2f8>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    3bac:	0092      	lsls	r2, r2, #2
		if (setup.wIndex > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3bae:	7023      	strb	r3, [r4, #0]
		reply_buffer[1] = 0;
    3bb0:	7063      	strb	r3, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    3bb2:	4b24      	ldr	r3, [pc, #144]	; (3c44 <usb_isr+0x2fc>)
    3bb4:	5c9b      	ldrb	r3, [r3, r2]
    3bb6:	079e      	lsls	r6, r3, #30
    3bb8:	d56f      	bpl.n	3c9a <usb_isr+0x352>
    3bba:	7021      	strb	r1, [r4, #0]
    3bbc:	e06d      	b.n	3c9a <usb_isr+0x352>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    3bbe:	88aa      	ldrh	r2, [r5, #4]
    3bc0:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3bc4:	2b04      	cmp	r3, #4
    3bc6:	dc61      	bgt.n	3c8c <usb_isr+0x344>
    3bc8:	886b      	ldrh	r3, [r5, #2]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d15e      	bne.n	3c8c <usb_isr+0x344>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
    3bce:	0091      	lsls	r1, r2, #2
    3bd0:	4a1c      	ldr	r2, [pc, #112]	; (3c44 <usb_isr+0x2fc>)
    3bd2:	440a      	add	r2, r1
    3bd4:	7811      	ldrb	r1, [r2, #0]
    3bd6:	f021 0102 	bic.w	r1, r1, #2
    3bda:	e055      	b.n	3c88 <usb_isr+0x340>
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    3bdc:	88aa      	ldrh	r2, [r5, #4]
    3bde:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3be2:	2b04      	cmp	r3, #4
    3be4:	dc52      	bgt.n	3c8c <usb_isr+0x344>
    3be6:	886b      	ldrh	r3, [r5, #2]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d14f      	bne.n	3c8c <usb_isr+0x344>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) |= 0x02;
    3bec:	0091      	lsls	r1, r2, #2
    3bee:	4a15      	ldr	r2, [pc, #84]	; (3c44 <usb_isr+0x2fc>)
    3bf0:	440a      	add	r2, r1
    3bf2:	7811      	ldrb	r1, [r2, #0]
    3bf4:	f041 0102 	orr.w	r1, r1, #2
    3bf8:	e046      	b.n	3c88 <usb_isr+0x340>
    3bfa:	bf00      	nop
    3bfc:	40072080 	.word	0x40072080
    3c00:	1fff9403 	.word	0x1fff9403
    3c04:	1fff938d 	.word	0x1fff938d
    3c08:	1fff9418 	.word	0x1fff9418
    3c0c:	40072090 	.word	0x40072090
    3c10:	1fff8000 	.word	0x1fff8000
    3c14:	1fff93f0 	.word	0x1fff93f0
    3c18:	1fff9404 	.word	0x1fff9404
    3c1c:	004000c8 	.word	0x004000c8
    3c20:	1fff9328 	.word	0x1fff9328
    3c24:	1fff93e0 	.word	0x1fff93e0
    3c28:	1fff9c80 	.word	0x1fff9c80
    3c2c:	1fff9338 	.word	0x1fff9338
    3c30:	1fff93fa 	.word	0x1fff93fa
    3c34:	00012d12 	.word	0x00012d12
    3c38:	1001c830 	.word	0x1001c830
    3c3c:	00400088 	.word	0x00400088
    3c40:	1fff93fb 	.word	0x1fff93fb
    3c44:	400720c0 	.word	0x400720c0
    3c48:	1fff9324 	.word	0x1fff9324
    3c4c:	1fff937c 	.word	0x1fff937c
    3c50:	1fff93d0 	.word	0x1fff93d0
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3c54:	886a      	ldrh	r2, [r5, #2]
    3c56:	88a9      	ldrh	r1, [r5, #4]
    3c58:	4b9d      	ldr	r3, [pc, #628]	; (3ed0 <usb_isr+0x588>)
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3c5a:	f853 4c08 	ldr.w	r4, [r3, #-8]
    3c5e:	f1a3 000c 	sub.w	r0, r3, #12
    3c62:	b19c      	cbz	r4, 3c8c <usb_isr+0x344>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3c64:	f833 6c0c 	ldrh.w	r6, [r3, #-12]
    3c68:	4296      	cmp	r6, r2
    3c6a:	d109      	bne.n	3c80 <usb_isr+0x338>
    3c6c:	f833 6c0a 	ldrh.w	r6, [r3, #-10]
    3c70:	428e      	cmp	r6, r1
    3c72:	d105      	bne.n	3c80 <usb_isr+0x338>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3c74:	0a12      	lsrs	r2, r2, #8
    3c76:	2a03      	cmp	r2, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3c78:	bf0c      	ite	eq
    3c7a:	7823      	ldrbeq	r3, [r4, #0]
				} else {
					datalen = list->length;
    3c7c:	8903      	ldrhne	r3, [r0, #8]
    3c7e:	e00d      	b.n	3c9c <usb_isr+0x354>
    3c80:	330c      	adds	r3, #12
    3c82:	e7ea      	b.n	3c5a <usb_isr+0x312>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr = setup.wValue;
    3c84:	78a9      	ldrb	r1, [r5, #2]
    3c86:	4a93      	ldr	r2, [pc, #588]	; (3ed4 <usb_isr+0x58c>)
    3c88:	7011      	strb	r1, [r2, #0]
    3c8a:	e004      	b.n	3c96 <usb_isr+0x34e>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3c8c:	4b92      	ldr	r3, [pc, #584]	; (3ed8 <usb_isr+0x590>)
    3c8e:	220f      	movs	r2, #15
    3c90:	701a      	strb	r2, [r3, #0]
    3c92:	e027      	b.n	3ce4 <usb_isr+0x39c>
static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    3c94:	2300      	movs	r3, #0

static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
    3c96:	461c      	mov	r4, r3
    3c98:	e000      	b.n	3c9c <usb_isr+0x354>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3c9a:	2302      	movs	r3, #2
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3c9c:	88ee      	ldrh	r6, [r5, #6]
    3c9e:	42b3      	cmp	r3, r6
    3ca0:	bf38      	it	cc
    3ca2:	461e      	movcc	r6, r3
    3ca4:	2e40      	cmp	r6, #64	; 0x40
    3ca6:	bf34      	ite	cc
    3ca8:	4635      	movcc	r5, r6
    3caa:	2540      	movcs	r5, #64	; 0x40
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    3cac:	4620      	mov	r0, r4
    3cae:	4629      	mov	r1, r5
    3cb0:	f7ff fd80 	bl	37b4 <endpoint0_transmit>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3cb4:	1b76      	subs	r6, r6, r5

	if (datalen > setup.wLength) datalen = setup.wLength;
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3cb6:	442c      	add	r4, r5
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3cb8:	d103      	bne.n	3cc2 <usb_isr+0x37a>
    3cba:	2d40      	cmp	r5, #64	; 0x40
    3cbc:	d112      	bne.n	3ce4 <usb_isr+0x39c>
    3cbe:	4635      	mov	r5, r6
    3cc0:	e003      	b.n	3cca <usb_isr+0x382>
    3cc2:	2e40      	cmp	r6, #64	; 0x40
    3cc4:	bf34      	ite	cc
    3cc6:	4635      	movcc	r5, r6
    3cc8:	2540      	movcs	r5, #64	; 0x40

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    3cca:	4620      	mov	r0, r4
    3ccc:	4629      	mov	r1, r5
    3cce:	f7ff fd71 	bl	37b4 <endpoint0_transmit>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3cd2:	1b76      	subs	r6, r6, r5
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3cd4:	442c      	add	r4, r5
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3cd6:	d101      	bne.n	3cdc <usb_isr+0x394>
    3cd8:	2d40      	cmp	r5, #64	; 0x40
    3cda:	d103      	bne.n	3ce4 <usb_isr+0x39c>

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3cdc:	4a7f      	ldr	r2, [pc, #508]	; (3edc <usb_isr+0x594>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3cde:	f8c8 4000 	str.w	r4, [r8]
	ep0_tx_len = datalen;
    3ce2:	8016      	strh	r6, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3ce4:	2201      	movs	r2, #1
    3ce6:	4b7e      	ldr	r3, [pc, #504]	; (3ee0 <usb_isr+0x598>)
    3ce8:	e03d      	b.n	3d66 <usb_isr+0x41e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3cea:	4b7e      	ldr	r3, [pc, #504]	; (3ee4 <usb_isr+0x59c>)
    3cec:	881a      	ldrh	r2, [r3, #0]
    3cee:	f242 0321 	movw	r3, #8225	; 0x2021
    3cf2:	429a      	cmp	r2, r3
    3cf4:	d110      	bne.n	3d18 <usb_isr+0x3d0>
    3cf6:	2300      	movs	r3, #0
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3cf8:	4a7b      	ldr	r2, [pc, #492]	; (3ee8 <usb_isr+0x5a0>)
    3cfa:	5cc8      	ldrb	r0, [r1, r3]
    3cfc:	5498      	strb	r0, [r3, r2]
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
    3cfe:	3301      	adds	r3, #1
    3d00:	2b07      	cmp	r3, #7
    3d02:	d1f9      	bne.n	3cf8 <usb_isr+0x3b0>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3d04:	6813      	ldr	r3, [r2, #0]
    3d06:	2b86      	cmp	r3, #134	; 0x86
    3d08:	d102      	bne.n	3d10 <usb_isr+0x3c8>
    3d0a:	4b78      	ldr	r3, [pc, #480]	; (3eec <usb_isr+0x5a4>)
    3d0c:	220f      	movs	r2, #15
    3d0e:	701a      	strb	r2, [r3, #0]
			endpoint0_transmit(NULL, 0);
    3d10:	2000      	movs	r0, #0
    3d12:	4601      	mov	r1, r0
    3d14:	f7ff fd4e 	bl	37b4 <endpoint0_transmit>
			usb_reboot_timer = 5;
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3d18:	4b75      	ldr	r3, [pc, #468]	; (3ef0 <usb_isr+0x5a8>)
    3d1a:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
    3d1e:	e023      	b.n	3d68 <usb_isr+0x420>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3d20:	4e74      	ldr	r6, [pc, #464]	; (3ef4 <usb_isr+0x5ac>)
    3d22:	6835      	ldr	r5, [r6, #0]
		if (data) {
    3d24:	b1b5      	cbz	r5, 3d54 <usb_isr+0x40c>
			size = ep0_tx_len;
    3d26:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 3edc <usb_isr+0x594>
    3d2a:	f8b8 9000 	ldrh.w	r9, [r8]
    3d2e:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
    3d32:	bf34      	ite	cc
    3d34:	464c      	movcc	r4, r9
    3d36:	2440      	movcs	r4, #64	; 0x40
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
    3d38:	4628      	mov	r0, r5
    3d3a:	4621      	mov	r1, r4
    3d3c:	f7ff fd3a 	bl	37b4 <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    3d40:	ebc4 0309 	rsb	r3, r4, r9
    3d44:	b29b      	uxth	r3, r3
    3d46:	f8a8 3000 	strh.w	r3, [r8]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3d4a:	b90b      	cbnz	r3, 3d50 <usb_isr+0x408>
    3d4c:	2c40      	cmp	r4, #64	; 0x40
    3d4e:	d100      	bne.n	3d52 <usb_isr+0x40a>
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3d50:	192b      	adds	r3, r5, r4
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3d52:	6033      	str	r3, [r6, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3d54:	4b63      	ldr	r3, [pc, #396]	; (3ee4 <usb_isr+0x59c>)
    3d56:	881a      	ldrh	r2, [r3, #0]
    3d58:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3d5c:	d104      	bne.n	3d68 <usb_isr+0x420>
			setup.bRequest = 0;
    3d5e:	2200      	movs	r2, #0
    3d60:	705a      	strb	r2, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3d62:	789a      	ldrb	r2, [r3, #2]
    3d64:	4b64      	ldr	r3, [pc, #400]	; (3ef8 <usb_isr+0x5b0>)
    3d66:	701a      	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3d68:	2201      	movs	r2, #1
    3d6a:	4b5d      	ldr	r3, [pc, #372]	; (3ee0 <usb_isr+0x598>)
    3d6c:	e06c      	b.n	3e48 <usb_isr+0x500>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3d6e:	eb04 06c8 	add.w	r6, r4, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3d72:	3d01      	subs	r5, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3d74:	6873      	ldr	r3, [r6, #4]
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays

			if (stat & 0x08) { // transmit
    3d76:	f002 0208 	and.w	r2, r2, #8
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3d7a:	f1a3 0008 	sub.w	r0, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3d7e:	b2ed      	uxtb	r5, r5

			if (stat & 0x08) { // transmit
    3d80:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    3d84:	2a00      	cmp	r2, #0
    3d86:	d036      	beq.n	3df6 <usb_isr+0x4ae>
				usb_free(packet);
    3d88:	f000 f960 	bl	404c <usb_free>
				packet = tx_first[endpoint];
    3d8c:	485b      	ldr	r0, [pc, #364]	; (3efc <usb_isr+0x5b4>)
    3d8e:	4b5c      	ldr	r3, [pc, #368]	; (3f00 <usb_isr+0x5b8>)
    3d90:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
				if (packet) {
    3d94:	b1ea      	cbz	r2, 3dd2 <usb_isr+0x48a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3d96:	6851      	ldr	r1, [r2, #4]
    3d98:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
					b->addr = packet->buf;
    3d9c:	f102 0108 	add.w	r1, r2, #8
    3da0:	6071      	str	r1, [r6, #4]
					switch (tx_state[endpoint]) {
    3da2:	5d59      	ldrb	r1, [r3, r5]
    3da4:	2903      	cmp	r1, #3
    3da6:	d80b      	bhi.n	3dc0 <usb_isr+0x478>
    3da8:	e8df f001 	tbb	[pc, r1]
    3dac:	08060402 	.word	0x08060402
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3db0:	2103      	movs	r1, #3
    3db2:	e004      	b.n	3dbe <usb_isr+0x476>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    3db4:	2102      	movs	r1, #2
    3db6:	e002      	b.n	3dbe <usb_isr+0x476>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3db8:	2105      	movs	r1, #5
    3dba:	e000      	b.n	3dbe <usb_isr+0x476>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3dbc:	2104      	movs	r1, #4
    3dbe:	5559      	strb	r1, [r3, r5]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3dc0:	f016 0f08 	tst.w	r6, #8
    3dc4:	8812      	ldrh	r2, [r2, #0]
    3dc6:	bf0c      	ite	eq
    3dc8:	2388      	moveq	r3, #136	; 0x88
    3dca:	23c8      	movne	r3, #200	; 0xc8
    3dcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3dd0:	e042      	b.n	3e58 <usb_isr+0x510>
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3dd2:	5d5a      	ldrb	r2, [r3, r5]
    3dd4:	2a03      	cmp	r2, #3
    3dd6:	d807      	bhi.n	3de8 <usb_isr+0x4a0>
    3dd8:	e8df f002 	tbb	[pc, r2]
    3ddc:	04024040 	.word	0x04024040
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3de0:	2200      	movs	r2, #0
    3de2:	e006      	b.n	3df2 <usb_isr+0x4aa>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3de4:	2201      	movs	r2, #1
    3de6:	e004      	b.n	3df2 <usb_isr+0x4aa>
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3de8:	f016 0f08 	tst.w	r6, #8
    3dec:	bf0c      	ite	eq
    3dee:	2202      	moveq	r2, #2
    3df0:	2203      	movne	r2, #3
    3df2:	555a      	strb	r2, [r3, r5]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3df4:	e032      	b.n	3e5c <usb_isr+0x514>
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    3df6:	f854 2038 	ldr.w	r2, [r4, r8, lsl #3]
    3dfa:	0c12      	lsrs	r2, r2, #16
    3dfc:	f823 2c08 	strh.w	r2, [r3, #-8]
				if (packet->len > 0) {
    3e00:	b322      	cbz	r2, 3e4c <usb_isr+0x504>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3e02:	f8df e12c 	ldr.w	lr, [pc, #300]	; 3f30 <usb_isr+0x5e8>
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3e06:	f823 1c06 	strh.w	r1, [r3, #-6]
					packet->next = NULL;
    3e0a:	f843 1c04 	str.w	r1, [r3, #-4]
					if (rx_first[endpoint] == NULL) {
    3e0e:	f85e 3025 	ldr.w	r3, [lr, r5, lsl #2]
    3e12:	493c      	ldr	r1, [pc, #240]	; (3f04 <usb_isr+0x5bc>)
    3e14:	b913      	cbnz	r3, 3e1c <usb_isr+0x4d4>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3e16:	f84e 0025 	str.w	r0, [lr, r5, lsl #2]
    3e1a:	e002      	b.n	3e22 <usb_isr+0x4da>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3e1c:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    3e20:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    3e22:	4b39      	ldr	r3, [pc, #228]	; (3f08 <usb_isr+0x5c0>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3e24:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3e28:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
    3e2c:	440a      	add	r2, r1
    3e2e:	f823 2015 	strh.w	r2, [r3, r5, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated packets
					// so a flood of incoming data on 1 endpoint doesn't starve
					// the others if the user isn't reading it regularly
					packet = usb_malloc();
    3e32:	f000 f8ed 	bl	4010 <usb_malloc>
					if (packet) {
    3e36:	b110      	cbz	r0, 3e3e <usb_isr+0x4f6>
						b->addr = packet->buf;
    3e38:	3008      	adds	r0, #8
    3e3a:	6070      	str	r0, [r6, #4]
    3e3c:	e006      	b.n	3e4c <usb_isr+0x504>
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
						usb_rx_memory_needed++;
    3e3e:	4b33      	ldr	r3, [pc, #204]	; (3f0c <usb_isr+0x5c4>)
						b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
    3e40:	f844 0038 	str.w	r0, [r4, r8, lsl #3]
						usb_rx_memory_needed++;
    3e44:	781a      	ldrb	r2, [r3, #0]
    3e46:	3201      	adds	r2, #1
    3e48:	701a      	strb	r2, [r3, #0]
    3e4a:	e007      	b.n	3e5c <usb_isr+0x514>
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3e4c:	4b28      	ldr	r3, [pc, #160]	; (3ef0 <usb_isr+0x5a8>)
    3e4e:	4a30      	ldr	r2, [pc, #192]	; (3f10 <usb_isr+0x5c8>)
    3e50:	f016 0f08 	tst.w	r6, #8
    3e54:	bf08      	it	eq
    3e56:	4613      	moveq	r3, r2
    3e58:	f844 3038 	str.w	r3, [r4, r8, lsl #3]




		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3e5c:	2308      	movs	r3, #8
    3e5e:	703b      	strb	r3, [r7, #0]
		goto restart;
    3e60:	e574      	b.n	394c <usb_isr+0x4>
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3e62:	07e0      	lsls	r0, r4, #31
    3e64:	d51f      	bpl.n	3ea6 <usb_isr+0x55e>
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3e66:	491e      	ldr	r1, [pc, #120]	; (3ee0 <usb_isr+0x598>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3e68:	4829      	ldr	r0, [pc, #164]	; (3f10 <usb_isr+0x5c8>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3e6a:	4c2a      	ldr	r4, [pc, #168]	; (3f14 <usb_isr+0x5cc>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3e6c:	2302      	movs	r3, #2
    3e6e:	700b      	strb	r3, [r1, #0]
		ep0_tx_bdt_bank = 0;
    3e70:	4b29      	ldr	r3, [pc, #164]	; (3f18 <usb_isr+0x5d0>)
    3e72:	701a      	strb	r2, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3e74:	4b29      	ldr	r3, [pc, #164]	; (3f1c <usb_isr+0x5d4>)
    3e76:	6018      	str	r0, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3e78:	6098      	str	r0, [r3, #8]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3e7a:	4829      	ldr	r0, [pc, #164]	; (3f20 <usb_isr+0x5d8>)
    3e7c:	60d8      	str	r0, [r3, #12]
		table[index(0, TX, EVEN)].desc = 0;
    3e7e:	611a      	str	r2, [r3, #16]
		table[index(0, TX, ODD)].desc = 0;
    3e80:	619a      	str	r2, [r3, #24]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3e82:	605c      	str	r4, [r3, #4]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3e84:	4b14      	ldr	r3, [pc, #80]	; (3ed8 <usb_isr+0x590>)
    3e86:	200d      	movs	r0, #13
    3e88:	7018      	strb	r0, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3e8a:	4826      	ldr	r0, [pc, #152]	; (3f24 <usb_isr+0x5dc>)
    3e8c:	23ff      	movs	r3, #255	; 0xff
    3e8e:	7003      	strb	r3, [r0, #0]
		USB0_ISTAT = 0xFF;
    3e90:	702b      	strb	r3, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3e92:	7402      	strb	r2, [r0, #16]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3e94:	4a24      	ldr	r2, [pc, #144]	; (3f28 <usb_isr+0x5e0>)
    3e96:	7013      	strb	r3, [r2, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3e98:	4b24      	ldr	r3, [pc, #144]	; (3f2c <usb_isr+0x5e4>)
    3e9a:	229f      	movs	r2, #159	; 0x9f
    3e9c:	701a      	strb	r2, [r3, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3e9e:	2301      	movs	r3, #1
    3ea0:	700b      	strb	r3, [r1, #0]
		return;
    3ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3ea6:	0621      	lsls	r1, r4, #24
    3ea8:	d504      	bpl.n	3eb4 <usb_isr+0x56c>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3eaa:	4b0b      	ldr	r3, [pc, #44]	; (3ed8 <usb_isr+0x590>)
    3eac:	220d      	movs	r2, #13
    3eae:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3eb0:	2380      	movs	r3, #128	; 0x80
    3eb2:	702b      	strb	r3, [r5, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3eb4:	07a2      	lsls	r2, r4, #30
    3eb6:	d505      	bpl.n	3ec4 <usb_isr+0x57c>
		uint8_t err = USB0_ERRSTAT;
    3eb8:	4b1a      	ldr	r3, [pc, #104]	; (3f24 <usb_isr+0x5dc>)
    3eba:	781a      	ldrb	r2, [r3, #0]
    3ebc:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    3ebe:	701a      	strb	r2, [r3, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3ec0:	2302      	movs	r3, #2
    3ec2:	702b      	strb	r3, [r5, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3ec4:	06e3      	lsls	r3, r4, #27
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    3ec6:	bf44      	itt	mi
    3ec8:	2310      	movmi	r3, #16
    3eca:	702b      	strbmi	r3, [r5, #0]
    3ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ed0:	00012d24 	.word	0x00012d24
    3ed4:	1fff9428 	.word	0x1fff9428
    3ed8:	400720c0 	.word	0x400720c0
    3edc:	1fff93f8 	.word	0x1fff93f8
    3ee0:	40072094 	.word	0x40072094
    3ee4:	1fff93f0 	.word	0x1fff93f0
    3ee8:	1fff9c88 	.word	0x1fff9c88
    3eec:	1fff938d 	.word	0x1fff938d
    3ef0:	004000c8 	.word	0x004000c8
    3ef4:	1fff9324 	.word	0x1fff9324
    3ef8:	40072098 	.word	0x40072098
    3efc:	1fff93d0 	.word	0x1fff93d0
    3f00:	1fff9338 	.word	0x1fff9338
    3f04:	1fff9328 	.word	0x1fff9328
    3f08:	1fff9c80 	.word	0x1fff9c80
    3f0c:	1fff93fa 	.word	0x1fff93fa
    3f10:	00400088 	.word	0x00400088
    3f14:	1fff933c 	.word	0x1fff933c
    3f18:	1fff938c 	.word	0x1fff938c
    3f1c:	1fff8000 	.word	0x1fff8000
    3f20:	1fff9390 	.word	0x1fff9390
    3f24:	40072088 	.word	0x40072088
    3f28:	4007208c 	.word	0x4007208c
    3f2c:	40072084 	.word	0x40072084
    3f30:	1fff937c 	.word	0x1fff937c

00003f34 <usb_init>:
}



void usb_init(void)
{
    3f34:	b508      	push	{r3, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3f36:	f7ff fc05 	bl	3744 <usb_init_serialnumber>
    3f3a:	2300      	movs	r3, #0

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3f3c:	4a1f      	ldr	r2, [pc, #124]	; (3fbc <usb_init+0x88>)
    3f3e:	2100      	movs	r1, #0
    3f40:	5099      	str	r1, [r3, r2]
    3f42:	18d0      	adds	r0, r2, r3
    3f44:	3308      	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3f46:	2b88      	cmp	r3, #136	; 0x88
		table[i].desc = 0;
		table[i].addr = 0;
    3f48:	6041      	str	r1, [r0, #4]
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3f4a:	d1f7      	bne.n	3f3c <usb_init+0x8>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3f4c:	4b1c      	ldr	r3, [pc, #112]	; (3fc0 <usb_init+0x8c>)
    3f4e:	6819      	ldr	r1, [r3, #0]
    3f50:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    3f54:	6019      	str	r1, [r3, #0]

	// reset USB module
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
    3f56:	f503 3328 	add.w	r3, r3, #172032	; 0x2a000
    3f5a:	33d8      	adds	r3, #216	; 0xd8
    3f5c:	2180      	movs	r1, #128	; 0x80
    3f5e:	7019      	strb	r1, [r3, #0]
	while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end
    3f60:	7818      	ldrb	r0, [r3, #0]
    3f62:	4918      	ldr	r1, [pc, #96]	; (3fc4 <usb_init+0x90>)
    3f64:	0600      	lsls	r0, r0, #24
    3f66:	d4fb      	bmi.n	3f60 <usb_init+0x2c>

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3f68:	4b17      	ldr	r3, [pc, #92]	; (3fc8 <usb_init+0x94>)
    3f6a:	f3c2 2007 	ubfx	r0, r2, #8, #8
    3f6e:	7018      	strb	r0, [r3, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3f70:	f3c2 4007 	ubfx	r0, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3f74:	0e12      	lsrs	r2, r2, #24
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
	while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3f76:	7518      	strb	r0, [r3, #20]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3f78:	761a      	strb	r2, [r3, #24]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3f7a:	4a14      	ldr	r2, [pc, #80]	; (3fcc <usb_init+0x98>)
    3f7c:	23ff      	movs	r3, #255	; 0xff
    3f7e:	7013      	strb	r3, [r2, #0]
	USB0_ERRSTAT = 0xFF;
    3f80:	7213      	strb	r3, [r2, #8]
	USB0_OTGISTAT = 0xFF;
    3f82:	f802 3c70 	strb.w	r3, [r2, #-112]

	USB0_USBTRC0 |= 0x40; // undocumented bit
    3f86:	780b      	ldrb	r3, [r1, #0]
    3f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3f8c:	700b      	strb	r3, [r1, #0]

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3f8e:	2301      	movs	r3, #1
	USB0_USBCTRL = 0;
    3f90:	2100      	movs	r1, #0
	USB0_OTGISTAT = 0xFF;

	USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3f92:	7513      	strb	r3, [r2, #20]
	USB0_USBCTRL = 0;
    3f94:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3f98:	7113      	strb	r3, [r2, #4]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3f9a:	4b0d      	ldr	r3, [pc, #52]	; (3fd0 <usb_init+0x9c>)
    3f9c:	2270      	movs	r2, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3f9e:	f46f 7150 	mvn.w	r1, #832	; 0x340

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3fa2:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3fa4:	440b      	add	r3, r1
    3fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
    3faa:	601a      	str	r2, [r3, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3fac:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
    3fb0:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
    3fb4:	2210      	movs	r2, #16
    3fb6:	701a      	strb	r2, [r3, #0]
    3fb8:	bd08      	pop	{r3, pc}
    3fba:	bf00      	nop
    3fbc:	1fff8000 	.word	0x1fff8000
    3fc0:	40048034 	.word	0x40048034
    3fc4:	4007210c 	.word	0x4007210c
    3fc8:	4007209c 	.word	0x4007209c
    3fcc:	40072080 	.word	0x40072080
    3fd0:	e000e449 	.word	0xe000e449

00003fd4 <_ZN16usb_serial_class9availableEv>:
class usb_serial_class : public Stream
{
public:
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3fd4:	f000 b89e 	b.w	4114 <usb_serial_available>

00003fd8 <_ZN16usb_serial_class4readEv>:
        virtual int read() { return usb_serial_getchar(); }
    3fd8:	f000 b85a 	b.w	4090 <usb_serial_getchar>

00003fdc <_ZN16usb_serial_class4peekEv>:
        virtual int peek() { return usb_serial_peekchar(); }
    3fdc:	f000 b87e 	b.w	40dc <usb_serial_peekchar>

00003fe0 <_ZN16usb_serial_class5flushEv>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3fe0:	f000 b91a 	b.w	4218 <usb_serial_flush_output>

00003fe4 <_ZN16usb_serial_class5writeEh>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3fe4:	4608      	mov	r0, r1
    3fe6:	f000 b90b 	b.w	4200 <usb_serial_putchar>

00003fea <_ZN16usb_serial_class5writeEPKhj>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3fea:	4608      	mov	r0, r1
    3fec:	4611      	mov	r1, r2
    3fee:	f000 b89f 	b.w	4130 <usb_serial_write>
    3ff2:	ffff 4b04 	vtbl.8	d20, {d15-d18}, d4

00003ff4 <_GLOBAL__sub_I_Serial>:
class __FlashStringHelper;

class Print
{
  public:
	Print() : write_error(0) {}
    3ff4:	4b04      	ldr	r3, [pc, #16]	; (4008 <_GLOBAL__sub_I_Serial+0x14>)
    3ff6:	2200      	movs	r2, #0
    3ff8:	711a      	strb	r2, [r3, #4]
    3ffa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3ffe:	731a      	strb	r2, [r3, #12]
#define USB_SERIAL_RTS  0x02

// C++ interface
#ifdef __cplusplus
#include "Stream.h"
class usb_serial_class : public Stream
    4000:	4a02      	ldr	r2, [pc, #8]	; (400c <_GLOBAL__sub_I_Serial+0x18>)
    4002:	6099      	str	r1, [r3, #8]
    4004:	601a      	str	r2, [r3, #0]
    4006:	4770      	bx	lr
    4008:	1fff9408 	.word	0x1fff9408
    400c:	00012d78 	.word	0x00012d78

00004010 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    4010:	b672      	cpsid	i
	avail = usb_buffer_available;
    4012:	4a0c      	ldr	r2, [pc, #48]	; (4044 <usb_malloc+0x34>)
    4014:	6811      	ldr	r1, [r2, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    4016:	fab1 f381 	clz	r3, r1
	if (n >= NUM_USB_BUFFERS) {
    401a:	2b0b      	cmp	r3, #11
    401c:	d902      	bls.n	4024 <usb_malloc+0x14>
		__enable_irq();
    401e:	b662      	cpsie	i
		return NULL;
    4020:	2000      	movs	r0, #0
    4022:	4770      	bx	lr
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    4024:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    4028:	40d8      	lsrs	r0, r3
    402a:	ea21 0100 	bic.w	r1, r1, r0
    402e:	6011      	str	r1, [r2, #0]
	__enable_irq();
    4030:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    4032:	4905      	ldr	r1, [pc, #20]	; (4048 <usb_malloc+0x38>)
    4034:	2248      	movs	r2, #72	; 0x48
    4036:	4353      	muls	r3, r2
    4038:	18c8      	adds	r0, r1, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    403a:	2200      	movs	r2, #0
    403c:	50ca      	str	r2, [r1, r3]
	*(uint32_t *)(p + 4) = 0;
    403e:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    4040:	4770      	bx	lr
    4042:	bf00      	nop
    4044:	1fff84bc 	.word	0x1fff84bc
    4048:	1fff80a0 	.word	0x1fff80a0

0000404c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    404c:	4b0c      	ldr	r3, [pc, #48]	; (4080 <usb_free+0x34>)
    404e:	2248      	movs	r2, #72	; 0x48
    4050:	1ac3      	subs	r3, r0, r3
    4052:	fbb3 f3f2 	udiv	r3, r3, r2
	if (n >= NUM_USB_BUFFERS) return;
    4056:	2b0b      	cmp	r3, #11
    4058:	d811      	bhi.n	407e <usb_free+0x32>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    405a:	4a0a      	ldr	r2, [pc, #40]	; (4084 <usb_free+0x38>)
    405c:	7812      	ldrb	r2, [r2, #0]
    405e:	b122      	cbz	r2, 406a <usb_free+0x1e>
    4060:	4a09      	ldr	r2, [pc, #36]	; (4088 <usb_free+0x3c>)
    4062:	7812      	ldrb	r2, [r2, #0]
    4064:	b10a      	cbz	r2, 406a <usb_free+0x1e>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    4066:	f7ff bbf3 	b.w	3850 <usb_rx_memory>
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    406a:	b672      	cpsid	i
	usb_buffer_available |= mask;
    406c:	4a07      	ldr	r2, [pc, #28]	; (408c <usb_free+0x40>)
		//serial_print("\n");
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
    406e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    4072:	fa21 f303 	lsr.w	r3, r1, r3
	__disable_irq();
	usb_buffer_available |= mask;
    4076:	6811      	ldr	r1, [r2, #0]
    4078:	4319      	orrs	r1, r3
    407a:	6011      	str	r1, [r2, #0]
	__enable_irq();
    407c:	b662      	cpsie	i
    407e:	4770      	bx	lr
    4080:	1fff80a0 	.word	0x1fff80a0
    4084:	1fff93fa 	.word	0x1fff93fa
    4088:	1fff9403 	.word	0x1fff9403
    408c:	1fff84bc 	.word	0x1fff84bc

00004090 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    4090:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    4092:	4c10      	ldr	r4, [pc, #64]	; (40d4 <usb_serial_getchar+0x44>)
    4094:	6823      	ldr	r3, [r4, #0]
    4096:	b16b      	cbz	r3, 40b4 <usb_serial_getchar+0x24>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    4098:	6820      	ldr	r0, [r4, #0]
    409a:	8842      	ldrh	r2, [r0, #2]
	c = rx_packet->buf[i++];
    409c:	1c53      	adds	r3, r2, #1
    409e:	4402      	add	r2, r0
    40a0:	7a14      	ldrb	r4, [r2, #8]
	if (i >= rx_packet->len) {
    40a2:	8802      	ldrh	r2, [r0, #0]
    40a4:	4293      	cmp	r3, r2
    40a6:	d312      	bcc.n	40ce <usb_serial_getchar+0x3e>
		usb_free(rx_packet);
    40a8:	f7ff ffd0 	bl	404c <usb_free>
		rx_packet = NULL;
    40ac:	4b09      	ldr	r3, [pc, #36]	; (40d4 <usb_serial_getchar+0x44>)
    40ae:	2200      	movs	r2, #0
    40b0:	601a      	str	r2, [r3, #0]
    40b2:	e00d      	b.n	40d0 <usb_serial_getchar+0x40>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    40b4:	4b08      	ldr	r3, [pc, #32]	; (40d8 <usb_serial_getchar+0x48>)
    40b6:	781b      	ldrb	r3, [r3, #0]
    40b8:	b913      	cbnz	r3, 40c0 <usb_serial_getchar+0x30>
    40ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    40be:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    40c0:	2003      	movs	r0, #3
    40c2:	f7ff fb97 	bl	37f4 <usb_rx>
    40c6:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    40c8:	2800      	cmp	r0, #0
    40ca:	d1e5      	bne.n	4098 <usb_serial_getchar+0x8>
    40cc:	e7f5      	b.n	40ba <usb_serial_getchar+0x2a>
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    40ce:	8043      	strh	r3, [r0, #2]
	}
	return c;
    40d0:	4620      	mov	r0, r4
}
    40d2:	bd10      	pop	{r4, pc}
    40d4:	1fff9424 	.word	0x1fff9424
    40d8:	1fff9403 	.word	0x1fff9403

000040dc <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    40dc:	b510      	push	{r4, lr}
	if (!rx_packet) {
    40de:	4c0b      	ldr	r4, [pc, #44]	; (410c <usb_serial_peekchar+0x30>)
    40e0:	6823      	ldr	r3, [r4, #0]
    40e2:	b113      	cbz	r3, 40ea <usb_serial_peekchar+0xe>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
    40e4:	6823      	ldr	r3, [r4, #0]
    40e6:	b96b      	cbnz	r3, 4104 <usb_serial_peekchar+0x28>
    40e8:	e002      	b.n	40f0 <usb_serial_peekchar+0x14>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    40ea:	4b09      	ldr	r3, [pc, #36]	; (4110 <usb_serial_peekchar+0x34>)
    40ec:	781b      	ldrb	r3, [r3, #0]
    40ee:	b913      	cbnz	r3, 40f6 <usb_serial_peekchar+0x1a>
    40f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    40f4:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    40f6:	2003      	movs	r0, #3
    40f8:	f7ff fb7c 	bl	37f4 <usb_rx>
    40fc:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    40fe:	2800      	cmp	r0, #0
    4100:	d1f0      	bne.n	40e4 <usb_serial_peekchar+0x8>
    4102:	e7f5      	b.n	40f0 <usb_serial_peekchar+0x14>
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    4104:	885a      	ldrh	r2, [r3, #2]
    4106:	4413      	add	r3, r2
    4108:	7a18      	ldrb	r0, [r3, #8]
}
    410a:	bd10      	pop	{r4, pc}
    410c:	1fff9424 	.word	0x1fff9424
    4110:	1fff9403 	.word	0x1fff9403

00004114 <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    4114:	4b04      	ldr	r3, [pc, #16]	; (4128 <usb_serial_available+0x14>)

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    4116:	8898      	ldrh	r0, [r3, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    4118:	4b04      	ldr	r3, [pc, #16]	; (412c <usb_serial_available+0x18>)
    411a:	681b      	ldr	r3, [r3, #0]
    411c:	b11b      	cbz	r3, 4126 <usb_serial_available+0x12>
    411e:	881a      	ldrh	r2, [r3, #0]
    4120:	885b      	ldrh	r3, [r3, #2]
    4122:	1ad3      	subs	r3, r2, r3
    4124:	4418      	add	r0, r3
	return count;
}
    4126:	4770      	bx	lr
    4128:	1fff9c80 	.word	0x1fff9c80
    412c:	1fff9424 	.word	0x1fff9424

00004130 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    4130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    4134:	4e2d      	ldr	r6, [pc, #180]	; (41ec <usb_serial_write+0xbc>)
    4136:	2301      	movs	r3, #1
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    4138:	4607      	mov	r7, r0
    413a:	460c      	mov	r4, r1
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    413c:	7033      	strb	r3, [r6, #0]
	while (size > 0) {
    413e:	2c00      	cmp	r4, #0
    4140:	d04f      	beq.n	41e2 <usb_serial_write+0xb2>
		if (!tx_packet) {
    4142:	4d2b      	ldr	r5, [pc, #172]	; (41f0 <usb_serial_write+0xc0>)
    4144:	682b      	ldr	r3, [r5, #0]
    4146:	46a9      	mov	r9, r5
    4148:	bb2b      	cbnz	r3, 4196 <usb_serial_write+0x66>
    414a:	f648 4801 	movw	r8, #35841	; 0x8c01
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    414e:	4b29      	ldr	r3, [pc, #164]	; (41f4 <usb_serial_write+0xc4>)
    4150:	781b      	ldrb	r3, [r3, #0]
    4152:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4156:	b90b      	cbnz	r3, 415c <usb_serial_write+0x2c>
					tx_noautoflush = 0;
    4158:	7032      	strb	r2, [r6, #0]
    415a:	e015      	b.n	4188 <usb_serial_write+0x58>
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    415c:	2004      	movs	r0, #4
    415e:	f7ff fb65 	bl	382c <usb_tx_packet_count>
    4162:	2807      	cmp	r0, #7
    4164:	d808      	bhi.n	4178 <usb_serial_write+0x48>
					tx_noautoflush = 1;
    4166:	2301      	movs	r3, #1
    4168:	7033      	strb	r3, [r6, #0]
					tx_packet = usb_malloc();
    416a:	f7ff ff51 	bl	4010 <usb_malloc>
    416e:	f8c9 0000 	str.w	r0, [r9]
					if (tx_packet) break;
    4172:	b980      	cbnz	r0, 4196 <usb_serial_write+0x66>
					tx_noautoflush = 0;
    4174:	4b1d      	ldr	r3, [pc, #116]	; (41ec <usb_serial_write+0xbc>)
    4176:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    4178:	f1b8 0801 	subs.w	r8, r8, #1
    417c:	4b1e      	ldr	r3, [pc, #120]	; (41f8 <usb_serial_write+0xc8>)
    417e:	d001      	beq.n	4184 <usb_serial_write+0x54>
    4180:	781a      	ldrb	r2, [r3, #0]
    4182:	b12a      	cbz	r2, 4190 <usb_serial_write+0x60>
					transmit_previous_timeout = 1;
    4184:	2201      	movs	r2, #1
    4186:	701a      	strb	r2, [r3, #0]
					return -1;
    4188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    418c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				yield();
    4190:	f000 f8c6 	bl	4320 <yield>
			}
    4194:	e7db      	b.n	414e <usb_serial_write+0x1e>
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    4196:	6829      	ldr	r1, [r5, #0]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    4198:	4a17      	ldr	r2, [pc, #92]	; (41f8 <usb_serial_write+0xc8>)
		len = CDC_TX_SIZE - tx_packet->index;
    419a:	8848      	ldrh	r0, [r1, #2]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    419c:	2300      	movs	r3, #0
    419e:	7013      	strb	r3, [r2, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    41a0:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    41a4:	4294      	cmp	r4, r2
    41a6:	bf38      	it	cc
    41a8:	4622      	movcc	r2, r4
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    41aa:	f100 0c08 	add.w	ip, r0, #8
		tx_packet->index += len;
    41ae:	4410      	add	r0, r2
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    41b0:	448c      	add	ip, r1
		tx_packet->index += len;
    41b2:	8048      	strh	r0, [r1, #2]
		size -= len;
    41b4:	1aa4      	subs	r4, r4, r2
		while (len-- > 0) *dest++ = *src++;
    41b6:	4293      	cmp	r3, r2
    41b8:	d004      	beq.n	41c4 <usb_serial_write+0x94>
    41ba:	5cf8      	ldrb	r0, [r7, r3]
    41bc:	f80c 0003 	strb.w	r0, [ip, r3]
    41c0:	3301      	adds	r3, #1
    41c2:	e7f8      	b.n	41b6 <usb_serial_write+0x86>
    41c4:	441f      	add	r7, r3
		if (tx_packet->index >= CDC_TX_SIZE) {
    41c6:	884b      	ldrh	r3, [r1, #2]
    41c8:	2b3f      	cmp	r3, #63	; 0x3f
    41ca:	d906      	bls.n	41da <usb_serial_write+0xaa>
			tx_packet->len = CDC_TX_SIZE;
    41cc:	2340      	movs	r3, #64	; 0x40
    41ce:	800b      	strh	r3, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    41d0:	2004      	movs	r0, #4
    41d2:	f7ff fb79 	bl	38c8 <usb_tx>
			tx_packet = NULL;
    41d6:	2300      	movs	r3, #0
    41d8:	602b      	str	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    41da:	4b08      	ldr	r3, [pc, #32]	; (41fc <usb_serial_write+0xcc>)
    41dc:	2205      	movs	r2, #5
    41de:	701a      	strb	r2, [r3, #0]
    41e0:	e7ad      	b.n	413e <usb_serial_write+0xe>
	}
	tx_noautoflush = 0;
    41e2:	7034      	strb	r4, [r6, #0]
	return 0;
    41e4:	4620      	mov	r0, r4
}
    41e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41ea:	bf00      	nop
    41ec:	1fff9419 	.word	0x1fff9419
    41f0:	1fff941c 	.word	0x1fff941c
    41f4:	1fff9403 	.word	0x1fff9403
    41f8:	1fff9420 	.word	0x1fff9420
    41fc:	1fff9418 	.word	0x1fff9418

00004200 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4200:	b507      	push	{r0, r1, r2, lr}
    4202:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    4204:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4206:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    420a:	4618      	mov	r0, r3
    420c:	f7ff ff90 	bl	4130 <usb_serial_write>
}
    4210:	b003      	add	sp, #12
    4212:	f85d fb04 	ldr.w	pc, [sp], #4
    4216:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00004218 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return 0;
}

void usb_serial_flush_output(void)
{
    4218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!usb_configuration) return;
    421c:	4b11      	ldr	r3, [pc, #68]	; (4264 <usb_serial_flush_output+0x4c>)
    421e:	781b      	ldrb	r3, [r3, #0]
    4220:	b1f3      	cbz	r3, 4260 <usb_serial_flush_output+0x48>
	tx_noautoflush = 1;
	if (tx_packet) {
    4222:	4e11      	ldr	r6, [pc, #68]	; (4268 <usb_serial_flush_output+0x50>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    4224:	4b11      	ldr	r3, [pc, #68]	; (426c <usb_serial_flush_output+0x54>)
	if (tx_packet) {
    4226:	6834      	ldr	r4, [r6, #0]
    4228:	4d11      	ldr	r5, [pc, #68]	; (4270 <usb_serial_flush_output+0x58>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    422a:	2701      	movs	r7, #1
    422c:	701f      	strb	r7, [r3, #0]
    422e:	4698      	mov	r8, r3
	if (tx_packet) {
    4230:	b14c      	cbz	r4, 4246 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    4232:	2700      	movs	r7, #0
		tx_packet->len = tx_packet->index;
    4234:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    4236:	702f      	strb	r7, [r5, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4238:	2004      	movs	r0, #4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    423a:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    423c:	4621      	mov	r1, r4
    423e:	f7ff fb43 	bl	38c8 <usb_tx>
		tx_packet = NULL;
    4242:	6037      	str	r7, [r6, #0]
    4244:	e009      	b.n	425a <usb_serial_flush_output+0x42>
	} else {
		usb_packet_t *tx = usb_malloc();
    4246:	f7ff fee3 	bl	4010 <usb_malloc>
		if (tx) {
    424a:	4601      	mov	r1, r0
    424c:	b120      	cbz	r0, 4258 <usb_serial_flush_output+0x40>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    424e:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    4250:	702c      	strb	r4, [r5, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    4252:	f7ff fb39 	bl	38c8 <usb_tx>
    4256:	e000      	b.n	425a <usb_serial_flush_output+0x42>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    4258:	702f      	strb	r7, [r5, #0]
		}
	}
	tx_noautoflush = 0;
    425a:	2300      	movs	r3, #0
    425c:	f888 3000 	strb.w	r3, [r8]
    4260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4264:	1fff9403 	.word	0x1fff9403
    4268:	1fff941c 	.word	0x1fff941c
    426c:	1fff9419 	.word	0x1fff9419
    4270:	1fff9418 	.word	0x1fff9418

00004274 <usb_serial_flush_callback>:
}

void usb_serial_flush_callback(void)
{
    4274:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    4276:	4b0e      	ldr	r3, [pc, #56]	; (42b0 <usb_serial_flush_callback+0x3c>)
    4278:	781b      	ldrb	r3, [r3, #0]
    427a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    427e:	b9ab      	cbnz	r3, 42ac <usb_serial_flush_callback+0x38>
	if (tx_packet) {
    4280:	4c0c      	ldr	r4, [pc, #48]	; (42b4 <usb_serial_flush_callback+0x40>)
    4282:	6821      	ldr	r1, [r4, #0]
    4284:	b131      	cbz	r1, 4294 <usb_serial_flush_callback+0x20>
		tx_packet->len = tx_packet->index;
    4286:	884b      	ldrh	r3, [r1, #2]
    4288:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    428a:	2004      	movs	r0, #4
    428c:	f7ff fb1c 	bl	38c8 <usb_tx>
		tx_packet = NULL;
    4290:	6025      	str	r5, [r4, #0]
    4292:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    4294:	f7ff febc 	bl	4010 <usb_malloc>
		if (tx) {
    4298:	4601      	mov	r1, r0
    429a:	b120      	cbz	r0, 42a6 <usb_serial_flush_callback+0x32>
			usb_tx(CDC_TX_ENDPOINT, tx);
    429c:	2004      	movs	r0, #4
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    429e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    42a2:	f7ff bb11 	b.w	38c8 <usb_tx>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    42a6:	4b04      	ldr	r3, [pc, #16]	; (42b8 <usb_serial_flush_callback+0x44>)
    42a8:	2201      	movs	r2, #1
    42aa:	701a      	strb	r2, [r3, #0]
    42ac:	bd38      	pop	{r3, r4, r5, pc}
    42ae:	bf00      	nop
    42b0:	1fff9419 	.word	0x1fff9419
    42b4:	1fff941c 	.word	0x1fff941c
    42b8:	1fff9418 	.word	0x1fff9418

000042bc <_Z10randomSeedm>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    42bc:	b108      	cbz	r0, 42c2 <_Z10randomSeedm+0x6>
    42be:	4b01      	ldr	r3, [pc, #4]	; (42c4 <_Z10randomSeedm+0x8>)
    42c0:	6018      	str	r0, [r3, #0]
    42c2:	4770      	bx	lr
    42c4:	1fff942c 	.word	0x1fff942c

000042c8 <_Z6randomv>:
uint32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    42c8:	4a0c      	ldr	r2, [pc, #48]	; (42fc <_Z6randomv+0x34>)
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
    42ca:	480d      	ldr	r0, [pc, #52]	; (4300 <_Z6randomv+0x38>)
uint32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    42cc:	6813      	ldr	r3, [r2, #0]
    42ce:	4611      	mov	r1, r2
	if (x == 0) x = 123459876;
    42d0:	4a0c      	ldr	r2, [pc, #48]	; (4304 <_Z6randomv+0x3c>)
    42d2:	2b00      	cmp	r3, #0
    42d4:	bf08      	it	eq
    42d6:	4613      	moveq	r3, r2
	hi = x / 127773;
	lo = x % 127773;
    42d8:	fb93 f2f0 	sdiv	r2, r3, r0
    42dc:	fb00 3312 	mls	r3, r0, r2, r3
	x = 16807 * lo - 2836 * hi;
    42e0:	4809      	ldr	r0, [pc, #36]	; (4308 <_Z6randomv+0x40>)
    42e2:	4342      	muls	r2, r0
    42e4:	f244 10a7 	movw	r0, #16807	; 0x41a7
    42e8:	fb00 2003 	mla	r0, r0, r3, r2
	if (x < 0) x += 0x7FFFFFFF;
    42ec:	2800      	cmp	r0, #0
    42ee:	bfbc      	itt	lt
    42f0:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
    42f4:	f100 30ff 	addlt.w	r0, r0, #4294967295	; 0xffffffff
	seed = x;
    42f8:	6008      	str	r0, [r1, #0]
	return x;
}
    42fa:	4770      	bx	lr
    42fc:	1fff942c 	.word	0x1fff942c
    4300:	0001f31d 	.word	0x0001f31d
    4304:	075bd924 	.word	0x075bd924
    4308:	fffff4ec 	.word	0xfffff4ec

0000430c <_Z3maplllll>:
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    430c:	b510      	push	{r4, lr}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    430e:	9c02      	ldr	r4, [sp, #8]
    4310:	1a40      	subs	r0, r0, r1
    4312:	1ae4      	subs	r4, r4, r3
    4314:	4344      	muls	r4, r0
    4316:	1a52      	subs	r2, r2, r1
    4318:	fb94 f0f2 	sdiv	r0, r4, r2
}
    431c:	4418      	add	r0, r3
    431e:	bd10      	pop	{r4, pc}

00004320 <yield>:
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

void yield(void) __attribute__ ((weak));
void yield(void) {};
    4320:	4770      	bx	lr
    4322:	ffff 4603 	vcvt.f<illegal width 64>.s<illegal width 64>	d20, d3

00004324 <__aeabi_atexit>:
    4324:	4603      	mov	r3, r0
    4326:	4608      	mov	r0, r1
    4328:	4619      	mov	r1, r3
    432a:	f009 b9c7 	b.w	d6bc <__cxa_atexit>
    432e:	bf00      	nop

00004330 <_ZdlPv>:
    4330:	b108      	cbz	r0, 4336 <_ZdlPv+0x6>
    4332:	f009 bc0d 	b.w	db50 <free>
    4336:	4770      	bx	lr

00004338 <_Znwj>:
    4338:	b538      	push	{r3, r4, r5, lr}
    433a:	2800      	cmp	r0, #0
    433c:	bf14      	ite	ne
    433e:	4604      	movne	r4, r0
    4340:	2401      	moveq	r4, #1
    4342:	4620      	mov	r0, r4
    4344:	f009 fbfc 	bl	db40 <malloc>
    4348:	b948      	cbnz	r0, 435e <_Znwj+0x26>
    434a:	4d0d      	ldr	r5, [pc, #52]	; (4380 <_Znwj+0x48>)
    434c:	682b      	ldr	r3, [r5, #0]
    434e:	b13b      	cbz	r3, 4360 <_Znwj+0x28>
    4350:	4798      	blx	r3
    4352:	4620      	mov	r0, r4
    4354:	f009 fbf4 	bl	db40 <malloc>
    4358:	2800      	cmp	r0, #0
    435a:	d0f7      	beq.n	434c <_Znwj+0x14>
    435c:	bd38      	pop	{r3, r4, r5, pc}
    435e:	bd38      	pop	{r3, r4, r5, pc}
    4360:	2004      	movs	r0, #4
    4362:	f000 f831 	bl	43c8 <__cxa_allocate_exception>
    4366:	4b07      	ldr	r3, [pc, #28]	; (4384 <_Znwj+0x4c>)
    4368:	6003      	str	r3, [r0, #0]
    436a:	4907      	ldr	r1, [pc, #28]	; (4388 <_Znwj+0x50>)
    436c:	4a07      	ldr	r2, [pc, #28]	; (438c <_Znwj+0x54>)
    436e:	f000 fdbf 	bl	4ef0 <__cxa_throw>
    4372:	3101      	adds	r1, #1
    4374:	d001      	beq.n	437a <_Znwj+0x42>
    4376:	f000 f86d 	bl	4454 <__cxa_end_cleanup>
    437a:	f000 f95f 	bl	463c <__cxa_call_unexpected>
    437e:	bf00      	nop
    4380:	1fff9c44 	.word	0x1fff9c44
    4384:	00012d98 	.word	0x00012d98
    4388:	00012da8 	.word	0x00012da8
    438c:	00004399 	.word	0x00004399

00004390 <_ZNKSt9bad_alloc4whatEv>:
    4390:	4800      	ldr	r0, [pc, #0]	; (4394 <_ZNKSt9bad_alloc4whatEv+0x4>)
    4392:	4770      	bx	lr
    4394:	00012db4 	.word	0x00012db4

00004398 <_ZNSt9bad_allocD1Ev>:
    4398:	b510      	push	{r4, lr}
    439a:	4b03      	ldr	r3, [pc, #12]	; (43a8 <_ZNSt9bad_allocD1Ev+0x10>)
    439c:	6003      	str	r3, [r0, #0]
    439e:	4604      	mov	r4, r0
    43a0:	f000 fa44 	bl	482c <_ZNSt9exceptionD1Ev>
    43a4:	4620      	mov	r0, r4
    43a6:	bd10      	pop	{r4, pc}
    43a8:	00012d98 	.word	0x00012d98

000043ac <_ZNSt9bad_allocD0Ev>:
    43ac:	b510      	push	{r4, lr}
    43ae:	4b05      	ldr	r3, [pc, #20]	; (43c4 <_ZNSt9bad_allocD0Ev+0x18>)
    43b0:	6003      	str	r3, [r0, #0]
    43b2:	4604      	mov	r4, r0
    43b4:	f000 fa3a 	bl	482c <_ZNSt9exceptionD1Ev>
    43b8:	4620      	mov	r0, r4
    43ba:	f7ff ffb9 	bl	4330 <_ZdlPv>
    43be:	4620      	mov	r0, r4
    43c0:	bd10      	pop	{r4, pc}
    43c2:	bf00      	nop
    43c4:	00012d98 	.word	0x00012d98

000043c8 <__cxa_allocate_exception>:
    43c8:	b538      	push	{r3, r4, r5, lr}
    43ca:	f100 0580 	add.w	r5, r0, #128	; 0x80
    43ce:	4628      	mov	r0, r5
    43d0:	f009 fbb6 	bl	db40 <malloc>
    43d4:	4604      	mov	r4, r0
    43d6:	b138      	cbz	r0, 43e8 <__cxa_allocate_exception+0x20>
    43d8:	4620      	mov	r0, r4
    43da:	2100      	movs	r1, #0
    43dc:	2280      	movs	r2, #128	; 0x80
    43de:	f009 ffd1 	bl	e384 <memset>
    43e2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    43e6:	bd38      	pop	{r3, r4, r5, pc}
    43e8:	4a0b      	ldr	r2, [pc, #44]	; (4418 <__cxa_allocate_exception+0x50>)
    43ea:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    43ee:	6811      	ldr	r1, [r2, #0]
    43f0:	d807      	bhi.n	4402 <__cxa_allocate_exception+0x3a>
    43f2:	460b      	mov	r3, r1
    43f4:	07d8      	lsls	r0, r3, #31
    43f6:	d506      	bpl.n	4406 <__cxa_allocate_exception+0x3e>
    43f8:	3401      	adds	r4, #1
    43fa:	2c04      	cmp	r4, #4
    43fc:	ea4f 0353 	mov.w	r3, r3, lsr #1
    4400:	d1f8      	bne.n	43f4 <__cxa_allocate_exception+0x2c>
    4402:	f000 fd3f 	bl	4e84 <_ZSt9terminatev>
    4406:	2001      	movs	r0, #1
    4408:	40a0      	lsls	r0, r4
    440a:	4b04      	ldr	r3, [pc, #16]	; (441c <__cxa_allocate_exception+0x54>)
    440c:	4301      	orrs	r1, r0
    440e:	6011      	str	r1, [r2, #0]
    4410:	eb03 2444 	add.w	r4, r3, r4, lsl #9
    4414:	e7e0      	b.n	43d8 <__cxa_allocate_exception+0x10>
    4416:	bf00      	nop
    4418:	1fff9430 	.word	0x1fff9430
    441c:	1fff9438 	.word	0x1fff9438

00004420 <__cxa_free_exception>:
    4420:	4b0a      	ldr	r3, [pc, #40]	; (444c <__cxa_free_exception+0x2c>)
    4422:	4298      	cmp	r0, r3
    4424:	d303      	bcc.n	442e <__cxa_free_exception+0xe>
    4426:	f503 6200 	add.w	r2, r3, #2048	; 0x800
    442a:	4290      	cmp	r0, r2
    442c:	d302      	bcc.n	4434 <__cxa_free_exception+0x14>
    442e:	3880      	subs	r0, #128	; 0x80
    4430:	f009 bb8e 	b.w	db50 <free>
    4434:	4a06      	ldr	r2, [pc, #24]	; (4450 <__cxa_free_exception+0x30>)
    4436:	1ac3      	subs	r3, r0, r3
    4438:	6811      	ldr	r1, [r2, #0]
    443a:	0a5b      	lsrs	r3, r3, #9
    443c:	2001      	movs	r0, #1
    443e:	fa00 f303 	lsl.w	r3, r0, r3
    4442:	ea21 0103 	bic.w	r1, r1, r3
    4446:	6011      	str	r1, [r2, #0]
    4448:	4770      	bx	lr
    444a:	bf00      	nop
    444c:	1fff9438 	.word	0x1fff9438
    4450:	1fff9430 	.word	0x1fff9430

00004454 <__cxa_end_cleanup>:
    4454:	b41e      	push	{r1, r2, r3, r4}
    4456:	f000 f88b 	bl	4570 <__gnu_end_cleanup>
    445a:	bc1e      	pop	{r1, r2, r3, r4}
    445c:	f008 ff40 	bl	d2e0 <_Unwind_Resume>

00004460 <__cxa_type_match>:
    4460:	b5f0      	push	{r4, r5, r6, r7, lr}
    4462:	7802      	ldrb	r2, [r0, #0]
    4464:	2a47      	cmp	r2, #71	; 0x47
    4466:	b083      	sub	sp, #12
    4468:	460d      	mov	r5, r1
    446a:	461e      	mov	r6, r3
    446c:	d01a      	beq.n	44a4 <__cxa_type_match+0x44>
    446e:	2300      	movs	r3, #0
    4470:	4c24      	ldr	r4, [pc, #144]	; (4504 <__cxa_type_match+0xa4>)
    4472:	9301      	str	r3, [sp, #4]
    4474:	6822      	ldr	r2, [r4, #0]
    4476:	4620      	mov	r0, r4
    4478:	6893      	ldr	r3, [r2, #8]
    447a:	4798      	blx	r3
    447c:	b180      	cbz	r0, 44a0 <__cxa_type_match+0x40>
    447e:	9b01      	ldr	r3, [sp, #4]
    4480:	681b      	ldr	r3, [r3, #0]
    4482:	9301      	str	r3, [sp, #4]
    4484:	2702      	movs	r7, #2
    4486:	682a      	ldr	r2, [r5, #0]
    4488:	4621      	mov	r1, r4
    448a:	4628      	mov	r0, r5
    448c:	6914      	ldr	r4, [r2, #16]
    448e:	2301      	movs	r3, #1
    4490:	aa01      	add	r2, sp, #4
    4492:	47a0      	blx	r4
    4494:	b110      	cbz	r0, 449c <__cxa_type_match+0x3c>
    4496:	9b01      	ldr	r3, [sp, #4]
    4498:	6033      	str	r3, [r6, #0]
    449a:	4638      	mov	r0, r7
    449c:	b003      	add	sp, #12
    449e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44a0:	2701      	movs	r7, #1
    44a2:	e7f0      	b.n	4486 <__cxa_type_match+0x26>
    44a4:	7843      	ldrb	r3, [r0, #1]
    44a6:	2b4e      	cmp	r3, #78	; 0x4e
    44a8:	d1e1      	bne.n	446e <__cxa_type_match+0xe>
    44aa:	7883      	ldrb	r3, [r0, #2]
    44ac:	2b55      	cmp	r3, #85	; 0x55
    44ae:	d1de      	bne.n	446e <__cxa_type_match+0xe>
    44b0:	78c3      	ldrb	r3, [r0, #3]
    44b2:	2b43      	cmp	r3, #67	; 0x43
    44b4:	d1db      	bne.n	446e <__cxa_type_match+0xe>
    44b6:	7903      	ldrb	r3, [r0, #4]
    44b8:	2b46      	cmp	r3, #70	; 0x46
    44ba:	d016      	beq.n	44ea <__cxa_type_match+0x8a>
    44bc:	7903      	ldrb	r3, [r0, #4]
    44be:	2b43      	cmp	r3, #67	; 0x43
    44c0:	d1d5      	bne.n	446e <__cxa_type_match+0xe>
    44c2:	7943      	ldrb	r3, [r0, #5]
    44c4:	2b2b      	cmp	r3, #43	; 0x2b
    44c6:	d1d2      	bne.n	446e <__cxa_type_match+0xe>
    44c8:	7983      	ldrb	r3, [r0, #6]
    44ca:	2b2b      	cmp	r3, #43	; 0x2b
    44cc:	d1cf      	bne.n	446e <__cxa_type_match+0xe>
    44ce:	79c3      	ldrb	r3, [r0, #7]
    44d0:	2b01      	cmp	r3, #1
    44d2:	d8cc      	bhi.n	446e <__cxa_type_match+0xe>
    44d4:	d004      	beq.n	44e0 <__cxa_type_match+0x80>
    44d6:	f850 4c20 	ldr.w	r4, [r0, #-32]
    44da:	3058      	adds	r0, #88	; 0x58
    44dc:	9001      	str	r0, [sp, #4]
    44de:	e7c9      	b.n	4474 <__cxa_type_match+0x14>
    44e0:	f850 0c20 	ldr.w	r0, [r0, #-32]
    44e4:	f850 4c78 	ldr.w	r4, [r0, #-120]
    44e8:	e7f8      	b.n	44dc <__cxa_type_match+0x7c>
    44ea:	7943      	ldrb	r3, [r0, #5]
    44ec:	2b4f      	cmp	r3, #79	; 0x4f
    44ee:	d1e5      	bne.n	44bc <__cxa_type_match+0x5c>
    44f0:	7983      	ldrb	r3, [r0, #6]
    44f2:	2b52      	cmp	r3, #82	; 0x52
    44f4:	d1e2      	bne.n	44bc <__cxa_type_match+0x5c>
    44f6:	79c3      	ldrb	r3, [r0, #7]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d1df      	bne.n	44bc <__cxa_type_match+0x5c>
    44fc:	9301      	str	r3, [sp, #4]
    44fe:	4c02      	ldr	r4, [pc, #8]	; (4508 <__cxa_type_match+0xa8>)
    4500:	e7b8      	b.n	4474 <__cxa_type_match+0x14>
    4502:	bf00      	nop
    4504:	00012e5c 	.word	0x00012e5c
    4508:	00012df0 	.word	0x00012df0

0000450c <__cxa_begin_cleanup>:
    450c:	b510      	push	{r4, lr}
    450e:	4604      	mov	r4, r0
    4510:	f000 f9b8 	bl	4884 <__cxa_get_globals>
    4514:	7823      	ldrb	r3, [r4, #0]
    4516:	2b47      	cmp	r3, #71	; 0x47
    4518:	f1a4 0220 	sub.w	r2, r4, #32
    451c:	d004      	beq.n	4528 <__cxa_begin_cleanup+0x1c>
    451e:	6883      	ldr	r3, [r0, #8]
    4520:	bb23      	cbnz	r3, 456c <__cxa_begin_cleanup+0x60>
    4522:	6082      	str	r2, [r0, #8]
    4524:	2001      	movs	r0, #1
    4526:	bd10      	pop	{r4, pc}
    4528:	7863      	ldrb	r3, [r4, #1]
    452a:	2b4e      	cmp	r3, #78	; 0x4e
    452c:	d1f7      	bne.n	451e <__cxa_begin_cleanup+0x12>
    452e:	78a3      	ldrb	r3, [r4, #2]
    4530:	2b55      	cmp	r3, #85	; 0x55
    4532:	d1f4      	bne.n	451e <__cxa_begin_cleanup+0x12>
    4534:	78e3      	ldrb	r3, [r4, #3]
    4536:	2b43      	cmp	r3, #67	; 0x43
    4538:	d1f1      	bne.n	451e <__cxa_begin_cleanup+0x12>
    453a:	7923      	ldrb	r3, [r4, #4]
    453c:	2b43      	cmp	r3, #67	; 0x43
    453e:	d1ee      	bne.n	451e <__cxa_begin_cleanup+0x12>
    4540:	7963      	ldrb	r3, [r4, #5]
    4542:	2b2b      	cmp	r3, #43	; 0x2b
    4544:	d1eb      	bne.n	451e <__cxa_begin_cleanup+0x12>
    4546:	79a3      	ldrb	r3, [r4, #6]
    4548:	2b2b      	cmp	r3, #43	; 0x2b
    454a:	d1e8      	bne.n	451e <__cxa_begin_cleanup+0x12>
    454c:	79e3      	ldrb	r3, [r4, #7]
    454e:	2b01      	cmp	r3, #1
    4550:	d8e5      	bhi.n	451e <__cxa_begin_cleanup+0x12>
    4552:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4556:	3301      	adds	r3, #1
    4558:	2b01      	cmp	r3, #1
    455a:	f844 3c04 	str.w	r3, [r4, #-4]
    455e:	d1e1      	bne.n	4524 <__cxa_begin_cleanup+0x18>
    4560:	6883      	ldr	r3, [r0, #8]
    4562:	f844 3c08 	str.w	r3, [r4, #-8]
    4566:	6082      	str	r2, [r0, #8]
    4568:	2001      	movs	r0, #1
    456a:	bd10      	pop	{r4, pc}
    456c:	f000 fc8a 	bl	4e84 <_ZSt9terminatev>

00004570 <__gnu_end_cleanup>:
    4570:	b508      	push	{r3, lr}
    4572:	f000 f987 	bl	4884 <__cxa_get_globals>
    4576:	6883      	ldr	r3, [r0, #8]
    4578:	b383      	cbz	r3, 45dc <__gnu_end_cleanup+0x6c>
    457a:	f893 2020 	ldrb.w	r2, [r3, #32]
    457e:	2a47      	cmp	r2, #71	; 0x47
    4580:	d004      	beq.n	458c <__gnu_end_cleanup+0x1c>
    4582:	2200      	movs	r2, #0
    4584:	6082      	str	r2, [r0, #8]
    4586:	f103 0020 	add.w	r0, r3, #32
    458a:	bd08      	pop	{r3, pc}
    458c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    4590:	2a4e      	cmp	r2, #78	; 0x4e
    4592:	d1f6      	bne.n	4582 <__gnu_end_cleanup+0x12>
    4594:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    4598:	2a55      	cmp	r2, #85	; 0x55
    459a:	d1f2      	bne.n	4582 <__gnu_end_cleanup+0x12>
    459c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    45a0:	2a43      	cmp	r2, #67	; 0x43
    45a2:	d1ee      	bne.n	4582 <__gnu_end_cleanup+0x12>
    45a4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    45a8:	2a43      	cmp	r2, #67	; 0x43
    45aa:	d1ea      	bne.n	4582 <__gnu_end_cleanup+0x12>
    45ac:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    45b0:	2a2b      	cmp	r2, #43	; 0x2b
    45b2:	d1e6      	bne.n	4582 <__gnu_end_cleanup+0x12>
    45b4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    45b8:	2a2b      	cmp	r2, #43	; 0x2b
    45ba:	d1e2      	bne.n	4582 <__gnu_end_cleanup+0x12>
    45bc:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    45c0:	2a01      	cmp	r2, #1
    45c2:	d8de      	bhi.n	4582 <__gnu_end_cleanup+0x12>
    45c4:	69da      	ldr	r2, [r3, #28]
    45c6:	3a01      	subs	r2, #1
    45c8:	61da      	str	r2, [r3, #28]
    45ca:	2a00      	cmp	r2, #0
    45cc:	d1db      	bne.n	4586 <__gnu_end_cleanup+0x16>
    45ce:	699a      	ldr	r2, [r3, #24]
    45d0:	6082      	str	r2, [r0, #8]
    45d2:	2200      	movs	r2, #0
    45d4:	619a      	str	r2, [r3, #24]
    45d6:	f103 0020 	add.w	r0, r3, #32
    45da:	bd08      	pop	{r3, pc}
    45dc:	f000 fc52 	bl	4e84 <_ZSt9terminatev>

000045e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
    45e0:	7803      	ldrb	r3, [r0, #0]
    45e2:	2b47      	cmp	r3, #71	; 0x47
    45e4:	d001      	beq.n	45ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
    45e6:	2000      	movs	r0, #0
    45e8:	4770      	bx	lr
    45ea:	7843      	ldrb	r3, [r0, #1]
    45ec:	2b4e      	cmp	r3, #78	; 0x4e
    45ee:	d1fa      	bne.n	45e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    45f0:	7883      	ldrb	r3, [r0, #2]
    45f2:	2b55      	cmp	r3, #85	; 0x55
    45f4:	d1f7      	bne.n	45e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    45f6:	78c3      	ldrb	r3, [r0, #3]
    45f8:	2b43      	cmp	r3, #67	; 0x43
    45fa:	d1f4      	bne.n	45e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    45fc:	7903      	ldrb	r3, [r0, #4]
    45fe:	2b43      	cmp	r3, #67	; 0x43
    4600:	d1f1      	bne.n	45e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    4602:	7943      	ldrb	r3, [r0, #5]
    4604:	2b2b      	cmp	r3, #43	; 0x2b
    4606:	d1ee      	bne.n	45e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    4608:	7983      	ldrb	r3, [r0, #6]
    460a:	2b2b      	cmp	r3, #43	; 0x2b
    460c:	d1eb      	bne.n	45e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    460e:	79c0      	ldrb	r0, [r0, #7]
    4610:	2801      	cmp	r0, #1
    4612:	bf8c      	ite	hi
    4614:	2000      	movhi	r0, #0
    4616:	2001      	movls	r0, #1
    4618:	4770      	bx	lr
    461a:	bf00      	nop

0000461c <__cxa_call_terminate>:
    461c:	b510      	push	{r4, lr}
    461e:	4604      	mov	r4, r0
    4620:	b128      	cbz	r0, 462e <__cxa_call_terminate+0x12>
    4622:	f000 f877 	bl	4714 <__cxa_begin_catch>
    4626:	4620      	mov	r0, r4
    4628:	f7ff ffda 	bl	45e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    462c:	b908      	cbnz	r0, 4632 <__cxa_call_terminate+0x16>
    462e:	f000 fc29 	bl	4e84 <_ZSt9terminatev>
    4632:	f854 0c14 	ldr.w	r0, [r4, #-20]
    4636:	f000 fc11 	bl	4e5c <_ZN10__cxxabiv111__terminateEPFvvE>
    463a:	bf00      	nop

0000463c <__cxa_call_unexpected>:
    463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4640:	b083      	sub	sp, #12
    4642:	4604      	mov	r4, r0
    4644:	f7ff ffcc 	bl	45e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    4648:	b170      	cbz	r0, 4668 <__cxa_call_unexpected+0x2c>
    464a:	f854 5c18 	ldr.w	r5, [r4, #-24]
    464e:	f854 6c14 	ldr.w	r6, [r4, #-20]
    4652:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    4654:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
    4658:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
    465c:	4620      	mov	r0, r4
    465e:	f000 f859 	bl	4714 <__cxa_begin_catch>
    4662:	4628      	mov	r0, r5
    4664:	f000 fc16 	bl	4e94 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    4668:	4620      	mov	r0, r4
    466a:	f000 f853 	bl	4714 <__cxa_begin_catch>
    466e:	f000 fc15 	bl	4e9c <_ZSt10unexpectedv>
    4672:	f000 f84f 	bl	4714 <__cxa_begin_catch>
    4676:	f000 fc05 	bl	4e84 <_ZSt9terminatev>
    467a:	f000 f84b 	bl	4714 <__cxa_begin_catch>
    467e:	f000 f8fd 	bl	487c <__cxa_get_globals_fast>
    4682:	6803      	ldr	r3, [r0, #0]
    4684:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    4688:	2a01      	cmp	r2, #1
    468a:	d030      	beq.n	46ee <__cxa_call_unexpected+0xb2>
    468c:	f103 0278 	add.w	r2, r3, #120	; 0x78
    4690:	2400      	movs	r4, #0
    4692:	9200      	str	r2, [sp, #0]
    4694:	f028 0803 	bic.w	r8, r8, #3
    4698:	f103 0b20 	add.w	fp, r3, #32
    469c:	46a2      	mov	sl, r4
    469e:	45ba      	cmp	sl, r7
    46a0:	da1b      	bge.n	46da <__cxa_call_unexpected+0x9e>
    46a2:	f8d9 5000 	ldr.w	r5, [r9]
    46a6:	b105      	cbz	r5, 46aa <__cxa_call_unexpected+0x6e>
    46a8:	444d      	add	r5, r9
    46aa:	4658      	mov	r0, fp
    46ac:	4629      	mov	r1, r5
    46ae:	2200      	movs	r2, #0
    46b0:	466b      	mov	r3, sp
    46b2:	f7ff fed5 	bl	4460 <__cxa_type_match>
    46b6:	b9f8      	cbnz	r0, 46f8 <__cxa_call_unexpected+0xbc>
    46b8:	682b      	ldr	r3, [r5, #0]
    46ba:	4913      	ldr	r1, [pc, #76]	; (4708 <__cxa_call_unexpected+0xcc>)
    46bc:	f8d3 c010 	ldr.w	ip, [r3, #16]
    46c0:	aa02      	add	r2, sp, #8
    46c2:	2301      	movs	r3, #1
    46c4:	f842 0d04 	str.w	r0, [r2, #-4]!
    46c8:	4628      	mov	r0, r5
    46ca:	47e0      	blx	ip
    46cc:	2800      	cmp	r0, #0
    46ce:	bf18      	it	ne
    46d0:	2401      	movne	r4, #1
    46d2:	f10a 0a01 	add.w	sl, sl, #1
    46d6:	44c1      	add	r9, r8
    46d8:	e7e1      	b.n	469e <__cxa_call_unexpected+0x62>
    46da:	b154      	cbz	r4, 46f2 <__cxa_call_unexpected+0xb6>
    46dc:	2004      	movs	r0, #4
    46de:	f7ff fe73 	bl	43c8 <__cxa_allocate_exception>
    46e2:	4b0a      	ldr	r3, [pc, #40]	; (470c <__cxa_call_unexpected+0xd0>)
    46e4:	6003      	str	r3, [r0, #0]
    46e6:	4908      	ldr	r1, [pc, #32]	; (4708 <__cxa_call_unexpected+0xcc>)
    46e8:	4a09      	ldr	r2, [pc, #36]	; (4710 <__cxa_call_unexpected+0xd4>)
    46ea:	f000 fc01 	bl	4ef0 <__cxa_throw>
    46ee:	681a      	ldr	r2, [r3, #0]
    46f0:	e7ce      	b.n	4690 <__cxa_call_unexpected+0x54>
    46f2:	4630      	mov	r0, r6
    46f4:	f000 fbb2 	bl	4e5c <_ZN10__cxxabiv111__terminateEPFvvE>
    46f8:	f000 fc42 	bl	4f80 <__cxa_rethrow>
    46fc:	f000 f850 	bl	47a0 <__cxa_end_catch>
    4700:	f000 f84e 	bl	47a0 <__cxa_end_catch>
    4704:	f7ff fea6 	bl	4454 <__cxa_end_cleanup>
    4708:	00012eb0 	.word	0x00012eb0
    470c:	00012e70 	.word	0x00012e70
    4710:	00004839 	.word	0x00004839

00004714 <__cxa_begin_catch>:
    4714:	b538      	push	{r3, r4, r5, lr}
    4716:	4604      	mov	r4, r0
    4718:	f000 f8b4 	bl	4884 <__cxa_get_globals>
    471c:	7821      	ldrb	r1, [r4, #0]
    471e:	6803      	ldr	r3, [r0, #0]
    4720:	2947      	cmp	r1, #71	; 0x47
    4722:	f1a4 0220 	sub.w	r2, r4, #32
    4726:	d005      	beq.n	4734 <__cxa_begin_catch+0x20>
    4728:	2b00      	cmp	r3, #0
    472a:	d131      	bne.n	4790 <__cxa_begin_catch+0x7c>
    472c:	461c      	mov	r4, r3
    472e:	6002      	str	r2, [r0, #0]
    4730:	4620      	mov	r0, r4
    4732:	bd38      	pop	{r3, r4, r5, pc}
    4734:	7861      	ldrb	r1, [r4, #1]
    4736:	294e      	cmp	r1, #78	; 0x4e
    4738:	d1f6      	bne.n	4728 <__cxa_begin_catch+0x14>
    473a:	78a1      	ldrb	r1, [r4, #2]
    473c:	2955      	cmp	r1, #85	; 0x55
    473e:	d1f3      	bne.n	4728 <__cxa_begin_catch+0x14>
    4740:	78e1      	ldrb	r1, [r4, #3]
    4742:	2943      	cmp	r1, #67	; 0x43
    4744:	d1f0      	bne.n	4728 <__cxa_begin_catch+0x14>
    4746:	7921      	ldrb	r1, [r4, #4]
    4748:	2943      	cmp	r1, #67	; 0x43
    474a:	d1ed      	bne.n	4728 <__cxa_begin_catch+0x14>
    474c:	7961      	ldrb	r1, [r4, #5]
    474e:	292b      	cmp	r1, #43	; 0x2b
    4750:	d1ea      	bne.n	4728 <__cxa_begin_catch+0x14>
    4752:	79a1      	ldrb	r1, [r4, #6]
    4754:	292b      	cmp	r1, #43	; 0x2b
    4756:	d1e7      	bne.n	4728 <__cxa_begin_catch+0x14>
    4758:	79e1      	ldrb	r1, [r4, #7]
    475a:	2901      	cmp	r1, #1
    475c:	d8e4      	bhi.n	4728 <__cxa_begin_catch+0x14>
    475e:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    4762:	2d00      	cmp	r5, #0
    4764:	db11      	blt.n	478a <__cxa_begin_catch+0x76>
    4766:	3501      	adds	r5, #1
    4768:	6841      	ldr	r1, [r0, #4]
    476a:	f844 5c0c 	str.w	r5, [r4, #-12]
    476e:	429a      	cmp	r2, r3
    4770:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    4774:	6041      	str	r1, [r0, #4]
    4776:	bf1c      	itt	ne
    4778:	f844 3c10 	strne.w	r3, [r4, #-16]
    477c:	6002      	strne	r2, [r0, #0]
    477e:	4620      	mov	r0, r4
    4780:	6a64      	ldr	r4, [r4, #36]	; 0x24
    4782:	f008 f9e9 	bl	cb58 <_Unwind_Complete>
    4786:	4620      	mov	r0, r4
    4788:	bd38      	pop	{r3, r4, r5, pc}
    478a:	f1c5 0501 	rsb	r5, r5, #1
    478e:	e7eb      	b.n	4768 <__cxa_begin_catch+0x54>
    4790:	f000 fb78 	bl	4e84 <_ZSt9terminatev>
    4794:	3101      	adds	r1, #1
    4796:	d001      	beq.n	479c <__cxa_begin_catch+0x88>
    4798:	f7ff fe5c 	bl	4454 <__cxa_end_cleanup>
    479c:	f7ff ff4e 	bl	463c <__cxa_call_unexpected>

000047a0 <__cxa_end_catch>:
    47a0:	b508      	push	{r3, lr}
    47a2:	f000 f86b 	bl	487c <__cxa_get_globals_fast>
    47a6:	4602      	mov	r2, r0
    47a8:	6800      	ldr	r0, [r0, #0]
    47aa:	2800      	cmp	r0, #0
    47ac:	d03d      	beq.n	482a <__cxa_end_catch+0x8a>
    47ae:	f890 1020 	ldrb.w	r1, [r0, #32]
    47b2:	2947      	cmp	r1, #71	; 0x47
    47b4:	d006      	beq.n	47c4 <__cxa_end_catch+0x24>
    47b6:	2100      	movs	r1, #0
    47b8:	3020      	adds	r0, #32
    47ba:	6011      	str	r1, [r2, #0]
    47bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    47c0:	f008 b9cc 	b.w	cb5c <_Unwind_DeleteException>
    47c4:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    47c8:	294e      	cmp	r1, #78	; 0x4e
    47ca:	d1f4      	bne.n	47b6 <__cxa_end_catch+0x16>
    47cc:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    47d0:	2955      	cmp	r1, #85	; 0x55
    47d2:	d1f0      	bne.n	47b6 <__cxa_end_catch+0x16>
    47d4:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
    47d8:	2943      	cmp	r1, #67	; 0x43
    47da:	d1ec      	bne.n	47b6 <__cxa_end_catch+0x16>
    47dc:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    47e0:	2943      	cmp	r1, #67	; 0x43
    47e2:	d1e8      	bne.n	47b6 <__cxa_end_catch+0x16>
    47e4:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
    47e8:	292b      	cmp	r1, #43	; 0x2b
    47ea:	d1e4      	bne.n	47b6 <__cxa_end_catch+0x16>
    47ec:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
    47f0:	292b      	cmp	r1, #43	; 0x2b
    47f2:	d1e0      	bne.n	47b6 <__cxa_end_catch+0x16>
    47f4:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
    47f8:	2901      	cmp	r1, #1
    47fa:	d8dc      	bhi.n	47b6 <__cxa_end_catch+0x16>
    47fc:	6941      	ldr	r1, [r0, #20]
    47fe:	2900      	cmp	r1, #0
    4800:	db05      	blt.n	480e <__cxa_end_catch+0x6e>
    4802:	3901      	subs	r1, #1
    4804:	d008      	beq.n	4818 <__cxa_end_catch+0x78>
    4806:	1c4b      	adds	r3, r1, #1
    4808:	d00d      	beq.n	4826 <__cxa_end_catch+0x86>
    480a:	6141      	str	r1, [r0, #20]
    480c:	bd08      	pop	{r3, pc}
    480e:	3101      	adds	r1, #1
    4810:	d1fb      	bne.n	480a <__cxa_end_catch+0x6a>
    4812:	6903      	ldr	r3, [r0, #16]
    4814:	6013      	str	r3, [r2, #0]
    4816:	e7f8      	b.n	480a <__cxa_end_catch+0x6a>
    4818:	6901      	ldr	r1, [r0, #16]
    481a:	6011      	str	r1, [r2, #0]
    481c:	3020      	adds	r0, #32
    481e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4822:	f008 b99b 	b.w	cb5c <_Unwind_DeleteException>
    4826:	f000 fb2d 	bl	4e84 <_ZSt9terminatev>
    482a:	bd08      	pop	{r3, pc}

0000482c <_ZNSt9exceptionD1Ev>:
    482c:	4b01      	ldr	r3, [pc, #4]	; (4834 <_ZNSt9exceptionD1Ev+0x8>)
    482e:	6003      	str	r3, [r0, #0]
    4830:	4770      	bx	lr
    4832:	bf00      	nop
    4834:	00012de0 	.word	0x00012de0

00004838 <_ZNSt13bad_exceptionD1Ev>:
    4838:	4b01      	ldr	r3, [pc, #4]	; (4840 <_ZNSt13bad_exceptionD1Ev+0x8>)
    483a:	6003      	str	r3, [r0, #0]
    483c:	4770      	bx	lr
    483e:	bf00      	nop
    4840:	00012de0 	.word	0x00012de0

00004844 <_ZNKSt9exception4whatEv>:
    4844:	4800      	ldr	r0, [pc, #0]	; (4848 <_ZNKSt9exception4whatEv+0x4>)
    4846:	4770      	bx	lr
    4848:	00012e14 	.word	0x00012e14

0000484c <_ZNKSt13bad_exception4whatEv>:
    484c:	4800      	ldr	r0, [pc, #0]	; (4850 <_ZNKSt13bad_exception4whatEv+0x4>)
    484e:	4770      	bx	lr
    4850:	00012e24 	.word	0x00012e24

00004854 <_ZNSt9exceptionD0Ev>:
    4854:	b510      	push	{r4, lr}
    4856:	4b03      	ldr	r3, [pc, #12]	; (4864 <_ZNSt9exceptionD0Ev+0x10>)
    4858:	6003      	str	r3, [r0, #0]
    485a:	4604      	mov	r4, r0
    485c:	f7ff fd68 	bl	4330 <_ZdlPv>
    4860:	4620      	mov	r0, r4
    4862:	bd10      	pop	{r4, pc}
    4864:	00012de0 	.word	0x00012de0

00004868 <_ZNSt13bad_exceptionD0Ev>:
    4868:	b510      	push	{r4, lr}
    486a:	4b03      	ldr	r3, [pc, #12]	; (4878 <_ZNSt13bad_exceptionD0Ev+0x10>)
    486c:	6003      	str	r3, [r0, #0]
    486e:	4604      	mov	r4, r0
    4870:	f7ff fd5e 	bl	4330 <_ZdlPv>
    4874:	4620      	mov	r0, r4
    4876:	bd10      	pop	{r4, pc}
    4878:	00012de0 	.word	0x00012de0

0000487c <__cxa_get_globals_fast>:
    487c:	4800      	ldr	r0, [pc, #0]	; (4880 <__cxa_get_globals_fast+0x4>)
    487e:	4770      	bx	lr
    4880:	1fff9c38 	.word	0x1fff9c38

00004884 <__cxa_get_globals>:
    4884:	4800      	ldr	r0, [pc, #0]	; (4888 <__cxa_get_globals+0x4>)
    4886:	4770      	bx	lr
    4888:	1fff9c38 	.word	0x1fff9c38

0000488c <_ZL12read_sleb128PKhPl>:
    488c:	b430      	push	{r4, r5}
    488e:	2400      	movs	r4, #0
    4890:	4623      	mov	r3, r4
    4892:	f810 2b01 	ldrb.w	r2, [r0], #1
    4896:	f002 057f 	and.w	r5, r2, #127	; 0x7f
    489a:	409d      	lsls	r5, r3
    489c:	432c      	orrs	r4, r5
    489e:	0615      	lsls	r5, r2, #24
    48a0:	f103 0307 	add.w	r3, r3, #7
    48a4:	d4f5      	bmi.n	4892 <_ZL12read_sleb128PKhPl+0x6>
    48a6:	2b1f      	cmp	r3, #31
    48a8:	d806      	bhi.n	48b8 <_ZL12read_sleb128PKhPl+0x2c>
    48aa:	0652      	lsls	r2, r2, #25
    48ac:	d504      	bpl.n	48b8 <_ZL12read_sleb128PKhPl+0x2c>
    48ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    48b2:	fa02 f303 	lsl.w	r3, r2, r3
    48b6:	431c      	orrs	r4, r3
    48b8:	600c      	str	r4, [r1, #0]
    48ba:	bc30      	pop	{r4, r5}
    48bc:	4770      	bx	lr
    48be:	bf00      	nop

000048c0 <_ZL28read_encoded_value_with_basehjPKhPj>:
    48c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48c4:	2850      	cmp	r0, #80	; 0x50
    48c6:	b084      	sub	sp, #16
    48c8:	4606      	mov	r6, r0
    48ca:	4688      	mov	r8, r1
    48cc:	d046      	beq.n	495c <_ZL28read_encoded_value_with_basehjPKhPj+0x9c>
    48ce:	f000 010f 	and.w	r1, r0, #15
    48d2:	290c      	cmp	r1, #12
    48d4:	d840      	bhi.n	4958 <_ZL28read_encoded_value_with_basehjPKhPj+0x98>
    48d6:	e8df f001 	tbb	[pc, r1]
    48da:	2c07      	.short	0x2c07
    48dc:	3f19073b 	.word	0x3f19073b
    48e0:	213f3f3f 	.word	0x213f3f3f
    48e4:	071d      	.short	0x071d
    48e6:	19          	.byte	0x19
    48e7:	00          	.byte	0x00
    48e8:	4615      	mov	r5, r2
    48ea:	f855 4b04 	ldr.w	r4, [r5], #4
    48ee:	b144      	cbz	r4, 4902 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
    48f0:	f006 0170 	and.w	r1, r6, #112	; 0x70
    48f4:	2910      	cmp	r1, #16
    48f6:	bf08      	it	eq
    48f8:	4690      	moveq	r8, r2
    48fa:	4444      	add	r4, r8
    48fc:	0632      	lsls	r2, r6, #24
    48fe:	bf48      	it	mi
    4900:	6824      	ldrmi	r4, [r4, #0]
    4902:	4628      	mov	r0, r5
    4904:	601c      	str	r4, [r3, #0]
    4906:	b004      	add	sp, #16
    4908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    490c:	6814      	ldr	r4, [r2, #0]
    490e:	f102 0508 	add.w	r5, r2, #8
    4912:	e7ec      	b.n	48ee <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    4914:	4615      	mov	r5, r2
    4916:	f935 4b02 	ldrsh.w	r4, [r5], #2
    491a:	e7e8      	b.n	48ee <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    491c:	4610      	mov	r0, r2
    491e:	a903      	add	r1, sp, #12
    4920:	9201      	str	r2, [sp, #4]
    4922:	9300      	str	r3, [sp, #0]
    4924:	f7ff ffb2 	bl	488c <_ZL12read_sleb128PKhPl>
    4928:	9c03      	ldr	r4, [sp, #12]
    492a:	9a01      	ldr	r2, [sp, #4]
    492c:	9b00      	ldr	r3, [sp, #0]
    492e:	4605      	mov	r5, r0
    4930:	e7dd      	b.n	48ee <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    4932:	2400      	movs	r4, #0
    4934:	4627      	mov	r7, r4
    4936:	4615      	mov	r5, r2
    4938:	f815 1b01 	ldrb.w	r1, [r5], #1
    493c:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    4940:	40b8      	lsls	r0, r7
    4942:	0609      	lsls	r1, r1, #24
    4944:	ea44 0400 	orr.w	r4, r4, r0
    4948:	f107 0707 	add.w	r7, r7, #7
    494c:	d4f4      	bmi.n	4938 <_ZL28read_encoded_value_with_basehjPKhPj+0x78>
    494e:	e7ce      	b.n	48ee <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    4950:	4615      	mov	r5, r2
    4952:	f835 4b02 	ldrh.w	r4, [r5], #2
    4956:	e7ca      	b.n	48ee <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
    4958:	f008 fea8 	bl	d6ac <abort>
    495c:	1cd5      	adds	r5, r2, #3
    495e:	f025 0503 	bic.w	r5, r5, #3
    4962:	f855 4b04 	ldr.w	r4, [r5], #4
    4966:	601c      	str	r4, [r3, #0]
    4968:	4628      	mov	r0, r5
    496a:	b004      	add	sp, #16
    496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004970 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    4970:	28ff      	cmp	r0, #255	; 0xff
    4972:	b508      	push	{r3, lr}
    4974:	d00f      	beq.n	4996 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    4976:	f000 0370 	and.w	r3, r0, #112	; 0x70
    497a:	2b20      	cmp	r3, #32
    497c:	d018      	beq.n	49b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
    497e:	d90c      	bls.n	499a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
    4980:	2b40      	cmp	r3, #64	; 0x40
    4982:	d010      	beq.n	49a6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
    4984:	2b50      	cmp	r3, #80	; 0x50
    4986:	d006      	beq.n	4996 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    4988:	2b30      	cmp	r3, #48	; 0x30
    498a:	d10a      	bne.n	49a2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
    498c:	4608      	mov	r0, r1
    498e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4992:	f008 be83 	b.w	d69c <_Unwind_GetDataRelBase>
    4996:	2000      	movs	r0, #0
    4998:	bd08      	pop	{r3, pc}
    499a:	2b00      	cmp	r3, #0
    499c:	d0fb      	beq.n	4996 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    499e:	2b10      	cmp	r3, #16
    49a0:	d0f9      	beq.n	4996 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
    49a2:	f008 fe83 	bl	d6ac <abort>
    49a6:	4608      	mov	r0, r1
    49a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    49ac:	f008 be66 	b.w	d67c <_Unwind_GetRegionStart>
    49b0:	4608      	mov	r0, r1
    49b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    49b6:	f008 be75 	b.w	d6a4 <_Unwind_GetTextRelBase>
    49ba:	bf00      	nop

000049bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    49bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49be:	460c      	mov	r4, r1
    49c0:	4616      	mov	r6, r2
    49c2:	4607      	mov	r7, r0
    49c4:	b108      	cbz	r0, 49ca <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
    49c6:	f008 fe59 	bl	d67c <_Unwind_GetRegionStart>
    49ca:	6030      	str	r0, [r6, #0]
    49cc:	7825      	ldrb	r5, [r4, #0]
    49ce:	2dff      	cmp	r5, #255	; 0xff
    49d0:	f104 0401 	add.w	r4, r4, #1
    49d4:	d033      	beq.n	4a3e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
    49d6:	4639      	mov	r1, r7
    49d8:	4628      	mov	r0, r5
    49da:	f7ff ffc9 	bl	4970 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    49de:	4622      	mov	r2, r4
    49e0:	4601      	mov	r1, r0
    49e2:	1d33      	adds	r3, r6, #4
    49e4:	4628      	mov	r0, r5
    49e6:	f7ff ff6b 	bl	48c0 <_ZL28read_encoded_value_with_basehjPKhPj>
    49ea:	4604      	mov	r4, r0
    49ec:	1c60      	adds	r0, r4, #1
    49ee:	7823      	ldrb	r3, [r4, #0]
    49f0:	7533      	strb	r3, [r6, #20]
    49f2:	2bff      	cmp	r3, #255	; 0xff
    49f4:	d02a      	beq.n	4a4c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
    49f6:	2310      	movs	r3, #16
    49f8:	2200      	movs	r2, #0
    49fa:	7533      	strb	r3, [r6, #20]
    49fc:	4613      	mov	r3, r2
    49fe:	f810 1b01 	ldrb.w	r1, [r0], #1
    4a02:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    4a06:	409c      	lsls	r4, r3
    4a08:	0609      	lsls	r1, r1, #24
    4a0a:	ea42 0204 	orr.w	r2, r2, r4
    4a0e:	f103 0307 	add.w	r3, r3, #7
    4a12:	d4f4      	bmi.n	49fe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x42>
    4a14:	4402      	add	r2, r0
    4a16:	60f2      	str	r2, [r6, #12]
    4a18:	7803      	ldrb	r3, [r0, #0]
    4a1a:	7573      	strb	r3, [r6, #21]
    4a1c:	2400      	movs	r4, #0
    4a1e:	3001      	adds	r0, #1
    4a20:	4623      	mov	r3, r4
    4a22:	f810 1b01 	ldrb.w	r1, [r0], #1
    4a26:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    4a2a:	409d      	lsls	r5, r3
    4a2c:	060a      	lsls	r2, r1, #24
    4a2e:	ea44 0405 	orr.w	r4, r4, r5
    4a32:	f103 0307 	add.w	r3, r3, #7
    4a36:	d4f4      	bmi.n	4a22 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x66>
    4a38:	4404      	add	r4, r0
    4a3a:	6134      	str	r4, [r6, #16]
    4a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a3e:	6070      	str	r0, [r6, #4]
    4a40:	7823      	ldrb	r3, [r4, #0]
    4a42:	7533      	strb	r3, [r6, #20]
    4a44:	2bff      	cmp	r3, #255	; 0xff
    4a46:	f104 0001 	add.w	r0, r4, #1
    4a4a:	d1d4      	bne.n	49f6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>
    4a4c:	2300      	movs	r3, #0
    4a4e:	60f3      	str	r3, [r6, #12]
    4a50:	e7e2      	b.n	4a18 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
    4a52:	bf00      	nop

00004a54 <__gxx_personality_v0>:
    4a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a58:	f000 0303 	and.w	r3, r0, #3
    4a5c:	b093      	sub	sp, #76	; 0x4c
    4a5e:	2500      	movs	r5, #0
    4a60:	2b01      	cmp	r3, #1
    4a62:	460e      	mov	r6, r1
    4a64:	4614      	mov	r4, r2
    4a66:	9506      	str	r5, [sp, #24]
    4a68:	f000 80a6 	beq.w	4bb8 <__gxx_personality_v0+0x164>
    4a6c:	d30e      	bcc.n	4a8c <__gxx_personality_v0+0x38>
    4a6e:	2b02      	cmp	r3, #2
    4a70:	d10a      	bne.n	4a88 <__gxx_personality_v0+0x34>
    4a72:	4630      	mov	r0, r6
    4a74:	4621      	mov	r1, r4
    4a76:	f008 fdeb 	bl	d650 <__gnu_unwind_frame>
    4a7a:	2800      	cmp	r0, #0
    4a7c:	f000 80a4 	beq.w	4bc8 <__gxx_personality_v0+0x174>
    4a80:	2009      	movs	r0, #9
    4a82:	b013      	add	sp, #76	; 0x4c
    4a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a88:	f008 fe10 	bl	d6ac <abort>
    4a8c:	f000 0008 	and.w	r0, r0, #8
    4a90:	fa5f f880 	uxtb.w	r8, r0
    4a94:	f04f 0901 	mov.w	r9, #1
    4a98:	aa12      	add	r2, sp, #72	; 0x48
    4a9a:	2100      	movs	r1, #0
    4a9c:	f842 6d2c 	str.w	r6, [r2, #-44]!
    4aa0:	460b      	mov	r3, r1
    4aa2:	9200      	str	r2, [sp, #0]
    4aa4:	4620      	mov	r0, r4
    4aa6:	220c      	movs	r2, #12
    4aa8:	f008 f888 	bl	cbbc <_Unwind_VRS_Set>
    4aac:	4620      	mov	r0, r4
    4aae:	f008 fdeb 	bl	d688 <_Unwind_GetLanguageSpecificData>
    4ab2:	4607      	mov	r7, r0
    4ab4:	2800      	cmp	r0, #0
    4ab6:	d0dc      	beq.n	4a72 <__gxx_personality_v0+0x1e>
    4ab8:	aa0c      	add	r2, sp, #48	; 0x30
    4aba:	4639      	mov	r1, r7
    4abc:	4620      	mov	r0, r4
    4abe:	9203      	str	r2, [sp, #12]
    4ac0:	f7ff ff7c 	bl	49bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    4ac4:	4621      	mov	r1, r4
    4ac6:	4683      	mov	fp, r0
    4ac8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4acc:	f7ff ff50 	bl	4970 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4ad0:	ad0b      	add	r5, sp, #44	; 0x2c
    4ad2:	2100      	movs	r1, #0
    4ad4:	900e      	str	r0, [sp, #56]	; 0x38
    4ad6:	460b      	mov	r3, r1
    4ad8:	220f      	movs	r2, #15
    4ada:	9500      	str	r5, [sp, #0]
    4adc:	4620      	mov	r0, r4
    4ade:	f008 f845 	bl	cb6c <_Unwind_VRS_Get>
    4ae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4ae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4ae6:	f022 0201 	bic.w	r2, r2, #1
    4aea:	459b      	cmp	fp, r3
    4aec:	ea48 0809 	orr.w	r8, r8, r9
    4af0:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    4af4:	d239      	bcs.n	4b6a <__gxx_personality_v0+0x116>
    4af6:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
    4afa:	2100      	movs	r1, #0
    4afc:	4650      	mov	r0, sl
    4afe:	f7ff ff37 	bl	4970 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4b02:	465a      	mov	r2, fp
    4b04:	4601      	mov	r1, r0
    4b06:	ab09      	add	r3, sp, #36	; 0x24
    4b08:	4650      	mov	r0, sl
    4b0a:	f7ff fed9 	bl	48c0 <_ZL28read_encoded_value_with_basehjPKhPj>
    4b0e:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
    4b12:	4683      	mov	fp, r0
    4b14:	2100      	movs	r1, #0
    4b16:	4650      	mov	r0, sl
    4b18:	f7ff ff2a 	bl	4970 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4b1c:	465a      	mov	r2, fp
    4b1e:	4601      	mov	r1, r0
    4b20:	ab0a      	add	r3, sp, #40	; 0x28
    4b22:	4650      	mov	r0, sl
    4b24:	f7ff fecc 	bl	48c0 <_ZL28read_encoded_value_with_basehjPKhPj>
    4b28:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
    4b2c:	4683      	mov	fp, r0
    4b2e:	2100      	movs	r1, #0
    4b30:	4650      	mov	r0, sl
    4b32:	f7ff ff1d 	bl	4970 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4b36:	465a      	mov	r2, fp
    4b38:	4601      	mov	r1, r0
    4b3a:	462b      	mov	r3, r5
    4b3c:	4650      	mov	r0, sl
    4b3e:	f7ff febf 	bl	48c0 <_ZL28read_encoded_value_with_basehjPKhPj>
    4b42:	2100      	movs	r1, #0
    4b44:	4683      	mov	fp, r0
    4b46:	460b      	mov	r3, r1
    4b48:	f81b eb01 	ldrb.w	lr, [fp], #1
    4b4c:	f00e 027f 	and.w	r2, lr, #127	; 0x7f
    4b50:	409a      	lsls	r2, r3
    4b52:	f01e 0f80 	tst.w	lr, #128	; 0x80
    4b56:	ea41 0102 	orr.w	r1, r1, r2
    4b5a:	f103 0307 	add.w	r3, r3, #7
    4b5e:	d1f3      	bne.n	4b48 <__gxx_personality_v0+0xf4>
    4b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b64:	4413      	add	r3, r2
    4b66:	4599      	cmp	r9, r3
    4b68:	d21d      	bcs.n	4ba6 <__gxx_personality_v0+0x152>
    4b6a:	f04f 0900 	mov.w	r9, #0
    4b6e:	f04f 0b01 	mov.w	fp, #1
    4b72:	2500      	movs	r5, #0
    4b74:	f018 0f01 	tst.w	r8, #1
    4b78:	d04c      	beq.n	4c14 <__gxx_personality_v0+0x1c0>
    4b7a:	f1bb 0f02 	cmp.w	fp, #2
    4b7e:	f43f af78 	beq.w	4a72 <__gxx_personality_v0+0x1e>
    4b82:	ab0a      	add	r3, sp, #40	; 0x28
    4b84:	2100      	movs	r1, #0
    4b86:	4620      	mov	r0, r4
    4b88:	9300      	str	r3, [sp, #0]
    4b8a:	220d      	movs	r2, #13
    4b8c:	460b      	mov	r3, r1
    4b8e:	9c06      	ldr	r4, [sp, #24]
    4b90:	f007 ffec 	bl	cb6c <_Unwind_VRS_Get>
    4b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b96:	6274      	str	r4, [r6, #36]	; 0x24
    4b98:	62b5      	str	r5, [r6, #40]	; 0x28
    4b9a:	62f7      	str	r7, [r6, #44]	; 0x2c
    4b9c:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
    4ba0:	6233      	str	r3, [r6, #32]
    4ba2:	2006      	movs	r0, #6
    4ba4:	e76d      	b.n	4a82 <__gxx_personality_v0+0x2e>
    4ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4ba8:	4413      	add	r3, r2
    4baa:	4599      	cmp	r9, r3
    4bac:	f0c0 8092 	bcc.w	4cd4 <__gxx_personality_v0+0x280>
    4bb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4bb2:	459b      	cmp	fp, r3
    4bb4:	d39f      	bcc.n	4af6 <__gxx_personality_v0+0xa2>
    4bb6:	e7d8      	b.n	4b6a <__gxx_personality_v0+0x116>
    4bb8:	f000 0008 	and.w	r0, r0, #8
    4bbc:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    4bc0:	b130      	cbz	r0, 4bd0 <__gxx_personality_v0+0x17c>
    4bc2:	f04f 0902 	mov.w	r9, #2
    4bc6:	e767      	b.n	4a98 <__gxx_personality_v0+0x44>
    4bc8:	2008      	movs	r0, #8
    4bca:	b013      	add	sp, #76	; 0x4c
    4bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bd0:	a90c      	add	r1, sp, #48	; 0x30
    4bd2:	9100      	str	r1, [sp, #0]
    4bd4:	9103      	str	r1, [sp, #12]
    4bd6:	4610      	mov	r0, r2
    4bd8:	4643      	mov	r3, r8
    4bda:	4641      	mov	r1, r8
    4bdc:	220d      	movs	r2, #13
    4bde:	6a35      	ldr	r5, [r6, #32]
    4be0:	f007 ffc4 	bl	cb6c <_Unwind_VRS_Get>
    4be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4be6:	429d      	cmp	r5, r3
    4be8:	d1eb      	bne.n	4bc2 <__gxx_personality_v0+0x16e>
    4bea:	aa12      	add	r2, sp, #72	; 0x48
    4bec:	4641      	mov	r1, r8
    4bee:	f842 6d2c 	str.w	r6, [r2, #-44]!
    4bf2:	4643      	mov	r3, r8
    4bf4:	9200      	str	r2, [sp, #0]
    4bf6:	4620      	mov	r0, r4
    4bf8:	220c      	movs	r2, #12
    4bfa:	f106 0528 	add.w	r5, r6, #40	; 0x28
    4bfe:	f007 ffdd 	bl	cbbc <_Unwind_VRS_Set>
    4c02:	e895 02a0 	ldmia.w	r5, {r5, r7, r9}
    4c06:	f1b9 0f00 	cmp.w	r9, #0
    4c0a:	f000 8115 	beq.w	4e38 <__gxx_personality_v0+0x3e4>
    4c0e:	f04f 0b03 	mov.w	fp, #3
    4c12:	e03d      	b.n	4c90 <__gxx_personality_v0+0x23c>
    4c14:	f018 0f08 	tst.w	r8, #8
    4c18:	d036      	beq.n	4c88 <__gxx_personality_v0+0x234>
    4c1a:	f1bb 0f01 	cmp.w	fp, #1
    4c1e:	f000 811a 	beq.w	4e56 <__gxx_personality_v0+0x402>
    4c22:	2d00      	cmp	r5, #0
    4c24:	f2c0 8113 	blt.w	4e4e <__gxx_personality_v0+0x3fa>
    4c28:	ab12      	add	r3, sp, #72	; 0x48
    4c2a:	2100      	movs	r1, #0
    4c2c:	f843 6d28 	str.w	r6, [r3, #-40]!
    4c30:	460a      	mov	r2, r1
    4c32:	9300      	str	r3, [sp, #0]
    4c34:	4620      	mov	r0, r4
    4c36:	460b      	mov	r3, r1
    4c38:	f007 ffc0 	bl	cbbc <_Unwind_VRS_Set>
    4c3c:	aa12      	add	r2, sp, #72	; 0x48
    4c3e:	2100      	movs	r1, #0
    4c40:	f842 5d24 	str.w	r5, [r2, #-36]!
    4c44:	460b      	mov	r3, r1
    4c46:	9200      	str	r2, [sp, #0]
    4c48:	4620      	mov	r0, r4
    4c4a:	2201      	movs	r2, #1
    4c4c:	f007 ffb6 	bl	cbbc <_Unwind_VRS_Set>
    4c50:	ad0a      	add	r5, sp, #40	; 0x28
    4c52:	2100      	movs	r1, #0
    4c54:	460b      	mov	r3, r1
    4c56:	4620      	mov	r0, r4
    4c58:	220f      	movs	r2, #15
    4c5a:	9500      	str	r5, [sp, #0]
    4c5c:	f007 ff86 	bl	cb6c <_Unwind_VRS_Get>
    4c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4c62:	9500      	str	r5, [sp, #0]
    4c64:	f003 0301 	and.w	r3, r3, #1
    4c68:	2100      	movs	r1, #0
    4c6a:	4620      	mov	r0, r4
    4c6c:	220f      	movs	r2, #15
    4c6e:	ea49 0403 	orr.w	r4, r9, r3
    4c72:	460b      	mov	r3, r1
    4c74:	940a      	str	r4, [sp, #40]	; 0x28
    4c76:	f007 ffa1 	bl	cbbc <_Unwind_VRS_Set>
    4c7a:	f1bb 0f02 	cmp.w	fp, #2
    4c7e:	d036      	beq.n	4cee <__gxx_personality_v0+0x29a>
    4c80:	2007      	movs	r0, #7
    4c82:	b013      	add	sp, #76	; 0x4c
    4c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c88:	f1bb 0f01 	cmp.w	fp, #1
    4c8c:	f000 80d4 	beq.w	4e38 <__gxx_personality_v0+0x3e4>
    4c90:	2d00      	cmp	r5, #0
    4c92:	dac9      	bge.n	4c28 <__gxx_personality_v0+0x1d4>
    4c94:	4639      	mov	r1, r7
    4c96:	9a03      	ldr	r2, [sp, #12]
    4c98:	4620      	mov	r0, r4
    4c9a:	f7ff fe8f 	bl	49bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    4c9e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4ca2:	4621      	mov	r1, r4
    4ca4:	f7ff fe64 	bl	4970 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4ca8:	00aa      	lsls	r2, r5, #2
    4caa:	f082 0203 	eor.w	r2, r2, #3
    4cae:	43d2      	mvns	r2, r2
    4cb0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    4cb2:	900e      	str	r0, [sp, #56]	; 0x38
    4cb4:	58bb      	ldr	r3, [r7, r2]
    4cb6:	4417      	add	r7, r2
    4cb8:	b133      	cbz	r3, 4cc8 <__gxx_personality_v0+0x274>
    4cba:	463a      	mov	r2, r7
    4cbc:	2300      	movs	r3, #0
    4cbe:	f852 1f04 	ldr.w	r1, [r2, #4]!
    4cc2:	3301      	adds	r3, #1
    4cc4:	2900      	cmp	r1, #0
    4cc6:	d1fa      	bne.n	4cbe <__gxx_personality_v0+0x26a>
    4cc8:	2204      	movs	r2, #4
    4cca:	62b3      	str	r3, [r6, #40]	; 0x28
    4ccc:	62f0      	str	r0, [r6, #44]	; 0x2c
    4cce:	6377      	str	r7, [r6, #52]	; 0x34
    4cd0:	6332      	str	r2, [r6, #48]	; 0x30
    4cd2:	e7a9      	b.n	4c28 <__gxx_personality_v0+0x1d4>
    4cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4cd6:	b17b      	cbz	r3, 4cf8 <__gxx_personality_v0+0x2a4>
    4cd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4cda:	eb03 0902 	add.w	r9, r3, r2
    4cde:	b969      	cbnz	r1, 4cfc <__gxx_personality_v0+0x2a8>
    4ce0:	f1b9 0f00 	cmp.w	r9, #0
    4ce4:	f43f aec5 	beq.w	4a72 <__gxx_personality_v0+0x1e>
    4ce8:	f04f 0b02 	mov.w	fp, #2
    4cec:	e741      	b.n	4b72 <__gxx_personality_v0+0x11e>
    4cee:	4630      	mov	r0, r6
    4cf0:	f7ff fc0c 	bl	450c <__cxa_begin_cleanup>
    4cf4:	2007      	movs	r0, #7
    4cf6:	e6c4      	b.n	4a82 <__gxx_personality_v0+0x2e>
    4cf8:	4699      	mov	r9, r3
    4cfa:	e7f0      	b.n	4cde <__gxx_personality_v0+0x28a>
    4cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4cfe:	3901      	subs	r1, #1
    4d00:	1858      	adds	r0, r3, r1
    4d02:	f1b9 0f00 	cmp.w	r9, #0
    4d06:	f43f aeb4 	beq.w	4a72 <__gxx_personality_v0+0x1e>
    4d0a:	2800      	cmp	r0, #0
    4d0c:	d0ec      	beq.n	4ce8 <__gxx_personality_v0+0x294>
    4d0e:	f018 0308 	ands.w	r3, r8, #8
    4d12:	9305      	str	r3, [sp, #20]
    4d14:	d07c      	beq.n	4e10 <__gxx_personality_v0+0x3bc>
    4d16:	2247      	movs	r2, #71	; 0x47
    4d18:	234e      	movs	r3, #78	; 0x4e
    4d1a:	2155      	movs	r1, #85	; 0x55
    4d1c:	7032      	strb	r2, [r6, #0]
    4d1e:	7073      	strb	r3, [r6, #1]
    4d20:	2243      	movs	r2, #67	; 0x43
    4d22:	2346      	movs	r3, #70	; 0x46
    4d24:	70b1      	strb	r1, [r6, #2]
    4d26:	70f2      	strb	r2, [r6, #3]
    4d28:	214f      	movs	r1, #79	; 0x4f
    4d2a:	2252      	movs	r2, #82	; 0x52
    4d2c:	7133      	strb	r3, [r6, #4]
    4d2e:	2300      	movs	r3, #0
    4d30:	7171      	strb	r1, [r6, #5]
    4d32:	71b2      	strb	r2, [r6, #6]
    4d34:	71f3      	strb	r3, [r6, #7]
    4d36:	f04f 0b00 	mov.w	fp, #0
    4d3a:	9404      	str	r4, [sp, #16]
    4d3c:	a908      	add	r1, sp, #32
    4d3e:	f7ff fda5 	bl	488c <_ZL12read_sleb128PKhPl>
    4d42:	a909      	add	r1, sp, #36	; 0x24
    4d44:	4682      	mov	sl, r0
    4d46:	f7ff fda1 	bl	488c <_ZL12read_sleb128PKhPl>
    4d4a:	9b08      	ldr	r3, [sp, #32]
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	d02f      	beq.n	4db0 <__gxx_personality_v0+0x35c>
    4d50:	dd31      	ble.n	4db6 <__gxx_personality_v0+0x362>
    4d52:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4d56:	28ff      	cmp	r0, #255	; 0xff
    4d58:	d058      	beq.n	4e0c <__gxx_personality_v0+0x3b8>
    4d5a:	f000 0207 	and.w	r2, r0, #7
    4d5e:	2a04      	cmp	r2, #4
    4d60:	f63f ae92 	bhi.w	4a88 <__gxx_personality_v0+0x34>
    4d64:	a101      	add	r1, pc, #4	; (adr r1, 4d6c <__gxx_personality_v0+0x318>)
    4d66:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4d6a:	bf00      	nop
    4d6c:	00004dab 	.word	0x00004dab
    4d70:	00004a89 	.word	0x00004a89
    4d74:	00004da5 	.word	0x00004da5
    4d78:	00004dab 	.word	0x00004dab
    4d7c:	00004d81 	.word	0x00004d81
    4d80:	00db      	lsls	r3, r3, #3
    4d82:	425a      	negs	r2, r3
    4d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4d86:	990e      	ldr	r1, [sp, #56]	; 0x38
    4d88:	441a      	add	r2, r3
    4d8a:	ab0a      	add	r3, sp, #40	; 0x28
    4d8c:	f7ff fd98 	bl	48c0 <_ZL28read_encoded_value_with_basehjPKhPj>
    4d90:	990a      	ldr	r1, [sp, #40]	; 0x28
    4d92:	b1f9      	cbz	r1, 4dd4 <__gxx_personality_v0+0x380>
    4d94:	2e00      	cmp	r6, #0
    4d96:	d152      	bne.n	4e3e <__gxx_personality_v0+0x3ea>
    4d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	d043      	beq.n	4e26 <__gxx_personality_v0+0x3d2>
    4d9e:	eb0a 0003 	add.w	r0, sl, r3
    4da2:	e7cb      	b.n	4d3c <__gxx_personality_v0+0x2e8>
    4da4:	005b      	lsls	r3, r3, #1
    4da6:	425a      	negs	r2, r3
    4da8:	e7ec      	b.n	4d84 <__gxx_personality_v0+0x330>
    4daa:	009b      	lsls	r3, r3, #2
    4dac:	425a      	negs	r2, r3
    4dae:	e7e9      	b.n	4d84 <__gxx_personality_v0+0x330>
    4db0:	f04f 0b01 	mov.w	fp, #1
    4db4:	e7f0      	b.n	4d98 <__gxx_personality_v0+0x344>
    4db6:	3301      	adds	r3, #1
    4db8:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
    4dbc:	b10e      	cbz	r6, 4dc2 <__gxx_personality_v0+0x36e>
    4dbe:	9a05      	ldr	r2, [sp, #20]
    4dc0:	b16a      	cbz	r2, 4dde <__gxx_personality_v0+0x38a>
    4dc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4dc8:	f1d3 0301 	rsbs	r3, r3, #1
    4dcc:	bf38      	it	cc
    4dce:	2300      	movcc	r3, #0
    4dd0:	2b00      	cmp	r3, #0
    4dd2:	d0e1      	beq.n	4d98 <__gxx_personality_v0+0x344>
    4dd4:	9c04      	ldr	r4, [sp, #16]
    4dd6:	9d08      	ldr	r5, [sp, #32]
    4dd8:	f04f 0b03 	mov.w	fp, #3
    4ddc:	e6ca      	b.n	4b74 <__gxx_personality_v0+0x120>
    4dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4de0:	9806      	ldr	r0, [sp, #24]
    4de2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    4de6:	900b      	str	r0, [sp, #44]	; 0x2c
    4de8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4dec:	461c      	mov	r4, r3
    4dee:	b919      	cbnz	r1, 4df8 <__gxx_personality_v0+0x3a4>
    4df0:	e017      	b.n	4e22 <__gxx_personality_v0+0x3ce>
    4df2:	f854 1f04 	ldr.w	r1, [r4, #4]!
    4df6:	b1a1      	cbz	r1, 4e22 <__gxx_personality_v0+0x3ce>
    4df8:	4421      	add	r1, r4
    4dfa:	4630      	mov	r0, r6
    4dfc:	2200      	movs	r2, #0
    4dfe:	462b      	mov	r3, r5
    4e00:	f7ff fb2e 	bl	4460 <__cxa_type_match>
    4e04:	2800      	cmp	r0, #0
    4e06:	d0f4      	beq.n	4df2 <__gxx_personality_v0+0x39e>
    4e08:	2300      	movs	r3, #0
    4e0a:	e7e1      	b.n	4dd0 <__gxx_personality_v0+0x37c>
    4e0c:	2200      	movs	r2, #0
    4e0e:	e7b9      	b.n	4d84 <__gxx_personality_v0+0x330>
    4e10:	79f3      	ldrb	r3, [r6, #7]
    4e12:	2b01      	cmp	r3, #1
    4e14:	bf0c      	ite	eq
    4e16:	f856 3c20 	ldreq.w	r3, [r6, #-32]
    4e1a:	f106 0358 	addne.w	r3, r6, #88	; 0x58
    4e1e:	9306      	str	r3, [sp, #24]
    4e20:	e789      	b.n	4d36 <__gxx_personality_v0+0x2e2>
    4e22:	2301      	movs	r3, #1
    4e24:	e7d4      	b.n	4dd0 <__gxx_personality_v0+0x37c>
    4e26:	9c04      	ldr	r4, [sp, #16]
    4e28:	f1bb 0f00 	cmp.w	fp, #0
    4e2c:	f43f ae21 	beq.w	4a72 <__gxx_personality_v0+0x1e>
    4e30:	461d      	mov	r5, r3
    4e32:	f04f 0b02 	mov.w	fp, #2
    4e36:	e69d      	b.n	4b74 <__gxx_personality_v0+0x120>
    4e38:	4630      	mov	r0, r6
    4e3a:	f7ff fbef 	bl	461c <__cxa_call_terminate>
    4e3e:	4630      	mov	r0, r6
    4e40:	2200      	movs	r2, #0
    4e42:	ab06      	add	r3, sp, #24
    4e44:	f7ff fb0c 	bl	4460 <__cxa_type_match>
    4e48:	2800      	cmp	r0, #0
    4e4a:	d1c3      	bne.n	4dd4 <__gxx_personality_v0+0x380>
    4e4c:	e7a4      	b.n	4d98 <__gxx_personality_v0+0x344>
    4e4e:	f000 f825 	bl	4e9c <_ZSt10unexpectedv>
    4e52:	f7ff fc5f 	bl	4714 <__cxa_begin_catch>
    4e56:	f000 f815 	bl	4e84 <_ZSt9terminatev>
    4e5a:	bf00      	nop

00004e5c <_ZN10__cxxabiv111__terminateEPFvvE>:
    4e5c:	b508      	push	{r3, lr}
    4e5e:	4780      	blx	r0
    4e60:	f008 fc24 	bl	d6ac <abort>
    4e64:	f7ff fc56 	bl	4714 <__cxa_begin_catch>
    4e68:	f008 fc20 	bl	d6ac <abort>
    4e6c:	460c      	mov	r4, r1
    4e6e:	4605      	mov	r5, r0
    4e70:	f7ff fc96 	bl	47a0 <__cxa_end_catch>
    4e74:	3401      	adds	r4, #1
    4e76:	d001      	beq.n	4e7c <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
    4e78:	f7ff faec 	bl	4454 <__cxa_end_cleanup>
    4e7c:	4628      	mov	r0, r5
    4e7e:	f7ff fbdd 	bl	463c <__cxa_call_unexpected>
    4e82:	bf00      	nop

00004e84 <_ZSt9terminatev>:
    4e84:	b508      	push	{r3, lr}
    4e86:	4b02      	ldr	r3, [pc, #8]	; (4e90 <_ZSt9terminatev+0xc>)
    4e88:	6818      	ldr	r0, [r3, #0]
    4e8a:	f7ff ffe7 	bl	4e5c <_ZN10__cxxabiv111__terminateEPFvvE>
    4e8e:	bf00      	nop
    4e90:	1fff84c4 	.word	0x1fff84c4

00004e94 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    4e94:	b508      	push	{r3, lr}
    4e96:	4780      	blx	r0
    4e98:	f7ff fff4 	bl	4e84 <_ZSt9terminatev>

00004e9c <_ZSt10unexpectedv>:
    4e9c:	b508      	push	{r3, lr}
    4e9e:	4b02      	ldr	r3, [pc, #8]	; (4ea8 <_ZSt10unexpectedv+0xc>)
    4ea0:	6818      	ldr	r0, [r3, #0]
    4ea2:	f7ff fff7 	bl	4e94 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    4ea6:	bf00      	nop
    4ea8:	1fff84c0 	.word	0x1fff84c0

00004eac <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
    4eac:	2801      	cmp	r0, #1
    4eae:	b510      	push	{r4, lr}
    4eb0:	d81a      	bhi.n	4ee8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
    4eb2:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
    4eb6:	f3bf 8f5f 	dmb	sy
    4eba:	e853 2f00 	ldrex	r2, [r3]
    4ebe:	3a01      	subs	r2, #1
    4ec0:	e843 2000 	strex	r0, r2, [r3]
    4ec4:	2800      	cmp	r0, #0
    4ec6:	d1f8      	bne.n	4eba <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
    4ec8:	f3bf 8f5f 	dmb	sy
    4ecc:	b95a      	cbnz	r2, 4ee6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
    4ece:	f851 3c1c 	ldr.w	r3, [r1, #-28]
    4ed2:	f101 0458 	add.w	r4, r1, #88	; 0x58
    4ed6:	b10b      	cbz	r3, 4edc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
    4ed8:	4620      	mov	r0, r4
    4eda:	4798      	blx	r3
    4edc:	4620      	mov	r0, r4
    4ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ee2:	f7ff ba9d 	b.w	4420 <__cxa_free_exception>
    4ee6:	bd10      	pop	{r4, pc}
    4ee8:	f851 0c14 	ldr.w	r0, [r1, #-20]
    4eec:	f7ff ffb6 	bl	4e5c <_ZN10__cxxabiv111__terminateEPFvvE>

00004ef0 <__cxa_throw>:
    4ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ef4:	4604      	mov	r4, r0
    4ef6:	460f      	mov	r7, r1
    4ef8:	4690      	mov	r8, r2
    4efa:	f7ff fcc3 	bl	4884 <__cxa_get_globals>
    4efe:	4603      	mov	r3, r0
    4f00:	4a1c      	ldr	r2, [pc, #112]	; (4f74 <__cxa_throw+0x84>)
    4f02:	6859      	ldr	r1, [r3, #4]
    4f04:	481c      	ldr	r0, [pc, #112]	; (4f78 <__cxa_throw+0x88>)
    4f06:	1c4e      	adds	r6, r1, #1
    4f08:	605e      	str	r6, [r3, #4]
    4f0a:	f8d0 a000 	ldr.w	sl, [r0]
    4f0e:	6810      	ldr	r0, [r2, #0]
    4f10:	4a1a      	ldr	r2, [pc, #104]	; (4f7c <__cxa_throw+0x8c>)
    4f12:	f844 0c6c 	str.w	r0, [r4, #-108]
    4f16:	232b      	movs	r3, #43	; 0x2b
    4f18:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
    4f1c:	f04f 0e55 	mov.w	lr, #85	; 0x55
    4f20:	2100      	movs	r1, #0
    4f22:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
    4f26:	2643      	movs	r6, #67	; 0x43
    4f28:	f04f 0b01 	mov.w	fp, #1
    4f2c:	f04f 0947 	mov.w	r9, #71	; 0x47
    4f30:	f804 cc57 	strb.w	ip, [r4, #-87]
    4f34:	f804 ec56 	strb.w	lr, [r4, #-86]
    4f38:	f804 1c51 	strb.w	r1, [r4, #-81]
    4f3c:	f844 2c50 	str.w	r2, [r4, #-80]
    4f40:	f804 3c53 	strb.w	r3, [r4, #-83]
    4f44:	f804 3c52 	strb.w	r3, [r4, #-82]
    4f48:	f844 7c78 	str.w	r7, [r4, #-120]
    4f4c:	f844 8c74 	str.w	r8, [r4, #-116]
    4f50:	f844 bc80 	str.w	fp, [r4, #-128]
    4f54:	f844 ac70 	str.w	sl, [r4, #-112]
    4f58:	f804 9c58 	strb.w	r9, [r4, #-88]
    4f5c:	4628      	mov	r0, r5
    4f5e:	f804 6c55 	strb.w	r6, [r4, #-85]
    4f62:	f804 6c54 	strb.w	r6, [r4, #-84]
    4f66:	f008 f9a9 	bl	d2bc <_Unwind_RaiseException>
    4f6a:	4628      	mov	r0, r5
    4f6c:	f7ff fbd2 	bl	4714 <__cxa_begin_catch>
    4f70:	f7ff ff88 	bl	4e84 <_ZSt9terminatev>
    4f74:	1fff84c4 	.word	0x1fff84c4
    4f78:	1fff84c0 	.word	0x1fff84c0
    4f7c:	00004ead 	.word	0x00004ead

00004f80 <__cxa_rethrow>:
    4f80:	b510      	push	{r4, lr}
    4f82:	f7ff fc7f 	bl	4884 <__cxa_get_globals>
    4f86:	6842      	ldr	r2, [r0, #4]
    4f88:	6803      	ldr	r3, [r0, #0]
    4f8a:	3201      	adds	r2, #1
    4f8c:	6042      	str	r2, [r0, #4]
    4f8e:	b16b      	cbz	r3, 4fac <__cxa_rethrow+0x2c>
    4f90:	f893 2020 	ldrb.w	r2, [r3, #32]
    4f94:	2a47      	cmp	r2, #71	; 0x47
    4f96:	d00b      	beq.n	4fb0 <__cxa_rethrow+0x30>
    4f98:	2200      	movs	r2, #0
    4f9a:	6002      	str	r2, [r0, #0]
    4f9c:	f103 0420 	add.w	r4, r3, #32
    4fa0:	4620      	mov	r0, r4
    4fa2:	f008 f9af 	bl	d304 <_Unwind_Resume_or_Rethrow>
    4fa6:	4620      	mov	r0, r4
    4fa8:	f7ff fbb4 	bl	4714 <__cxa_begin_catch>
    4fac:	f7ff ff6a 	bl	4e84 <_ZSt9terminatev>
    4fb0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    4fb4:	2a4e      	cmp	r2, #78	; 0x4e
    4fb6:	d1ef      	bne.n	4f98 <__cxa_rethrow+0x18>
    4fb8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    4fbc:	2a55      	cmp	r2, #85	; 0x55
    4fbe:	d1eb      	bne.n	4f98 <__cxa_rethrow+0x18>
    4fc0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    4fc4:	2a43      	cmp	r2, #67	; 0x43
    4fc6:	d1e7      	bne.n	4f98 <__cxa_rethrow+0x18>
    4fc8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4fcc:	2a43      	cmp	r2, #67	; 0x43
    4fce:	d1e3      	bne.n	4f98 <__cxa_rethrow+0x18>
    4fd0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    4fd4:	2a2b      	cmp	r2, #43	; 0x2b
    4fd6:	d1df      	bne.n	4f98 <__cxa_rethrow+0x18>
    4fd8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    4fdc:	2a2b      	cmp	r2, #43	; 0x2b
    4fde:	d1db      	bne.n	4f98 <__cxa_rethrow+0x18>
    4fe0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    4fe4:	2a01      	cmp	r2, #1
    4fe6:	d8d7      	bhi.n	4f98 <__cxa_rethrow+0x18>
    4fe8:	695a      	ldr	r2, [r3, #20]
    4fea:	4252      	negs	r2, r2
    4fec:	615a      	str	r2, [r3, #20]
    4fee:	e7d5      	b.n	4f9c <__cxa_rethrow+0x1c>

00004ff0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    4ff0:	b510      	push	{r4, lr}
    4ff2:	4b03      	ldr	r3, [pc, #12]	; (5000 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
    4ff4:	6003      	str	r3, [r0, #0]
    4ff6:	4604      	mov	r4, r0
    4ff8:	f000 f8da 	bl	51b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    4ffc:	4620      	mov	r0, r4
    4ffe:	bd10      	pop	{r4, pc}
    5000:	00012ec8 	.word	0x00012ec8

00005004 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    5004:	b510      	push	{r4, lr}
    5006:	4b05      	ldr	r3, [pc, #20]	; (501c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
    5008:	6003      	str	r3, [r0, #0]
    500a:	4604      	mov	r4, r0
    500c:	f000 f8d0 	bl	51b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    5010:	4620      	mov	r0, r4
    5012:	f7ff f98d 	bl	4330 <_ZdlPv>
    5016:	4620      	mov	r0, r4
    5018:	bd10      	pop	{r4, pc}
    501a:	bf00      	nop
    501c:	00012ec8 	.word	0x00012ec8

00005020 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    5020:	b570      	push	{r4, r5, r6, lr}
    5022:	b084      	sub	sp, #16
    5024:	460d      	mov	r5, r1
    5026:	9c08      	ldr	r4, [sp, #32]
    5028:	4294      	cmp	r4, r2
    502a:	4606      	mov	r6, r0
    502c:	d007      	beq.n	503e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1e>
    502e:	68b0      	ldr	r0, [r6, #8]
    5030:	6806      	ldr	r6, [r0, #0]
    5032:	9400      	str	r4, [sp, #0]
    5034:	4629      	mov	r1, r5
    5036:	6a34      	ldr	r4, [r6, #32]
    5038:	47a0      	blx	r4
    503a:	b004      	add	sp, #16
    503c:	bd70      	pop	{r4, r5, r6, pc}
    503e:	4619      	mov	r1, r3
    5040:	9203      	str	r2, [sp, #12]
    5042:	9302      	str	r3, [sp, #8]
    5044:	f000 f878 	bl	5138 <_ZNKSt9type_infoeqERKS_>
    5048:	9a03      	ldr	r2, [sp, #12]
    504a:	9b02      	ldr	r3, [sp, #8]
    504c:	2800      	cmp	r0, #0
    504e:	d0ee      	beq.n	502e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
    5050:	2006      	movs	r0, #6
    5052:	e7f2      	b.n	503a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>

00005054 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    5054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5058:	b085      	sub	sp, #20
    505a:	4688      	mov	r8, r1
    505c:	4619      	mov	r1, r3
    505e:	461f      	mov	r7, r3
    5060:	4692      	mov	sl, r2
    5062:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    5064:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    5068:	9d11      	ldr	r5, [sp, #68]	; 0x44
    506a:	4683      	mov	fp, r0
    506c:	f000 f864 	bl	5138 <_ZNKSt9type_infoeqERKS_>
    5070:	4604      	mov	r4, r0
    5072:	b198      	cbz	r0, 509c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
    5074:	f1b8 0f00 	cmp.w	r8, #0
    5078:	602e      	str	r6, [r5, #0]
    507a:	f885 a004 	strb.w	sl, [r5, #4]
    507e:	db22      	blt.n	50c6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x72>
    5080:	4446      	add	r6, r8
    5082:	2400      	movs	r4, #0
    5084:	45b1      	cmp	r9, r6
    5086:	bf14      	ite	ne
    5088:	f04f 0901 	movne.w	r9, #1
    508c:	f04f 0906 	moveq.w	r9, #6
    5090:	4620      	mov	r0, r4
    5092:	f885 9006 	strb.w	r9, [r5, #6]
    5096:	b005      	add	sp, #20
    5098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    509c:	454e      	cmp	r6, r9
    509e:	d017      	beq.n	50d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    50a0:	f8db 0008 	ldr.w	r0, [fp, #8]
    50a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    50a6:	6804      	ldr	r4, [r0, #0]
    50a8:	9301      	str	r3, [sp, #4]
    50aa:	9600      	str	r6, [sp, #0]
    50ac:	f8cd 9008 	str.w	r9, [sp, #8]
    50b0:	9503      	str	r5, [sp, #12]
    50b2:	69e4      	ldr	r4, [r4, #28]
    50b4:	4641      	mov	r1, r8
    50b6:	4652      	mov	r2, sl
    50b8:	463b      	mov	r3, r7
    50ba:	47a0      	blx	r4
    50bc:	4604      	mov	r4, r0
    50be:	4620      	mov	r0, r4
    50c0:	b005      	add	sp, #20
    50c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50c6:	f118 0f02 	cmn.w	r8, #2
    50ca:	d00a      	beq.n	50e2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8e>
    50cc:	2400      	movs	r4, #0
    50ce:	e7f6      	b.n	50be <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
    50d0:	4658      	mov	r0, fp
    50d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    50d4:	f000 f830 	bl	5138 <_ZNKSt9type_infoeqERKS_>
    50d8:	2800      	cmp	r0, #0
    50da:	d0e1      	beq.n	50a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
    50dc:	f885 a005 	strb.w	sl, [r5, #5]
    50e0:	e7ed      	b.n	50be <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
    50e2:	2301      	movs	r3, #1
    50e4:	71ab      	strb	r3, [r5, #6]
    50e6:	2400      	movs	r4, #0
    50e8:	e7e9      	b.n	50be <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
    50ea:	bf00      	nop

000050ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    50ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50ee:	4607      	mov	r7, r0
    50f0:	460e      	mov	r6, r1
    50f2:	4615      	mov	r5, r2
    50f4:	461c      	mov	r4, r3
    50f6:	f000 f873 	bl	51e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    50fa:	b930      	cbnz	r0, 510a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1e>
    50fc:	68b8      	ldr	r0, [r7, #8]
    50fe:	6807      	ldr	r7, [r0, #0]
    5100:	4623      	mov	r3, r4
    5102:	4631      	mov	r1, r6
    5104:	462a      	mov	r2, r5
    5106:	69bc      	ldr	r4, [r7, #24]
    5108:	47a0      	blx	r4
    510a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000510c <_ZNSt9type_infoD1Ev>:
    510c:	4b01      	ldr	r3, [pc, #4]	; (5114 <_ZNSt9type_infoD1Ev+0x8>)
    510e:	6003      	str	r3, [r0, #0]
    5110:	4770      	bx	lr
    5112:	bf00      	nop
    5114:	00012f48 	.word	0x00012f48

00005118 <_ZNKSt9type_info14__is_pointer_pEv>:
    5118:	2000      	movs	r0, #0
    511a:	4770      	bx	lr

0000511c <_ZNKSt9type_info15__is_function_pEv>:
    511c:	2000      	movs	r0, #0
    511e:	4770      	bx	lr

00005120 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    5120:	2000      	movs	r0, #0
    5122:	4770      	bx	lr

00005124 <_ZNSt9type_infoD0Ev>:
    5124:	b510      	push	{r4, lr}
    5126:	4b03      	ldr	r3, [pc, #12]	; (5134 <_ZNSt9type_infoD0Ev+0x10>)
    5128:	6003      	str	r3, [r0, #0]
    512a:	4604      	mov	r4, r0
    512c:	f7ff f900 	bl	4330 <_ZdlPv>
    5130:	4620      	mov	r0, r4
    5132:	bd10      	pop	{r4, pc}
    5134:	00012f48 	.word	0x00012f48

00005138 <_ZNKSt9type_infoeqERKS_>:
    5138:	4281      	cmp	r1, r0
    513a:	b508      	push	{r3, lr}
    513c:	d011      	beq.n	5162 <_ZNKSt9type_infoeqERKS_+0x2a>
    513e:	6840      	ldr	r0, [r0, #4]
    5140:	7803      	ldrb	r3, [r0, #0]
    5142:	2b2a      	cmp	r3, #42	; 0x2a
    5144:	d00b      	beq.n	515e <_ZNKSt9type_infoeqERKS_+0x26>
    5146:	6849      	ldr	r1, [r1, #4]
    5148:	780b      	ldrb	r3, [r1, #0]
    514a:	2b2a      	cmp	r3, #42	; 0x2a
    514c:	bf08      	it	eq
    514e:	3101      	addeq	r1, #1
    5150:	f009 fc02 	bl	e958 <strcmp>
    5154:	f1d0 0001 	rsbs	r0, r0, #1
    5158:	bf38      	it	cc
    515a:	2000      	movcc	r0, #0
    515c:	bd08      	pop	{r3, pc}
    515e:	2000      	movs	r0, #0
    5160:	bd08      	pop	{r3, pc}
    5162:	2001      	movs	r0, #1
    5164:	bd08      	pop	{r3, pc}
    5166:	bf00      	nop

00005168 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    5168:	f7ff bfe6 	b.w	5138 <_ZNKSt9type_infoeqERKS_>

0000516c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    516c:	b570      	push	{r4, r5, r6, lr}
    516e:	6803      	ldr	r3, [r0, #0]
    5170:	b084      	sub	sp, #16
    5172:	2400      	movs	r4, #0
    5174:	699e      	ldr	r6, [r3, #24]
    5176:	9400      	str	r4, [sp, #0]
    5178:	2310      	movs	r3, #16
    517a:	4615      	mov	r5, r2
    517c:	9302      	str	r3, [sp, #8]
    517e:	6812      	ldr	r2, [r2, #0]
    5180:	f88d 4004 	strb.w	r4, [sp, #4]
    5184:	466b      	mov	r3, sp
    5186:	9403      	str	r4, [sp, #12]
    5188:	47b0      	blx	r6
    518a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    518e:	f003 0306 	and.w	r3, r3, #6
    5192:	2b06      	cmp	r3, #6
    5194:	bf03      	ittte	eq
    5196:	9b00      	ldreq	r3, [sp, #0]
    5198:	602b      	streq	r3, [r5, #0]
    519a:	2001      	moveq	r0, #1
    519c:	4620      	movne	r0, r4
    519e:	b004      	add	sp, #16
    51a0:	bd70      	pop	{r4, r5, r6, pc}
    51a2:	bf00      	nop

000051a4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    51a4:	9800      	ldr	r0, [sp, #0]
    51a6:	4290      	cmp	r0, r2
    51a8:	bf14      	ite	ne
    51aa:	2001      	movne	r0, #1
    51ac:	2006      	moveq	r0, #6
    51ae:	4770      	bx	lr

000051b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    51b0:	b510      	push	{r4, lr}
    51b2:	4b03      	ldr	r3, [pc, #12]	; (51c0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
    51b4:	6003      	str	r3, [r0, #0]
    51b6:	4604      	mov	r4, r0
    51b8:	f7ff ffa8 	bl	510c <_ZNSt9type_infoD1Ev>
    51bc:	4620      	mov	r0, r4
    51be:	bd10      	pop	{r4, pc}
    51c0:	00012f68 	.word	0x00012f68

000051c4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    51c4:	b510      	push	{r4, lr}
    51c6:	4b05      	ldr	r3, [pc, #20]	; (51dc <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
    51c8:	6003      	str	r3, [r0, #0]
    51ca:	4604      	mov	r4, r0
    51cc:	f7ff ff9e 	bl	510c <_ZNSt9type_infoD1Ev>
    51d0:	4620      	mov	r0, r4
    51d2:	f7ff f8ad 	bl	4330 <_ZdlPv>
    51d6:	4620      	mov	r0, r4
    51d8:	bd10      	pop	{r4, pc}
    51da:	bf00      	nop
    51dc:	00012f68 	.word	0x00012f68

000051e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    51e0:	b538      	push	{r3, r4, r5, lr}
    51e2:	4615      	mov	r5, r2
    51e4:	461c      	mov	r4, r3
    51e6:	f7ff ffa7 	bl	5138 <_ZNKSt9type_infoeqERKS_>
    51ea:	b120      	cbz	r0, 51f6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
    51ec:	2208      	movs	r2, #8
    51ee:	2306      	movs	r3, #6
    51f0:	6025      	str	r5, [r4, #0]
    51f2:	60e2      	str	r2, [r4, #12]
    51f4:	7123      	strb	r3, [r4, #4]
    51f6:	bd38      	pop	{r3, r4, r5, pc}

000051f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    51f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51fa:	4616      	mov	r6, r2
    51fc:	461c      	mov	r4, r3
    51fe:	4607      	mov	r7, r0
    5200:	460d      	mov	r5, r1
    5202:	f7ff ff99 	bl	5138 <_ZNKSt9type_infoeqERKS_>
    5206:	b908      	cbnz	r0, 520c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
    5208:	2c03      	cmp	r4, #3
    520a:	d900      	bls.n	520e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
    520c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    520e:	682b      	ldr	r3, [r5, #0]
    5210:	4639      	mov	r1, r7
    5212:	4632      	mov	r2, r6
    5214:	695b      	ldr	r3, [r3, #20]
    5216:	4628      	mov	r0, r5
    5218:	4798      	blx	r3
    521a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000521c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    521c:	b5f0      	push	{r4, r5, r6, r7, lr}
    521e:	b083      	sub	sp, #12
    5220:	4617      	mov	r7, r2
    5222:	9c08      	ldr	r4, [sp, #32]
    5224:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    5226:	42ac      	cmp	r4, r5
    5228:	4606      	mov	r6, r0
    522a:	d00c      	beq.n	5246 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
    522c:	4630      	mov	r0, r6
    522e:	4619      	mov	r1, r3
    5230:	f7ff ff82 	bl	5138 <_ZNKSt9type_infoeqERKS_>
    5234:	b120      	cbz	r0, 5240 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
    5236:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5238:	2301      	movs	r3, #1
    523a:	600c      	str	r4, [r1, #0]
    523c:	710f      	strb	r7, [r1, #4]
    523e:	718b      	strb	r3, [r1, #6]
    5240:	2000      	movs	r0, #0
    5242:	b003      	add	sp, #12
    5244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5246:	9909      	ldr	r1, [sp, #36]	; 0x24
    5248:	9301      	str	r3, [sp, #4]
    524a:	f7ff ff75 	bl	5138 <_ZNKSt9type_infoeqERKS_>
    524e:	9b01      	ldr	r3, [sp, #4]
    5250:	2800      	cmp	r0, #0
    5252:	d0eb      	beq.n	522c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x10>
    5254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5256:	7157      	strb	r7, [r2, #5]
    5258:	e7f2      	b.n	5240 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
    525a:	bf00      	nop

0000525c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
    525c:	b570      	push	{r4, r5, r6, lr}
    525e:	4b3d      	ldr	r3, [pc, #244]	; (5354 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    5260:	781a      	ldrb	r2, [r3, #0]
    5262:	b082      	sub	sp, #8
    5264:	2a00      	cmp	r2, #0
    5266:	d136      	bne.n	52d6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7a>
    5268:	2401      	movs	r4, #1
    526a:	701c      	strb	r4, [r3, #0]
    526c:	f005 fc42 	bl	aaf4 <__cxa_current_exception_type>
    5270:	2800      	cmp	r0, #0
    5272:	d05c      	beq.n	532e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd2>
    5274:	6840      	ldr	r0, [r0, #4]
    5276:	7803      	ldrb	r3, [r0, #0]
    5278:	2b2a      	cmp	r3, #42	; 0x2a
    527a:	ab02      	add	r3, sp, #8
    527c:	bf0c      	ite	eq
    527e:	1905      	addeq	r5, r0, r4
    5280:	4605      	movne	r5, r0
    5282:	2100      	movs	r1, #0
    5284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5288:	f843 2d04 	str.w	r2, [r3, #-4]!
    528c:	4c32      	ldr	r4, [pc, #200]	; (5358 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    528e:	460a      	mov	r2, r1
    5290:	4628      	mov	r0, r5
    5292:	f005 fbbf 	bl	aa14 <__cxa_demangle>
    5296:	6823      	ldr	r3, [r4, #0]
    5298:	4606      	mov	r6, r0
    529a:	68db      	ldr	r3, [r3, #12]
    529c:	482f      	ldr	r0, [pc, #188]	; (535c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
    529e:	2101      	movs	r1, #1
    52a0:	2230      	movs	r2, #48	; 0x30
    52a2:	f008 fc15 	bl	dad0 <fwrite>
    52a6:	9b01      	ldr	r3, [sp, #4]
    52a8:	b17b      	cbz	r3, 52ca <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
    52aa:	6823      	ldr	r3, [r4, #0]
    52ac:	4628      	mov	r0, r5
    52ae:	68d9      	ldr	r1, [r3, #12]
    52b0:	f008 fa48 	bl	d744 <fputs>
    52b4:	6823      	ldr	r3, [r4, #0]
    52b6:	482a      	ldr	r0, [pc, #168]	; (5360 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
    52b8:	68db      	ldr	r3, [r3, #12]
    52ba:	2101      	movs	r1, #1
    52bc:	2202      	movs	r2, #2
    52be:	f008 fc07 	bl	dad0 <fwrite>
    52c2:	9b01      	ldr	r3, [sp, #4]
    52c4:	b18b      	cbz	r3, 52ea <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
    52c6:	f7ff fe5b 	bl	4f80 <__cxa_rethrow>
    52ca:	6823      	ldr	r3, [r4, #0]
    52cc:	4630      	mov	r0, r6
    52ce:	68d9      	ldr	r1, [r3, #12]
    52d0:	f008 fa38 	bl	d744 <fputs>
    52d4:	e7ee      	b.n	52b4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x58>
    52d6:	4b20      	ldr	r3, [pc, #128]	; (5358 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    52d8:	4822      	ldr	r0, [pc, #136]	; (5364 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
    52da:	681b      	ldr	r3, [r3, #0]
    52dc:	2101      	movs	r1, #1
    52de:	68db      	ldr	r3, [r3, #12]
    52e0:	221d      	movs	r2, #29
    52e2:	f008 fbf5 	bl	dad0 <fwrite>
    52e6:	f008 f9e1 	bl	d6ac <abort>
    52ea:	4630      	mov	r0, r6
    52ec:	f008 fc30 	bl	db50 <free>
    52f0:	e7e9      	b.n	52c6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6a>
    52f2:	2901      	cmp	r1, #1
    52f4:	460d      	mov	r5, r1
    52f6:	d127      	bne.n	5348 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xec>
    52f8:	f7ff fa0c 	bl	4714 <__cxa_begin_catch>
    52fc:	6803      	ldr	r3, [r0, #0]
    52fe:	689b      	ldr	r3, [r3, #8]
    5300:	4798      	blx	r3
    5302:	6823      	ldr	r3, [r4, #0]
    5304:	4606      	mov	r6, r0
    5306:	68db      	ldr	r3, [r3, #12]
    5308:	4817      	ldr	r0, [pc, #92]	; (5368 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
    530a:	4629      	mov	r1, r5
    530c:	220b      	movs	r2, #11
    530e:	f008 fbdf 	bl	dad0 <fwrite>
    5312:	6823      	ldr	r3, [r4, #0]
    5314:	4630      	mov	r0, r6
    5316:	68d9      	ldr	r1, [r3, #12]
    5318:	f008 fa14 	bl	d744 <fputs>
    531c:	6823      	ldr	r3, [r4, #0]
    531e:	200a      	movs	r0, #10
    5320:	68d9      	ldr	r1, [r3, #12]
    5322:	f008 f9d5 	bl	d6d0 <fputc>
    5326:	f7ff fa3b 	bl	47a0 <__cxa_end_catch>
    532a:	f008 f9bf 	bl	d6ac <abort>
    532e:	4b0a      	ldr	r3, [pc, #40]	; (5358 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    5330:	480e      	ldr	r0, [pc, #56]	; (536c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
    5332:	681b      	ldr	r3, [r3, #0]
    5334:	4621      	mov	r1, r4
    5336:	68db      	ldr	r3, [r3, #12]
    5338:	222d      	movs	r2, #45	; 0x2d
    533a:	f008 fbc9 	bl	dad0 <fwrite>
    533e:	e7f4      	b.n	532a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
    5340:	f7ff fa2e 	bl	47a0 <__cxa_end_catch>
    5344:	f7ff f886 	bl	4454 <__cxa_end_cleanup>
    5348:	f7ff f9e4 	bl	4714 <__cxa_begin_catch>
    534c:	f7ff fa28 	bl	47a0 <__cxa_end_catch>
    5350:	e7eb      	b.n	532a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
    5352:	bf00      	nop
    5354:	1fff9c48 	.word	0x1fff9c48
    5358:	1fff88f0 	.word	0x1fff88f0
    535c:	00012fe0 	.word	0x00012fe0
    5360:	00013014 	.word	0x00013014
    5364:	00012fc0 	.word	0x00012fc0
    5368:	00013048 	.word	0x00013048
    536c:	00013018 	.word	0x00013018

00005370 <d_make_comp>:
    5370:	b470      	push	{r4, r5, r6}
    5372:	1e4c      	subs	r4, r1, #1
    5374:	2c4a      	cmp	r4, #74	; 0x4a
    5376:	d82c      	bhi.n	53d2 <d_make_comp+0x62>
    5378:	e8df f004 	tbb	[pc, r4]
    537c:	3c3c3c3c 	.word	0x3c3c3c3c
    5380:	2b2b2b2b 	.word	0x2b2b2b2b
    5384:	263c2626 	.word	0x263c2626
    5388:	26262626 	.word	0x26262626
    538c:	26262626 	.word	0x26262626
    5390:	2b262626 	.word	0x2b262626
    5394:	27272727 	.word	0x27272727
    5398:	27272727 	.word	0x27272727
    539c:	2626263c 	.word	0x2626263c
    53a0:	262b2626 	.word	0x262b2626
    53a4:	2b3c3d27 	.word	0x2b3c3d27
    53a8:	3d27273c 	.word	0x3d27273c
    53ac:	26262b2b 	.word	0x26262b2b
    53b0:	3c3c3c3c 	.word	0x3c3c3c3c
    53b4:	3c3c263c 	.word	0x3c3c263c
    53b8:	2b2b3c26 	.word	0x2b2b3c26
    53bc:	2b262626 	.word	0x2b262626
    53c0:	26262b2b 	.word	0x26262b2b
    53c4:	3c26      	.short	0x3c26
    53c6:	3c          	.byte	0x3c
    53c7:	00          	.byte	0x00
    53c8:	b1ca      	cbz	r2, 53fe <d_make_comp+0x8e>
    53ca:	6944      	ldr	r4, [r0, #20]
    53cc:	6985      	ldr	r5, [r0, #24]
    53ce:	42ac      	cmp	r4, r5
    53d0:	db02      	blt.n	53d8 <d_make_comp+0x68>
    53d2:	2000      	movs	r0, #0
    53d4:	bc70      	pop	{r4, r5, r6}
    53d6:	4770      	bx	lr
    53d8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    53dc:	6906      	ldr	r6, [r0, #16]
    53de:	3401      	adds	r4, #1
    53e0:	00ad      	lsls	r5, r5, #2
    53e2:	6144      	str	r4, [r0, #20]
    53e4:	1974      	adds	r4, r6, r5
    53e6:	d00c      	beq.n	5402 <d_make_comp+0x92>
    53e8:	5571      	strb	r1, [r6, r5]
    53ea:	6062      	str	r2, [r4, #4]
    53ec:	60a3      	str	r3, [r4, #8]
    53ee:	4620      	mov	r0, r4
    53f0:	bc70      	pop	{r4, r5, r6}
    53f2:	4770      	bx	lr
    53f4:	b11a      	cbz	r2, 53fe <d_make_comp+0x8e>
    53f6:	2b00      	cmp	r3, #0
    53f8:	d1e7      	bne.n	53ca <d_make_comp+0x5a>
    53fa:	4618      	mov	r0, r3
    53fc:	e7ea      	b.n	53d4 <d_make_comp+0x64>
    53fe:	4610      	mov	r0, r2
    5400:	e7e8      	b.n	53d4 <d_make_comp+0x64>
    5402:	4620      	mov	r0, r4
    5404:	e7e6      	b.n	53d4 <d_make_comp+0x64>
    5406:	bf00      	nop

00005408 <d_make_name>:
    5408:	b430      	push	{r4, r5}
    540a:	6943      	ldr	r3, [r0, #20]
    540c:	6984      	ldr	r4, [r0, #24]
    540e:	42a3      	cmp	r3, r4
    5410:	da09      	bge.n	5426 <d_make_name+0x1e>
    5412:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    5416:	6905      	ldr	r5, [r0, #16]
    5418:	3301      	adds	r3, #1
    541a:	00a4      	lsls	r4, r4, #2
    541c:	6143      	str	r3, [r0, #20]
    541e:	192b      	adds	r3, r5, r4
    5420:	d001      	beq.n	5426 <d_make_name+0x1e>
    5422:	b101      	cbz	r1, 5426 <d_make_name+0x1e>
    5424:	b912      	cbnz	r2, 542c <d_make_name+0x24>
    5426:	2000      	movs	r0, #0
    5428:	bc30      	pop	{r4, r5}
    542a:	4770      	bx	lr
    542c:	2000      	movs	r0, #0
    542e:	5528      	strb	r0, [r5, r4]
    5430:	6059      	str	r1, [r3, #4]
    5432:	609a      	str	r2, [r3, #8]
    5434:	4618      	mov	r0, r3
    5436:	bc30      	pop	{r4, r5}
    5438:	4770      	bx	lr
    543a:	bf00      	nop

0000543c <d_cv_qualifiers>:
    543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5440:	68c5      	ldr	r5, [r0, #12]
    5442:	4604      	mov	r4, r0
    5444:	4688      	mov	r8, r1
    5446:	4617      	mov	r7, r2
    5448:	782b      	ldrb	r3, [r5, #0]
    544a:	460e      	mov	r6, r1
    544c:	e017      	b.n	547e <d_cv_qualifiers+0x42>
    544e:	2b56      	cmp	r3, #86	; 0x56
    5450:	d022      	beq.n	5498 <d_cv_qualifiers+0x5c>
    5452:	2b4b      	cmp	r3, #75	; 0x4b
    5454:	d12d      	bne.n	54b2 <d_cv_qualifiers+0x76>
    5456:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5458:	3501      	adds	r5, #1
    545a:	2f00      	cmp	r7, #0
    545c:	f103 0306 	add.w	r3, r3, #6
    5460:	60e5      	str	r5, [r4, #12]
    5462:	6323      	str	r3, [r4, #48]	; 0x30
    5464:	bf0c      	ite	eq
    5466:	211b      	moveq	r1, #27
    5468:	211e      	movne	r1, #30
    546a:	2200      	movs	r2, #0
    546c:	4613      	mov	r3, r2
    546e:	4620      	mov	r0, r4
    5470:	f7ff ff7e 	bl	5370 <d_make_comp>
    5474:	6030      	str	r0, [r6, #0]
    5476:	b1d0      	cbz	r0, 54ae <d_cv_qualifiers+0x72>
    5478:	68e5      	ldr	r5, [r4, #12]
    547a:	782b      	ldrb	r3, [r5, #0]
    547c:	1d06      	adds	r6, r0, #4
    547e:	2b72      	cmp	r3, #114	; 0x72
    5480:	d1e5      	bne.n	544e <d_cv_qualifiers+0x12>
    5482:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5484:	3501      	adds	r5, #1
    5486:	2f00      	cmp	r7, #0
    5488:	f103 0309 	add.w	r3, r3, #9
    548c:	60e5      	str	r5, [r4, #12]
    548e:	6323      	str	r3, [r4, #48]	; 0x30
    5490:	bf0c      	ite	eq
    5492:	2119      	moveq	r1, #25
    5494:	211c      	movne	r1, #28
    5496:	e7e8      	b.n	546a <d_cv_qualifiers+0x2e>
    5498:	6b23      	ldr	r3, [r4, #48]	; 0x30
    549a:	3501      	adds	r5, #1
    549c:	2f00      	cmp	r7, #0
    549e:	f103 0309 	add.w	r3, r3, #9
    54a2:	60e5      	str	r5, [r4, #12]
    54a4:	6323      	str	r3, [r4, #48]	; 0x30
    54a6:	bf0c      	ite	eq
    54a8:	211a      	moveq	r1, #26
    54aa:	211d      	movne	r1, #29
    54ac:	e7dd      	b.n	546a <d_cv_qualifiers+0x2e>
    54ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54b2:	b9bf      	cbnz	r7, 54e4 <d_cv_qualifiers+0xa8>
    54b4:	2b46      	cmp	r3, #70	; 0x46
    54b6:	d115      	bne.n	54e4 <d_cv_qualifiers+0xa8>
    54b8:	4546      	cmp	r6, r8
    54ba:	d013      	beq.n	54e4 <d_cv_qualifiers+0xa8>
    54bc:	241d      	movs	r4, #29
    54be:	201e      	movs	r0, #30
    54c0:	211c      	movs	r1, #28
    54c2:	e008      	b.n	54d6 <d_cv_qualifiers+0x9a>
    54c4:	2a1b      	cmp	r2, #27
    54c6:	d010      	beq.n	54ea <d_cv_qualifiers+0xae>
    54c8:	2a19      	cmp	r2, #25
    54ca:	d100      	bne.n	54ce <d_cv_qualifiers+0x92>
    54cc:	7019      	strb	r1, [r3, #0]
    54ce:	f103 0804 	add.w	r8, r3, #4
    54d2:	4546      	cmp	r6, r8
    54d4:	d006      	beq.n	54e4 <d_cv_qualifiers+0xa8>
    54d6:	f8d8 3000 	ldr.w	r3, [r8]
    54da:	781a      	ldrb	r2, [r3, #0]
    54dc:	2a1a      	cmp	r2, #26
    54de:	d1f1      	bne.n	54c4 <d_cv_qualifiers+0x88>
    54e0:	701c      	strb	r4, [r3, #0]
    54e2:	e7f4      	b.n	54ce <d_cv_qualifiers+0x92>
    54e4:	4630      	mov	r0, r6
    54e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54ea:	7018      	strb	r0, [r3, #0]
    54ec:	e7ef      	b.n	54ce <d_cv_qualifiers+0x92>
    54ee:	bf00      	nop

000054f0 <d_ref_qualifier>:
    54f0:	b410      	push	{r4}
    54f2:	68c4      	ldr	r4, [r0, #12]
    54f4:	7823      	ldrb	r3, [r4, #0]
    54f6:	2b52      	cmp	r3, #82	; 0x52
    54f8:	460a      	mov	r2, r1
    54fa:	d010      	beq.n	551e <d_ref_qualifier+0x2e>
    54fc:	2b4f      	cmp	r3, #79	; 0x4f
    54fe:	d003      	beq.n	5508 <d_ref_qualifier+0x18>
    5500:	4608      	mov	r0, r1
    5502:	f85d 4b04 	ldr.w	r4, [sp], #4
    5506:	4770      	bx	lr
    5508:	6b03      	ldr	r3, [r0, #48]	; 0x30
    550a:	3303      	adds	r3, #3
    550c:	6303      	str	r3, [r0, #48]	; 0x30
    550e:	2120      	movs	r1, #32
    5510:	3401      	adds	r4, #1
    5512:	60c4      	str	r4, [r0, #12]
    5514:	2300      	movs	r3, #0
    5516:	f85d 4b04 	ldr.w	r4, [sp], #4
    551a:	f7ff bf29 	b.w	5370 <d_make_comp>
    551e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5520:	3302      	adds	r3, #2
    5522:	6303      	str	r3, [r0, #48]	; 0x30
    5524:	211f      	movs	r1, #31
    5526:	e7f3      	b.n	5510 <d_ref_qualifier+0x20>

00005528 <d_clone_suffix>:
    5528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    552c:	460f      	mov	r7, r1
    552e:	68c1      	ldr	r1, [r0, #12]
    5530:	780c      	ldrb	r4, [r1, #0]
    5532:	2c2e      	cmp	r4, #46	; 0x2e
    5534:	4680      	mov	r8, r0
    5536:	d027      	beq.n	5588 <d_clone_suffix+0x60>
    5538:	460b      	mov	r3, r1
    553a:	2c2e      	cmp	r4, #46	; 0x2e
    553c:	d114      	bne.n	5568 <d_clone_suffix+0x40>
    553e:	785c      	ldrb	r4, [r3, #1]
    5540:	3c30      	subs	r4, #48	; 0x30
    5542:	2c09      	cmp	r4, #9
    5544:	d810      	bhi.n	5568 <d_clone_suffix+0x40>
    5546:	789c      	ldrb	r4, [r3, #2]
    5548:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    554c:	2a09      	cmp	r2, #9
    554e:	f103 0002 	add.w	r0, r3, #2
    5552:	d817      	bhi.n	5584 <d_clone_suffix+0x5c>
    5554:	1cdd      	adds	r5, r3, #3
    5556:	462b      	mov	r3, r5
    5558:	3501      	adds	r5, #1
    555a:	781c      	ldrb	r4, [r3, #0]
    555c:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    5560:	2e09      	cmp	r6, #9
    5562:	d9f8      	bls.n	5556 <d_clone_suffix+0x2e>
    5564:	2c2e      	cmp	r4, #46	; 0x2e
    5566:	d0ea      	beq.n	553e <d_clone_suffix+0x16>
    5568:	1a5a      	subs	r2, r3, r1
    556a:	f8c8 300c 	str.w	r3, [r8, #12]
    556e:	4640      	mov	r0, r8
    5570:	f7ff ff4a 	bl	5408 <d_make_name>
    5574:	463a      	mov	r2, r7
    5576:	4603      	mov	r3, r0
    5578:	214b      	movs	r1, #75	; 0x4b
    557a:	4640      	mov	r0, r8
    557c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5580:	f7ff bef6 	b.w	5370 <d_make_comp>
    5584:	4603      	mov	r3, r0
    5586:	e7d8      	b.n	553a <d_clone_suffix+0x12>
    5588:	784b      	ldrb	r3, [r1, #1]
    558a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    558e:	2a19      	cmp	r2, #25
    5590:	d80a      	bhi.n	55a8 <d_clone_suffix+0x80>
    5592:	1c8a      	adds	r2, r1, #2
    5594:	4613      	mov	r3, r2
    5596:	3201      	adds	r2, #1
    5598:	781c      	ldrb	r4, [r3, #0]
    559a:	f1a4 0061 	sub.w	r0, r4, #97	; 0x61
    559e:	2819      	cmp	r0, #25
    55a0:	d9f8      	bls.n	5594 <d_clone_suffix+0x6c>
    55a2:	2c5f      	cmp	r4, #95	; 0x5f
    55a4:	d0f6      	beq.n	5594 <d_clone_suffix+0x6c>
    55a6:	e7c8      	b.n	553a <d_clone_suffix+0x12>
    55a8:	2b5f      	cmp	r3, #95	; 0x5f
    55aa:	d1c5      	bne.n	5538 <d_clone_suffix+0x10>
    55ac:	e7f1      	b.n	5592 <d_clone_suffix+0x6a>
    55ae:	bf00      	nop

000055b0 <d_substitution>:
    55b0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    55b4:	68c2      	ldr	r2, [r0, #12]
    55b6:	7813      	ldrb	r3, [r2, #0]
    55b8:	2b53      	cmp	r3, #83	; 0x53
    55ba:	d003      	beq.n	55c4 <d_substitution+0x14>
    55bc:	2000      	movs	r0, #0
    55be:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    55c2:	4770      	bx	lr
    55c4:	1c53      	adds	r3, r2, #1
    55c6:	60c3      	str	r3, [r0, #12]
    55c8:	7853      	ldrb	r3, [r2, #1]
    55ca:	b1ab      	cbz	r3, 55f8 <d_substitution+0x48>
    55cc:	1c93      	adds	r3, r2, #2
    55ce:	60c3      	str	r3, [r0, #12]
    55d0:	7853      	ldrb	r3, [r2, #1]
    55d2:	2b5f      	cmp	r3, #95	; 0x5f
    55d4:	d152      	bne.n	567c <d_substitution+0xcc>
    55d6:	2100      	movs	r1, #0
    55d8:	6a03      	ldr	r3, [r0, #32]
    55da:	4299      	cmp	r1, r3
    55dc:	d2ee      	bcs.n	55bc <d_substitution+0xc>
    55de:	6a83      	ldr	r3, [r0, #40]	; 0x28
    55e0:	69c2      	ldr	r2, [r0, #28]
    55e2:	3301      	adds	r3, #1
    55e4:	6283      	str	r3, [r0, #40]	; 0x28
    55e6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    55ea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    55ee:	4770      	bx	lr
    55f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    55f4:	2a19      	cmp	r2, #25
    55f6:	d946      	bls.n	5686 <d_substitution+0xd6>
    55f8:	6882      	ldr	r2, [r0, #8]
    55fa:	0712      	lsls	r2, r2, #28
    55fc:	d46a      	bmi.n	56d4 <d_substitution+0x124>
    55fe:	2900      	cmp	r1, #0
    5600:	d16a      	bne.n	56d8 <d_substitution+0x128>
    5602:	4a3f      	ldr	r2, [pc, #252]	; (5700 <d_substitution+0x150>)
    5604:	f102 05c4 	add.w	r5, r2, #196	; 0xc4
    5608:	e002      	b.n	5610 <d_substitution+0x60>
    560a:	321c      	adds	r2, #28
    560c:	42aa      	cmp	r2, r5
    560e:	d0d5      	beq.n	55bc <d_substitution+0xc>
    5610:	7814      	ldrb	r4, [r2, #0]
    5612:	429c      	cmp	r4, r3
    5614:	d1f9      	bne.n	560a <d_substitution+0x5a>
    5616:	6955      	ldr	r5, [r2, #20]
    5618:	2d00      	cmp	r5, #0
    561a:	d06a      	beq.n	56f2 <d_substitution+0x142>
    561c:	6943      	ldr	r3, [r0, #20]
    561e:	6984      	ldr	r4, [r0, #24]
    5620:	f8d2 8018 	ldr.w	r8, [r2, #24]
    5624:	42a3      	cmp	r3, r4
    5626:	da62      	bge.n	56ee <d_substitution+0x13e>
    5628:	eb03 0743 	add.w	r7, r3, r3, lsl #1
    562c:	f8d0 c010 	ldr.w	ip, [r0, #16]
    5630:	00bf      	lsls	r7, r7, #2
    5632:	3301      	adds	r3, #1
    5634:	eb1c 0607 	adds.w	r6, ip, r7
    5638:	6143      	str	r3, [r0, #20]
    563a:	d05f      	beq.n	56fc <d_substitution+0x14c>
    563c:	f04f 0918 	mov.w	r9, #24
    5640:	f80c 9007 	strb.w	r9, [ip, r7]
    5644:	4637      	mov	r7, r6
    5646:	6075      	str	r5, [r6, #4]
    5648:	f8c6 8008 	str.w	r8, [r6, #8]
    564c:	62c7      	str	r7, [r0, #44]	; 0x2c
    564e:	2900      	cmp	r1, #0
    5650:	d04a      	beq.n	56e8 <d_substitution+0x138>
    5652:	68d5      	ldr	r5, [r2, #12]
    5654:	6912      	ldr	r2, [r2, #16]
    5656:	6b01      	ldr	r1, [r0, #48]	; 0x30
    5658:	42a3      	cmp	r3, r4
    565a:	4411      	add	r1, r2
    565c:	6301      	str	r1, [r0, #48]	; 0x30
    565e:	daad      	bge.n	55bc <d_substitution+0xc>
    5660:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5664:	6904      	ldr	r4, [r0, #16]
    5666:	3301      	adds	r3, #1
    5668:	0089      	lsls	r1, r1, #2
    566a:	6143      	str	r3, [r0, #20]
    566c:	1863      	adds	r3, r4, r1
    566e:	d043      	beq.n	56f8 <d_substitution+0x148>
    5670:	2018      	movs	r0, #24
    5672:	5460      	strb	r0, [r4, r1]
    5674:	4618      	mov	r0, r3
    5676:	605d      	str	r5, [r3, #4]
    5678:	609a      	str	r2, [r3, #8]
    567a:	e7a0      	b.n	55be <d_substitution+0xe>
    567c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    5680:	b2ea      	uxtb	r2, r5
    5682:	2a09      	cmp	r2, #9
    5684:	d8b4      	bhi.n	55f0 <d_substitution+0x40>
    5686:	2200      	movs	r2, #0
    5688:	e012      	b.n	56b0 <d_substitution+0x100>
    568a:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
    568e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5692:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5696:	428a      	cmp	r2, r1
    5698:	d890      	bhi.n	55bc <d_substitution+0xc>
    569a:	68c2      	ldr	r2, [r0, #12]
    569c:	7813      	ldrb	r3, [r2, #0]
    569e:	1c54      	adds	r4, r2, #1
    56a0:	b11b      	cbz	r3, 56aa <d_substitution+0xfa>
    56a2:	60c4      	str	r4, [r0, #12]
    56a4:	7813      	ldrb	r3, [r2, #0]
    56a6:	2b5f      	cmp	r3, #95	; 0x5f
    56a8:	d012      	beq.n	56d0 <d_substitution+0x120>
    56aa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    56ae:	460a      	mov	r2, r1
    56b0:	b2e9      	uxtb	r1, r5
    56b2:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
    56b6:	2909      	cmp	r1, #9
    56b8:	b2e4      	uxtb	r4, r4
    56ba:	d9e6      	bls.n	568a <d_substitution+0xda>
    56bc:	2c19      	cmp	r4, #25
    56be:	f63f af7d 	bhi.w	55bc <d_substitution+0xc>
    56c2:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
    56c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    56ca:	f1a3 0137 	sub.w	r1, r3, #55	; 0x37
    56ce:	e7e2      	b.n	5696 <d_substitution+0xe6>
    56d0:	3101      	adds	r1, #1
    56d2:	e781      	b.n	55d8 <d_substitution+0x28>
    56d4:	2101      	movs	r1, #1
    56d6:	e794      	b.n	5602 <d_substitution+0x52>
    56d8:	68c2      	ldr	r2, [r0, #12]
    56da:	7811      	ldrb	r1, [r2, #0]
    56dc:	3943      	subs	r1, #67	; 0x43
    56de:	2901      	cmp	r1, #1
    56e0:	bf8c      	ite	hi
    56e2:	2100      	movhi	r1, #0
    56e4:	2101      	movls	r1, #1
    56e6:	e78c      	b.n	5602 <d_substitution+0x52>
    56e8:	6855      	ldr	r5, [r2, #4]
    56ea:	6892      	ldr	r2, [r2, #8]
    56ec:	e7b3      	b.n	5656 <d_substitution+0xa6>
    56ee:	2700      	movs	r7, #0
    56f0:	e7ac      	b.n	564c <d_substitution+0x9c>
    56f2:	6984      	ldr	r4, [r0, #24]
    56f4:	6943      	ldr	r3, [r0, #20]
    56f6:	e7aa      	b.n	564e <d_substitution+0x9e>
    56f8:	4618      	mov	r0, r3
    56fa:	e760      	b.n	55be <d_substitution+0xe>
    56fc:	4637      	mov	r7, r6
    56fe:	e7a5      	b.n	564c <d_substitution+0x9c>
    5700:	00013054 	.word	0x00013054

00005704 <d_append_char>:
    5704:	b570      	push	{r4, r5, r6, lr}
    5706:	460d      	mov	r5, r1
    5708:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    570c:	29ff      	cmp	r1, #255	; 0xff
    570e:	4604      	mov	r4, r0
    5710:	d006      	beq.n	5720 <d_append_char+0x1c>
    5712:	1c4a      	adds	r2, r1, #1
    5714:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    5718:	5465      	strb	r5, [r4, r1]
    571a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    571e:	bd70      	pop	{r4, r5, r6, pc}
    5720:	2600      	movs	r6, #0
    5722:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    5726:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    572a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    572e:	4798      	blx	r3
    5730:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5734:	4631      	mov	r1, r6
    5736:	1c5a      	adds	r2, r3, #1
    5738:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    573c:	2201      	movs	r2, #1
    573e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    5742:	5465      	strb	r5, [r4, r1]
    5744:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    5748:	bd70      	pop	{r4, r5, r6, pc}
    574a:	bf00      	nop

0000574c <d_number.isra.0>:
    574c:	b470      	push	{r4, r5, r6}
    574e:	6802      	ldr	r2, [r0, #0]
    5750:	7813      	ldrb	r3, [r2, #0]
    5752:	2b6e      	cmp	r3, #110	; 0x6e
    5754:	4605      	mov	r5, r0
    5756:	d018      	beq.n	578a <d_number.isra.0+0x3e>
    5758:	2600      	movs	r6, #0
    575a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    575e:	2a09      	cmp	r2, #9
    5760:	d818      	bhi.n	5794 <d_number.isra.0+0x48>
    5762:	682a      	ldr	r2, [r5, #0]
    5764:	2000      	movs	r0, #0
    5766:	3201      	adds	r2, #1
    5768:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    576c:	602a      	str	r2, [r5, #0]
    576e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    5772:	f812 3b01 	ldrb.w	r3, [r2], #1
    5776:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    577a:	2909      	cmp	r1, #9
    577c:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
    5780:	d9f2      	bls.n	5768 <d_number.isra.0+0x1c>
    5782:	b106      	cbz	r6, 5786 <d_number.isra.0+0x3a>
    5784:	4240      	negs	r0, r0
    5786:	bc70      	pop	{r4, r5, r6}
    5788:	4770      	bx	lr
    578a:	1c53      	adds	r3, r2, #1
    578c:	6003      	str	r3, [r0, #0]
    578e:	7853      	ldrb	r3, [r2, #1]
    5790:	2601      	movs	r6, #1
    5792:	e7e2      	b.n	575a <d_number.isra.0+0xe>
    5794:	2000      	movs	r0, #0
    5796:	e7f4      	b.n	5782 <d_number.isra.0+0x36>

00005798 <d_number_component>:
    5798:	6943      	ldr	r3, [r0, #20]
    579a:	6982      	ldr	r2, [r0, #24]
    579c:	4293      	cmp	r3, r2
    579e:	b510      	push	{r4, lr}
    57a0:	da13      	bge.n	57ca <d_number_component+0x32>
    57a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    57a6:	6901      	ldr	r1, [r0, #16]
    57a8:	0092      	lsls	r2, r2, #2
    57aa:	3301      	adds	r3, #1
    57ac:	188c      	adds	r4, r1, r2
    57ae:	6143      	str	r3, [r0, #20]
    57b0:	d008      	beq.n	57c4 <d_number_component+0x2c>
    57b2:	2340      	movs	r3, #64	; 0x40
    57b4:	548b      	strb	r3, [r1, r2]
    57b6:	300c      	adds	r0, #12
    57b8:	f7ff ffc8 	bl	574c <d_number.isra.0>
    57bc:	4623      	mov	r3, r4
    57be:	6060      	str	r0, [r4, #4]
    57c0:	4618      	mov	r0, r3
    57c2:	bd10      	pop	{r4, pc}
    57c4:	4623      	mov	r3, r4
    57c6:	4618      	mov	r0, r3
    57c8:	bd10      	pop	{r4, pc}
    57ca:	2300      	movs	r3, #0
    57cc:	4618      	mov	r0, r3
    57ce:	bd10      	pop	{r4, pc}

000057d0 <d_compact_number>:
    57d0:	b510      	push	{r4, lr}
    57d2:	68c3      	ldr	r3, [r0, #12]
    57d4:	781a      	ldrb	r2, [r3, #0]
    57d6:	2a5f      	cmp	r2, #95	; 0x5f
    57d8:	4604      	mov	r4, r0
    57da:	d00b      	beq.n	57f4 <d_compact_number+0x24>
    57dc:	2a6e      	cmp	r2, #110	; 0x6e
    57de:	d006      	beq.n	57ee <d_compact_number+0x1e>
    57e0:	300c      	adds	r0, #12
    57e2:	f7ff ffb3 	bl	574c <d_number.isra.0>
    57e6:	68e3      	ldr	r3, [r4, #12]
    57e8:	781a      	ldrb	r2, [r3, #0]
    57ea:	2a5f      	cmp	r2, #95	; 0x5f
    57ec:	d006      	beq.n	57fc <d_compact_number+0x2c>
    57ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    57f2:	bd10      	pop	{r4, pc}
    57f4:	2000      	movs	r0, #0
    57f6:	3301      	adds	r3, #1
    57f8:	60e3      	str	r3, [r4, #12]
    57fa:	bd10      	pop	{r4, pc}
    57fc:	3001      	adds	r0, #1
    57fe:	e7fa      	b.n	57f6 <d_compact_number+0x26>

00005800 <d_template_param>:
    5800:	b538      	push	{r3, r4, r5, lr}
    5802:	68c3      	ldr	r3, [r0, #12]
    5804:	781a      	ldrb	r2, [r3, #0]
    5806:	2a54      	cmp	r2, #84	; 0x54
    5808:	4604      	mov	r4, r0
    580a:	d001      	beq.n	5810 <d_template_param+0x10>
    580c:	2000      	movs	r0, #0
    580e:	bd38      	pop	{r3, r4, r5, pc}
    5810:	3301      	adds	r3, #1
    5812:	60c3      	str	r3, [r0, #12]
    5814:	f7ff ffdc 	bl	57d0 <d_compact_number>
    5818:	1e05      	subs	r5, r0, #0
    581a:	dbf7      	blt.n	580c <d_template_param+0xc>
    581c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    581e:	6963      	ldr	r3, [r4, #20]
    5820:	69a2      	ldr	r2, [r4, #24]
    5822:	3101      	adds	r1, #1
    5824:	4293      	cmp	r3, r2
    5826:	62a1      	str	r1, [r4, #40]	; 0x28
    5828:	daf0      	bge.n	580c <d_template_param+0xc>
    582a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    582e:	6921      	ldr	r1, [r4, #16]
    5830:	3301      	adds	r3, #1
    5832:	0092      	lsls	r2, r2, #2
    5834:	6163      	str	r3, [r4, #20]
    5836:	188b      	adds	r3, r1, r2
    5838:	d0e8      	beq.n	580c <d_template_param+0xc>
    583a:	2405      	movs	r4, #5
    583c:	548c      	strb	r4, [r1, r2]
    583e:	605d      	str	r5, [r3, #4]
    5840:	4618      	mov	r0, r3
    5842:	bd38      	pop	{r3, r4, r5, pc}

00005844 <d_discriminator>:
    5844:	b508      	push	{r3, lr}
    5846:	68c3      	ldr	r3, [r0, #12]
    5848:	781a      	ldrb	r2, [r3, #0]
    584a:	2a5f      	cmp	r2, #95	; 0x5f
    584c:	d001      	beq.n	5852 <d_discriminator+0xe>
    584e:	2001      	movs	r0, #1
    5850:	bd08      	pop	{r3, pc}
    5852:	3301      	adds	r3, #1
    5854:	f840 3f0c 	str.w	r3, [r0, #12]!
    5858:	f7ff ff78 	bl	574c <d_number.isra.0>
    585c:	43c0      	mvns	r0, r0
    585e:	0fc0      	lsrs	r0, r0, #31
    5860:	bd08      	pop	{r3, pc}
    5862:	bf00      	nop

00005864 <d_source_name>:
    5864:	b570      	push	{r4, r5, r6, lr}
    5866:	4604      	mov	r4, r0
    5868:	300c      	adds	r0, #12
    586a:	f7ff ff6f 	bl	574c <d_number.isra.0>
    586e:	1e06      	subs	r6, r0, #0
    5870:	dd32      	ble.n	58d8 <d_source_name+0x74>
    5872:	68e5      	ldr	r5, [r4, #12]
    5874:	6863      	ldr	r3, [r4, #4]
    5876:	1b5b      	subs	r3, r3, r5
    5878:	429e      	cmp	r6, r3
    587a:	dc2f      	bgt.n	58dc <d_source_name+0x78>
    587c:	68a2      	ldr	r2, [r4, #8]
    587e:	19ab      	adds	r3, r5, r6
    5880:	0752      	lsls	r2, r2, #29
    5882:	60e3      	str	r3, [r4, #12]
    5884:	d415      	bmi.n	58b2 <d_source_name+0x4e>
    5886:	2e09      	cmp	r6, #9
    5888:	dd0c      	ble.n	58a4 <d_source_name+0x40>
    588a:	4628      	mov	r0, r5
    588c:	4914      	ldr	r1, [pc, #80]	; (58e0 <d_source_name+0x7c>)
    588e:	2208      	movs	r2, #8
    5890:	f008 fc4a 	bl	e128 <memcmp>
    5894:	b930      	cbnz	r0, 58a4 <d_source_name+0x40>
    5896:	7a2b      	ldrb	r3, [r5, #8]
    5898:	2b2e      	cmp	r3, #46	; 0x2e
    589a:	d010      	beq.n	58be <d_source_name+0x5a>
    589c:	2b5f      	cmp	r3, #95	; 0x5f
    589e:	d00e      	beq.n	58be <d_source_name+0x5a>
    58a0:	2b24      	cmp	r3, #36	; 0x24
    58a2:	d00c      	beq.n	58be <d_source_name+0x5a>
    58a4:	4629      	mov	r1, r5
    58a6:	4632      	mov	r2, r6
    58a8:	4620      	mov	r0, r4
    58aa:	f7ff fdad 	bl	5408 <d_make_name>
    58ae:	62e0      	str	r0, [r4, #44]	; 0x2c
    58b0:	bd70      	pop	{r4, r5, r6, pc}
    58b2:	5daa      	ldrb	r2, [r5, r6]
    58b4:	2a24      	cmp	r2, #36	; 0x24
    58b6:	bf04      	itt	eq
    58b8:	3301      	addeq	r3, #1
    58ba:	60e3      	streq	r3, [r4, #12]
    58bc:	e7e3      	b.n	5886 <d_source_name+0x22>
    58be:	7a6b      	ldrb	r3, [r5, #9]
    58c0:	2b4e      	cmp	r3, #78	; 0x4e
    58c2:	d1ef      	bne.n	58a4 <d_source_name+0x40>
    58c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    58c6:	4907      	ldr	r1, [pc, #28]	; (58e4 <d_source_name+0x80>)
    58c8:	3316      	adds	r3, #22
    58ca:	1b9e      	subs	r6, r3, r6
    58cc:	6326      	str	r6, [r4, #48]	; 0x30
    58ce:	4620      	mov	r0, r4
    58d0:	2215      	movs	r2, #21
    58d2:	f7ff fd99 	bl	5408 <d_make_name>
    58d6:	e7ea      	b.n	58ae <d_source_name+0x4a>
    58d8:	2000      	movs	r0, #0
    58da:	bd70      	pop	{r4, r5, r6, pc}
    58dc:	2000      	movs	r0, #0
    58de:	e7e6      	b.n	58ae <d_source_name+0x4a>
    58e0:	0001378c 	.word	0x0001378c
    58e4:	00013798 	.word	0x00013798

000058e8 <d_call_offset>:
    58e8:	b538      	push	{r3, r4, r5, lr}
    58ea:	4604      	mov	r4, r0
    58ec:	b929      	cbnz	r1, 58fa <d_call_offset+0x12>
    58ee:	68c3      	ldr	r3, [r0, #12]
    58f0:	781a      	ldrb	r2, [r3, #0]
    58f2:	b132      	cbz	r2, 5902 <d_call_offset+0x1a>
    58f4:	1c5a      	adds	r2, r3, #1
    58f6:	60c2      	str	r2, [r0, #12]
    58f8:	7819      	ldrb	r1, [r3, #0]
    58fa:	2968      	cmp	r1, #104	; 0x68
    58fc:	d012      	beq.n	5924 <d_call_offset+0x3c>
    58fe:	2976      	cmp	r1, #118	; 0x76
    5900:	d001      	beq.n	5906 <d_call_offset+0x1e>
    5902:	2000      	movs	r0, #0
    5904:	bd38      	pop	{r3, r4, r5, pc}
    5906:	f104 050c 	add.w	r5, r4, #12
    590a:	4628      	mov	r0, r5
    590c:	f7ff ff1e 	bl	574c <d_number.isra.0>
    5910:	68e3      	ldr	r3, [r4, #12]
    5912:	781a      	ldrb	r2, [r3, #0]
    5914:	2a5f      	cmp	r2, #95	; 0x5f
    5916:	d1f4      	bne.n	5902 <d_call_offset+0x1a>
    5918:	3301      	adds	r3, #1
    591a:	60e3      	str	r3, [r4, #12]
    591c:	4628      	mov	r0, r5
    591e:	f7ff ff15 	bl	574c <d_number.isra.0>
    5922:	e003      	b.n	592c <d_call_offset+0x44>
    5924:	f104 000c 	add.w	r0, r4, #12
    5928:	f7ff ff10 	bl	574c <d_number.isra.0>
    592c:	68e3      	ldr	r3, [r4, #12]
    592e:	781a      	ldrb	r2, [r3, #0]
    5930:	2a5f      	cmp	r2, #95	; 0x5f
    5932:	d1e6      	bne.n	5902 <d_call_offset+0x1a>
    5934:	3301      	adds	r3, #1
    5936:	60e3      	str	r3, [r4, #12]
    5938:	2001      	movs	r0, #1
    593a:	bd38      	pop	{r3, r4, r5, pc}

0000593c <d_lookup_template_argument.isra.6>:
    593c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    5940:	4602      	mov	r2, r0
    5942:	b1c3      	cbz	r3, 5976 <d_lookup_template_argument.isra.6+0x3a>
    5944:	685a      	ldr	r2, [r3, #4]
    5946:	680b      	ldr	r3, [r1, #0]
    5948:	6890      	ldr	r0, [r2, #8]
    594a:	b170      	cbz	r0, 596a <d_lookup_template_argument.isra.6+0x2e>
    594c:	7802      	ldrb	r2, [r0, #0]
    594e:	2a2f      	cmp	r2, #47	; 0x2f
    5950:	d10d      	bne.n	596e <d_lookup_template_argument.isra.6+0x32>
    5952:	2b00      	cmp	r3, #0
    5954:	dc04      	bgt.n	5960 <d_lookup_template_argument.isra.6+0x24>
    5956:	e009      	b.n	596c <d_lookup_template_argument.isra.6+0x30>
    5958:	7802      	ldrb	r2, [r0, #0]
    595a:	2a2f      	cmp	r2, #47	; 0x2f
    595c:	d107      	bne.n	596e <d_lookup_template_argument.isra.6+0x32>
    595e:	b143      	cbz	r3, 5972 <d_lookup_template_argument.isra.6+0x36>
    5960:	6880      	ldr	r0, [r0, #8]
    5962:	3b01      	subs	r3, #1
    5964:	2800      	cmp	r0, #0
    5966:	d1f7      	bne.n	5958 <d_lookup_template_argument.isra.6+0x1c>
    5968:	4770      	bx	lr
    596a:	4770      	bx	lr
    596c:	d001      	beq.n	5972 <d_lookup_template_argument.isra.6+0x36>
    596e:	2000      	movs	r0, #0
    5970:	4770      	bx	lr
    5972:	6840      	ldr	r0, [r0, #4]
    5974:	4770      	bx	lr
    5976:	2101      	movs	r1, #1
    5978:	4618      	mov	r0, r3
    597a:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    597e:	4770      	bx	lr

00005980 <d_find_pack>:
    5980:	b538      	push	{r3, r4, r5, lr}
    5982:	460c      	mov	r4, r1
    5984:	4605      	mov	r5, r0
    5986:	b391      	cbz	r1, 59ee <d_find_pack+0x6e>
    5988:	7823      	ldrb	r3, [r4, #0]
    598a:	2b4a      	cmp	r3, #74	; 0x4a
    598c:	d827      	bhi.n	59de <d_find_pack+0x5e>
    598e:	e8df f003 	tbb	[pc, r3]
    5992:	262e      	.short	0x262e
    5994:	30262626 	.word	0x30262626
    5998:	262b2b2e 	.word	0x262b2b2e
    599c:	26262626 	.word	0x26262626
    59a0:	26262626 	.word	0x26262626
    59a4:	26262626 	.word	0x26262626
    59a8:	262e2626 	.word	0x262e2626
    59ac:	26262626 	.word	0x26262626
    59b0:	26262626 	.word	0x26262626
    59b4:	26262626 	.word	0x26262626
    59b8:	26262e26 	.word	0x26262e26
    59bc:	26262626 	.word	0x26262626
    59c0:	2e262626 	.word	0x2e262626
    59c4:	2626262b 	.word	0x2626262b
    59c8:	26262626 	.word	0x26262626
    59cc:	26262626 	.word	0x26262626
    59d0:	26262e26 	.word	0x26262e26
    59d4:	262e2626 	.word	0x262e2626
    59d8:	2e26262e 	.word	0x2e26262e
    59dc:	2e          	.byte	0x2e
    59dd:	00          	.byte	0x00
    59de:	4628      	mov	r0, r5
    59e0:	6861      	ldr	r1, [r4, #4]
    59e2:	f7ff ffcd 	bl	5980 <d_find_pack>
    59e6:	b918      	cbnz	r0, 59f0 <d_find_pack+0x70>
    59e8:	68a4      	ldr	r4, [r4, #8]
    59ea:	2c00      	cmp	r4, #0
    59ec:	d1cc      	bne.n	5988 <d_find_pack+0x8>
    59ee:	2000      	movs	r0, #0
    59f0:	bd38      	pop	{r3, r4, r5, pc}
    59f2:	4628      	mov	r0, r5
    59f4:	1d21      	adds	r1, r4, #4
    59f6:	f7ff ffa1 	bl	593c <d_lookup_template_argument.isra.6>
    59fa:	2800      	cmp	r0, #0
    59fc:	d0f7      	beq.n	59ee <d_find_pack+0x6e>
    59fe:	7803      	ldrb	r3, [r0, #0]
    5a00:	2b2f      	cmp	r3, #47	; 0x2f
    5a02:	d1f4      	bne.n	59ee <d_find_pack+0x6e>
    5a04:	bd38      	pop	{r3, r4, r5, pc}
    5a06:	bf00      	nop

00005a08 <d_growable_string_callback_adapter>:
    5a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a0a:	6853      	ldr	r3, [r2, #4]
    5a0c:	6894      	ldr	r4, [r2, #8]
    5a0e:	3301      	adds	r3, #1
    5a10:	440b      	add	r3, r1
    5a12:	42a3      	cmp	r3, r4
    5a14:	b083      	sub	sp, #12
    5a16:	4615      	mov	r5, r2
    5a18:	460e      	mov	r6, r1
    5a1a:	4607      	mov	r7, r0
    5a1c:	d813      	bhi.n	5a46 <d_growable_string_callback_adapter+0x3e>
    5a1e:	68ec      	ldr	r4, [r5, #12]
    5a20:	b10c      	cbz	r4, 5a26 <d_growable_string_callback_adapter+0x1e>
    5a22:	b003      	add	sp, #12
    5a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a26:	e895 0009 	ldmia.w	r5, {r0, r3}
    5a2a:	4632      	mov	r2, r6
    5a2c:	4639      	mov	r1, r7
    5a2e:	4418      	add	r0, r3
    5a30:	f008 fbae 	bl	e190 <memcpy>
    5a34:	e895 000c 	ldmia.w	r5, {r2, r3}
    5a38:	4432      	add	r2, r6
    5a3a:	54d4      	strb	r4, [r2, r3]
    5a3c:	686b      	ldr	r3, [r5, #4]
    5a3e:	441e      	add	r6, r3
    5a40:	606e      	str	r6, [r5, #4]
    5a42:	b003      	add	sp, #12
    5a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a46:	68d2      	ldr	r2, [r2, #12]
    5a48:	2a00      	cmp	r2, #0
    5a4a:	d1ea      	bne.n	5a22 <d_growable_string_callback_adapter+0x1a>
    5a4c:	b91c      	cbnz	r4, 5a56 <d_growable_string_callback_adapter+0x4e>
    5a4e:	2b02      	cmp	r3, #2
    5a50:	f04f 0402 	mov.w	r4, #2
    5a54:	d902      	bls.n	5a5c <d_growable_string_callback_adapter+0x54>
    5a56:	0064      	lsls	r4, r4, #1
    5a58:	42a3      	cmp	r3, r4
    5a5a:	d8fc      	bhi.n	5a56 <d_growable_string_callback_adapter+0x4e>
    5a5c:	6828      	ldr	r0, [r5, #0]
    5a5e:	4621      	mov	r1, r4
    5a60:	f008 fd0a 	bl	e478 <realloc>
    5a64:	4603      	mov	r3, r0
    5a66:	b110      	cbz	r0, 5a6e <d_growable_string_callback_adapter+0x66>
    5a68:	6028      	str	r0, [r5, #0]
    5a6a:	60ac      	str	r4, [r5, #8]
    5a6c:	e7d7      	b.n	5a1e <d_growable_string_callback_adapter+0x16>
    5a6e:	6828      	ldr	r0, [r5, #0]
    5a70:	9301      	str	r3, [sp, #4]
    5a72:	f008 f86d 	bl	db50 <free>
    5a76:	9b01      	ldr	r3, [sp, #4]
    5a78:	602b      	str	r3, [r5, #0]
    5a7a:	2201      	movs	r2, #1
    5a7c:	606b      	str	r3, [r5, #4]
    5a7e:	60ab      	str	r3, [r5, #8]
    5a80:	60ea      	str	r2, [r5, #12]
    5a82:	e7ce      	b.n	5a22 <d_growable_string_callback_adapter+0x1a>

00005a84 <d_expr_primary>:
    5a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a88:	68c3      	ldr	r3, [r0, #12]
    5a8a:	781a      	ldrb	r2, [r3, #0]
    5a8c:	2a4c      	cmp	r2, #76	; 0x4c
    5a8e:	4605      	mov	r5, r0
    5a90:	d002      	beq.n	5a98 <d_expr_primary+0x14>
    5a92:	2000      	movs	r0, #0
    5a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a98:	1c5a      	adds	r2, r3, #1
    5a9a:	60c2      	str	r2, [r0, #12]
    5a9c:	7859      	ldrb	r1, [r3, #1]
    5a9e:	295f      	cmp	r1, #95	; 0x5f
    5aa0:	d03a      	beq.n	5b18 <d_expr_primary+0x94>
    5aa2:	295a      	cmp	r1, #90	; 0x5a
    5aa4:	d10d      	bne.n	5ac2 <d_expr_primary+0x3e>
    5aa6:	3201      	adds	r2, #1
    5aa8:	60ea      	str	r2, [r5, #12]
    5aaa:	4628      	mov	r0, r5
    5aac:	2100      	movs	r1, #0
    5aae:	f000 fdf3 	bl	6698 <d_encoding>
    5ab2:	68ea      	ldr	r2, [r5, #12]
    5ab4:	7813      	ldrb	r3, [r2, #0]
    5ab6:	2b45      	cmp	r3, #69	; 0x45
    5ab8:	d1eb      	bne.n	5a92 <d_expr_primary+0xe>
    5aba:	3201      	adds	r2, #1
    5abc:	60ea      	str	r2, [r5, #12]
    5abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ac2:	f000 fa03 	bl	5ecc <d_type>
    5ac6:	4607      	mov	r7, r0
    5ac8:	2800      	cmp	r0, #0
    5aca:	d0e2      	beq.n	5a92 <d_expr_primary+0xe>
    5acc:	7803      	ldrb	r3, [r0, #0]
    5ace:	2b27      	cmp	r3, #39	; 0x27
    5ad0:	d033      	beq.n	5b3a <d_expr_primary+0xb6>
    5ad2:	68e9      	ldr	r1, [r5, #12]
    5ad4:	780b      	ldrb	r3, [r1, #0]
    5ad6:	2b6e      	cmp	r3, #110	; 0x6e
    5ad8:	d028      	beq.n	5b2c <d_expr_primary+0xa8>
    5ada:	f04f 083b 	mov.w	r8, #59	; 0x3b
    5ade:	2b45      	cmp	r3, #69	; 0x45
    5ae0:	d034      	beq.n	5b4c <d_expr_primary+0xc8>
    5ae2:	2b00      	cmp	r3, #0
    5ae4:	d0d5      	beq.n	5a92 <d_expr_primary+0xe>
    5ae6:	1c4b      	adds	r3, r1, #1
    5ae8:	e001      	b.n	5aee <d_expr_primary+0x6a>
    5aea:	2c00      	cmp	r4, #0
    5aec:	d0d1      	beq.n	5a92 <d_expr_primary+0xe>
    5aee:	60eb      	str	r3, [r5, #12]
    5af0:	461e      	mov	r6, r3
    5af2:	f813 4b01 	ldrb.w	r4, [r3], #1
    5af6:	2c45      	cmp	r4, #69	; 0x45
    5af8:	d1f7      	bne.n	5aea <d_expr_primary+0x66>
    5afa:	1a72      	subs	r2, r6, r1
    5afc:	4628      	mov	r0, r5
    5afe:	f7ff fc83 	bl	5408 <d_make_name>
    5b02:	463a      	mov	r2, r7
    5b04:	4603      	mov	r3, r0
    5b06:	4641      	mov	r1, r8
    5b08:	4628      	mov	r0, r5
    5b0a:	f7ff fc31 	bl	5370 <d_make_comp>
    5b0e:	68ea      	ldr	r2, [r5, #12]
    5b10:	7813      	ldrb	r3, [r2, #0]
    5b12:	2b45      	cmp	r3, #69	; 0x45
    5b14:	d1bd      	bne.n	5a92 <d_expr_primary+0xe>
    5b16:	e7d0      	b.n	5aba <d_expr_primary+0x36>
    5b18:	1c9a      	adds	r2, r3, #2
    5b1a:	60c2      	str	r2, [r0, #12]
    5b1c:	789b      	ldrb	r3, [r3, #2]
    5b1e:	2b5a      	cmp	r3, #90	; 0x5a
    5b20:	d0c1      	beq.n	5aa6 <d_expr_primary+0x22>
    5b22:	2b45      	cmp	r3, #69	; 0x45
    5b24:	f04f 0000 	mov.w	r0, #0
    5b28:	d1b3      	bne.n	5a92 <d_expr_primary+0xe>
    5b2a:	e7c6      	b.n	5aba <d_expr_primary+0x36>
    5b2c:	1c4a      	adds	r2, r1, #1
    5b2e:	60ea      	str	r2, [r5, #12]
    5b30:	784b      	ldrb	r3, [r1, #1]
    5b32:	f04f 083c 	mov.w	r8, #60	; 0x3c
    5b36:	4611      	mov	r1, r2
    5b38:	e7d1      	b.n	5ade <d_expr_primary+0x5a>
    5b3a:	6843      	ldr	r3, [r0, #4]
    5b3c:	7c1a      	ldrb	r2, [r3, #16]
    5b3e:	2a00      	cmp	r2, #0
    5b40:	d0c7      	beq.n	5ad2 <d_expr_primary+0x4e>
    5b42:	685a      	ldr	r2, [r3, #4]
    5b44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    5b46:	1a9b      	subs	r3, r3, r2
    5b48:	632b      	str	r3, [r5, #48]	; 0x30
    5b4a:	e7c2      	b.n	5ad2 <d_expr_primary+0x4e>
    5b4c:	2200      	movs	r2, #0
    5b4e:	e7d5      	b.n	5afc <d_expr_primary+0x78>

00005b50 <d_template_args>:
    5b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b52:	68c1      	ldr	r1, [r0, #12]
    5b54:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    5b56:	780b      	ldrb	r3, [r1, #0]
    5b58:	3b49      	subs	r3, #73	; 0x49
    5b5a:	2b01      	cmp	r3, #1
    5b5c:	b083      	sub	sp, #12
    5b5e:	4604      	mov	r4, r0
    5b60:	d81e      	bhi.n	5ba0 <d_template_args+0x50>
    5b62:	1c4a      	adds	r2, r1, #1
    5b64:	60c2      	str	r2, [r0, #12]
    5b66:	784b      	ldrb	r3, [r1, #1]
    5b68:	2b45      	cmp	r3, #69	; 0x45
    5b6a:	d045      	beq.n	5bf8 <d_template_args+0xa8>
    5b6c:	ae02      	add	r6, sp, #8
    5b6e:	2100      	movs	r1, #0
    5b70:	f846 1d04 	str.w	r1, [r6, #-4]!
    5b74:	3b49      	subs	r3, #73	; 0x49
    5b76:	2b0f      	cmp	r3, #15
    5b78:	d835      	bhi.n	5be6 <d_template_args+0x96>
    5b7a:	e8df f003 	tbb	[pc, r3]
    5b7e:	2f2f      	.short	0x2f2f
    5b80:	34341434 	.word	0x34341434
    5b84:	34343434 	.word	0x34343434
    5b88:	34343434 	.word	0x34343434
    5b8c:	0834      	.short	0x0834
    5b8e:	3201      	adds	r2, #1
    5b90:	60e2      	str	r2, [r4, #12]
    5b92:	4620      	mov	r0, r4
    5b94:	f001 fa6c 	bl	7070 <d_expression>
    5b98:	68e3      	ldr	r3, [r4, #12]
    5b9a:	781a      	ldrb	r2, [r3, #0]
    5b9c:	2a45      	cmp	r2, #69	; 0x45
    5b9e:	d027      	beq.n	5bf0 <d_template_args+0xa0>
    5ba0:	2000      	movs	r0, #0
    5ba2:	b003      	add	sp, #12
    5ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ba6:	4620      	mov	r0, r4
    5ba8:	f7ff ff6c 	bl	5a84 <d_expr_primary>
    5bac:	4605      	mov	r5, r0
    5bae:	4620      	mov	r0, r4
    5bb0:	212f      	movs	r1, #47	; 0x2f
    5bb2:	462a      	mov	r2, r5
    5bb4:	2300      	movs	r3, #0
    5bb6:	2d00      	cmp	r5, #0
    5bb8:	d0f2      	beq.n	5ba0 <d_template_args+0x50>
    5bba:	f7ff fbd9 	bl	5370 <d_make_comp>
    5bbe:	6030      	str	r0, [r6, #0]
    5bc0:	f100 0608 	add.w	r6, r0, #8
    5bc4:	2800      	cmp	r0, #0
    5bc6:	d0eb      	beq.n	5ba0 <d_template_args+0x50>
    5bc8:	68e2      	ldr	r2, [r4, #12]
    5bca:	7813      	ldrb	r3, [r2, #0]
    5bcc:	2b45      	cmp	r3, #69	; 0x45
    5bce:	d1d1      	bne.n	5b74 <d_template_args+0x24>
    5bd0:	9801      	ldr	r0, [sp, #4]
    5bd2:	62e7      	str	r7, [r4, #44]	; 0x2c
    5bd4:	3201      	adds	r2, #1
    5bd6:	60e2      	str	r2, [r4, #12]
    5bd8:	b003      	add	sp, #12
    5bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bdc:	4620      	mov	r0, r4
    5bde:	f7ff ffb7 	bl	5b50 <d_template_args>
    5be2:	4605      	mov	r5, r0
    5be4:	e7e3      	b.n	5bae <d_template_args+0x5e>
    5be6:	4620      	mov	r0, r4
    5be8:	f000 f970 	bl	5ecc <d_type>
    5bec:	4605      	mov	r5, r0
    5bee:	e7de      	b.n	5bae <d_template_args+0x5e>
    5bf0:	3301      	adds	r3, #1
    5bf2:	60e3      	str	r3, [r4, #12]
    5bf4:	4605      	mov	r5, r0
    5bf6:	e7da      	b.n	5bae <d_template_args+0x5e>
    5bf8:	3102      	adds	r1, #2
    5bfa:	2200      	movs	r2, #0
    5bfc:	60c1      	str	r1, [r0, #12]
    5bfe:	4613      	mov	r3, r2
    5c00:	212f      	movs	r1, #47	; 0x2f
    5c02:	b003      	add	sp, #12
    5c04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5c08:	f7ff bbb2 	b.w	5370 <d_make_comp>

00005c0c <d_name>:
    5c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c10:	68c2      	ldr	r2, [r0, #12]
    5c12:	7813      	ldrb	r3, [r2, #0]
    5c14:	3b4c      	subs	r3, #76	; 0x4c
    5c16:	b082      	sub	sp, #8
    5c18:	4605      	mov	r5, r0
    5c1a:	2b0e      	cmp	r3, #14
    5c1c:	d86d      	bhi.n	5cfa <d_name+0xee>
    5c1e:	e8df f003 	tbb	[pc, r3]
    5c22:	6c2c      	.short	0x6c2c
    5c24:	6c6c6c31 	.word	0x6c6c6c31
    5c28:	2c6c176c 	.word	0x2c6c176c
    5c2c:	6c6c6c6c 	.word	0x6c6c6c6c
    5c30:	08          	.byte	0x08
    5c31:	00          	.byte	0x00
    5c32:	3201      	adds	r2, #1
    5c34:	2100      	movs	r1, #0
    5c36:	60c2      	str	r2, [r0, #12]
    5c38:	f000 fd2e 	bl	6698 <d_encoding>
    5c3c:	68eb      	ldr	r3, [r5, #12]
    5c3e:	7819      	ldrb	r1, [r3, #0]
    5c40:	2945      	cmp	r1, #69	; 0x45
    5c42:	4606      	mov	r6, r0
    5c44:	f000 80d1 	beq.w	5dea <d_name+0x1de>
    5c48:	2000      	movs	r0, #0
    5c4a:	b002      	add	sp, #8
    5c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c50:	7853      	ldrb	r3, [r2, #1]
    5c52:	2b74      	cmp	r3, #116	; 0x74
    5c54:	d069      	beq.n	5d2a <d_name+0x11e>
    5c56:	2100      	movs	r1, #0
    5c58:	f7ff fcaa 	bl	55b0 <d_substitution>
    5c5c:	68eb      	ldr	r3, [r5, #12]
    5c5e:	781b      	ldrb	r3, [r3, #0]
    5c60:	2b49      	cmp	r3, #73	; 0x49
    5c62:	4604      	mov	r4, r0
    5c64:	d150      	bne.n	5d08 <d_name+0xfc>
    5c66:	4628      	mov	r0, r5
    5c68:	f7ff ff72 	bl	5b50 <d_template_args>
    5c6c:	4622      	mov	r2, r4
    5c6e:	4603      	mov	r3, r0
    5c70:	2104      	movs	r1, #4
    5c72:	4628      	mov	r0, r5
    5c74:	f7ff fb7c 	bl	5370 <d_make_comp>
    5c78:	e001      	b.n	5c7e <d_name+0x72>
    5c7a:	f001 f8bb 	bl	6df4 <d_unqualified_name>
    5c7e:	b002      	add	sp, #8
    5c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c84:	3201      	adds	r2, #1
    5c86:	60c2      	str	r2, [r0, #12]
    5c88:	a901      	add	r1, sp, #4
    5c8a:	2201      	movs	r2, #1
    5c8c:	f7ff fbd6 	bl	543c <d_cv_qualifiers>
    5c90:	4607      	mov	r7, r0
    5c92:	2800      	cmp	r0, #0
    5c94:	d0d8      	beq.n	5c48 <d_name+0x3c>
    5c96:	4628      	mov	r0, r5
    5c98:	2100      	movs	r1, #0
    5c9a:	f7ff fc29 	bl	54f0 <d_ref_qualifier>
    5c9e:	68eb      	ldr	r3, [r5, #12]
    5ca0:	781c      	ldrb	r4, [r3, #0]
    5ca2:	4680      	mov	r8, r0
    5ca4:	2600      	movs	r6, #0
    5ca6:	2c00      	cmp	r4, #0
    5ca8:	f000 808e 	beq.w	5dc8 <d_name+0x1bc>
    5cac:	2c44      	cmp	r4, #68	; 0x44
    5cae:	f000 8082 	beq.w	5db6 <d_name+0x1aa>
    5cb2:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    5cb6:	b2d2      	uxtb	r2, r2
    5cb8:	2a09      	cmp	r2, #9
    5cba:	d95c      	bls.n	5d76 <d_name+0x16a>
    5cbc:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    5cc0:	b2d2      	uxtb	r2, r2
    5cc2:	2a19      	cmp	r2, #25
    5cc4:	d957      	bls.n	5d76 <d_name+0x16a>
    5cc6:	2c43      	cmp	r4, #67	; 0x43
    5cc8:	d055      	beq.n	5d76 <d_name+0x16a>
    5cca:	2c55      	cmp	r4, #85	; 0x55
    5ccc:	d053      	beq.n	5d76 <d_name+0x16a>
    5cce:	2c4c      	cmp	r4, #76	; 0x4c
    5cd0:	d051      	beq.n	5d76 <d_name+0x16a>
    5cd2:	2c53      	cmp	r4, #83	; 0x53
    5cd4:	f000 8084 	beq.w	5de0 <d_name+0x1d4>
    5cd8:	2c49      	cmp	r4, #73	; 0x49
    5cda:	d07a      	beq.n	5dd2 <d_name+0x1c6>
    5cdc:	2c54      	cmp	r4, #84	; 0x54
    5cde:	f000 80b3 	beq.w	5e48 <d_name+0x23c>
    5ce2:	2c45      	cmp	r4, #69	; 0x45
    5ce4:	f000 80d8 	beq.w	5e98 <d_name+0x28c>
    5ce8:	2c4d      	cmp	r4, #77	; 0x4d
    5cea:	d16d      	bne.n	5dc8 <d_name+0x1bc>
    5cec:	2e00      	cmp	r6, #0
    5cee:	d06b      	beq.n	5dc8 <d_name+0x1bc>
    5cf0:	1c5a      	adds	r2, r3, #1
    5cf2:	60ea      	str	r2, [r5, #12]
    5cf4:	785c      	ldrb	r4, [r3, #1]
    5cf6:	4613      	mov	r3, r2
    5cf8:	e7d5      	b.n	5ca6 <d_name+0x9a>
    5cfa:	f001 f87b 	bl	6df4 <d_unqualified_name>
    5cfe:	68eb      	ldr	r3, [r5, #12]
    5d00:	781b      	ldrb	r3, [r3, #0]
    5d02:	2b49      	cmp	r3, #73	; 0x49
    5d04:	4604      	mov	r4, r0
    5d06:	d003      	beq.n	5d10 <d_name+0x104>
    5d08:	4620      	mov	r0, r4
    5d0a:	b002      	add	sp, #8
    5d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d10:	2800      	cmp	r0, #0
    5d12:	d099      	beq.n	5c48 <d_name+0x3c>
    5d14:	6a2b      	ldr	r3, [r5, #32]
    5d16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5d18:	4293      	cmp	r3, r2
    5d1a:	da95      	bge.n	5c48 <d_name+0x3c>
    5d1c:	69ea      	ldr	r2, [r5, #28]
    5d1e:	1c59      	adds	r1, r3, #1
    5d20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5d24:	4628      	mov	r0, r5
    5d26:	6229      	str	r1, [r5, #32]
    5d28:	e79e      	b.n	5c68 <d_name+0x5c>
    5d2a:	3202      	adds	r2, #2
    5d2c:	4965      	ldr	r1, [pc, #404]	; (5ec4 <d_name+0x2b8>)
    5d2e:	60c2      	str	r2, [r0, #12]
    5d30:	2203      	movs	r2, #3
    5d32:	f7ff fb69 	bl	5408 <d_make_name>
    5d36:	4604      	mov	r4, r0
    5d38:	4628      	mov	r0, r5
    5d3a:	f001 f85b 	bl	6df4 <d_unqualified_name>
    5d3e:	4622      	mov	r2, r4
    5d40:	4603      	mov	r3, r0
    5d42:	2101      	movs	r1, #1
    5d44:	4628      	mov	r0, r5
    5d46:	f7ff fb13 	bl	5370 <d_make_comp>
    5d4a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    5d4c:	68eb      	ldr	r3, [r5, #12]
    5d4e:	3203      	adds	r2, #3
    5d50:	632a      	str	r2, [r5, #48]	; 0x30
    5d52:	781b      	ldrb	r3, [r3, #0]
    5d54:	2b49      	cmp	r3, #73	; 0x49
    5d56:	4604      	mov	r4, r0
    5d58:	d1d6      	bne.n	5d08 <d_name+0xfc>
    5d5a:	2800      	cmp	r0, #0
    5d5c:	f43f af74 	beq.w	5c48 <d_name+0x3c>
    5d60:	6a2b      	ldr	r3, [r5, #32]
    5d62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5d64:	4293      	cmp	r3, r2
    5d66:	f6bf af6f 	bge.w	5c48 <d_name+0x3c>
    5d6a:	69ea      	ldr	r2, [r5, #28]
    5d6c:	1c59      	adds	r1, r3, #1
    5d6e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5d72:	6229      	str	r1, [r5, #32]
    5d74:	e777      	b.n	5c66 <d_name+0x5a>
    5d76:	4628      	mov	r0, r5
    5d78:	f001 f83c 	bl	6df4 <d_unqualified_name>
    5d7c:	b1ce      	cbz	r6, 5db2 <d_name+0x1a6>
    5d7e:	2101      	movs	r1, #1
    5d80:	4632      	mov	r2, r6
    5d82:	4603      	mov	r3, r0
    5d84:	4628      	mov	r0, r5
    5d86:	f7ff faf3 	bl	5370 <d_make_comp>
    5d8a:	4606      	mov	r6, r0
    5d8c:	68eb      	ldr	r3, [r5, #12]
    5d8e:	2c53      	cmp	r4, #83	; 0x53
    5d90:	781c      	ldrb	r4, [r3, #0]
    5d92:	d088      	beq.n	5ca6 <d_name+0x9a>
    5d94:	2c45      	cmp	r4, #69	; 0x45
    5d96:	d08c      	beq.n	5cb2 <d_name+0xa6>
    5d98:	b1b6      	cbz	r6, 5dc8 <d_name+0x1bc>
    5d9a:	6a2b      	ldr	r3, [r5, #32]
    5d9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5d9e:	4293      	cmp	r3, r2
    5da0:	da12      	bge.n	5dc8 <d_name+0x1bc>
    5da2:	69ea      	ldr	r2, [r5, #28]
    5da4:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    5da8:	1c5a      	adds	r2, r3, #1
    5daa:	68eb      	ldr	r3, [r5, #12]
    5dac:	622a      	str	r2, [r5, #32]
    5dae:	781c      	ldrb	r4, [r3, #0]
    5db0:	e779      	b.n	5ca6 <d_name+0x9a>
    5db2:	4606      	mov	r6, r0
    5db4:	e7ea      	b.n	5d8c <d_name+0x180>
    5db6:	785b      	ldrb	r3, [r3, #1]
    5db8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5dbc:	2b54      	cmp	r3, #84	; 0x54
    5dbe:	d1da      	bne.n	5d76 <d_name+0x16a>
    5dc0:	4628      	mov	r0, r5
    5dc2:	f000 f883 	bl	5ecc <d_type>
    5dc6:	e7d9      	b.n	5d7c <d_name+0x170>
    5dc8:	2000      	movs	r0, #0
    5dca:	6038      	str	r0, [r7, #0]
    5dcc:	b002      	add	sp, #8
    5dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dd2:	2e00      	cmp	r6, #0
    5dd4:	d0f8      	beq.n	5dc8 <d_name+0x1bc>
    5dd6:	4628      	mov	r0, r5
    5dd8:	f7ff feba 	bl	5b50 <d_template_args>
    5ddc:	2104      	movs	r1, #4
    5dde:	e7cf      	b.n	5d80 <d_name+0x174>
    5de0:	4628      	mov	r0, r5
    5de2:	2101      	movs	r1, #1
    5de4:	f7ff fbe4 	bl	55b0 <d_substitution>
    5de8:	e7c8      	b.n	5d7c <d_name+0x170>
    5dea:	1c5a      	adds	r2, r3, #1
    5dec:	60ea      	str	r2, [r5, #12]
    5dee:	785a      	ldrb	r2, [r3, #1]
    5df0:	2a73      	cmp	r2, #115	; 0x73
    5df2:	d03d      	beq.n	5e70 <d_name+0x264>
    5df4:	2a64      	cmp	r2, #100	; 0x64
    5df6:	d02b      	beq.n	5e50 <d_name+0x244>
    5df8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    5dfc:	4628      	mov	r0, r5
    5dfe:	f7ff ff05 	bl	5c0c <d_name>
    5e02:	4604      	mov	r4, r0
    5e04:	b120      	cbz	r0, 5e10 <d_name+0x204>
    5e06:	7803      	ldrb	r3, [r0, #0]
    5e08:	2b44      	cmp	r3, #68	; 0x44
    5e0a:	d001      	beq.n	5e10 <d_name+0x204>
    5e0c:	2b46      	cmp	r3, #70	; 0x46
    5e0e:	d129      	bne.n	5e64 <d_name+0x258>
    5e10:	1c7b      	adds	r3, r7, #1
    5e12:	d025      	beq.n	5e60 <d_name+0x254>
    5e14:	696b      	ldr	r3, [r5, #20]
    5e16:	69aa      	ldr	r2, [r5, #24]
    5e18:	4293      	cmp	r3, r2
    5e1a:	da13      	bge.n	5e44 <d_name+0x238>
    5e1c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    5e20:	6929      	ldr	r1, [r5, #16]
    5e22:	3301      	adds	r3, #1
    5e24:	0092      	lsls	r2, r2, #2
    5e26:	616b      	str	r3, [r5, #20]
    5e28:	188b      	adds	r3, r1, r2
    5e2a:	d003      	beq.n	5e34 <d_name+0x228>
    5e2c:	2045      	movs	r0, #69	; 0x45
    5e2e:	5488      	strb	r0, [r1, r2]
    5e30:	609f      	str	r7, [r3, #8]
    5e32:	605c      	str	r4, [r3, #4]
    5e34:	4628      	mov	r0, r5
    5e36:	4632      	mov	r2, r6
    5e38:	2102      	movs	r1, #2
    5e3a:	f7ff fa99 	bl	5370 <d_make_comp>
    5e3e:	b002      	add	sp, #8
    5e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e44:	2300      	movs	r3, #0
    5e46:	e7f5      	b.n	5e34 <d_name+0x228>
    5e48:	4628      	mov	r0, r5
    5e4a:	f7ff fcd9 	bl	5800 <d_template_param>
    5e4e:	e795      	b.n	5d7c <d_name+0x170>
    5e50:	3302      	adds	r3, #2
    5e52:	60eb      	str	r3, [r5, #12]
    5e54:	4628      	mov	r0, r5
    5e56:	f7ff fcbb 	bl	57d0 <d_compact_number>
    5e5a:	1e07      	subs	r7, r0, #0
    5e5c:	dace      	bge.n	5dfc <d_name+0x1f0>
    5e5e:	e6f3      	b.n	5c48 <d_name+0x3c>
    5e60:	4623      	mov	r3, r4
    5e62:	e7e7      	b.n	5e34 <d_name+0x228>
    5e64:	4628      	mov	r0, r5
    5e66:	f7ff fced 	bl	5844 <d_discriminator>
    5e6a:	2800      	cmp	r0, #0
    5e6c:	d1d0      	bne.n	5e10 <d_name+0x204>
    5e6e:	e6eb      	b.n	5c48 <d_name+0x3c>
    5e70:	3302      	adds	r3, #2
    5e72:	60eb      	str	r3, [r5, #12]
    5e74:	4628      	mov	r0, r5
    5e76:	f7ff fce5 	bl	5844 <d_discriminator>
    5e7a:	2800      	cmp	r0, #0
    5e7c:	f43f aee4 	beq.w	5c48 <d_name+0x3c>
    5e80:	4628      	mov	r0, r5
    5e82:	4911      	ldr	r1, [pc, #68]	; (5ec8 <d_name+0x2bc>)
    5e84:	220e      	movs	r2, #14
    5e86:	f7ff fabf 	bl	5408 <d_make_name>
    5e8a:	4632      	mov	r2, r6
    5e8c:	4603      	mov	r3, r0
    5e8e:	2102      	movs	r1, #2
    5e90:	4628      	mov	r0, r5
    5e92:	f7ff fa6d 	bl	5370 <d_make_comp>
    5e96:	e6f2      	b.n	5c7e <d_name+0x72>
    5e98:	603e      	str	r6, [r7, #0]
    5e9a:	2e00      	cmp	r6, #0
    5e9c:	f43f aed4 	beq.w	5c48 <d_name+0x3c>
    5ea0:	f1b8 0f00 	cmp.w	r8, #0
    5ea4:	d004      	beq.n	5eb0 <d_name+0x2a4>
    5ea6:	9b01      	ldr	r3, [sp, #4]
    5ea8:	f8c8 3004 	str.w	r3, [r8, #4]
    5eac:	f8cd 8004 	str.w	r8, [sp, #4]
    5eb0:	68eb      	ldr	r3, [r5, #12]
    5eb2:	781a      	ldrb	r2, [r3, #0]
    5eb4:	2a45      	cmp	r2, #69	; 0x45
    5eb6:	f47f aec7 	bne.w	5c48 <d_name+0x3c>
    5eba:	3301      	adds	r3, #1
    5ebc:	60eb      	str	r3, [r5, #12]
    5ebe:	9801      	ldr	r0, [sp, #4]
    5ec0:	e6dd      	b.n	5c7e <d_name+0x72>
    5ec2:	bf00      	nop
    5ec4:	000137c0 	.word	0x000137c0
    5ec8:	000137b0 	.word	0x000137b0

00005ecc <d_type>:
    5ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ece:	68c2      	ldr	r2, [r0, #12]
    5ed0:	7813      	ldrb	r3, [r2, #0]
    5ed2:	2b72      	cmp	r3, #114	; 0x72
    5ed4:	b083      	sub	sp, #12
    5ed6:	4604      	mov	r4, r0
    5ed8:	d054      	beq.n	5f84 <d_type+0xb8>
    5eda:	2b56      	cmp	r3, #86	; 0x56
    5edc:	d052      	beq.n	5f84 <d_type+0xb8>
    5ede:	2b4b      	cmp	r3, #75	; 0x4b
    5ee0:	d050      	beq.n	5f84 <d_type+0xb8>
    5ee2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5ee6:	294a      	cmp	r1, #74	; 0x4a
    5ee8:	d87d      	bhi.n	5fe6 <d_type+0x11a>
    5eea:	e8df f011 	tbh	[pc, r1, lsl #1]
    5eee:	00a2      	.short	0x00a2
    5ef0:	00a200a2 	.word	0x00a200a2
    5ef4:	00a200a2 	.word	0x00a200a2
    5ef8:	00a200a2 	.word	0x00a200a2
    5efc:	00a200a2 	.word	0x00a200a2
    5f00:	007c00a2 	.word	0x007c00a2
    5f04:	007c007c 	.word	0x007c007c
    5f08:	007c007c 	.word	0x007c007c
    5f0c:	007c007c 	.word	0x007c007c
    5f10:	007c00a7 	.word	0x007c00a7
    5f14:	00ff00cf 	.word	0x00ff00cf
    5f18:	00dc007c 	.word	0x00dc007c
    5f1c:	007c00f2 	.word	0x007c00f2
    5f20:	007c007c 	.word	0x007c007c
    5f24:	007c007c 	.word	0x007c007c
    5f28:	00a20171 	.word	0x00a20171
    5f2c:	01a701c1 	.word	0x01a701c1
    5f30:	01b4007c 	.word	0x01b4007c
    5f34:	01ef01ce 	.word	0x01ef01ce
    5f38:	007c0207 	.word	0x007c0207
    5f3c:	007c007c 	.word	0x007c007c
    5f40:	00a2007c 	.word	0x00a2007c
    5f44:	007c007c 	.word	0x007c007c
    5f48:	007c007c 	.word	0x007c007c
    5f4c:	007c007c 	.word	0x007c007c
    5f50:	02180218 	.word	0x02180218
    5f54:	02180218 	.word	0x02180218
    5f58:	02180218 	.word	0x02180218
    5f5c:	02180218 	.word	0x02180218
    5f60:	02180218 	.word	0x02180218
    5f64:	0218007c 	.word	0x0218007c
    5f68:	02180218 	.word	0x02180218
    5f6c:	007c0218 	.word	0x007c0218
    5f70:	007c007c 	.word	0x007c007c
    5f74:	02180218 	.word	0x02180218
    5f78:	02180089 	.word	0x02180089
    5f7c:	02180218 	.word	0x02180218
    5f80:	02180218 	.word	0x02180218
    5f84:	4620      	mov	r0, r4
    5f86:	a901      	add	r1, sp, #4
    5f88:	2200      	movs	r2, #0
    5f8a:	f7ff fa57 	bl	543c <d_cv_qualifiers>
    5f8e:	4605      	mov	r5, r0
    5f90:	b348      	cbz	r0, 5fe6 <d_type+0x11a>
    5f92:	4620      	mov	r0, r4
    5f94:	f7ff ff9a 	bl	5ecc <d_type>
    5f98:	6028      	str	r0, [r5, #0]
    5f9a:	b320      	cbz	r0, 5fe6 <d_type+0x11a>
    5f9c:	7802      	ldrb	r2, [r0, #0]
    5f9e:	3a1f      	subs	r2, #31
    5fa0:	2a01      	cmp	r2, #1
    5fa2:	d923      	bls.n	5fec <d_type+0x120>
    5fa4:	9a01      	ldr	r2, [sp, #4]
    5fa6:	b1f2      	cbz	r2, 5fe6 <d_type+0x11a>
    5fa8:	6a23      	ldr	r3, [r4, #32]
    5faa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5fac:	428b      	cmp	r3, r1
    5fae:	da1a      	bge.n	5fe6 <d_type+0x11a>
    5fb0:	69e1      	ldr	r1, [r4, #28]
    5fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    5fb6:	9801      	ldr	r0, [sp, #4]
    5fb8:	1c5d      	adds	r5, r3, #1
    5fba:	6225      	str	r5, [r4, #32]
    5fbc:	b003      	add	sp, #12
    5fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fc0:	4620      	mov	r0, r4
    5fc2:	f001 f855 	bl	7070 <d_expression>
    5fc6:	2141      	movs	r1, #65	; 0x41
    5fc8:	4602      	mov	r2, r0
    5fca:	2300      	movs	r3, #0
    5fcc:	4620      	mov	r0, r4
    5fce:	f7ff f9cf 	bl	5370 <d_make_comp>
    5fd2:	9001      	str	r0, [sp, #4]
    5fd4:	b138      	cbz	r0, 5fe6 <d_type+0x11a>
    5fd6:	68e3      	ldr	r3, [r4, #12]
    5fd8:	781a      	ldrb	r2, [r3, #0]
    5fda:	b122      	cbz	r2, 5fe6 <d_type+0x11a>
    5fdc:	1c5a      	adds	r2, r3, #1
    5fde:	60e2      	str	r2, [r4, #12]
    5fe0:	781b      	ldrb	r3, [r3, #0]
    5fe2:	2b45      	cmp	r3, #69	; 0x45
    5fe4:	d01a      	beq.n	601c <d_type+0x150>
    5fe6:	2000      	movs	r0, #0
    5fe8:	b003      	add	sp, #12
    5fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fec:	9a01      	ldr	r2, [sp, #4]
    5fee:	6841      	ldr	r1, [r0, #4]
    5ff0:	6042      	str	r2, [r0, #4]
    5ff2:	682b      	ldr	r3, [r5, #0]
    5ff4:	9301      	str	r3, [sp, #4]
    5ff6:	6029      	str	r1, [r5, #0]
    5ff8:	9a01      	ldr	r2, [sp, #4]
    5ffa:	2a00      	cmp	r2, #0
    5ffc:	d1d4      	bne.n	5fa8 <d_type+0xdc>
    5ffe:	e7f2      	b.n	5fe6 <d_type+0x11a>
    6000:	3201      	adds	r2, #1
    6002:	60e2      	str	r2, [r4, #12]
    6004:	4620      	mov	r0, r4
    6006:	f7ff fc2d 	bl	5864 <d_source_name>
    600a:	2128      	movs	r1, #40	; 0x28
    600c:	4602      	mov	r2, r0
    600e:	2300      	movs	r3, #0
    6010:	4620      	mov	r0, r4
    6012:	f7ff f9ad 	bl	5370 <d_make_comp>
    6016:	9001      	str	r0, [sp, #4]
    6018:	2800      	cmp	r0, #0
    601a:	d0e4      	beq.n	5fe6 <d_type+0x11a>
    601c:	6a23      	ldr	r3, [r4, #32]
    601e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6020:	4293      	cmp	r3, r2
    6022:	dae0      	bge.n	5fe6 <d_type+0x11a>
    6024:	69e2      	ldr	r2, [r4, #28]
    6026:	1c59      	adds	r1, r3, #1
    6028:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    602c:	9801      	ldr	r0, [sp, #4]
    602e:	6221      	str	r1, [r4, #32]
    6030:	e7da      	b.n	5fe8 <d_type+0x11c>
    6032:	4620      	mov	r0, r4
    6034:	f7ff fdea 	bl	5c0c <d_name>
    6038:	9001      	str	r0, [sp, #4]
    603a:	e7ed      	b.n	6018 <d_type+0x14c>
    603c:	1c51      	adds	r1, r2, #1
    603e:	60e1      	str	r1, [r4, #12]
    6040:	7853      	ldrb	r3, [r2, #1]
    6042:	2b5f      	cmp	r3, #95	; 0x5f
    6044:	f000 8279 	beq.w	653a <d_type+0x66e>
    6048:	3b30      	subs	r3, #48	; 0x30
    604a:	2b09      	cmp	r3, #9
    604c:	f200 827e 	bhi.w	654c <d_type+0x680>
    6050:	460a      	mov	r2, r1
    6052:	3201      	adds	r2, #1
    6054:	60e2      	str	r2, [r4, #12]
    6056:	7813      	ldrb	r3, [r2, #0]
    6058:	3b30      	subs	r3, #48	; 0x30
    605a:	2b09      	cmp	r3, #9
    605c:	d9f9      	bls.n	6052 <d_type+0x186>
    605e:	1a52      	subs	r2, r2, r1
    6060:	4620      	mov	r0, r4
    6062:	f7ff f9d1 	bl	5408 <d_make_name>
    6066:	4605      	mov	r5, r0
    6068:	2800      	cmp	r0, #0
    606a:	d030      	beq.n	60ce <d_type+0x202>
    606c:	68e1      	ldr	r1, [r4, #12]
    606e:	780b      	ldrb	r3, [r1, #0]
    6070:	2b5f      	cmp	r3, #95	; 0x5f
    6072:	d12c      	bne.n	60ce <d_type+0x202>
    6074:	3101      	adds	r1, #1
    6076:	60e1      	str	r1, [r4, #12]
    6078:	4620      	mov	r0, r4
    607a:	f7ff ff27 	bl	5ecc <d_type>
    607e:	462a      	mov	r2, r5
    6080:	4603      	mov	r3, r0
    6082:	212a      	movs	r1, #42	; 0x2a
    6084:	4620      	mov	r0, r4
    6086:	f7ff f973 	bl	5370 <d_make_comp>
    608a:	e7d5      	b.n	6038 <d_type+0x16c>
    608c:	3201      	adds	r2, #1
    608e:	60e2      	str	r2, [r4, #12]
    6090:	4620      	mov	r0, r4
    6092:	f7ff ff1b 	bl	5ecc <d_type>
    6096:	2125      	movs	r1, #37	; 0x25
    6098:	4602      	mov	r2, r0
    609a:	2300      	movs	r3, #0
    609c:	4620      	mov	r0, r4
    609e:	f7ff f967 	bl	5370 <d_make_comp>
    60a2:	9001      	str	r0, [sp, #4]
    60a4:	e7b8      	b.n	6018 <d_type+0x14c>
    60a6:	1c53      	adds	r3, r2, #1
    60a8:	60e3      	str	r3, [r4, #12]
    60aa:	7853      	ldrb	r3, [r2, #1]
    60ac:	2b59      	cmp	r3, #89	; 0x59
    60ae:	bf04      	itt	eq
    60b0:	3202      	addeq	r2, #2
    60b2:	60e2      	streq	r2, [r4, #12]
    60b4:	2101      	movs	r1, #1
    60b6:	4620      	mov	r0, r4
    60b8:	f000 fad0 	bl	665c <d_bare_function_type>
    60bc:	4601      	mov	r1, r0
    60be:	4620      	mov	r0, r4
    60c0:	f7ff fa16 	bl	54f0 <d_ref_qualifier>
    60c4:	68e3      	ldr	r3, [r4, #12]
    60c6:	781a      	ldrb	r2, [r3, #0]
    60c8:	2a45      	cmp	r2, #69	; 0x45
    60ca:	f000 823c 	beq.w	6546 <d_type+0x67a>
    60ce:	2000      	movs	r0, #0
    60d0:	e7b2      	b.n	6038 <d_type+0x16c>
    60d2:	3201      	adds	r2, #1
    60d4:	60e2      	str	r2, [r4, #12]
    60d6:	4620      	mov	r0, r4
    60d8:	f7ff fef8 	bl	5ecc <d_type>
    60dc:	2126      	movs	r1, #38	; 0x26
    60de:	4602      	mov	r2, r0
    60e0:	2300      	movs	r3, #0
    60e2:	4620      	mov	r0, r4
    60e4:	f7ff f944 	bl	5370 <d_make_comp>
    60e8:	9001      	str	r0, [sp, #4]
    60ea:	e795      	b.n	6018 <d_type+0x14c>
    60ec:	1c53      	adds	r3, r2, #1
    60ee:	60e3      	str	r3, [r4, #12]
    60f0:	7853      	ldrb	r3, [r2, #1]
    60f2:	2b00      	cmp	r3, #0
    60f4:	f43f af77 	beq.w	5fe6 <d_type+0x11a>
    60f8:	1c93      	adds	r3, r2, #2
    60fa:	60e3      	str	r3, [r4, #12]
    60fc:	7853      	ldrb	r3, [r2, #1]
    60fe:	3b46      	subs	r3, #70	; 0x46
    6100:	2b30      	cmp	r3, #48	; 0x30
    6102:	f63f af70 	bhi.w	5fe6 <d_type+0x11a>
    6106:	a101      	add	r1, pc, #4	; (adr r1, 610c <d_type+0x240>)
    6108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    610c:	00006425 	.word	0x00006425
    6110:	00005fe7 	.word	0x00005fe7
    6114:	00005fe7 	.word	0x00005fe7
    6118:	00005fe7 	.word	0x00005fe7
    611c:	00005fe7 	.word	0x00005fe7
    6120:	00005fe7 	.word	0x00005fe7
    6124:	00005fe7 	.word	0x00005fe7
    6128:	00005fe7 	.word	0x00005fe7
    612c:	00005fe7 	.word	0x00005fe7
    6130:	00005fe7 	.word	0x00005fe7
    6134:	00005fe7 	.word	0x00005fe7
    6138:	00005fe7 	.word	0x00005fe7
    613c:	00005fe7 	.word	0x00005fe7
    6140:	00005fe7 	.word	0x00005fe7
    6144:	00005fc1 	.word	0x00005fc1
    6148:	00005fe7 	.word	0x00005fe7
    614c:	00005fe7 	.word	0x00005fe7
    6150:	00005fe7 	.word	0x00005fe7
    6154:	00005fe7 	.word	0x00005fe7
    6158:	00005fe7 	.word	0x00005fe7
    615c:	00005fe7 	.word	0x00005fe7
    6160:	00005fe7 	.word	0x00005fe7
    6164:	00005fe7 	.word	0x00005fe7
    6168:	00005fe7 	.word	0x00005fe7
    616c:	00005fe7 	.word	0x00005fe7
    6170:	00005fe7 	.word	0x00005fe7
    6174:	00005fe7 	.word	0x00005fe7
    6178:	00006419 	.word	0x00006419
    617c:	00005fe7 	.word	0x00005fe7
    6180:	00005fe7 	.word	0x00005fe7
    6184:	000063f1 	.word	0x000063f1
    6188:	000063c9 	.word	0x000063c9
    618c:	000063a1 	.word	0x000063a1
    6190:	00005fe7 	.word	0x00005fe7
    6194:	00006379 	.word	0x00006379
    6198:	00006349 	.word	0x00006349
    619c:	00005fe7 	.word	0x00005fe7
    61a0:	00005fe7 	.word	0x00005fe7
    61a4:	00005fe7 	.word	0x00005fe7
    61a8:	00005fe7 	.word	0x00005fe7
    61ac:	000064fd 	.word	0x000064fd
    61b0:	00005fe7 	.word	0x00005fe7
    61b4:	000064e7 	.word	0x000064e7
    61b8:	00005fe7 	.word	0x00005fe7
    61bc:	00005fe7 	.word	0x00005fe7
    61c0:	000064c3 	.word	0x000064c3
    61c4:	00005fc1 	.word	0x00005fc1
    61c8:	00005fe7 	.word	0x00005fe7
    61cc:	0000648b 	.word	0x0000648b
    61d0:	3201      	adds	r2, #1
    61d2:	60e2      	str	r2, [r4, #12]
    61d4:	4620      	mov	r0, r4
    61d6:	f7ff fe79 	bl	5ecc <d_type>
    61da:	ae01      	add	r6, sp, #4
    61dc:	4607      	mov	r7, r0
    61de:	4631      	mov	r1, r6
    61e0:	4620      	mov	r0, r4
    61e2:	2201      	movs	r2, #1
    61e4:	f7ff f92a 	bl	543c <d_cv_qualifiers>
    61e8:	4605      	mov	r5, r0
    61ea:	2800      	cmp	r0, #0
    61ec:	f43f af6f 	beq.w	60ce <d_type+0x202>
    61f0:	4620      	mov	r0, r4
    61f2:	f7ff fe6b 	bl	5ecc <d_type>
    61f6:	6028      	str	r0, [r5, #0]
    61f8:	2800      	cmp	r0, #0
    61fa:	f43f af68 	beq.w	60ce <d_type+0x202>
    61fe:	42b5      	cmp	r5, r6
    6200:	d015      	beq.n	622e <d_type+0x362>
    6202:	7801      	ldrb	r1, [r0, #0]
    6204:	f1a1 021f 	sub.w	r2, r1, #31
    6208:	2a01      	cmp	r2, #1
    620a:	f240 81a7 	bls.w	655c <d_type+0x690>
    620e:	2929      	cmp	r1, #41	; 0x29
    6210:	d00d      	beq.n	622e <d_type+0x362>
    6212:	9a01      	ldr	r2, [sp, #4]
    6214:	2a00      	cmp	r2, #0
    6216:	f43f af5a 	beq.w	60ce <d_type+0x202>
    621a:	6a23      	ldr	r3, [r4, #32]
    621c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    621e:	428b      	cmp	r3, r1
    6220:	f6bf af55 	bge.w	60ce <d_type+0x202>
    6224:	69e1      	ldr	r1, [r4, #28]
    6226:	1c58      	adds	r0, r3, #1
    6228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    622c:	6220      	str	r0, [r4, #32]
    622e:	463a      	mov	r2, r7
    6230:	4620      	mov	r0, r4
    6232:	212b      	movs	r1, #43	; 0x2b
    6234:	9b01      	ldr	r3, [sp, #4]
    6236:	f7ff f89b 	bl	5370 <d_make_comp>
    623a:	e6fd      	b.n	6038 <d_type+0x16c>
    623c:	3201      	adds	r2, #1
    623e:	60e2      	str	r2, [r4, #12]
    6240:	4620      	mov	r0, r4
    6242:	f7ff fe43 	bl	5ecc <d_type>
    6246:	2122      	movs	r1, #34	; 0x22
    6248:	4602      	mov	r2, r0
    624a:	2300      	movs	r3, #0
    624c:	4620      	mov	r0, r4
    624e:	f7ff f88f 	bl	5370 <d_make_comp>
    6252:	9001      	str	r0, [sp, #4]
    6254:	e6e0      	b.n	6018 <d_type+0x14c>
    6256:	3201      	adds	r2, #1
    6258:	60e2      	str	r2, [r4, #12]
    625a:	4620      	mov	r0, r4
    625c:	f7ff fe36 	bl	5ecc <d_type>
    6260:	2123      	movs	r1, #35	; 0x23
    6262:	4602      	mov	r2, r0
    6264:	2300      	movs	r3, #0
    6266:	4620      	mov	r0, r4
    6268:	f7ff f882 	bl	5370 <d_make_comp>
    626c:	9001      	str	r0, [sp, #4]
    626e:	e6d3      	b.n	6018 <d_type+0x14c>
    6270:	3201      	adds	r2, #1
    6272:	60e2      	str	r2, [r4, #12]
    6274:	4620      	mov	r0, r4
    6276:	f7ff fe29 	bl	5ecc <d_type>
    627a:	2124      	movs	r1, #36	; 0x24
    627c:	4602      	mov	r2, r0
    627e:	2300      	movs	r3, #0
    6280:	4620      	mov	r0, r4
    6282:	f7ff f875 	bl	5370 <d_make_comp>
    6286:	9001      	str	r0, [sp, #4]
    6288:	e6c6      	b.n	6018 <d_type+0x14c>
    628a:	7853      	ldrb	r3, [r2, #1]
    628c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    6290:	2a09      	cmp	r2, #9
    6292:	d905      	bls.n	62a0 <d_type+0x3d4>
    6294:	2b5f      	cmp	r3, #95	; 0x5f
    6296:	d003      	beq.n	62a0 <d_type+0x3d4>
    6298:	3b41      	subs	r3, #65	; 0x41
    629a:	2b19      	cmp	r3, #25
    629c:	f200 8166 	bhi.w	656c <d_type+0x6a0>
    62a0:	4620      	mov	r0, r4
    62a2:	2100      	movs	r1, #0
    62a4:	f7ff f984 	bl	55b0 <d_substitution>
    62a8:	68e3      	ldr	r3, [r4, #12]
    62aa:	9001      	str	r0, [sp, #4]
    62ac:	781b      	ldrb	r3, [r3, #0]
    62ae:	2b49      	cmp	r3, #73	; 0x49
    62b0:	4605      	mov	r5, r0
    62b2:	f47f ae99 	bne.w	5fe8 <d_type+0x11c>
    62b6:	4620      	mov	r0, r4
    62b8:	f7ff fc4a 	bl	5b50 <d_template_args>
    62bc:	462a      	mov	r2, r5
    62be:	4603      	mov	r3, r0
    62c0:	2104      	movs	r1, #4
    62c2:	4620      	mov	r0, r4
    62c4:	f7ff f854 	bl	5370 <d_make_comp>
    62c8:	9001      	str	r0, [sp, #4]
    62ca:	e6a5      	b.n	6018 <d_type+0x14c>
    62cc:	4620      	mov	r0, r4
    62ce:	f7ff fa97 	bl	5800 <d_template_param>
    62d2:	68e3      	ldr	r3, [r4, #12]
    62d4:	9001      	str	r0, [sp, #4]
    62d6:	781b      	ldrb	r3, [r3, #0]
    62d8:	2b49      	cmp	r3, #73	; 0x49
    62da:	f47f ae9d 	bne.w	6018 <d_type+0x14c>
    62de:	2800      	cmp	r0, #0
    62e0:	f43f ae81 	beq.w	5fe6 <d_type+0x11a>
    62e4:	6a23      	ldr	r3, [r4, #32]
    62e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    62e8:	4293      	cmp	r3, r2
    62ea:	f6bf ae7c 	bge.w	5fe6 <d_type+0x11a>
    62ee:	69e2      	ldr	r2, [r4, #28]
    62f0:	1c59      	adds	r1, r3, #1
    62f2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    62f6:	9d01      	ldr	r5, [sp, #4]
    62f8:	6221      	str	r1, [r4, #32]
    62fa:	e7dc      	b.n	62b6 <d_type+0x3ea>
    62fc:	3201      	adds	r2, #1
    62fe:	60e2      	str	r2, [r4, #12]
    6300:	4620      	mov	r0, r4
    6302:	f7ff faaf 	bl	5864 <d_source_name>
    6306:	9001      	str	r0, [sp, #4]
    6308:	4620      	mov	r0, r4
    630a:	f7ff fddf 	bl	5ecc <d_type>
    630e:	2121      	movs	r1, #33	; 0x21
    6310:	4602      	mov	r2, r0
    6312:	9b01      	ldr	r3, [sp, #4]
    6314:	4620      	mov	r0, r4
    6316:	f7ff f82b 	bl	5370 <d_make_comp>
    631a:	9001      	str	r0, [sp, #4]
    631c:	e67c      	b.n	6018 <d_type+0x14c>
    631e:	6961      	ldr	r1, [r4, #20]
    6320:	69a0      	ldr	r0, [r4, #24]
    6322:	4da3      	ldr	r5, [pc, #652]	; (65b0 <d_type+0x6e4>)
    6324:	3b61      	subs	r3, #97	; 0x61
    6326:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    632a:	4281      	cmp	r1, r0
    632c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    6330:	f2c0 80f6 	blt.w	6520 <d_type+0x654>
    6334:	2300      	movs	r3, #0
    6336:	4618      	mov	r0, r3
    6338:	685b      	ldr	r3, [r3, #4]
    633a:	6859      	ldr	r1, [r3, #4]
    633c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    633e:	3201      	adds	r2, #1
    6340:	440b      	add	r3, r1
    6342:	60e2      	str	r2, [r4, #12]
    6344:	6323      	str	r3, [r4, #48]	; 0x30
    6346:	e64f      	b.n	5fe8 <d_type+0x11c>
    6348:	6963      	ldr	r3, [r4, #20]
    634a:	69a2      	ldr	r2, [r4, #24]
    634c:	4293      	cmp	r3, r2
    634e:	f280 80f6 	bge.w	653e <d_type+0x672>
    6352:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6356:	6921      	ldr	r1, [r4, #16]
    6358:	0092      	lsls	r2, r2, #2
    635a:	3301      	adds	r3, #1
    635c:	1888      	adds	r0, r1, r2
    635e:	6163      	str	r3, [r4, #20]
    6360:	f000 8121 	beq.w	65a6 <d_type+0x6da>
    6364:	4d93      	ldr	r5, [pc, #588]	; (65b4 <d_type+0x6e8>)
    6366:	2327      	movs	r3, #39	; 0x27
    6368:	548b      	strb	r3, [r1, r2]
    636a:	462b      	mov	r3, r5
    636c:	6045      	str	r5, [r0, #4]
    636e:	685a      	ldr	r2, [r3, #4]
    6370:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6372:	4413      	add	r3, r2
    6374:	6323      	str	r3, [r4, #48]	; 0x30
    6376:	e637      	b.n	5fe8 <d_type+0x11c>
    6378:	6963      	ldr	r3, [r4, #20]
    637a:	69a2      	ldr	r2, [r4, #24]
    637c:	4293      	cmp	r3, r2
    637e:	f280 80de 	bge.w	653e <d_type+0x672>
    6382:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6386:	6921      	ldr	r1, [r4, #16]
    6388:	0092      	lsls	r2, r2, #2
    638a:	3301      	adds	r3, #1
    638c:	1888      	adds	r0, r1, r2
    638e:	6163      	str	r3, [r4, #20]
    6390:	f000 8109 	beq.w	65a6 <d_type+0x6da>
    6394:	4d88      	ldr	r5, [pc, #544]	; (65b8 <d_type+0x6ec>)
    6396:	2327      	movs	r3, #39	; 0x27
    6398:	548b      	strb	r3, [r1, r2]
    639a:	462b      	mov	r3, r5
    639c:	6045      	str	r5, [r0, #4]
    639e:	e7e6      	b.n	636e <d_type+0x4a2>
    63a0:	6963      	ldr	r3, [r4, #20]
    63a2:	69a2      	ldr	r2, [r4, #24]
    63a4:	4293      	cmp	r3, r2
    63a6:	f280 80ca 	bge.w	653e <d_type+0x672>
    63aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    63ae:	6921      	ldr	r1, [r4, #16]
    63b0:	0092      	lsls	r2, r2, #2
    63b2:	3301      	adds	r3, #1
    63b4:	1888      	adds	r0, r1, r2
    63b6:	6163      	str	r3, [r4, #20]
    63b8:	f000 80f5 	beq.w	65a6 <d_type+0x6da>
    63bc:	4d7f      	ldr	r5, [pc, #508]	; (65bc <d_type+0x6f0>)
    63be:	2327      	movs	r3, #39	; 0x27
    63c0:	548b      	strb	r3, [r1, r2]
    63c2:	462b      	mov	r3, r5
    63c4:	6045      	str	r5, [r0, #4]
    63c6:	e7d2      	b.n	636e <d_type+0x4a2>
    63c8:	6963      	ldr	r3, [r4, #20]
    63ca:	69a2      	ldr	r2, [r4, #24]
    63cc:	4293      	cmp	r3, r2
    63ce:	f280 80b6 	bge.w	653e <d_type+0x672>
    63d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    63d6:	6921      	ldr	r1, [r4, #16]
    63d8:	0092      	lsls	r2, r2, #2
    63da:	3301      	adds	r3, #1
    63dc:	1888      	adds	r0, r1, r2
    63de:	6163      	str	r3, [r4, #20]
    63e0:	f000 80e1 	beq.w	65a6 <d_type+0x6da>
    63e4:	4d76      	ldr	r5, [pc, #472]	; (65c0 <d_type+0x6f4>)
    63e6:	2327      	movs	r3, #39	; 0x27
    63e8:	548b      	strb	r3, [r1, r2]
    63ea:	462b      	mov	r3, r5
    63ec:	6045      	str	r5, [r0, #4]
    63ee:	e7be      	b.n	636e <d_type+0x4a2>
    63f0:	6963      	ldr	r3, [r4, #20]
    63f2:	69a2      	ldr	r2, [r4, #24]
    63f4:	4293      	cmp	r3, r2
    63f6:	f280 80a2 	bge.w	653e <d_type+0x672>
    63fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    63fe:	6921      	ldr	r1, [r4, #16]
    6400:	0092      	lsls	r2, r2, #2
    6402:	3301      	adds	r3, #1
    6404:	1888      	adds	r0, r1, r2
    6406:	6163      	str	r3, [r4, #20]
    6408:	f000 80cd 	beq.w	65a6 <d_type+0x6da>
    640c:	4d6d      	ldr	r5, [pc, #436]	; (65c4 <d_type+0x6f8>)
    640e:	2327      	movs	r3, #39	; 0x27
    6410:	548b      	strb	r3, [r1, r2]
    6412:	462b      	mov	r3, r5
    6414:	6045      	str	r5, [r0, #4]
    6416:	e7aa      	b.n	636e <d_type+0x4a2>
    6418:	4620      	mov	r0, r4
    641a:	496b      	ldr	r1, [pc, #428]	; (65c8 <d_type+0x6fc>)
    641c:	2204      	movs	r2, #4
    641e:	f7fe fff3 	bl	5408 <d_make_name>
    6422:	e5e1      	b.n	5fe8 <d_type+0x11c>
    6424:	6963      	ldr	r3, [r4, #20]
    6426:	69a1      	ldr	r1, [r4, #24]
    6428:	428b      	cmp	r3, r1
    642a:	f280 80ab 	bge.w	6584 <d_type+0x6b8>
    642e:	6921      	ldr	r1, [r4, #16]
    6430:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    6434:	3301      	adds	r3, #1
    6436:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    643a:	6163      	str	r3, [r4, #20]
    643c:	232c      	movs	r3, #44	; 0x2c
    643e:	9501      	str	r5, [sp, #4]
    6440:	702b      	strb	r3, [r5, #0]
    6442:	7893      	ldrb	r3, [r2, #2]
    6444:	3b30      	subs	r3, #48	; 0x30
    6446:	2b09      	cmp	r3, #9
    6448:	bf8c      	ite	hi
    644a:	2300      	movhi	r3, #0
    644c:	2301      	movls	r3, #1
    644e:	812b      	strh	r3, [r5, #8]
    6450:	2b00      	cmp	r3, #0
    6452:	f040 8099 	bne.w	6588 <d_type+0x6bc>
    6456:	4620      	mov	r0, r4
    6458:	f7ff fd38 	bl	5ecc <d_type>
    645c:	6068      	str	r0, [r5, #4]
    645e:	9b01      	ldr	r3, [sp, #4]
    6460:	685b      	ldr	r3, [r3, #4]
    6462:	2b00      	cmp	r3, #0
    6464:	f43f adbf 	beq.w	5fe6 <d_type+0x11a>
    6468:	f104 000c 	add.w	r0, r4, #12
    646c:	f7ff f96e 	bl	574c <d_number.isra.0>
    6470:	68e3      	ldr	r3, [r4, #12]
    6472:	781a      	ldrb	r2, [r3, #0]
    6474:	b132      	cbz	r2, 6484 <d_type+0x5b8>
    6476:	1c5a      	adds	r2, r3, #1
    6478:	60e2      	str	r2, [r4, #12]
    647a:	781a      	ldrb	r2, [r3, #0]
    647c:	f1b2 0373 	subs.w	r3, r2, #115	; 0x73
    6480:	425a      	negs	r2, r3
    6482:	415a      	adcs	r2, r3
    6484:	9801      	ldr	r0, [sp, #4]
    6486:	8142      	strh	r2, [r0, #10]
    6488:	e5ae      	b.n	5fe8 <d_type+0x11c>
    648a:	7893      	ldrb	r3, [r2, #2]
    648c:	2b5f      	cmp	r3, #95	; 0x5f
    648e:	f000 8081 	beq.w	6594 <d_type+0x6c8>
    6492:	4620      	mov	r0, r4
    6494:	f7ff f980 	bl	5798 <d_number_component>
    6498:	4605      	mov	r5, r0
    649a:	2d00      	cmp	r5, #0
    649c:	f000 8081 	beq.w	65a2 <d_type+0x6d6>
    64a0:	68e3      	ldr	r3, [r4, #12]
    64a2:	781a      	ldrb	r2, [r3, #0]
    64a4:	2a5f      	cmp	r2, #95	; 0x5f
    64a6:	f47f ae12 	bne.w	60ce <d_type+0x202>
    64aa:	3301      	adds	r3, #1
    64ac:	60e3      	str	r3, [r4, #12]
    64ae:	4620      	mov	r0, r4
    64b0:	f7ff fd0c 	bl	5ecc <d_type>
    64b4:	462a      	mov	r2, r5
    64b6:	4603      	mov	r3, r0
    64b8:	212d      	movs	r1, #45	; 0x2d
    64ba:	4620      	mov	r0, r4
    64bc:	f7fe ff58 	bl	5370 <d_make_comp>
    64c0:	e5ba      	b.n	6038 <d_type+0x16c>
    64c2:	6963      	ldr	r3, [r4, #20]
    64c4:	69a2      	ldr	r2, [r4, #24]
    64c6:	4293      	cmp	r3, r2
    64c8:	da39      	bge.n	653e <d_type+0x672>
    64ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    64ce:	6921      	ldr	r1, [r4, #16]
    64d0:	0092      	lsls	r2, r2, #2
    64d2:	3301      	adds	r3, #1
    64d4:	1888      	adds	r0, r1, r2
    64d6:	6163      	str	r3, [r4, #20]
    64d8:	d065      	beq.n	65a6 <d_type+0x6da>
    64da:	4d3c      	ldr	r5, [pc, #240]	; (65cc <d_type+0x700>)
    64dc:	2327      	movs	r3, #39	; 0x27
    64de:	548b      	strb	r3, [r1, r2]
    64e0:	462b      	mov	r3, r5
    64e2:	6045      	str	r5, [r0, #4]
    64e4:	e743      	b.n	636e <d_type+0x4a2>
    64e6:	4620      	mov	r0, r4
    64e8:	f7ff fcf0 	bl	5ecc <d_type>
    64ec:	2149      	movs	r1, #73	; 0x49
    64ee:	4602      	mov	r2, r0
    64f0:	2300      	movs	r3, #0
    64f2:	4620      	mov	r0, r4
    64f4:	f7fe ff3c 	bl	5370 <d_make_comp>
    64f8:	9001      	str	r0, [sp, #4]
    64fa:	e58d      	b.n	6018 <d_type+0x14c>
    64fc:	6963      	ldr	r3, [r4, #20]
    64fe:	69a2      	ldr	r2, [r4, #24]
    6500:	4293      	cmp	r3, r2
    6502:	da1c      	bge.n	653e <d_type+0x672>
    6504:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6508:	6921      	ldr	r1, [r4, #16]
    650a:	0092      	lsls	r2, r2, #2
    650c:	3301      	adds	r3, #1
    650e:	1888      	adds	r0, r1, r2
    6510:	6163      	str	r3, [r4, #20]
    6512:	d048      	beq.n	65a6 <d_type+0x6da>
    6514:	4d2e      	ldr	r5, [pc, #184]	; (65d0 <d_type+0x704>)
    6516:	2327      	movs	r3, #39	; 0x27
    6518:	548b      	strb	r3, [r1, r2]
    651a:	462b      	mov	r3, r5
    651c:	6045      	str	r5, [r0, #4]
    651e:	e726      	b.n	636e <d_type+0x4a2>
    6520:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    6524:	6925      	ldr	r5, [r4, #16]
    6526:	3101      	adds	r1, #1
    6528:	0080      	lsls	r0, r0, #2
    652a:	6161      	str	r1, [r4, #20]
    652c:	1829      	adds	r1, r5, r0
    652e:	d03c      	beq.n	65aa <d_type+0x6de>
    6530:	2627      	movs	r6, #39	; 0x27
    6532:	542e      	strb	r6, [r5, r0]
    6534:	4608      	mov	r0, r1
    6536:	604b      	str	r3, [r1, #4]
    6538:	e6ff      	b.n	633a <d_type+0x46e>
    653a:	2500      	movs	r5, #0
    653c:	e59a      	b.n	6074 <d_type+0x1a8>
    653e:	2300      	movs	r3, #0
    6540:	4618      	mov	r0, r3
    6542:	685b      	ldr	r3, [r3, #4]
    6544:	e713      	b.n	636e <d_type+0x4a2>
    6546:	3301      	adds	r3, #1
    6548:	60e3      	str	r3, [r4, #12]
    654a:	e575      	b.n	6038 <d_type+0x16c>
    654c:	4620      	mov	r0, r4
    654e:	f000 fd8f 	bl	7070 <d_expression>
    6552:	4605      	mov	r5, r0
    6554:	2800      	cmp	r0, #0
    6556:	f47f ad89 	bne.w	606c <d_type+0x1a0>
    655a:	e5b8      	b.n	60ce <d_type+0x202>
    655c:	9901      	ldr	r1, [sp, #4]
    655e:	6842      	ldr	r2, [r0, #4]
    6560:	6041      	str	r1, [r0, #4]
    6562:	682b      	ldr	r3, [r5, #0]
    6564:	9301      	str	r3, [sp, #4]
    6566:	7811      	ldrb	r1, [r2, #0]
    6568:	602a      	str	r2, [r5, #0]
    656a:	e650      	b.n	620e <d_type+0x342>
    656c:	4620      	mov	r0, r4
    656e:	f7ff fb4d 	bl	5c0c <d_name>
    6572:	9001      	str	r0, [sp, #4]
    6574:	2800      	cmp	r0, #0
    6576:	f43f ad36 	beq.w	5fe6 <d_type+0x11a>
    657a:	7803      	ldrb	r3, [r0, #0]
    657c:	2b18      	cmp	r3, #24
    657e:	f47f ad4d 	bne.w	601c <d_type+0x150>
    6582:	e531      	b.n	5fe8 <d_type+0x11c>
    6584:	2500      	movs	r5, #0
    6586:	e759      	b.n	643c <d_type+0x570>
    6588:	f104 000c 	add.w	r0, r4, #12
    658c:	f7ff f8de 	bl	574c <d_number.isra.0>
    6590:	9d01      	ldr	r5, [sp, #4]
    6592:	e760      	b.n	6456 <d_type+0x58a>
    6594:	3203      	adds	r2, #3
    6596:	60e2      	str	r2, [r4, #12]
    6598:	4620      	mov	r0, r4
    659a:	f000 fd69 	bl	7070 <d_expression>
    659e:	4605      	mov	r5, r0
    65a0:	e77b      	b.n	649a <d_type+0x5ce>
    65a2:	4628      	mov	r0, r5
    65a4:	e548      	b.n	6038 <d_type+0x16c>
    65a6:	6843      	ldr	r3, [r0, #4]
    65a8:	e6e1      	b.n	636e <d_type+0x4a2>
    65aa:	684b      	ldr	r3, [r1, #4]
    65ac:	4608      	mov	r0, r1
    65ae:	e6c4      	b.n	633a <d_type+0x46e>
    65b0:	00013118 	.word	0x00013118
    65b4:	00013384 	.word	0x00013384
    65b8:	0001335c 	.word	0x0001335c
    65bc:	00013320 	.word	0x00013320
    65c0:	00013348 	.word	0x00013348
    65c4:	00013334 	.word	0x00013334
    65c8:	000137c4 	.word	0x000137c4
    65cc:	00013370 	.word	0x00013370
    65d0:	00013398 	.word	0x00013398

000065d4 <d_parmlist>:
    65d4:	b570      	push	{r4, r5, r6, lr}
    65d6:	b082      	sub	sp, #8
    65d8:	2300      	movs	r3, #0
    65da:	68c1      	ldr	r1, [r0, #12]
    65dc:	9301      	str	r3, [sp, #4]
    65de:	780b      	ldrb	r3, [r1, #0]
    65e0:	4604      	mov	r4, r0
    65e2:	b34b      	cbz	r3, 6638 <d_parmlist+0x64>
    65e4:	2b45      	cmp	r3, #69	; 0x45
    65e6:	d027      	beq.n	6638 <d_parmlist+0x64>
    65e8:	2b2e      	cmp	r3, #46	; 0x2e
    65ea:	d025      	beq.n	6638 <d_parmlist+0x64>
    65ec:	ae01      	add	r6, sp, #4
    65ee:	e017      	b.n	6620 <d_parmlist+0x4c>
    65f0:	2b4f      	cmp	r3, #79	; 0x4f
    65f2:	d017      	beq.n	6624 <d_parmlist+0x50>
    65f4:	4620      	mov	r0, r4
    65f6:	f7ff fc69 	bl	5ecc <d_type>
    65fa:	4605      	mov	r5, r0
    65fc:	212e      	movs	r1, #46	; 0x2e
    65fe:	4620      	mov	r0, r4
    6600:	462a      	mov	r2, r5
    6602:	2300      	movs	r3, #0
    6604:	b1c5      	cbz	r5, 6638 <d_parmlist+0x64>
    6606:	f7fe feb3 	bl	5370 <d_make_comp>
    660a:	6030      	str	r0, [r6, #0]
    660c:	b1a0      	cbz	r0, 6638 <d_parmlist+0x64>
    660e:	68e1      	ldr	r1, [r4, #12]
    6610:	780b      	ldrb	r3, [r1, #0]
    6612:	f100 0608 	add.w	r6, r0, #8
    6616:	b143      	cbz	r3, 662a <d_parmlist+0x56>
    6618:	2b45      	cmp	r3, #69	; 0x45
    661a:	d006      	beq.n	662a <d_parmlist+0x56>
    661c:	2b2e      	cmp	r3, #46	; 0x2e
    661e:	d004      	beq.n	662a <d_parmlist+0x56>
    6620:	2b52      	cmp	r3, #82	; 0x52
    6622:	d1e5      	bne.n	65f0 <d_parmlist+0x1c>
    6624:	784b      	ldrb	r3, [r1, #1]
    6626:	2b45      	cmp	r3, #69	; 0x45
    6628:	d1e4      	bne.n	65f4 <d_parmlist+0x20>
    662a:	9b01      	ldr	r3, [sp, #4]
    662c:	b123      	cbz	r3, 6638 <d_parmlist+0x64>
    662e:	689a      	ldr	r2, [r3, #8]
    6630:	b12a      	cbz	r2, 663e <d_parmlist+0x6a>
    6632:	4618      	mov	r0, r3
    6634:	b002      	add	sp, #8
    6636:	bd70      	pop	{r4, r5, r6, pc}
    6638:	2000      	movs	r0, #0
    663a:	b002      	add	sp, #8
    663c:	bd70      	pop	{r4, r5, r6, pc}
    663e:	6859      	ldr	r1, [r3, #4]
    6640:	7808      	ldrb	r0, [r1, #0]
    6642:	2827      	cmp	r0, #39	; 0x27
    6644:	d1f5      	bne.n	6632 <d_parmlist+0x5e>
    6646:	6849      	ldr	r1, [r1, #4]
    6648:	7c08      	ldrb	r0, [r1, #16]
    664a:	2809      	cmp	r0, #9
    664c:	d1f1      	bne.n	6632 <d_parmlist+0x5e>
    664e:	6848      	ldr	r0, [r1, #4]
    6650:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6652:	1a09      	subs	r1, r1, r0
    6654:	6321      	str	r1, [r4, #48]	; 0x30
    6656:	4618      	mov	r0, r3
    6658:	605a      	str	r2, [r3, #4]
    665a:	e7eb      	b.n	6634 <d_parmlist+0x60>

0000665c <d_bare_function_type>:
    665c:	b570      	push	{r4, r5, r6, lr}
    665e:	68c3      	ldr	r3, [r0, #12]
    6660:	781a      	ldrb	r2, [r3, #0]
    6662:	2a4a      	cmp	r2, #74	; 0x4a
    6664:	4604      	mov	r4, r0
    6666:	d00d      	beq.n	6684 <d_bare_function_type+0x28>
    6668:	b971      	cbnz	r1, 6688 <d_bare_function_type+0x2c>
    666a:	460d      	mov	r5, r1
    666c:	4620      	mov	r0, r4
    666e:	f7ff ffb1 	bl	65d4 <d_parmlist>
    6672:	4603      	mov	r3, r0
    6674:	b170      	cbz	r0, 6694 <d_bare_function_type+0x38>
    6676:	4620      	mov	r0, r4
    6678:	462a      	mov	r2, r5
    667a:	2129      	movs	r1, #41	; 0x29
    667c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6680:	f7fe be76 	b.w	5370 <d_make_comp>
    6684:	3301      	adds	r3, #1
    6686:	60c3      	str	r3, [r0, #12]
    6688:	4620      	mov	r0, r4
    668a:	f7ff fc1f 	bl	5ecc <d_type>
    668e:	4605      	mov	r5, r0
    6690:	2800      	cmp	r0, #0
    6692:	d1eb      	bne.n	666c <d_bare_function_type+0x10>
    6694:	2000      	movs	r0, #0
    6696:	bd70      	pop	{r4, r5, r6, pc}

00006698 <d_encoding>:
    6698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    669c:	68c3      	ldr	r3, [r0, #12]
    669e:	781a      	ldrb	r2, [r3, #0]
    66a0:	2a47      	cmp	r2, #71	; 0x47
    66a2:	4605      	mov	r5, r0
    66a4:	460e      	mov	r6, r1
    66a6:	d034      	beq.n	6712 <d_encoding+0x7a>
    66a8:	2a54      	cmp	r2, #84	; 0x54
    66aa:	d032      	beq.n	6712 <d_encoding+0x7a>
    66ac:	f7ff faae 	bl	5c0c <d_name>
    66b0:	4604      	mov	r4, r0
    66b2:	b358      	cbz	r0, 670c <d_encoding+0x74>
    66b4:	b116      	cbz	r6, 66bc <d_encoding+0x24>
    66b6:	68ab      	ldr	r3, [r5, #8]
    66b8:	07db      	lsls	r3, r3, #31
    66ba:	d51f      	bpl.n	66fc <d_encoding+0x64>
    66bc:	68eb      	ldr	r3, [r5, #12]
    66be:	781b      	ldrb	r3, [r3, #0]
    66c0:	b323      	cbz	r3, 670c <d_encoding+0x74>
    66c2:	2b45      	cmp	r3, #69	; 0x45
    66c4:	d022      	beq.n	670c <d_encoding+0x74>
    66c6:	4621      	mov	r1, r4
    66c8:	780b      	ldrb	r3, [r1, #0]
    66ca:	2b04      	cmp	r3, #4
    66cc:	f1a3 021c 	sub.w	r2, r3, #28
    66d0:	f000 80a4 	beq.w	681c <d_encoding+0x184>
    66d4:	f0c0 80a0 	bcc.w	6818 <d_encoding+0x180>
    66d8:	2a04      	cmp	r2, #4
    66da:	f200 809d 	bhi.w	6818 <d_encoding+0x180>
    66de:	6849      	ldr	r1, [r1, #4]
    66e0:	2900      	cmp	r1, #0
    66e2:	d1f1      	bne.n	66c8 <d_encoding+0x30>
    66e4:	4628      	mov	r0, r5
    66e6:	f7ff ffb9 	bl	665c <d_bare_function_type>
    66ea:	4622      	mov	r2, r4
    66ec:	4603      	mov	r3, r0
    66ee:	2103      	movs	r1, #3
    66f0:	4628      	mov	r0, r5
    66f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    66f6:	f7fe be3b 	b.w	5370 <d_make_comp>
    66fa:	6864      	ldr	r4, [r4, #4]
    66fc:	7823      	ldrb	r3, [r4, #0]
    66fe:	f1a3 021c 	sub.w	r2, r3, #28
    6702:	2a04      	cmp	r2, #4
    6704:	d9f9      	bls.n	66fa <d_encoding+0x62>
    6706:	2b02      	cmp	r3, #2
    6708:	f000 816e 	beq.w	69e8 <d_encoding+0x350>
    670c:	4620      	mov	r0, r4
    670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6712:	6b29      	ldr	r1, [r5, #48]	; 0x30
    6714:	f101 0214 	add.w	r2, r1, #20
    6718:	632a      	str	r2, [r5, #48]	; 0x30
    671a:	781a      	ldrb	r2, [r3, #0]
    671c:	2a54      	cmp	r2, #84	; 0x54
    671e:	d005      	beq.n	672c <d_encoding+0x94>
    6720:	2a47      	cmp	r2, #71	; 0x47
    6722:	f000 80ed 	beq.w	6900 <d_encoding+0x268>
    6726:	2000      	movs	r0, #0
    6728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    672c:	1c5a      	adds	r2, r3, #1
    672e:	60ea      	str	r2, [r5, #12]
    6730:	785a      	ldrb	r2, [r3, #1]
    6732:	2a00      	cmp	r2, #0
    6734:	d0f7      	beq.n	6726 <d_encoding+0x8e>
    6736:	1c9a      	adds	r2, r3, #2
    6738:	60ea      	str	r2, [r5, #12]
    673a:	785b      	ldrb	r3, [r3, #1]
    673c:	3b43      	subs	r3, #67	; 0x43
    673e:	2b33      	cmp	r3, #51	; 0x33
    6740:	d8f1      	bhi.n	6726 <d_encoding+0x8e>
    6742:	a201      	add	r2, pc, #4	; (adr r2, 6748 <d_encoding+0xb0>)
    6744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6748:	00006c55 	.word	0x00006c55
    674c:	00006727 	.word	0x00006727
    6750:	00006727 	.word	0x00006727
    6754:	00006c3f 	.word	0x00006c3f
    6758:	00006727 	.word	0x00006727
    675c:	00006c29 	.word	0x00006c29
    6760:	00006c13 	.word	0x00006c13
    6764:	00006bfd 	.word	0x00006bfd
    6768:	00006727 	.word	0x00006727
    676c:	00006727 	.word	0x00006727
    6770:	00006727 	.word	0x00006727
    6774:	00006727 	.word	0x00006727
    6778:	00006727 	.word	0x00006727
    677c:	00006727 	.word	0x00006727
    6780:	00006727 	.word	0x00006727
    6784:	00006727 	.word	0x00006727
    6788:	00006be7 	.word	0x00006be7
    678c:	00006bcd 	.word	0x00006bcd
    6790:	00006727 	.word	0x00006727
    6794:	00006bb3 	.word	0x00006bb3
    6798:	00006b77 	.word	0x00006b77
    679c:	00006727 	.word	0x00006727
    67a0:	00006727 	.word	0x00006727
    67a4:	00006727 	.word	0x00006727
    67a8:	00006727 	.word	0x00006727
    67ac:	00006727 	.word	0x00006727
    67b0:	00006727 	.word	0x00006727
    67b4:	00006727 	.word	0x00006727
    67b8:	00006727 	.word	0x00006727
    67bc:	00006727 	.word	0x00006727
    67c0:	00006727 	.word	0x00006727
    67c4:	00006727 	.word	0x00006727
    67c8:	00006b43 	.word	0x00006b43
    67cc:	00006727 	.word	0x00006727
    67d0:	00006727 	.word	0x00006727
    67d4:	00006727 	.word	0x00006727
    67d8:	00006727 	.word	0x00006727
    67dc:	00006b8d 	.word	0x00006b8d
    67e0:	00006727 	.word	0x00006727
    67e4:	00006727 	.word	0x00006727
    67e8:	00006727 	.word	0x00006727
    67ec:	00006727 	.word	0x00006727
    67f0:	00006727 	.word	0x00006727
    67f4:	00006727 	.word	0x00006727
    67f8:	00006727 	.word	0x00006727
    67fc:	00006727 	.word	0x00006727
    6800:	00006727 	.word	0x00006727
    6804:	00006727 	.word	0x00006727
    6808:	00006727 	.word	0x00006727
    680c:	00006727 	.word	0x00006727
    6810:	00006727 	.word	0x00006727
    6814:	00006b1d 	.word	0x00006b1d
    6818:	2100      	movs	r1, #0
    681a:	e763      	b.n	66e4 <d_encoding+0x4c>
    681c:	684b      	ldr	r3, [r1, #4]
    681e:	2b00      	cmp	r3, #0
    6820:	f000 80f4 	beq.w	6a0c <d_encoding+0x374>
    6824:	781a      	ldrb	r2, [r3, #0]
    6826:	3a01      	subs	r2, #1
    6828:	2a32      	cmp	r2, #50	; 0x32
    682a:	f200 80ef 	bhi.w	6a0c <d_encoding+0x374>
    682e:	a101      	add	r1, pc, #4	; (adr r1, 6834 <d_encoding+0x19c>)
    6830:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    6834:	00006a05 	.word	0x00006a05
    6838:	00006a05 	.word	0x00006a05
    683c:	00006a0d 	.word	0x00006a0d
    6840:	00006a0d 	.word	0x00006a0d
    6844:	00006a0d 	.word	0x00006a0d
    6848:	00006a0d 	.word	0x00006a0d
    684c:	00006819 	.word	0x00006819
    6850:	00006819 	.word	0x00006819
    6854:	00006a0d 	.word	0x00006a0d
    6858:	00006a0d 	.word	0x00006a0d
    685c:	00006a0d 	.word	0x00006a0d
    6860:	00006a0d 	.word	0x00006a0d
    6864:	00006a0d 	.word	0x00006a0d
    6868:	00006a0d 	.word	0x00006a0d
    686c:	00006a0d 	.word	0x00006a0d
    6870:	00006a0d 	.word	0x00006a0d
    6874:	00006a0d 	.word	0x00006a0d
    6878:	00006a0d 	.word	0x00006a0d
    687c:	00006a0d 	.word	0x00006a0d
    6880:	00006a0d 	.word	0x00006a0d
    6884:	00006a0d 	.word	0x00006a0d
    6888:	00006a0d 	.word	0x00006a0d
    688c:	00006a0d 	.word	0x00006a0d
    6890:	00006a0d 	.word	0x00006a0d
    6894:	00006a0d 	.word	0x00006a0d
    6898:	00006a0d 	.word	0x00006a0d
    689c:	00006a0d 	.word	0x00006a0d
    68a0:	00006a0d 	.word	0x00006a0d
    68a4:	00006a0d 	.word	0x00006a0d
    68a8:	00006a0d 	.word	0x00006a0d
    68ac:	00006a0d 	.word	0x00006a0d
    68b0:	00006a0d 	.word	0x00006a0d
    68b4:	00006a0d 	.word	0x00006a0d
    68b8:	00006a0d 	.word	0x00006a0d
    68bc:	00006a0d 	.word	0x00006a0d
    68c0:	00006a0d 	.word	0x00006a0d
    68c4:	00006a0d 	.word	0x00006a0d
    68c8:	00006a0d 	.word	0x00006a0d
    68cc:	00006a0d 	.word	0x00006a0d
    68d0:	00006a0d 	.word	0x00006a0d
    68d4:	00006a0d 	.word	0x00006a0d
    68d8:	00006a0d 	.word	0x00006a0d
    68dc:	00006a0d 	.word	0x00006a0d
    68e0:	00006a0d 	.word	0x00006a0d
    68e4:	00006a0d 	.word	0x00006a0d
    68e8:	00006a0d 	.word	0x00006a0d
    68ec:	00006a0d 	.word	0x00006a0d
    68f0:	00006a0d 	.word	0x00006a0d
    68f4:	00006a0d 	.word	0x00006a0d
    68f8:	00006a0d 	.word	0x00006a0d
    68fc:	00006819 	.word	0x00006819
    6900:	1c5a      	adds	r2, r3, #1
    6902:	60ea      	str	r2, [r5, #12]
    6904:	785a      	ldrb	r2, [r3, #1]
    6906:	2a00      	cmp	r2, #0
    6908:	f43f af0d 	beq.w	6726 <d_encoding+0x8e>
    690c:	1c9a      	adds	r2, r3, #2
    690e:	60ea      	str	r2, [r5, #12]
    6910:	785a      	ldrb	r2, [r3, #1]
    6912:	3a41      	subs	r2, #65	; 0x41
    6914:	2a31      	cmp	r2, #49	; 0x31
    6916:	f63f af06 	bhi.w	6726 <d_encoding+0x8e>
    691a:	a101      	add	r1, pc, #4	; (adr r1, 6920 <d_encoding+0x288>)
    691c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    6920:	00006ad9 	.word	0x00006ad9
    6924:	00006727 	.word	0x00006727
    6928:	00006727 	.word	0x00006727
    692c:	00006727 	.word	0x00006727
    6930:	00006727 	.word	0x00006727
    6934:	00006727 	.word	0x00006727
    6938:	00006727 	.word	0x00006727
    693c:	00006727 	.word	0x00006727
    6940:	00006727 	.word	0x00006727
    6944:	00006727 	.word	0x00006727
    6948:	00006727 	.word	0x00006727
    694c:	00006727 	.word	0x00006727
    6950:	00006727 	.word	0x00006727
    6954:	00006727 	.word	0x00006727
    6958:	00006727 	.word	0x00006727
    695c:	00006727 	.word	0x00006727
    6960:	00006727 	.word	0x00006727
    6964:	00006abb 	.word	0x00006abb
    6968:	00006727 	.word	0x00006727
    696c:	00006af1 	.word	0x00006af1
    6970:	00006727 	.word	0x00006727
    6974:	00006aa5 	.word	0x00006aa5
    6978:	00006727 	.word	0x00006727
    697c:	00006727 	.word	0x00006727
    6980:	00006727 	.word	0x00006727
    6984:	00006727 	.word	0x00006727
    6988:	00006727 	.word	0x00006727
    698c:	00006727 	.word	0x00006727
    6990:	00006727 	.word	0x00006727
    6994:	00006727 	.word	0x00006727
    6998:	00006727 	.word	0x00006727
    699c:	00006727 	.word	0x00006727
    69a0:	00006727 	.word	0x00006727
    69a4:	00006727 	.word	0x00006727
    69a8:	00006727 	.word	0x00006727
    69ac:	00006727 	.word	0x00006727
    69b0:	00006727 	.word	0x00006727
    69b4:	00006727 	.word	0x00006727
    69b8:	00006727 	.word	0x00006727
    69bc:	00006727 	.word	0x00006727
    69c0:	00006727 	.word	0x00006727
    69c4:	00006727 	.word	0x00006727
    69c8:	00006727 	.word	0x00006727
    69cc:	00006727 	.word	0x00006727
    69d0:	00006727 	.word	0x00006727
    69d4:	00006727 	.word	0x00006727
    69d8:	00006727 	.word	0x00006727
    69dc:	00006727 	.word	0x00006727
    69e0:	00006727 	.word	0x00006727
    69e4:	00006a11 	.word	0x00006a11
    69e8:	68a3      	ldr	r3, [r4, #8]
    69ea:	781a      	ldrb	r2, [r3, #0]
    69ec:	3a1c      	subs	r2, #28
    69ee:	2a04      	cmp	r2, #4
    69f0:	d804      	bhi.n	69fc <d_encoding+0x364>
    69f2:	685b      	ldr	r3, [r3, #4]
    69f4:	781a      	ldrb	r2, [r3, #0]
    69f6:	3a1c      	subs	r2, #28
    69f8:	2a04      	cmp	r2, #4
    69fa:	d9fa      	bls.n	69f2 <d_encoding+0x35a>
    69fc:	60a3      	str	r3, [r4, #8]
    69fe:	4620      	mov	r0, r4
    6a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a04:	689b      	ldr	r3, [r3, #8]
    6a06:	2b00      	cmp	r3, #0
    6a08:	f47f af0c 	bne.w	6824 <d_encoding+0x18c>
    6a0c:	2101      	movs	r1, #1
    6a0e:	e669      	b.n	66e4 <d_encoding+0x4c>
    6a10:	f105 000c 	add.w	r0, r5, #12
    6a14:	f7fe fe9a 	bl	574c <d_number.isra.0>
    6a18:	2801      	cmp	r0, #1
    6a1a:	f77f ae84 	ble.w	6726 <d_encoding+0x8e>
    6a1e:	68eb      	ldr	r3, [r5, #12]
    6a20:	781a      	ldrb	r2, [r3, #0]
    6a22:	2a00      	cmp	r2, #0
    6a24:	f43f ae7f 	beq.w	6726 <d_encoding+0x8e>
    6a28:	1c5e      	adds	r6, r3, #1
    6a2a:	60ee      	str	r6, [r5, #12]
    6a2c:	781b      	ldrb	r3, [r3, #0]
    6a2e:	2b5f      	cmp	r3, #95	; 0x5f
    6a30:	f47f ae79 	bne.w	6726 <d_encoding+0x8e>
    6a34:	1e47      	subs	r7, r0, #1
    6a36:	f04f 0800 	mov.w	r8, #0
    6a3a:	f04f 093f 	mov.w	r9, #63	; 0x3f
    6a3e:	7833      	ldrb	r3, [r6, #0]
    6a40:	2b00      	cmp	r3, #0
    6a42:	f43f ae70 	beq.w	6726 <d_encoding+0x8e>
    6a46:	2b24      	cmp	r3, #36	; 0x24
    6a48:	f000 8124 	beq.w	6c94 <d_encoding+0x5fc>
    6a4c:	2400      	movs	r4, #0
    6a4e:	5d33      	ldrb	r3, [r6, r4]
    6a50:	b123      	cbz	r3, 6a5c <d_encoding+0x3c4>
    6a52:	2b24      	cmp	r3, #36	; 0x24
    6a54:	d002      	beq.n	6a5c <d_encoding+0x3c4>
    6a56:	3401      	adds	r4, #1
    6a58:	42bc      	cmp	r4, r7
    6a5a:	dbf8      	blt.n	6a4e <d_encoding+0x3b6>
    6a5c:	4631      	mov	r1, r6
    6a5e:	4628      	mov	r0, r5
    6a60:	4622      	mov	r2, r4
    6a62:	f7fe fcd1 	bl	5408 <d_make_name>
    6a66:	68ee      	ldr	r6, [r5, #12]
    6a68:	4426      	add	r6, r4
    6a6a:	1b3f      	subs	r7, r7, r4
    6a6c:	60ee      	str	r6, [r5, #12]
    6a6e:	2800      	cmp	r0, #0
    6a70:	f43f ae59 	beq.w	6726 <d_encoding+0x8e>
    6a74:	f1b8 0f00 	cmp.w	r8, #0
    6a78:	f000 8129 	beq.w	6cce <d_encoding+0x636>
    6a7c:	4642      	mov	r2, r8
    6a7e:	4603      	mov	r3, r0
    6a80:	213e      	movs	r1, #62	; 0x3e
    6a82:	4628      	mov	r0, r5
    6a84:	f7fe fc74 	bl	5370 <d_make_comp>
    6a88:	4680      	mov	r8, r0
    6a8a:	2800      	cmp	r0, #0
    6a8c:	f43f ae4b 	beq.w	6726 <d_encoding+0x8e>
    6a90:	2f00      	cmp	r7, #0
    6a92:	dcd4      	bgt.n	6a3e <d_encoding+0x3a6>
    6a94:	4628      	mov	r0, r5
    6a96:	4642      	mov	r2, r8
    6a98:	213d      	movs	r1, #61	; 0x3d
    6a9a:	2300      	movs	r3, #0
    6a9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6aa0:	f7fe bc66 	b.w	5370 <d_make_comp>
    6aa4:	4628      	mov	r0, r5
    6aa6:	f7ff f8b1 	bl	5c0c <d_name>
    6aaa:	2113      	movs	r1, #19
    6aac:	4602      	mov	r2, r0
    6aae:	2300      	movs	r3, #0
    6ab0:	4628      	mov	r0, r5
    6ab2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ab6:	f7fe bc5b 	b.w	5370 <d_make_comp>
    6aba:	4628      	mov	r0, r5
    6abc:	f7ff f8a6 	bl	5c0c <d_name>
    6ac0:	4604      	mov	r4, r0
    6ac2:	4628      	mov	r0, r5
    6ac4:	f7fe fe68 	bl	5798 <d_number_component>
    6ac8:	4622      	mov	r2, r4
    6aca:	4603      	mov	r3, r0
    6acc:	2116      	movs	r1, #22
    6ace:	4628      	mov	r0, r5
    6ad0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ad4:	f7fe bc4c 	b.w	5370 <d_make_comp>
    6ad8:	4628      	mov	r0, r5
    6ada:	2100      	movs	r1, #0
    6adc:	f7ff fddc 	bl	6698 <d_encoding>
    6ae0:	2117      	movs	r1, #23
    6ae2:	4602      	mov	r2, r0
    6ae4:	2300      	movs	r3, #0
    6ae6:	4628      	mov	r0, r5
    6ae8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6aec:	f7fe bc40 	b.w	5370 <d_make_comp>
    6af0:	789a      	ldrb	r2, [r3, #2]
    6af2:	4628      	mov	r0, r5
    6af4:	2100      	movs	r1, #0
    6af6:	2a00      	cmp	r2, #0
    6af8:	f000 80eb 	beq.w	6cd2 <d_encoding+0x63a>
    6afc:	1cda      	adds	r2, r3, #3
    6afe:	60ea      	str	r2, [r5, #12]
    6b00:	789b      	ldrb	r3, [r3, #2]
    6b02:	2b6e      	cmp	r3, #110	; 0x6e
    6b04:	f040 80e5 	bne.w	6cd2 <d_encoding+0x63a>
    6b08:	f7ff fdc6 	bl	6698 <d_encoding>
    6b0c:	2148      	movs	r1, #72	; 0x48
    6b0e:	4602      	mov	r2, r0
    6b10:	2300      	movs	r3, #0
    6b12:	4628      	mov	r0, r5
    6b14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b18:	f7fe bc2a 	b.w	5370 <d_make_comp>
    6b1c:	4628      	mov	r0, r5
    6b1e:	2176      	movs	r1, #118	; 0x76
    6b20:	f7fe fee2 	bl	58e8 <d_call_offset>
    6b24:	2800      	cmp	r0, #0
    6b26:	f43f adfe 	beq.w	6726 <d_encoding+0x8e>
    6b2a:	4628      	mov	r0, r5
    6b2c:	2100      	movs	r1, #0
    6b2e:	f7ff fdb3 	bl	6698 <d_encoding>
    6b32:	2110      	movs	r1, #16
    6b34:	4602      	mov	r2, r0
    6b36:	2300      	movs	r3, #0
    6b38:	4628      	mov	r0, r5
    6b3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b3e:	f7fe bc17 	b.w	5370 <d_make_comp>
    6b42:	4628      	mov	r0, r5
    6b44:	2100      	movs	r1, #0
    6b46:	f7fe fecf 	bl	58e8 <d_call_offset>
    6b4a:	2800      	cmp	r0, #0
    6b4c:	f43f adeb 	beq.w	6726 <d_encoding+0x8e>
    6b50:	4628      	mov	r0, r5
    6b52:	2100      	movs	r1, #0
    6b54:	f7fe fec8 	bl	58e8 <d_call_offset>
    6b58:	2800      	cmp	r0, #0
    6b5a:	f43f ade4 	beq.w	6726 <d_encoding+0x8e>
    6b5e:	4628      	mov	r0, r5
    6b60:	2100      	movs	r1, #0
    6b62:	f7ff fd99 	bl	6698 <d_encoding>
    6b66:	2111      	movs	r1, #17
    6b68:	4602      	mov	r2, r0
    6b6a:	2300      	movs	r3, #0
    6b6c:	4628      	mov	r0, r5
    6b6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b72:	f7fe bbfd 	b.w	5370 <d_make_comp>
    6b76:	4628      	mov	r0, r5
    6b78:	f7ff f848 	bl	5c0c <d_name>
    6b7c:	2115      	movs	r1, #21
    6b7e:	4602      	mov	r2, r0
    6b80:	2300      	movs	r3, #0
    6b82:	4628      	mov	r0, r5
    6b84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b88:	f7fe bbf2 	b.w	5370 <d_make_comp>
    6b8c:	4628      	mov	r0, r5
    6b8e:	2168      	movs	r1, #104	; 0x68
    6b90:	f7fe feaa 	bl	58e8 <d_call_offset>
    6b94:	2800      	cmp	r0, #0
    6b96:	f43f adc6 	beq.w	6726 <d_encoding+0x8e>
    6b9a:	4628      	mov	r0, r5
    6b9c:	2100      	movs	r1, #0
    6b9e:	f7ff fd7b 	bl	6698 <d_encoding>
    6ba2:	210f      	movs	r1, #15
    6ba4:	4602      	mov	r2, r0
    6ba6:	2300      	movs	r3, #0
    6ba8:	4628      	mov	r0, r5
    6baa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bae:	f7fe bbdf 	b.w	5370 <d_make_comp>
    6bb2:	310f      	adds	r1, #15
    6bb4:	6329      	str	r1, [r5, #48]	; 0x30
    6bb6:	4628      	mov	r0, r5
    6bb8:	f7ff f988 	bl	5ecc <d_type>
    6bbc:	2109      	movs	r1, #9
    6bbe:	4602      	mov	r2, r0
    6bc0:	2300      	movs	r3, #0
    6bc2:	4628      	mov	r0, r5
    6bc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bc8:	f7fe bbd2 	b.w	5370 <d_make_comp>
    6bcc:	310a      	adds	r1, #10
    6bce:	6329      	str	r1, [r5, #48]	; 0x30
    6bd0:	4628      	mov	r0, r5
    6bd2:	f7ff f97b 	bl	5ecc <d_type>
    6bd6:	210a      	movs	r1, #10
    6bd8:	4602      	mov	r2, r0
    6bda:	2300      	movs	r3, #0
    6bdc:	4628      	mov	r0, r5
    6bde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6be2:	f7fe bbc5 	b.w	5370 <d_make_comp>
    6be6:	4628      	mov	r0, r5
    6be8:	f7ff f970 	bl	5ecc <d_type>
    6bec:	210d      	movs	r1, #13
    6bee:	4602      	mov	r2, r0
    6bf0:	2300      	movs	r3, #0
    6bf2:	4628      	mov	r0, r5
    6bf4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bf8:	f7fe bbba 	b.w	5370 <d_make_comp>
    6bfc:	4628      	mov	r0, r5
    6bfe:	f7ff f965 	bl	5ecc <d_type>
    6c02:	2112      	movs	r1, #18
    6c04:	4602      	mov	r2, r0
    6c06:	2300      	movs	r3, #0
    6c08:	4628      	mov	r0, r5
    6c0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c0e:	f7fe bbaf 	b.w	5370 <d_make_comp>
    6c12:	4628      	mov	r0, r5
    6c14:	f7ff f95a 	bl	5ecc <d_type>
    6c18:	210c      	movs	r1, #12
    6c1a:	4602      	mov	r2, r0
    6c1c:	2300      	movs	r3, #0
    6c1e:	4628      	mov	r0, r5
    6c20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c24:	f7fe bba4 	b.w	5370 <d_make_comp>
    6c28:	4628      	mov	r0, r5
    6c2a:	f7fe ffef 	bl	5c0c <d_name>
    6c2e:	2114      	movs	r1, #20
    6c30:	4602      	mov	r2, r0
    6c32:	2300      	movs	r3, #0
    6c34:	4628      	mov	r0, r5
    6c36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c3a:	f7fe bb99 	b.w	5370 <d_make_comp>
    6c3e:	4628      	mov	r0, r5
    6c40:	f7ff f944 	bl	5ecc <d_type>
    6c44:	210e      	movs	r1, #14
    6c46:	4602      	mov	r2, r0
    6c48:	2300      	movs	r3, #0
    6c4a:	4628      	mov	r0, r5
    6c4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c50:	f7fe bb8e 	b.w	5370 <d_make_comp>
    6c54:	4628      	mov	r0, r5
    6c56:	f7ff f939 	bl	5ecc <d_type>
    6c5a:	4604      	mov	r4, r0
    6c5c:	f105 000c 	add.w	r0, r5, #12
    6c60:	f7fe fd74 	bl	574c <d_number.isra.0>
    6c64:	2800      	cmp	r0, #0
    6c66:	f6ff ad5e 	blt.w	6726 <d_encoding+0x8e>
    6c6a:	68ea      	ldr	r2, [r5, #12]
    6c6c:	7811      	ldrb	r1, [r2, #0]
    6c6e:	295f      	cmp	r1, #95	; 0x5f
    6c70:	f47f ad59 	bne.w	6726 <d_encoding+0x8e>
    6c74:	3201      	adds	r2, #1
    6c76:	60ea      	str	r2, [r5, #12]
    6c78:	4628      	mov	r0, r5
    6c7a:	f7ff f927 	bl	5ecc <d_type>
    6c7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    6c80:	1d59      	adds	r1, r3, #5
    6c82:	6329      	str	r1, [r5, #48]	; 0x30
    6c84:	4602      	mov	r2, r0
    6c86:	4623      	mov	r3, r4
    6c88:	4628      	mov	r0, r5
    6c8a:	210b      	movs	r1, #11
    6c8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c90:	f7fe bb6e 	b.w	5370 <d_make_comp>
    6c94:	7873      	ldrb	r3, [r6, #1]
    6c96:	2b53      	cmp	r3, #83	; 0x53
    6c98:	d027      	beq.n	6cea <d_encoding+0x652>
    6c9a:	2b5f      	cmp	r3, #95	; 0x5f
    6c9c:	d023      	beq.n	6ce6 <d_encoding+0x64e>
    6c9e:	2b24      	cmp	r3, #36	; 0x24
    6ca0:	f47f ad41 	bne.w	6726 <d_encoding+0x8e>
    6ca4:	461c      	mov	r4, r3
    6ca6:	696b      	ldr	r3, [r5, #20]
    6ca8:	69aa      	ldr	r2, [r5, #24]
    6caa:	4293      	cmp	r3, r2
    6cac:	da1f      	bge.n	6cee <d_encoding+0x656>
    6cae:	692a      	ldr	r2, [r5, #16]
    6cb0:	1c58      	adds	r0, r3, #1
    6cb2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    6cb6:	6168      	str	r0, [r5, #20]
    6cb8:	eb12 0081 	adds.w	r0, r2, r1, lsl #2
    6cbc:	d017      	beq.n	6cee <d_encoding+0x656>
    6cbe:	f802 9021 	strb.w	r9, [r2, r1, lsl #2]
    6cc2:	6044      	str	r4, [r0, #4]
    6cc4:	68ee      	ldr	r6, [r5, #12]
    6cc6:	3602      	adds	r6, #2
    6cc8:	3f02      	subs	r7, #2
    6cca:	60ee      	str	r6, [r5, #12]
    6ccc:	e6d2      	b.n	6a74 <d_encoding+0x3dc>
    6cce:	4680      	mov	r8, r0
    6cd0:	e6de      	b.n	6a90 <d_encoding+0x3f8>
    6cd2:	f7ff fce1 	bl	6698 <d_encoding>
    6cd6:	2147      	movs	r1, #71	; 0x47
    6cd8:	4602      	mov	r2, r0
    6cda:	2300      	movs	r3, #0
    6cdc:	4628      	mov	r0, r5
    6cde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ce2:	f7fe bb45 	b.w	5370 <d_make_comp>
    6ce6:	242e      	movs	r4, #46	; 0x2e
    6ce8:	e7dd      	b.n	6ca6 <d_encoding+0x60e>
    6cea:	242f      	movs	r4, #47	; 0x2f
    6cec:	e7db      	b.n	6ca6 <d_encoding+0x60e>
    6cee:	68eb      	ldr	r3, [r5, #12]
    6cf0:	3302      	adds	r3, #2
    6cf2:	60eb      	str	r3, [r5, #12]
    6cf4:	e517      	b.n	6726 <d_encoding+0x8e>
    6cf6:	bf00      	nop

00006cf8 <d_operator_name>:
    6cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cfc:	68c3      	ldr	r3, [r0, #12]
    6cfe:	781f      	ldrb	r7, [r3, #0]
    6d00:	4680      	mov	r8, r0
    6d02:	b35f      	cbz	r7, 6d5c <d_operator_name+0x64>
    6d04:	1c5a      	adds	r2, r3, #1
    6d06:	60c2      	str	r2, [r0, #12]
    6d08:	7858      	ldrb	r0, [r3, #1]
    6d0a:	781f      	ldrb	r7, [r3, #0]
    6d0c:	b118      	cbz	r0, 6d16 <d_operator_name+0x1e>
    6d0e:	1c9a      	adds	r2, r3, #2
    6d10:	f8c8 200c 	str.w	r2, [r8, #12]
    6d14:	7858      	ldrb	r0, [r3, #1]
    6d16:	2f76      	cmp	r7, #118	; 0x76
    6d18:	d141      	bne.n	6d9e <d_operator_name+0xa6>
    6d1a:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
    6d1e:	b2e3      	uxtb	r3, r4
    6d20:	2b09      	cmp	r3, #9
    6d22:	d81c      	bhi.n	6d5e <d_operator_name+0x66>
    6d24:	4640      	mov	r0, r8
    6d26:	f7fe fd9d 	bl	5864 <d_source_name>
    6d2a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    6d2e:	f8d8 2018 	ldr.w	r2, [r8, #24]
    6d32:	4293      	cmp	r3, r2
    6d34:	4601      	mov	r1, r0
    6d36:	da2f      	bge.n	6d98 <d_operator_name+0xa0>
    6d38:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6d3c:	f8d8 0010 	ldr.w	r0, [r8, #16]
    6d40:	3301      	adds	r3, #1
    6d42:	0092      	lsls	r2, r2, #2
    6d44:	f8c8 3014 	str.w	r3, [r8, #20]
    6d48:	1883      	adds	r3, r0, r2
    6d4a:	d025      	beq.n	6d98 <d_operator_name+0xa0>
    6d4c:	b321      	cbz	r1, 6d98 <d_operator_name+0xa0>
    6d4e:	2532      	movs	r5, #50	; 0x32
    6d50:	5485      	strb	r5, [r0, r2]
    6d52:	605c      	str	r4, [r3, #4]
    6d54:	6099      	str	r1, [r3, #8]
    6d56:	4618      	mov	r0, r3
    6d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d5c:	4638      	mov	r0, r7
    6d5e:	4e24      	ldr	r6, [pc, #144]	; (6df0 <d_operator_name+0xf8>)
    6d60:	243d      	movs	r4, #61	; 0x3d
    6d62:	2300      	movs	r3, #0
    6d64:	e004      	b.n	6d70 <d_operator_name+0x78>
    6d66:	42ba      	cmp	r2, r7
    6d68:	d913      	bls.n	6d92 <d_operator_name+0x9a>
    6d6a:	460c      	mov	r4, r1
    6d6c:	42a3      	cmp	r3, r4
    6d6e:	d013      	beq.n	6d98 <d_operator_name+0xa0>
    6d70:	1ae2      	subs	r2, r4, r3
    6d72:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    6d76:	eb03 0162 	add.w	r1, r3, r2, asr #1
    6d7a:	010a      	lsls	r2, r1, #4
    6d7c:	eb06 0c02 	add.w	ip, r6, r2
    6d80:	58b5      	ldr	r5, [r6, r2]
    6d82:	782a      	ldrb	r2, [r5, #0]
    6d84:	4297      	cmp	r7, r2
    6d86:	d1ee      	bne.n	6d66 <d_operator_name+0x6e>
    6d88:	786a      	ldrb	r2, [r5, #1]
    6d8a:	4290      	cmp	r0, r2
    6d8c:	d016      	beq.n	6dbc <d_operator_name+0xc4>
    6d8e:	4282      	cmp	r2, r0
    6d90:	d8eb      	bhi.n	6d6a <d_operator_name+0x72>
    6d92:	1c4b      	adds	r3, r1, #1
    6d94:	42a3      	cmp	r3, r4
    6d96:	d1eb      	bne.n	6d70 <d_operator_name+0x78>
    6d98:	2000      	movs	r0, #0
    6d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d9e:	2f63      	cmp	r7, #99	; 0x63
    6da0:	d1dd      	bne.n	6d5e <d_operator_name+0x66>
    6da2:	2876      	cmp	r0, #118	; 0x76
    6da4:	d1db      	bne.n	6d5e <d_operator_name+0x66>
    6da6:	4640      	mov	r0, r8
    6da8:	f7ff f890 	bl	5ecc <d_type>
    6dac:	2133      	movs	r1, #51	; 0x33
    6dae:	4602      	mov	r2, r0
    6db0:	2300      	movs	r3, #0
    6db2:	4640      	mov	r0, r8
    6db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6db8:	f7fe bada 	b.w	5370 <d_make_comp>
    6dbc:	f8d8 3014 	ldr.w	r3, [r8, #20]
    6dc0:	f8d8 2018 	ldr.w	r2, [r8, #24]
    6dc4:	4293      	cmp	r3, r2
    6dc6:	dae7      	bge.n	6d98 <d_operator_name+0xa0>
    6dc8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6dcc:	f8d8 1010 	ldr.w	r1, [r8, #16]
    6dd0:	3301      	adds	r3, #1
    6dd2:	0092      	lsls	r2, r2, #2
    6dd4:	f8c8 3014 	str.w	r3, [r8, #20]
    6dd8:	188b      	adds	r3, r1, r2
    6dda:	d006      	beq.n	6dea <d_operator_name+0xf2>
    6ddc:	2031      	movs	r0, #49	; 0x31
    6dde:	5488      	strb	r0, [r1, r2]
    6de0:	f8c3 c004 	str.w	ip, [r3, #4]
    6de4:	4618      	mov	r0, r3
    6de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dea:	4618      	mov	r0, r3
    6dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6df0:	000133ac 	.word	0x000133ac

00006df4 <d_unqualified_name>:
    6df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6df6:	68c2      	ldr	r2, [r0, #12]
    6df8:	7813      	ldrb	r3, [r2, #0]
    6dfa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    6dfe:	2909      	cmp	r1, #9
    6e00:	4604      	mov	r4, r0
    6e02:	d92e      	bls.n	6e62 <d_unqualified_name+0x6e>
    6e04:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    6e08:	2919      	cmp	r1, #25
    6e0a:	d933      	bls.n	6e74 <d_unqualified_name+0x80>
    6e0c:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
    6e10:	2901      	cmp	r1, #1
    6e12:	d971      	bls.n	6ef8 <d_unqualified_name+0x104>
    6e14:	2b4c      	cmp	r3, #76	; 0x4c
    6e16:	f000 8087 	beq.w	6f28 <d_unqualified_name+0x134>
    6e1a:	2b55      	cmp	r3, #85	; 0x55
    6e1c:	f040 808f 	bne.w	6f3e <d_unqualified_name+0x14a>
    6e20:	7853      	ldrb	r3, [r2, #1]
    6e22:	2b6c      	cmp	r3, #108	; 0x6c
    6e24:	d030      	beq.n	6e88 <d_unqualified_name+0x94>
    6e26:	2b74      	cmp	r3, #116	; 0x74
    6e28:	f040 8089 	bne.w	6f3e <d_unqualified_name+0x14a>
    6e2c:	1c53      	adds	r3, r2, #1
    6e2e:	60c3      	str	r3, [r0, #12]
    6e30:	7851      	ldrb	r1, [r2, #1]
    6e32:	2974      	cmp	r1, #116	; 0x74
    6e34:	f000 80c3 	beq.w	6fbe <d_unqualified_name+0x1ca>
    6e38:	2942      	cmp	r1, #66	; 0x42
    6e3a:	f04f 0500 	mov.w	r5, #0
    6e3e:	d117      	bne.n	6e70 <d_unqualified_name+0x7c>
    6e40:	3301      	adds	r3, #1
    6e42:	60e3      	str	r3, [r4, #12]
    6e44:	4620      	mov	r0, r4
    6e46:	f7fe fd0d 	bl	5864 <d_source_name>
    6e4a:	462a      	mov	r2, r5
    6e4c:	4603      	mov	r3, r0
    6e4e:	214a      	movs	r1, #74	; 0x4a
    6e50:	4620      	mov	r0, r4
    6e52:	f7fe fa8d 	bl	5370 <d_make_comp>
    6e56:	68e3      	ldr	r3, [r4, #12]
    6e58:	781a      	ldrb	r2, [r3, #0]
    6e5a:	2a42      	cmp	r2, #66	; 0x42
    6e5c:	4605      	mov	r5, r0
    6e5e:	d0ef      	beq.n	6e40 <d_unqualified_name+0x4c>
    6e60:	e006      	b.n	6e70 <d_unqualified_name+0x7c>
    6e62:	f7fe fcff 	bl	5864 <d_source_name>
    6e66:	68e3      	ldr	r3, [r4, #12]
    6e68:	7819      	ldrb	r1, [r3, #0]
    6e6a:	4605      	mov	r5, r0
    6e6c:	2942      	cmp	r1, #66	; 0x42
    6e6e:	d0e7      	beq.n	6e40 <d_unqualified_name+0x4c>
    6e70:	4628      	mov	r0, r5
    6e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e74:	f7ff ff40 	bl	6cf8 <d_operator_name>
    6e78:	4605      	mov	r5, r0
    6e7a:	b110      	cbz	r0, 6e82 <d_unqualified_name+0x8e>
    6e7c:	7803      	ldrb	r3, [r0, #0]
    6e7e:	2b31      	cmp	r3, #49	; 0x31
    6e80:	d05f      	beq.n	6f42 <d_unqualified_name+0x14e>
    6e82:	68e3      	ldr	r3, [r4, #12]
    6e84:	7819      	ldrb	r1, [r3, #0]
    6e86:	e7f1      	b.n	6e6c <d_unqualified_name+0x78>
    6e88:	1c53      	adds	r3, r2, #1
    6e8a:	60c3      	str	r3, [r0, #12]
    6e8c:	7851      	ldrb	r1, [r2, #1]
    6e8e:	296c      	cmp	r1, #108	; 0x6c
    6e90:	d1d2      	bne.n	6e38 <d_unqualified_name+0x44>
    6e92:	3202      	adds	r2, #2
    6e94:	60c2      	str	r2, [r0, #12]
    6e96:	f7ff fb9d 	bl	65d4 <d_parmlist>
    6e9a:	68e3      	ldr	r3, [r4, #12]
    6e9c:	4606      	mov	r6, r0
    6e9e:	2800      	cmp	r0, #0
    6ea0:	f000 80e1 	beq.w	7066 <d_unqualified_name+0x272>
    6ea4:	7819      	ldrb	r1, [r3, #0]
    6ea6:	2945      	cmp	r1, #69	; 0x45
    6ea8:	d1c6      	bne.n	6e38 <d_unqualified_name+0x44>
    6eaa:	3301      	adds	r3, #1
    6eac:	60e3      	str	r3, [r4, #12]
    6eae:	4620      	mov	r0, r4
    6eb0:	f7fe fc8e 	bl	57d0 <d_compact_number>
    6eb4:	2800      	cmp	r0, #0
    6eb6:	f2c0 809c 	blt.w	6ff2 <d_unqualified_name+0x1fe>
    6eba:	6963      	ldr	r3, [r4, #20]
    6ebc:	69a2      	ldr	r2, [r4, #24]
    6ebe:	4293      	cmp	r3, r2
    6ec0:	f280 8097 	bge.w	6ff2 <d_unqualified_name+0x1fe>
    6ec4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6ec8:	6921      	ldr	r1, [r4, #16]
    6eca:	0092      	lsls	r2, r2, #2
    6ecc:	3301      	adds	r3, #1
    6ece:	188d      	adds	r5, r1, r2
    6ed0:	6163      	str	r3, [r4, #20]
    6ed2:	f000 808e 	beq.w	6ff2 <d_unqualified_name+0x1fe>
    6ed6:	2344      	movs	r3, #68	; 0x44
    6ed8:	548b      	strb	r3, [r1, r2]
    6eda:	606e      	str	r6, [r5, #4]
    6edc:	60a8      	str	r0, [r5, #8]
    6ede:	6a23      	ldr	r3, [r4, #32]
    6ee0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6ee2:	4293      	cmp	r3, r2
    6ee4:	f280 8085 	bge.w	6ff2 <d_unqualified_name+0x1fe>
    6ee8:	69e2      	ldr	r2, [r4, #28]
    6eea:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    6eee:	1c5a      	adds	r2, r3, #1
    6ef0:	68e3      	ldr	r3, [r4, #12]
    6ef2:	6222      	str	r2, [r4, #32]
    6ef4:	7819      	ldrb	r1, [r3, #0]
    6ef6:	e7b9      	b.n	6e6c <d_unqualified_name+0x78>
    6ef8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    6efa:	2800      	cmp	r0, #0
    6efc:	d03c      	beq.n	6f78 <d_unqualified_name+0x184>
    6efe:	7801      	ldrb	r1, [r0, #0]
    6f00:	2900      	cmp	r1, #0
    6f02:	d137      	bne.n	6f74 <d_unqualified_name+0x180>
    6f04:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6f06:	6883      	ldr	r3, [r0, #8]
    6f08:	440b      	add	r3, r1
    6f0a:	6323      	str	r3, [r4, #48]	; 0x30
    6f0c:	7811      	ldrb	r1, [r2, #0]
    6f0e:	2943      	cmp	r1, #67	; 0x43
    6f10:	d078      	beq.n	7004 <d_unqualified_name+0x210>
    6f12:	2944      	cmp	r1, #68	; 0x44
    6f14:	d173      	bne.n	6ffe <d_unqualified_name+0x20a>
    6f16:	7853      	ldrb	r3, [r2, #1]
    6f18:	3b30      	subs	r3, #48	; 0x30
    6f1a:	2b05      	cmp	r3, #5
    6f1c:	d84d      	bhi.n	6fba <d_unqualified_name+0x1c6>
    6f1e:	e8df f003 	tbb	[pc, r3]
    6f22:	2d48      	.short	0x2d48
    6f24:	4a4c4c46 	.word	0x4a4c4c46
    6f28:	3201      	adds	r2, #1
    6f2a:	60c2      	str	r2, [r0, #12]
    6f2c:	f7fe fc9a 	bl	5864 <d_source_name>
    6f30:	4605      	mov	r5, r0
    6f32:	b120      	cbz	r0, 6f3e <d_unqualified_name+0x14a>
    6f34:	4620      	mov	r0, r4
    6f36:	f7fe fc85 	bl	5844 <d_discriminator>
    6f3a:	2800      	cmp	r0, #0
    6f3c:	d1a1      	bne.n	6e82 <d_unqualified_name+0x8e>
    6f3e:	2000      	movs	r0, #0
    6f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f42:	6843      	ldr	r3, [r0, #4]
    6f44:	6b22      	ldr	r2, [r4, #48]	; 0x30
    6f46:	689e      	ldr	r6, [r3, #8]
    6f48:	6818      	ldr	r0, [r3, #0]
    6f4a:	4948      	ldr	r1, [pc, #288]	; (706c <d_unqualified_name+0x278>)
    6f4c:	4432      	add	r2, r6
    6f4e:	3207      	adds	r2, #7
    6f50:	6322      	str	r2, [r4, #48]	; 0x30
    6f52:	f007 fd01 	bl	e958 <strcmp>
    6f56:	2800      	cmp	r0, #0
    6f58:	d193      	bne.n	6e82 <d_unqualified_name+0x8e>
    6f5a:	4620      	mov	r0, r4
    6f5c:	f7fe fc82 	bl	5864 <d_source_name>
    6f60:	462a      	mov	r2, r5
    6f62:	4603      	mov	r3, r0
    6f64:	2135      	movs	r1, #53	; 0x35
    6f66:	4620      	mov	r0, r4
    6f68:	f7fe fa02 	bl	5370 <d_make_comp>
    6f6c:	68e3      	ldr	r3, [r4, #12]
    6f6e:	4605      	mov	r5, r0
    6f70:	7819      	ldrb	r1, [r3, #0]
    6f72:	e77b      	b.n	6e6c <d_unqualified_name+0x78>
    6f74:	2918      	cmp	r1, #24
    6f76:	d0c5      	beq.n	6f04 <d_unqualified_name+0x110>
    6f78:	4619      	mov	r1, r3
    6f7a:	e7c8      	b.n	6f0e <d_unqualified_name+0x11a>
    6f7c:	2702      	movs	r7, #2
    6f7e:	6961      	ldr	r1, [r4, #20]
    6f80:	69a5      	ldr	r5, [r4, #24]
    6f82:	1c93      	adds	r3, r2, #2
    6f84:	42a9      	cmp	r1, r5
    6f86:	60e3      	str	r3, [r4, #12]
    6f88:	da37      	bge.n	6ffa <d_unqualified_name+0x206>
    6f8a:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    6f8e:	6926      	ldr	r6, [r4, #16]
    6f90:	3101      	adds	r1, #1
    6f92:	00ad      	lsls	r5, r5, #2
    6f94:	6161      	str	r1, [r4, #20]
    6f96:	1971      	adds	r1, r6, r5
    6f98:	d02f      	beq.n	6ffa <d_unqualified_name+0x206>
    6f9a:	b370      	cbz	r0, 6ffa <d_unqualified_name+0x206>
    6f9c:	f04f 0c08 	mov.w	ip, #8
    6fa0:	f806 c005 	strb.w	ip, [r6, r5]
    6fa4:	460d      	mov	r5, r1
    6fa6:	710f      	strb	r7, [r1, #4]
    6fa8:	6088      	str	r0, [r1, #8]
    6faa:	7891      	ldrb	r1, [r2, #2]
    6fac:	e75e      	b.n	6e6c <d_unqualified_name+0x78>
    6fae:	2703      	movs	r7, #3
    6fb0:	e7e5      	b.n	6f7e <d_unqualified_name+0x18a>
    6fb2:	2701      	movs	r7, #1
    6fb4:	e7e3      	b.n	6f7e <d_unqualified_name+0x18a>
    6fb6:	2704      	movs	r7, #4
    6fb8:	e7e1      	b.n	6f7e <d_unqualified_name+0x18a>
    6fba:	2500      	movs	r5, #0
    6fbc:	e758      	b.n	6e70 <d_unqualified_name+0x7c>
    6fbe:	3202      	adds	r2, #2
    6fc0:	60c2      	str	r2, [r0, #12]
    6fc2:	f7fe fc05 	bl	57d0 <d_compact_number>
    6fc6:	2800      	cmp	r0, #0
    6fc8:	db13      	blt.n	6ff2 <d_unqualified_name+0x1fe>
    6fca:	6963      	ldr	r3, [r4, #20]
    6fcc:	69a2      	ldr	r2, [r4, #24]
    6fce:	4293      	cmp	r3, r2
    6fd0:	da0f      	bge.n	6ff2 <d_unqualified_name+0x1fe>
    6fd2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6fd6:	6921      	ldr	r1, [r4, #16]
    6fd8:	0092      	lsls	r2, r2, #2
    6fda:	3301      	adds	r3, #1
    6fdc:	188d      	adds	r5, r1, r2
    6fde:	6163      	str	r3, [r4, #20]
    6fe0:	d007      	beq.n	6ff2 <d_unqualified_name+0x1fe>
    6fe2:	2346      	movs	r3, #70	; 0x46
    6fe4:	548b      	strb	r3, [r1, r2]
    6fe6:	6068      	str	r0, [r5, #4]
    6fe8:	6a23      	ldr	r3, [r4, #32]
    6fea:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6fec:	4293      	cmp	r3, r2
    6fee:	f6ff af7b 	blt.w	6ee8 <d_unqualified_name+0xf4>
    6ff2:	68e3      	ldr	r3, [r4, #12]
    6ff4:	2500      	movs	r5, #0
    6ff6:	7819      	ldrb	r1, [r3, #0]
    6ff8:	e738      	b.n	6e6c <d_unqualified_name+0x78>
    6ffa:	2500      	movs	r5, #0
    6ffc:	e7d5      	b.n	6faa <d_unqualified_name+0x1b6>
    6ffe:	4613      	mov	r3, r2
    7000:	2500      	movs	r5, #0
    7002:	e733      	b.n	6e6c <d_unqualified_name+0x78>
    7004:	7853      	ldrb	r3, [r2, #1]
    7006:	3b31      	subs	r3, #49	; 0x31
    7008:	2b04      	cmp	r3, #4
    700a:	d8d6      	bhi.n	6fba <d_unqualified_name+0x1c6>
    700c:	a101      	add	r1, pc, #4	; (adr r1, 7014 <d_unqualified_name+0x220>)
    700e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    7012:	bf00      	nop
    7014:	0000705b 	.word	0x0000705b
    7018:	00007029 	.word	0x00007029
    701c:	00007063 	.word	0x00007063
    7020:	00006fbb 	.word	0x00006fbb
    7024:	0000705f 	.word	0x0000705f
    7028:	2702      	movs	r7, #2
    702a:	6961      	ldr	r1, [r4, #20]
    702c:	69a5      	ldr	r5, [r4, #24]
    702e:	1c93      	adds	r3, r2, #2
    7030:	42a9      	cmp	r1, r5
    7032:	60e3      	str	r3, [r4, #12]
    7034:	dae1      	bge.n	6ffa <d_unqualified_name+0x206>
    7036:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    703a:	6926      	ldr	r6, [r4, #16]
    703c:	3101      	adds	r1, #1
    703e:	00ad      	lsls	r5, r5, #2
    7040:	6161      	str	r1, [r4, #20]
    7042:	1971      	adds	r1, r6, r5
    7044:	d0d9      	beq.n	6ffa <d_unqualified_name+0x206>
    7046:	2800      	cmp	r0, #0
    7048:	d0d7      	beq.n	6ffa <d_unqualified_name+0x206>
    704a:	f04f 0c07 	mov.w	ip, #7
    704e:	f806 c005 	strb.w	ip, [r6, r5]
    7052:	460d      	mov	r5, r1
    7054:	710f      	strb	r7, [r1, #4]
    7056:	6088      	str	r0, [r1, #8]
    7058:	e7a7      	b.n	6faa <d_unqualified_name+0x1b6>
    705a:	2701      	movs	r7, #1
    705c:	e7e5      	b.n	702a <d_unqualified_name+0x236>
    705e:	2704      	movs	r7, #4
    7060:	e7e3      	b.n	702a <d_unqualified_name+0x236>
    7062:	2703      	movs	r7, #3
    7064:	e7e1      	b.n	702a <d_unqualified_name+0x236>
    7066:	4605      	mov	r5, r0
    7068:	7819      	ldrb	r1, [r3, #0]
    706a:	e6ff      	b.n	6e6c <d_unqualified_name+0x78>
    706c:	000137cc 	.word	0x000137cc

00007070 <d_expression>:
    7070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7074:	68c1      	ldr	r1, [r0, #12]
    7076:	780b      	ldrb	r3, [r1, #0]
    7078:	2b4c      	cmp	r3, #76	; 0x4c
    707a:	4604      	mov	r4, r0
    707c:	f000 809e 	beq.w	71bc <d_expression+0x14c>
    7080:	2b54      	cmp	r3, #84	; 0x54
    7082:	f000 809f 	beq.w	71c4 <d_expression+0x154>
    7086:	2b73      	cmp	r3, #115	; 0x73
    7088:	d057      	beq.n	713a <d_expression+0xca>
    708a:	2b66      	cmp	r3, #102	; 0x66
    708c:	d02d      	beq.n	70ea <d_expression+0x7a>
    708e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7092:	2a09      	cmp	r2, #9
    7094:	d80d      	bhi.n	70b2 <d_expression+0x42>
    7096:	4620      	mov	r0, r4
    7098:	f7ff feac 	bl	6df4 <d_unqualified_name>
    709c:	4605      	mov	r5, r0
    709e:	2800      	cmp	r0, #0
    70a0:	f000 8083 	beq.w	71aa <d_expression+0x13a>
    70a4:	68e3      	ldr	r3, [r4, #12]
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	2b49      	cmp	r3, #73	; 0x49
    70aa:	f000 80a3 	beq.w	71f4 <d_expression+0x184>
    70ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70b2:	2b6f      	cmp	r3, #111	; 0x6f
    70b4:	d07c      	beq.n	71b0 <d_expression+0x140>
    70b6:	2b69      	cmp	r3, #105	; 0x69
    70b8:	f000 80a7 	beq.w	720a <d_expression+0x19a>
    70bc:	2b74      	cmp	r3, #116	; 0x74
    70be:	d117      	bne.n	70f0 <d_expression+0x80>
    70c0:	784b      	ldrb	r3, [r1, #1]
    70c2:	2b6c      	cmp	r3, #108	; 0x6c
    70c4:	d114      	bne.n	70f0 <d_expression+0x80>
    70c6:	f7fe ff01 	bl	5ecc <d_type>
    70ca:	68e1      	ldr	r1, [r4, #12]
    70cc:	4605      	mov	r5, r0
    70ce:	3102      	adds	r1, #2
    70d0:	60e1      	str	r1, [r4, #12]
    70d2:	4620      	mov	r0, r4
    70d4:	2145      	movs	r1, #69	; 0x45
    70d6:	f000 f9a9 	bl	742c <d_exprlist>
    70da:	462a      	mov	r2, r5
    70dc:	4603      	mov	r3, r0
    70de:	2130      	movs	r1, #48	; 0x30
    70e0:	4620      	mov	r0, r4
    70e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    70e6:	f7fe b943 	b.w	5370 <d_make_comp>
    70ea:	784b      	ldrb	r3, [r1, #1]
    70ec:	2b70      	cmp	r3, #112	; 0x70
    70ee:	d040      	beq.n	7172 <d_expression+0x102>
    70f0:	4620      	mov	r0, r4
    70f2:	f7ff fe01 	bl	6cf8 <d_operator_name>
    70f6:	4605      	mov	r5, r0
    70f8:	2800      	cmp	r0, #0
    70fa:	d056      	beq.n	71aa <d_expression+0x13a>
    70fc:	7806      	ldrb	r6, [r0, #0]
    70fe:	2e31      	cmp	r6, #49	; 0x31
    7100:	d064      	beq.n	71cc <d_expression+0x15c>
    7102:	2e32      	cmp	r6, #50	; 0x32
    7104:	d02b      	beq.n	715e <d_expression+0xee>
    7106:	2e33      	cmp	r6, #51	; 0x33
    7108:	d14f      	bne.n	71aa <d_expression+0x13a>
    710a:	2700      	movs	r7, #0
    710c:	68e3      	ldr	r3, [r4, #12]
    710e:	781a      	ldrb	r2, [r3, #0]
    7110:	2a5f      	cmp	r2, #95	; 0x5f
    7112:	f000 810d 	beq.w	7330 <d_expression+0x2c0>
    7116:	4620      	mov	r0, r4
    7118:	f7ff ffaa 	bl	7070 <d_expression>
    711c:	4603      	mov	r3, r0
    711e:	b12f      	cbz	r7, 712c <d_expression+0xbc>
    7120:	461a      	mov	r2, r3
    7122:	4620      	mov	r0, r4
    7124:	2137      	movs	r1, #55	; 0x37
    7126:	f7fe f923 	bl	5370 <d_make_comp>
    712a:	4603      	mov	r3, r0
    712c:	4620      	mov	r0, r4
    712e:	462a      	mov	r2, r5
    7130:	2135      	movs	r1, #53	; 0x35
    7132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7136:	f7fe b91b 	b.w	5370 <d_make_comp>
    713a:	784b      	ldrb	r3, [r1, #1]
    713c:	2b72      	cmp	r3, #114	; 0x72
    713e:	f000 80de 	beq.w	72fe <d_expression+0x28e>
    7142:	2b70      	cmp	r3, #112	; 0x70
    7144:	d1d4      	bne.n	70f0 <d_expression+0x80>
    7146:	3102      	adds	r1, #2
    7148:	60c1      	str	r1, [r0, #12]
    714a:	f7ff ff91 	bl	7070 <d_expression>
    714e:	2149      	movs	r1, #73	; 0x49
    7150:	4602      	mov	r2, r0
    7152:	2300      	movs	r3, #0
    7154:	4620      	mov	r0, r4
    7156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    715a:	f7fe b909 	b.w	5370 <d_make_comp>
    715e:	6843      	ldr	r3, [r0, #4]
    7160:	2700      	movs	r7, #0
    7162:	2b03      	cmp	r3, #3
    7164:	d821      	bhi.n	71aa <d_expression+0x13a>
    7166:	e8df f013 	tbh	[pc, r3, lsl #1]
    716a:	0056      	.short	0x0056
    716c:	009a013f 	.word	0x009a013f
    7170:	005e      	.short	0x005e
    7172:	1c8b      	adds	r3, r1, #2
    7174:	60c3      	str	r3, [r0, #12]
    7176:	788b      	ldrb	r3, [r1, #2]
    7178:	2b54      	cmp	r3, #84	; 0x54
    717a:	f000 80d5 	beq.w	7328 <d_expression+0x2b8>
    717e:	f7fe fb27 	bl	57d0 <d_compact_number>
    7182:	1c45      	adds	r5, r0, #1
    7184:	d011      	beq.n	71aa <d_expression+0x13a>
    7186:	6963      	ldr	r3, [r4, #20]
    7188:	69a2      	ldr	r2, [r4, #24]
    718a:	4293      	cmp	r3, r2
    718c:	da0d      	bge.n	71aa <d_expression+0x13a>
    718e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    7192:	6921      	ldr	r1, [r4, #16]
    7194:	3301      	adds	r3, #1
    7196:	0092      	lsls	r2, r2, #2
    7198:	6163      	str	r3, [r4, #20]
    719a:	188b      	adds	r3, r1, r2
    719c:	d005      	beq.n	71aa <d_expression+0x13a>
    719e:	2006      	movs	r0, #6
    71a0:	5488      	strb	r0, [r1, r2]
    71a2:	605d      	str	r5, [r3, #4]
    71a4:	4618      	mov	r0, r3
    71a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71aa:	2000      	movs	r0, #0
    71ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71b0:	784b      	ldrb	r3, [r1, #1]
    71b2:	2b6e      	cmp	r3, #110	; 0x6e
    71b4:	d19c      	bne.n	70f0 <d_expression+0x80>
    71b6:	3102      	adds	r1, #2
    71b8:	60c1      	str	r1, [r0, #12]
    71ba:	e76c      	b.n	7096 <d_expression+0x26>
    71bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    71c0:	f7fe bc60 	b.w	5a84 <d_expr_primary>
    71c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    71c8:	f7fe bb1a 	b.w	5800 <d_template_param>
    71cc:	f8d0 8004 	ldr.w	r8, [r0, #4]
    71d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    71d2:	f8d8 2008 	ldr.w	r2, [r8, #8]
    71d6:	f8d8 7000 	ldr.w	r7, [r8]
    71da:	498f      	ldr	r1, [pc, #572]	; (7418 <d_expression+0x3a8>)
    71dc:	3a02      	subs	r2, #2
    71de:	4413      	add	r3, r2
    71e0:	6323      	str	r3, [r4, #48]	; 0x30
    71e2:	4638      	mov	r0, r7
    71e4:	f007 fbb8 	bl	e958 <strcmp>
    71e8:	2800      	cmp	r0, #0
    71ea:	f000 80a9 	beq.w	7340 <d_expression+0x2d0>
    71ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
    71f2:	e7b6      	b.n	7162 <d_expression+0xf2>
    71f4:	4620      	mov	r0, r4
    71f6:	f7fe fcab 	bl	5b50 <d_template_args>
    71fa:	462a      	mov	r2, r5
    71fc:	4603      	mov	r3, r0
    71fe:	2104      	movs	r1, #4
    7200:	4620      	mov	r0, r4
    7202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7206:	f7fe b8b3 	b.w	5370 <d_make_comp>
    720a:	784b      	ldrb	r3, [r1, #1]
    720c:	2b6c      	cmp	r3, #108	; 0x6c
    720e:	f47f af6f 	bne.w	70f0 <d_expression+0x80>
    7212:	2500      	movs	r5, #0
    7214:	e75b      	b.n	70ce <d_expression+0x5e>
    7216:	4620      	mov	r0, r4
    7218:	462a      	mov	r2, r5
    721a:	2134      	movs	r1, #52	; 0x34
    721c:	2300      	movs	r3, #0
    721e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7222:	f7fe b8a5 	b.w	5370 <d_make_comp>
    7226:	4638      	mov	r0, r7
    7228:	497c      	ldr	r1, [pc, #496]	; (741c <d_expression+0x3ac>)
    722a:	f007 fb95 	bl	e958 <strcmp>
    722e:	2800      	cmp	r0, #0
    7230:	f000 808a 	beq.w	7348 <d_expression+0x2d8>
    7234:	783b      	ldrb	r3, [r7, #0]
    7236:	2b6e      	cmp	r3, #110	; 0x6e
    7238:	d1b7      	bne.n	71aa <d_expression+0x13a>
    723a:	787b      	ldrb	r3, [r7, #1]
    723c:	2b77      	cmp	r3, #119	; 0x77
    723e:	d001      	beq.n	7244 <d_expression+0x1d4>
    7240:	2b61      	cmp	r3, #97	; 0x61
    7242:	d1b2      	bne.n	71aa <d_expression+0x13a>
    7244:	215f      	movs	r1, #95	; 0x5f
    7246:	4620      	mov	r0, r4
    7248:	f000 f8f0 	bl	742c <d_exprlist>
    724c:	4606      	mov	r6, r0
    724e:	4620      	mov	r0, r4
    7250:	f7fe fe3c 	bl	5ecc <d_type>
    7254:	68e1      	ldr	r1, [r4, #12]
    7256:	780b      	ldrb	r3, [r1, #0]
    7258:	2b45      	cmp	r3, #69	; 0x45
    725a:	4607      	mov	r7, r0
    725c:	f000 80a9 	beq.w	73b2 <d_expression+0x342>
    7260:	2b70      	cmp	r3, #112	; 0x70
    7262:	f000 80b5 	beq.w	73d0 <d_expression+0x360>
    7266:	2b69      	cmp	r3, #105	; 0x69
    7268:	d19f      	bne.n	71aa <d_expression+0x13a>
    726a:	784b      	ldrb	r3, [r1, #1]
    726c:	2b6c      	cmp	r3, #108	; 0x6c
    726e:	d19c      	bne.n	71aa <d_expression+0x13a>
    7270:	4620      	mov	r0, r4
    7272:	f7ff fefd 	bl	7070 <d_expression>
    7276:	4603      	mov	r3, r0
    7278:	463a      	mov	r2, r7
    727a:	4620      	mov	r0, r4
    727c:	213a      	movs	r1, #58	; 0x3a
    727e:	f7fe f877 	bl	5370 <d_make_comp>
    7282:	4632      	mov	r2, r6
    7284:	4603      	mov	r3, r0
    7286:	2139      	movs	r1, #57	; 0x39
    7288:	4620      	mov	r0, r4
    728a:	f7fe f871 	bl	5370 <d_make_comp>
    728e:	462a      	mov	r2, r5
    7290:	4603      	mov	r3, r0
    7292:	2138      	movs	r1, #56	; 0x38
    7294:	4620      	mov	r0, r4
    7296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    729a:	f7fe b869 	b.w	5370 <d_make_comp>
    729e:	686b      	ldr	r3, [r5, #4]
    72a0:	681b      	ldr	r3, [r3, #0]
    72a2:	785a      	ldrb	r2, [r3, #1]
    72a4:	2a63      	cmp	r2, #99	; 0x63
    72a6:	d062      	beq.n	736e <d_expression+0x2fe>
    72a8:	4620      	mov	r0, r4
    72aa:	f7ff fee1 	bl	7070 <d_expression>
    72ae:	4680      	mov	r8, r0
    72b0:	4638      	mov	r0, r7
    72b2:	495b      	ldr	r1, [pc, #364]	; (7420 <d_expression+0x3b0>)
    72b4:	f007 fb50 	bl	e958 <strcmp>
    72b8:	2800      	cmp	r0, #0
    72ba:	d052      	beq.n	7362 <d_expression+0x2f2>
    72bc:	4638      	mov	r0, r7
    72be:	4959      	ldr	r1, [pc, #356]	; (7424 <d_expression+0x3b4>)
    72c0:	f007 fb4a 	bl	e958 <strcmp>
    72c4:	b128      	cbz	r0, 72d2 <d_expression+0x262>
    72c6:	4638      	mov	r0, r7
    72c8:	4957      	ldr	r1, [pc, #348]	; (7428 <d_expression+0x3b8>)
    72ca:	f007 fb45 	bl	e958 <strcmp>
    72ce:	2800      	cmp	r0, #0
    72d0:	d16a      	bne.n	73a8 <d_expression+0x338>
    72d2:	4620      	mov	r0, r4
    72d4:	f7ff fd8e 	bl	6df4 <d_unqualified_name>
    72d8:	68e3      	ldr	r3, [r4, #12]
    72da:	781b      	ldrb	r3, [r3, #0]
    72dc:	2b49      	cmp	r3, #73	; 0x49
    72de:	4606      	mov	r6, r0
    72e0:	d06b      	beq.n	73ba <d_expression+0x34a>
    72e2:	4642      	mov	r2, r8
    72e4:	4633      	mov	r3, r6
    72e6:	4620      	mov	r0, r4
    72e8:	2137      	movs	r1, #55	; 0x37
    72ea:	f7fe f841 	bl	5370 <d_make_comp>
    72ee:	462a      	mov	r2, r5
    72f0:	4603      	mov	r3, r0
    72f2:	2136      	movs	r1, #54	; 0x36
    72f4:	4620      	mov	r0, r4
    72f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72fa:	f7fe b839 	b.w	5370 <d_make_comp>
    72fe:	3102      	adds	r1, #2
    7300:	60c1      	str	r1, [r0, #12]
    7302:	f7fe fde3 	bl	5ecc <d_type>
    7306:	4605      	mov	r5, r0
    7308:	4620      	mov	r0, r4
    730a:	f7ff fd73 	bl	6df4 <d_unqualified_name>
    730e:	68e1      	ldr	r1, [r4, #12]
    7310:	7809      	ldrb	r1, [r1, #0]
    7312:	2949      	cmp	r1, #73	; 0x49
    7314:	4606      	mov	r6, r0
    7316:	4620      	mov	r0, r4
    7318:	d036      	beq.n	7388 <d_expression+0x318>
    731a:	462a      	mov	r2, r5
    731c:	4633      	mov	r3, r6
    731e:	2101      	movs	r1, #1
    7320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7324:	f7fe b824 	b.w	5370 <d_make_comp>
    7328:	3103      	adds	r1, #3
    732a:	60c1      	str	r1, [r0, #12]
    732c:	2500      	movs	r5, #0
    732e:	e72a      	b.n	7186 <d_expression+0x116>
    7330:	3301      	adds	r3, #1
    7332:	60e3      	str	r3, [r4, #12]
    7334:	4620      	mov	r0, r4
    7336:	2145      	movs	r1, #69	; 0x45
    7338:	f000 f878 	bl	742c <d_exprlist>
    733c:	4603      	mov	r3, r0
    733e:	e6ee      	b.n	711e <d_expression+0xae>
    7340:	4620      	mov	r0, r4
    7342:	f7fe fdc3 	bl	5ecc <d_type>
    7346:	e6f0      	b.n	712a <d_expression+0xba>
    7348:	4620      	mov	r0, r4
    734a:	f7ff fe91 	bl	7070 <d_expression>
    734e:	4606      	mov	r6, r0
    7350:	4620      	mov	r0, r4
    7352:	f7ff fe8d 	bl	7070 <d_expression>
    7356:	4607      	mov	r7, r0
    7358:	4620      	mov	r0, r4
    735a:	f7ff fe89 	bl	7070 <d_expression>
    735e:	4603      	mov	r3, r0
    7360:	e78a      	b.n	7278 <d_expression+0x208>
    7362:	4620      	mov	r0, r4
    7364:	2145      	movs	r1, #69	; 0x45
    7366:	f000 f861 	bl	742c <d_exprlist>
    736a:	4606      	mov	r6, r0
    736c:	e7b9      	b.n	72e2 <d_expression+0x272>
    736e:	781b      	ldrb	r3, [r3, #0]
    7370:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
    7374:	2a01      	cmp	r2, #1
    7376:	d902      	bls.n	737e <d_expression+0x30e>
    7378:	3b72      	subs	r3, #114	; 0x72
    737a:	2b01      	cmp	r3, #1
    737c:	d894      	bhi.n	72a8 <d_expression+0x238>
    737e:	4620      	mov	r0, r4
    7380:	f7fe fda4 	bl	5ecc <d_type>
    7384:	4680      	mov	r8, r0
    7386:	e793      	b.n	72b0 <d_expression+0x240>
    7388:	f7fe fbe2 	bl	5b50 <d_template_args>
    738c:	4632      	mov	r2, r6
    738e:	4603      	mov	r3, r0
    7390:	2104      	movs	r1, #4
    7392:	4620      	mov	r0, r4
    7394:	f7fd ffec 	bl	5370 <d_make_comp>
    7398:	462a      	mov	r2, r5
    739a:	4603      	mov	r3, r0
    739c:	2101      	movs	r1, #1
    739e:	4620      	mov	r0, r4
    73a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    73a4:	f7fd bfe4 	b.w	5370 <d_make_comp>
    73a8:	4620      	mov	r0, r4
    73aa:	f7ff fe61 	bl	7070 <d_expression>
    73ae:	4606      	mov	r6, r0
    73b0:	e797      	b.n	72e2 <d_expression+0x272>
    73b2:	3101      	adds	r1, #1
    73b4:	60e1      	str	r1, [r4, #12]
    73b6:	2300      	movs	r3, #0
    73b8:	e75e      	b.n	7278 <d_expression+0x208>
    73ba:	4620      	mov	r0, r4
    73bc:	f7fe fbc8 	bl	5b50 <d_template_args>
    73c0:	4632      	mov	r2, r6
    73c2:	4603      	mov	r3, r0
    73c4:	2104      	movs	r1, #4
    73c6:	4620      	mov	r0, r4
    73c8:	f7fd ffd2 	bl	5370 <d_make_comp>
    73cc:	4606      	mov	r6, r0
    73ce:	e788      	b.n	72e2 <d_expression+0x272>
    73d0:	784b      	ldrb	r3, [r1, #1]
    73d2:	2b69      	cmp	r3, #105	; 0x69
    73d4:	f47f aee9 	bne.w	71aa <d_expression+0x13a>
    73d8:	3102      	adds	r1, #2
    73da:	60e1      	str	r1, [r4, #12]
    73dc:	4620      	mov	r0, r4
    73de:	2145      	movs	r1, #69	; 0x45
    73e0:	f000 f824 	bl	742c <d_exprlist>
    73e4:	4603      	mov	r3, r0
    73e6:	e747      	b.n	7278 <d_expression+0x208>
    73e8:	b12f      	cbz	r7, 73f6 <d_expression+0x386>
    73ea:	783b      	ldrb	r3, [r7, #0]
    73ec:	2b70      	cmp	r3, #112	; 0x70
    73ee:	d006      	beq.n	73fe <d_expression+0x38e>
    73f0:	2b6d      	cmp	r3, #109	; 0x6d
    73f2:	d004      	beq.n	73fe <d_expression+0x38e>
    73f4:	2700      	movs	r7, #0
    73f6:	2e33      	cmp	r6, #51	; 0x33
    73f8:	f47f ae8d 	bne.w	7116 <d_expression+0xa6>
    73fc:	e686      	b.n	710c <d_expression+0x9c>
    73fe:	787a      	ldrb	r2, [r7, #1]
    7400:	429a      	cmp	r2, r3
    7402:	d1f7      	bne.n	73f4 <d_expression+0x384>
    7404:	68e3      	ldr	r3, [r4, #12]
    7406:	781a      	ldrb	r2, [r3, #0]
    7408:	2a5f      	cmp	r2, #95	; 0x5f
    740a:	d001      	beq.n	7410 <d_expression+0x3a0>
    740c:	2701      	movs	r7, #1
    740e:	e7f2      	b.n	73f6 <d_expression+0x386>
    7410:	3301      	adds	r3, #1
    7412:	60e3      	str	r3, [r4, #12]
    7414:	2700      	movs	r7, #0
    7416:	e7ee      	b.n	73f6 <d_expression+0x386>
    7418:	00013c78 	.word	0x00013c78
    741c:	000137dc 	.word	0x000137dc
    7420:	000137d0 	.word	0x000137d0
    7424:	000137d4 	.word	0x000137d4
    7428:	000137d8 	.word	0x000137d8

0000742c <d_exprlist>:
    742c:	b5f0      	push	{r4, r5, r6, r7, lr}
    742e:	68c3      	ldr	r3, [r0, #12]
    7430:	460f      	mov	r7, r1
    7432:	7819      	ldrb	r1, [r3, #0]
    7434:	b083      	sub	sp, #12
    7436:	2200      	movs	r2, #0
    7438:	42b9      	cmp	r1, r7
    743a:	4604      	mov	r4, r0
    743c:	9201      	str	r2, [sp, #4]
    743e:	bf18      	it	ne
    7440:	ae01      	addne	r6, sp, #4
    7442:	d10a      	bne.n	745a <d_exprlist+0x2e>
    7444:	e01b      	b.n	747e <d_exprlist+0x52>
    7446:	f7fd ff93 	bl	5370 <d_make_comp>
    744a:	6030      	str	r0, [r6, #0]
    744c:	f100 0608 	add.w	r6, r0, #8
    7450:	b168      	cbz	r0, 746e <d_exprlist+0x42>
    7452:	68e3      	ldr	r3, [r4, #12]
    7454:	781a      	ldrb	r2, [r3, #0]
    7456:	42ba      	cmp	r2, r7
    7458:	d00c      	beq.n	7474 <d_exprlist+0x48>
    745a:	4620      	mov	r0, r4
    745c:	f7ff fe08 	bl	7070 <d_expression>
    7460:	4605      	mov	r5, r0
    7462:	212e      	movs	r1, #46	; 0x2e
    7464:	4620      	mov	r0, r4
    7466:	462a      	mov	r2, r5
    7468:	2300      	movs	r3, #0
    746a:	2d00      	cmp	r5, #0
    746c:	d1eb      	bne.n	7446 <d_exprlist+0x1a>
    746e:	2000      	movs	r0, #0
    7470:	b003      	add	sp, #12
    7472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7474:	9801      	ldr	r0, [sp, #4]
    7476:	3301      	adds	r3, #1
    7478:	60e3      	str	r3, [r4, #12]
    747a:	b003      	add	sp, #12
    747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    747e:	3301      	adds	r3, #1
    7480:	60c3      	str	r3, [r0, #12]
    7482:	212e      	movs	r1, #46	; 0x2e
    7484:	4613      	mov	r3, r2
    7486:	b003      	add	sp, #12
    7488:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    748c:	f7fd bf70 	b.w	5370 <d_make_comp>

00007490 <d_append_string>:
    7490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7494:	4604      	mov	r4, r0
    7496:	4608      	mov	r0, r1
    7498:	460d      	mov	r5, r1
    749a:	f7fb f8ff 	bl	269c <strlen>
    749e:	b348      	cbz	r0, 74f4 <d_append_string+0x64>
    74a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    74a4:	182f      	adds	r7, r5, r0
    74a6:	f04f 0800 	mov.w	r8, #0
    74aa:	e009      	b.n	74c0 <d_append_string+0x30>
    74ac:	460b      	mov	r3, r1
    74ae:	42bd      	cmp	r5, r7
    74b0:	f101 0101 	add.w	r1, r1, #1
    74b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    74b8:	54e6      	strb	r6, [r4, r3]
    74ba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    74be:	d019      	beq.n	74f4 <d_append_string+0x64>
    74c0:	29ff      	cmp	r1, #255	; 0xff
    74c2:	f815 6b01 	ldrb.w	r6, [r5], #1
    74c6:	d1f1      	bne.n	74ac <d_append_string+0x1c>
    74c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    74cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    74d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    74d4:	4620      	mov	r0, r4
    74d6:	4798      	blx	r3
    74d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    74dc:	3301      	adds	r3, #1
    74de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    74e2:	2300      	movs	r3, #0
    74e4:	2101      	movs	r1, #1
    74e6:	42bd      	cmp	r5, r7
    74e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    74ec:	54e6      	strb	r6, [r4, r3]
    74ee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    74f2:	d1e5      	bne.n	74c0 <d_append_string+0x30>
    74f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000074f8 <d_print_comp.part.10>:
    74f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74fc:	7813      	ldrb	r3, [r2, #0]
    74fe:	b097      	sub	sp, #92	; 0x5c
    7500:	4615      	mov	r5, r2
    7502:	4604      	mov	r4, r0
    7504:	460e      	mov	r6, r1
    7506:	2b4b      	cmp	r3, #75	; 0x4b
    7508:	f201 818c 	bhi.w	8824 <d_print_comp.part.10+0x132c>
    750c:	e8df f013 	tbh	[pc, r3, lsl #1]
    7510:	03a80488 	.word	0x03a80488
    7514:	031f03a8 	.word	0x031f03a8
    7518:	04e004f8 	.word	0x04e004f8
    751c:	031a0561 	.word	0x031a0561
    7520:	02e10308 	.word	0x02e10308
    7524:	029302ba 	.word	0x029302ba
    7528:	022e026c 	.word	0x022e026c
    752c:	01e00207 	.word	0x01e00207
    7530:	019201b9 	.word	0x019201b9
    7534:	0144016b 	.word	0x0144016b
    7538:	00f6011d 	.word	0x00f6011d
    753c:	00a800cf 	.word	0x00a800cf
    7540:	006b0080 	.word	0x006b0080
    7544:	006b006b 	.word	0x006b006b
    7548:	004c004c 	.word	0x004c004c
    754c:	004c004c 	.word	0x004c004c
    7550:	004c004c 	.word	0x004c004c
    7554:	08ed004c 	.word	0x08ed004c
    7558:	004c08ed 	.word	0x004c08ed
    755c:	08bf004c 	.word	0x08bf004c
    7560:	07b3090f 	.word	0x07b3090f
    7564:	07250742 	.word	0x07250742
    7568:	072506e2 	.word	0x072506e2
    756c:	06ae06ae 	.word	0x06ae06ae
    7570:	09150965 	.word	0x09150965
    7574:	0898093e 	.word	0x0898093e
    7578:	0547055b 	.word	0x0547055b
    757c:	0536053b 	.word	0x0536053b
    7580:	06700675 	.word	0x06700675
    7584:	06310670 	.word	0x06310670
    7588:	05fa0631 	.word	0x05fa0631
    758c:	05e105ef 	.word	0x05e105ef
    7590:	058905b0 	.word	0x058905b0
    7594:	08230871 	.word	0x08230871
    7598:	098a084a 	.word	0x098a084a
    759c:	07ee07c8 	.word	0x07ee07c8
    75a0:	040c0461 	.word	0x040c0461
    75a4:	04b503d5 	.word	0x04b503d5
    75a8:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    75ac:	ab16      	add	r3, sp, #88	; 0x58
    75ae:	2100      	movs	r1, #0
    75b0:	f843 2d40 	str.w	r2, [r3, #-64]!
    75b4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    75b8:	9507      	str	r5, [sp, #28]
    75ba:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    75be:	9108      	str	r1, [sp, #32]
    75c0:	9209      	str	r2, [sp, #36]	; 0x24
    75c2:	686a      	ldr	r2, [r5, #4]
    75c4:	4620      	mov	r0, r4
    75c6:	4631      	mov	r1, r6
    75c8:	f002 fa2c 	bl	9a24 <d_print_comp>
    75cc:	9b08      	ldr	r3, [sp, #32]
    75ce:	b923      	cbnz	r3, 75da <d_print_comp.part.10+0xe2>
    75d0:	4631      	mov	r1, r6
    75d2:	462a      	mov	r2, r5
    75d4:	4620      	mov	r0, r4
    75d6:	f002 fa31 	bl	9a3c <d_print_mod>
    75da:	9b06      	ldr	r3, [sp, #24]
    75dc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    75e0:	b017      	add	sp, #92	; 0x5c
    75e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75e6:	f8d0 7114 	ldr.w	r7, [r0, #276]	; 0x114
    75ea:	463a      	mov	r2, r7
    75ec:	2f00      	cmp	r7, #0
    75ee:	d0dd      	beq.n	75ac <d_print_comp.part.10+0xb4>
    75f0:	6891      	ldr	r1, [r2, #8]
    75f2:	b941      	cbnz	r1, 7606 <d_print_comp.part.10+0x10e>
    75f4:	6851      	ldr	r1, [r2, #4]
    75f6:	7809      	ldrb	r1, [r1, #0]
    75f8:	f1a1 0019 	sub.w	r0, r1, #25
    75fc:	2802      	cmp	r0, #2
    75fe:	d805      	bhi.n	760c <d_print_comp.part.10+0x114>
    7600:	428b      	cmp	r3, r1
    7602:	f001 854f 	beq.w	90a4 <d_print_comp.part.10+0x1bac>
    7606:	6812      	ldr	r2, [r2, #0]
    7608:	2a00      	cmp	r2, #0
    760a:	d1f1      	bne.n	75f0 <d_print_comp.part.10+0xf8>
    760c:	463a      	mov	r2, r7
    760e:	e7cd      	b.n	75ac <d_print_comp.part.10+0xb4>
    7610:	6897      	ldr	r7, [r2, #8]
    7612:	f8d2 9004 	ldr.w	r9, [r2, #4]
    7616:	2f00      	cmp	r7, #0
    7618:	d0e2      	beq.n	75e0 <d_print_comp.part.10+0xe8>
    761a:	2500      	movs	r5, #0
    761c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7620:	46a8      	mov	r8, r5
    7622:	e009      	b.n	7638 <d_print_comp.part.10+0x140>
    7624:	460b      	mov	r3, r1
    7626:	3101      	adds	r1, #1
    7628:	3501      	adds	r5, #1
    762a:	42af      	cmp	r7, r5
    762c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7630:	54e6      	strb	r6, [r4, r3]
    7632:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    7636:	d0d3      	beq.n	75e0 <d_print_comp.part.10+0xe8>
    7638:	29ff      	cmp	r1, #255	; 0xff
    763a:	f819 6005 	ldrb.w	r6, [r9, r5]
    763e:	d1f1      	bne.n	7624 <d_print_comp.part.10+0x12c>
    7640:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7644:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    7648:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    764c:	4620      	mov	r0, r4
    764e:	4798      	blx	r3
    7650:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7654:	3301      	adds	r3, #1
    7656:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    765a:	2101      	movs	r1, #1
    765c:	2300      	movs	r3, #0
    765e:	e7e3      	b.n	7628 <d_print_comp.part.10+0x130>
    7660:	4fd6      	ldr	r7, [pc, #856]	; (79bc <d_print_comp.part.10+0x4c4>)
    7662:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7666:	f107 0a11 	add.w	sl, r7, #17
    766a:	f04f 0900 	mov.w	r9, #0
    766e:	e00a      	b.n	7686 <d_print_comp.part.10+0x18e>
    7670:	460b      	mov	r3, r1
    7672:	3101      	adds	r1, #1
    7674:	4557      	cmp	r7, sl
    7676:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    767a:	f804 8003 	strb.w	r8, [r4, r3]
    767e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7682:	f001 8208 	beq.w	8a96 <d_print_comp.part.10+0x159e>
    7686:	29ff      	cmp	r1, #255	; 0xff
    7688:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    768c:	d1f0      	bne.n	7670 <d_print_comp.part.10+0x178>
    768e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7692:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7696:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    769a:	4620      	mov	r0, r4
    769c:	4798      	blx	r3
    769e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    76a2:	3301      	adds	r3, #1
    76a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    76a8:	2101      	movs	r1, #1
    76aa:	2300      	movs	r3, #0
    76ac:	e7e2      	b.n	7674 <d_print_comp.part.10+0x17c>
    76ae:	4fc4      	ldr	r7, [pc, #784]	; (79c0 <d_print_comp.part.10+0x4c8>)
    76b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    76b4:	f107 0a15 	add.w	sl, r7, #21
    76b8:	f04f 0900 	mov.w	r9, #0
    76bc:	e00a      	b.n	76d4 <d_print_comp.part.10+0x1dc>
    76be:	460b      	mov	r3, r1
    76c0:	3101      	adds	r1, #1
    76c2:	4557      	cmp	r7, sl
    76c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    76c8:	f804 8003 	strb.w	r8, [r4, r3]
    76cc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    76d0:	f001 80ec 	beq.w	88ac <d_print_comp.part.10+0x13b4>
    76d4:	29ff      	cmp	r1, #255	; 0xff
    76d6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    76da:	d1f0      	bne.n	76be <d_print_comp.part.10+0x1c6>
    76dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    76e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    76e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    76e8:	4620      	mov	r0, r4
    76ea:	4798      	blx	r3
    76ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    76f0:	3301      	adds	r3, #1
    76f2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    76f6:	2101      	movs	r1, #1
    76f8:	2300      	movs	r3, #0
    76fa:	e7e2      	b.n	76c2 <d_print_comp.part.10+0x1ca>
    76fc:	4fb1      	ldr	r7, [pc, #708]	; (79c4 <d_print_comp.part.10+0x4cc>)
    76fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7702:	f107 0a19 	add.w	sl, r7, #25
    7706:	f04f 0900 	mov.w	r9, #0
    770a:	e00a      	b.n	7722 <d_print_comp.part.10+0x22a>
    770c:	460b      	mov	r3, r1
    770e:	3101      	adds	r1, #1
    7710:	4557      	cmp	r7, sl
    7712:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7716:	f804 8003 	strb.w	r8, [r4, r3]
    771a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    771e:	f001 80b4 	beq.w	888a <d_print_comp.part.10+0x1392>
    7722:	29ff      	cmp	r1, #255	; 0xff
    7724:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7728:	d1f0      	bne.n	770c <d_print_comp.part.10+0x214>
    772a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    772e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7732:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7736:	4620      	mov	r0, r4
    7738:	4798      	blx	r3
    773a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    773e:	3301      	adds	r3, #1
    7740:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7744:	2101      	movs	r1, #1
    7746:	2300      	movs	r3, #0
    7748:	e7e2      	b.n	7710 <d_print_comp.part.10+0x218>
    774a:	4f9f      	ldr	r7, [pc, #636]	; (79c8 <d_print_comp.part.10+0x4d0>)
    774c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7750:	f107 0a16 	add.w	sl, r7, #22
    7754:	f04f 0900 	mov.w	r9, #0
    7758:	e00a      	b.n	7770 <d_print_comp.part.10+0x278>
    775a:	460b      	mov	r3, r1
    775c:	3101      	adds	r1, #1
    775e:	4557      	cmp	r7, sl
    7760:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7764:	f804 8003 	strb.w	r8, [r4, r3]
    7768:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    776c:	f001 80d7 	beq.w	891e <d_print_comp.part.10+0x1426>
    7770:	29ff      	cmp	r1, #255	; 0xff
    7772:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7776:	d1f0      	bne.n	775a <d_print_comp.part.10+0x262>
    7778:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    777c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7780:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7784:	4620      	mov	r0, r4
    7786:	4798      	blx	r3
    7788:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    778c:	3301      	adds	r3, #1
    778e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7792:	2101      	movs	r1, #1
    7794:	2300      	movs	r3, #0
    7796:	e7e2      	b.n	775e <d_print_comp.part.10+0x266>
    7798:	4f8c      	ldr	r7, [pc, #560]	; (79cc <d_print_comp.part.10+0x4d4>)
    779a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    779e:	f107 0a13 	add.w	sl, r7, #19
    77a2:	f04f 0900 	mov.w	r9, #0
    77a6:	e00a      	b.n	77be <d_print_comp.part.10+0x2c6>
    77a8:	460b      	mov	r3, r1
    77aa:	3101      	adds	r1, #1
    77ac:	4557      	cmp	r7, sl
    77ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    77b2:	f804 8003 	strb.w	r8, [r4, r3]
    77b6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    77ba:	f001 80a9 	beq.w	8910 <d_print_comp.part.10+0x1418>
    77be:	29ff      	cmp	r1, #255	; 0xff
    77c0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    77c4:	d1f0      	bne.n	77a8 <d_print_comp.part.10+0x2b0>
    77c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    77ca:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    77ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    77d2:	4620      	mov	r0, r4
    77d4:	4798      	blx	r3
    77d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    77da:	3301      	adds	r3, #1
    77dc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    77e0:	2101      	movs	r1, #1
    77e2:	2300      	movs	r3, #0
    77e4:	e7e2      	b.n	77ac <d_print_comp.part.10+0x2b4>
    77e6:	4f7a      	ldr	r7, [pc, #488]	; (79d0 <d_print_comp.part.10+0x4d8>)
    77e8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    77ec:	f107 0a0f 	add.w	sl, r7, #15
    77f0:	f04f 0900 	mov.w	r9, #0
    77f4:	e00a      	b.n	780c <d_print_comp.part.10+0x314>
    77f6:	460b      	mov	r3, r1
    77f8:	3101      	adds	r1, #1
    77fa:	4557      	cmp	r7, sl
    77fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7800:	f804 8003 	strb.w	r8, [r4, r3]
    7804:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7808:	f001 8090 	beq.w	892c <d_print_comp.part.10+0x1434>
    780c:	29ff      	cmp	r1, #255	; 0xff
    780e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7812:	d1f0      	bne.n	77f6 <d_print_comp.part.10+0x2fe>
    7814:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7818:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    781c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7820:	4620      	mov	r0, r4
    7822:	4798      	blx	r3
    7824:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7828:	3301      	adds	r3, #1
    782a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    782e:	2101      	movs	r1, #1
    7830:	2300      	movs	r3, #0
    7832:	e7e2      	b.n	77fa <d_print_comp.part.10+0x302>
    7834:	4f67      	ldr	r7, [pc, #412]	; (79d4 <d_print_comp.part.10+0x4dc>)
    7836:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    783a:	f107 0a1a 	add.w	sl, r7, #26
    783e:	f04f 0900 	mov.w	r9, #0
    7842:	e00a      	b.n	785a <d_print_comp.part.10+0x362>
    7844:	460b      	mov	r3, r1
    7846:	3101      	adds	r1, #1
    7848:	4557      	cmp	r7, sl
    784a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    784e:	f804 8003 	strb.w	r8, [r4, r3]
    7852:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7856:	f001 8011 	beq.w	887c <d_print_comp.part.10+0x1384>
    785a:	29ff      	cmp	r1, #255	; 0xff
    785c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7860:	d1f0      	bne.n	7844 <d_print_comp.part.10+0x34c>
    7862:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7866:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    786a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    786e:	4620      	mov	r0, r4
    7870:	4798      	blx	r3
    7872:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7876:	3301      	adds	r3, #1
    7878:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    787c:	2101      	movs	r1, #1
    787e:	2300      	movs	r3, #0
    7880:	e7e2      	b.n	7848 <d_print_comp.part.10+0x350>
    7882:	4f55      	ldr	r7, [pc, #340]	; (79d8 <d_print_comp.part.10+0x4e0>)
    7884:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7888:	f107 0a11 	add.w	sl, r7, #17
    788c:	f04f 0900 	mov.w	r9, #0
    7890:	e00a      	b.n	78a8 <d_print_comp.part.10+0x3b0>
    7892:	460b      	mov	r3, r1
    7894:	3101      	adds	r1, #1
    7896:	4557      	cmp	r7, sl
    7898:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    789c:	f804 8003 	strb.w	r8, [r4, r3]
    78a0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    78a4:	f001 80a5 	beq.w	89f2 <d_print_comp.part.10+0x14fa>
    78a8:	29ff      	cmp	r1, #255	; 0xff
    78aa:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    78ae:	d1f0      	bne.n	7892 <d_print_comp.part.10+0x39a>
    78b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    78b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    78b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    78bc:	4620      	mov	r0, r4
    78be:	4798      	blx	r3
    78c0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    78c4:	3301      	adds	r3, #1
    78c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    78ca:	2101      	movs	r1, #1
    78cc:	2300      	movs	r3, #0
    78ce:	e7e2      	b.n	7896 <d_print_comp.part.10+0x39e>
    78d0:	4f42      	ldr	r7, [pc, #264]	; (79dc <d_print_comp.part.10+0x4e4>)
    78d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    78d6:	f107 0a15 	add.w	sl, r7, #21
    78da:	f04f 0900 	mov.w	r9, #0
    78de:	e00a      	b.n	78f6 <d_print_comp.part.10+0x3fe>
    78e0:	460b      	mov	r3, r1
    78e2:	3101      	adds	r1, #1
    78e4:	4557      	cmp	r7, sl
    78e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    78ea:	f804 8003 	strb.w	r8, [r4, r3]
    78ee:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    78f2:	f001 8077 	beq.w	89e4 <d_print_comp.part.10+0x14ec>
    78f6:	29ff      	cmp	r1, #255	; 0xff
    78f8:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    78fc:	d1f0      	bne.n	78e0 <d_print_comp.part.10+0x3e8>
    78fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7902:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7906:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    790a:	4620      	mov	r0, r4
    790c:	4798      	blx	r3
    790e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7912:	3301      	adds	r3, #1
    7914:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7918:	2101      	movs	r1, #1
    791a:	2300      	movs	r3, #0
    791c:	e7e2      	b.n	78e4 <d_print_comp.part.10+0x3ec>
    791e:	4f30      	ldr	r7, [pc, #192]	; (79e0 <d_print_comp.part.10+0x4e8>)
    7920:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7924:	f107 0a10 	add.w	sl, r7, #16
    7928:	f04f 0900 	mov.w	r9, #0
    792c:	e00a      	b.n	7944 <d_print_comp.part.10+0x44c>
    792e:	460b      	mov	r3, r1
    7930:	3101      	adds	r1, #1
    7932:	4557      	cmp	r7, sl
    7934:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7938:	f804 8003 	strb.w	r8, [r4, r3]
    793c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7940:	f001 8049 	beq.w	89d6 <d_print_comp.part.10+0x14de>
    7944:	29ff      	cmp	r1, #255	; 0xff
    7946:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    794a:	d1f0      	bne.n	792e <d_print_comp.part.10+0x436>
    794c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7950:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7954:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7958:	4620      	mov	r0, r4
    795a:	4798      	blx	r3
    795c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7960:	3301      	adds	r3, #1
    7962:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7966:	2101      	movs	r1, #1
    7968:	2300      	movs	r3, #0
    796a:	e7e2      	b.n	7932 <d_print_comp.part.10+0x43a>
    796c:	4f1d      	ldr	r7, [pc, #116]	; (79e4 <d_print_comp.part.10+0x4ec>)
    796e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7972:	f107 0a12 	add.w	sl, r7, #18
    7976:	f04f 0900 	mov.w	r9, #0
    797a:	e00a      	b.n	7992 <d_print_comp.part.10+0x49a>
    797c:	460b      	mov	r3, r1
    797e:	3101      	adds	r1, #1
    7980:	4557      	cmp	r7, sl
    7982:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7986:	f804 8003 	strb.w	r8, [r4, r3]
    798a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    798e:	f001 801b 	beq.w	89c8 <d_print_comp.part.10+0x14d0>
    7992:	29ff      	cmp	r1, #255	; 0xff
    7994:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7998:	d1f0      	bne.n	797c <d_print_comp.part.10+0x484>
    799a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    799e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    79a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    79a6:	4620      	mov	r0, r4
    79a8:	4798      	blx	r3
    79aa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    79ae:	3301      	adds	r3, #1
    79b0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    79b4:	2101      	movs	r1, #1
    79b6:	2300      	movs	r3, #0
    79b8:	e7e2      	b.n	7980 <d_print_comp.part.10+0x488>
    79ba:	bf00      	nop
    79bc:	00013927 	.word	0x00013927
    79c0:	0001390f 	.word	0x0001390f
    79c4:	000138f3 	.word	0x000138f3
    79c8:	000138db 	.word	0x000138db
    79cc:	000138c7 	.word	0x000138c7
    79d0:	000138b7 	.word	0x000138b7
    79d4:	0001389b 	.word	0x0001389b
    79d8:	00013887 	.word	0x00013887
    79dc:	00013883 	.word	0x00013883
    79e0:	0001386f 	.word	0x0001386f
    79e4:	0001385b 	.word	0x0001385b
    79e8:	4fc9      	ldr	r7, [pc, #804]	; (7d10 <d_print_comp.part.10+0x818>)
    79ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    79ee:	f107 0a0d 	add.w	sl, r7, #13
    79f2:	f04f 0900 	mov.w	r9, #0
    79f6:	e00a      	b.n	7a0e <d_print_comp.part.10+0x516>
    79f8:	460b      	mov	r3, r1
    79fa:	3101      	adds	r1, #1
    79fc:	4557      	cmp	r7, sl
    79fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7a02:	f804 8003 	strb.w	r8, [r4, r3]
    7a06:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7a0a:	f000 87cf 	beq.w	89ac <d_print_comp.part.10+0x14b4>
    7a0e:	29ff      	cmp	r1, #255	; 0xff
    7a10:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7a14:	d1f0      	bne.n	79f8 <d_print_comp.part.10+0x500>
    7a16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7a1a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7a1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7a22:	4620      	mov	r0, r4
    7a24:	4798      	blx	r3
    7a26:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7a2a:	3301      	adds	r3, #1
    7a2c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7a30:	2101      	movs	r1, #1
    7a32:	2300      	movs	r3, #0
    7a34:	e7e2      	b.n	79fc <d_print_comp.part.10+0x504>
    7a36:	4fb7      	ldr	r7, [pc, #732]	; (7d14 <d_print_comp.part.10+0x81c>)
    7a38:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7a3c:	f107 0a18 	add.w	sl, r7, #24
    7a40:	f04f 0900 	mov.w	r9, #0
    7a44:	e00a      	b.n	7a5c <d_print_comp.part.10+0x564>
    7a46:	460b      	mov	r3, r1
    7a48:	3101      	adds	r1, #1
    7a4a:	4557      	cmp	r7, sl
    7a4c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7a50:	f804 8003 	strb.w	r8, [r4, r3]
    7a54:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7a58:	f000 877d 	beq.w	8956 <d_print_comp.part.10+0x145e>
    7a5c:	29ff      	cmp	r1, #255	; 0xff
    7a5e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7a62:	d1f0      	bne.n	7a46 <d_print_comp.part.10+0x54e>
    7a64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7a68:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7a6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7a70:	4620      	mov	r0, r4
    7a72:	4798      	blx	r3
    7a74:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7a78:	3301      	adds	r3, #1
    7a7a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7a7e:	2101      	movs	r1, #1
    7a80:	2300      	movs	r3, #0
    7a82:	e7e2      	b.n	7a4a <d_print_comp.part.10+0x552>
    7a84:	4fa4      	ldr	r7, [pc, #656]	; (7d18 <d_print_comp.part.10+0x820>)
    7a86:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7a8a:	f107 0a08 	add.w	sl, r7, #8
    7a8e:	f04f 0900 	mov.w	r9, #0
    7a92:	e00a      	b.n	7aaa <d_print_comp.part.10+0x5b2>
    7a94:	460b      	mov	r3, r1
    7a96:	3101      	adds	r1, #1
    7a98:	4557      	cmp	r7, sl
    7a9a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7a9e:	f804 8003 	strb.w	r8, [r4, r3]
    7aa2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7aa6:	f000 874f 	beq.w	8948 <d_print_comp.part.10+0x1450>
    7aaa:	29ff      	cmp	r1, #255	; 0xff
    7aac:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7ab0:	d1f0      	bne.n	7a94 <d_print_comp.part.10+0x59c>
    7ab2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7ab6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7aba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7abe:	4620      	mov	r0, r4
    7ac0:	4798      	blx	r3
    7ac2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7ac6:	3301      	adds	r3, #1
    7ac8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7acc:	2101      	movs	r1, #1
    7ace:	2300      	movs	r3, #0
    7ad0:	e7e2      	b.n	7a98 <d_print_comp.part.10+0x5a0>
    7ad2:	4f92      	ldr	r7, [pc, #584]	; (7d1c <d_print_comp.part.10+0x824>)
    7ad4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7ad8:	f107 0a0b 	add.w	sl, r7, #11
    7adc:	f04f 0900 	mov.w	r9, #0
    7ae0:	e00a      	b.n	7af8 <d_print_comp.part.10+0x600>
    7ae2:	460b      	mov	r3, r1
    7ae4:	3101      	adds	r1, #1
    7ae6:	4557      	cmp	r7, sl
    7ae8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7aec:	f804 8003 	strb.w	r8, [r4, r3]
    7af0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7af4:	f000 8721 	beq.w	893a <d_print_comp.part.10+0x1442>
    7af8:	29ff      	cmp	r1, #255	; 0xff
    7afa:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7afe:	d1f0      	bne.n	7ae2 <d_print_comp.part.10+0x5ea>
    7b00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7b04:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7b08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7b0c:	4620      	mov	r0, r4
    7b0e:	4798      	blx	r3
    7b10:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7b14:	3301      	adds	r3, #1
    7b16:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7b1a:	2101      	movs	r1, #1
    7b1c:	2300      	movs	r3, #0
    7b1e:	e7e2      	b.n	7ae6 <d_print_comp.part.10+0x5ee>
    7b20:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7b24:	29ff      	cmp	r1, #255	; 0xff
    7b26:	f001 82c4 	beq.w	90b2 <d_print_comp.part.10+0x1bba>
    7b2a:	1c4a      	adds	r2, r1, #1
    7b2c:	237e      	movs	r3, #126	; 0x7e
    7b2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    7b32:	5463      	strb	r3, [r4, r1]
    7b34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    7b38:	4631      	mov	r1, r6
    7b3a:	68aa      	ldr	r2, [r5, #8]
    7b3c:	4620      	mov	r0, r4
    7b3e:	f001 ff71 	bl	9a24 <d_print_comp>
    7b42:	e54d      	b.n	75e0 <d_print_comp.part.10+0xe8>
    7b44:	4631      	mov	r1, r6
    7b46:	6892      	ldr	r2, [r2, #8]
    7b48:	f001 ff6c 	bl	9a24 <d_print_comp>
    7b4c:	e548      	b.n	75e0 <d_print_comp.part.10+0xe8>
    7b4e:	2200      	movs	r2, #0
    7b50:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    7b54:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    7b58:	686f      	ldr	r7, [r5, #4]
    7b5a:	9302      	str	r3, [sp, #8]
    7b5c:	2f00      	cmp	r7, #0
    7b5e:	f001 8503 	beq.w	9568 <d_print_comp.part.10+0x2070>
    7b62:	a906      	add	r1, sp, #24
    7b64:	f8d0 a110 	ldr.w	sl, [r0, #272]	; 0x110
    7b68:	9101      	str	r1, [sp, #4]
    7b6a:	4690      	mov	r8, r2
    7b6c:	4694      	mov	ip, r2
    7b6e:	460b      	mov	r3, r1
    7b70:	7839      	ldrb	r1, [r7, #0]
    7b72:	601a      	str	r2, [r3, #0]
    7b74:	f1a1 001c 	sub.w	r0, r1, #28
    7b78:	2804      	cmp	r0, #4
    7b7a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    7b7e:	605f      	str	r7, [r3, #4]
    7b80:	f8c3 c008 	str.w	ip, [r3, #8]
    7b84:	f8c3 a00c 	str.w	sl, [r3, #12]
    7b88:	461a      	mov	r2, r3
    7b8a:	f108 0801 	add.w	r8, r8, #1
    7b8e:	f103 0310 	add.w	r3, r3, #16
    7b92:	f240 864c 	bls.w	882e <d_print_comp.part.10+0x1336>
    7b96:	2904      	cmp	r1, #4
    7b98:	f001 8633 	beq.w	9802 <d_print_comp.part.10+0x230a>
    7b9c:	2902      	cmp	r1, #2
    7b9e:	d13d      	bne.n	7c1c <d_print_comp.part.10+0x724>
    7ba0:	f8d7 b008 	ldr.w	fp, [r7, #8]
    7ba4:	f89b 3000 	ldrb.w	r3, [fp]
    7ba8:	2b45      	cmp	r3, #69	; 0x45
    7baa:	bf08      	it	eq
    7bac:	f8db b004 	ldreq.w	fp, [fp, #4]
    7bb0:	f89b 3000 	ldrb.w	r3, [fp]
    7bb4:	3b1c      	subs	r3, #28
    7bb6:	2b04      	cmp	r3, #4
    7bb8:	d830      	bhi.n	7c1c <d_print_comp.part.10+0x724>
    7bba:	f1b8 0f04 	cmp.w	r8, #4
    7bbe:	f001 8679 	beq.w	98b4 <d_print_comp.part.10+0x23bc>
    7bc2:	9a01      	ldr	r2, [sp, #4]
    7bc4:	4623      	mov	r3, r4
    7bc6:	eb02 1c08 	add.w	ip, r2, r8, lsl #4
    7bca:	4629      	mov	r1, r5
    7bcc:	4632      	mov	r2, r6
    7bce:	465d      	mov	r5, fp
    7bd0:	4656      	mov	r6, sl
    7bd2:	4664      	mov	r4, ip
    7bd4:	468b      	mov	fp, r1
    7bd6:	4692      	mov	sl, r2
    7bd8:	4699      	mov	r9, r3
    7bda:	e003      	b.n	7be4 <d_print_comp.part.10+0x6ec>
    7bdc:	f1b8 0f04 	cmp.w	r8, #4
    7be0:	f001 8667 	beq.w	98b2 <d_print_comp.part.10+0x23ba>
    7be4:	e91c 000f 	ldmdb	ip, {r0, r1, r2, r3}
    7be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    7bec:	f1a4 0310 	sub.w	r3, r4, #16
    7bf0:	6023      	str	r3, [r4, #0]
    7bf2:	2300      	movs	r3, #0
    7bf4:	e90c 0048 	stmdb	ip, {r3, r6}
    7bf8:	f8c9 4114 	str.w	r4, [r9, #276]	; 0x114
    7bfc:	f84c 5c0c 	str.w	r5, [ip, #-12]
    7c00:	686d      	ldr	r5, [r5, #4]
    7c02:	782b      	ldrb	r3, [r5, #0]
    7c04:	3b1c      	subs	r3, #28
    7c06:	2b04      	cmp	r3, #4
    7c08:	f108 0801 	add.w	r8, r8, #1
    7c0c:	f10c 0c10 	add.w	ip, ip, #16
    7c10:	f104 0410 	add.w	r4, r4, #16
    7c14:	d9e2      	bls.n	7bdc <d_print_comp.part.10+0x6e4>
    7c16:	464c      	mov	r4, r9
    7c18:	4656      	mov	r6, sl
    7c1a:	465d      	mov	r5, fp
    7c1c:	68aa      	ldr	r2, [r5, #8]
    7c1e:	4620      	mov	r0, r4
    7c20:	4631      	mov	r1, r6
    7c22:	f001 feff 	bl	9a24 <d_print_comp>
    7c26:	783b      	ldrb	r3, [r7, #0]
    7c28:	2b04      	cmp	r3, #4
    7c2a:	bf04      	itt	eq
    7c2c:	9b04      	ldreq	r3, [sp, #16]
    7c2e:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
    7c32:	f1b8 0f00 	cmp.w	r8, #0
    7c36:	d00f      	beq.n	7c58 <d_print_comp.part.10+0x760>
    7c38:	9a01      	ldr	r2, [sp, #4]
    7c3a:	4647      	mov	r7, r8
    7c3c:	eb02 1508 	add.w	r5, r2, r8, lsl #4
    7c40:	f04f 0920 	mov.w	r9, #32
    7c44:	46b0      	mov	r8, r6
    7c46:	f855 6c08 	ldr.w	r6, [r5, #-8]
    7c4a:	3f01      	subs	r7, #1
    7c4c:	2e00      	cmp	r6, #0
    7c4e:	f001 8477 	beq.w	9540 <d_print_comp.part.10+0x2048>
    7c52:	3d10      	subs	r5, #16
    7c54:	2f00      	cmp	r7, #0
    7c56:	d1f6      	bne.n	7c46 <d_print_comp.part.10+0x74e>
    7c58:	9902      	ldr	r1, [sp, #8]
    7c5a:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    7c5e:	e4bf      	b.n	75e0 <d_print_comp.part.10+0xe8>
    7c60:	4631      	mov	r1, r6
    7c62:	6852      	ldr	r2, [r2, #4]
    7c64:	f001 fede 	bl	9a24 <d_print_comp>
    7c68:	f016 0904 	ands.w	r9, r6, #4
    7c6c:	f040 85ec 	bne.w	8848 <d_print_comp.part.10+0x1350>
    7c70:	4f2b      	ldr	r7, [pc, #172]	; (7d20 <d_print_comp.part.10+0x828>)
    7c72:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7c76:	f107 0a02 	add.w	sl, r7, #2
    7c7a:	e00a      	b.n	7c92 <d_print_comp.part.10+0x79a>
    7c7c:	460b      	mov	r3, r1
    7c7e:	3101      	adds	r1, #1
    7c80:	4557      	cmp	r7, sl
    7c82:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7c86:	f804 8003 	strb.w	r8, [r4, r3]
    7c8a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7c8e:	f000 85e7 	beq.w	8860 <d_print_comp.part.10+0x1368>
    7c92:	29ff      	cmp	r1, #255	; 0xff
    7c94:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7c98:	d1f0      	bne.n	7c7c <d_print_comp.part.10+0x784>
    7c9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7c9e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7ca2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7ca6:	4620      	mov	r0, r4
    7ca8:	4798      	blx	r3
    7caa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7cae:	3301      	adds	r3, #1
    7cb0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7cb4:	2101      	movs	r1, #1
    7cb6:	2300      	movs	r3, #0
    7cb8:	e7e2      	b.n	7c80 <d_print_comp.part.10+0x788>
    7cba:	4f1a      	ldr	r7, [pc, #104]	; (7d24 <d_print_comp.part.10+0x82c>)
    7cbc:	6852      	ldr	r2, [r2, #4]
    7cbe:	4631      	mov	r1, r6
    7cc0:	f001 feb0 	bl	9a24 <d_print_comp>
    7cc4:	f107 0a05 	add.w	sl, r7, #5
    7cc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7ccc:	f04f 0900 	mov.w	r9, #0
    7cd0:	e00a      	b.n	7ce8 <d_print_comp.part.10+0x7f0>
    7cd2:	460b      	mov	r3, r1
    7cd4:	3101      	adds	r1, #1
    7cd6:	4557      	cmp	r7, sl
    7cd8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7cdc:	f804 8003 	strb.w	r8, [r4, r3]
    7ce0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7ce4:	f000 87b2 	beq.w	8c4c <d_print_comp.part.10+0x1754>
    7ce8:	29ff      	cmp	r1, #255	; 0xff
    7cea:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7cee:	d1f0      	bne.n	7cd2 <d_print_comp.part.10+0x7da>
    7cf0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7cf4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7cf8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7cfc:	4620      	mov	r0, r4
    7cfe:	4798      	blx	r3
    7d00:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7d04:	3301      	adds	r3, #1
    7d06:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7d0a:	2101      	movs	r1, #1
    7d0c:	2300      	movs	r3, #0
    7d0e:	e7e2      	b.n	7cd6 <d_print_comp.part.10+0x7de>
    7d10:	0001384b 	.word	0x0001384b
    7d14:	00013827 	.word	0x00013827
    7d18:	0001381b 	.word	0x0001381b
    7d1c:	0001380f 	.word	0x0001380f
    7d20:	000137e7 	.word	0x000137e7
    7d24:	000137df 	.word	0x000137df
    7d28:	6851      	ldr	r1, [r2, #4]
    7d2a:	f7fd fe29 	bl	5980 <d_find_pack>
    7d2e:	2800      	cmp	r0, #0
    7d30:	f001 856f 	beq.w	9812 <d_print_comp.part.10+0x231a>
    7d34:	f04f 0800 	mov.w	r8, #0
    7d38:	7803      	ldrb	r3, [r0, #0]
    7d3a:	2b2f      	cmp	r3, #47	; 0x2f
    7d3c:	f040 87ca 	bne.w	8cd4 <d_print_comp.part.10+0x17dc>
    7d40:	6843      	ldr	r3, [r0, #4]
    7d42:	2b00      	cmp	r3, #0
    7d44:	f000 87c6 	beq.w	8cd4 <d_print_comp.part.10+0x17dc>
    7d48:	6880      	ldr	r0, [r0, #8]
    7d4a:	f108 0801 	add.w	r8, r8, #1
    7d4e:	2800      	cmp	r0, #0
    7d50:	d1f2      	bne.n	7d38 <d_print_comp.part.10+0x840>
    7d52:	686d      	ldr	r5, [r5, #4]
    7d54:	9501      	str	r5, [sp, #4]
    7d56:	2700      	movs	r7, #0
    7d58:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    7d5c:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 812c <d_print_comp.part.10+0xc34>
    7d60:	9302      	str	r3, [sp, #8]
    7d62:	46b9      	mov	r9, r7
    7d64:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
    7d68:	4620      	mov	r0, r4
    7d6a:	4631      	mov	r1, r6
    7d6c:	9a01      	ldr	r2, [sp, #4]
    7d6e:	f001 fe59 	bl	9a24 <d_print_comp>
    7d72:	9b02      	ldr	r3, [sp, #8]
    7d74:	42bb      	cmp	r3, r7
    7d76:	dd28      	ble.n	7dca <d_print_comp.part.10+0x8d2>
    7d78:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7d7c:	f8df b3b0 	ldr.w	fp, [pc, #944]	; 8130 <d_print_comp.part.10+0xc38>
    7d80:	e009      	b.n	7d96 <d_print_comp.part.10+0x89e>
    7d82:	460b      	mov	r3, r1
    7d84:	45d3      	cmp	fp, sl
    7d86:	f101 0101 	add.w	r1, r1, #1
    7d8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7d8e:	54e5      	strb	r5, [r4, r3]
    7d90:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    7d94:	d019      	beq.n	7dca <d_print_comp.part.10+0x8d2>
    7d96:	29ff      	cmp	r1, #255	; 0xff
    7d98:	f81b 5f01 	ldrb.w	r5, [fp, #1]!
    7d9c:	d1f1      	bne.n	7d82 <d_print_comp.part.10+0x88a>
    7d9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7da2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7da6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7daa:	4620      	mov	r0, r4
    7dac:	4798      	blx	r3
    7dae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7db2:	3301      	adds	r3, #1
    7db4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7db8:	2300      	movs	r3, #0
    7dba:	2101      	movs	r1, #1
    7dbc:	45d3      	cmp	fp, sl
    7dbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7dc2:	54e5      	strb	r5, [r4, r3]
    7dc4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    7dc8:	d1e5      	bne.n	7d96 <d_print_comp.part.10+0x89e>
    7dca:	3701      	adds	r7, #1
    7dcc:	4547      	cmp	r7, r8
    7dce:	d1c9      	bne.n	7d64 <d_print_comp.part.10+0x86c>
    7dd0:	e406      	b.n	75e0 <d_print_comp.part.10+0xe8>
    7dd2:	4fd0      	ldr	r7, [pc, #832]	; (8114 <d_print_comp.part.10+0xc1c>)
    7dd4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7dd8:	f107 0a1a 	add.w	sl, r7, #26
    7ddc:	f04f 0900 	mov.w	r9, #0
    7de0:	e00a      	b.n	7df8 <d_print_comp.part.10+0x900>
    7de2:	460b      	mov	r3, r1
    7de4:	3101      	adds	r1, #1
    7de6:	4557      	cmp	r7, sl
    7de8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7dec:	f804 8003 	strb.w	r8, [r4, r3]
    7df0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7df4:	f000 8604 	beq.w	8a00 <d_print_comp.part.10+0x1508>
    7df8:	29ff      	cmp	r1, #255	; 0xff
    7dfa:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7dfe:	d1f0      	bne.n	7de2 <d_print_comp.part.10+0x8ea>
    7e00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7e04:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7e08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7e0c:	4620      	mov	r0, r4
    7e0e:	4798      	blx	r3
    7e10:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7e14:	3301      	adds	r3, #1
    7e16:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7e1a:	2101      	movs	r1, #1
    7e1c:	2300      	movs	r3, #0
    7e1e:	e7e2      	b.n	7de6 <d_print_comp.part.10+0x8ee>
    7e20:	f016 0604 	ands.w	r6, r6, #4
    7e24:	f041 81ae 	bne.w	9184 <d_print_comp.part.10+0x1c8c>
    7e28:	6897      	ldr	r7, [r2, #8]
    7e2a:	f8d2 9004 	ldr.w	r9, [r2, #4]
    7e2e:	2f00      	cmp	r7, #0
    7e30:	f43f abd6 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    7e34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7e38:	46b0      	mov	r8, r6
    7e3a:	e00a      	b.n	7e52 <d_print_comp.part.10+0x95a>
    7e3c:	460b      	mov	r3, r1
    7e3e:	3101      	adds	r1, #1
    7e40:	3601      	adds	r6, #1
    7e42:	42b7      	cmp	r7, r6
    7e44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7e48:	54e5      	strb	r5, [r4, r3]
    7e4a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    7e4e:	f43f abc7 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    7e52:	29ff      	cmp	r1, #255	; 0xff
    7e54:	f819 5006 	ldrb.w	r5, [r9, r6]
    7e58:	d1f0      	bne.n	7e3c <d_print_comp.part.10+0x944>
    7e5a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7e5e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    7e62:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7e66:	4620      	mov	r0, r4
    7e68:	4798      	blx	r3
    7e6a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7e6e:	3301      	adds	r3, #1
    7e70:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7e74:	2101      	movs	r1, #1
    7e76:	2300      	movs	r3, #0
    7e78:	e7e2      	b.n	7e40 <d_print_comp.part.10+0x948>
    7e7a:	4fa7      	ldr	r7, [pc, #668]	; (8118 <d_print_comp.part.10+0xc20>)
    7e7c:	6852      	ldr	r2, [r2, #4]
    7e7e:	4631      	mov	r1, r6
    7e80:	f001 fdd0 	bl	9a24 <d_print_comp>
    7e84:	f107 0a08 	add.w	sl, r7, #8
    7e88:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7e8c:	f04f 0900 	mov.w	r9, #0
    7e90:	e00a      	b.n	7ea8 <d_print_comp.part.10+0x9b0>
    7e92:	460b      	mov	r3, r1
    7e94:	3101      	adds	r1, #1
    7e96:	4557      	cmp	r7, sl
    7e98:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7e9c:	f804 8003 	strb.w	r8, [r4, r3]
    7ea0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    7ea4:	f000 86e5 	beq.w	8c72 <d_print_comp.part.10+0x177a>
    7ea8:	29ff      	cmp	r1, #255	; 0xff
    7eaa:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    7eae:	d1f0      	bne.n	7e92 <d_print_comp.part.10+0x99a>
    7eb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7eb4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    7eb8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7ebc:	4620      	mov	r0, r4
    7ebe:	4798      	blx	r3
    7ec0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7ec4:	3301      	adds	r3, #1
    7ec6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7eca:	2101      	movs	r1, #1
    7ecc:	2300      	movs	r3, #0
    7ece:	e7e2      	b.n	7e96 <d_print_comp.part.10+0x99e>
    7ed0:	1d11      	adds	r1, r2, #4
    7ed2:	f7fd fd33 	bl	593c <d_lookup_template_argument.isra.6>
    7ed6:	2800      	cmp	r0, #0
    7ed8:	f001 8013 	beq.w	8f02 <d_print_comp.part.10+0x1a0a>
    7edc:	7803      	ldrb	r3, [r0, #0]
    7ede:	2b2f      	cmp	r3, #47	; 0x2f
    7ee0:	f001 8002 	beq.w	8ee8 <d_print_comp.part.10+0x19f0>
    7ee4:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
    7ee8:	682b      	ldr	r3, [r5, #0]
    7eea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    7eee:	4602      	mov	r2, r0
    7ef0:	4631      	mov	r1, r6
    7ef2:	4620      	mov	r0, r4
    7ef4:	f001 fd96 	bl	9a24 <d_print_comp>
    7ef8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7efc:	f7ff bb70 	b.w	75e0 <d_print_comp.part.10+0xe8>
    7f00:	2300      	movs	r3, #0
    7f02:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
    7f06:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    7f0a:	6857      	ldr	r7, [r2, #4]
    7f0c:	0772      	lsls	r2, r6, #29
    7f0e:	d505      	bpl.n	7f1c <d_print_comp.part.10+0xa24>
    7f10:	783b      	ldrb	r3, [r7, #0]
    7f12:	b91b      	cbnz	r3, 7f1c <d_print_comp.part.10+0xa24>
    7f14:	68ba      	ldr	r2, [r7, #8]
    7f16:	2a06      	cmp	r2, #6
    7f18:	f001 83bb 	beq.w	9692 <d_print_comp.part.10+0x219a>
    7f1c:	463a      	mov	r2, r7
    7f1e:	4620      	mov	r0, r4
    7f20:	4631      	mov	r1, r6
    7f22:	f001 fd7f 	bl	9a24 <d_print_comp>
    7f26:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    7f2a:	2b3c      	cmp	r3, #60	; 0x3c
    7f2c:	f001 832f 	beq.w	958e <d_print_comp.part.10+0x2096>
    7f30:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    7f34:	2bff      	cmp	r3, #255	; 0xff
    7f36:	f001 822a 	beq.w	938e <d_print_comp.part.10+0x1e96>
    7f3a:	1c59      	adds	r1, r3, #1
    7f3c:	223c      	movs	r2, #60	; 0x3c
    7f3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7f42:	54e2      	strb	r2, [r4, r3]
    7f44:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    7f48:	4631      	mov	r1, r6
    7f4a:	68aa      	ldr	r2, [r5, #8]
    7f4c:	4620      	mov	r0, r4
    7f4e:	f001 fd69 	bl	9a24 <d_print_comp>
    7f52:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    7f56:	2b3e      	cmp	r3, #62	; 0x3e
    7f58:	f001 830b 	beq.w	9572 <d_print_comp.part.10+0x207a>
    7f5c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    7f60:	2bff      	cmp	r3, #255	; 0xff
    7f62:	f001 8201 	beq.w	9368 <d_print_comp.part.10+0x1e70>
    7f66:	1c59      	adds	r1, r3, #1
    7f68:	223e      	movs	r2, #62	; 0x3e
    7f6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7f6e:	54e2      	strb	r2, [r4, r3]
    7f70:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    7f74:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
    7f78:	f7ff bb32 	b.w	75e0 <d_print_comp.part.10+0xe8>
    7f7c:	2301      	movs	r3, #1
    7f7e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    7f82:	f7ff bb2d 	b.w	75e0 <d_print_comp.part.10+0xe8>
    7f86:	f8d2 8008 	ldr.w	r8, [r2, #8]
    7f8a:	f898 3000 	ldrb.w	r3, [r8]
    7f8e:	2b37      	cmp	r3, #55	; 0x37
    7f90:	f000 875d 	beq.w	8e4e <d_print_comp.part.10+0x1956>
    7f94:	2301      	movs	r3, #1
    7f96:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    7f9a:	f7ff bb21 	b.w	75e0 <d_print_comp.part.10+0xe8>
    7f9e:	6857      	ldr	r7, [r2, #4]
    7fa0:	6895      	ldr	r5, [r2, #8]
    7fa2:	783b      	ldrb	r3, [r7, #0]
    7fa4:	2b31      	cmp	r3, #49	; 0x31
    7fa6:	f001 8003 	beq.w	8fb0 <d_print_comp.part.10+0x1ab8>
    7faa:	2b33      	cmp	r3, #51	; 0x33
    7fac:	f001 8046 	beq.w	903c <d_print_comp.part.10+0x1b44>
    7fb0:	463a      	mov	r2, r7
    7fb2:	4631      	mov	r1, r6
    7fb4:	f002 fb98 	bl	a6e8 <d_print_expr_op>
    7fb8:	4620      	mov	r0, r4
    7fba:	4631      	mov	r1, r6
    7fbc:	462a      	mov	r2, r5
    7fbe:	f002 fbcd 	bl	a75c <d_print_subexpr>
    7fc2:	f7ff bb0d 	b.w	75e0 <d_print_comp.part.10+0xe8>
    7fc6:	4631      	mov	r1, r6
    7fc8:	6852      	ldr	r2, [r2, #4]
    7fca:	f002 fb8d 	bl	a6e8 <d_print_expr_op>
    7fce:	f7ff bb07 	b.w	75e0 <d_print_comp.part.10+0xe8>
    7fd2:	6857      	ldr	r7, [r2, #4]
    7fd4:	2f00      	cmp	r7, #0
    7fd6:	f040 86d4 	bne.w	8d82 <d_print_comp.part.10+0x188a>
    7fda:	4d50      	ldr	r5, [pc, #320]	; (811c <d_print_comp.part.10+0xc24>)
    7fdc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7fe0:	f105 0804 	add.w	r8, r5, #4
    7fe4:	e009      	b.n	7ffa <d_print_comp.part.10+0xb02>
    7fe6:	460b      	mov	r3, r1
    7fe8:	3101      	adds	r1, #1
    7fea:	4545      	cmp	r5, r8
    7fec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    7ff0:	54e6      	strb	r6, [r4, r3]
    7ff2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    7ff6:	f43f aaf3 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    7ffa:	29ff      	cmp	r1, #255	; 0xff
    7ffc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8000:	d1f1      	bne.n	7fe6 <d_print_comp.part.10+0xaee>
    8002:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8006:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    800a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    800e:	4620      	mov	r0, r4
    8010:	4798      	blx	r3
    8012:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8016:	3301      	adds	r3, #1
    8018:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    801c:	2101      	movs	r1, #1
    801e:	2300      	movs	r3, #0
    8020:	e7e3      	b.n	7fea <d_print_comp.part.10+0xaf2>
    8022:	4f3f      	ldr	r7, [pc, #252]	; (8120 <d_print_comp.part.10+0xc28>)
    8024:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8028:	f107 0a0a 	add.w	sl, r7, #10
    802c:	f04f 0900 	mov.w	r9, #0
    8030:	e00a      	b.n	8048 <d_print_comp.part.10+0xb50>
    8032:	460b      	mov	r3, r1
    8034:	3101      	adds	r1, #1
    8036:	4557      	cmp	r7, sl
    8038:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    803c:	f804 8003 	strb.w	r8, [r4, r3]
    8040:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8044:	f000 85e8 	beq.w	8c18 <d_print_comp.part.10+0x1720>
    8048:	29ff      	cmp	r1, #255	; 0xff
    804a:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    804e:	d1f0      	bne.n	8032 <d_print_comp.part.10+0xb3a>
    8050:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8054:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8058:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    805c:	4620      	mov	r0, r4
    805e:	4798      	blx	r3
    8060:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8064:	3301      	adds	r3, #1
    8066:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    806a:	2101      	movs	r1, #1
    806c:	2300      	movs	r3, #0
    806e:	e7e2      	b.n	8036 <d_print_comp.part.10+0xb3e>
    8070:	6852      	ldr	r2, [r2, #4]
    8072:	492c      	ldr	r1, [pc, #176]	; (8124 <d_print_comp.part.10+0xc2c>)
    8074:	a806      	add	r0, sp, #24
    8076:	f006 fc49 	bl	e90c <sprintf>
    807a:	a806      	add	r0, sp, #24
    807c:	f7fa fb0e 	bl	269c <strlen>
    8080:	2800      	cmp	r0, #0
    8082:	f43f aaad 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    8086:	f10d 0517 	add.w	r5, sp, #23
    808a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    808e:	182f      	adds	r7, r5, r0
    8090:	f04f 0800 	mov.w	r8, #0
    8094:	e009      	b.n	80aa <d_print_comp.part.10+0xbb2>
    8096:	460b      	mov	r3, r1
    8098:	3101      	adds	r1, #1
    809a:	42bd      	cmp	r5, r7
    809c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    80a0:	54e6      	strb	r6, [r4, r3]
    80a2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    80a6:	f43f aa9b 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    80aa:	29ff      	cmp	r1, #255	; 0xff
    80ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    80b0:	d1f1      	bne.n	8096 <d_print_comp.part.10+0xb9e>
    80b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    80b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    80ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    80be:	4620      	mov	r0, r4
    80c0:	4798      	blx	r3
    80c2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    80c6:	3301      	adds	r3, #1
    80c8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    80cc:	2101      	movs	r1, #1
    80ce:	2300      	movs	r3, #0
    80d0:	e7e3      	b.n	809a <d_print_comp.part.10+0xba2>
    80d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    80d6:	7915      	ldrb	r5, [r2, #4]
    80d8:	29ff      	cmp	r1, #255	; 0xff
    80da:	f001 80ae 	beq.w	923a <d_print_comp.part.10+0x1d42>
    80de:	1c4b      	adds	r3, r1, #1
    80e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    80e4:	5465      	strb	r5, [r4, r1]
    80e6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    80ea:	f7ff ba79 	b.w	75e0 <d_print_comp.part.10+0xe8>
    80ee:	4631      	mov	r1, r6
    80f0:	6852      	ldr	r2, [r2, #4]
    80f2:	f001 fc97 	bl	9a24 <d_print_comp>
    80f6:	4620      	mov	r0, r4
    80f8:	4631      	mov	r1, r6
    80fa:	68aa      	ldr	r2, [r5, #8]
    80fc:	f001 fc92 	bl	9a24 <d_print_comp>
    8100:	f7ff ba6e 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8104:	4f08      	ldr	r7, [pc, #32]	; (8128 <d_print_comp.part.10+0xc30>)
    8106:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    810a:	f107 0a0e 	add.w	sl, r7, #14
    810e:	f04f 0900 	mov.w	r9, #0
    8112:	e01a      	b.n	814a <d_print_comp.part.10+0xc52>
    8114:	0001393b 	.word	0x0001393b
    8118:	00013a4f 	.word	0x00013a4f
    811c:	000139df 	.word	0x000139df
    8120:	000139cf 	.word	0x000139cf
    8124:	000137fc 	.word	0x000137fc
    8128:	000139bf 	.word	0x000139bf
    812c:	00013971 	.word	0x00013971
    8130:	0001396f 	.word	0x0001396f
    8134:	460b      	mov	r3, r1
    8136:	3101      	adds	r1, #1
    8138:	4557      	cmp	r7, sl
    813a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    813e:	f804 8003 	strb.w	r8, [r4, r3]
    8142:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8146:	f000 8560 	beq.w	8c0a <d_print_comp.part.10+0x1712>
    814a:	29ff      	cmp	r1, #255	; 0xff
    814c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8150:	d1f0      	bne.n	8134 <d_print_comp.part.10+0xc3c>
    8152:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8156:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    815a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    815e:	4620      	mov	r0, r4
    8160:	4798      	blx	r3
    8162:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8166:	3301      	adds	r3, #1
    8168:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    816c:	2101      	movs	r1, #1
    816e:	2300      	movs	r3, #0
    8170:	e7e2      	b.n	8138 <d_print_comp.part.10+0xc40>
    8172:	6852      	ldr	r2, [r2, #4]
    8174:	7811      	ldrb	r1, [r2, #0]
    8176:	2927      	cmp	r1, #39	; 0x27
    8178:	f040 85b4 	bne.w	8ce4 <d_print_comp.part.10+0x17ec>
    817c:	6852      	ldr	r2, [r2, #4]
    817e:	7c17      	ldrb	r7, [r2, #16]
    8180:	b15f      	cbz	r7, 819a <d_print_comp.part.10+0xca2>
    8182:	2f06      	cmp	r7, #6
    8184:	f241 8178 	bls.w	9478 <d_print_comp.part.10+0x1f80>
    8188:	2f07      	cmp	r7, #7
    818a:	d106      	bne.n	819a <d_print_comp.part.10+0xca2>
    818c:	68aa      	ldr	r2, [r5, #8]
    818e:	7811      	ldrb	r1, [r2, #0]
    8190:	b919      	cbnz	r1, 819a <d_print_comp.part.10+0xca2>
    8192:	6891      	ldr	r1, [r2, #8]
    8194:	2901      	cmp	r1, #1
    8196:	f001 83ad 	beq.w	98f4 <d_print_comp.part.10+0x23fc>
    819a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    819e:	29ff      	cmp	r1, #255	; 0xff
    81a0:	f001 8150 	beq.w	9444 <d_print_comp.part.10+0x1f4c>
    81a4:	1c4a      	adds	r2, r1, #1
    81a6:	2328      	movs	r3, #40	; 0x28
    81a8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    81ac:	5463      	strb	r3, [r4, r1]
    81ae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    81b2:	686a      	ldr	r2, [r5, #4]
    81b4:	4620      	mov	r0, r4
    81b6:	4631      	mov	r1, r6
    81b8:	f001 fc34 	bl	9a24 <d_print_comp>
    81bc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    81c0:	2bff      	cmp	r3, #255	; 0xff
    81c2:	f001 811c 	beq.w	93fe <d_print_comp.part.10+0x1f06>
    81c6:	1c59      	adds	r1, r3, #1
    81c8:	2229      	movs	r2, #41	; 0x29
    81ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    81ce:	54e2      	strb	r2, [r4, r3]
    81d0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    81d4:	782b      	ldrb	r3, [r5, #0]
    81d6:	2b3c      	cmp	r3, #60	; 0x3c
    81d8:	f001 8206 	beq.w	95e8 <d_print_comp.part.10+0x20f0>
    81dc:	2f08      	cmp	r7, #8
    81de:	f001 81e4 	beq.w	95aa <d_print_comp.part.10+0x20b2>
    81e2:	4620      	mov	r0, r4
    81e4:	4631      	mov	r1, r6
    81e6:	68aa      	ldr	r2, [r5, #8]
    81e8:	f001 fc1c 	bl	9a24 <d_print_comp>
    81ec:	f7ff b9f8 	b.w	75e0 <d_print_comp.part.10+0xe8>
    81f0:	2301      	movs	r3, #1
    81f2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    81f6:	f7ff b9f3 	b.w	75e0 <d_print_comp.part.10+0xe8>
    81fa:	6893      	ldr	r3, [r2, #8]
    81fc:	781a      	ldrb	r2, [r3, #0]
    81fe:	2a39      	cmp	r2, #57	; 0x39
    8200:	f47f aec8 	bne.w	7f94 <d_print_comp.part.10+0xa9c>
    8204:	689f      	ldr	r7, [r3, #8]
    8206:	783a      	ldrb	r2, [r7, #0]
    8208:	2a3a      	cmp	r2, #58	; 0x3a
    820a:	f47f aec3 	bne.w	7f94 <d_print_comp.part.10+0xa9c>
    820e:	f8d5 a004 	ldr.w	sl, [r5, #4]
    8212:	49ba      	ldr	r1, [pc, #744]	; (84fc <d_print_comp.part.10+0x1004>)
    8214:	f8da 2004 	ldr.w	r2, [sl, #4]
    8218:	f8d3 8004 	ldr.w	r8, [r3, #4]
    821c:	6810      	ldr	r0, [r2, #0]
    821e:	f8d7 9004 	ldr.w	r9, [r7, #4]
    8222:	68bd      	ldr	r5, [r7, #8]
    8224:	f006 fb98 	bl	e958 <strcmp>
    8228:	2800      	cmp	r0, #0
    822a:	f001 8290 	beq.w	974e <d_print_comp.part.10+0x2256>
    822e:	4620      	mov	r0, r4
    8230:	49b3      	ldr	r1, [pc, #716]	; (8500 <d_print_comp.part.10+0x1008>)
    8232:	f7ff f92d 	bl	7490 <d_append_string>
    8236:	f8d8 3004 	ldr.w	r3, [r8, #4]
    823a:	b143      	cbz	r3, 824e <d_print_comp.part.10+0xd56>
    823c:	4620      	mov	r0, r4
    823e:	4631      	mov	r1, r6
    8240:	4642      	mov	r2, r8
    8242:	f002 fa8b 	bl	a75c <d_print_subexpr>
    8246:	4620      	mov	r0, r4
    8248:	2120      	movs	r1, #32
    824a:	f7fd fa5b 	bl	5704 <d_append_char>
    824e:	464a      	mov	r2, r9
    8250:	4620      	mov	r0, r4
    8252:	4631      	mov	r1, r6
    8254:	f001 fbe6 	bl	9a24 <d_print_comp>
    8258:	2d00      	cmp	r5, #0
    825a:	f43f a9c1 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    825e:	4620      	mov	r0, r4
    8260:	4631      	mov	r1, r6
    8262:	462a      	mov	r2, r5
    8264:	f002 fa7a 	bl	a75c <d_print_subexpr>
    8268:	f7ff b9ba 	b.w	75e0 <d_print_comp.part.10+0xe8>
    826c:	6852      	ldr	r2, [r2, #4]
    826e:	b112      	cbz	r2, 8276 <d_print_comp.part.10+0xd7e>
    8270:	4631      	mov	r1, r6
    8272:	f001 fbd7 	bl	9a24 <d_print_comp>
    8276:	68ab      	ldr	r3, [r5, #8]
    8278:	2b00      	cmp	r3, #0
    827a:	f43f a9b1 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    827e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
    8282:	2ffd      	cmp	r7, #253	; 0xfd
    8284:	f200 86f9 	bhi.w	907a <d_print_comp.part.10+0x1b82>
    8288:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8514 <d_print_comp.part.10+0x101c>
    828c:	f04f 0a00 	mov.w	sl, #0
    8290:	f108 0b02 	add.w	fp, r8, #2
    8294:	4639      	mov	r1, r7
    8296:	e009      	b.n	82ac <d_print_comp.part.10+0xdb4>
    8298:	460b      	mov	r3, r1
    829a:	3101      	adds	r1, #1
    829c:	45d8      	cmp	r8, fp
    829e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    82a2:	54e7      	strb	r7, [r4, r3]
    82a4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    82a8:	f000 84fd 	beq.w	8ca6 <d_print_comp.part.10+0x17ae>
    82ac:	29ff      	cmp	r1, #255	; 0xff
    82ae:	f818 7f01 	ldrb.w	r7, [r8, #1]!
    82b2:	d1f1      	bne.n	8298 <d_print_comp.part.10+0xda0>
    82b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    82b8:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
    82bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    82c0:	4620      	mov	r0, r4
    82c2:	4798      	blx	r3
    82c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    82c8:	3301      	adds	r3, #1
    82ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    82ce:	2101      	movs	r1, #1
    82d0:	2300      	movs	r3, #0
    82d2:	e7e3      	b.n	829c <d_print_comp.part.10+0xda4>
    82d4:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
    82d8:	2b00      	cmp	r3, #0
    82da:	f040 8629 	bne.w	8f30 <d_print_comp.part.10+0x1a38>
    82de:	686a      	ldr	r2, [r5, #4]
    82e0:	4988      	ldr	r1, [pc, #544]	; (8504 <d_print_comp.part.10+0x100c>)
    82e2:	6853      	ldr	r3, [r2, #4]
    82e4:	428b      	cmp	r3, r1
    82e6:	f000 85fb 	beq.w	8ee0 <d_print_comp.part.10+0x19e8>
    82ea:	4631      	mov	r1, r6
    82ec:	4620      	mov	r0, r4
    82ee:	f001 fb99 	bl	9a24 <d_print_comp>
    82f2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    82f6:	2bff      	cmp	r3, #255	; 0xff
    82f8:	f001 80f4 	beq.w	94e4 <d_print_comp.part.10+0x1fec>
    82fc:	1c59      	adds	r1, r3, #1
    82fe:	2220      	movs	r2, #32
    8300:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8304:	54e2      	strb	r2, [r4, r3]
    8306:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    830a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
    830e:	2b00      	cmp	r3, #0
    8310:	f000 84eb 	beq.w	8cea <d_print_comp.part.10+0x17f2>
    8314:	4d7c      	ldr	r5, [pc, #496]	; (8508 <d_print_comp.part.10+0x1010>)
    8316:	f04f 0800 	mov.w	r8, #0
    831a:	1daf      	adds	r7, r5, #6
    831c:	e009      	b.n	8332 <d_print_comp.part.10+0xe3a>
    831e:	460b      	mov	r3, r1
    8320:	3101      	adds	r1, #1
    8322:	42bd      	cmp	r5, r7
    8324:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8328:	54e6      	strb	r6, [r4, r3]
    832a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    832e:	f43f a957 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    8332:	29ff      	cmp	r1, #255	; 0xff
    8334:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8338:	d1f1      	bne.n	831e <d_print_comp.part.10+0xe26>
    833a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    833e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8342:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8346:	4620      	mov	r0, r4
    8348:	4798      	blx	r3
    834a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    834e:	3301      	adds	r3, #1
    8350:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8354:	2101      	movs	r1, #1
    8356:	2300      	movs	r3, #0
    8358:	e7e3      	b.n	8322 <d_print_comp.part.10+0xe2a>
    835a:	ab16      	add	r3, sp, #88	; 0x58
    835c:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    8360:	f843 2d40 	str.w	r2, [r3, #-64]!
    8364:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    8368:	68aa      	ldr	r2, [r5, #8]
    836a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    836e:	9309      	str	r3, [sp, #36]	; 0x24
    8370:	2700      	movs	r7, #0
    8372:	4631      	mov	r1, r6
    8374:	9507      	str	r5, [sp, #28]
    8376:	9708      	str	r7, [sp, #32]
    8378:	f001 fb54 	bl	9a24 <d_print_comp>
    837c:	9b08      	ldr	r3, [sp, #32]
    837e:	b923      	cbnz	r3, 838a <d_print_comp.part.10+0xe92>
    8380:	4631      	mov	r1, r6
    8382:	462a      	mov	r2, r5
    8384:	4620      	mov	r0, r4
    8386:	f001 fb59 	bl	9a3c <d_print_mod>
    838a:	9b06      	ldr	r3, [sp, #24]
    838c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    8390:	f7ff b926 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8394:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
    8398:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    839c:	f8cd b008 	str.w	fp, [sp, #8]
    83a0:	a916      	add	r1, sp, #88	; 0x58
    83a2:	2200      	movs	r2, #0
    83a4:	f841 bd40 	str.w	fp, [r1, #-64]!
    83a8:	9309      	str	r3, [sp, #36]	; 0x24
    83aa:	9b02      	ldr	r3, [sp, #8]
    83ac:	9101      	str	r1, [sp, #4]
    83ae:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    83b2:	9507      	str	r5, [sp, #28]
    83b4:	9208      	str	r2, [sp, #32]
    83b6:	2b00      	cmp	r3, #0
    83b8:	f001 831d 	beq.w	99f6 <d_print_comp.part.10+0x24fe>
    83bc:	685b      	ldr	r3, [r3, #4]
    83be:	781b      	ldrb	r3, [r3, #0]
    83c0:	3b19      	subs	r3, #25
    83c2:	2b02      	cmp	r3, #2
    83c4:	f201 8317 	bhi.w	99f6 <d_print_comp.part.10+0x24fe>
    83c8:	46ab      	mov	fp, r5
    83ca:	f04f 0801 	mov.w	r8, #1
    83ce:	9f02      	ldr	r7, [sp, #8]
    83d0:	9603      	str	r6, [sp, #12]
    83d2:	468a      	mov	sl, r1
    83d4:	460d      	mov	r5, r1
    83d6:	e004      	b.n	83e2 <d_print_comp.part.10+0xeea>
    83d8:	687b      	ldr	r3, [r7, #4]
    83da:	781b      	ldrb	r3, [r3, #0]
    83dc:	3b19      	subs	r3, #25
    83de:	2b02      	cmp	r3, #2
    83e0:	d81d      	bhi.n	841e <d_print_comp.part.10+0xf26>
    83e2:	ea4f 1c08 	mov.w	ip, r8, lsl #4
    83e6:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    83ea:	68bb      	ldr	r3, [r7, #8]
    83ec:	44e1      	add	r9, ip
    83ee:	f1a9 0640 	sub.w	r6, r9, #64	; 0x40
    83f2:	b98b      	cbnz	r3, 8418 <d_print_comp.part.10+0xf20>
    83f4:	f1b8 0f03 	cmp.w	r8, #3
    83f8:	f200 87dc 	bhi.w	93b4 <d_print_comp.part.10+0x1ebc>
    83fc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    8400:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    8404:	f849 5c40 	str.w	r5, [r9, #-64]
    8408:	2101      	movs	r1, #1
    840a:	eb0a 050c 	add.w	r5, sl, ip
    840e:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    8412:	f108 0801 	add.w	r8, r8, #1
    8416:	60b9      	str	r1, [r7, #8]
    8418:	683f      	ldr	r7, [r7, #0]
    841a:	2f00      	cmp	r7, #0
    841c:	d1dc      	bne.n	83d8 <d_print_comp.part.10+0xee0>
    841e:	9e03      	ldr	r6, [sp, #12]
    8420:	f8db 2008 	ldr.w	r2, [fp, #8]
    8424:	4620      	mov	r0, r4
    8426:	4631      	mov	r1, r6
    8428:	f001 fafc 	bl	9a24 <d_print_comp>
    842c:	9b08      	ldr	r3, [sp, #32]
    842e:	9a02      	ldr	r2, [sp, #8]
    8430:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    8434:	465d      	mov	r5, fp
    8436:	2b00      	cmp	r3, #0
    8438:	f47f a8d2 	bne.w	75e0 <d_print_comp.part.10+0xe8>
    843c:	f1b8 0f01 	cmp.w	r8, #1
    8440:	f001 8139 	beq.w	96b6 <d_print_comp.part.10+0x21be>
    8444:	9b01      	ldr	r3, [sp, #4]
    8446:	eb03 1708 	add.w	r7, r3, r8, lsl #4
    844a:	f857 2c0c 	ldr.w	r2, [r7, #-12]
    844e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    8452:	4620      	mov	r0, r4
    8454:	4631      	mov	r1, r6
    8456:	f001 faf1 	bl	9a3c <d_print_mod>
    845a:	f1b8 0f01 	cmp.w	r8, #1
    845e:	f1a7 0710 	sub.w	r7, r7, #16
    8462:	d1f2      	bne.n	844a <d_print_comp.part.10+0xf52>
    8464:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    8468:	4620      	mov	r0, r4
    846a:	4631      	mov	r1, r6
    846c:	1d2a      	adds	r2, r5, #4
    846e:	f001 febb 	bl	a1e8 <d_print_array_type.isra.9>
    8472:	f7ff b8b5 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8476:	06b3      	lsls	r3, r6, #26
    8478:	f100 8548 	bmi.w	8f0c <d_print_comp.part.10+0x1a14>
    847c:	6853      	ldr	r3, [r2, #4]
    847e:	b11b      	cbz	r3, 8488 <d_print_comp.part.10+0xf90>
    8480:	f016 0340 	ands.w	r3, r6, #64	; 0x40
    8484:	f000 879b 	beq.w	93be <d_print_comp.part.10+0x1ec6>
    8488:	f026 0660 	bic.w	r6, r6, #96	; 0x60
    848c:	4620      	mov	r0, r4
    848e:	4631      	mov	r1, r6
    8490:	f105 0208 	add.w	r2, r5, #8
    8494:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    8498:	f001 ff76 	bl	a388 <d_print_function_type.isra.11>
    849c:	f7ff b8a0 	b.w	75e0 <d_print_comp.part.10+0xe8>
    84a0:	4e1a      	ldr	r6, [pc, #104]	; (850c <d_print_comp.part.10+0x1014>)
    84a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    84a6:	f106 090e 	add.w	r9, r6, #14
    84aa:	f04f 0800 	mov.w	r8, #0
    84ae:	e009      	b.n	84c4 <d_print_comp.part.10+0xfcc>
    84b0:	460b      	mov	r3, r1
    84b2:	3101      	adds	r1, #1
    84b4:	454e      	cmp	r6, r9
    84b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    84ba:	54e7      	strb	r7, [r4, r3]
    84bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    84c0:	f000 82f7 	beq.w	8ab2 <d_print_comp.part.10+0x15ba>
    84c4:	29ff      	cmp	r1, #255	; 0xff
    84c6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    84ca:	d1f1      	bne.n	84b0 <d_print_comp.part.10+0xfb8>
    84cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    84d0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    84d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    84d8:	4620      	mov	r0, r4
    84da:	4798      	blx	r3
    84dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    84e0:	3301      	adds	r3, #1
    84e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    84e6:	2101      	movs	r1, #1
    84e8:	2300      	movs	r3, #0
    84ea:	e7e3      	b.n	84b4 <d_print_comp.part.10+0xfbc>
    84ec:	4f08      	ldr	r7, [pc, #32]	; (8510 <d_print_comp.part.10+0x1018>)
    84ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    84f2:	f107 0a16 	add.w	sl, r7, #22
    84f6:	f04f 0900 	mov.w	r9, #0
    84fa:	e018      	b.n	852e <d_print_comp.part.10+0x1036>
    84fc:	000137dc 	.word	0x000137dc
    8500:	0001399c 	.word	0x0001399c
    8504:	000131b8 	.word	0x000131b8
    8508:	0001395f 	.word	0x0001395f
    850c:	00013a3f 	.word	0x00013a3f
    8510:	0001393f 	.word	0x0001393f
    8514:	0001396f 	.word	0x0001396f
    8518:	460b      	mov	r3, r1
    851a:	3101      	adds	r1, #1
    851c:	4557      	cmp	r7, sl
    851e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8522:	f804 8003 	strb.w	r8, [r4, r3]
    8526:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    852a:	f000 82bb 	beq.w	8aa4 <d_print_comp.part.10+0x15ac>
    852e:	29ff      	cmp	r1, #255	; 0xff
    8530:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8534:	d1f0      	bne.n	8518 <d_print_comp.part.10+0x1020>
    8536:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    853a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    853e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8542:	4620      	mov	r0, r4
    8544:	4798      	blx	r3
    8546:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    854a:	3301      	adds	r3, #1
    854c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8550:	2101      	movs	r1, #1
    8552:	2300      	movs	r3, #0
    8554:	e7e2      	b.n	851c <d_print_comp.part.10+0x1024>
    8556:	4fd0      	ldr	r7, [pc, #832]	; (8898 <d_print_comp.part.10+0x13a0>)
    8558:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    855c:	f107 0a1c 	add.w	sl, r7, #28
    8560:	f04f 0900 	mov.w	r9, #0
    8564:	e00a      	b.n	857c <d_print_comp.part.10+0x1084>
    8566:	460b      	mov	r3, r1
    8568:	3101      	adds	r1, #1
    856a:	4557      	cmp	r7, sl
    856c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8570:	f804 8003 	strb.w	r8, [r4, r3]
    8574:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8578:	f000 8361 	beq.w	8c3e <d_print_comp.part.10+0x1746>
    857c:	29ff      	cmp	r1, #255	; 0xff
    857e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8582:	d1f0      	bne.n	8566 <d_print_comp.part.10+0x106e>
    8584:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8588:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    858c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8590:	4620      	mov	r0, r4
    8592:	4798      	blx	r3
    8594:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8598:	3301      	adds	r3, #1
    859a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    859e:	2101      	movs	r1, #1
    85a0:	2300      	movs	r3, #0
    85a2:	e7e2      	b.n	856a <d_print_comp.part.10+0x1072>
    85a4:	4fbd      	ldr	r7, [pc, #756]	; (889c <d_print_comp.part.10+0x13a4>)
    85a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    85aa:	f107 0a08 	add.w	sl, r7, #8
    85ae:	f04f 0900 	mov.w	r9, #0
    85b2:	e00a      	b.n	85ca <d_print_comp.part.10+0x10d2>
    85b4:	460b      	mov	r3, r1
    85b6:	3101      	adds	r1, #1
    85b8:	4557      	cmp	r7, sl
    85ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    85be:	f804 8003 	strb.w	r8, [r4, r3]
    85c2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    85c6:	f000 82b1 	beq.w	8b2c <d_print_comp.part.10+0x1634>
    85ca:	29ff      	cmp	r1, #255	; 0xff
    85cc:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    85d0:	d1f0      	bne.n	85b4 <d_print_comp.part.10+0x10bc>
    85d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    85d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    85da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    85de:	4620      	mov	r0, r4
    85e0:	4798      	blx	r3
    85e2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    85e6:	3301      	adds	r3, #1
    85e8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    85ec:	2101      	movs	r1, #1
    85ee:	2300      	movs	r3, #0
    85f0:	e7e2      	b.n	85b8 <d_print_comp.part.10+0x10c0>
    85f2:	4fab      	ldr	r7, [pc, #684]	; (88a0 <d_print_comp.part.10+0x13a8>)
    85f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    85f8:	f107 0a1d 	add.w	sl, r7, #29
    85fc:	f04f 0900 	mov.w	r9, #0
    8600:	e00a      	b.n	8618 <d_print_comp.part.10+0x1120>
    8602:	460b      	mov	r3, r1
    8604:	3101      	adds	r1, #1
    8606:	4557      	cmp	r7, sl
    8608:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    860c:	f804 8003 	strb.w	r8, [r4, r3]
    8610:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8614:	f000 8340 	beq.w	8c98 <d_print_comp.part.10+0x17a0>
    8618:	29ff      	cmp	r1, #255	; 0xff
    861a:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    861e:	d1f0      	bne.n	8602 <d_print_comp.part.10+0x110a>
    8620:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8624:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8628:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    862c:	4620      	mov	r0, r4
    862e:	4798      	blx	r3
    8630:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8634:	3301      	adds	r3, #1
    8636:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    863a:	2101      	movs	r1, #1
    863c:	2300      	movs	r3, #0
    863e:	e7e2      	b.n	8606 <d_print_comp.part.10+0x110e>
    8640:	4f98      	ldr	r7, [pc, #608]	; (88a4 <d_print_comp.part.10+0x13ac>)
    8642:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8646:	f107 0a09 	add.w	sl, r7, #9
    864a:	f04f 0900 	mov.w	r9, #0
    864e:	e00a      	b.n	8666 <d_print_comp.part.10+0x116e>
    8650:	460b      	mov	r3, r1
    8652:	3101      	adds	r1, #1
    8654:	4557      	cmp	r7, sl
    8656:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    865a:	f804 8003 	strb.w	r8, [r4, r3]
    865e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8662:	f000 81d4 	beq.w	8a0e <d_print_comp.part.10+0x1516>
    8666:	29ff      	cmp	r1, #255	; 0xff
    8668:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    866c:	d1f0      	bne.n	8650 <d_print_comp.part.10+0x1158>
    866e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8672:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8676:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    867a:	4620      	mov	r0, r4
    867c:	4798      	blx	r3
    867e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8682:	3301      	adds	r3, #1
    8684:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8688:	2101      	movs	r1, #1
    868a:	2300      	movs	r3, #0
    868c:	e7e2      	b.n	8654 <d_print_comp.part.10+0x115c>
    868e:	f016 0604 	ands.w	r6, r6, #4
    8692:	6853      	ldr	r3, [r2, #4]
    8694:	f040 834b 	bne.w	8d2e <d_print_comp.part.10+0x1836>
    8698:	685f      	ldr	r7, [r3, #4]
    869a:	f8d3 9000 	ldr.w	r9, [r3]
    869e:	2f00      	cmp	r7, #0
    86a0:	f43e af9e 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    86a4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    86a8:	46b0      	mov	r8, r6
    86aa:	e00a      	b.n	86c2 <d_print_comp.part.10+0x11ca>
    86ac:	460b      	mov	r3, r1
    86ae:	3101      	adds	r1, #1
    86b0:	3601      	adds	r6, #1
    86b2:	42b7      	cmp	r7, r6
    86b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    86b8:	54e5      	strb	r5, [r4, r3]
    86ba:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    86be:	f43e af8f 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    86c2:	29ff      	cmp	r1, #255	; 0xff
    86c4:	f819 5006 	ldrb.w	r5, [r9, r6]
    86c8:	d1f0      	bne.n	86ac <d_print_comp.part.10+0x11b4>
    86ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    86ce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    86d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    86d6:	4620      	mov	r0, r4
    86d8:	4798      	blx	r3
    86da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    86de:	3301      	adds	r3, #1
    86e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    86e4:	2101      	movs	r1, #1
    86e6:	2300      	movs	r3, #0
    86e8:	e7e2      	b.n	86b0 <d_print_comp.part.10+0x11b8>
    86ea:	6850      	ldr	r0, [r2, #4]
    86ec:	7803      	ldrb	r3, [r0, #0]
    86ee:	2b05      	cmp	r3, #5
    86f0:	f000 870b 	beq.w	950a <d_print_comp.part.10+0x2012>
    86f4:	2b23      	cmp	r3, #35	; 0x23
    86f6:	f000 83a5 	beq.w	8e44 <d_print_comp.part.10+0x194c>
    86fa:	782a      	ldrb	r2, [r5, #0]
    86fc:	429a      	cmp	r2, r3
    86fe:	f000 83a1 	beq.w	8e44 <d_print_comp.part.10+0x194c>
    8702:	2b24      	cmp	r3, #36	; 0x24
    8704:	f47e af50 	bne.w	75a8 <d_print_comp.part.10+0xb0>
    8708:	ab16      	add	r3, sp, #88	; 0x58
    870a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    870e:	6842      	ldr	r2, [r0, #4]
    8710:	f843 1d40 	str.w	r1, [r3, #-64]!
    8714:	2000      	movs	r0, #0
    8716:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    871a:	9507      	str	r5, [sp, #28]
    871c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    8720:	9008      	str	r0, [sp, #32]
    8722:	9109      	str	r1, [sp, #36]	; 0x24
    8724:	2a00      	cmp	r2, #0
    8726:	f47e af4d 	bne.w	75c4 <d_print_comp.part.10+0xcc>
    872a:	f7fe bf4a 	b.w	75c2 <d_print_comp.part.10+0xca>
    872e:	4631      	mov	r1, r6
    8730:	6852      	ldr	r2, [r2, #4]
    8732:	f001 f977 	bl	9a24 <d_print_comp>
    8736:	f7fe bf53 	b.w	75e0 <d_print_comp.part.10+0xe8>
    873a:	6857      	ldr	r7, [r2, #4]
    873c:	4d5a      	ldr	r5, [pc, #360]	; (88a8 <d_print_comp.part.10+0x13b0>)
    873e:	f8d7 9008 	ldr.w	r9, [r7, #8]
    8742:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8746:	f105 0a08 	add.w	sl, r5, #8
    874a:	f04f 0800 	mov.w	r8, #0
    874e:	e009      	b.n	8764 <d_print_comp.part.10+0x126c>
    8750:	460b      	mov	r3, r1
    8752:	3101      	adds	r1, #1
    8754:	4555      	cmp	r5, sl
    8756:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    875a:	54e6      	strb	r6, [r4, r3]
    875c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8760:	f000 8163 	beq.w	8a2a <d_print_comp.part.10+0x1532>
    8764:	29ff      	cmp	r1, #255	; 0xff
    8766:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    876a:	d1f1      	bne.n	8750 <d_print_comp.part.10+0x1258>
    876c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8770:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8774:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8778:	4620      	mov	r0, r4
    877a:	4798      	blx	r3
    877c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8780:	3301      	adds	r3, #1
    8782:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8786:	2101      	movs	r1, #1
    8788:	2300      	movs	r3, #0
    878a:	e7e3      	b.n	8754 <d_print_comp.part.10+0x125c>
    878c:	4f45      	ldr	r7, [pc, #276]	; (88a4 <d_print_comp.part.10+0x13ac>)
    878e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8792:	f107 0a09 	add.w	sl, r7, #9
    8796:	f04f 0900 	mov.w	r9, #0
    879a:	e00a      	b.n	87b2 <d_print_comp.part.10+0x12ba>
    879c:	460b      	mov	r3, r1
    879e:	3101      	adds	r1, #1
    87a0:	4557      	cmp	r7, sl
    87a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    87a6:	f804 8003 	strb.w	r8, [r4, r3]
    87aa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    87ae:	f000 8135 	beq.w	8a1c <d_print_comp.part.10+0x1524>
    87b2:	29ff      	cmp	r1, #255	; 0xff
    87b4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    87b8:	d1f0      	bne.n	879c <d_print_comp.part.10+0x12a4>
    87ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    87be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    87c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    87c6:	4620      	mov	r0, r4
    87c8:	4798      	blx	r3
    87ca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    87ce:	3301      	adds	r3, #1
    87d0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    87d4:	2101      	movs	r1, #1
    87d6:	2300      	movs	r3, #0
    87d8:	e7e2      	b.n	87a0 <d_print_comp.part.10+0x12a8>
    87da:	6852      	ldr	r2, [r2, #4]
    87dc:	68af      	ldr	r7, [r5, #8]
    87de:	b112      	cbz	r2, 87e6 <d_print_comp.part.10+0x12ee>
    87e0:	4631      	mov	r1, r6
    87e2:	f001 f91f 	bl	9a24 <d_print_comp>
    87e6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    87ea:	2bff      	cmp	r3, #255	; 0xff
    87ec:	f000 8484 	beq.w	90f8 <d_print_comp.part.10+0x1c00>
    87f0:	1c5a      	adds	r2, r3, #1
    87f2:	257b      	movs	r5, #123	; 0x7b
    87f4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    87f8:	4631      	mov	r1, r6
    87fa:	54e5      	strb	r5, [r4, r3]
    87fc:	463a      	mov	r2, r7
    87fe:	4620      	mov	r0, r4
    8800:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    8804:	f001 f90e 	bl	9a24 <d_print_comp>
    8808:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    880c:	29ff      	cmp	r1, #255	; 0xff
    880e:	f000 8461 	beq.w	90d4 <d_print_comp.part.10+0x1bdc>
    8812:	1c4a      	adds	r2, r1, #1
    8814:	237d      	movs	r3, #125	; 0x7d
    8816:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    881a:	5463      	strb	r3, [r4, r1]
    881c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8820:	f7fe bede 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8824:	2301      	movs	r3, #1
    8826:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    882a:	f7fe bed9 	b.w	75e0 <d_print_comp.part.10+0xe8>
    882e:	687f      	ldr	r7, [r7, #4]
    8830:	2f00      	cmp	r7, #0
    8832:	f000 8699 	beq.w	9568 <d_print_comp.part.10+0x2070>
    8836:	f1b8 0f04 	cmp.w	r8, #4
    883a:	f47f a999 	bne.w	7b70 <d_print_comp.part.10+0x678>
    883e:	2301      	movs	r3, #1
    8840:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    8844:	f7fe becc 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8848:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    884c:	29ff      	cmp	r1, #255	; 0xff
    884e:	f000 870e 	beq.w	966e <d_print_comp.part.10+0x2176>
    8852:	1c4a      	adds	r2, r1, #1
    8854:	232e      	movs	r3, #46	; 0x2e
    8856:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    885a:	5463      	strb	r3, [r4, r1]
    885c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8860:	f8d5 8008 	ldr.w	r8, [r5, #8]
    8864:	f898 3000 	ldrb.w	r3, [r8]
    8868:	2b45      	cmp	r3, #69	; 0x45
    886a:	f000 84c1 	beq.w	91f0 <d_print_comp.part.10+0x1cf8>
    886e:	4620      	mov	r0, r4
    8870:	4631      	mov	r1, r6
    8872:	4642      	mov	r2, r8
    8874:	f001 f8d6 	bl	9a24 <d_print_comp>
    8878:	f7fe beb2 	b.w	75e0 <d_print_comp.part.10+0xe8>
    887c:	4620      	mov	r0, r4
    887e:	4631      	mov	r1, r6
    8880:	686a      	ldr	r2, [r5, #4]
    8882:	f001 f8cf 	bl	9a24 <d_print_comp>
    8886:	f7fe beab 	b.w	75e0 <d_print_comp.part.10+0xe8>
    888a:	4620      	mov	r0, r4
    888c:	4631      	mov	r1, r6
    888e:	686a      	ldr	r2, [r5, #4]
    8890:	f001 f8c8 	bl	9a24 <d_print_comp>
    8894:	f7fe bea4 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8898:	00013a0f 	.word	0x00013a0f
    889c:	00013a2f 	.word	0x00013a2f
    88a0:	000139ef 	.word	0x000139ef
    88a4:	0001397f 	.word	0x0001397f
    88a8:	00013973 	.word	0x00013973
    88ac:	4fbd      	ldr	r7, [pc, #756]	; (8ba4 <d_print_comp.part.10+0x16ac>)
    88ae:	68aa      	ldr	r2, [r5, #8]
    88b0:	4631      	mov	r1, r6
    88b2:	4620      	mov	r0, r4
    88b4:	f001 f8b6 	bl	9a24 <d_print_comp>
    88b8:	f107 0a05 	add.w	sl, r7, #5
    88bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    88c0:	f04f 0900 	mov.w	r9, #0
    88c4:	e009      	b.n	88da <d_print_comp.part.10+0x13e2>
    88c6:	460b      	mov	r3, r1
    88c8:	3101      	adds	r1, #1
    88ca:	4557      	cmp	r7, sl
    88cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    88d0:	f804 8003 	strb.w	r8, [r4, r3]
    88d4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    88d8:	d013      	beq.n	8902 <d_print_comp.part.10+0x140a>
    88da:	29ff      	cmp	r1, #255	; 0xff
    88dc:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    88e0:	d1f1      	bne.n	88c6 <d_print_comp.part.10+0x13ce>
    88e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    88e6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    88ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    88ee:	4620      	mov	r0, r4
    88f0:	4798      	blx	r3
    88f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    88f6:	3301      	adds	r3, #1
    88f8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    88fc:	2101      	movs	r1, #1
    88fe:	2300      	movs	r3, #0
    8900:	e7e3      	b.n	88ca <d_print_comp.part.10+0x13d2>
    8902:	4620      	mov	r0, r4
    8904:	4631      	mov	r1, r6
    8906:	686a      	ldr	r2, [r5, #4]
    8908:	f001 f88c 	bl	9a24 <d_print_comp>
    890c:	f7fe be68 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8910:	4620      	mov	r0, r4
    8912:	4631      	mov	r1, r6
    8914:	686a      	ldr	r2, [r5, #4]
    8916:	f001 f885 	bl	9a24 <d_print_comp>
    891a:	f7fe be61 	b.w	75e0 <d_print_comp.part.10+0xe8>
    891e:	4620      	mov	r0, r4
    8920:	4631      	mov	r1, r6
    8922:	686a      	ldr	r2, [r5, #4]
    8924:	f001 f87e 	bl	9a24 <d_print_comp>
    8928:	f7fe be5a 	b.w	75e0 <d_print_comp.part.10+0xe8>
    892c:	4620      	mov	r0, r4
    892e:	4631      	mov	r1, r6
    8930:	686a      	ldr	r2, [r5, #4]
    8932:	f001 f877 	bl	9a24 <d_print_comp>
    8936:	f7fe be53 	b.w	75e0 <d_print_comp.part.10+0xe8>
    893a:	4620      	mov	r0, r4
    893c:	4631      	mov	r1, r6
    893e:	686a      	ldr	r2, [r5, #4]
    8940:	f001 f870 	bl	9a24 <d_print_comp>
    8944:	f7fe be4c 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8948:	4620      	mov	r0, r4
    894a:	4631      	mov	r1, r6
    894c:	686a      	ldr	r2, [r5, #4]
    894e:	f001 f869 	bl	9a24 <d_print_comp>
    8952:	f7fe be45 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8956:	4f94      	ldr	r7, [pc, #592]	; (8ba8 <d_print_comp.part.10+0x16b0>)
    8958:	686a      	ldr	r2, [r5, #4]
    895a:	4631      	mov	r1, r6
    895c:	4620      	mov	r0, r4
    895e:	f001 f861 	bl	9a24 <d_print_comp>
    8962:	f107 0a04 	add.w	sl, r7, #4
    8966:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    896a:	f04f 0900 	mov.w	r9, #0
    896e:	e009      	b.n	8984 <d_print_comp.part.10+0x148c>
    8970:	460b      	mov	r3, r1
    8972:	3101      	adds	r1, #1
    8974:	4557      	cmp	r7, sl
    8976:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    897a:	f804 8003 	strb.w	r8, [r4, r3]
    897e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8982:	d01a      	beq.n	89ba <d_print_comp.part.10+0x14c2>
    8984:	29ff      	cmp	r1, #255	; 0xff
    8986:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    898a:	d1f1      	bne.n	8970 <d_print_comp.part.10+0x1478>
    898c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8990:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8994:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8998:	4620      	mov	r0, r4
    899a:	4798      	blx	r3
    899c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    89a0:	3301      	adds	r3, #1
    89a2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    89a6:	2101      	movs	r1, #1
    89a8:	2300      	movs	r3, #0
    89aa:	e7e3      	b.n	8974 <d_print_comp.part.10+0x147c>
    89ac:	4620      	mov	r0, r4
    89ae:	4631      	mov	r1, r6
    89b0:	686a      	ldr	r2, [r5, #4]
    89b2:	f001 f837 	bl	9a24 <d_print_comp>
    89b6:	f7fe be13 	b.w	75e0 <d_print_comp.part.10+0xe8>
    89ba:	4620      	mov	r0, r4
    89bc:	4631      	mov	r1, r6
    89be:	68aa      	ldr	r2, [r5, #8]
    89c0:	f001 f830 	bl	9a24 <d_print_comp>
    89c4:	f7fe be0c 	b.w	75e0 <d_print_comp.part.10+0xe8>
    89c8:	4620      	mov	r0, r4
    89ca:	4631      	mov	r1, r6
    89cc:	686a      	ldr	r2, [r5, #4]
    89ce:	f001 f829 	bl	9a24 <d_print_comp>
    89d2:	f7fe be05 	b.w	75e0 <d_print_comp.part.10+0xe8>
    89d6:	4620      	mov	r0, r4
    89d8:	4631      	mov	r1, r6
    89da:	686a      	ldr	r2, [r5, #4]
    89dc:	f001 f822 	bl	9a24 <d_print_comp>
    89e0:	f7fe bdfe 	b.w	75e0 <d_print_comp.part.10+0xe8>
    89e4:	4620      	mov	r0, r4
    89e6:	4631      	mov	r1, r6
    89e8:	686a      	ldr	r2, [r5, #4]
    89ea:	f001 f81b 	bl	9a24 <d_print_comp>
    89ee:	f7fe bdf7 	b.w	75e0 <d_print_comp.part.10+0xe8>
    89f2:	4620      	mov	r0, r4
    89f4:	4631      	mov	r1, r6
    89f6:	686a      	ldr	r2, [r5, #4]
    89f8:	f001 f814 	bl	9a24 <d_print_comp>
    89fc:	f7fe bdf0 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8a00:	4620      	mov	r0, r4
    8a02:	4631      	mov	r1, r6
    8a04:	686a      	ldr	r2, [r5, #4]
    8a06:	f001 f80d 	bl	9a24 <d_print_comp>
    8a0a:	f7fe bde9 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8a0e:	4620      	mov	r0, r4
    8a10:	4631      	mov	r1, r6
    8a12:	1d2a      	adds	r2, r5, #4
    8a14:	f001 fda4 	bl	a560 <d_print_cast.isra.12>
    8a18:	f7fe bde2 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8a1c:	4620      	mov	r0, r4
    8a1e:	4631      	mov	r1, r6
    8a20:	68aa      	ldr	r2, [r5, #8]
    8a22:	f000 ffff 	bl	9a24 <d_print_comp>
    8a26:	f7fe bddb 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8a2a:	687d      	ldr	r5, [r7, #4]
    8a2c:	782b      	ldrb	r3, [r5, #0]
    8a2e:	3b61      	subs	r3, #97	; 0x61
    8a30:	2b19      	cmp	r3, #25
    8a32:	f240 82a4 	bls.w	8f7e <d_print_comp.part.10+0x1a86>
    8a36:	eb05 0309 	add.w	r3, r5, r9
    8a3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    8a3e:	2b20      	cmp	r3, #32
    8a40:	bf0c      	ite	eq
    8a42:	f109 37ff 	addeq.w	r7, r9, #4294967295	; 0xffffffff
    8a46:	464f      	movne	r7, r9
    8a48:	2f00      	cmp	r7, #0
    8a4a:	f43e adc9 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    8a4e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8a52:	442f      	add	r7, r5
    8a54:	f04f 0800 	mov.w	r8, #0
    8a58:	e009      	b.n	8a6e <d_print_comp.part.10+0x1576>
    8a5a:	460b      	mov	r3, r1
    8a5c:	3101      	adds	r1, #1
    8a5e:	42bd      	cmp	r5, r7
    8a60:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8a64:	54e6      	strb	r6, [r4, r3]
    8a66:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8a6a:	f43e adb9 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    8a6e:	29ff      	cmp	r1, #255	; 0xff
    8a70:	f815 6b01 	ldrb.w	r6, [r5], #1
    8a74:	d1f1      	bne.n	8a5a <d_print_comp.part.10+0x1562>
    8a76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8a7a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8a7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8a82:	4620      	mov	r0, r4
    8a84:	4798      	blx	r3
    8a86:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8a8a:	3301      	adds	r3, #1
    8a8c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8a90:	2101      	movs	r1, #1
    8a92:	2300      	movs	r3, #0
    8a94:	e7e3      	b.n	8a5e <d_print_comp.part.10+0x1566>
    8a96:	4620      	mov	r0, r4
    8a98:	4631      	mov	r1, r6
    8a9a:	686a      	ldr	r2, [r5, #4]
    8a9c:	f000 ffc2 	bl	9a24 <d_print_comp>
    8aa0:	f7fe bd9e 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8aa4:	4620      	mov	r0, r4
    8aa6:	4631      	mov	r1, r6
    8aa8:	686a      	ldr	r2, [r5, #4]
    8aaa:	f000 ffbb 	bl	9a24 <d_print_comp>
    8aae:	f7fe bd97 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8ab2:	686a      	ldr	r2, [r5, #4]
    8ab4:	493d      	ldr	r1, [pc, #244]	; (8bac <d_print_comp.part.10+0x16b4>)
    8ab6:	3201      	adds	r2, #1
    8ab8:	a806      	add	r0, sp, #24
    8aba:	f005 ff27 	bl	e90c <sprintf>
    8abe:	a806      	add	r0, sp, #24
    8ac0:	f7f9 fdec 	bl	269c <strlen>
    8ac4:	b320      	cbz	r0, 8b10 <d_print_comp.part.10+0x1618>
    8ac6:	f10d 0517 	add.w	r5, sp, #23
    8aca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8ace:	182f      	adds	r7, r5, r0
    8ad0:	f04f 0800 	mov.w	r8, #0
    8ad4:	e008      	b.n	8ae8 <d_print_comp.part.10+0x15f0>
    8ad6:	460b      	mov	r3, r1
    8ad8:	3101      	adds	r1, #1
    8ada:	42bd      	cmp	r5, r7
    8adc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8ae0:	54e6      	strb	r6, [r4, r3]
    8ae2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8ae6:	d015      	beq.n	8b14 <d_print_comp.part.10+0x161c>
    8ae8:	29ff      	cmp	r1, #255	; 0xff
    8aea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8aee:	d1f2      	bne.n	8ad6 <d_print_comp.part.10+0x15de>
    8af0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8af4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8af8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8afc:	4620      	mov	r0, r4
    8afe:	4798      	blx	r3
    8b00:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8b04:	3301      	adds	r3, #1
    8b06:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8b0a:	2101      	movs	r1, #1
    8b0c:	2300      	movs	r3, #0
    8b0e:	e7e4      	b.n	8ada <d_print_comp.part.10+0x15e2>
    8b10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8b14:	29ff      	cmp	r1, #255	; 0xff
    8b16:	f000 8302 	beq.w	911e <d_print_comp.part.10+0x1c26>
    8b1a:	1c4a      	adds	r2, r1, #1
    8b1c:	237d      	movs	r3, #125	; 0x7d
    8b1e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8b22:	5463      	strb	r3, [r4, r1]
    8b24:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8b28:	f7fe bd5a 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8b2c:	4631      	mov	r1, r6
    8b2e:	4e20      	ldr	r6, [pc, #128]	; (8bb0 <d_print_comp.part.10+0x16b8>)
    8b30:	686a      	ldr	r2, [r5, #4]
    8b32:	4620      	mov	r0, r4
    8b34:	f000 ff76 	bl	9a24 <d_print_comp>
    8b38:	f106 0902 	add.w	r9, r6, #2
    8b3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8b40:	f04f 0800 	mov.w	r8, #0
    8b44:	e008      	b.n	8b58 <d_print_comp.part.10+0x1660>
    8b46:	460b      	mov	r3, r1
    8b48:	3101      	adds	r1, #1
    8b4a:	454e      	cmp	r6, r9
    8b4c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8b50:	54e7      	strb	r7, [r4, r3]
    8b52:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    8b56:	d013      	beq.n	8b80 <d_print_comp.part.10+0x1688>
    8b58:	29ff      	cmp	r1, #255	; 0xff
    8b5a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    8b5e:	d1f2      	bne.n	8b46 <d_print_comp.part.10+0x164e>
    8b60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8b64:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8b68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8b6c:	4620      	mov	r0, r4
    8b6e:	4798      	blx	r3
    8b70:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8b74:	3301      	adds	r3, #1
    8b76:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8b7a:	2101      	movs	r1, #1
    8b7c:	2300      	movs	r3, #0
    8b7e:	e7e4      	b.n	8b4a <d_print_comp.part.10+0x1652>
    8b80:	68aa      	ldr	r2, [r5, #8]
    8b82:	490a      	ldr	r1, [pc, #40]	; (8bac <d_print_comp.part.10+0x16b4>)
    8b84:	3201      	adds	r2, #1
    8b86:	a806      	add	r0, sp, #24
    8b88:	f005 fec0 	bl	e90c <sprintf>
    8b8c:	a806      	add	r0, sp, #24
    8b8e:	f7f9 fd85 	bl	269c <strlen>
    8b92:	b360      	cbz	r0, 8bee <d_print_comp.part.10+0x16f6>
    8b94:	f10d 0517 	add.w	r5, sp, #23
    8b98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8b9c:	182f      	adds	r7, r5, r0
    8b9e:	f04f 0800 	mov.w	r8, #0
    8ba2:	e010      	b.n	8bc6 <d_print_comp.part.10+0x16ce>
    8ba4:	00013907 	.word	0x00013907
    8ba8:	00013843 	.word	0x00013843
    8bac:	000137fc 	.word	0x000137fc
    8bb0:	00013a3b 	.word	0x00013a3b
    8bb4:	460b      	mov	r3, r1
    8bb6:	3101      	adds	r1, #1
    8bb8:	42bd      	cmp	r5, r7
    8bba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8bbe:	54e6      	strb	r6, [r4, r3]
    8bc0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8bc4:	d015      	beq.n	8bf2 <d_print_comp.part.10+0x16fa>
    8bc6:	29ff      	cmp	r1, #255	; 0xff
    8bc8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8bcc:	d1f2      	bne.n	8bb4 <d_print_comp.part.10+0x16bc>
    8bce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8bd2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8bd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8bda:	4620      	mov	r0, r4
    8bdc:	4798      	blx	r3
    8bde:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8be2:	3301      	adds	r3, #1
    8be4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8be8:	2101      	movs	r1, #1
    8bea:	2300      	movs	r3, #0
    8bec:	e7e4      	b.n	8bb8 <d_print_comp.part.10+0x16c0>
    8bee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8bf2:	29ff      	cmp	r1, #255	; 0xff
    8bf4:	f000 8332 	beq.w	925c <d_print_comp.part.10+0x1d64>
    8bf8:	1c4a      	adds	r2, r1, #1
    8bfa:	237d      	movs	r3, #125	; 0x7d
    8bfc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8c00:	5463      	strb	r3, [r4, r1]
    8c02:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8c06:	f7fe bceb 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8c0a:	4620      	mov	r0, r4
    8c0c:	4631      	mov	r1, r6
    8c0e:	686a      	ldr	r2, [r5, #4]
    8c10:	f000 ff08 	bl	9a24 <d_print_comp>
    8c14:	f7fe bce4 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8c18:	4631      	mov	r1, r6
    8c1a:	686a      	ldr	r2, [r5, #4]
    8c1c:	4620      	mov	r0, r4
    8c1e:	f000 ff01 	bl	9a24 <d_print_comp>
    8c22:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8c26:	29ff      	cmp	r1, #255	; 0xff
    8c28:	f000 828a 	beq.w	9140 <d_print_comp.part.10+0x1c48>
    8c2c:	1c4a      	adds	r2, r1, #1
    8c2e:	2329      	movs	r3, #41	; 0x29
    8c30:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8c34:	5463      	strb	r3, [r4, r1]
    8c36:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8c3a:	f7fe bcd1 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8c3e:	4620      	mov	r0, r4
    8c40:	4631      	mov	r1, r6
    8c42:	686a      	ldr	r2, [r5, #4]
    8c44:	f000 feee 	bl	9a24 <d_print_comp>
    8c48:	f7fe bcca 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8c4c:	4631      	mov	r1, r6
    8c4e:	68aa      	ldr	r2, [r5, #8]
    8c50:	4620      	mov	r0, r4
    8c52:	f000 fee7 	bl	9a24 <d_print_comp>
    8c56:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8c5a:	29ff      	cmp	r1, #255	; 0xff
    8c5c:	f000 830f 	beq.w	927e <d_print_comp.part.10+0x1d86>
    8c60:	1c4a      	adds	r2, r1, #1
    8c62:	235d      	movs	r3, #93	; 0x5d
    8c64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8c68:	5463      	strb	r3, [r4, r1]
    8c6a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8c6e:	f7fe bcb7 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8c72:	4631      	mov	r1, r6
    8c74:	68aa      	ldr	r2, [r5, #8]
    8c76:	4620      	mov	r0, r4
    8c78:	f000 fed4 	bl	9a24 <d_print_comp>
    8c7c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8c80:	29ff      	cmp	r1, #255	; 0xff
    8c82:	f000 826e 	beq.w	9162 <d_print_comp.part.10+0x1c6a>
    8c86:	1c4a      	adds	r2, r1, #1
    8c88:	235d      	movs	r3, #93	; 0x5d
    8c8a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8c8e:	5463      	strb	r3, [r4, r1]
    8c90:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8c94:	f7fe bca4 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8c98:	4620      	mov	r0, r4
    8c9a:	4631      	mov	r1, r6
    8c9c:	686a      	ldr	r2, [r5, #4]
    8c9e:	f000 fec1 	bl	9a24 <d_print_comp>
    8ca2:	f7fe bc9d 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8ca6:	68aa      	ldr	r2, [r5, #8]
    8ca8:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
    8cac:	460f      	mov	r7, r1
    8cae:	4620      	mov	r0, r4
    8cb0:	4631      	mov	r1, r6
    8cb2:	f000 feb7 	bl	9a24 <d_print_comp>
    8cb6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8cba:	429d      	cmp	r5, r3
    8cbc:	f47e ac90 	bne.w	75e0 <d_print_comp.part.10+0xe8>
    8cc0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    8cc4:	42bb      	cmp	r3, r7
    8cc6:	f47e ac8b 	bne.w	75e0 <d_print_comp.part.10+0xe8>
    8cca:	3f02      	subs	r7, #2
    8ccc:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    8cd0:	f7fe bc86 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8cd4:	686d      	ldr	r5, [r5, #4]
    8cd6:	9501      	str	r5, [sp, #4]
    8cd8:	f1b8 0f00 	cmp.w	r8, #0
    8cdc:	f47f a83b 	bne.w	7d56 <d_print_comp.part.10+0x85e>
    8ce0:	f7fe bc7e 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8ce4:	2700      	movs	r7, #0
    8ce6:	f7ff ba58 	b.w	819a <d_print_comp.part.10+0xca2>
    8cea:	4dab      	ldr	r5, [pc, #684]	; (8f98 <d_print_comp.part.10+0x1aa0>)
    8cec:	4698      	mov	r8, r3
    8cee:	1daf      	adds	r7, r5, #6
    8cf0:	e009      	b.n	8d06 <d_print_comp.part.10+0x180e>
    8cf2:	460b      	mov	r3, r1
    8cf4:	3101      	adds	r1, #1
    8cf6:	42bd      	cmp	r5, r7
    8cf8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8cfc:	54e6      	strb	r6, [r4, r3]
    8cfe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8d02:	f43e ac6d 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    8d06:	29ff      	cmp	r1, #255	; 0xff
    8d08:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8d0c:	d1f1      	bne.n	8cf2 <d_print_comp.part.10+0x17fa>
    8d0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8d12:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8d16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8d1a:	4620      	mov	r0, r4
    8d1c:	4798      	blx	r3
    8d1e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8d22:	3301      	adds	r3, #1
    8d24:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8d28:	2101      	movs	r1, #1
    8d2a:	2300      	movs	r3, #0
    8d2c:	e7e3      	b.n	8cf6 <d_print_comp.part.10+0x17fe>
    8d2e:	68df      	ldr	r7, [r3, #12]
    8d30:	f8d3 9008 	ldr.w	r9, [r3, #8]
    8d34:	2f00      	cmp	r7, #0
    8d36:	f43e ac53 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    8d3a:	2500      	movs	r5, #0
    8d3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8d40:	46a8      	mov	r8, r5
    8d42:	e00a      	b.n	8d5a <d_print_comp.part.10+0x1862>
    8d44:	460b      	mov	r3, r1
    8d46:	3101      	adds	r1, #1
    8d48:	3501      	adds	r5, #1
    8d4a:	42af      	cmp	r7, r5
    8d4c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8d50:	54e6      	strb	r6, [r4, r3]
    8d52:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8d56:	f43e ac43 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    8d5a:	29ff      	cmp	r1, #255	; 0xff
    8d5c:	f819 6005 	ldrb.w	r6, [r9, r5]
    8d60:	d1f0      	bne.n	8d44 <d_print_comp.part.10+0x184c>
    8d62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8d66:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8d6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8d6e:	4620      	mov	r0, r4
    8d70:	4798      	blx	r3
    8d72:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8d76:	3301      	adds	r3, #1
    8d78:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8d7c:	2101      	movs	r1, #1
    8d7e:	2300      	movs	r3, #0
    8d80:	e7e2      	b.n	8d48 <d_print_comp.part.10+0x1850>
    8d82:	4d86      	ldr	r5, [pc, #536]	; (8f9c <d_print_comp.part.10+0x1aa4>)
    8d84:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8d88:	f105 0906 	add.w	r9, r5, #6
    8d8c:	f04f 0800 	mov.w	r8, #0
    8d90:	e008      	b.n	8da4 <d_print_comp.part.10+0x18ac>
    8d92:	460b      	mov	r3, r1
    8d94:	3101      	adds	r1, #1
    8d96:	454d      	cmp	r5, r9
    8d98:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8d9c:	54e6      	strb	r6, [r4, r3]
    8d9e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8da2:	d013      	beq.n	8dcc <d_print_comp.part.10+0x18d4>
    8da4:	29ff      	cmp	r1, #255	; 0xff
    8da6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8daa:	d1f2      	bne.n	8d92 <d_print_comp.part.10+0x189a>
    8dac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8db0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8db4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8db8:	4620      	mov	r0, r4
    8dba:	4798      	blx	r3
    8dbc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8dc0:	3301      	adds	r3, #1
    8dc2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8dc6:	2101      	movs	r1, #1
    8dc8:	2300      	movs	r3, #0
    8dca:	e7e4      	b.n	8d96 <d_print_comp.part.10+0x189e>
    8dcc:	463a      	mov	r2, r7
    8dce:	a806      	add	r0, sp, #24
    8dd0:	4973      	ldr	r1, [pc, #460]	; (8fa0 <d_print_comp.part.10+0x1aa8>)
    8dd2:	f005 fd9b 	bl	e90c <sprintf>
    8dd6:	a806      	add	r0, sp, #24
    8dd8:	f7f9 fc60 	bl	269c <strlen>
    8ddc:	b320      	cbz	r0, 8e28 <d_print_comp.part.10+0x1930>
    8dde:	f10d 0517 	add.w	r5, sp, #23
    8de2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8de6:	182f      	adds	r7, r5, r0
    8de8:	f04f 0800 	mov.w	r8, #0
    8dec:	e008      	b.n	8e00 <d_print_comp.part.10+0x1908>
    8dee:	460b      	mov	r3, r1
    8df0:	3101      	adds	r1, #1
    8df2:	42bd      	cmp	r5, r7
    8df4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8df8:	54e6      	strb	r6, [r4, r3]
    8dfa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    8dfe:	d015      	beq.n	8e2c <d_print_comp.part.10+0x1934>
    8e00:	29ff      	cmp	r1, #255	; 0xff
    8e02:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    8e06:	d1f2      	bne.n	8dee <d_print_comp.part.10+0x18f6>
    8e08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8e0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    8e10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8e14:	4620      	mov	r0, r4
    8e16:	4798      	blx	r3
    8e18:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8e1c:	3301      	adds	r3, #1
    8e1e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8e22:	2101      	movs	r1, #1
    8e24:	2300      	movs	r3, #0
    8e26:	e7e4      	b.n	8df2 <d_print_comp.part.10+0x18fa>
    8e28:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8e2c:	29ff      	cmp	r1, #255	; 0xff
    8e2e:	f000 8445 	beq.w	96bc <d_print_comp.part.10+0x21c4>
    8e32:	1c4a      	adds	r2, r1, #1
    8e34:	237d      	movs	r3, #125	; 0x7d
    8e36:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8e3a:	5463      	strb	r3, [r4, r1]
    8e3c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8e40:	f7fe bbce 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8e44:	4605      	mov	r5, r0
    8e46:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    8e4a:	f7fe bbaf 	b.w	75ac <d_print_comp.part.10+0xb4>
    8e4e:	6852      	ldr	r2, [r2, #4]
    8e50:	6853      	ldr	r3, [r2, #4]
    8e52:	6819      	ldr	r1, [r3, #0]
    8e54:	7848      	ldrb	r0, [r1, #1]
    8e56:	2863      	cmp	r0, #99	; 0x63
    8e58:	f000 83e2 	beq.w	9620 <d_print_comp.part.10+0x2128>
    8e5c:	7811      	ldrb	r1, [r2, #0]
    8e5e:	2931      	cmp	r1, #49	; 0x31
    8e60:	f000 844e 	beq.w	9700 <d_print_comp.part.10+0x2208>
    8e64:	6853      	ldr	r3, [r2, #4]
    8e66:	494f      	ldr	r1, [pc, #316]	; (8fa4 <d_print_comp.part.10+0x1aac>)
    8e68:	6818      	ldr	r0, [r3, #0]
    8e6a:	f005 fd75 	bl	e958 <strcmp>
    8e6e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    8e72:	b918      	cbnz	r0, 8e7c <d_print_comp.part.10+0x1984>
    8e74:	7813      	ldrb	r3, [r2, #0]
    8e76:	2b03      	cmp	r3, #3
    8e78:	f000 845b 	beq.w	9732 <d_print_comp.part.10+0x223a>
    8e7c:	4620      	mov	r0, r4
    8e7e:	4631      	mov	r1, r6
    8e80:	f001 fc6c 	bl	a75c <d_print_subexpr>
    8e84:	f8d5 8004 	ldr.w	r8, [r5, #4]
    8e88:	4947      	ldr	r1, [pc, #284]	; (8fa8 <d_print_comp.part.10+0x1ab0>)
    8e8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8e8e:	681f      	ldr	r7, [r3, #0]
    8e90:	4638      	mov	r0, r7
    8e92:	f005 fd61 	bl	e958 <strcmp>
    8e96:	2800      	cmp	r0, #0
    8e98:	f000 8422 	beq.w	96e0 <d_print_comp.part.10+0x21e8>
    8e9c:	4638      	mov	r0, r7
    8e9e:	4941      	ldr	r1, [pc, #260]	; (8fa4 <d_print_comp.part.10+0x1aac>)
    8ea0:	f005 fd5a 	bl	e958 <strcmp>
    8ea4:	2800      	cmp	r0, #0
    8ea6:	f040 843d 	bne.w	9724 <d_print_comp.part.10+0x222c>
    8eaa:	68ab      	ldr	r3, [r5, #8]
    8eac:	4631      	mov	r1, r6
    8eae:	689a      	ldr	r2, [r3, #8]
    8eb0:	4620      	mov	r0, r4
    8eb2:	f001 fc53 	bl	a75c <d_print_subexpr>
    8eb6:	686b      	ldr	r3, [r5, #4]
    8eb8:	781a      	ldrb	r2, [r3, #0]
    8eba:	2a31      	cmp	r2, #49	; 0x31
    8ebc:	f47e ab90 	bne.w	75e0 <d_print_comp.part.10+0xe8>
    8ec0:	685b      	ldr	r3, [r3, #4]
    8ec2:	689a      	ldr	r2, [r3, #8]
    8ec4:	2a01      	cmp	r2, #1
    8ec6:	f47e ab8b 	bne.w	75e0 <d_print_comp.part.10+0xe8>
    8eca:	685b      	ldr	r3, [r3, #4]
    8ecc:	781b      	ldrb	r3, [r3, #0]
    8ece:	2b3e      	cmp	r3, #62	; 0x3e
    8ed0:	f47e ab86 	bne.w	75e0 <d_print_comp.part.10+0xe8>
    8ed4:	4620      	mov	r0, r4
    8ed6:	2129      	movs	r1, #41	; 0x29
    8ed8:	f7fc fc14 	bl	5704 <d_append_char>
    8edc:	f7fe bb80 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8ee0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    8ee4:	f7ff ba11 	b.w	830a <d_print_comp.part.10+0xe12>
    8ee8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    8eec:	e002      	b.n	8ef4 <d_print_comp.part.10+0x19fc>
    8eee:	7802      	ldrb	r2, [r0, #0]
    8ef0:	2a2f      	cmp	r2, #47	; 0x2f
    8ef2:	d106      	bne.n	8f02 <d_print_comp.part.10+0x1a0a>
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	f340 8576 	ble.w	99e6 <d_print_comp.part.10+0x24ee>
    8efa:	6880      	ldr	r0, [r0, #8]
    8efc:	3b01      	subs	r3, #1
    8efe:	2800      	cmp	r0, #0
    8f00:	d1f5      	bne.n	8eee <d_print_comp.part.10+0x19f6>
    8f02:	2301      	movs	r3, #1
    8f04:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    8f08:	f7fe bb6a 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8f0c:	f026 0660 	bic.w	r6, r6, #96	; 0x60
    8f10:	3208      	adds	r2, #8
    8f12:	4631      	mov	r1, r6
    8f14:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    8f18:	f001 fa36 	bl	a388 <d_print_function_type.isra.11>
    8f1c:	686a      	ldr	r2, [r5, #4]
    8f1e:	2a00      	cmp	r2, #0
    8f20:	f43e ab5e 	beq.w	75e0 <d_print_comp.part.10+0xe8>
    8f24:	4620      	mov	r0, r4
    8f26:	4631      	mov	r1, r6
    8f28:	f000 fd7c 	bl	9a24 <d_print_comp>
    8f2c:	f7fe bb58 	b.w	75e0 <d_print_comp.part.10+0xe8>
    8f30:	4f1e      	ldr	r7, [pc, #120]	; (8fac <d_print_comp.part.10+0x1ab4>)
    8f32:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    8f36:	f107 0a05 	add.w	sl, r7, #5
    8f3a:	f04f 0900 	mov.w	r9, #0
    8f3e:	e00a      	b.n	8f56 <d_print_comp.part.10+0x1a5e>
    8f40:	460b      	mov	r3, r1
    8f42:	3101      	adds	r1, #1
    8f44:	4557      	cmp	r7, sl
    8f46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    8f4a:	f804 8003 	strb.w	r8, [r4, r3]
    8f4e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
    8f52:	f43f a9c4 	beq.w	82de <d_print_comp.part.10+0xde6>
    8f56:	29ff      	cmp	r1, #255	; 0xff
    8f58:	f817 8f01 	ldrb.w	r8, [r7, #1]!
    8f5c:	d1f0      	bne.n	8f40 <d_print_comp.part.10+0x1a48>
    8f5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8f62:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    8f66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    8f6a:	4620      	mov	r0, r4
    8f6c:	4798      	blx	r3
    8f6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8f72:	3301      	adds	r3, #1
    8f74:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8f78:	2101      	movs	r1, #1
    8f7a:	2300      	movs	r3, #0
    8f7c:	e7e2      	b.n	8f44 <d_print_comp.part.10+0x1a4c>
    8f7e:	29ff      	cmp	r1, #255	; 0xff
    8f80:	f000 8421 	beq.w	97c6 <d_print_comp.part.10+0x22ce>
    8f84:	1c4a      	adds	r2, r1, #1
    8f86:	2320      	movs	r3, #32
    8f88:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    8f8c:	5463      	strb	r3, [r4, r1]
    8f8e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    8f92:	687d      	ldr	r5, [r7, #4]
    8f94:	e54f      	b.n	8a36 <d_print_comp.part.10+0x153e>
    8f96:	bf00      	nop
    8f98:	00013967 	.word	0x00013967
    8f9c:	000139e7 	.word	0x000139e7
    8fa0:	000137fc 	.word	0x000137fc
    8fa4:	000137d0 	.word	0x000137d0
    8fa8:	00013994 	.word	0x00013994
    8fac:	00013957 	.word	0x00013957
    8fb0:	687b      	ldr	r3, [r7, #4]
    8fb2:	49c5      	ldr	r1, [pc, #788]	; (92c8 <d_print_comp.part.10+0x1dd0>)
    8fb4:	f8d3 8000 	ldr.w	r8, [r3]
    8fb8:	4640      	mov	r0, r8
    8fba:	f005 fccd 	bl	e958 <strcmp>
    8fbe:	782b      	ldrb	r3, [r5, #0]
    8fc0:	b910      	cbnz	r0, 8fc8 <d_print_comp.part.10+0x1ad0>
    8fc2:	2b03      	cmp	r3, #3
    8fc4:	f000 8411 	beq.w	97ea <d_print_comp.part.10+0x22f2>
    8fc8:	2b37      	cmp	r3, #55	; 0x37
    8fca:	f000 8487 	beq.w	98dc <d_print_comp.part.10+0x23e4>
    8fce:	463a      	mov	r2, r7
    8fd0:	4620      	mov	r0, r4
    8fd2:	4631      	mov	r1, r6
    8fd4:	f001 fb88 	bl	a6e8 <d_print_expr_op>
    8fd8:	f1b8 0f00 	cmp.w	r8, #0
    8fdc:	f43e afec 	beq.w	7fb8 <d_print_comp.part.10+0xac0>
    8fe0:	4640      	mov	r0, r8
    8fe2:	49ba      	ldr	r1, [pc, #744]	; (92cc <d_print_comp.part.10+0x1dd4>)
    8fe4:	f005 fcb8 	bl	e958 <strcmp>
    8fe8:	2800      	cmp	r0, #0
    8fea:	f000 823e 	beq.w	946a <d_print_comp.part.10+0x1f72>
    8fee:	4640      	mov	r0, r8
    8ff0:	49b7      	ldr	r1, [pc, #732]	; (92d0 <d_print_comp.part.10+0x1dd8>)
    8ff2:	f005 fcb1 	bl	e958 <strcmp>
    8ff6:	4607      	mov	r7, r0
    8ff8:	2800      	cmp	r0, #0
    8ffa:	f47e afdd 	bne.w	7fb8 <d_print_comp.part.10+0xac0>
    8ffe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9002:	2bff      	cmp	r3, #255	; 0xff
    9004:	f000 8421 	beq.w	984a <d_print_comp.part.10+0x2352>
    9008:	1c58      	adds	r0, r3, #1
    900a:	2728      	movs	r7, #40	; 0x28
    900c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    9010:	4631      	mov	r1, r6
    9012:	54e7      	strb	r7, [r4, r3]
    9014:	462a      	mov	r2, r5
    9016:	4620      	mov	r0, r4
    9018:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    901c:	f000 fd02 	bl	9a24 <d_print_comp>
    9020:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9024:	29ff      	cmp	r1, #255	; 0xff
    9026:	f000 83ff 	beq.w	9828 <d_print_comp.part.10+0x2330>
    902a:	2329      	movs	r3, #41	; 0x29
    902c:	1c4a      	adds	r2, r1, #1
    902e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9032:	5463      	strb	r3, [r4, r1]
    9034:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9038:	f7fe bad2 	b.w	75e0 <d_print_comp.part.10+0xe8>
    903c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9040:	29ff      	cmp	r1, #255	; 0xff
    9042:	f000 83af 	beq.w	97a4 <d_print_comp.part.10+0x22ac>
    9046:	1c4a      	adds	r2, r1, #1
    9048:	2328      	movs	r3, #40	; 0x28
    904a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    904e:	4620      	mov	r0, r4
    9050:	5463      	strb	r3, [r4, r1]
    9052:	1d3a      	adds	r2, r7, #4
    9054:	4631      	mov	r1, r6
    9056:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    905a:	f001 fa81 	bl	a560 <d_print_cast.isra.12>
    905e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9062:	29ff      	cmp	r1, #255	; 0xff
    9064:	f000 838d 	beq.w	9782 <d_print_comp.part.10+0x228a>
    9068:	1c4a      	adds	r2, r1, #1
    906a:	2329      	movs	r3, #41	; 0x29
    906c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9070:	5463      	strb	r3, [r4, r1]
    9072:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9076:	f7fe bf9f 	b.w	7fb8 <d_print_comp.part.10+0xac0>
    907a:	f04f 0800 	mov.w	r8, #0
    907e:	f804 8007 	strb.w	r8, [r4, r7]
    9082:	4639      	mov	r1, r7
    9084:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    908c:	4620      	mov	r0, r4
    908e:	4798      	blx	r3
    9090:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9094:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    9098:	3301      	adds	r3, #1
    909a:	4647      	mov	r7, r8
    909c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    90a0:	f7ff b8f2 	b.w	8288 <d_print_comp.part.10+0xd90>
    90a4:	4620      	mov	r0, r4
    90a6:	4631      	mov	r1, r6
    90a8:	686a      	ldr	r2, [r5, #4]
    90aa:	f000 fcbb 	bl	9a24 <d_print_comp>
    90ae:	f7fe ba97 	b.w	75e0 <d_print_comp.part.10+0xe8>
    90b2:	2700      	movs	r7, #0
    90b4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    90b8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    90bc:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
    90c0:	4798      	blx	r3
    90c2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    90c6:	3301      	adds	r3, #1
    90c8:	4639      	mov	r1, r7
    90ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    90ce:	2201      	movs	r2, #1
    90d0:	f7fe bd2c 	b.w	7b2c <d_print_comp.part.10+0x634>
    90d4:	2500      	movs	r5, #0
    90d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    90da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    90de:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    90e2:	4620      	mov	r0, r4
    90e4:	4798      	blx	r3
    90e6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    90ea:	3301      	adds	r3, #1
    90ec:	4629      	mov	r1, r5
    90ee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    90f2:	2201      	movs	r2, #1
    90f4:	f7ff bb8e 	b.w	8814 <d_print_comp.part.10+0x131c>
    90f8:	2500      	movs	r5, #0
    90fa:	4619      	mov	r1, r3
    90fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9100:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9104:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9108:	4620      	mov	r0, r4
    910a:	4798      	blx	r3
    910c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9110:	1c5a      	adds	r2, r3, #1
    9112:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9116:	462b      	mov	r3, r5
    9118:	2201      	movs	r2, #1
    911a:	f7ff bb6a 	b.w	87f2 <d_print_comp.part.10+0x12fa>
    911e:	2500      	movs	r5, #0
    9120:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9124:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9128:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    912c:	4620      	mov	r0, r4
    912e:	4798      	blx	r3
    9130:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9134:	3301      	adds	r3, #1
    9136:	4629      	mov	r1, r5
    9138:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    913c:	2201      	movs	r2, #1
    913e:	e4ed      	b.n	8b1c <d_print_comp.part.10+0x1624>
    9140:	2500      	movs	r5, #0
    9142:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9146:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    914a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    914e:	4620      	mov	r0, r4
    9150:	4798      	blx	r3
    9152:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9156:	3301      	adds	r3, #1
    9158:	4629      	mov	r1, r5
    915a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    915e:	2201      	movs	r2, #1
    9160:	e565      	b.n	8c2e <d_print_comp.part.10+0x1736>
    9162:	2500      	movs	r5, #0
    9164:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9168:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    916c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9170:	4620      	mov	r0, r4
    9172:	4798      	blx	r3
    9174:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9178:	3301      	adds	r3, #1
    917a:	4629      	mov	r1, r5
    917c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9180:	2201      	movs	r2, #1
    9182:	e581      	b.n	8c88 <d_print_comp.part.10+0x1790>
    9184:	6856      	ldr	r6, [r2, #4]
    9186:	6897      	ldr	r7, [r2, #8]
    9188:	4437      	add	r7, r6
    918a:	42be      	cmp	r6, r7
    918c:	f4be aa28 	bcs.w	75e0 <d_print_comp.part.10+0xe8>
    9190:	f04f 0800 	mov.w	r8, #0
    9194:	e00d      	b.n	91b2 <d_print_comp.part.10+0x1cba>
    9196:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    919a:	29ff      	cmp	r1, #255	; 0xff
    919c:	d018      	beq.n	91d0 <d_print_comp.part.10+0x1cd8>
    919e:	1c4b      	adds	r3, r1, #1
    91a0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    91a4:	5465      	strb	r5, [r4, r1]
    91a6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    91aa:	3601      	adds	r6, #1
    91ac:	42b7      	cmp	r7, r6
    91ae:	f67e aa17 	bls.w	75e0 <d_print_comp.part.10+0xe8>
    91b2:	1bbb      	subs	r3, r7, r6
    91b4:	2b03      	cmp	r3, #3
    91b6:	7835      	ldrb	r5, [r6, #0]
    91b8:	dded      	ble.n	9196 <d_print_comp.part.10+0x1c9e>
    91ba:	2d5f      	cmp	r5, #95	; 0x5f
    91bc:	d1eb      	bne.n	9196 <d_print_comp.part.10+0x1c9e>
    91be:	7872      	ldrb	r2, [r6, #1]
    91c0:	2a5f      	cmp	r2, #95	; 0x5f
    91c2:	d1e8      	bne.n	9196 <d_print_comp.part.10+0x1c9e>
    91c4:	78b3      	ldrb	r3, [r6, #2]
    91c6:	2b55      	cmp	r3, #85	; 0x55
    91c8:	f000 8350 	beq.w	986c <d_print_comp.part.10+0x2374>
    91cc:	4615      	mov	r5, r2
    91ce:	e7e2      	b.n	9196 <d_print_comp.part.10+0x1c9e>
    91d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    91d4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    91d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    91dc:	4620      	mov	r0, r4
    91de:	4798      	blx	r3
    91e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    91e4:	3301      	adds	r3, #1
    91e6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    91ea:	2100      	movs	r1, #0
    91ec:	2301      	movs	r3, #1
    91ee:	e7d7      	b.n	91a0 <d_print_comp.part.10+0x1ca8>
    91f0:	4d38      	ldr	r5, [pc, #224]	; (92d4 <d_print_comp.part.10+0x1ddc>)
    91f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    91f6:	f105 0a0d 	add.w	sl, r5, #13
    91fa:	f04f 0900 	mov.w	r9, #0
    91fe:	e008      	b.n	9212 <d_print_comp.part.10+0x1d1a>
    9200:	460b      	mov	r3, r1
    9202:	3101      	adds	r1, #1
    9204:	4555      	cmp	r5, sl
    9206:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    920a:	54e7      	strb	r7, [r4, r3]
    920c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9210:	d046      	beq.n	92a0 <d_print_comp.part.10+0x1da8>
    9212:	29ff      	cmp	r1, #255	; 0xff
    9214:	f815 7f01 	ldrb.w	r7, [r5, #1]!
    9218:	d1f2      	bne.n	9200 <d_print_comp.part.10+0x1d08>
    921a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    921e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    9222:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9226:	4620      	mov	r0, r4
    9228:	4798      	blx	r3
    922a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    922e:	3301      	adds	r3, #1
    9230:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9234:	2101      	movs	r1, #1
    9236:	2300      	movs	r3, #0
    9238:	e7e4      	b.n	9204 <d_print_comp.part.10+0x1d0c>
    923a:	2600      	movs	r6, #0
    923c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    9240:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    9244:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    9248:	4798      	blx	r3
    924a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    924e:	3301      	adds	r3, #1
    9250:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9254:	4631      	mov	r1, r6
    9256:	2301      	movs	r3, #1
    9258:	f7fe bf42 	b.w	80e0 <d_print_comp.part.10+0xbe8>
    925c:	2500      	movs	r5, #0
    925e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9262:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9266:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    926a:	4620      	mov	r0, r4
    926c:	4798      	blx	r3
    926e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9272:	3301      	adds	r3, #1
    9274:	4629      	mov	r1, r5
    9276:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    927a:	2201      	movs	r2, #1
    927c:	e4bd      	b.n	8bfa <d_print_comp.part.10+0x1702>
    927e:	2500      	movs	r5, #0
    9280:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9284:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9288:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    928c:	4620      	mov	r0, r4
    928e:	4798      	blx	r3
    9290:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9294:	3301      	adds	r3, #1
    9296:	4629      	mov	r1, r5
    9298:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    929c:	2201      	movs	r2, #1
    929e:	e4e0      	b.n	8c62 <d_print_comp.part.10+0x176a>
    92a0:	f8d8 2008 	ldr.w	r2, [r8, #8]
    92a4:	490c      	ldr	r1, [pc, #48]	; (92d8 <d_print_comp.part.10+0x1de0>)
    92a6:	3201      	adds	r2, #1
    92a8:	a806      	add	r0, sp, #24
    92aa:	f005 fb2f 	bl	e90c <sprintf>
    92ae:	a806      	add	r0, sp, #24
    92b0:	f7f9 f9f4 	bl	269c <strlen>
    92b4:	b378      	cbz	r0, 9316 <d_print_comp.part.10+0x1e1e>
    92b6:	f10d 0517 	add.w	r5, sp, #23
    92ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    92be:	eb05 0a00 	add.w	sl, r5, r0
    92c2:	f04f 0900 	mov.w	r9, #0
    92c6:	e012      	b.n	92ee <d_print_comp.part.10+0x1df6>
    92c8:	0001398c 	.word	0x0001398c
    92cc:	00013990 	.word	0x00013990
    92d0:	00013c78 	.word	0x00013c78
    92d4:	000137eb 	.word	0x000137eb
    92d8:	000137fc 	.word	0x000137fc
    92dc:	460b      	mov	r3, r1
    92de:	3101      	adds	r1, #1
    92e0:	4555      	cmp	r5, sl
    92e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    92e6:	54e7      	strb	r7, [r4, r3]
    92e8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    92ec:	d015      	beq.n	931a <d_print_comp.part.10+0x1e22>
    92ee:	29ff      	cmp	r1, #255	; 0xff
    92f0:	f815 7f01 	ldrb.w	r7, [r5, #1]!
    92f4:	d1f2      	bne.n	92dc <d_print_comp.part.10+0x1de4>
    92f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    92fa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    92fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9302:	4620      	mov	r0, r4
    9304:	4798      	blx	r3
    9306:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    930a:	3301      	adds	r3, #1
    930c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9310:	2101      	movs	r1, #1
    9312:	2300      	movs	r3, #0
    9314:	e7e4      	b.n	92e0 <d_print_comp.part.10+0x1de8>
    9316:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    931a:	4dbd      	ldr	r5, [pc, #756]	; (9610 <d_print_comp.part.10+0x2118>)
    931c:	f04f 0900 	mov.w	r9, #0
    9320:	f105 0a03 	add.w	sl, r5, #3
    9324:	e008      	b.n	9338 <d_print_comp.part.10+0x1e40>
    9326:	460b      	mov	r3, r1
    9328:	3101      	adds	r1, #1
    932a:	4555      	cmp	r5, sl
    932c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9330:	54e7      	strb	r7, [r4, r3]
    9332:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9336:	d013      	beq.n	9360 <d_print_comp.part.10+0x1e68>
    9338:	29ff      	cmp	r1, #255	; 0xff
    933a:	f815 7f01 	ldrb.w	r7, [r5, #1]!
    933e:	d1f2      	bne.n	9326 <d_print_comp.part.10+0x1e2e>
    9340:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9344:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    9348:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    934c:	4620      	mov	r0, r4
    934e:	4798      	blx	r3
    9350:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9354:	3301      	adds	r3, #1
    9356:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    935a:	2101      	movs	r1, #1
    935c:	2300      	movs	r3, #0
    935e:	e7e4      	b.n	932a <d_print_comp.part.10+0x1e32>
    9360:	f8d8 8004 	ldr.w	r8, [r8, #4]
    9364:	f7ff ba83 	b.w	886e <d_print_comp.part.10+0x1376>
    9368:	2500      	movs	r5, #0
    936a:	4619      	mov	r1, r3
    936c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9370:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9374:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9378:	4620      	mov	r0, r4
    937a:	4798      	blx	r3
    937c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9380:	1c5a      	adds	r2, r3, #1
    9382:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9386:	462b      	mov	r3, r5
    9388:	2101      	movs	r1, #1
    938a:	f7fe bded 	b.w	7f68 <d_print_comp.part.10+0xa70>
    938e:	2700      	movs	r7, #0
    9390:	4619      	mov	r1, r3
    9392:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9396:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    939a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    939e:	4620      	mov	r0, r4
    93a0:	4798      	blx	r3
    93a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    93a6:	1c5a      	adds	r2, r3, #1
    93a8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    93ac:	463b      	mov	r3, r7
    93ae:	2101      	movs	r1, #1
    93b0:	f7fe bdc4 	b.w	7f3c <d_print_comp.part.10+0xa44>
    93b4:	2301      	movs	r3, #1
    93b6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    93ba:	f7fe b911 	b.w	75e0 <d_print_comp.part.10+0xe8>
    93be:	aa16      	add	r2, sp, #88	; 0x58
    93c0:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    93c4:	f842 1d40 	str.w	r1, [r2, #-64]!
    93c8:	f026 0660 	bic.w	r6, r6, #96	; 0x60
    93cc:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    93d0:	686a      	ldr	r2, [r5, #4]
    93d2:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
    93d6:	9308      	str	r3, [sp, #32]
    93d8:	4631      	mov	r1, r6
    93da:	4620      	mov	r0, r4
    93dc:	9507      	str	r5, [sp, #28]
    93de:	9709      	str	r7, [sp, #36]	; 0x24
    93e0:	f000 fb20 	bl	9a24 <d_print_comp>
    93e4:	9b08      	ldr	r3, [sp, #32]
    93e6:	9a06      	ldr	r2, [sp, #24]
    93e8:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    93ec:	2b00      	cmp	r3, #0
    93ee:	f47e a8f7 	bne.w	75e0 <d_print_comp.part.10+0xe8>
    93f2:	4620      	mov	r0, r4
    93f4:	2120      	movs	r1, #32
    93f6:	f7fc f985 	bl	5704 <d_append_char>
    93fa:	f7ff b847 	b.w	848c <d_print_comp.part.10+0xf94>
    93fe:	2200      	movs	r2, #0
    9400:	4619      	mov	r1, r3
    9402:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
    9406:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    940a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    940e:	4620      	mov	r0, r4
    9410:	4798      	blx	r3
    9412:	2329      	movs	r3, #41	; 0x29
    9414:	7023      	strb	r3, [r4, #0]
    9416:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    941a:	782a      	ldrb	r2, [r5, #0]
    941c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9420:	2101      	movs	r1, #1
    9422:	3301      	adds	r3, #1
    9424:	2a3c      	cmp	r2, #60	; 0x3c
    9426:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    942a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    942e:	f47e aed5 	bne.w	81dc <d_print_comp.part.10+0xce4>
    9432:	232d      	movs	r3, #45	; 0x2d
    9434:	1c4a      	adds	r2, r1, #1
    9436:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    943a:	5463      	strb	r3, [r4, r1]
    943c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9440:	f7fe becc 	b.w	81dc <d_print_comp.part.10+0xce4>
    9444:	f04f 0800 	mov.w	r8, #0
    9448:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    944c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9450:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9454:	4620      	mov	r0, r4
    9456:	4798      	blx	r3
    9458:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    945c:	3301      	adds	r3, #1
    945e:	4641      	mov	r1, r8
    9460:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9464:	2201      	movs	r2, #1
    9466:	f7fe be9e 	b.w	81a6 <d_print_comp.part.10+0xcae>
    946a:	4620      	mov	r0, r4
    946c:	4631      	mov	r1, r6
    946e:	462a      	mov	r2, r5
    9470:	f000 fad8 	bl	9a24 <d_print_comp>
    9474:	f7fe b8b4 	b.w	75e0 <d_print_comp.part.10+0xe8>
    9478:	f8d5 8008 	ldr.w	r8, [r5, #8]
    947c:	f898 2000 	ldrb.w	r2, [r8]
    9480:	2a00      	cmp	r2, #0
    9482:	f47e ae8a 	bne.w	819a <d_print_comp.part.10+0xca2>
    9486:	2b3c      	cmp	r3, #60	; 0x3c
    9488:	f000 8290 	beq.w	99ac <d_print_comp.part.10+0x24b4>
    948c:	4631      	mov	r1, r6
    948e:	4642      	mov	r2, r8
    9490:	4620      	mov	r0, r4
    9492:	3f02      	subs	r7, #2
    9494:	f000 fac6 	bl	9a24 <d_print_comp>
    9498:	2f04      	cmp	r7, #4
    949a:	f63e a8a1 	bhi.w	75e0 <d_print_comp.part.10+0xe8>
    949e:	e8df f007 	tbb	[pc, r7]
    94a2:	151b      	.short	0x151b
    94a4:	090f      	.short	0x090f
    94a6:	03          	.byte	0x03
    94a7:	00          	.byte	0x00
    94a8:	4620      	mov	r0, r4
    94aa:	495a      	ldr	r1, [pc, #360]	; (9614 <d_print_comp.part.10+0x211c>)
    94ac:	f7fd fff0 	bl	7490 <d_append_string>
    94b0:	f7fe b896 	b.w	75e0 <d_print_comp.part.10+0xe8>
    94b4:	4620      	mov	r0, r4
    94b6:	4958      	ldr	r1, [pc, #352]	; (9618 <d_print_comp.part.10+0x2120>)
    94b8:	f7fd ffea 	bl	7490 <d_append_string>
    94bc:	f7fe b890 	b.w	75e0 <d_print_comp.part.10+0xe8>
    94c0:	4620      	mov	r0, r4
    94c2:	4956      	ldr	r1, [pc, #344]	; (961c <d_print_comp.part.10+0x2124>)
    94c4:	f7fd ffe4 	bl	7490 <d_append_string>
    94c8:	f7fe b88a 	b.w	75e0 <d_print_comp.part.10+0xe8>
    94cc:	4620      	mov	r0, r4
    94ce:	216c      	movs	r1, #108	; 0x6c
    94d0:	f7fc f918 	bl	5704 <d_append_char>
    94d4:	f7fe b884 	b.w	75e0 <d_print_comp.part.10+0xe8>
    94d8:	4620      	mov	r0, r4
    94da:	2175      	movs	r1, #117	; 0x75
    94dc:	f7fc f912 	bl	5704 <d_append_char>
    94e0:	f7fe b87e 	b.w	75e0 <d_print_comp.part.10+0xe8>
    94e4:	2600      	movs	r6, #0
    94e6:	4619      	mov	r1, r3
    94e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    94ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    94f0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    94f4:	4620      	mov	r0, r4
    94f6:	4798      	blx	r3
    94f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    94fc:	1c5a      	adds	r2, r3, #1
    94fe:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9502:	4633      	mov	r3, r6
    9504:	2101      	movs	r1, #1
    9506:	f7fe befa 	b.w	82fe <d_print_comp.part.10+0xe06>
    950a:	1d01      	adds	r1, r0, #4
    950c:	4620      	mov	r0, r4
    950e:	f7fc fa15 	bl	593c <d_lookup_template_argument.isra.6>
    9512:	b180      	cbz	r0, 9536 <d_print_comp.part.10+0x203e>
    9514:	7803      	ldrb	r3, [r0, #0]
    9516:	2b2f      	cmp	r3, #47	; 0x2f
    9518:	f47f a8ec 	bne.w	86f4 <d_print_comp.part.10+0x11fc>
    951c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    9520:	e005      	b.n	952e <d_print_comp.part.10+0x2036>
    9522:	6880      	ldr	r0, [r0, #8]
    9524:	3b01      	subs	r3, #1
    9526:	b130      	cbz	r0, 9536 <d_print_comp.part.10+0x203e>
    9528:	7802      	ldrb	r2, [r0, #0]
    952a:	2a2f      	cmp	r2, #47	; 0x2f
    952c:	d103      	bne.n	9536 <d_print_comp.part.10+0x203e>
    952e:	2b00      	cmp	r3, #0
    9530:	dcf7      	bgt.n	9522 <d_print_comp.part.10+0x202a>
    9532:	f000 8251 	beq.w	99d8 <d_print_comp.part.10+0x24e0>
    9536:	2301      	movs	r3, #1
    9538:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    953c:	f7fe b850 	b.w	75e0 <d_print_comp.part.10+0xe8>
    9540:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9544:	29ff      	cmp	r1, #255	; 0xff
    9546:	f000 81ba 	beq.w	98be <d_print_comp.part.10+0x23c6>
    954a:	1c4b      	adds	r3, r1, #1
    954c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    9550:	4620      	mov	r0, r4
    9552:	f804 9001 	strb.w	r9, [r4, r1]
    9556:	f855 2c0c 	ldr.w	r2, [r5, #-12]
    955a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
    955e:	4641      	mov	r1, r8
    9560:	f000 fa6c 	bl	9a3c <d_print_mod>
    9564:	f7fe bb75 	b.w	7c52 <d_print_comp.part.10+0x75a>
    9568:	2301      	movs	r3, #1
    956a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    956e:	f7fe b837 	b.w	75e0 <d_print_comp.part.10+0xe8>
    9572:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9576:	29ff      	cmp	r1, #255	; 0xff
    9578:	f000 81dc 	beq.w	9934 <d_print_comp.part.10+0x243c>
    957c:	2220      	movs	r2, #32
    957e:	1c4b      	adds	r3, r1, #1
    9580:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    9584:	5462      	strb	r2, [r4, r1]
    9586:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    958a:	f7fe bce9 	b.w	7f60 <d_print_comp.part.10+0xa68>
    958e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9592:	29ff      	cmp	r1, #255	; 0xff
    9594:	f000 81ea 	beq.w	996c <d_print_comp.part.10+0x2474>
    9598:	2220      	movs	r2, #32
    959a:	1c4b      	adds	r3, r1, #1
    959c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    95a0:	5462      	strb	r2, [r4, r1]
    95a2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    95a6:	f7fe bcc5 	b.w	7f34 <d_print_comp.part.10+0xa3c>
    95aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    95ae:	29ff      	cmp	r1, #255	; 0xff
    95b0:	f000 81ec 	beq.w	998c <d_print_comp.part.10+0x2494>
    95b4:	1c4a      	adds	r2, r1, #1
    95b6:	235b      	movs	r3, #91	; 0x5b
    95b8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    95bc:	5463      	strb	r3, [r4, r1]
    95be:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    95c2:	4631      	mov	r1, r6
    95c4:	68aa      	ldr	r2, [r5, #8]
    95c6:	4620      	mov	r0, r4
    95c8:	f000 fa2c 	bl	9a24 <d_print_comp>
    95cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    95d0:	29ff      	cmp	r1, #255	; 0xff
    95d2:	f000 819f 	beq.w	9914 <d_print_comp.part.10+0x241c>
    95d6:	235d      	movs	r3, #93	; 0x5d
    95d8:	1c4a      	adds	r2, r1, #1
    95da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    95de:	5463      	strb	r3, [r4, r1]
    95e0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    95e4:	f7fd bffc 	b.w	75e0 <d_print_comp.part.10+0xe8>
    95e8:	29ff      	cmp	r1, #255	; 0xff
    95ea:	f47f af22 	bne.w	9432 <d_print_comp.part.10+0x1f3a>
    95ee:	f04f 0800 	mov.w	r8, #0
    95f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    95f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    95fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    95fe:	4620      	mov	r0, r4
    9600:	4798      	blx	r3
    9602:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9606:	3301      	adds	r3, #1
    9608:	4641      	mov	r1, r8
    960a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    960e:	e710      	b.n	9432 <d_print_comp.part.10+0x1f3a>
    9610:	000137ff 	.word	0x000137ff
    9614:	000139ac 	.word	0x000139ac
    9618:	000139a8 	.word	0x000139a8
    961c:	000139a4 	.word	0x000139a4
    9620:	7809      	ldrb	r1, [r1, #0]
    9622:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
    9626:	2801      	cmp	r0, #1
    9628:	d903      	bls.n	9632 <d_print_comp.part.10+0x213a>
    962a:	3972      	subs	r1, #114	; 0x72
    962c:	2901      	cmp	r1, #1
    962e:	f63f ac15 	bhi.w	8e5c <d_print_comp.part.10+0x1964>
    9632:	4620      	mov	r0, r4
    9634:	4631      	mov	r1, r6
    9636:	f001 f857 	bl	a6e8 <d_print_expr_op>
    963a:	4620      	mov	r0, r4
    963c:	213c      	movs	r1, #60	; 0x3c
    963e:	f7fc f861 	bl	5704 <d_append_char>
    9642:	68ab      	ldr	r3, [r5, #8]
    9644:	4620      	mov	r0, r4
    9646:	685a      	ldr	r2, [r3, #4]
    9648:	4631      	mov	r1, r6
    964a:	f000 f9eb 	bl	9a24 <d_print_comp>
    964e:	4620      	mov	r0, r4
    9650:	49c0      	ldr	r1, [pc, #768]	; (9954 <d_print_comp.part.10+0x245c>)
    9652:	f7fd ff1d 	bl	7490 <d_append_string>
    9656:	68ab      	ldr	r3, [r5, #8]
    9658:	4631      	mov	r1, r6
    965a:	4620      	mov	r0, r4
    965c:	689a      	ldr	r2, [r3, #8]
    965e:	f000 f9e1 	bl	9a24 <d_print_comp>
    9662:	4620      	mov	r0, r4
    9664:	2129      	movs	r1, #41	; 0x29
    9666:	f7fc f84d 	bl	5704 <d_append_char>
    966a:	f7fd bfb9 	b.w	75e0 <d_print_comp.part.10+0xe8>
    966e:	2700      	movs	r7, #0
    9670:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9674:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9678:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    967c:	4620      	mov	r0, r4
    967e:	4798      	blx	r3
    9680:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9684:	3301      	adds	r3, #1
    9686:	4639      	mov	r1, r7
    9688:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    968c:	2201      	movs	r2, #1
    968e:	f7ff b8e1 	b.w	8854 <d_print_comp.part.10+0x135c>
    9692:	6878      	ldr	r0, [r7, #4]
    9694:	49b0      	ldr	r1, [pc, #704]	; (9958 <d_print_comp.part.10+0x2460>)
    9696:	f005 fa6d 	bl	eb74 <strncmp>
    969a:	2800      	cmp	r0, #0
    969c:	f47e ac3e 	bne.w	7f1c <d_print_comp.part.10+0xa24>
    96a0:	4631      	mov	r1, r6
    96a2:	4620      	mov	r0, r4
    96a4:	68aa      	ldr	r2, [r5, #8]
    96a6:	f000 f9bd 	bl	9a24 <d_print_comp>
    96aa:	4620      	mov	r0, r4
    96ac:	49ab      	ldr	r1, [pc, #684]	; (995c <d_print_comp.part.10+0x2464>)
    96ae:	f7fd feef 	bl	7490 <d_append_string>
    96b2:	f7fe bc5f 	b.w	7f74 <d_print_comp.part.10+0xa7c>
    96b6:	9b02      	ldr	r3, [sp, #8]
    96b8:	f7fe bed6 	b.w	8468 <d_print_comp.part.10+0xf70>
    96bc:	2500      	movs	r5, #0
    96be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    96c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    96c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    96ca:	4620      	mov	r0, r4
    96cc:	4798      	blx	r3
    96ce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    96d2:	3301      	adds	r3, #1
    96d4:	4629      	mov	r1, r5
    96d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    96da:	2201      	movs	r2, #1
    96dc:	f7ff bbaa 	b.w	8e34 <d_print_comp.part.10+0x193c>
    96e0:	4620      	mov	r0, r4
    96e2:	215b      	movs	r1, #91	; 0x5b
    96e4:	f7fc f80e 	bl	5704 <d_append_char>
    96e8:	68ab      	ldr	r3, [r5, #8]
    96ea:	4631      	mov	r1, r6
    96ec:	4620      	mov	r0, r4
    96ee:	689a      	ldr	r2, [r3, #8]
    96f0:	f000 f998 	bl	9a24 <d_print_comp>
    96f4:	4620      	mov	r0, r4
    96f6:	215d      	movs	r1, #93	; 0x5d
    96f8:	f7fc f804 	bl	5704 <d_append_char>
    96fc:	f7ff bbdb 	b.w	8eb6 <d_print_comp.part.10+0x19be>
    9700:	6899      	ldr	r1, [r3, #8]
    9702:	2901      	cmp	r1, #1
    9704:	f47f abae 	bne.w	8e64 <d_print_comp.part.10+0x196c>
    9708:	685b      	ldr	r3, [r3, #4]
    970a:	781b      	ldrb	r3, [r3, #0]
    970c:	2b3e      	cmp	r3, #62	; 0x3e
    970e:	f47f aba9 	bne.w	8e64 <d_print_comp.part.10+0x196c>
    9712:	4620      	mov	r0, r4
    9714:	2128      	movs	r1, #40	; 0x28
    9716:	f7fb fff5 	bl	5704 <d_append_char>
    971a:	686a      	ldr	r2, [r5, #4]
    971c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    9720:	f7ff bba0 	b.w	8e64 <d_print_comp.part.10+0x196c>
    9724:	4642      	mov	r2, r8
    9726:	4620      	mov	r0, r4
    9728:	4631      	mov	r1, r6
    972a:	f000 ffdd 	bl	a6e8 <d_print_expr_op>
    972e:	f7ff bbbc 	b.w	8eaa <d_print_comp.part.10+0x19b2>
    9732:	6893      	ldr	r3, [r2, #8]
    9734:	781b      	ldrb	r3, [r3, #0]
    9736:	2b29      	cmp	r3, #41	; 0x29
    9738:	bf1c      	itt	ne
    973a:	2301      	movne	r3, #1
    973c:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
    9740:	6852      	ldr	r2, [r2, #4]
    9742:	4620      	mov	r0, r4
    9744:	4631      	mov	r1, r6
    9746:	f001 f809 	bl	a75c <d_print_subexpr>
    974a:	f7ff bb9b 	b.w	8e84 <d_print_comp.part.10+0x198c>
    974e:	4642      	mov	r2, r8
    9750:	4620      	mov	r0, r4
    9752:	4631      	mov	r1, r6
    9754:	f001 f802 	bl	a75c <d_print_subexpr>
    9758:	4620      	mov	r0, r4
    975a:	4631      	mov	r1, r6
    975c:	4652      	mov	r2, sl
    975e:	f000 ffc3 	bl	a6e8 <d_print_expr_op>
    9762:	464a      	mov	r2, r9
    9764:	4620      	mov	r0, r4
    9766:	4631      	mov	r1, r6
    9768:	f000 fff8 	bl	a75c <d_print_subexpr>
    976c:	4620      	mov	r0, r4
    976e:	497c      	ldr	r1, [pc, #496]	; (9960 <d_print_comp.part.10+0x2468>)
    9770:	f7fd fe8e 	bl	7490 <d_append_string>
    9774:	4620      	mov	r0, r4
    9776:	4631      	mov	r1, r6
    9778:	462a      	mov	r2, r5
    977a:	f000 ffef 	bl	a75c <d_print_subexpr>
    977e:	f7fd bf2f 	b.w	75e0 <d_print_comp.part.10+0xe8>
    9782:	2700      	movs	r7, #0
    9784:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9788:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    978c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    9790:	4620      	mov	r0, r4
    9792:	4798      	blx	r3
    9794:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9798:	3301      	adds	r3, #1
    979a:	4639      	mov	r1, r7
    979c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    97a0:	2201      	movs	r2, #1
    97a2:	e462      	b.n	906a <d_print_comp.part.10+0x1b72>
    97a4:	f04f 0800 	mov.w	r8, #0
    97a8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    97ac:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    97b0:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
    97b4:	4798      	blx	r3
    97b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    97ba:	3301      	adds	r3, #1
    97bc:	4641      	mov	r1, r8
    97be:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    97c2:	2201      	movs	r2, #1
    97c4:	e440      	b.n	9048 <d_print_comp.part.10+0x1b50>
    97c6:	2500      	movs	r5, #0
    97c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    97cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    97d0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    97d4:	4620      	mov	r0, r4
    97d6:	4798      	blx	r3
    97d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    97dc:	3301      	adds	r3, #1
    97de:	4629      	mov	r1, r5
    97e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    97e4:	2201      	movs	r2, #1
    97e6:	f7ff bbce 	b.w	8f86 <d_print_comp.part.10+0x1a8e>
    97ea:	686b      	ldr	r3, [r5, #4]
    97ec:	781a      	ldrb	r2, [r3, #0]
    97ee:	2a01      	cmp	r2, #1
    97f0:	f47f abed 	bne.w	8fce <d_print_comp.part.10+0x1ad6>
    97f4:	68aa      	ldr	r2, [r5, #8]
    97f6:	7812      	ldrb	r2, [r2, #0]
    97f8:	2a29      	cmp	r2, #41	; 0x29
    97fa:	bf08      	it	eq
    97fc:	461d      	moveq	r5, r3
    97fe:	f7ff bbe6 	b.w	8fce <d_print_comp.part.10+0x1ad6>
    9802:	ab16      	add	r3, sp, #88	; 0x58
    9804:	9705      	str	r7, [sp, #20]
    9806:	f843 ad48 	str.w	sl, [r3, #-72]!
    980a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    980e:	f7fe ba05 	b.w	7c1c <d_print_comp.part.10+0x724>
    9812:	4631      	mov	r1, r6
    9814:	4620      	mov	r0, r4
    9816:	686a      	ldr	r2, [r5, #4]
    9818:	f000 ffa0 	bl	a75c <d_print_subexpr>
    981c:	4620      	mov	r0, r4
    981e:	4951      	ldr	r1, [pc, #324]	; (9964 <d_print_comp.part.10+0x246c>)
    9820:	f7fd fe36 	bl	7490 <d_append_string>
    9824:	f7fd bedc 	b.w	75e0 <d_print_comp.part.10+0xe8>
    9828:	2500      	movs	r5, #0
    982a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    982e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9832:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9836:	4620      	mov	r0, r4
    9838:	4798      	blx	r3
    983a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    983e:	3301      	adds	r3, #1
    9840:	4629      	mov	r1, r5
    9842:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9846:	f7ff bbf0 	b.w	902a <d_print_comp.part.10+0x1b32>
    984a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
    984e:	4619      	mov	r1, r3
    9850:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9854:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9858:	4620      	mov	r0, r4
    985a:	4798      	blx	r3
    985c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9860:	1c5a      	adds	r2, r3, #1
    9862:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9866:	463b      	mov	r3, r7
    9868:	f7ff bbce 	b.w	9008 <d_print_comp.part.10+0x1b10>
    986c:	1cf3      	adds	r3, r6, #3
    986e:	429f      	cmp	r7, r3
    9870:	f67f acac 	bls.w	91cc <d_print_comp.part.10+0x1cd4>
    9874:	2100      	movs	r1, #0
    9876:	e004      	b.n	9882 <d_print_comp.part.10+0x238a>
    9878:	4615      	mov	r5, r2
    987a:	42bb      	cmp	r3, r7
    987c:	eb05 1101 	add.w	r1, r5, r1, lsl #4
    9880:	d015      	beq.n	98ae <d_print_comp.part.10+0x23b6>
    9882:	469c      	mov	ip, r3
    9884:	f813 5b01 	ldrb.w	r5, [r3], #1
    9888:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
    988c:	b2d0      	uxtb	r0, r2
    988e:	2809      	cmp	r0, #9
    9890:	f1a5 0941 	sub.w	r9, r5, #65	; 0x41
    9894:	d9f0      	bls.n	9878 <d_print_comp.part.10+0x2380>
    9896:	f1b9 0f05 	cmp.w	r9, #5
    989a:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
    989e:	d801      	bhi.n	98a4 <d_print_comp.part.10+0x23ac>
    98a0:	3d37      	subs	r5, #55	; 0x37
    98a2:	e7ea      	b.n	987a <d_print_comp.part.10+0x2382>
    98a4:	2a05      	cmp	r2, #5
    98a6:	f200 8087 	bhi.w	99b8 <d_print_comp.part.10+0x24c0>
    98aa:	3d57      	subs	r5, #87	; 0x57
    98ac:	e7e5      	b.n	987a <d_print_comp.part.10+0x2382>
    98ae:	255f      	movs	r5, #95	; 0x5f
    98b0:	e471      	b.n	9196 <d_print_comp.part.10+0x1c9e>
    98b2:	464c      	mov	r4, r9
    98b4:	2301      	movs	r3, #1
    98b6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    98ba:	f7fd be91 	b.w	75e0 <d_print_comp.part.10+0xe8>
    98be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    98c2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    98c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    98ca:	4620      	mov	r0, r4
    98cc:	4798      	blx	r3
    98ce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    98d2:	3301      	adds	r3, #1
    98d4:	4631      	mov	r1, r6
    98d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    98da:	e636      	b.n	954a <d_print_comp.part.10+0x2052>
    98dc:	686a      	ldr	r2, [r5, #4]
    98de:	4620      	mov	r0, r4
    98e0:	4631      	mov	r1, r6
    98e2:	f000 ff3b 	bl	a75c <d_print_subexpr>
    98e6:	4620      	mov	r0, r4
    98e8:	4631      	mov	r1, r6
    98ea:	463a      	mov	r2, r7
    98ec:	f000 fefc 	bl	a6e8 <d_print_expr_op>
    98f0:	f7fd be76 	b.w	75e0 <d_print_comp.part.10+0xe8>
    98f4:	2b3b      	cmp	r3, #59	; 0x3b
    98f6:	f47e ac50 	bne.w	819a <d_print_comp.part.10+0xca2>
    98fa:	6853      	ldr	r3, [r2, #4]
    98fc:	781b      	ldrb	r3, [r3, #0]
    98fe:	2b30      	cmp	r3, #48	; 0x30
    9900:	f000 8088 	beq.w	9a14 <d_print_comp.part.10+0x251c>
    9904:	2b31      	cmp	r3, #49	; 0x31
    9906:	f47e ac48 	bne.w	819a <d_print_comp.part.10+0xca2>
    990a:	4917      	ldr	r1, [pc, #92]	; (9968 <d_print_comp.part.10+0x2470>)
    990c:	f7fd fdc0 	bl	7490 <d_append_string>
    9910:	f7fd be66 	b.w	75e0 <d_print_comp.part.10+0xe8>
    9914:	2500      	movs	r5, #0
    9916:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    991a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    991e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9922:	4620      	mov	r0, r4
    9924:	4798      	blx	r3
    9926:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    992a:	3301      	adds	r3, #1
    992c:	4629      	mov	r1, r5
    992e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9932:	e650      	b.n	95d6 <d_print_comp.part.10+0x20de>
    9934:	2500      	movs	r5, #0
    9936:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    993a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    993e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9942:	4620      	mov	r0, r4
    9944:	4798      	blx	r3
    9946:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    994a:	3301      	adds	r3, #1
    994c:	4629      	mov	r1, r5
    994e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9952:	e613      	b.n	957c <d_print_comp.part.10+0x2084>
    9954:	00013a5c 	.word	0x00013a5c
    9958:	00013804 	.word	0x00013804
    995c:	0001380c 	.word	0x0001380c
    9960:	00013998 	.word	0x00013998
    9964:	000139dc 	.word	0x000139dc
    9968:	000139b8 	.word	0x000139b8
    996c:	2700      	movs	r7, #0
    996e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9972:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    9976:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    997a:	4620      	mov	r0, r4
    997c:	4798      	blx	r3
    997e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9982:	3301      	adds	r3, #1
    9984:	4639      	mov	r1, r7
    9986:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    998a:	e605      	b.n	9598 <d_print_comp.part.10+0x20a0>
    998c:	2700      	movs	r7, #0
    998e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9992:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    9996:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    999a:	4620      	mov	r0, r4
    999c:	4798      	blx	r3
    999e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    99a2:	3301      	adds	r3, #1
    99a4:	4639      	mov	r1, r7
    99a6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    99aa:	e603      	b.n	95b4 <d_print_comp.part.10+0x20bc>
    99ac:	212d      	movs	r1, #45	; 0x2d
    99ae:	f7fb fea9 	bl	5704 <d_append_char>
    99b2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    99b6:	e569      	b.n	948c <d_print_comp.part.10+0x1f94>
    99b8:	4567      	cmp	r7, ip
    99ba:	f67f af78 	bls.w	98ae <d_print_comp.part.10+0x23b6>
    99be:	2d5f      	cmp	r5, #95	; 0x5f
    99c0:	f47f af75 	bne.w	98ae <d_print_comp.part.10+0x23b6>
    99c4:	29ff      	cmp	r1, #255	; 0xff
    99c6:	f63f abe6 	bhi.w	9196 <d_print_comp.part.10+0x1c9e>
    99ca:	b2c9      	uxtb	r1, r1
    99cc:	4620      	mov	r0, r4
    99ce:	4666      	mov	r6, ip
    99d0:	f7fb fe98 	bl	5704 <d_append_char>
    99d4:	f7ff bbe9 	b.w	91aa <d_print_comp.part.10+0x1cb2>
    99d8:	6840      	ldr	r0, [r0, #4]
    99da:	2800      	cmp	r0, #0
    99dc:	f43f adab 	beq.w	9536 <d_print_comp.part.10+0x203e>
    99e0:	7803      	ldrb	r3, [r0, #0]
    99e2:	f7fe be87 	b.w	86f4 <d_print_comp.part.10+0x11fc>
    99e6:	f47f aa8c 	bne.w	8f02 <d_print_comp.part.10+0x1a0a>
    99ea:	6840      	ldr	r0, [r0, #4]
    99ec:	2800      	cmp	r0, #0
    99ee:	f47e aa79 	bne.w	7ee4 <d_print_comp.part.10+0x9ec>
    99f2:	f7ff ba86 	b.w	8f02 <d_print_comp.part.10+0x1a0a>
    99f6:	4631      	mov	r1, r6
    99f8:	4620      	mov	r0, r4
    99fa:	68aa      	ldr	r2, [r5, #8]
    99fc:	f000 f812 	bl	9a24 <d_print_comp>
    9a00:	9b08      	ldr	r3, [sp, #32]
    9a02:	9902      	ldr	r1, [sp, #8]
    9a04:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    9a08:	2b00      	cmp	r3, #0
    9a0a:	f47d ade9 	bne.w	75e0 <d_print_comp.part.10+0xe8>
    9a0e:	460b      	mov	r3, r1
    9a10:	f7fe bd2a 	b.w	8468 <d_print_comp.part.10+0xf70>
    9a14:	4902      	ldr	r1, [pc, #8]	; (9a20 <d_print_comp.part.10+0x2528>)
    9a16:	f7fd fd3b 	bl	7490 <d_append_string>
    9a1a:	f7fd bde1 	b.w	75e0 <d_print_comp.part.10+0xe8>
    9a1e:	bf00      	nop
    9a20:	000139b0 	.word	0x000139b0

00009a24 <d_print_comp>:
    9a24:	b12a      	cbz	r2, 9a32 <d_print_comp+0xe>
    9a26:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    9a2a:	b90b      	cbnz	r3, 9a30 <d_print_comp+0xc>
    9a2c:	f7fd bd64 	b.w	74f8 <d_print_comp.part.10>
    9a30:	4770      	bx	lr
    9a32:	2201      	movs	r2, #1
    9a34:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    9a38:	4770      	bx	lr
    9a3a:	bf00      	nop

00009a3c <d_print_mod>:
    9a3c:	7813      	ldrb	r3, [r2, #0]
    9a3e:	3b03      	subs	r3, #3
    9a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a44:	4615      	mov	r5, r2
    9a46:	4604      	mov	r4, r0
    9a48:	4689      	mov	r9, r1
    9a4a:	2b2a      	cmp	r3, #42	; 0x2a
    9a4c:	f200 81d3 	bhi.w	9df6 <d_print_mod+0x3ba>
    9a50:	e8df f013 	tbh	[pc, r3, lsl #1]
    9a54:	01d10052 	.word	0x01d10052
    9a58:	01d101d1 	.word	0x01d101d1
    9a5c:	01d101d1 	.word	0x01d101d1
    9a60:	01d101d1 	.word	0x01d101d1
    9a64:	01d101d1 	.word	0x01d101d1
    9a68:	01d101d1 	.word	0x01d101d1
    9a6c:	01d101d1 	.word	0x01d101d1
    9a70:	01d101d1 	.word	0x01d101d1
    9a74:	01d101d1 	.word	0x01d101d1
    9a78:	01d101d1 	.word	0x01d101d1
    9a7c:	01d101d1 	.word	0x01d101d1
    9a80:	0083005d 	.word	0x0083005d
    9a84:	005d00a9 	.word	0x005d00a9
    9a88:	00a90083 	.word	0x00a90083
    9a8c:	00e600ce 	.word	0x00e600ce
    9a90:	0132011d 	.word	0x0132011d
    9a94:	01470144 	.word	0x01470144
    9a98:	0170014a 	.word	0x0170014a
    9a9c:	01d101d1 	.word	0x01d101d1
    9aa0:	01d101d1 	.word	0x01d101d1
    9aa4:	01d10195 	.word	0x01d10195
    9aa8:	002b      	.short	0x002b
    9aaa:	4ed9      	ldr	r6, [pc, #868]	; (9e10 <d_print_mod+0x3d4>)
    9aac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    9ab0:	f106 0a0a 	add.w	sl, r6, #10
    9ab4:	f04f 0800 	mov.w	r8, #0
    9ab8:	e009      	b.n	9ace <d_print_mod+0x92>
    9aba:	461a      	mov	r2, r3
    9abc:	3301      	adds	r3, #1
    9abe:	4556      	cmp	r6, sl
    9ac0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    9ac4:	54a7      	strb	r7, [r4, r2]
    9ac6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    9aca:	f000 81b9 	beq.w	9e40 <d_print_mod+0x404>
    9ace:	2bff      	cmp	r3, #255	; 0xff
    9ad0:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    9ad4:	d1f1      	bne.n	9aba <d_print_mod+0x7e>
    9ad6:	4619      	mov	r1, r3
    9ad8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9adc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9ae0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9ae4:	4620      	mov	r0, r4
    9ae6:	4798      	blx	r3
    9ae8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9aec:	3301      	adds	r3, #1
    9aee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9af2:	2200      	movs	r2, #0
    9af4:	2301      	movs	r3, #1
    9af6:	e7e2      	b.n	9abe <d_print_mod+0x82>
    9af8:	686a      	ldr	r2, [r5, #4]
    9afa:	2a00      	cmp	r2, #0
    9afc:	f000 80d7 	beq.w	9cae <d_print_mod+0x272>
    9b00:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    9b04:	2b00      	cmp	r3, #0
    9b06:	f000 81ba 	beq.w	9e7e <d_print_mod+0x442>
    9b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b0e:	4dc1      	ldr	r5, [pc, #772]	; (9e14 <d_print_mod+0x3d8>)
    9b10:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9b14:	f105 0709 	add.w	r7, r5, #9
    9b18:	f04f 0800 	mov.w	r8, #0
    9b1c:	e009      	b.n	9b32 <d_print_mod+0xf6>
    9b1e:	460b      	mov	r3, r1
    9b20:	3101      	adds	r1, #1
    9b22:	42bd      	cmp	r5, r7
    9b24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9b28:	54e6      	strb	r6, [r4, r3]
    9b2a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9b2e:	f000 8183 	beq.w	9e38 <d_print_mod+0x3fc>
    9b32:	29ff      	cmp	r1, #255	; 0xff
    9b34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9b38:	d1f1      	bne.n	9b1e <d_print_mod+0xe2>
    9b3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9b3e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9b42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9b46:	4620      	mov	r0, r4
    9b48:	4798      	blx	r3
    9b4a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9b4e:	3301      	adds	r3, #1
    9b50:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9b54:	2101      	movs	r1, #1
    9b56:	2300      	movs	r3, #0
    9b58:	e7e3      	b.n	9b22 <d_print_mod+0xe6>
    9b5a:	4daf      	ldr	r5, [pc, #700]	; (9e18 <d_print_mod+0x3dc>)
    9b5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9b60:	f105 0709 	add.w	r7, r5, #9
    9b64:	f04f 0800 	mov.w	r8, #0
    9b68:	e009      	b.n	9b7e <d_print_mod+0x142>
    9b6a:	460b      	mov	r3, r1
    9b6c:	3101      	adds	r1, #1
    9b6e:	42bd      	cmp	r5, r7
    9b70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9b74:	54e6      	strb	r6, [r4, r3]
    9b76:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9b7a:	f000 815f 	beq.w	9e3c <d_print_mod+0x400>
    9b7e:	29ff      	cmp	r1, #255	; 0xff
    9b80:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9b84:	d1f1      	bne.n	9b6a <d_print_mod+0x12e>
    9b86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9b8a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9b8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9b92:	4620      	mov	r0, r4
    9b94:	4798      	blx	r3
    9b96:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9b9a:	3301      	adds	r3, #1
    9b9c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9ba0:	2101      	movs	r1, #1
    9ba2:	2300      	movs	r3, #0
    9ba4:	e7e3      	b.n	9b6e <d_print_mod+0x132>
    9ba6:	4d9d      	ldr	r5, [pc, #628]	; (9e1c <d_print_mod+0x3e0>)
    9ba8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9bac:	1daf      	adds	r7, r5, #6
    9bae:	f04f 0800 	mov.w	r8, #0
    9bb2:	e009      	b.n	9bc8 <d_print_mod+0x18c>
    9bb4:	460b      	mov	r3, r1
    9bb6:	3101      	adds	r1, #1
    9bb8:	42bd      	cmp	r5, r7
    9bba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9bbe:	54e6      	strb	r6, [r4, r3]
    9bc0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9bc4:	f000 8121 	beq.w	9e0a <d_print_mod+0x3ce>
    9bc8:	29ff      	cmp	r1, #255	; 0xff
    9bca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9bce:	d1f1      	bne.n	9bb4 <d_print_mod+0x178>
    9bd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9bd4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9bd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9bdc:	4620      	mov	r0, r4
    9bde:	4798      	blx	r3
    9be0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9be4:	3301      	adds	r3, #1
    9be6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9bea:	2101      	movs	r1, #1
    9bec:	2300      	movs	r3, #0
    9bee:	e7e3      	b.n	9bb8 <d_print_mod+0x17c>
    9bf0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    9bf4:	2bff      	cmp	r3, #255	; 0xff
    9bf6:	f000 8159 	beq.w	9eac <d_print_mod+0x470>
    9bfa:	1c59      	adds	r1, r3, #1
    9bfc:	2220      	movs	r2, #32
    9bfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9c02:	54e2      	strb	r2, [r4, r3]
    9c04:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    9c08:	29ff      	cmp	r1, #255	; 0xff
    9c0a:	f000 813e 	beq.w	9e8a <d_print_mod+0x44e>
    9c0e:	1c4a      	adds	r2, r1, #1
    9c10:	2326      	movs	r3, #38	; 0x26
    9c12:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9c16:	5463      	strb	r3, [r4, r1]
    9c18:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c20:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    9c24:	2bff      	cmp	r3, #255	; 0xff
    9c26:	f000 8162 	beq.w	9eee <d_print_mod+0x4b2>
    9c2a:	1c59      	adds	r1, r3, #1
    9c2c:	2220      	movs	r2, #32
    9c2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9c32:	54e2      	strb	r2, [r4, r3]
    9c34:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    9c38:	4d79      	ldr	r5, [pc, #484]	; (9e20 <d_print_mod+0x3e4>)
    9c3a:	f04f 0800 	mov.w	r8, #0
    9c3e:	1caf      	adds	r7, r5, #2
    9c40:	e009      	b.n	9c56 <d_print_mod+0x21a>
    9c42:	460b      	mov	r3, r1
    9c44:	42bd      	cmp	r5, r7
    9c46:	f101 0101 	add.w	r1, r1, #1
    9c4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9c4e:	54e6      	strb	r6, [r4, r3]
    9c50:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9c54:	d019      	beq.n	9c8a <d_print_mod+0x24e>
    9c56:	29ff      	cmp	r1, #255	; 0xff
    9c58:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9c5c:	d1f1      	bne.n	9c42 <d_print_mod+0x206>
    9c5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9c62:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9c66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9c6a:	4620      	mov	r0, r4
    9c6c:	4798      	blx	r3
    9c6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9c72:	3301      	adds	r3, #1
    9c74:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9c78:	2300      	movs	r3, #0
    9c7a:	2101      	movs	r1, #1
    9c7c:	42bd      	cmp	r5, r7
    9c7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9c82:	54e6      	strb	r6, [r4, r3]
    9c84:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9c88:	d1e5      	bne.n	9c56 <d_print_mod+0x21a>
    9c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9c92:	29ff      	cmp	r1, #255	; 0xff
    9c94:	f000 811b 	beq.w	9ece <d_print_mod+0x492>
    9c98:	1c4a      	adds	r2, r1, #1
    9c9a:	2320      	movs	r3, #32
    9c9c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9ca0:	5463      	strb	r3, [r4, r1]
    9ca2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9ca6:	68aa      	ldr	r2, [r5, #8]
    9ca8:	2a00      	cmp	r2, #0
    9caa:	f47f af29 	bne.w	9b00 <d_print_mod+0xc4>
    9cae:	2301      	movs	r3, #1
    9cb0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    9cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9cb8:	f011 0904 	ands.w	r9, r1, #4
    9cbc:	f47f af25 	bne.w	9b0a <d_print_mod+0xce>
    9cc0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9cc4:	29ff      	cmp	r1, #255	; 0xff
    9cc6:	f000 814d 	beq.w	9f64 <d_print_mod+0x528>
    9cca:	1c4a      	adds	r2, r1, #1
    9ccc:	232a      	movs	r3, #42	; 0x2a
    9cce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9cd2:	5463      	strb	r3, [r4, r1]
    9cd4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9cdc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9ce0:	e792      	b.n	9c08 <d_print_mod+0x1cc>
    9ce2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9ce6:	e7a7      	b.n	9c38 <d_print_mod+0x1fc>
    9ce8:	4d4e      	ldr	r5, [pc, #312]	; (9e24 <d_print_mod+0x3e8>)
    9cea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9cee:	f105 0708 	add.w	r7, r5, #8
    9cf2:	f04f 0800 	mov.w	r8, #0
    9cf6:	e009      	b.n	9d0c <d_print_mod+0x2d0>
    9cf8:	460b      	mov	r3, r1
    9cfa:	3101      	adds	r1, #1
    9cfc:	42bd      	cmp	r5, r7
    9cfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9d02:	54e6      	strb	r6, [r4, r3]
    9d04:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9d08:	f000 8094 	beq.w	9e34 <d_print_mod+0x3f8>
    9d0c:	29ff      	cmp	r1, #255	; 0xff
    9d0e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9d12:	d1f1      	bne.n	9cf8 <d_print_mod+0x2bc>
    9d14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9d18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9d1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9d20:	4620      	mov	r0, r4
    9d22:	4798      	blx	r3
    9d24:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9d28:	3301      	adds	r3, #1
    9d2a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9d2e:	2101      	movs	r1, #1
    9d30:	2300      	movs	r3, #0
    9d32:	e7e3      	b.n	9cfc <d_print_mod+0x2c0>
    9d34:	4d3c      	ldr	r5, [pc, #240]	; (9e28 <d_print_mod+0x3ec>)
    9d36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9d3a:	f105 070a 	add.w	r7, r5, #10
    9d3e:	f04f 0800 	mov.w	r8, #0
    9d42:	e008      	b.n	9d56 <d_print_mod+0x31a>
    9d44:	460b      	mov	r3, r1
    9d46:	3101      	adds	r1, #1
    9d48:	42bd      	cmp	r5, r7
    9d4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9d4e:	54e6      	strb	r6, [r4, r3]
    9d50:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9d54:	d06c      	beq.n	9e30 <d_print_mod+0x3f4>
    9d56:	29ff      	cmp	r1, #255	; 0xff
    9d58:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9d5c:	d1f2      	bne.n	9d44 <d_print_mod+0x308>
    9d5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9d62:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9d66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9d6a:	4620      	mov	r0, r4
    9d6c:	4798      	blx	r3
    9d6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9d72:	3301      	adds	r3, #1
    9d74:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9d78:	2101      	movs	r1, #1
    9d7a:	2300      	movs	r3, #0
    9d7c:	e7e4      	b.n	9d48 <d_print_mod+0x30c>
    9d7e:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
    9d82:	2b28      	cmp	r3, #40	; 0x28
    9d84:	d00b      	beq.n	9d9e <d_print_mod+0x362>
    9d86:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9d8a:	29ff      	cmp	r1, #255	; 0xff
    9d8c:	f000 80da 	beq.w	9f44 <d_print_mod+0x508>
    9d90:	1c4a      	adds	r2, r1, #1
    9d92:	2320      	movs	r3, #32
    9d94:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9d98:	5463      	strb	r3, [r4, r1]
    9d9a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    9d9e:	686a      	ldr	r2, [r5, #4]
    9da0:	2a00      	cmp	r2, #0
    9da2:	f000 80c7 	beq.w	9f34 <d_print_mod+0x4f8>
    9da6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    9daa:	2b00      	cmp	r3, #0
    9dac:	d062      	beq.n	9e74 <d_print_mod+0x438>
    9dae:	4d1f      	ldr	r5, [pc, #124]	; (9e2c <d_print_mod+0x3f0>)
    9db0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    9db4:	1cef      	adds	r7, r5, #3
    9db6:	f04f 0800 	mov.w	r8, #0
    9dba:	e008      	b.n	9dce <d_print_mod+0x392>
    9dbc:	460b      	mov	r3, r1
    9dbe:	3101      	adds	r1, #1
    9dc0:	42bd      	cmp	r5, r7
    9dc2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9dc6:	54e6      	strb	r6, [r4, r3]
    9dc8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    9dcc:	d049      	beq.n	9e62 <d_print_mod+0x426>
    9dce:	29ff      	cmp	r1, #255	; 0xff
    9dd0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    9dd4:	d1f2      	bne.n	9dbc <d_print_mod+0x380>
    9dd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9dda:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    9dde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9de2:	4620      	mov	r0, r4
    9de4:	4798      	blx	r3
    9de6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9dea:	3301      	adds	r3, #1
    9dec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9df0:	2101      	movs	r1, #1
    9df2:	2300      	movs	r3, #0
    9df4:	e7e4      	b.n	9dc0 <d_print_mod+0x384>
    9df6:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	f47f ae85 	bne.w	9b0a <d_print_mod+0xce>
    9e00:	462a      	mov	r2, r5
    9e02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e06:	f7fd bb77 	b.w	74f8 <d_print_comp.part.10>
    9e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e0e:	bf00      	nop
    9e10:	00013a9f 	.word	0x00013a9f
    9e14:	00013a5f 	.word	0x00013a5f
    9e18:	00013a6b 	.word	0x00013a6b
    9e1c:	00013a77 	.word	0x00013a77
    9e20:	00013a7f 	.word	0x00013a7f
    9e24:	00013a83 	.word	0x00013a83
    9e28:	00013a8f 	.word	0x00013a8f
    9e2c:	00013a9b 	.word	0x00013a9b
    9e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e40:	686a      	ldr	r2, [r5, #4]
    9e42:	2a00      	cmp	r2, #0
    9e44:	d07a      	beq.n	9f3c <d_print_mod+0x500>
    9e46:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    9e4a:	b161      	cbz	r1, 9e66 <d_print_mod+0x42a>
    9e4c:	2bff      	cmp	r3, #255	; 0xff
    9e4e:	d05f      	beq.n	9f10 <d_print_mod+0x4d4>
    9e50:	1c59      	adds	r1, r3, #1
    9e52:	2229      	movs	r2, #41	; 0x29
    9e54:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    9e58:	54e2      	strb	r2, [r4, r3]
    9e5a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    9e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e66:	4649      	mov	r1, r9
    9e68:	4620      	mov	r0, r4
    9e6a:	f7fd fb45 	bl	74f8 <d_print_comp.part.10>
    9e6e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9e72:	e7eb      	b.n	9e4c <d_print_mod+0x410>
    9e74:	4649      	mov	r1, r9
    9e76:	4620      	mov	r0, r4
    9e78:	f7fd fb3e 	bl	74f8 <d_print_comp.part.10>
    9e7c:	e797      	b.n	9dae <d_print_mod+0x372>
    9e7e:	4620      	mov	r0, r4
    9e80:	4649      	mov	r1, r9
    9e82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e86:	f7fd bb37 	b.w	74f8 <d_print_comp.part.10>
    9e8a:	2500      	movs	r5, #0
    9e8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9e90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9e94:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9e98:	4620      	mov	r0, r4
    9e9a:	4798      	blx	r3
    9e9c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9ea0:	3301      	adds	r3, #1
    9ea2:	4629      	mov	r1, r5
    9ea4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9ea8:	2201      	movs	r2, #1
    9eaa:	e6b1      	b.n	9c10 <d_print_mod+0x1d4>
    9eac:	2500      	movs	r5, #0
    9eae:	4619      	mov	r1, r3
    9eb0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    9eb4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    9eb8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    9ebc:	4798      	blx	r3
    9ebe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9ec2:	1c5a      	adds	r2, r3, #1
    9ec4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9ec8:	462b      	mov	r3, r5
    9eca:	2101      	movs	r1, #1
    9ecc:	e696      	b.n	9bfc <d_print_mod+0x1c0>
    9ece:	2600      	movs	r6, #0
    9ed0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    9ed4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    9ed8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    9edc:	4798      	blx	r3
    9ede:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9ee2:	3301      	adds	r3, #1
    9ee4:	4631      	mov	r1, r6
    9ee6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9eea:	2201      	movs	r2, #1
    9eec:	e6d5      	b.n	9c9a <d_print_mod+0x25e>
    9eee:	2500      	movs	r5, #0
    9ef0:	4619      	mov	r1, r3
    9ef2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    9ef6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    9efa:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    9efe:	4798      	blx	r3
    9f00:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9f04:	1c5a      	adds	r2, r3, #1
    9f06:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9f0a:	462b      	mov	r3, r5
    9f0c:	2101      	movs	r1, #1
    9f0e:	e68d      	b.n	9c2c <d_print_mod+0x1f0>
    9f10:	2500      	movs	r5, #0
    9f12:	4619      	mov	r1, r3
    9f14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    9f18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    9f1c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    9f20:	4620      	mov	r0, r4
    9f22:	4798      	blx	r3
    9f24:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9f28:	1c5a      	adds	r2, r3, #1
    9f2a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9f2e:	462b      	mov	r3, r5
    9f30:	2101      	movs	r1, #1
    9f32:	e78e      	b.n	9e52 <d_print_mod+0x416>
    9f34:	2301      	movs	r3, #1
    9f36:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    9f3a:	e738      	b.n	9dae <d_print_mod+0x372>
    9f3c:	2201      	movs	r2, #1
    9f3e:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    9f42:	e783      	b.n	9e4c <d_print_mod+0x410>
    9f44:	2600      	movs	r6, #0
    9f46:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    9f4a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    9f4e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    9f52:	4798      	blx	r3
    9f54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9f58:	3301      	adds	r3, #1
    9f5a:	4631      	mov	r1, r6
    9f5c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9f60:	2201      	movs	r2, #1
    9f62:	e716      	b.n	9d92 <d_print_mod+0x356>
    9f64:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    9f68:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    9f6c:	f880 90ff 	strb.w	r9, [r0, #255]	; 0xff
    9f70:	4798      	blx	r3
    9f72:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9f76:	3301      	adds	r3, #1
    9f78:	4649      	mov	r1, r9
    9f7a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    9f7e:	2201      	movs	r2, #1
    9f80:	e6a4      	b.n	9ccc <d_print_mod+0x290>
    9f82:	bf00      	nop

00009f84 <d_print_mod_list>:
    9f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f88:	4614      	mov	r4, r2
    9f8a:	b089      	sub	sp, #36	; 0x24
    9f8c:	4605      	mov	r5, r0
    9f8e:	460f      	mov	r7, r1
    9f90:	461e      	mov	r6, r3
    9f92:	b33a      	cbz	r2, 9fe4 <d_print_mod_list+0x60>
    9f94:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    9f98:	bb23      	cbnz	r3, 9fe4 <d_print_mod_list+0x60>
    9f9a:	f04f 0801 	mov.w	r8, #1
    9f9e:	e002      	b.n	9fa6 <d_print_mod_list+0x22>
    9fa0:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    9fa4:	b9f2      	cbnz	r2, 9fe4 <d_print_mod_list+0x60>
    9fa6:	68a2      	ldr	r2, [r4, #8]
    9fa8:	b9ca      	cbnz	r2, 9fde <d_print_mod_list+0x5a>
    9faa:	6862      	ldr	r2, [r4, #4]
    9fac:	7810      	ldrb	r0, [r2, #0]
    9fae:	b91e      	cbnz	r6, 9fb8 <d_print_mod_list+0x34>
    9fb0:	f1a0 031c 	sub.w	r3, r0, #28
    9fb4:	2b04      	cmp	r3, #4
    9fb6:	d912      	bls.n	9fde <d_print_mod_list+0x5a>
    9fb8:	68e3      	ldr	r3, [r4, #12]
    9fba:	f8c4 8008 	str.w	r8, [r4, #8]
    9fbe:	2829      	cmp	r0, #41	; 0x29
    9fc0:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
    9fc4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    9fc8:	d00f      	beq.n	9fea <d_print_mod_list+0x66>
    9fca:	282a      	cmp	r0, #42	; 0x2a
    9fcc:	d018      	beq.n	a000 <d_print_mod_list+0x7c>
    9fce:	2802      	cmp	r0, #2
    9fd0:	d021      	beq.n	a016 <d_print_mod_list+0x92>
    9fd2:	4628      	mov	r0, r5
    9fd4:	4639      	mov	r1, r7
    9fd6:	f7ff fd31 	bl	9a3c <d_print_mod>
    9fda:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    9fde:	6824      	ldr	r4, [r4, #0]
    9fe0:	2c00      	cmp	r4, #0
    9fe2:	d1dd      	bne.n	9fa0 <d_print_mod_list+0x1c>
    9fe4:	b009      	add	sp, #36	; 0x24
    9fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fea:	4639      	mov	r1, r7
    9fec:	3208      	adds	r2, #8
    9fee:	6823      	ldr	r3, [r4, #0]
    9ff0:	4628      	mov	r0, r5
    9ff2:	f000 f9c9 	bl	a388 <d_print_function_type.isra.11>
    9ff6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    9ffa:	b009      	add	sp, #36	; 0x24
    9ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a000:	4639      	mov	r1, r7
    a002:	3204      	adds	r2, #4
    a004:	6823      	ldr	r3, [r4, #0]
    a006:	4628      	mov	r0, r5
    a008:	f000 f8ee 	bl	a1e8 <d_print_array_type.isra.9>
    a00c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    a010:	b009      	add	sp, #36	; 0x24
    a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a016:	2600      	movs	r6, #0
    a018:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
    a01c:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
    a020:	6852      	ldr	r2, [r2, #4]
    a022:	4628      	mov	r0, r5
    a024:	4639      	mov	r1, r7
    a026:	f7ff fcfd 	bl	9a24 <d_print_comp>
    a02a:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
    a02e:	f017 0804 	ands.w	r8, r7, #4
    a032:	d123      	bne.n	a07c <d_print_mod_list+0xf8>
    a034:	4e68      	ldr	r6, [pc, #416]	; (a1d8 <d_print_mod_list+0x254>)
    a036:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a03a:	f106 0b02 	add.w	fp, r6, #2
    a03e:	e009      	b.n	a054 <d_print_mod_list+0xd0>
    a040:	460b      	mov	r3, r1
    a042:	3101      	adds	r1, #1
    a044:	455e      	cmp	r6, fp
    a046:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a04a:	f805 a003 	strb.w	sl, [r5, r3]
    a04e:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
    a052:	d01e      	beq.n	a092 <d_print_mod_list+0x10e>
    a054:	29ff      	cmp	r1, #255	; 0xff
    a056:	f816 af01 	ldrb.w	sl, [r6, #1]!
    a05a:	d1f1      	bne.n	a040 <d_print_mod_list+0xbc>
    a05c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a060:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
    a064:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a068:	4628      	mov	r0, r5
    a06a:	4798      	blx	r3
    a06c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a070:	3301      	adds	r3, #1
    a072:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a076:	2101      	movs	r1, #1
    a078:	2300      	movs	r3, #0
    a07a:	e7e3      	b.n	a044 <d_print_mod_list+0xc0>
    a07c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a080:	29ff      	cmp	r1, #255	; 0xff
    a082:	d01b      	beq.n	a0bc <d_print_mod_list+0x138>
    a084:	1c4a      	adds	r2, r1, #1
    a086:	232e      	movs	r3, #46	; 0x2e
    a088:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
    a08c:	546b      	strb	r3, [r5, r1]
    a08e:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    a092:	6863      	ldr	r3, [r4, #4]
    a094:	689c      	ldr	r4, [r3, #8]
    a096:	7823      	ldrb	r3, [r4, #0]
    a098:	2b45      	cmp	r3, #69	; 0x45
    a09a:	d102      	bne.n	a0a2 <d_print_mod_list+0x11e>
    a09c:	e01e      	b.n	a0dc <d_print_mod_list+0x158>
    a09e:	6864      	ldr	r4, [r4, #4]
    a0a0:	7823      	ldrb	r3, [r4, #0]
    a0a2:	3b1c      	subs	r3, #28
    a0a4:	2b04      	cmp	r3, #4
    a0a6:	d9fa      	bls.n	a09e <d_print_mod_list+0x11a>
    a0a8:	4639      	mov	r1, r7
    a0aa:	4622      	mov	r2, r4
    a0ac:	4628      	mov	r0, r5
    a0ae:	f7ff fcb9 	bl	9a24 <d_print_comp>
    a0b2:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
    a0b6:	b009      	add	sp, #36	; 0x24
    a0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0bc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a0c0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a0c4:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
    a0c8:	4628      	mov	r0, r5
    a0ca:	4798      	blx	r3
    a0cc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a0d0:	3301      	adds	r3, #1
    a0d2:	4631      	mov	r1, r6
    a0d4:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a0d8:	2201      	movs	r2, #1
    a0da:	e7d4      	b.n	a086 <d_print_mod_list+0x102>
    a0dc:	4e3f      	ldr	r6, [pc, #252]	; (a1dc <d_print_mod_list+0x258>)
    a0de:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a0e2:	f106 0a0d 	add.w	sl, r6, #13
    a0e6:	f04f 0b00 	mov.w	fp, #0
    a0ea:	e009      	b.n	a100 <d_print_mod_list+0x17c>
    a0ec:	460b      	mov	r3, r1
    a0ee:	3101      	adds	r1, #1
    a0f0:	4556      	cmp	r6, sl
    a0f2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a0f6:	f805 8003 	strb.w	r8, [r5, r3]
    a0fa:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
    a0fe:	d013      	beq.n	a128 <d_print_mod_list+0x1a4>
    a100:	29ff      	cmp	r1, #255	; 0xff
    a102:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    a106:	d1f1      	bne.n	a0ec <d_print_mod_list+0x168>
    a108:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a10c:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
    a110:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a114:	4628      	mov	r0, r5
    a116:	4798      	blx	r3
    a118:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a11c:	3301      	adds	r3, #1
    a11e:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a122:	2101      	movs	r1, #1
    a124:	2300      	movs	r3, #0
    a126:	e7e3      	b.n	a0f0 <d_print_mod_list+0x16c>
    a128:	68a2      	ldr	r2, [r4, #8]
    a12a:	492d      	ldr	r1, [pc, #180]	; (a1e0 <d_print_mod_list+0x25c>)
    a12c:	3201      	adds	r2, #1
    a12e:	a801      	add	r0, sp, #4
    a130:	f004 fbec 	bl	e90c <sprintf>
    a134:	a801      	add	r0, sp, #4
    a136:	f7f8 fab1 	bl	269c <strlen>
    a13a:	b330      	cbz	r0, a18a <d_print_mod_list+0x206>
    a13c:	f10d 0603 	add.w	r6, sp, #3
    a140:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a144:	eb06 0a00 	add.w	sl, r6, r0
    a148:	f04f 0b00 	mov.w	fp, #0
    a14c:	e009      	b.n	a162 <d_print_mod_list+0x1de>
    a14e:	460b      	mov	r3, r1
    a150:	3101      	adds	r1, #1
    a152:	4556      	cmp	r6, sl
    a154:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a158:	f805 8003 	strb.w	r8, [r5, r3]
    a15c:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
    a160:	d015      	beq.n	a18e <d_print_mod_list+0x20a>
    a162:	29ff      	cmp	r1, #255	; 0xff
    a164:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    a168:	d1f1      	bne.n	a14e <d_print_mod_list+0x1ca>
    a16a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a16e:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
    a172:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a176:	4628      	mov	r0, r5
    a178:	4798      	blx	r3
    a17a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a17e:	3301      	adds	r3, #1
    a180:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a184:	2101      	movs	r1, #1
    a186:	2300      	movs	r3, #0
    a188:	e7e3      	b.n	a152 <d_print_mod_list+0x1ce>
    a18a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a18e:	4e15      	ldr	r6, [pc, #84]	; (a1e4 <d_print_mod_list+0x260>)
    a190:	f04f 0b00 	mov.w	fp, #0
    a194:	f106 0a03 	add.w	sl, r6, #3
    a198:	e00a      	b.n	a1b0 <d_print_mod_list+0x22c>
    a19a:	460b      	mov	r3, r1
    a19c:	3101      	adds	r1, #1
    a19e:	4556      	cmp	r6, sl
    a1a0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a1a4:	f805 8003 	strb.w	r8, [r5, r3]
    a1a8:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
    a1ac:	f43f af77 	beq.w	a09e <d_print_mod_list+0x11a>
    a1b0:	29ff      	cmp	r1, #255	; 0xff
    a1b2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    a1b6:	d1f0      	bne.n	a19a <d_print_mod_list+0x216>
    a1b8:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a1bc:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
    a1c0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a1c4:	4628      	mov	r0, r5
    a1c6:	4798      	blx	r3
    a1c8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a1cc:	3301      	adds	r3, #1
    a1ce:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a1d2:	2101      	movs	r1, #1
    a1d4:	2300      	movs	r3, #0
    a1d6:	e7e2      	b.n	a19e <d_print_mod_list+0x21a>
    a1d8:	000137e7 	.word	0x000137e7
    a1dc:	000137eb 	.word	0x000137eb
    a1e0:	000137fc 	.word	0x000137fc
    a1e4:	000137ff 	.word	0x000137ff

0000a1e8 <d_print_array_type.isra.9>:
    a1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1ec:	4699      	mov	r9, r3
    a1ee:	4605      	mov	r5, r0
    a1f0:	460f      	mov	r7, r1
    a1f2:	4690      	mov	r8, r2
    a1f4:	b14b      	cbz	r3, a20a <d_print_array_type.isra.9+0x22>
    a1f6:	6898      	ldr	r0, [r3, #8]
    a1f8:	b380      	cbz	r0, a25c <d_print_array_type.isra.9+0x74>
    a1fa:	681b      	ldr	r3, [r3, #0]
    a1fc:	2b00      	cmp	r3, #0
    a1fe:	d1fa      	bne.n	a1f6 <d_print_array_type.isra.9+0xe>
    a200:	464a      	mov	r2, r9
    a202:	4628      	mov	r0, r5
    a204:	4639      	mov	r1, r7
    a206:	f7ff febd 	bl	9f84 <d_print_mod_list>
    a20a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    a20e:	2bff      	cmp	r3, #255	; 0xff
    a210:	d069      	beq.n	a2e6 <d_print_array_type.isra.9+0xfe>
    a212:	1c59      	adds	r1, r3, #1
    a214:	2220      	movs	r2, #32
    a216:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a21a:	54ea      	strb	r2, [r5, r3]
    a21c:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    a220:	29ff      	cmp	r1, #255	; 0xff
    a222:	f000 8095 	beq.w	a350 <d_print_array_type.isra.9+0x168>
    a226:	1c4b      	adds	r3, r1, #1
    a228:	225b      	movs	r2, #91	; 0x5b
    a22a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    a22e:	546a      	strb	r2, [r5, r1]
    a230:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    a234:	f8d8 2000 	ldr.w	r2, [r8]
    a238:	b12a      	cbz	r2, a246 <d_print_array_type.isra.9+0x5e>
    a23a:	4639      	mov	r1, r7
    a23c:	4628      	mov	r0, r5
    a23e:	f7ff fbf1 	bl	9a24 <d_print_comp>
    a242:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    a246:	2bff      	cmp	r3, #255	; 0xff
    a248:	d070      	beq.n	a32c <d_print_array_type.isra.9+0x144>
    a24a:	1c59      	adds	r1, r3, #1
    a24c:	225d      	movs	r2, #93	; 0x5d
    a24e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a252:	54ea      	strb	r2, [r5, r3]
    a254:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    a258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a25c:	685b      	ldr	r3, [r3, #4]
    a25e:	781b      	ldrb	r3, [r3, #0]
    a260:	2b2a      	cmp	r3, #42	; 0x2a
    a262:	f000 8086 	beq.w	a372 <d_print_array_type.isra.9+0x18a>
    a266:	4e47      	ldr	r6, [pc, #284]	; (a384 <d_print_array_type.isra.9+0x19c>)
    a268:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a26c:	f106 0a02 	add.w	sl, r6, #2
    a270:	e00a      	b.n	a288 <d_print_array_type.isra.9+0xa0>
    a272:	460a      	mov	r2, r1
    a274:	4556      	cmp	r6, sl
    a276:	f101 0101 	add.w	r1, r1, #1
    a27a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a27e:	f805 b002 	strb.w	fp, [r5, r2]
    a282:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
    a286:	d01c      	beq.n	a2c2 <d_print_array_type.isra.9+0xda>
    a288:	29ff      	cmp	r1, #255	; 0xff
    a28a:	f816 bf01 	ldrb.w	fp, [r6, #1]!
    a28e:	d1f0      	bne.n	a272 <d_print_array_type.isra.9+0x8a>
    a290:	f04f 0300 	mov.w	r3, #0
    a294:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a298:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
    a29c:	f8d5 4108 	ldr.w	r4, [r5, #264]	; 0x108
    a2a0:	4628      	mov	r0, r5
    a2a2:	47a0      	blx	r4
    a2a4:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
    a2a8:	3201      	adds	r2, #1
    a2aa:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    a2ae:	2200      	movs	r2, #0
    a2b0:	2101      	movs	r1, #1
    a2b2:	4556      	cmp	r6, sl
    a2b4:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
    a2b8:	f805 b002 	strb.w	fp, [r5, r2]
    a2bc:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
    a2c0:	d1e2      	bne.n	a288 <d_print_array_type.isra.9+0xa0>
    a2c2:	4639      	mov	r1, r7
    a2c4:	464a      	mov	r2, r9
    a2c6:	4628      	mov	r0, r5
    a2c8:	2300      	movs	r3, #0
    a2ca:	f7ff fe5b 	bl	9f84 <d_print_mod_list>
    a2ce:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a2d2:	29ff      	cmp	r1, #255	; 0xff
    a2d4:	d019      	beq.n	a30a <d_print_array_type.isra.9+0x122>
    a2d6:	1c4b      	adds	r3, r1, #1
    a2d8:	2229      	movs	r2, #41	; 0x29
    a2da:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    a2de:	546a      	strb	r2, [r5, r1]
    a2e0:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    a2e4:	e793      	b.n	a20e <d_print_array_type.isra.9+0x26>
    a2e6:	2400      	movs	r4, #0
    a2e8:	4619      	mov	r1, r3
    a2ea:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a2ee:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a2f2:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    a2f6:	4628      	mov	r0, r5
    a2f8:	4798      	blx	r3
    a2fa:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a2fe:	1c5a      	adds	r2, r3, #1
    a300:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    a304:	4623      	mov	r3, r4
    a306:	2101      	movs	r1, #1
    a308:	e784      	b.n	a214 <d_print_array_type.isra.9+0x2c>
    a30a:	2400      	movs	r4, #0
    a30c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a310:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    a314:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a318:	4628      	mov	r0, r5
    a31a:	4798      	blx	r3
    a31c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a320:	3301      	adds	r3, #1
    a322:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a326:	4621      	mov	r1, r4
    a328:	2301      	movs	r3, #1
    a32a:	e7d5      	b.n	a2d8 <d_print_array_type.isra.9+0xf0>
    a32c:	2400      	movs	r4, #0
    a32e:	4619      	mov	r1, r3
    a330:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a334:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a338:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    a33c:	4628      	mov	r0, r5
    a33e:	4798      	blx	r3
    a340:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a344:	1c5a      	adds	r2, r3, #1
    a346:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    a34a:	4623      	mov	r3, r4
    a34c:	2101      	movs	r1, #1
    a34e:	e77d      	b.n	a24c <d_print_array_type.isra.9+0x64>
    a350:	2400      	movs	r4, #0
    a352:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    a356:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
    a35a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    a35e:	4628      	mov	r0, r5
    a360:	4798      	blx	r3
    a362:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    a366:	3301      	adds	r3, #1
    a368:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    a36c:	4621      	mov	r1, r4
    a36e:	2301      	movs	r3, #1
    a370:	e75a      	b.n	a228 <d_print_array_type.isra.9+0x40>
    a372:	4603      	mov	r3, r0
    a374:	4639      	mov	r1, r7
    a376:	464a      	mov	r2, r9
    a378:	4628      	mov	r0, r5
    a37a:	f7ff fe03 	bl	9f84 <d_print_mod_list>
    a37e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    a382:	e74d      	b.n	a220 <d_print_array_type.isra.9+0x38>
    a384:	000139d7 	.word	0x000139d7

0000a388 <d_print_function_type.isra.11>:
    a388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a38c:	469a      	mov	sl, r3
    a38e:	4607      	mov	r7, r0
    a390:	4688      	mov	r8, r1
    a392:	4691      	mov	r9, r2
    a394:	2b00      	cmp	r3, #0
    a396:	d03b      	beq.n	a410 <d_print_function_type.isra.11+0x88>
    a398:	689b      	ldr	r3, [r3, #8]
    a39a:	2b00      	cmp	r3, #0
    a39c:	d138      	bne.n	a410 <d_print_function_type.isra.11+0x88>
    a39e:	4654      	mov	r4, sl
    a3a0:	2201      	movs	r2, #1
    a3a2:	e006      	b.n	a3b2 <d_print_function_type.isra.11+0x2a>
    a3a4:	f416 6f60 	tst.w	r6, #3584	; 0xe00
    a3a8:	d17a      	bne.n	a4a0 <d_print_function_type.isra.11+0x118>
    a3aa:	6824      	ldr	r4, [r4, #0]
    a3ac:	b384      	cbz	r4, a410 <d_print_function_type.isra.11+0x88>
    a3ae:	68a3      	ldr	r3, [r4, #8]
    a3b0:	bb73      	cbnz	r3, a410 <d_print_function_type.isra.11+0x88>
    a3b2:	6860      	ldr	r0, [r4, #4]
    a3b4:	4d69      	ldr	r5, [pc, #420]	; (a55c <d_print_function_type.isra.11+0x1d4>)
    a3b6:	7806      	ldrb	r6, [r0, #0]
    a3b8:	3e19      	subs	r6, #25
    a3ba:	b2f6      	uxtb	r6, r6
    a3bc:	2e12      	cmp	r6, #18
    a3be:	d8f4      	bhi.n	a3aa <d_print_function_type.isra.11+0x22>
    a3c0:	fa02 f606 	lsl.w	r6, r2, r6
    a3c4:	4035      	ands	r5, r6
    a3c6:	2d00      	cmp	r5, #0
    a3c8:	d0ec      	beq.n	a3a4 <d_print_function_type.isra.11+0x1c>
    a3ca:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
    a3ce:	2b20      	cmp	r3, #32
    a3d0:	d06c      	beq.n	a4ac <d_print_function_type.isra.11+0x124>
    a3d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    a3d6:	2bff      	cmp	r3, #255	; 0xff
    a3d8:	f000 80ad 	beq.w	a536 <d_print_function_type.isra.11+0x1ae>
    a3dc:	1c59      	adds	r1, r3, #1
    a3de:	2220      	movs	r2, #32
    a3e0:	29ff      	cmp	r1, #255	; 0xff
    a3e2:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
    a3e6:	54fa      	strb	r2, [r7, r3]
    a3e8:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
    a3ec:	d162      	bne.n	a4b4 <d_print_function_type.isra.11+0x12c>
    a3ee:	2400      	movs	r4, #0
    a3f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a3f4:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a3f8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a3fc:	4638      	mov	r0, r7
    a3fe:	4798      	blx	r3
    a400:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a404:	3301      	adds	r3, #1
    a406:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    a40a:	4621      	mov	r1, r4
    a40c:	2301      	movs	r3, #1
    a40e:	e052      	b.n	a4b6 <d_print_function_type.isra.11+0x12e>
    a410:	2300      	movs	r3, #0
    a412:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
    a416:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    a41a:	4641      	mov	r1, r8
    a41c:	4638      	mov	r0, r7
    a41e:	4652      	mov	r2, sl
    a420:	f7ff fdb0 	bl	9f84 <d_print_mod_list>
    a424:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
    a428:	29ff      	cmp	r1, #255	; 0xff
    a42a:	d062      	beq.n	a4f2 <d_print_function_type.isra.11+0x16a>
    a42c:	1c4b      	adds	r3, r1, #1
    a42e:	2228      	movs	r2, #40	; 0x28
    a430:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    a434:	547a      	strb	r2, [r7, r1]
    a436:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
    a43a:	f8d9 2000 	ldr.w	r2, [r9]
    a43e:	b112      	cbz	r2, a446 <d_print_function_type.isra.11+0xbe>
    a440:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
    a444:	b191      	cbz	r1, a46c <d_print_function_type.isra.11+0xe4>
    a446:	2bff      	cmp	r3, #255	; 0xff
    a448:	d018      	beq.n	a47c <d_print_function_type.isra.11+0xf4>
    a44a:	1c5a      	adds	r2, r3, #1
    a44c:	2429      	movs	r4, #41	; 0x29
    a44e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
    a452:	4641      	mov	r1, r8
    a454:	54fc      	strb	r4, [r7, r3]
    a456:	4652      	mov	r2, sl
    a458:	4638      	mov	r0, r7
    a45a:	f887 4104 	strb.w	r4, [r7, #260]	; 0x104
    a45e:	2301      	movs	r3, #1
    a460:	f7ff fd90 	bl	9f84 <d_print_mod_list>
    a464:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
    a468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a46c:	4638      	mov	r0, r7
    a46e:	4641      	mov	r1, r8
    a470:	f7fd f842 	bl	74f8 <d_print_comp.part.10>
    a474:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    a478:	2bff      	cmp	r3, #255	; 0xff
    a47a:	d1e6      	bne.n	a44a <d_print_function_type.isra.11+0xc2>
    a47c:	2400      	movs	r4, #0
    a47e:	4619      	mov	r1, r3
    a480:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a484:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a488:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a48c:	4638      	mov	r0, r7
    a48e:	4798      	blx	r3
    a490:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a494:	1c5a      	adds	r2, r3, #1
    a496:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    a49a:	4623      	mov	r3, r4
    a49c:	2201      	movs	r2, #1
    a49e:	e7d5      	b.n	a44c <d_print_function_type.isra.11+0xc4>
    a4a0:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
    a4a4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    a4a8:	2a28      	cmp	r2, #40	; 0x28
    a4aa:	d190      	bne.n	a3ce <d_print_function_type.isra.11+0x46>
    a4ac:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
    a4b0:	29ff      	cmp	r1, #255	; 0xff
    a4b2:	d09c      	beq.n	a3ee <d_print_function_type.isra.11+0x66>
    a4b4:	1c4b      	adds	r3, r1, #1
    a4b6:	2228      	movs	r2, #40	; 0x28
    a4b8:	2400      	movs	r4, #0
    a4ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    a4be:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
    a4c2:	547a      	strb	r2, [r7, r1]
    a4c4:	4623      	mov	r3, r4
    a4c6:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
    a4ca:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
    a4ce:	4652      	mov	r2, sl
    a4d0:	4638      	mov	r0, r7
    a4d2:	4641      	mov	r1, r8
    a4d4:	f7ff fd56 	bl	9f84 <d_print_mod_list>
    a4d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
    a4dc:	2aff      	cmp	r2, #255	; 0xff
    a4de:	d019      	beq.n	a514 <d_print_function_type.isra.11+0x18c>
    a4e0:	1c51      	adds	r1, r2, #1
    a4e2:	2329      	movs	r3, #41	; 0x29
    a4e4:	29ff      	cmp	r1, #255	; 0xff
    a4e6:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
    a4ea:	54bb      	strb	r3, [r7, r2]
    a4ec:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    a4f0:	d19c      	bne.n	a42c <d_print_function_type.isra.11+0xa4>
    a4f2:	2400      	movs	r4, #0
    a4f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a4f8:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a4fc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a500:	4638      	mov	r0, r7
    a502:	4798      	blx	r3
    a504:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a508:	3301      	adds	r3, #1
    a50a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    a50e:	4621      	mov	r1, r4
    a510:	2301      	movs	r3, #1
    a512:	e78c      	b.n	a42e <d_print_function_type.isra.11+0xa6>
    a514:	4611      	mov	r1, r2
    a516:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a51a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a51e:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a522:	4638      	mov	r0, r7
    a524:	4798      	blx	r3
    a526:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a52a:	3301      	adds	r3, #1
    a52c:	4622      	mov	r2, r4
    a52e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    a532:	2101      	movs	r1, #1
    a534:	e7d5      	b.n	a4e2 <d_print_function_type.isra.11+0x15a>
    a536:	2400      	movs	r4, #0
    a538:	4619      	mov	r1, r3
    a53a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    a53e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    a542:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
    a546:	4638      	mov	r0, r7
    a548:	4798      	blx	r3
    a54a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    a54e:	1c5a      	adds	r2, r3, #1
    a550:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    a554:	4623      	mov	r3, r4
    a556:	2101      	movs	r1, #1
    a558:	e741      	b.n	a3de <d_print_function_type.isra.11+0x56>
    a55a:	bf00      	nop
    a55c:	00043107 	.word	0x00043107

0000a560 <d_print_cast.isra.12>:
    a560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a564:	4615      	mov	r5, r2
    a566:	6812      	ldr	r2, [r2, #0]
    a568:	7813      	ldrb	r3, [r2, #0]
    a56a:	2b04      	cmp	r3, #4
    a56c:	b082      	sub	sp, #8
    a56e:	4604      	mov	r4, r0
    a570:	460e      	mov	r6, r1
    a572:	d006      	beq.n	a582 <d_print_cast.isra.12+0x22>
    a574:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    a578:	2b00      	cmp	r3, #0
    a57a:	d03d      	beq.n	a5f8 <d_print_cast.isra.12+0x98>
    a57c:	b002      	add	sp, #8
    a57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a582:	ab02      	add	r3, sp, #8
    a584:	f8d0 7110 	ldr.w	r7, [r0, #272]	; 0x110
    a588:	f843 7d08 	str.w	r7, [r3, #-8]!
    a58c:	2200      	movs	r2, #0
    a58e:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    a592:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
    a596:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    a59a:	682b      	ldr	r3, [r5, #0]
    a59c:	9301      	str	r3, [sp, #4]
    a59e:	685a      	ldr	r2, [r3, #4]
    a5a0:	2a00      	cmp	r2, #0
    a5a2:	d06f      	beq.n	a684 <d_print_cast.isra.12+0x124>
    a5a4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    a5a8:	2b00      	cmp	r3, #0
    a5aa:	d03f      	beq.n	a62c <d_print_cast.isra.12+0xcc>
    a5ac:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    a5b0:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    a5b4:	2b3c      	cmp	r3, #60	; 0x3c
    a5b6:	d069      	beq.n	a68c <d_print_cast.isra.12+0x12c>
    a5b8:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    a5bc:	2aff      	cmp	r2, #255	; 0xff
    a5be:	d04b      	beq.n	a658 <d_print_cast.isra.12+0xf8>
    a5c0:	1c53      	adds	r3, r2, #1
    a5c2:	213c      	movs	r1, #60	; 0x3c
    a5c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    a5c8:	54a1      	strb	r1, [r4, r2]
    a5ca:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
    a5ce:	682a      	ldr	r2, [r5, #0]
    a5d0:	6892      	ldr	r2, [r2, #8]
    a5d2:	2a00      	cmp	r2, #0
    a5d4:	d052      	beq.n	a67c <d_print_cast.isra.12+0x11c>
    a5d6:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    a5da:	b195      	cbz	r5, a602 <d_print_cast.isra.12+0xa2>
    a5dc:	2bff      	cmp	r3, #255	; 0xff
    a5de:	d029      	beq.n	a634 <d_print_cast.isra.12+0xd4>
    a5e0:	1c59      	adds	r1, r3, #1
    a5e2:	223e      	movs	r2, #62	; 0x3e
    a5e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a5e8:	54e2      	strb	r2, [r4, r3]
    a5ea:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    a5ee:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
    a5f2:	b002      	add	sp, #8
    a5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5f8:	f7fc ff7e 	bl	74f8 <d_print_comp.part.10>
    a5fc:	b002      	add	sp, #8
    a5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a602:	4631      	mov	r1, r6
    a604:	4620      	mov	r0, r4
    a606:	f7fc ff77 	bl	74f8 <d_print_comp.part.10>
    a60a:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    a60e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    a612:	2a3e      	cmp	r2, #62	; 0x3e
    a614:	d1e2      	bne.n	a5dc <d_print_cast.isra.12+0x7c>
    a616:	2bff      	cmp	r3, #255	; 0xff
    a618:	d044      	beq.n	a6a4 <d_print_cast.isra.12+0x144>
    a61a:	461d      	mov	r5, r3
    a61c:	3301      	adds	r3, #1
    a61e:	2220      	movs	r2, #32
    a620:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    a624:	5562      	strb	r2, [r4, r5]
    a626:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    a62a:	e7d7      	b.n	a5dc <d_print_cast.isra.12+0x7c>
    a62c:	f7fc ff64 	bl	74f8 <d_print_comp.part.10>
    a630:	9f00      	ldr	r7, [sp, #0]
    a632:	e7bb      	b.n	a5ac <d_print_cast.isra.12+0x4c>
    a634:	2500      	movs	r5, #0
    a636:	4619      	mov	r1, r3
    a638:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a63c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a640:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a644:	4620      	mov	r0, r4
    a646:	4798      	blx	r3
    a648:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a64c:	1c5a      	adds	r2, r3, #1
    a64e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a652:	462b      	mov	r3, r5
    a654:	2101      	movs	r1, #1
    a656:	e7c4      	b.n	a5e2 <d_print_cast.isra.12+0x82>
    a658:	2700      	movs	r7, #0
    a65a:	4611      	mov	r1, r2
    a65c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a660:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a664:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    a668:	4620      	mov	r0, r4
    a66a:	4798      	blx	r3
    a66c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a670:	3301      	adds	r3, #1
    a672:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a676:	463a      	mov	r2, r7
    a678:	2301      	movs	r3, #1
    a67a:	e7a2      	b.n	a5c2 <d_print_cast.isra.12+0x62>
    a67c:	2201      	movs	r2, #1
    a67e:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    a682:	e7ab      	b.n	a5dc <d_print_cast.isra.12+0x7c>
    a684:	2301      	movs	r3, #1
    a686:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    a68a:	e78f      	b.n	a5ac <d_print_cast.isra.12+0x4c>
    a68c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a690:	29ff      	cmp	r1, #255	; 0xff
    a692:	d017      	beq.n	a6c4 <d_print_cast.isra.12+0x164>
    a694:	1c4a      	adds	r2, r1, #1
    a696:	2320      	movs	r3, #32
    a698:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a69c:	5463      	strb	r3, [r4, r1]
    a69e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a6a2:	e78b      	b.n	a5bc <d_print_cast.isra.12+0x5c>
    a6a4:	4619      	mov	r1, r3
    a6a6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    a6aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a6ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a6b2:	4620      	mov	r0, r4
    a6b4:	4798      	blx	r3
    a6b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a6ba:	3301      	adds	r3, #1
    a6bc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a6c0:	2301      	movs	r3, #1
    a6c2:	e7ac      	b.n	a61e <d_print_cast.isra.12+0xbe>
    a6c4:	2700      	movs	r7, #0
    a6c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a6ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a6ce:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    a6d2:	4620      	mov	r0, r4
    a6d4:	4798      	blx	r3
    a6d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a6da:	3301      	adds	r3, #1
    a6dc:	4639      	mov	r1, r7
    a6de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a6e2:	2201      	movs	r2, #1
    a6e4:	e7d7      	b.n	a696 <d_print_cast.isra.12+0x136>
    a6e6:	bf00      	nop

0000a6e8 <d_print_expr_op>:
    a6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a6ec:	7815      	ldrb	r5, [r2, #0]
    a6ee:	2d31      	cmp	r5, #49	; 0x31
    a6f0:	4604      	mov	r4, r0
    a6f2:	d008      	beq.n	a706 <d_print_expr_op+0x1e>
    a6f4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    a6f8:	b10b      	cbz	r3, a6fe <d_print_expr_op+0x16>
    a6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a6fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a702:	f7fc bef9 	b.w	74f8 <d_print_comp.part.10>
    a706:	6853      	ldr	r3, [r2, #4]
    a708:	689f      	ldr	r7, [r3, #8]
    a70a:	f8d3 9004 	ldr.w	r9, [r3, #4]
    a70e:	2f00      	cmp	r7, #0
    a710:	d0f3      	beq.n	a6fa <d_print_expr_op+0x12>
    a712:	2500      	movs	r5, #0
    a714:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a718:	46a8      	mov	r8, r5
    a71a:	e009      	b.n	a730 <d_print_expr_op+0x48>
    a71c:	460b      	mov	r3, r1
    a71e:	3101      	adds	r1, #1
    a720:	3501      	adds	r5, #1
    a722:	42af      	cmp	r7, r5
    a724:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a728:	54e6      	strb	r6, [r4, r3]
    a72a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    a72e:	d013      	beq.n	a758 <d_print_expr_op+0x70>
    a730:	29ff      	cmp	r1, #255	; 0xff
    a732:	f819 6005 	ldrb.w	r6, [r9, r5]
    a736:	d1f1      	bne.n	a71c <d_print_expr_op+0x34>
    a738:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a73c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    a740:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a744:	4620      	mov	r0, r4
    a746:	4798      	blx	r3
    a748:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a74c:	3301      	adds	r3, #1
    a74e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a752:	2101      	movs	r1, #1
    a754:	2300      	movs	r3, #0
    a756:	e7e3      	b.n	a720 <d_print_expr_op+0x38>
    a758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a75c <d_print_subexpr>:
    a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a75e:	7813      	ldrb	r3, [r2, #0]
    a760:	2b01      	cmp	r3, #1
    a762:	4615      	mov	r5, r2
    a764:	460f      	mov	r7, r1
    a766:	4604      	mov	r4, r0
    a768:	d914      	bls.n	a794 <d_print_subexpr+0x38>
    a76a:	2b30      	cmp	r3, #48	; 0x30
    a76c:	d012      	beq.n	a794 <d_print_subexpr+0x38>
    a76e:	2b06      	cmp	r3, #6
    a770:	d010      	beq.n	a794 <d_print_subexpr+0x38>
    a772:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    a776:	2bff      	cmp	r3, #255	; 0xff
    a778:	d034      	beq.n	a7e4 <d_print_subexpr+0x88>
    a77a:	1c59      	adds	r1, r3, #1
    a77c:	2228      	movs	r2, #40	; 0x28
    a77e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    a782:	54e2      	strb	r2, [r4, r3]
    a784:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    a788:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    a78c:	2600      	movs	r6, #0
    a78e:	b133      	cbz	r3, a79e <d_print_subexpr+0x42>
    a790:	b166      	cbz	r6, a7ac <d_print_subexpr+0x50>
    a792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a794:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    a798:	2601      	movs	r6, #1
    a79a:	2b00      	cmp	r3, #0
    a79c:	d1f8      	bne.n	a790 <d_print_subexpr+0x34>
    a79e:	4639      	mov	r1, r7
    a7a0:	462a      	mov	r2, r5
    a7a2:	4620      	mov	r0, r4
    a7a4:	f7fc fea8 	bl	74f8 <d_print_comp.part.10>
    a7a8:	2e00      	cmp	r6, #0
    a7aa:	d1f2      	bne.n	a792 <d_print_subexpr+0x36>
    a7ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    a7b0:	29ff      	cmp	r1, #255	; 0xff
    a7b2:	d007      	beq.n	a7c4 <d_print_subexpr+0x68>
    a7b4:	1c4a      	adds	r2, r1, #1
    a7b6:	2329      	movs	r3, #41	; 0x29
    a7b8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    a7bc:	5463      	strb	r3, [r4, r1]
    a7be:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    a7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a7c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a7c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a7cc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    a7d0:	4620      	mov	r0, r4
    a7d2:	4798      	blx	r3
    a7d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a7d8:	3301      	adds	r3, #1
    a7da:	4631      	mov	r1, r6
    a7dc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    a7e0:	2201      	movs	r2, #1
    a7e2:	e7e8      	b.n	a7b6 <d_print_subexpr+0x5a>
    a7e4:	2600      	movs	r6, #0
    a7e6:	4619      	mov	r1, r3
    a7e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    a7ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a7f0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    a7f4:	4798      	blx	r3
    a7f6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a7fa:	1c5a      	adds	r2, r3, #1
    a7fc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a800:	4633      	mov	r3, r6
    a802:	2101      	movs	r1, #1
    a804:	e7ba      	b.n	a77c <d_print_subexpr+0x20>
    a806:	bf00      	nop

0000a808 <d_demangle_callback.constprop.16>:
    a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a80c:	b0d7      	sub	sp, #348	; 0x15c
    a80e:	4604      	mov	r4, r0
    a810:	7805      	ldrb	r5, [r0, #0]
    a812:	2d5f      	cmp	r5, #95	; 0x5f
    a814:	af00      	add	r7, sp, #0
    a816:	460e      	mov	r6, r1
    a818:	4690      	mov	r8, r2
    a81a:	d072      	beq.n	a902 <d_demangle_callback.constprop.16+0xfa>
    a81c:	4620      	mov	r0, r4
    a81e:	497c      	ldr	r1, [pc, #496]	; (aa10 <d_demangle_callback.constprop.16+0x208>)
    a820:	2208      	movs	r2, #8
    a822:	f004 f9a7 	bl	eb74 <strncmp>
    a826:	b978      	cbnz	r0, a848 <d_demangle_callback.constprop.16+0x40>
    a828:	7a23      	ldrb	r3, [r4, #8]
    a82a:	2b2e      	cmp	r3, #46	; 0x2e
    a82c:	d005      	beq.n	a83a <d_demangle_callback.constprop.16+0x32>
    a82e:	2b5f      	cmp	r3, #95	; 0x5f
    a830:	d003      	beq.n	a83a <d_demangle_callback.constprop.16+0x32>
    a832:	2b24      	cmp	r3, #36	; 0x24
    a834:	d001      	beq.n	a83a <d_demangle_callback.constprop.16+0x32>
    a836:	4681      	mov	r9, r0
    a838:	e008      	b.n	a84c <d_demangle_callback.constprop.16+0x44>
    a83a:	7a63      	ldrb	r3, [r4, #9]
    a83c:	2b44      	cmp	r3, #68	; 0x44
    a83e:	f000 80df 	beq.w	aa00 <d_demangle_callback.constprop.16+0x1f8>
    a842:	2b49      	cmp	r3, #73	; 0x49
    a844:	f000 8098 	beq.w	a978 <d_demangle_callback.constprop.16+0x170>
    a848:	f04f 0900 	mov.w	r9, #0
    a84c:	4620      	mov	r0, r4
    a84e:	f7f7 ff25 	bl	269c <strlen>
    a852:	0042      	lsls	r2, r0, #1
    a854:	0083      	lsls	r3, r0, #2
    a856:	1899      	adds	r1, r3, r2
    a858:	0089      	lsls	r1, r1, #2
    a85a:	3108      	adds	r1, #8
    a85c:	330a      	adds	r3, #10
    a85e:	ebad 0d01 	sub.w	sp, sp, r1
    a862:	f023 0307 	bic.w	r3, r3, #7
    a866:	46ea      	mov	sl, sp
    a868:	eb04 0c00 	add.w	ip, r4, r0
    a86c:	ebad 0d03 	sub.w	sp, sp, r3
    a870:	f04f 0b11 	mov.w	fp, #17
    a874:	2300      	movs	r3, #0
    a876:	f1b9 0f01 	cmp.w	r9, #1
    a87a:	f8c7 a010 	str.w	sl, [r7, #16]
    a87e:	f8c7 d01c 	str.w	sp, [r7, #28]
    a882:	61ba      	str	r2, [r7, #24]
    a884:	603c      	str	r4, [r7, #0]
    a886:	60fc      	str	r4, [r7, #12]
    a888:	6278      	str	r0, [r7, #36]	; 0x24
    a88a:	f8c7 c004 	str.w	ip, [r7, #4]
    a88e:	f8c7 b008 	str.w	fp, [r7, #8]
    a892:	617b      	str	r3, [r7, #20]
    a894:	623b      	str	r3, [r7, #32]
    a896:	62bb      	str	r3, [r7, #40]	; 0x28
    a898:	62fb      	str	r3, [r7, #44]	; 0x2c
    a89a:	633b      	str	r3, [r7, #48]	; 0x30
    a89c:	d037      	beq.n	a90e <d_demangle_callback.constprop.16+0x106>
    a89e:	d373      	bcc.n	a988 <d_demangle_callback.constprop.16+0x180>
    a8a0:	f1b9 0f03 	cmp.w	r9, #3
    a8a4:	d870      	bhi.n	a988 <d_demangle_callback.constprop.16+0x180>
    a8a6:	7ae2      	ldrb	r2, [r4, #11]
    a8a8:	f1b9 0f02 	cmp.w	r9, #2
    a8ac:	f104 050b 	add.w	r5, r4, #11
    a8b0:	bf14      	ite	ne
    a8b2:	f04f 0943 	movne.w	r9, #67	; 0x43
    a8b6:	f04f 0942 	moveq.w	r9, #66	; 0x42
    a8ba:	2a5f      	cmp	r2, #95	; 0x5f
    a8bc:	60fd      	str	r5, [r7, #12]
    a8be:	d103      	bne.n	a8c8 <d_demangle_callback.constprop.16+0xc0>
    a8c0:	7b22      	ldrb	r2, [r4, #12]
    a8c2:	2a5a      	cmp	r2, #90	; 0x5a
    a8c4:	f000 8091 	beq.w	a9ea <d_demangle_callback.constprop.16+0x1e2>
    a8c8:	4628      	mov	r0, r5
    a8ca:	f7f7 fee7 	bl	269c <strlen>
    a8ce:	4629      	mov	r1, r5
    a8d0:	4602      	mov	r2, r0
    a8d2:	4638      	mov	r0, r7
    a8d4:	f7fa fd98 	bl	5408 <d_make_name>
    a8d8:	4602      	mov	r2, r0
    a8da:	4649      	mov	r1, r9
    a8dc:	2300      	movs	r3, #0
    a8de:	4638      	mov	r0, r7
    a8e0:	f7fa fd46 	bl	5370 <d_make_comp>
    a8e4:	68fc      	ldr	r4, [r7, #12]
    a8e6:	4681      	mov	r9, r0
    a8e8:	4620      	mov	r0, r4
    a8ea:	f7f7 fed7 	bl	269c <strlen>
    a8ee:	1823      	adds	r3, r4, r0
    a8f0:	60fb      	str	r3, [r7, #12]
    a8f2:	5c25      	ldrb	r5, [r4, r0]
    a8f4:	b185      	cbz	r5, a918 <d_demangle_callback.constprop.16+0x110>
    a8f6:	2000      	movs	r0, #0
    a8f8:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
    a8fc:	46bd      	mov	sp, r7
    a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a902:	7843      	ldrb	r3, [r0, #1]
    a904:	2b5a      	cmp	r3, #90	; 0x5a
    a906:	d189      	bne.n	a81c <d_demangle_callback.constprop.16+0x14>
    a908:	f04f 0901 	mov.w	r9, #1
    a90c:	e79e      	b.n	a84c <d_demangle_callback.constprop.16+0x44>
    a90e:	2d5f      	cmp	r5, #95	; 0x5f
    a910:	d041      	beq.n	a996 <d_demangle_callback.constprop.16+0x18e>
    a912:	4699      	mov	r9, r3
    a914:	2d00      	cmp	r5, #0
    a916:	d1ee      	bne.n	a8f6 <d_demangle_callback.constprop.16+0xee>
    a918:	f1b9 0f00 	cmp.w	r9, #0
    a91c:	d063      	beq.n	a9e6 <d_demangle_callback.constprop.16+0x1de>
    a91e:	f107 0434 	add.w	r4, r7, #52	; 0x34
    a922:	464a      	mov	r2, r9
    a924:	4620      	mov	r0, r4
    a926:	2111      	movs	r1, #17
    a928:	f8c7 5134 	str.w	r5, [r7, #308]	; 0x134
    a92c:	f887 5138 	strb.w	r5, [r7, #312]	; 0x138
    a930:	f8c7 5144 	str.w	r5, [r7, #324]	; 0x144
    a934:	f8c7 5148 	str.w	r5, [r7, #328]	; 0x148
    a938:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
    a93c:	f8c7 5154 	str.w	r5, [r7, #340]	; 0x154
    a940:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
    a944:	f8c7 8140 	str.w	r8, [r7, #320]	; 0x140
    a948:	f8c7 514c 	str.w	r5, [r7, #332]	; 0x14c
    a94c:	f7fc fdd4 	bl	74f8 <d_print_comp.part.10>
    a950:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
    a954:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
    a958:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
    a95c:	5465      	strb	r5, [r4, r1]
    a95e:	4620      	mov	r0, r4
    a960:	4798      	blx	r3
    a962:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
    a966:	f1d0 0001 	rsbs	r0, r0, #1
    a96a:	bf38      	it	cc
    a96c:	2000      	movcc	r0, #0
    a96e:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
    a972:	46bd      	mov	sp, r7
    a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a978:	7aa3      	ldrb	r3, [r4, #10]
    a97a:	2b5f      	cmp	r3, #95	; 0x5f
    a97c:	bf14      	ite	ne
    a97e:	f04f 0900 	movne.w	r9, #0
    a982:	f04f 0902 	moveq.w	r9, #2
    a986:	e761      	b.n	a84c <d_demangle_callback.constprop.16+0x44>
    a988:	4638      	mov	r0, r7
    a98a:	f7fb fa9f 	bl	5ecc <d_type>
    a98e:	68fb      	ldr	r3, [r7, #12]
    a990:	4681      	mov	r9, r0
    a992:	781d      	ldrb	r5, [r3, #0]
    a994:	e7ae      	b.n	a8f4 <d_demangle_callback.constprop.16+0xec>
    a996:	7865      	ldrb	r5, [r4, #1]
    a998:	1c62      	adds	r2, r4, #1
    a99a:	2d5a      	cmp	r5, #90	; 0x5a
    a99c:	60fa      	str	r2, [r7, #12]
    a99e:	d1b8      	bne.n	a912 <d_demangle_callback.constprop.16+0x10a>
    a9a0:	4649      	mov	r1, r9
    a9a2:	3402      	adds	r4, #2
    a9a4:	4638      	mov	r0, r7
    a9a6:	60fc      	str	r4, [r7, #12]
    a9a8:	f7fb fe76 	bl	6698 <d_encoding>
    a9ac:	68bb      	ldr	r3, [r7, #8]
    a9ae:	f013 0f01 	tst.w	r3, #1
    a9b2:	68fb      	ldr	r3, [r7, #12]
    a9b4:	4681      	mov	r9, r0
    a9b6:	781d      	ldrb	r5, [r3, #0]
    a9b8:	d112      	bne.n	a9e0 <d_demangle_callback.constprop.16+0x1d8>
    a9ba:	e79b      	b.n	a8f4 <d_demangle_callback.constprop.16+0xec>
    a9bc:	785b      	ldrb	r3, [r3, #1]
    a9be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    a9c2:	2a19      	cmp	r2, #25
    a9c4:	4638      	mov	r0, r7
    a9c6:	4649      	mov	r1, r9
    a9c8:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    a9cc:	d903      	bls.n	a9d6 <d_demangle_callback.constprop.16+0x1ce>
    a9ce:	2b5f      	cmp	r3, #95	; 0x5f
    a9d0:	d001      	beq.n	a9d6 <d_demangle_callback.constprop.16+0x1ce>
    a9d2:	2c09      	cmp	r4, #9
    a9d4:	d811      	bhi.n	a9fa <d_demangle_callback.constprop.16+0x1f2>
    a9d6:	f7fa fda7 	bl	5528 <d_clone_suffix>
    a9da:	68fb      	ldr	r3, [r7, #12]
    a9dc:	781d      	ldrb	r5, [r3, #0]
    a9de:	4681      	mov	r9, r0
    a9e0:	2d2e      	cmp	r5, #46	; 0x2e
    a9e2:	d0eb      	beq.n	a9bc <d_demangle_callback.constprop.16+0x1b4>
    a9e4:	e786      	b.n	a8f4 <d_demangle_callback.constprop.16+0xec>
    a9e6:	4648      	mov	r0, r9
    a9e8:	e786      	b.n	a8f8 <d_demangle_callback.constprop.16+0xf0>
    a9ea:	340d      	adds	r4, #13
    a9ec:	4619      	mov	r1, r3
    a9ee:	4638      	mov	r0, r7
    a9f0:	60fc      	str	r4, [r7, #12]
    a9f2:	f7fb fe51 	bl	6698 <d_encoding>
    a9f6:	4602      	mov	r2, r0
    a9f8:	e76f      	b.n	a8da <d_demangle_callback.constprop.16+0xd2>
    a9fa:	68fb      	ldr	r3, [r7, #12]
    a9fc:	781d      	ldrb	r5, [r3, #0]
    a9fe:	e779      	b.n	a8f4 <d_demangle_callback.constprop.16+0xec>
    aa00:	7aa3      	ldrb	r3, [r4, #10]
    aa02:	2b5f      	cmp	r3, #95	; 0x5f
    aa04:	bf0c      	ite	eq
    aa06:	f04f 0903 	moveq.w	r9, #3
    aa0a:	f04f 0900 	movne.w	r9, #0
    aa0e:	e71d      	b.n	a84c <d_demangle_callback.constprop.16+0x44>
    aa10:	0001378c 	.word	0x0001378c

0000aa14 <__cxa_demangle>:
    aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa18:	460d      	mov	r5, r1
    aa1a:	b084      	sub	sp, #16
    aa1c:	4617      	mov	r7, r2
    aa1e:	461e      	mov	r6, r3
    aa20:	2800      	cmp	r0, #0
    aa22:	d02e      	beq.n	aa82 <__cxa_demangle+0x6e>
    aa24:	b109      	cbz	r1, aa2a <__cxa_demangle+0x16>
    aa26:	2a00      	cmp	r2, #0
    aa28:	d02b      	beq.n	aa82 <__cxa_demangle+0x6e>
    aa2a:	2400      	movs	r4, #0
    aa2c:	4929      	ldr	r1, [pc, #164]	; (aad4 <__cxa_demangle+0xc0>)
    aa2e:	9400      	str	r4, [sp, #0]
    aa30:	466a      	mov	r2, sp
    aa32:	9401      	str	r4, [sp, #4]
    aa34:	9402      	str	r4, [sp, #8]
    aa36:	9403      	str	r4, [sp, #12]
    aa38:	f7ff fee6 	bl	a808 <d_demangle_callback.constprop.16>
    aa3c:	2800      	cmp	r0, #0
    aa3e:	d03e      	beq.n	aabe <__cxa_demangle+0xaa>
    aa40:	9b03      	ldr	r3, [sp, #12]
    aa42:	b1db      	cbz	r3, aa7c <__cxa_demangle+0x68>
    aa44:	f04f 0801 	mov.w	r8, #1
    aa48:	9c00      	ldr	r4, [sp, #0]
    aa4a:	b344      	cbz	r4, aa9e <__cxa_demangle+0x8a>
    aa4c:	2d00      	cmp	r5, #0
    aa4e:	d033      	beq.n	aab8 <__cxa_demangle+0xa4>
    aa50:	4620      	mov	r0, r4
    aa52:	f7f7 fe23 	bl	269c <strlen>
    aa56:	683b      	ldr	r3, [r7, #0]
    aa58:	4298      	cmp	r0, r3
    aa5a:	d21a      	bcs.n	aa92 <__cxa_demangle+0x7e>
    aa5c:	1c42      	adds	r2, r0, #1
    aa5e:	4621      	mov	r1, r4
    aa60:	4628      	mov	r0, r5
    aa62:	f003 fb95 	bl	e190 <memcpy>
    aa66:	4620      	mov	r0, r4
    aa68:	f003 f872 	bl	db50 <free>
    aa6c:	462c      	mov	r4, r5
    aa6e:	b30e      	cbz	r6, aab4 <__cxa_demangle+0xa0>
    aa70:	2300      	movs	r3, #0
    aa72:	4620      	mov	r0, r4
    aa74:	6033      	str	r3, [r6, #0]
    aa76:	b004      	add	sp, #16
    aa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa7c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    aa80:	e7e2      	b.n	aa48 <__cxa_demangle+0x34>
    aa82:	b19e      	cbz	r6, aaac <__cxa_demangle+0x98>
    aa84:	f06f 0302 	mvn.w	r3, #2
    aa88:	2000      	movs	r0, #0
    aa8a:	6033      	str	r3, [r6, #0]
    aa8c:	b004      	add	sp, #16
    aa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa92:	4628      	mov	r0, r5
    aa94:	f003 f85c 	bl	db50 <free>
    aa98:	f8c7 8000 	str.w	r8, [r7]
    aa9c:	e7e7      	b.n	aa6e <__cxa_demangle+0x5a>
    aa9e:	b12e      	cbz	r6, aaac <__cxa_demangle+0x98>
    aaa0:	f1b8 0f01 	cmp.w	r8, #1
    aaa4:	d011      	beq.n	aaca <__cxa_demangle+0xb6>
    aaa6:	f06f 0301 	mvn.w	r3, #1
    aaaa:	6033      	str	r3, [r6, #0]
    aaac:	2000      	movs	r0, #0
    aaae:	b004      	add	sp, #16
    aab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aab4:	4620      	mov	r0, r4
    aab6:	e7de      	b.n	aa76 <__cxa_demangle+0x62>
    aab8:	2f00      	cmp	r7, #0
    aaba:	d1ed      	bne.n	aa98 <__cxa_demangle+0x84>
    aabc:	e7d7      	b.n	aa6e <__cxa_demangle+0x5a>
    aabe:	9800      	ldr	r0, [sp, #0]
    aac0:	f003 f846 	bl	db50 <free>
    aac4:	2e00      	cmp	r6, #0
    aac6:	d1ee      	bne.n	aaa6 <__cxa_demangle+0x92>
    aac8:	e7f0      	b.n	aaac <__cxa_demangle+0x98>
    aaca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aace:	4620      	mov	r0, r4
    aad0:	6033      	str	r3, [r6, #0]
    aad2:	e7d0      	b.n	aa76 <__cxa_demangle+0x62>
    aad4:	00005a09 	.word	0x00005a09

0000aad8 <__gcclibcxx_demangle_callback>:
    aad8:	b508      	push	{r3, lr}
    aada:	b140      	cbz	r0, aaee <__gcclibcxx_demangle_callback+0x16>
    aadc:	b139      	cbz	r1, aaee <__gcclibcxx_demangle_callback+0x16>
    aade:	f7ff fe93 	bl	a808 <d_demangle_callback.constprop.16>
    aae2:	2800      	cmp	r0, #0
    aae4:	bf14      	ite	ne
    aae6:	2000      	movne	r0, #0
    aae8:	f06f 0001 	mvneq.w	r0, #1
    aaec:	bd08      	pop	{r3, pc}
    aaee:	f06f 0002 	mvn.w	r0, #2
    aaf2:	bd08      	pop	{r3, pc}

0000aaf4 <__cxa_current_exception_type>:
    aaf4:	b508      	push	{r3, lr}
    aaf6:	f7f9 fec5 	bl	4884 <__cxa_get_globals>
    aafa:	6800      	ldr	r0, [r0, #0]
    aafc:	b130      	cbz	r0, ab0c <__cxa_current_exception_type+0x18>
    aafe:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    ab02:	2b01      	cmp	r3, #1
    ab04:	bf04      	itt	eq
    ab06:	6800      	ldreq	r0, [r0, #0]
    ab08:	3878      	subeq	r0, #120	; 0x78
    ab0a:	6800      	ldr	r0, [r0, #0]
    ab0c:	bd08      	pop	{r3, pc}
    ab0e:	bf00      	nop

0000ab10 <cos>:
    ab10:	b570      	push	{r4, r5, r6, lr}
    ab12:	4e1a      	ldr	r6, [pc, #104]	; (ab7c <cos+0x6c>)
    ab14:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    ab18:	42b4      	cmp	r4, r6
    ab1a:	b086      	sub	sp, #24
    ab1c:	4602      	mov	r2, r0
    ab1e:	460b      	mov	r3, r1
    ab20:	dd19      	ble.n	ab56 <cos+0x46>
    ab22:	4d17      	ldr	r5, [pc, #92]	; (ab80 <cos+0x70>)
    ab24:	42ac      	cmp	r4, r5
    ab26:	dd03      	ble.n	ab30 <cos+0x20>
    ab28:	f001 f9a8 	bl	be7c <__aeabi_dsub>
    ab2c:	b006      	add	sp, #24
    ab2e:	bd70      	pop	{r4, r5, r6, pc}
    ab30:	aa02      	add	r2, sp, #8
    ab32:	f000 f905 	bl	ad40 <__ieee754_rem_pio2>
    ab36:	f000 0403 	and.w	r4, r0, #3
    ab3a:	2c01      	cmp	r4, #1
    ab3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ab40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ab44:	d013      	beq.n	ab6e <cos+0x5e>
    ab46:	2c02      	cmp	r4, #2
    ab48:	d00b      	beq.n	ab62 <cos+0x52>
    ab4a:	b1a4      	cbz	r4, ab76 <cos+0x66>
    ab4c:	2401      	movs	r4, #1
    ab4e:	9400      	str	r4, [sp, #0]
    ab50:	f001 f816 	bl	bb80 <__kernel_sin>
    ab54:	e7ea      	b.n	ab2c <cos+0x1c>
    ab56:	2200      	movs	r2, #0
    ab58:	2300      	movs	r3, #0
    ab5a:	f000 fb11 	bl	b180 <__kernel_cos>
    ab5e:	b006      	add	sp, #24
    ab60:	bd70      	pop	{r4, r5, r6, pc}
    ab62:	f000 fb0d 	bl	b180 <__kernel_cos>
    ab66:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    ab6a:	b006      	add	sp, #24
    ab6c:	bd70      	pop	{r4, r5, r6, pc}
    ab6e:	9400      	str	r4, [sp, #0]
    ab70:	f001 f806 	bl	bb80 <__kernel_sin>
    ab74:	e7f7      	b.n	ab66 <cos+0x56>
    ab76:	f000 fb03 	bl	b180 <__kernel_cos>
    ab7a:	e7d7      	b.n	ab2c <cos+0x1c>
    ab7c:	3fe921fb 	.word	0x3fe921fb
    ab80:	7fefffff 	.word	0x7fefffff
    ab84:	ffffffff 	.word	0xffffffff

0000ab88 <floor>:
    ab88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab8c:	f3c1 570a 	ubfx	r7, r1, #20, #11
    ab90:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    ab94:	2e13      	cmp	r6, #19
    ab96:	4602      	mov	r2, r0
    ab98:	460b      	mov	r3, r1
    ab9a:	4604      	mov	r4, r0
    ab9c:	460d      	mov	r5, r1
    ab9e:	4689      	mov	r9, r1
    aba0:	468a      	mov	sl, r1
    aba2:	4680      	mov	r8, r0
    aba4:	dc1c      	bgt.n	abe0 <floor+0x58>
    aba6:	2e00      	cmp	r6, #0
    aba8:	db40      	blt.n	ac2c <floor+0xa4>
    abaa:	4f3d      	ldr	r7, [pc, #244]	; (aca0 <floor+0x118>)
    abac:	4137      	asrs	r7, r6
    abae:	ea07 0c01 	and.w	ip, r7, r1
    abb2:	ea5c 0c00 	orrs.w	ip, ip, r0
    abb6:	d018      	beq.n	abea <floor+0x62>
    abb8:	a337      	add	r3, pc, #220	; (adr r3, ac98 <floor+0x110>)
    abba:	e9d3 2300 	ldrd	r2, r3, [r3]
    abbe:	f001 f95f 	bl	be80 <__adddf3>
    abc2:	2200      	movs	r2, #0
    abc4:	2300      	movs	r3, #0
    abc6:	f001 fd9d 	bl	c704 <__aeabi_dcmpgt>
    abca:	b128      	cbz	r0, abd8 <floor+0x50>
    abcc:	2d00      	cmp	r5, #0
    abce:	db42      	blt.n	ac56 <floor+0xce>
    abd0:	ea2a 0907 	bic.w	r9, sl, r7
    abd4:	f04f 0800 	mov.w	r8, #0
    abd8:	4640      	mov	r0, r8
    abda:	4649      	mov	r1, r9
    abdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abe0:	2e33      	cmp	r6, #51	; 0x33
    abe2:	dd06      	ble.n	abf2 <floor+0x6a>
    abe4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    abe8:	d031      	beq.n	ac4e <floor+0xc6>
    abea:	4610      	mov	r0, r2
    abec:	4619      	mov	r1, r3
    abee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abf2:	f2a7 4c13 	subw	ip, r7, #1043	; 0x413
    abf6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    abfa:	fa2b fb0c 	lsr.w	fp, fp, ip
    abfe:	ea1b 0f00 	tst.w	fp, r0
    ac02:	d0f2      	beq.n	abea <floor+0x62>
    ac04:	a324      	add	r3, pc, #144	; (adr r3, ac98 <floor+0x110>)
    ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac0a:	f001 f939 	bl	be80 <__adddf3>
    ac0e:	2200      	movs	r2, #0
    ac10:	2300      	movs	r3, #0
    ac12:	f001 fd77 	bl	c704 <__aeabi_dcmpgt>
    ac16:	2800      	cmp	r0, #0
    ac18:	d0de      	beq.n	abd8 <floor+0x50>
    ac1a:	2d00      	cmp	r5, #0
    ac1c:	db22      	blt.n	ac64 <floor+0xdc>
    ac1e:	ea28 080b 	bic.w	r8, r8, fp
    ac22:	46d1      	mov	r9, sl
    ac24:	4640      	mov	r0, r8
    ac26:	4649      	mov	r1, r9
    ac28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac2c:	a31a      	add	r3, pc, #104	; (adr r3, ac98 <floor+0x110>)
    ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac32:	f001 f925 	bl	be80 <__adddf3>
    ac36:	2200      	movs	r2, #0
    ac38:	2300      	movs	r3, #0
    ac3a:	f001 fd63 	bl	c704 <__aeabi_dcmpgt>
    ac3e:	2800      	cmp	r0, #0
    ac40:	d0ca      	beq.n	abd8 <floor+0x50>
    ac42:	2d00      	cmp	r5, #0
    ac44:	db1c      	blt.n	ac80 <floor+0xf8>
    ac46:	f04f 0800 	mov.w	r8, #0
    ac4a:	46c1      	mov	r9, r8
    ac4c:	e7c4      	b.n	abd8 <floor+0x50>
    ac4e:	f001 f917 	bl	be80 <__adddf3>
    ac52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac56:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    ac5a:	fa4a f606 	asr.w	r6, sl, r6
    ac5e:	eb06 0a05 	add.w	sl, r6, r5
    ac62:	e7b5      	b.n	abd0 <floor+0x48>
    ac64:	2e14      	cmp	r6, #20
    ac66:	d014      	beq.n	ac92 <floor+0x10a>
    ac68:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
    ac6c:	2301      	movs	r3, #1
    ac6e:	3703      	adds	r7, #3
    ac70:	fa03 f707 	lsl.w	r7, r3, r7
    ac74:	eb17 0804 	adds.w	r8, r7, r4
    ac78:	bf28      	it	cs
    ac7a:	eb05 0a03 	addcs.w	sl, r5, r3
    ac7e:	e7ce      	b.n	ac1e <floor+0x96>
    ac80:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
    ac84:	4b07      	ldr	r3, [pc, #28]	; (aca4 <floor+0x11c>)
    ac86:	4322      	orrs	r2, r4
    ac88:	bf18      	it	ne
    ac8a:	4699      	movne	r9, r3
    ac8c:	f04f 0800 	mov.w	r8, #0
    ac90:	e7a2      	b.n	abd8 <floor+0x50>
    ac92:	f105 0a01 	add.w	sl, r5, #1
    ac96:	e7c2      	b.n	ac1e <floor+0x96>
    ac98:	8800759c 	.word	0x8800759c
    ac9c:	7e37e43c 	.word	0x7e37e43c
    aca0:	000fffff 	.word	0x000fffff
    aca4:	bff00000 	.word	0xbff00000

0000aca8 <sin>:
    aca8:	b570      	push	{r4, r5, r6, lr}
    acaa:	4e22      	ldr	r6, [pc, #136]	; (ad34 <sin+0x8c>)
    acac:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    acb0:	42b4      	cmp	r4, r6
    acb2:	b086      	sub	sp, #24
    acb4:	4602      	mov	r2, r0
    acb6:	460b      	mov	r3, r1
    acb8:	dd1a      	ble.n	acf0 <sin+0x48>
    acba:	4d1f      	ldr	r5, [pc, #124]	; (ad38 <sin+0x90>)
    acbc:	42ac      	cmp	r4, r5
    acbe:	dd03      	ble.n	acc8 <sin+0x20>
    acc0:	f001 f8dc 	bl	be7c <__aeabi_dsub>
    acc4:	b006      	add	sp, #24
    acc6:	bd70      	pop	{r4, r5, r6, pc}
    acc8:	aa02      	add	r2, sp, #8
    acca:	f000 f839 	bl	ad40 <__ieee754_rem_pio2>
    acce:	f000 0003 	and.w	r0, r0, #3
    acd2:	2801      	cmp	r0, #1
    acd4:	d01d      	beq.n	ad12 <sin+0x6a>
    acd6:	2802      	cmp	r0, #2
    acd8:	d012      	beq.n	ad00 <sin+0x58>
    acda:	b308      	cbz	r0, ad20 <sin+0x78>
    acdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ace0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ace4:	f000 fa4c 	bl	b180 <__kernel_cos>
    ace8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    acec:	b006      	add	sp, #24
    acee:	bd70      	pop	{r4, r5, r6, pc}
    acf0:	2300      	movs	r3, #0
    acf2:	9300      	str	r3, [sp, #0]
    acf4:	2200      	movs	r2, #0
    acf6:	2300      	movs	r3, #0
    acf8:	f000 ff42 	bl	bb80 <__kernel_sin>
    acfc:	b006      	add	sp, #24
    acfe:	bd70      	pop	{r4, r5, r6, pc}
    ad00:	2401      	movs	r4, #1
    ad02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ad06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ad0a:	9400      	str	r4, [sp, #0]
    ad0c:	f000 ff38 	bl	bb80 <__kernel_sin>
    ad10:	e7ea      	b.n	ace8 <sin+0x40>
    ad12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ad16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ad1a:	f000 fa31 	bl	b180 <__kernel_cos>
    ad1e:	e7d1      	b.n	acc4 <sin+0x1c>
    ad20:	2401      	movs	r4, #1
    ad22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ad26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ad2a:	9400      	str	r4, [sp, #0]
    ad2c:	f000 ff28 	bl	bb80 <__kernel_sin>
    ad30:	e7c8      	b.n	acc4 <sin+0x1c>
    ad32:	bf00      	nop
    ad34:	3fe921fb 	.word	0x3fe921fb
    ad38:	7fefffff 	.word	0x7fefffff
    ad3c:	ffffffff 	.word	0xffffffff

0000ad40 <__ieee754_rem_pio2>:
    ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad44:	4b96      	ldr	r3, [pc, #600]	; (afa0 <__ieee754_rem_pio2+0x260>)
    ad46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    ad4a:	429e      	cmp	r6, r3
    ad4c:	b091      	sub	sp, #68	; 0x44
    ad4e:	4604      	mov	r4, r0
    ad50:	460d      	mov	r5, r1
    ad52:	468b      	mov	fp, r1
    ad54:	4690      	mov	r8, r2
    ad56:	f340 8081 	ble.w	ae5c <__ieee754_rem_pio2+0x11c>
    ad5a:	4b92      	ldr	r3, [pc, #584]	; (afa4 <__ieee754_rem_pio2+0x264>)
    ad5c:	429e      	cmp	r6, r3
    ad5e:	dc26      	bgt.n	adae <__ieee754_rem_pio2+0x6e>
    ad60:	2900      	cmp	r1, #0
    ad62:	a385      	add	r3, pc, #532	; (adr r3, af78 <__ieee754_rem_pio2+0x238>)
    ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad68:	f340 81a0 	ble.w	b0ac <__ieee754_rem_pio2+0x36c>
    ad6c:	f001 f886 	bl	be7c <__aeabi_dsub>
    ad70:	4b8d      	ldr	r3, [pc, #564]	; (afa8 <__ieee754_rem_pio2+0x268>)
    ad72:	429e      	cmp	r6, r3
    ad74:	4604      	mov	r4, r0
    ad76:	460d      	mov	r5, r1
    ad78:	f000 8085 	beq.w	ae86 <__ieee754_rem_pio2+0x146>
    ad7c:	a380      	add	r3, pc, #512	; (adr r3, af80 <__ieee754_rem_pio2+0x240>)
    ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad82:	f001 f87b 	bl	be7c <__aeabi_dsub>
    ad86:	4602      	mov	r2, r0
    ad88:	460b      	mov	r3, r1
    ad8a:	e9c8 2300 	strd	r2, r3, [r8]
    ad8e:	4620      	mov	r0, r4
    ad90:	4629      	mov	r1, r5
    ad92:	f001 f873 	bl	be7c <__aeabi_dsub>
    ad96:	a37a      	add	r3, pc, #488	; (adr r3, af80 <__ieee754_rem_pio2+0x240>)
    ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad9c:	f001 f86e 	bl	be7c <__aeabi_dsub>
    ada0:	2701      	movs	r7, #1
    ada2:	e9c8 0102 	strd	r0, r1, [r8, #8]
    ada6:	4638      	mov	r0, r7
    ada8:	b011      	add	sp, #68	; 0x44
    adaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adae:	4b7f      	ldr	r3, [pc, #508]	; (afac <__ieee754_rem_pio2+0x26c>)
    adb0:	429e      	cmp	r6, r3
    adb2:	f340 8085 	ble.w	aec0 <__ieee754_rem_pio2+0x180>
    adb6:	4b7e      	ldr	r3, [pc, #504]	; (afb0 <__ieee754_rem_pio2+0x270>)
    adb8:	429e      	cmp	r6, r3
    adba:	dc5a      	bgt.n	ae72 <__ieee754_rem_pio2+0x132>
    adbc:	ea4f 5926 	mov.w	r9, r6, asr #20
    adc0:	f2a9 4916 	subw	r9, r9, #1046	; 0x416
    adc4:	eba6 5509 	sub.w	r5, r6, r9, lsl #20
    adc8:	4629      	mov	r1, r5
    adca:	4604      	mov	r4, r0
    adcc:	f001 fca4 	bl	c718 <__aeabi_d2iz>
    add0:	f001 f9a2 	bl	c118 <__aeabi_i2d>
    add4:	4606      	mov	r6, r0
    add6:	460f      	mov	r7, r1
    add8:	4602      	mov	r2, r0
    adda:	460b      	mov	r3, r1
    addc:	4620      	mov	r0, r4
    adde:	4629      	mov	r1, r5
    ade0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    ade4:	f001 f84a 	bl	be7c <__aeabi_dsub>
    ade8:	2200      	movs	r2, #0
    adea:	4b72      	ldr	r3, [pc, #456]	; (afb4 <__ieee754_rem_pio2+0x274>)
    adec:	f001 f9fa 	bl	c1e4 <__aeabi_dmul>
    adf0:	460f      	mov	r7, r1
    adf2:	4606      	mov	r6, r0
    adf4:	f001 fc90 	bl	c718 <__aeabi_d2iz>
    adf8:	f001 f98e 	bl	c118 <__aeabi_i2d>
    adfc:	4602      	mov	r2, r0
    adfe:	460b      	mov	r3, r1
    ae00:	4604      	mov	r4, r0
    ae02:	460d      	mov	r5, r1
    ae04:	4630      	mov	r0, r6
    ae06:	4639      	mov	r1, r7
    ae08:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    ae0c:	f001 f836 	bl	be7c <__aeabi_dsub>
    ae10:	2200      	movs	r2, #0
    ae12:	4b68      	ldr	r3, [pc, #416]	; (afb4 <__ieee754_rem_pio2+0x274>)
    ae14:	f001 f9e6 	bl	c1e4 <__aeabi_dmul>
    ae18:	2200      	movs	r2, #0
    ae1a:	2300      	movs	r3, #0
    ae1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    ae20:	f001 fc48 	bl	c6b4 <__aeabi_dcmpeq>
    ae24:	2800      	cmp	r0, #0
    ae26:	f000 816d 	beq.w	b104 <__ieee754_rem_pio2+0x3c4>
    ae2a:	2300      	movs	r3, #0
    ae2c:	4620      	mov	r0, r4
    ae2e:	4629      	mov	r1, r5
    ae30:	2200      	movs	r2, #0
    ae32:	f001 fc3f 	bl	c6b4 <__aeabi_dcmpeq>
    ae36:	2800      	cmp	r0, #0
    ae38:	bf14      	ite	ne
    ae3a:	2301      	movne	r3, #1
    ae3c:	2302      	moveq	r3, #2
    ae3e:	2202      	movs	r2, #2
    ae40:	495d      	ldr	r1, [pc, #372]	; (afb8 <__ieee754_rem_pio2+0x278>)
    ae42:	9200      	str	r2, [sp, #0]
    ae44:	9101      	str	r1, [sp, #4]
    ae46:	464a      	mov	r2, r9
    ae48:	a80a      	add	r0, sp, #40	; 0x28
    ae4a:	4641      	mov	r1, r8
    ae4c:	f000 fac0 	bl	b3d0 <__kernel_rem_pio2>
    ae50:	f1bb 0f00 	cmp.w	fp, #0
    ae54:	f2c0 8148 	blt.w	b0e8 <__ieee754_rem_pio2+0x3a8>
    ae58:	4607      	mov	r7, r0
    ae5a:	e006      	b.n	ae6a <__ieee754_rem_pio2+0x12a>
    ae5c:	2200      	movs	r2, #0
    ae5e:	2300      	movs	r3, #0
    ae60:	e9c8 4500 	strd	r4, r5, [r8]
    ae64:	e9c8 2302 	strd	r2, r3, [r8, #8]
    ae68:	2700      	movs	r7, #0
    ae6a:	4638      	mov	r0, r7
    ae6c:	b011      	add	sp, #68	; 0x44
    ae6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae72:	4602      	mov	r2, r0
    ae74:	460b      	mov	r3, r1
    ae76:	f001 f801 	bl	be7c <__aeabi_dsub>
    ae7a:	2700      	movs	r7, #0
    ae7c:	e9c8 0102 	strd	r0, r1, [r8, #8]
    ae80:	e9c8 0100 	strd	r0, r1, [r8]
    ae84:	e7f1      	b.n	ae6a <__ieee754_rem_pio2+0x12a>
    ae86:	a340      	add	r3, pc, #256	; (adr r3, af88 <__ieee754_rem_pio2+0x248>)
    ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
    ae8c:	f000 fff6 	bl	be7c <__aeabi_dsub>
    ae90:	a33f      	add	r3, pc, #252	; (adr r3, af90 <__ieee754_rem_pio2+0x250>)
    ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
    ae96:	4604      	mov	r4, r0
    ae98:	460d      	mov	r5, r1
    ae9a:	f000 ffef 	bl	be7c <__aeabi_dsub>
    ae9e:	4602      	mov	r2, r0
    aea0:	460b      	mov	r3, r1
    aea2:	e9c8 2300 	strd	r2, r3, [r8]
    aea6:	4620      	mov	r0, r4
    aea8:	4629      	mov	r1, r5
    aeaa:	f000 ffe7 	bl	be7c <__aeabi_dsub>
    aeae:	a338      	add	r3, pc, #224	; (adr r3, af90 <__ieee754_rem_pio2+0x250>)
    aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    aeb4:	f000 ffe2 	bl	be7c <__aeabi_dsub>
    aeb8:	2701      	movs	r7, #1
    aeba:	e9c8 0102 	strd	r0, r1, [r8, #8]
    aebe:	e7d4      	b.n	ae6a <__ieee754_rem_pio2+0x12a>
    aec0:	f000 ff16 	bl	bcf0 <fabs>
    aec4:	a334      	add	r3, pc, #208	; (adr r3, af98 <__ieee754_rem_pio2+0x258>)
    aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
    aeca:	4604      	mov	r4, r0
    aecc:	460d      	mov	r5, r1
    aece:	f001 f989 	bl	c1e4 <__aeabi_dmul>
    aed2:	2200      	movs	r2, #0
    aed4:	4b39      	ldr	r3, [pc, #228]	; (afbc <__ieee754_rem_pio2+0x27c>)
    aed6:	f000 ffd3 	bl	be80 <__adddf3>
    aeda:	f001 fc1d 	bl	c718 <__aeabi_d2iz>
    aede:	4607      	mov	r7, r0
    aee0:	f001 f91a 	bl	c118 <__aeabi_i2d>
    aee4:	a324      	add	r3, pc, #144	; (adr r3, af78 <__ieee754_rem_pio2+0x238>)
    aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
    aeea:	e9cd 0106 	strd	r0, r1, [sp, #24]
    aeee:	f001 f979 	bl	c1e4 <__aeabi_dmul>
    aef2:	4602      	mov	r2, r0
    aef4:	460b      	mov	r3, r1
    aef6:	4620      	mov	r0, r4
    aef8:	4629      	mov	r1, r5
    aefa:	f000 ffbf 	bl	be7c <__aeabi_dsub>
    aefe:	a320      	add	r3, pc, #128	; (adr r3, af80 <__ieee754_rem_pio2+0x240>)
    af00:	e9d3 2300 	ldrd	r2, r3, [r3]
    af04:	e9cd 0102 	strd	r0, r1, [sp, #8]
    af08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    af0c:	f001 f96a 	bl	c1e4 <__aeabi_dmul>
    af10:	2f1f      	cmp	r7, #31
    af12:	e9cd 0104 	strd	r0, r1, [sp, #16]
    af16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    af1a:	dc53      	bgt.n	afc4 <__ieee754_rem_pio2+0x284>
    af1c:	4b28      	ldr	r3, [pc, #160]	; (afc0 <__ieee754_rem_pio2+0x280>)
    af1e:	1e7a      	subs	r2, r7, #1
    af20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    af24:	42b3      	cmp	r3, r6
    af26:	d04d      	beq.n	afc4 <__ieee754_rem_pio2+0x284>
    af28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    af2c:	f000 ffa6 	bl	be7c <__aeabi_dsub>
    af30:	4604      	mov	r4, r0
    af32:	460d      	mov	r5, r1
    af34:	e9c8 4500 	strd	r4, r5, [r8]
    af38:	4622      	mov	r2, r4
    af3a:	462b      	mov	r3, r5
    af3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    af40:	f000 ff9c 	bl	be7c <__aeabi_dsub>
    af44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    af48:	f000 ff98 	bl	be7c <__aeabi_dsub>
    af4c:	f1bb 0f00 	cmp.w	fp, #0
    af50:	e9c8 0102 	strd	r0, r1, [r8, #8]
    af54:	da89      	bge.n	ae6a <__ieee754_rem_pio2+0x12a>
    af56:	4626      	mov	r6, r4
    af58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    af5c:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
    af60:	427f      	negs	r7, r7
    af62:	f8c8 6000 	str.w	r6, [r8]
    af66:	f8c8 4004 	str.w	r4, [r8, #4]
    af6a:	f8c8 0008 	str.w	r0, [r8, #8]
    af6e:	f8c8 300c 	str.w	r3, [r8, #12]
    af72:	e77a      	b.n	ae6a <__ieee754_rem_pio2+0x12a>
    af74:	f3af 8000 	nop.w
    af78:	54400000 	.word	0x54400000
    af7c:	3ff921fb 	.word	0x3ff921fb
    af80:	1a626331 	.word	0x1a626331
    af84:	3dd0b461 	.word	0x3dd0b461
    af88:	1a600000 	.word	0x1a600000
    af8c:	3dd0b461 	.word	0x3dd0b461
    af90:	2e037073 	.word	0x2e037073
    af94:	3ba3198a 	.word	0x3ba3198a
    af98:	6dc9c883 	.word	0x6dc9c883
    af9c:	3fe45f30 	.word	0x3fe45f30
    afa0:	3fe921fb 	.word	0x3fe921fb
    afa4:	4002d97b 	.word	0x4002d97b
    afa8:	3ff921fb 	.word	0x3ff921fb
    afac:	413921fb 	.word	0x413921fb
    afb0:	7fefffff 	.word	0x7fefffff
    afb4:	41700000 	.word	0x41700000
    afb8:	00014000 	.word	0x00014000
    afbc:	3fe00000 	.word	0x3fe00000
    afc0:	00013f80 	.word	0x00013f80
    afc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    afc8:	f000 ff58 	bl	be7c <__aeabi_dsub>
    afcc:	1536      	asrs	r6, r6, #20
    afce:	f3c1 530a 	ubfx	r3, r1, #20, #11
    afd2:	1af3      	subs	r3, r6, r3
    afd4:	4604      	mov	r4, r0
    afd6:	460d      	mov	r5, r1
    afd8:	2b10      	cmp	r3, #16
    afda:	e9c8 4500 	strd	r4, r5, [r8]
    afde:	ddab      	ble.n	af38 <__ieee754_rem_pio2+0x1f8>
    afe0:	a35b      	add	r3, pc, #364	; (adr r3, b150 <__ieee754_rem_pio2+0x410>)
    afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
    afe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    afea:	f001 f8fb 	bl	c1e4 <__aeabi_dmul>
    afee:	4604      	mov	r4, r0
    aff0:	460d      	mov	r5, r1
    aff2:	4622      	mov	r2, r4
    aff4:	462b      	mov	r3, r5
    aff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    affa:	f000 ff3f 	bl	be7c <__aeabi_dsub>
    affe:	e9cd 0108 	strd	r0, r1, [sp, #32]
    b002:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b00a:	f000 ff37 	bl	be7c <__aeabi_dsub>
    b00e:	4622      	mov	r2, r4
    b010:	462b      	mov	r3, r5
    b012:	f000 ff33 	bl	be7c <__aeabi_dsub>
    b016:	a350      	add	r3, pc, #320	; (adr r3, b158 <__ieee754_rem_pio2+0x418>)
    b018:	e9d3 2300 	ldrd	r2, r3, [r3]
    b01c:	4604      	mov	r4, r0
    b01e:	460d      	mov	r5, r1
    b020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b024:	f001 f8de 	bl	c1e4 <__aeabi_dmul>
    b028:	4622      	mov	r2, r4
    b02a:	462b      	mov	r3, r5
    b02c:	f000 ff26 	bl	be7c <__aeabi_dsub>
    b030:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b038:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    b03c:	f000 ff1e 	bl	be7c <__aeabi_dsub>
    b040:	f3c1 530a 	ubfx	r3, r1, #20, #11
    b044:	1af6      	subs	r6, r6, r3
    b046:	4604      	mov	r4, r0
    b048:	460d      	mov	r5, r1
    b04a:	2e31      	cmp	r6, #49	; 0x31
    b04c:	e9c8 4500 	strd	r4, r5, [r8]
    b050:	dd78      	ble.n	b144 <__ieee754_rem_pio2+0x404>
    b052:	a343      	add	r3, pc, #268	; (adr r3, b160 <__ieee754_rem_pio2+0x420>)
    b054:	e9d3 2300 	ldrd	r2, r3, [r3]
    b058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b05c:	f001 f8c2 	bl	c1e4 <__aeabi_dmul>
    b060:	4604      	mov	r4, r0
    b062:	460d      	mov	r5, r1
    b064:	4622      	mov	r2, r4
    b066:	462b      	mov	r3, r5
    b068:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    b06c:	f000 ff06 	bl	be7c <__aeabi_dsub>
    b070:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b078:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    b07c:	f000 fefe 	bl	be7c <__aeabi_dsub>
    b080:	4622      	mov	r2, r4
    b082:	462b      	mov	r3, r5
    b084:	f000 fefa 	bl	be7c <__aeabi_dsub>
    b088:	a337      	add	r3, pc, #220	; (adr r3, b168 <__ieee754_rem_pio2+0x428>)
    b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b08e:	4604      	mov	r4, r0
    b090:	460d      	mov	r5, r1
    b092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b096:	f001 f8a5 	bl	c1e4 <__aeabi_dmul>
    b09a:	4622      	mov	r2, r4
    b09c:	462b      	mov	r3, r5
    b09e:	f000 feed 	bl	be7c <__aeabi_dsub>
    b0a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b0aa:	e73d      	b.n	af28 <__ieee754_rem_pio2+0x1e8>
    b0ac:	f000 fee8 	bl	be80 <__adddf3>
    b0b0:	4b31      	ldr	r3, [pc, #196]	; (b178 <__ieee754_rem_pio2+0x438>)
    b0b2:	429e      	cmp	r6, r3
    b0b4:	4604      	mov	r4, r0
    b0b6:	460d      	mov	r5, r1
    b0b8:	d026      	beq.n	b108 <__ieee754_rem_pio2+0x3c8>
    b0ba:	a32d      	add	r3, pc, #180	; (adr r3, b170 <__ieee754_rem_pio2+0x430>)
    b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0c0:	f000 fede 	bl	be80 <__adddf3>
    b0c4:	4602      	mov	r2, r0
    b0c6:	460b      	mov	r3, r1
    b0c8:	e9c8 2300 	strd	r2, r3, [r8]
    b0cc:	4620      	mov	r0, r4
    b0ce:	4629      	mov	r1, r5
    b0d0:	f000 fed4 	bl	be7c <__aeabi_dsub>
    b0d4:	a326      	add	r3, pc, #152	; (adr r3, b170 <__ieee754_rem_pio2+0x430>)
    b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0da:	f000 fed1 	bl	be80 <__adddf3>
    b0de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    b0e2:	e9c8 0102 	strd	r0, r1, [r8, #8]
    b0e6:	e6c0      	b.n	ae6a <__ieee754_rem_pio2+0x12a>
    b0e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b0ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
    b0f0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    b0f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    b0f8:	4247      	negs	r7, r0
    b0fa:	f8c8 2004 	str.w	r2, [r8, #4]
    b0fe:	f8c8 300c 	str.w	r3, [r8, #12]
    b102:	e6b2      	b.n	ae6a <__ieee754_rem_pio2+0x12a>
    b104:	2303      	movs	r3, #3
    b106:	e69a      	b.n	ae3e <__ieee754_rem_pio2+0xfe>
    b108:	a311      	add	r3, pc, #68	; (adr r3, b150 <__ieee754_rem_pio2+0x410>)
    b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b10e:	f000 feb7 	bl	be80 <__adddf3>
    b112:	a311      	add	r3, pc, #68	; (adr r3, b158 <__ieee754_rem_pio2+0x418>)
    b114:	e9d3 2300 	ldrd	r2, r3, [r3]
    b118:	4604      	mov	r4, r0
    b11a:	460d      	mov	r5, r1
    b11c:	f000 feb0 	bl	be80 <__adddf3>
    b120:	4602      	mov	r2, r0
    b122:	460b      	mov	r3, r1
    b124:	e9c8 2300 	strd	r2, r3, [r8]
    b128:	4620      	mov	r0, r4
    b12a:	4629      	mov	r1, r5
    b12c:	f000 fea6 	bl	be7c <__aeabi_dsub>
    b130:	a309      	add	r3, pc, #36	; (adr r3, b158 <__ieee754_rem_pio2+0x418>)
    b132:	e9d3 2300 	ldrd	r2, r3, [r3]
    b136:	f000 fea3 	bl	be80 <__adddf3>
    b13a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    b13e:	e9c8 0102 	strd	r0, r1, [r8, #8]
    b142:	e692      	b.n	ae6a <__ieee754_rem_pio2+0x12a>
    b144:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b148:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b14c:	e6f4      	b.n	af38 <__ieee754_rem_pio2+0x1f8>
    b14e:	bf00      	nop
    b150:	1a600000 	.word	0x1a600000
    b154:	3dd0b461 	.word	0x3dd0b461
    b158:	2e037073 	.word	0x2e037073
    b15c:	3ba3198a 	.word	0x3ba3198a
    b160:	2e000000 	.word	0x2e000000
    b164:	3ba3198a 	.word	0x3ba3198a
    b168:	252049c1 	.word	0x252049c1
    b16c:	397b839a 	.word	0x397b839a
    b170:	1a626331 	.word	0x1a626331
    b174:	3dd0b461 	.word	0x3dd0b461
    b178:	3ff921fb 	.word	0x3ff921fb
    b17c:	f3af 8000 	nop.w

0000b180 <__kernel_cos>:
    b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b184:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
    b188:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
    b18c:	b085      	sub	sp, #20
    b18e:	4606      	mov	r6, r0
    b190:	460f      	mov	r7, r1
    b192:	4692      	mov	sl, r2
    b194:	469b      	mov	fp, r3
    b196:	da6b      	bge.n	b270 <__kernel_cos+0xf0>
    b198:	f001 fabe 	bl	c718 <__aeabi_d2iz>
    b19c:	2800      	cmp	r0, #0
    b19e:	f000 80eb 	beq.w	b378 <__kernel_cos+0x1f8>
    b1a2:	4632      	mov	r2, r6
    b1a4:	463b      	mov	r3, r7
    b1a6:	4630      	mov	r0, r6
    b1a8:	4639      	mov	r1, r7
    b1aa:	f001 f81b 	bl	c1e4 <__aeabi_dmul>
    b1ae:	a376      	add	r3, pc, #472	; (adr r3, b388 <__kernel_cos+0x208>)
    b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1b4:	4604      	mov	r4, r0
    b1b6:	460d      	mov	r5, r1
    b1b8:	f001 f814 	bl	c1e4 <__aeabi_dmul>
    b1bc:	a374      	add	r3, pc, #464	; (adr r3, b390 <__kernel_cos+0x210>)
    b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1c2:	f000 fe5d 	bl	be80 <__adddf3>
    b1c6:	4622      	mov	r2, r4
    b1c8:	462b      	mov	r3, r5
    b1ca:	f001 f80b 	bl	c1e4 <__aeabi_dmul>
    b1ce:	a372      	add	r3, pc, #456	; (adr r3, b398 <__kernel_cos+0x218>)
    b1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1d4:	f000 fe52 	bl	be7c <__aeabi_dsub>
    b1d8:	4622      	mov	r2, r4
    b1da:	462b      	mov	r3, r5
    b1dc:	f001 f802 	bl	c1e4 <__aeabi_dmul>
    b1e0:	a36f      	add	r3, pc, #444	; (adr r3, b3a0 <__kernel_cos+0x220>)
    b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1e6:	f000 fe4b 	bl	be80 <__adddf3>
    b1ea:	4622      	mov	r2, r4
    b1ec:	462b      	mov	r3, r5
    b1ee:	f000 fff9 	bl	c1e4 <__aeabi_dmul>
    b1f2:	a36d      	add	r3, pc, #436	; (adr r3, b3a8 <__kernel_cos+0x228>)
    b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1f8:	f000 fe40 	bl	be7c <__aeabi_dsub>
    b1fc:	4622      	mov	r2, r4
    b1fe:	462b      	mov	r3, r5
    b200:	f000 fff0 	bl	c1e4 <__aeabi_dmul>
    b204:	a36a      	add	r3, pc, #424	; (adr r3, b3b0 <__kernel_cos+0x230>)
    b206:	e9d3 2300 	ldrd	r2, r3, [r3]
    b20a:	f000 fe39 	bl	be80 <__adddf3>
    b20e:	4622      	mov	r2, r4
    b210:	462b      	mov	r3, r5
    b212:	f000 ffe7 	bl	c1e4 <__aeabi_dmul>
    b216:	e9cd 0100 	strd	r0, r1, [sp]
    b21a:	4620      	mov	r0, r4
    b21c:	4629      	mov	r1, r5
    b21e:	2200      	movs	r2, #0
    b220:	4b65      	ldr	r3, [pc, #404]	; (b3b8 <__kernel_cos+0x238>)
    b222:	f000 ffdf 	bl	c1e4 <__aeabi_dmul>
    b226:	e9dd 2300 	ldrd	r2, r3, [sp]
    b22a:	4680      	mov	r8, r0
    b22c:	4689      	mov	r9, r1
    b22e:	4620      	mov	r0, r4
    b230:	4629      	mov	r1, r5
    b232:	f000 ffd7 	bl	c1e4 <__aeabi_dmul>
    b236:	4652      	mov	r2, sl
    b238:	4604      	mov	r4, r0
    b23a:	460d      	mov	r5, r1
    b23c:	465b      	mov	r3, fp
    b23e:	4630      	mov	r0, r6
    b240:	4639      	mov	r1, r7
    b242:	f000 ffcf 	bl	c1e4 <__aeabi_dmul>
    b246:	4602      	mov	r2, r0
    b248:	460b      	mov	r3, r1
    b24a:	4620      	mov	r0, r4
    b24c:	4629      	mov	r1, r5
    b24e:	f000 fe15 	bl	be7c <__aeabi_dsub>
    b252:	4602      	mov	r2, r0
    b254:	460b      	mov	r3, r1
    b256:	4640      	mov	r0, r8
    b258:	4649      	mov	r1, r9
    b25a:	f000 fe0f 	bl	be7c <__aeabi_dsub>
    b25e:	4602      	mov	r2, r0
    b260:	460b      	mov	r3, r1
    b262:	2000      	movs	r0, #0
    b264:	4955      	ldr	r1, [pc, #340]	; (b3bc <__kernel_cos+0x23c>)
    b266:	f000 fe09 	bl	be7c <__aeabi_dsub>
    b26a:	b005      	add	sp, #20
    b26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b270:	4602      	mov	r2, r0
    b272:	460b      	mov	r3, r1
    b274:	f000 ffb6 	bl	c1e4 <__aeabi_dmul>
    b278:	a343      	add	r3, pc, #268	; (adr r3, b388 <__kernel_cos+0x208>)
    b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b27e:	4604      	mov	r4, r0
    b280:	460d      	mov	r5, r1
    b282:	f000 ffaf 	bl	c1e4 <__aeabi_dmul>
    b286:	a342      	add	r3, pc, #264	; (adr r3, b390 <__kernel_cos+0x210>)
    b288:	e9d3 2300 	ldrd	r2, r3, [r3]
    b28c:	f000 fdf8 	bl	be80 <__adddf3>
    b290:	4622      	mov	r2, r4
    b292:	462b      	mov	r3, r5
    b294:	f000 ffa6 	bl	c1e4 <__aeabi_dmul>
    b298:	a33f      	add	r3, pc, #252	; (adr r3, b398 <__kernel_cos+0x218>)
    b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b29e:	f000 fded 	bl	be7c <__aeabi_dsub>
    b2a2:	4622      	mov	r2, r4
    b2a4:	462b      	mov	r3, r5
    b2a6:	f000 ff9d 	bl	c1e4 <__aeabi_dmul>
    b2aa:	a33d      	add	r3, pc, #244	; (adr r3, b3a0 <__kernel_cos+0x220>)
    b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2b0:	f000 fde6 	bl	be80 <__adddf3>
    b2b4:	4622      	mov	r2, r4
    b2b6:	462b      	mov	r3, r5
    b2b8:	f000 ff94 	bl	c1e4 <__aeabi_dmul>
    b2bc:	a33a      	add	r3, pc, #232	; (adr r3, b3a8 <__kernel_cos+0x228>)
    b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2c2:	f000 fddb 	bl	be7c <__aeabi_dsub>
    b2c6:	4622      	mov	r2, r4
    b2c8:	462b      	mov	r3, r5
    b2ca:	f000 ff8b 	bl	c1e4 <__aeabi_dmul>
    b2ce:	a338      	add	r3, pc, #224	; (adr r3, b3b0 <__kernel_cos+0x230>)
    b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2d4:	f000 fdd4 	bl	be80 <__adddf3>
    b2d8:	462b      	mov	r3, r5
    b2da:	4622      	mov	r2, r4
    b2dc:	f000 ff82 	bl	c1e4 <__aeabi_dmul>
    b2e0:	4b37      	ldr	r3, [pc, #220]	; (b3c0 <__kernel_cos+0x240>)
    b2e2:	4599      	cmp	r9, r3
    b2e4:	e9cd 0100 	strd	r0, r1, [sp]
    b2e8:	dd97      	ble.n	b21a <__kernel_cos+0x9a>
    b2ea:	4b36      	ldr	r3, [pc, #216]	; (b3c4 <__kernel_cos+0x244>)
    b2ec:	4599      	cmp	r9, r3
    b2ee:	f04f 0200 	mov.w	r2, #0
    b2f2:	dc39      	bgt.n	b368 <__kernel_cos+0x1e8>
    b2f4:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
    b2f8:	2200      	movs	r2, #0
    b2fa:	2000      	movs	r0, #0
    b2fc:	492f      	ldr	r1, [pc, #188]	; (b3bc <__kernel_cos+0x23c>)
    b2fe:	4690      	mov	r8, r2
    b300:	4699      	mov	r9, r3
    b302:	f000 fdbb 	bl	be7c <__aeabi_dsub>
    b306:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b30a:	4620      	mov	r0, r4
    b30c:	4629      	mov	r1, r5
    b30e:	2200      	movs	r2, #0
    b310:	4b29      	ldr	r3, [pc, #164]	; (b3b8 <__kernel_cos+0x238>)
    b312:	f000 ff67 	bl	c1e4 <__aeabi_dmul>
    b316:	4642      	mov	r2, r8
    b318:	464b      	mov	r3, r9
    b31a:	f000 fdaf 	bl	be7c <__aeabi_dsub>
    b31e:	e9dd 2300 	ldrd	r2, r3, [sp]
    b322:	4680      	mov	r8, r0
    b324:	4689      	mov	r9, r1
    b326:	4620      	mov	r0, r4
    b328:	4629      	mov	r1, r5
    b32a:	f000 ff5b 	bl	c1e4 <__aeabi_dmul>
    b32e:	4652      	mov	r2, sl
    b330:	4604      	mov	r4, r0
    b332:	460d      	mov	r5, r1
    b334:	465b      	mov	r3, fp
    b336:	4630      	mov	r0, r6
    b338:	4639      	mov	r1, r7
    b33a:	f000 ff53 	bl	c1e4 <__aeabi_dmul>
    b33e:	4602      	mov	r2, r0
    b340:	460b      	mov	r3, r1
    b342:	4620      	mov	r0, r4
    b344:	4629      	mov	r1, r5
    b346:	f000 fd99 	bl	be7c <__aeabi_dsub>
    b34a:	4602      	mov	r2, r0
    b34c:	460b      	mov	r3, r1
    b34e:	4640      	mov	r0, r8
    b350:	4649      	mov	r1, r9
    b352:	f000 fd93 	bl	be7c <__aeabi_dsub>
    b356:	4602      	mov	r2, r0
    b358:	460b      	mov	r3, r1
    b35a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b35e:	f000 fd8d 	bl	be7c <__aeabi_dsub>
    b362:	b005      	add	sp, #20
    b364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b368:	4b17      	ldr	r3, [pc, #92]	; (b3c8 <__kernel_cos+0x248>)
    b36a:	f8df 9060 	ldr.w	r9, [pc, #96]	; b3cc <__kernel_cos+0x24c>
    b36e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b372:	f04f 0800 	mov.w	r8, #0
    b376:	e7c8      	b.n	b30a <__kernel_cos+0x18a>
    b378:	4910      	ldr	r1, [pc, #64]	; (b3bc <__kernel_cos+0x23c>)
    b37a:	2000      	movs	r0, #0
    b37c:	b005      	add	sp, #20
    b37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b382:	bf00      	nop
    b384:	f3af 8000 	nop.w
    b388:	be8838d4 	.word	0xbe8838d4
    b38c:	bda8fae9 	.word	0xbda8fae9
    b390:	bdb4b1c4 	.word	0xbdb4b1c4
    b394:	3e21ee9e 	.word	0x3e21ee9e
    b398:	809c52ad 	.word	0x809c52ad
    b39c:	3e927e4f 	.word	0x3e927e4f
    b3a0:	19cb1590 	.word	0x19cb1590
    b3a4:	3efa01a0 	.word	0x3efa01a0
    b3a8:	16c15177 	.word	0x16c15177
    b3ac:	3f56c16c 	.word	0x3f56c16c
    b3b0:	5555554c 	.word	0x5555554c
    b3b4:	3fa55555 	.word	0x3fa55555
    b3b8:	3fe00000 	.word	0x3fe00000
    b3bc:	3ff00000 	.word	0x3ff00000
    b3c0:	3fd33332 	.word	0x3fd33332
    b3c4:	3fe90000 	.word	0x3fe90000
    b3c8:	3fe70000 	.word	0x3fe70000
    b3cc:	3fd20000 	.word	0x3fd20000

0000b3d0 <__kernel_rem_pio2>:
    b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3d4:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
    b3d8:	4c1b      	ldr	r4, [pc, #108]	; (b448 <__kernel_rem_pio2+0x78>)
    b3da:	9ea6      	ldr	r6, [sp, #664]	; 0x298
    b3dc:	4d1b      	ldr	r5, [pc, #108]	; (b44c <__kernel_rem_pio2+0x7c>)
    b3de:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    b3e2:	940c      	str	r4, [sp, #48]	; 0x30
    b3e4:	1ed4      	subs	r4, r2, #3
    b3e6:	fb85 6504 	smull	r6, r5, r5, r4
    b3ea:	17e4      	asrs	r4, r4, #31
    b3ec:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
    b3f0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    b3f4:	940e      	str	r4, [sp, #56]	; 0x38
    b3f6:	4699      	mov	r9, r3
    b3f8:	9007      	str	r0, [sp, #28]
    b3fa:	43e3      	mvns	r3, r4
    b3fc:	910b      	str	r1, [sp, #44]	; 0x2c
    b3fe:	980e      	ldr	r0, [sp, #56]	; 0x38
    b400:	990c      	ldr	r1, [sp, #48]	; 0x30
    b402:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
    b406:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b40a:	9404      	str	r4, [sp, #16]
    b40c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b410:	1b06      	subs	r6, r0, r4
    b412:	1864      	adds	r4, r4, r1
    b414:	930a      	str	r3, [sp, #40]	; 0x28
    b416:	d41b      	bmi.n	b450 <__kernel_rem_pio2+0x80>
    b418:	98a7      	ldr	r0, [sp, #668]	; 0x29c
    b41a:	4434      	add	r4, r6
    b41c:	3401      	adds	r4, #1
    b41e:	f10d 0888 	add.w	r8, sp, #136	; 0x88
    b422:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    b426:	2700      	movs	r7, #0
    b428:	e009      	b.n	b43e <__kernel_rem_pio2+0x6e>
    b42a:	59e8      	ldr	r0, [r5, r7]
    b42c:	f000 fe74 	bl	c118 <__aeabi_i2d>
    b430:	3601      	adds	r6, #1
    b432:	42a6      	cmp	r6, r4
    b434:	e9e8 0102 	strd	r0, r1, [r8, #8]!
    b438:	f107 0704 	add.w	r7, r7, #4
    b43c:	d008      	beq.n	b450 <__kernel_rem_pio2+0x80>
    b43e:	2e00      	cmp	r6, #0
    b440:	daf3      	bge.n	b42a <__kernel_rem_pio2+0x5a>
    b442:	2000      	movs	r0, #0
    b444:	2100      	movs	r1, #0
    b446:	e7f3      	b.n	b430 <__kernel_rem_pio2+0x60>
    b448:	00014108 	.word	0x00014108
    b44c:	2aaaaaab 	.word	0x2aaaaaab
    b450:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    b452:	2c00      	cmp	r4, #0
    b454:	db2d      	blt.n	b4b2 <__kernel_rem_pio2+0xe2>
    b456:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    b458:	ae74      	add	r6, sp, #464	; 0x1d0
    b45a:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
    b45e:	a824      	add	r0, sp, #144	; 0x90
    b460:	eb00 0ac9 	add.w	sl, r0, r9, lsl #3
    b464:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
    b468:	f8cd b00c 	str.w	fp, [sp, #12]
    b46c:	9c04      	ldr	r4, [sp, #16]
    b46e:	2c00      	cmp	r4, #0
    b470:	f2c0 8185 	blt.w	b77e <__kernel_rem_pio2+0x3ae>
    b474:	9e07      	ldr	r6, [sp, #28]
    b476:	4657      	mov	r7, sl
    b478:	f1a6 0b08 	sub.w	fp, r6, #8
    b47c:	2400      	movs	r4, #0
    b47e:	2500      	movs	r5, #0
    b480:	2600      	movs	r6, #0
    b482:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
    b486:	e9fb 0102 	ldrd	r0, r1, [fp, #8]!
    b48a:	f000 feab 	bl	c1e4 <__aeabi_dmul>
    b48e:	4602      	mov	r2, r0
    b490:	460b      	mov	r3, r1
    b492:	4620      	mov	r0, r4
    b494:	4629      	mov	r1, r5
    b496:	f000 fcf3 	bl	be80 <__adddf3>
    b49a:	3601      	adds	r6, #1
    b49c:	454e      	cmp	r6, r9
    b49e:	4604      	mov	r4, r0
    b4a0:	460d      	mov	r5, r1
    b4a2:	d1ee      	bne.n	b482 <__kernel_rem_pio2+0xb2>
    b4a4:	e9e8 4502 	strd	r4, r5, [r8, #8]!
    b4a8:	9e03      	ldr	r6, [sp, #12]
    b4aa:	45b0      	cmp	r8, r6
    b4ac:	f10a 0a08 	add.w	sl, sl, #8
    b4b0:	d1dc      	bne.n	b46c <__kernel_rem_pio2+0x9c>
    b4b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    b4b4:	9603      	str	r6, [sp, #12]
    b4b6:	ac10      	add	r4, sp, #64	; 0x40
    b4b8:	9402      	str	r4, [sp, #8]
    b4ba:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    b4be:	940f      	str	r4, [sp, #60]	; 0x3c
    b4c0:	9c03      	ldr	r4, [sp, #12]
    b4c2:	9e03      	ldr	r6, [sp, #12]
    b4c4:	00e4      	lsls	r4, r4, #3
    b4c6:	ab9c      	add	r3, sp, #624	; 0x270
    b4c8:	4423      	add	r3, r4
    b4ca:	2e00      	cmp	r6, #0
    b4cc:	9406      	str	r4, [sp, #24]
    b4ce:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
    b4d2:	dd2e      	ble.n	b532 <__kernel_rem_pio2+0x162>
    b4d4:	9e06      	ldr	r6, [sp, #24]
    b4d6:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
    b4da:	44b2      	add	sl, r6
    b4dc:	9e03      	ldr	r6, [sp, #12]
    b4de:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
    b4e2:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
    b4e6:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
    b4ea:	2200      	movs	r2, #0
    b4ec:	4baa      	ldr	r3, [pc, #680]	; (b798 <__kernel_rem_pio2+0x3c8>)
    b4ee:	4620      	mov	r0, r4
    b4f0:	4629      	mov	r1, r5
    b4f2:	f000 fe77 	bl	c1e4 <__aeabi_dmul>
    b4f6:	f001 f90f 	bl	c718 <__aeabi_d2iz>
    b4fa:	f000 fe0d 	bl	c118 <__aeabi_i2d>
    b4fe:	2200      	movs	r2, #0
    b500:	4ba6      	ldr	r3, [pc, #664]	; (b79c <__kernel_rem_pio2+0x3cc>)
    b502:	4606      	mov	r6, r0
    b504:	460f      	mov	r7, r1
    b506:	f000 fe6d 	bl	c1e4 <__aeabi_dmul>
    b50a:	4602      	mov	r2, r0
    b50c:	460b      	mov	r3, r1
    b50e:	4620      	mov	r0, r4
    b510:	4629      	mov	r1, r5
    b512:	f000 fcb3 	bl	be7c <__aeabi_dsub>
    b516:	f001 f8ff 	bl	c718 <__aeabi_d2iz>
    b51a:	4632      	mov	r2, r6
    b51c:	f848 0f04 	str.w	r0, [r8, #4]!
    b520:	463b      	mov	r3, r7
    b522:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
    b526:	f000 fcab 	bl	be80 <__adddf3>
    b52a:	45d8      	cmp	r8, fp
    b52c:	4604      	mov	r4, r0
    b52e:	460d      	mov	r5, r1
    b530:	d1db      	bne.n	b4ea <__kernel_rem_pio2+0x11a>
    b532:	4620      	mov	r0, r4
    b534:	4629      	mov	r1, r5
    b536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b538:	f000 fc06 	bl	bd48 <scalbn>
    b53c:	2200      	movs	r2, #0
    b53e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    b542:	4604      	mov	r4, r0
    b544:	460d      	mov	r5, r1
    b546:	f000 fe4d 	bl	c1e4 <__aeabi_dmul>
    b54a:	f7ff fb1d 	bl	ab88 <floor>
    b54e:	2200      	movs	r2, #0
    b550:	4b93      	ldr	r3, [pc, #588]	; (b7a0 <__kernel_rem_pio2+0x3d0>)
    b552:	f000 fe47 	bl	c1e4 <__aeabi_dmul>
    b556:	4602      	mov	r2, r0
    b558:	460b      	mov	r3, r1
    b55a:	4620      	mov	r0, r4
    b55c:	4629      	mov	r1, r5
    b55e:	f000 fc8d 	bl	be7c <__aeabi_dsub>
    b562:	4604      	mov	r4, r0
    b564:	460d      	mov	r5, r1
    b566:	f001 f8d7 	bl	c718 <__aeabi_d2iz>
    b56a:	4682      	mov	sl, r0
    b56c:	f000 fdd4 	bl	c118 <__aeabi_i2d>
    b570:	4602      	mov	r2, r0
    b572:	460b      	mov	r3, r1
    b574:	4620      	mov	r0, r4
    b576:	4629      	mov	r1, r5
    b578:	f000 fc80 	bl	be7c <__aeabi_dsub>
    b57c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b57e:	2c00      	cmp	r4, #0
    b580:	4606      	mov	r6, r0
    b582:	460f      	mov	r7, r1
    b584:	f340 80c9 	ble.w	b71a <__kernel_rem_pio2+0x34a>
    b588:	9c03      	ldr	r4, [sp, #12]
    b58a:	aa10      	add	r2, sp, #64	; 0x40
    b58c:	1e61      	subs	r1, r4, #1
    b58e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    b594:	f1c4 0018 	rsb	r0, r4, #24
    b598:	fa43 f200 	asr.w	r2, r3, r0
    b59c:	f1c4 0517 	rsb	r5, r4, #23
    b5a0:	fa02 f000 	lsl.w	r0, r2, r0
    b5a4:	ac10      	add	r4, sp, #64	; 0x40
    b5a6:	1a1b      	subs	r3, r3, r0
    b5a8:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
    b5ac:	4492      	add	sl, r2
    b5ae:	fa43 f505 	asr.w	r5, r3, r5
    b5b2:	2d00      	cmp	r5, #0
    b5b4:	dd2c      	ble.n	b610 <__kernel_rem_pio2+0x240>
    b5b6:	9c03      	ldr	r4, [sp, #12]
    b5b8:	2c00      	cmp	r4, #0
    b5ba:	f10a 0a01 	add.w	sl, sl, #1
    b5be:	f340 80e9 	ble.w	b794 <__kernel_rem_pio2+0x3c4>
    b5c2:	ab10      	add	r3, sp, #64	; 0x40
    b5c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    b5c8:	2400      	movs	r4, #0
    b5ca:	f853 1b04 	ldr.w	r1, [r3], #4
    b5ce:	f1c1 12ff 	rsb	r2, r1, #16711935	; 0xff00ff
    b5d2:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
    b5d6:	b914      	cbnz	r4, b5de <__kernel_rem_pio2+0x20e>
    b5d8:	f1c1 7280 	rsb	r2, r1, #16777216	; 0x1000000
    b5dc:	b111      	cbz	r1, b5e4 <__kernel_rem_pio2+0x214>
    b5de:	f843 2c04 	str.w	r2, [r3, #-4]
    b5e2:	2401      	movs	r4, #1
    b5e4:	4283      	cmp	r3, r0
    b5e6:	d1f0      	bne.n	b5ca <__kernel_rem_pio2+0x1fa>
    b5e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    b5ea:	2800      	cmp	r0, #0
    b5ec:	dd0d      	ble.n	b60a <__kernel_rem_pio2+0x23a>
    b5ee:	2801      	cmp	r0, #1
    b5f0:	f000 80b4 	beq.w	b75c <__kernel_rem_pio2+0x38c>
    b5f4:	2802      	cmp	r0, #2
    b5f6:	d108      	bne.n	b60a <__kernel_rem_pio2+0x23a>
    b5f8:	9903      	ldr	r1, [sp, #12]
    b5fa:	a810      	add	r0, sp, #64	; 0x40
    b5fc:	1e4b      	subs	r3, r1, #1
    b5fe:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    b602:	f3c2 0215 	ubfx	r2, r2, #0, #22
    b606:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    b60a:	2d02      	cmp	r5, #2
    b60c:	f000 808d 	beq.w	b72a <__kernel_rem_pio2+0x35a>
    b610:	4630      	mov	r0, r6
    b612:	4639      	mov	r1, r7
    b614:	2200      	movs	r2, #0
    b616:	2300      	movs	r3, #0
    b618:	f001 f84c 	bl	c6b4 <__aeabi_dcmpeq>
    b61c:	2800      	cmp	r0, #0
    b61e:	f000 80c5 	beq.w	b7ac <__kernel_rem_pio2+0x3dc>
    b622:	9c03      	ldr	r4, [sp, #12]
    b624:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    b626:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    b62a:	4546      	cmp	r6, r8
    b62c:	dc0d      	bgt.n	b64a <__kernel_rem_pio2+0x27a>
    b62e:	a810      	add	r0, sp, #64	; 0x40
    b630:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    b634:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b636:	2200      	movs	r2, #0
    b638:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    b63c:	4283      	cmp	r3, r0
    b63e:	ea42 0201 	orr.w	r2, r2, r1
    b642:	d1f9      	bne.n	b638 <__kernel_rem_pio2+0x268>
    b644:	2a00      	cmp	r2, #0
    b646:	f040 824d 	bne.w	bae4 <__kernel_rem_pio2+0x714>
    b64a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    b64c:	ae10      	add	r6, sp, #64	; 0x40
    b64e:	1e62      	subs	r2, r4, #1
    b650:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
    b654:	2b00      	cmp	r3, #0
    b656:	f040 8243 	bne.w	bae0 <__kernel_rem_pio2+0x710>
    b65a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b65e:	2301      	movs	r3, #1
    b660:	f852 1d04 	ldr.w	r1, [r2, #-4]!
    b664:	3301      	adds	r3, #1
    b666:	2900      	cmp	r1, #0
    b668:	d0fa      	beq.n	b660 <__kernel_rem_pio2+0x290>
    b66a:	9c03      	ldr	r4, [sp, #12]
    b66c:	9e03      	ldr	r6, [sp, #12]
    b66e:	441c      	add	r4, r3
    b670:	1c73      	adds	r3, r6, #1
    b672:	42a3      	cmp	r3, r4
    b674:	940d      	str	r4, [sp, #52]	; 0x34
    b676:	dc4a      	bgt.n	b70e <__kernel_rem_pio2+0x33e>
    b678:	9c04      	ldr	r4, [sp, #16]
    b67a:	4631      	mov	r1, r6
    b67c:	4632      	mov	r2, r6
    b67e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    b680:	4423      	add	r3, r4
    b682:	4432      	add	r2, r6
    b684:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    b686:	9e03      	ldr	r6, [sp, #12]
    b688:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    b68c:	1ba3      	subs	r3, r4, r6
    b68e:	9ea7      	ldr	r6, [sp, #668]	; 0x29c
    b690:	a824      	add	r0, sp, #144	; 0x90
    b692:	4449      	add	r1, r9
    b694:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    b698:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b69c:	9e06      	ldr	r6, [sp, #24]
    b69e:	9409      	str	r4, [sp, #36]	; 0x24
    b6a0:	ac74      	add	r4, sp, #464	; 0x1d0
    b6a2:	00db      	lsls	r3, r3, #3
    b6a4:	4434      	add	r4, r6
    b6a6:	eb00 0bcb 	add.w	fp, r0, fp, lsl #3
    b6aa:	9203      	str	r2, [sp, #12]
    b6ac:	9308      	str	r3, [sp, #32]
    b6ae:	9406      	str	r4, [sp, #24]
    b6b0:	f04f 0800 	mov.w	r8, #0
    b6b4:	9c03      	ldr	r4, [sp, #12]
    b6b6:	f854 0f04 	ldr.w	r0, [r4, #4]!
    b6ba:	9403      	str	r4, [sp, #12]
    b6bc:	f000 fd2c 	bl	c118 <__aeabi_i2d>
    b6c0:	9e04      	ldr	r6, [sp, #16]
    b6c2:	2e00      	cmp	r6, #0
    b6c4:	f108 0808 	add.w	r8, r8, #8
    b6c8:	e9eb 0102 	strd	r0, r1, [fp, #8]!
    b6cc:	db22      	blt.n	b714 <__kernel_rem_pio2+0x344>
    b6ce:	9c07      	ldr	r4, [sp, #28]
    b6d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b6d2:	f1a4 0a08 	sub.w	sl, r4, #8
    b6d6:	4447      	add	r7, r8
    b6d8:	2400      	movs	r4, #0
    b6da:	2500      	movs	r5, #0
    b6dc:	2600      	movs	r6, #0
    b6de:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
    b6e2:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
    b6e6:	f000 fd7d 	bl	c1e4 <__aeabi_dmul>
    b6ea:	4602      	mov	r2, r0
    b6ec:	460b      	mov	r3, r1
    b6ee:	4620      	mov	r0, r4
    b6f0:	4629      	mov	r1, r5
    b6f2:	f000 fbc5 	bl	be80 <__adddf3>
    b6f6:	3601      	adds	r6, #1
    b6f8:	454e      	cmp	r6, r9
    b6fa:	4604      	mov	r4, r0
    b6fc:	460d      	mov	r5, r1
    b6fe:	d1ee      	bne.n	b6de <__kernel_rem_pio2+0x30e>
    b700:	9e06      	ldr	r6, [sp, #24]
    b702:	e9e6 4502 	strd	r4, r5, [r6, #8]!
    b706:	9c08      	ldr	r4, [sp, #32]
    b708:	9606      	str	r6, [sp, #24]
    b70a:	45a0      	cmp	r8, r4
    b70c:	d1d2      	bne.n	b6b4 <__kernel_rem_pio2+0x2e4>
    b70e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b710:	9603      	str	r6, [sp, #12]
    b712:	e6d5      	b.n	b4c0 <__kernel_rem_pio2+0xf0>
    b714:	2400      	movs	r4, #0
    b716:	2500      	movs	r5, #0
    b718:	e7f2      	b.n	b700 <__kernel_rem_pio2+0x330>
    b71a:	d129      	bne.n	b770 <__kernel_rem_pio2+0x3a0>
    b71c:	9c03      	ldr	r4, [sp, #12]
    b71e:	a810      	add	r0, sp, #64	; 0x40
    b720:	1e63      	subs	r3, r4, #1
    b722:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    b726:	15ed      	asrs	r5, r5, #23
    b728:	e743      	b.n	b5b2 <__kernel_rem_pio2+0x1e2>
    b72a:	4632      	mov	r2, r6
    b72c:	463b      	mov	r3, r7
    b72e:	2000      	movs	r0, #0
    b730:	491c      	ldr	r1, [pc, #112]	; (b7a4 <__kernel_rem_pio2+0x3d4>)
    b732:	f000 fba3 	bl	be7c <__aeabi_dsub>
    b736:	4606      	mov	r6, r0
    b738:	460f      	mov	r7, r1
    b73a:	2c00      	cmp	r4, #0
    b73c:	f43f af68 	beq.w	b610 <__kernel_rem_pio2+0x240>
    b740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b742:	4918      	ldr	r1, [pc, #96]	; (b7a4 <__kernel_rem_pio2+0x3d4>)
    b744:	2000      	movs	r0, #0
    b746:	f000 faff 	bl	bd48 <scalbn>
    b74a:	4602      	mov	r2, r0
    b74c:	460b      	mov	r3, r1
    b74e:	4630      	mov	r0, r6
    b750:	4639      	mov	r1, r7
    b752:	f000 fb93 	bl	be7c <__aeabi_dsub>
    b756:	4606      	mov	r6, r0
    b758:	460f      	mov	r7, r1
    b75a:	e759      	b.n	b610 <__kernel_rem_pio2+0x240>
    b75c:	9903      	ldr	r1, [sp, #12]
    b75e:	a810      	add	r0, sp, #64	; 0x40
    b760:	1e4b      	subs	r3, r1, #1
    b762:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    b766:	f3c2 0216 	ubfx	r2, r2, #0, #23
    b76a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    b76e:	e74c      	b.n	b60a <__kernel_rem_pio2+0x23a>
    b770:	2200      	movs	r2, #0
    b772:	4b0d      	ldr	r3, [pc, #52]	; (b7a8 <__kernel_rem_pio2+0x3d8>)
    b774:	f000 ffbc 	bl	c6f0 <__aeabi_dcmpge>
    b778:	b920      	cbnz	r0, b784 <__kernel_rem_pio2+0x3b4>
    b77a:	4605      	mov	r5, r0
    b77c:	e748      	b.n	b610 <__kernel_rem_pio2+0x240>
    b77e:	2400      	movs	r4, #0
    b780:	2500      	movs	r5, #0
    b782:	e68f      	b.n	b4a4 <__kernel_rem_pio2+0xd4>
    b784:	9c03      	ldr	r4, [sp, #12]
    b786:	2c00      	cmp	r4, #0
    b788:	f04f 0502 	mov.w	r5, #2
    b78c:	f10a 0a01 	add.w	sl, sl, #1
    b790:	f73f af17 	bgt.w	b5c2 <__kernel_rem_pio2+0x1f2>
    b794:	2400      	movs	r4, #0
    b796:	e727      	b.n	b5e8 <__kernel_rem_pio2+0x218>
    b798:	3e700000 	.word	0x3e700000
    b79c:	41700000 	.word	0x41700000
    b7a0:	40200000 	.word	0x40200000
    b7a4:	3ff00000 	.word	0x3ff00000
    b7a8:	3fe00000 	.word	0x3fe00000
    b7ac:	4630      	mov	r0, r6
    b7ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b7b0:	9506      	str	r5, [sp, #24]
    b7b2:	4272      	negs	r2, r6
    b7b4:	4639      	mov	r1, r7
    b7b6:	f8cd a01c 	str.w	sl, [sp, #28]
    b7ba:	f000 fac5 	bl	bd48 <scalbn>
    b7be:	2200      	movs	r2, #0
    b7c0:	4b92      	ldr	r3, [pc, #584]	; (ba0c <__kernel_rem_pio2+0x63c>)
    b7c2:	4604      	mov	r4, r0
    b7c4:	460d      	mov	r5, r1
    b7c6:	f000 ff93 	bl	c6f0 <__aeabi_dcmpge>
    b7ca:	2800      	cmp	r0, #0
    b7cc:	f000 81b6 	beq.w	bb3c <__kernel_rem_pio2+0x76c>
    b7d0:	2200      	movs	r2, #0
    b7d2:	4b8f      	ldr	r3, [pc, #572]	; (ba10 <__kernel_rem_pio2+0x640>)
    b7d4:	4620      	mov	r0, r4
    b7d6:	4629      	mov	r1, r5
    b7d8:	f000 fd04 	bl	c1e4 <__aeabi_dmul>
    b7dc:	f000 ff9c 	bl	c718 <__aeabi_d2iz>
    b7e0:	4606      	mov	r6, r0
    b7e2:	f000 fc99 	bl	c118 <__aeabi_i2d>
    b7e6:	2200      	movs	r2, #0
    b7e8:	4b88      	ldr	r3, [pc, #544]	; (ba0c <__kernel_rem_pio2+0x63c>)
    b7ea:	f000 fcfb 	bl	c1e4 <__aeabi_dmul>
    b7ee:	4602      	mov	r2, r0
    b7f0:	460b      	mov	r3, r1
    b7f2:	4620      	mov	r0, r4
    b7f4:	4629      	mov	r1, r5
    b7f6:	f000 fb41 	bl	be7c <__aeabi_dsub>
    b7fa:	f000 ff8d 	bl	c718 <__aeabi_d2iz>
    b7fe:	9c03      	ldr	r4, [sp, #12]
    b800:	f104 0801 	add.w	r8, r4, #1
    b804:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b806:	3418      	adds	r4, #24
    b808:	a910      	add	r1, sp, #64	; 0x40
    b80a:	940a      	str	r4, [sp, #40]	; 0x28
    b80c:	9c03      	ldr	r4, [sp, #12]
    b80e:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    b812:	f841 6028 	str.w	r6, [r1, r8, lsl #2]
    b816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b818:	497e      	ldr	r1, [pc, #504]	; (ba14 <__kernel_rem_pio2+0x644>)
    b81a:	2000      	movs	r0, #0
    b81c:	f000 fa94 	bl	bd48 <scalbn>
    b820:	f1b8 0f00 	cmp.w	r8, #0
    b824:	4604      	mov	r4, r0
    b826:	460d      	mov	r5, r1
    b828:	db5a      	blt.n	b8e0 <__kernel_rem_pio2+0x510>
    b82a:	f108 0601 	add.w	r6, r8, #1
    b82e:	a810      	add	r0, sp, #64	; 0x40
    b830:	a974      	add	r1, sp, #464	; 0x1d0
    b832:	9603      	str	r6, [sp, #12]
    b834:	eb00 0786 	add.w	r7, r0, r6, lsl #2
    b838:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
    b83c:	f857 0d04 	ldr.w	r0, [r7, #-4]!
    b840:	f000 fc6a 	bl	c118 <__aeabi_i2d>
    b844:	4622      	mov	r2, r4
    b846:	462b      	mov	r3, r5
    b848:	f000 fccc 	bl	c1e4 <__aeabi_dmul>
    b84c:	2200      	movs	r2, #0
    b84e:	e966 0102 	strd	r0, r1, [r6, #-8]!
    b852:	4b6f      	ldr	r3, [pc, #444]	; (ba10 <__kernel_rem_pio2+0x640>)
    b854:	4620      	mov	r0, r4
    b856:	4629      	mov	r1, r5
    b858:	f000 fcc4 	bl	c1e4 <__aeabi_dmul>
    b85c:	9a02      	ldr	r2, [sp, #8]
    b85e:	4297      	cmp	r7, r2
    b860:	4604      	mov	r4, r0
    b862:	460d      	mov	r5, r1
    b864:	d1ea      	bne.n	b83c <__kernel_rem_pio2+0x46c>
    b866:	f108 5b00 	add.w	fp, r8, #536870912	; 0x20000000
    b86a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    b86e:	ab74      	add	r3, sp, #464	; 0x1d0
    b870:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    b874:	f8cd 8020 	str.w	r8, [sp, #32]
    b878:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    b87c:	f8cd a010 	str.w	sl, [sp, #16]
    b880:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
    b884:	f04f 0900 	mov.w	r9, #0
    b888:	f1b8 0f00 	cmp.w	r8, #0
    b88c:	f2c0 8122 	blt.w	bad4 <__kernel_rem_pio2+0x704>
    b890:	f8df a184 	ldr.w	sl, [pc, #388]	; ba18 <__kernel_rem_pio2+0x648>
    b894:	465f      	mov	r7, fp
    b896:	2400      	movs	r4, #0
    b898:	2500      	movs	r5, #0
    b89a:	2600      	movs	r6, #0
    b89c:	e001      	b.n	b8a2 <__kernel_rem_pio2+0x4d2>
    b89e:	454e      	cmp	r6, r9
    b8a0:	dc10      	bgt.n	b8c4 <__kernel_rem_pio2+0x4f4>
    b8a2:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
    b8a6:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
    b8aa:	f000 fc9b 	bl	c1e4 <__aeabi_dmul>
    b8ae:	4602      	mov	r2, r0
    b8b0:	460b      	mov	r3, r1
    b8b2:	4620      	mov	r0, r4
    b8b4:	4629      	mov	r1, r5
    b8b6:	f000 fae3 	bl	be80 <__adddf3>
    b8ba:	3601      	adds	r6, #1
    b8bc:	45b0      	cmp	r8, r6
    b8be:	4604      	mov	r4, r0
    b8c0:	460d      	mov	r5, r1
    b8c2:	daec      	bge.n	b89e <__kernel_rem_pio2+0x4ce>
    b8c4:	9e04      	ldr	r6, [sp, #16]
    b8c6:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
    b8ca:	e9c3 4500 	strd	r4, r5, [r3]
    b8ce:	9c03      	ldr	r4, [sp, #12]
    b8d0:	f109 0901 	add.w	r9, r9, #1
    b8d4:	45a1      	cmp	r9, r4
    b8d6:	f1ab 0b08 	sub.w	fp, fp, #8
    b8da:	d1d5      	bne.n	b888 <__kernel_rem_pio2+0x4b8>
    b8dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    b8e0:	9ea6      	ldr	r6, [sp, #664]	; 0x298
    b8e2:	2e03      	cmp	r6, #3
    b8e4:	f200 808a 	bhi.w	b9fc <__kernel_rem_pio2+0x62c>
    b8e8:	e8df f016 	tbh	[pc, r6, lsl #1]
    b8ec:	009800d4 	.word	0x009800d4
    b8f0:	00040098 	.word	0x00040098
    b8f4:	f1b8 0f00 	cmp.w	r8, #0
    b8f8:	f340 810c 	ble.w	bb14 <__kernel_rem_pio2+0x744>
    b8fc:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    b900:	ea4f 0bc8 	mov.w	fp, r8, lsl #3
    b904:	eb0a 030b 	add.w	r3, sl, fp
    b908:	e9d3 6700 	ldrd	r6, r7, [r3]
    b90c:	f108 0301 	add.w	r3, r8, #1
    b910:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
    b914:	9303      	str	r3, [sp, #12]
    b916:	4699      	mov	r9, r3
    b918:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
    b91c:	e001      	b.n	b922 <__kernel_rem_pio2+0x552>
    b91e:	4626      	mov	r6, r4
    b920:	462f      	mov	r7, r5
    b922:	e959 0104 	ldrd	r0, r1, [r9, #-16]
    b926:	4632      	mov	r2, r6
    b928:	463b      	mov	r3, r7
    b92a:	f8cd c004 	str.w	ip, [sp, #4]
    b92e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b932:	f000 faa5 	bl	be80 <__adddf3>
    b936:	4604      	mov	r4, r0
    b938:	460d      	mov	r5, r1
    b93a:	4622      	mov	r2, r4
    b93c:	462b      	mov	r3, r5
    b93e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b942:	f000 fa9b 	bl	be7c <__aeabi_dsub>
    b946:	4632      	mov	r2, r6
    b948:	463b      	mov	r3, r7
    b94a:	f000 fa99 	bl	be80 <__adddf3>
    b94e:	e969 0102 	strd	r0, r1, [r9, #-8]!
    b952:	f8dd c004 	ldr.w	ip, [sp, #4]
    b956:	45e1      	cmp	r9, ip
    b958:	e949 4502 	strd	r4, r5, [r9, #-8]
    b95c:	d1df      	bne.n	b91e <__kernel_rem_pio2+0x54e>
    b95e:	f1b8 0f01 	cmp.w	r8, #1
    b962:	f340 8109 	ble.w	bb78 <__kernel_rem_pio2+0x7a8>
    b966:	f8dd c00c 	ldr.w	ip, [sp, #12]
    b96a:	f8cd a010 	str.w	sl, [sp, #16]
    b96e:	44d3      	add	fp, sl
    b970:	e9db 4500 	ldrd	r4, r5, [fp]
    b974:	f10a 0b10 	add.w	fp, sl, #16
    b978:	46e2      	mov	sl, ip
    b97a:	e001      	b.n	b980 <__kernel_rem_pio2+0x5b0>
    b97c:	4634      	mov	r4, r6
    b97e:	463d      	mov	r5, r7
    b980:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
    b984:	4622      	mov	r2, r4
    b986:	462b      	mov	r3, r5
    b988:	4640      	mov	r0, r8
    b98a:	4649      	mov	r1, r9
    b98c:	f000 fa78 	bl	be80 <__adddf3>
    b990:	4606      	mov	r6, r0
    b992:	460f      	mov	r7, r1
    b994:	4632      	mov	r2, r6
    b996:	463b      	mov	r3, r7
    b998:	4640      	mov	r0, r8
    b99a:	4649      	mov	r1, r9
    b99c:	f000 fa6e 	bl	be7c <__aeabi_dsub>
    b9a0:	4622      	mov	r2, r4
    b9a2:	462b      	mov	r3, r5
    b9a4:	f000 fa6c 	bl	be80 <__adddf3>
    b9a8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
    b9ac:	45da      	cmp	sl, fp
    b9ae:	e94a 6702 	strd	r6, r7, [sl, #-8]
    b9b2:	d1e3      	bne.n	b97c <__kernel_rem_pio2+0x5ac>
    b9b4:	f8dd a010 	ldr.w	sl, [sp, #16]
    b9b8:	9c03      	ldr	r4, [sp, #12]
    b9ba:	2000      	movs	r0, #0
    b9bc:	2100      	movs	r1, #0
    b9be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    b9c2:	f000 fa5d 	bl	be80 <__adddf3>
    b9c6:	45a3      	cmp	fp, r4
    b9c8:	d1f9      	bne.n	b9be <__kernel_rem_pio2+0x5ee>
    b9ca:	9c06      	ldr	r4, [sp, #24]
    b9cc:	2c00      	cmp	r4, #0
    b9ce:	f000 80a9 	beq.w	bb24 <__kernel_rem_pio2+0x754>
    b9d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b9d4:	f8da 5004 	ldr.w	r5, [sl, #4]
    b9d8:	f8da 400c 	ldr.w	r4, [sl, #12]
    b9dc:	f8da 2000 	ldr.w	r2, [sl]
    b9e0:	f8da 3008 	ldr.w	r3, [sl, #8]
    b9e4:	6032      	str	r2, [r6, #0]
    b9e6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    b9ea:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    b9ee:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
    b9f2:	6075      	str	r5, [r6, #4]
    b9f4:	60f4      	str	r4, [r6, #12]
    b9f6:	60b3      	str	r3, [r6, #8]
    b9f8:	6130      	str	r0, [r6, #16]
    b9fa:	6172      	str	r2, [r6, #20]
    b9fc:	9c07      	ldr	r4, [sp, #28]
    b9fe:	f004 0007 	and.w	r0, r4, #7
    ba02:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    ba06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba0a:	bf00      	nop
    ba0c:	41700000 	.word	0x41700000
    ba10:	3e700000 	.word	0x3e700000
    ba14:	3ff00000 	.word	0x3ff00000
    ba18:	00014110 	.word	0x00014110
    ba1c:	f1b8 0f00 	cmp.w	r8, #0
    ba20:	f2c0 80a5 	blt.w	bb6e <__kernel_rem_pio2+0x79e>
    ba24:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    ba28:	f108 0401 	add.w	r4, r8, #1
    ba2c:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
    ba30:	2000      	movs	r0, #0
    ba32:	2100      	movs	r1, #0
    ba34:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    ba38:	f000 fa22 	bl	be80 <__adddf3>
    ba3c:	4554      	cmp	r4, sl
    ba3e:	d1f9      	bne.n	ba34 <__kernel_rem_pio2+0x664>
    ba40:	9c06      	ldr	r4, [sp, #24]
    ba42:	2c00      	cmp	r4, #0
    ba44:	d049      	beq.n	bada <__kernel_rem_pio2+0x70a>
    ba46:	4602      	mov	r2, r0
    ba48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    ba4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ba4e:	e9c6 2300 	strd	r2, r3, [r6]
    ba52:	4602      	mov	r2, r0
    ba54:	460b      	mov	r3, r1
    ba56:	e9da 0100 	ldrd	r0, r1, [sl]
    ba5a:	f000 fa0f 	bl	be7c <__aeabi_dsub>
    ba5e:	f1b8 0f00 	cmp.w	r8, #0
    ba62:	dd07      	ble.n	ba74 <__kernel_rem_pio2+0x6a4>
    ba64:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
    ba68:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
    ba6c:	f000 fa08 	bl	be80 <__adddf3>
    ba70:	45c2      	cmp	sl, r8
    ba72:	d1f9      	bne.n	ba68 <__kernel_rem_pio2+0x698>
    ba74:	9c06      	ldr	r4, [sp, #24]
    ba76:	2c00      	cmp	r4, #0
    ba78:	d06a      	beq.n	bb50 <__kernel_rem_pio2+0x780>
    ba7a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ba7c:	4602      	mov	r2, r0
    ba7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    ba82:	e9c6 2302 	strd	r2, r3, [r6, #8]
    ba86:	9c07      	ldr	r4, [sp, #28]
    ba88:	f004 0007 	and.w	r0, r4, #7
    ba8c:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    ba90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba94:	f1b8 0f00 	cmp.w	r8, #0
    ba98:	db66      	blt.n	bb68 <__kernel_rem_pio2+0x798>
    ba9a:	f108 0401 	add.w	r4, r8, #1
    ba9e:	ad4c      	add	r5, sp, #304	; 0x130
    baa0:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    baa4:	2000      	movs	r0, #0
    baa6:	2100      	movs	r1, #0
    baa8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    baac:	f000 f9e8 	bl	be80 <__adddf3>
    bab0:	42ac      	cmp	r4, r5
    bab2:	d1f9      	bne.n	baa8 <__kernel_rem_pio2+0x6d8>
    bab4:	9c06      	ldr	r4, [sp, #24]
    bab6:	2c00      	cmp	r4, #0
    bab8:	d050      	beq.n	bb5c <__kernel_rem_pio2+0x78c>
    baba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    babc:	4602      	mov	r2, r0
    babe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    bac2:	e9c6 2300 	strd	r2, r3, [r6]
    bac6:	9c07      	ldr	r4, [sp, #28]
    bac8:	f004 0007 	and.w	r0, r4, #7
    bacc:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    bad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bad4:	2400      	movs	r4, #0
    bad6:	2500      	movs	r5, #0
    bad8:	e6f4      	b.n	b8c4 <__kernel_rem_pio2+0x4f4>
    bada:	4602      	mov	r2, r0
    badc:	460b      	mov	r3, r1
    bade:	e7b5      	b.n	ba4c <__kernel_rem_pio2+0x67c>
    bae0:	2301      	movs	r3, #1
    bae2:	e5c2      	b.n	b66a <__kernel_rem_pio2+0x29a>
    bae4:	ae10      	add	r6, sp, #64	; 0x40
    bae6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bae8:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
    baec:	f8cd a01c 	str.w	sl, [sp, #28]
    baf0:	3c18      	subs	r4, #24
    baf2:	9506      	str	r5, [sp, #24]
    baf4:	940a      	str	r4, [sp, #40]	; 0x28
    baf6:	2b00      	cmp	r3, #0
    baf8:	f47f ae8d 	bne.w	b816 <__kernel_rem_pio2+0x446>
    bafc:	eb06 0388 	add.w	r3, r6, r8, lsl #2
    bb00:	4622      	mov	r2, r4
    bb02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    bb06:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    bb0a:	3a18      	subs	r2, #24
    bb0c:	2900      	cmp	r1, #0
    bb0e:	d0f8      	beq.n	bb02 <__kernel_rem_pio2+0x732>
    bb10:	920a      	str	r2, [sp, #40]	; 0x28
    bb12:	e680      	b.n	b816 <__kernel_rem_pio2+0x446>
    bb14:	9c06      	ldr	r4, [sp, #24]
    bb16:	2000      	movs	r0, #0
    bb18:	2100      	movs	r1, #0
    bb1a:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    bb1e:	2c00      	cmp	r4, #0
    bb20:	f47f af57 	bne.w	b9d2 <__kernel_rem_pio2+0x602>
    bb24:	e9da 2300 	ldrd	r2, r3, [sl]
    bb28:	e9da 4502 	ldrd	r4, r5, [sl, #8]
    bb2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb2e:	e9c6 0104 	strd	r0, r1, [r6, #16]
    bb32:	e9c6 2300 	strd	r2, r3, [r6]
    bb36:	e9c6 4502 	strd	r4, r5, [r6, #8]
    bb3a:	e75f      	b.n	b9fc <__kernel_rem_pio2+0x62c>
    bb3c:	4620      	mov	r0, r4
    bb3e:	4629      	mov	r1, r5
    bb40:	f000 fdea 	bl	c718 <__aeabi_d2iz>
    bb44:	ae10      	add	r6, sp, #64	; 0x40
    bb46:	9c03      	ldr	r4, [sp, #12]
    bb48:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    bb4c:	46a0      	mov	r8, r4
    bb4e:	e662      	b.n	b816 <__kernel_rem_pio2+0x446>
    bb50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb52:	4602      	mov	r2, r0
    bb54:	460b      	mov	r3, r1
    bb56:	e9c6 2302 	strd	r2, r3, [r6, #8]
    bb5a:	e794      	b.n	ba86 <__kernel_rem_pio2+0x6b6>
    bb5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb5e:	4602      	mov	r2, r0
    bb60:	460b      	mov	r3, r1
    bb62:	e9c6 2300 	strd	r2, r3, [r6]
    bb66:	e7ae      	b.n	bac6 <__kernel_rem_pio2+0x6f6>
    bb68:	2000      	movs	r0, #0
    bb6a:	2100      	movs	r1, #0
    bb6c:	e7a2      	b.n	bab4 <__kernel_rem_pio2+0x6e4>
    bb6e:	2000      	movs	r0, #0
    bb70:	2100      	movs	r1, #0
    bb72:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    bb76:	e763      	b.n	ba40 <__kernel_rem_pio2+0x670>
    bb78:	2000      	movs	r0, #0
    bb7a:	2100      	movs	r1, #0
    bb7c:	e725      	b.n	b9ca <__kernel_rem_pio2+0x5fa>
    bb7e:	bf00      	nop

0000bb80 <__kernel_sin>:
    bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb84:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    bb88:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
    bb8c:	b085      	sub	sp, #20
    bb8e:	4604      	mov	r4, r0
    bb90:	460d      	mov	r5, r1
    bb92:	4690      	mov	r8, r2
    bb94:	4699      	mov	r9, r3
    bb96:	da04      	bge.n	bba2 <__kernel_sin+0x22>
    bb98:	f000 fdbe 	bl	c718 <__aeabi_d2iz>
    bb9c:	2800      	cmp	r0, #0
    bb9e:	f000 8084 	beq.w	bcaa <__kernel_sin+0x12a>
    bba2:	4622      	mov	r2, r4
    bba4:	462b      	mov	r3, r5
    bba6:	4620      	mov	r0, r4
    bba8:	4629      	mov	r1, r5
    bbaa:	f000 fb1b 	bl	c1e4 <__aeabi_dmul>
    bbae:	4622      	mov	r2, r4
    bbb0:	462b      	mov	r3, r5
    bbb2:	4606      	mov	r6, r0
    bbb4:	460f      	mov	r7, r1
    bbb6:	f000 fb15 	bl	c1e4 <__aeabi_dmul>
    bbba:	a33f      	add	r3, pc, #252	; (adr r3, bcb8 <__kernel_sin+0x138>)
    bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    bbc0:	4682      	mov	sl, r0
    bbc2:	468b      	mov	fp, r1
    bbc4:	4630      	mov	r0, r6
    bbc6:	4639      	mov	r1, r7
    bbc8:	f000 fb0c 	bl	c1e4 <__aeabi_dmul>
    bbcc:	a33c      	add	r3, pc, #240	; (adr r3, bcc0 <__kernel_sin+0x140>)
    bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
    bbd2:	f000 f953 	bl	be7c <__aeabi_dsub>
    bbd6:	4632      	mov	r2, r6
    bbd8:	463b      	mov	r3, r7
    bbda:	f000 fb03 	bl	c1e4 <__aeabi_dmul>
    bbde:	a33a      	add	r3, pc, #232	; (adr r3, bcc8 <__kernel_sin+0x148>)
    bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
    bbe4:	f000 f94c 	bl	be80 <__adddf3>
    bbe8:	4632      	mov	r2, r6
    bbea:	463b      	mov	r3, r7
    bbec:	f000 fafa 	bl	c1e4 <__aeabi_dmul>
    bbf0:	a337      	add	r3, pc, #220	; (adr r3, bcd0 <__kernel_sin+0x150>)
    bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    bbf6:	f000 f941 	bl	be7c <__aeabi_dsub>
    bbfa:	4632      	mov	r2, r6
    bbfc:	463b      	mov	r3, r7
    bbfe:	f000 faf1 	bl	c1e4 <__aeabi_dmul>
    bc02:	a335      	add	r3, pc, #212	; (adr r3, bcd8 <__kernel_sin+0x158>)
    bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc08:	f000 f93a 	bl	be80 <__adddf3>
    bc0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bc0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    bc12:	2b00      	cmp	r3, #0
    bc14:	d033      	beq.n	bc7e <__kernel_sin+0xfe>
    bc16:	4640      	mov	r0, r8
    bc18:	4649      	mov	r1, r9
    bc1a:	2200      	movs	r2, #0
    bc1c:	4b32      	ldr	r3, [pc, #200]	; (bce8 <__kernel_sin+0x168>)
    bc1e:	f000 fae1 	bl	c1e4 <__aeabi_dmul>
    bc22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bc26:	e9cd 0100 	strd	r0, r1, [sp]
    bc2a:	4650      	mov	r0, sl
    bc2c:	4659      	mov	r1, fp
    bc2e:	f000 fad9 	bl	c1e4 <__aeabi_dmul>
    bc32:	4602      	mov	r2, r0
    bc34:	460b      	mov	r3, r1
    bc36:	e9dd 0100 	ldrd	r0, r1, [sp]
    bc3a:	f000 f91f 	bl	be7c <__aeabi_dsub>
    bc3e:	4632      	mov	r2, r6
    bc40:	463b      	mov	r3, r7
    bc42:	f000 facf 	bl	c1e4 <__aeabi_dmul>
    bc46:	4642      	mov	r2, r8
    bc48:	464b      	mov	r3, r9
    bc4a:	f000 f917 	bl	be7c <__aeabi_dsub>
    bc4e:	a324      	add	r3, pc, #144	; (adr r3, bce0 <__kernel_sin+0x160>)
    bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc54:	4606      	mov	r6, r0
    bc56:	460f      	mov	r7, r1
    bc58:	4650      	mov	r0, sl
    bc5a:	4659      	mov	r1, fp
    bc5c:	f000 fac2 	bl	c1e4 <__aeabi_dmul>
    bc60:	4602      	mov	r2, r0
    bc62:	460b      	mov	r3, r1
    bc64:	4630      	mov	r0, r6
    bc66:	4639      	mov	r1, r7
    bc68:	f000 f90a 	bl	be80 <__adddf3>
    bc6c:	4602      	mov	r2, r0
    bc6e:	460b      	mov	r3, r1
    bc70:	4620      	mov	r0, r4
    bc72:	4629      	mov	r1, r5
    bc74:	f000 f902 	bl	be7c <__aeabi_dsub>
    bc78:	b005      	add	sp, #20
    bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bc82:	4630      	mov	r0, r6
    bc84:	4639      	mov	r1, r7
    bc86:	f000 faad 	bl	c1e4 <__aeabi_dmul>
    bc8a:	a315      	add	r3, pc, #84	; (adr r3, bce0 <__kernel_sin+0x160>)
    bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc90:	f000 f8f4 	bl	be7c <__aeabi_dsub>
    bc94:	4652      	mov	r2, sl
    bc96:	465b      	mov	r3, fp
    bc98:	f000 faa4 	bl	c1e4 <__aeabi_dmul>
    bc9c:	4622      	mov	r2, r4
    bc9e:	462b      	mov	r3, r5
    bca0:	f000 f8ee 	bl	be80 <__adddf3>
    bca4:	b005      	add	sp, #20
    bca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcaa:	4620      	mov	r0, r4
    bcac:	4629      	mov	r1, r5
    bcae:	b005      	add	sp, #20
    bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcb4:	f3af 8000 	nop.w
    bcb8:	5acfd57c 	.word	0x5acfd57c
    bcbc:	3de5d93a 	.word	0x3de5d93a
    bcc0:	8a2b9ceb 	.word	0x8a2b9ceb
    bcc4:	3e5ae5e6 	.word	0x3e5ae5e6
    bcc8:	57b1fe7d 	.word	0x57b1fe7d
    bccc:	3ec71de3 	.word	0x3ec71de3
    bcd0:	19c161d5 	.word	0x19c161d5
    bcd4:	3f2a01a0 	.word	0x3f2a01a0
    bcd8:	1110f8a6 	.word	0x1110f8a6
    bcdc:	3f811111 	.word	0x3f811111
    bce0:	55555549 	.word	0x55555549
    bce4:	3fc55555 	.word	0x3fc55555
    bce8:	3fe00000 	.word	0x3fe00000
    bcec:	f3af 8000 	nop.w

0000bcf0 <fabs>:
    bcf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bcf4:	4770      	bx	lr
    bcf6:	bf00      	nop

0000bcf8 <__fpclassifyd>:
    bcf8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    bcfc:	b410      	push	{r4}
    bcfe:	d008      	beq.n	bd12 <__fpclassifyd+0x1a>
    bd00:	4a0f      	ldr	r2, [pc, #60]	; (bd40 <__fpclassifyd+0x48>)
    bd02:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
    bd06:	4294      	cmp	r4, r2
    bd08:	d80a      	bhi.n	bd20 <__fpclassifyd+0x28>
    bd0a:	2004      	movs	r0, #4
    bd0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    bd10:	4770      	bx	lr
    bd12:	2800      	cmp	r0, #0
    bd14:	bf0c      	ite	eq
    bd16:	2002      	moveq	r0, #2
    bd18:	2003      	movne	r0, #3
    bd1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    bd1e:	4770      	bx	lr
    bd20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    bd24:	d201      	bcs.n	bd2a <__fpclassifyd+0x32>
    bd26:	2003      	movs	r0, #3
    bd28:	e7f7      	b.n	bd1a <__fpclassifyd+0x22>
    bd2a:	4a06      	ldr	r2, [pc, #24]	; (bd44 <__fpclassifyd+0x4c>)
    bd2c:	4293      	cmp	r3, r2
    bd2e:	d001      	beq.n	bd34 <__fpclassifyd+0x3c>
    bd30:	2000      	movs	r0, #0
    bd32:	e7f2      	b.n	bd1a <__fpclassifyd+0x22>
    bd34:	f1d0 0001 	rsbs	r0, r0, #1
    bd38:	bf38      	it	cc
    bd3a:	2000      	movcc	r0, #0
    bd3c:	e7ed      	b.n	bd1a <__fpclassifyd+0x22>
    bd3e:	bf00      	nop
    bd40:	7fdfffff 	.word	0x7fdfffff
    bd44:	7ff00000 	.word	0x7ff00000

0000bd48 <scalbn>:
    bd48:	f3c1 530a 	ubfx	r3, r1, #20, #11
    bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd50:	4690      	mov	r8, r2
    bd52:	4606      	mov	r6, r0
    bd54:	460f      	mov	r7, r1
    bd56:	460a      	mov	r2, r1
    bd58:	bb1b      	cbnz	r3, bda2 <scalbn+0x5a>
    bd5a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    bd5e:	4303      	orrs	r3, r0
    bd60:	d034      	beq.n	bdcc <scalbn+0x84>
    bd62:	4b3b      	ldr	r3, [pc, #236]	; (be50 <scalbn+0x108>)
    bd64:	2200      	movs	r2, #0
    bd66:	f000 fa3d 	bl	c1e4 <__aeabi_dmul>
    bd6a:	4b3a      	ldr	r3, [pc, #232]	; (be54 <scalbn+0x10c>)
    bd6c:	4598      	cmp	r8, r3
    bd6e:	4606      	mov	r6, r0
    bd70:	460f      	mov	r7, r1
    bd72:	db3b      	blt.n	bdec <scalbn+0xa4>
    bd74:	f3c1 530a 	ubfx	r3, r1, #20, #11
    bd78:	3b36      	subs	r3, #54	; 0x36
    bd7a:	460a      	mov	r2, r1
    bd7c:	4443      	add	r3, r8
    bd7e:	f240 71fe 	movw	r1, #2046	; 0x7fe
    bd82:	428b      	cmp	r3, r1
    bd84:	dd16      	ble.n	bdb4 <scalbn+0x6c>
    bd86:	4632      	mov	r2, r6
    bd88:	463b      	mov	r3, r7
    bd8a:	a12d      	add	r1, pc, #180	; (adr r1, be40 <scalbn+0xf8>)
    bd8c:	e9d1 0100 	ldrd	r0, r1, [r1]
    bd90:	f000 f866 	bl	be60 <copysign>
    bd94:	a32a      	add	r3, pc, #168	; (adr r3, be40 <scalbn+0xf8>)
    bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd9a:	f000 fa23 	bl	c1e4 <__aeabi_dmul>
    bd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bda2:	f240 74ff 	movw	r4, #2047	; 0x7ff
    bda6:	42a3      	cmp	r3, r4
    bda8:	d027      	beq.n	bdfa <scalbn+0xb2>
    bdaa:	4443      	add	r3, r8
    bdac:	f240 71fe 	movw	r1, #2046	; 0x7fe
    bdb0:	428b      	cmp	r3, r1
    bdb2:	dce8      	bgt.n	bd86 <scalbn+0x3e>
    bdb4:	2b00      	cmp	r3, #0
    bdb6:	dd0b      	ble.n	bdd0 <scalbn+0x88>
    bdb8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    bdbc:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    bdc0:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
    bdc4:	4630      	mov	r0, r6
    bdc6:	4639      	mov	r1, r7
    bdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdd0:	f113 0f35 	cmn.w	r3, #53	; 0x35
    bdd4:	da17      	bge.n	be06 <scalbn+0xbe>
    bdd6:	f24c 3350 	movw	r3, #50000	; 0xc350
    bdda:	4598      	cmp	r8, r3
    bddc:	4632      	mov	r2, r6
    bdde:	463b      	mov	r3, r7
    bde0:	dc20      	bgt.n	be24 <scalbn+0xdc>
    bde2:	a119      	add	r1, pc, #100	; (adr r1, be48 <scalbn+0x100>)
    bde4:	e9d1 0100 	ldrd	r0, r1, [r1]
    bde8:	f000 f83a 	bl	be60 <copysign>
    bdec:	a316      	add	r3, pc, #88	; (adr r3, be48 <scalbn+0x100>)
    bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
    bdf2:	f000 f9f7 	bl	c1e4 <__aeabi_dmul>
    bdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdfa:	4602      	mov	r2, r0
    bdfc:	460b      	mov	r3, r1
    bdfe:	f000 f83f 	bl	be80 <__adddf3>
    be02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be06:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    be0a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    be0e:	3336      	adds	r3, #54	; 0x36
    be10:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
    be14:	4630      	mov	r0, r6
    be16:	4639      	mov	r1, r7
    be18:	2200      	movs	r2, #0
    be1a:	4b0f      	ldr	r3, [pc, #60]	; (be58 <scalbn+0x110>)
    be1c:	f000 f9e2 	bl	c1e4 <__aeabi_dmul>
    be20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be24:	a106      	add	r1, pc, #24	; (adr r1, be40 <scalbn+0xf8>)
    be26:	e9d1 0100 	ldrd	r0, r1, [r1]
    be2a:	f000 f819 	bl	be60 <copysign>
    be2e:	a304      	add	r3, pc, #16	; (adr r3, be40 <scalbn+0xf8>)
    be30:	e9d3 2300 	ldrd	r2, r3, [r3]
    be34:	f000 f9d6 	bl	c1e4 <__aeabi_dmul>
    be38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be3c:	f3af 8000 	nop.w
    be40:	8800759c 	.word	0x8800759c
    be44:	7e37e43c 	.word	0x7e37e43c
    be48:	c2f8f359 	.word	0xc2f8f359
    be4c:	01a56e1f 	.word	0x01a56e1f
    be50:	43500000 	.word	0x43500000
    be54:	ffff3cb0 	.word	0xffff3cb0
    be58:	3c900000 	.word	0x3c900000
    be5c:	f3af 8000 	nop.w

0000be60 <copysign>:
    be60:	b430      	push	{r4, r5}
    be62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    be66:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    be6a:	ea43 0102 	orr.w	r1, r3, r2
    be6e:	bc30      	pop	{r4, r5}
    be70:	4770      	bx	lr
    be72:	bf00      	nop

0000be74 <__aeabi_drsub>:
    be74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    be78:	e002      	b.n	be80 <__adddf3>
    be7a:	bf00      	nop

0000be7c <__aeabi_dsub>:
    be7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000be80 <__adddf3>:
    be80:	b530      	push	{r4, r5, lr}
    be82:	ea4f 0441 	mov.w	r4, r1, lsl #1
    be86:	ea4f 0543 	mov.w	r5, r3, lsl #1
    be8a:	ea94 0f05 	teq	r4, r5
    be8e:	bf08      	it	eq
    be90:	ea90 0f02 	teqeq	r0, r2
    be94:	bf1f      	itttt	ne
    be96:	ea54 0c00 	orrsne.w	ip, r4, r0
    be9a:	ea55 0c02 	orrsne.w	ip, r5, r2
    be9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    bea2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bea6:	f000 80e2 	beq.w	c06e <__adddf3+0x1ee>
    beaa:	ea4f 5454 	mov.w	r4, r4, lsr #21
    beae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    beb2:	bfb8      	it	lt
    beb4:	426d      	neglt	r5, r5
    beb6:	dd0c      	ble.n	bed2 <__adddf3+0x52>
    beb8:	442c      	add	r4, r5
    beba:	ea80 0202 	eor.w	r2, r0, r2
    bebe:	ea81 0303 	eor.w	r3, r1, r3
    bec2:	ea82 0000 	eor.w	r0, r2, r0
    bec6:	ea83 0101 	eor.w	r1, r3, r1
    beca:	ea80 0202 	eor.w	r2, r0, r2
    bece:	ea81 0303 	eor.w	r3, r1, r3
    bed2:	2d36      	cmp	r5, #54	; 0x36
    bed4:	bf88      	it	hi
    bed6:	bd30      	pophi	{r4, r5, pc}
    bed8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bedc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bee0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    bee4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    bee8:	d002      	beq.n	bef0 <__adddf3+0x70>
    beea:	4240      	negs	r0, r0
    beec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bef0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    bef4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bef8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    befc:	d002      	beq.n	bf04 <__adddf3+0x84>
    befe:	4252      	negs	r2, r2
    bf00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    bf04:	ea94 0f05 	teq	r4, r5
    bf08:	f000 80a7 	beq.w	c05a <__adddf3+0x1da>
    bf0c:	f1a4 0401 	sub.w	r4, r4, #1
    bf10:	f1d5 0e20 	rsbs	lr, r5, #32
    bf14:	db0d      	blt.n	bf32 <__adddf3+0xb2>
    bf16:	fa02 fc0e 	lsl.w	ip, r2, lr
    bf1a:	fa22 f205 	lsr.w	r2, r2, r5
    bf1e:	1880      	adds	r0, r0, r2
    bf20:	f141 0100 	adc.w	r1, r1, #0
    bf24:	fa03 f20e 	lsl.w	r2, r3, lr
    bf28:	1880      	adds	r0, r0, r2
    bf2a:	fa43 f305 	asr.w	r3, r3, r5
    bf2e:	4159      	adcs	r1, r3
    bf30:	e00e      	b.n	bf50 <__adddf3+0xd0>
    bf32:	f1a5 0520 	sub.w	r5, r5, #32
    bf36:	f10e 0e20 	add.w	lr, lr, #32
    bf3a:	2a01      	cmp	r2, #1
    bf3c:	fa03 fc0e 	lsl.w	ip, r3, lr
    bf40:	bf28      	it	cs
    bf42:	f04c 0c02 	orrcs.w	ip, ip, #2
    bf46:	fa43 f305 	asr.w	r3, r3, r5
    bf4a:	18c0      	adds	r0, r0, r3
    bf4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    bf50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bf54:	d507      	bpl.n	bf66 <__adddf3+0xe6>
    bf56:	f04f 0e00 	mov.w	lr, #0
    bf5a:	f1dc 0c00 	rsbs	ip, ip, #0
    bf5e:	eb7e 0000 	sbcs.w	r0, lr, r0
    bf62:	eb6e 0101 	sbc.w	r1, lr, r1
    bf66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    bf6a:	d31b      	bcc.n	bfa4 <__adddf3+0x124>
    bf6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    bf70:	d30c      	bcc.n	bf8c <__adddf3+0x10c>
    bf72:	0849      	lsrs	r1, r1, #1
    bf74:	ea5f 0030 	movs.w	r0, r0, rrx
    bf78:	ea4f 0c3c 	mov.w	ip, ip, rrx
    bf7c:	f104 0401 	add.w	r4, r4, #1
    bf80:	ea4f 5244 	mov.w	r2, r4, lsl #21
    bf84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    bf88:	f080 809a 	bcs.w	c0c0 <__adddf3+0x240>
    bf8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    bf90:	bf08      	it	eq
    bf92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    bf96:	f150 0000 	adcs.w	r0, r0, #0
    bf9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bf9e:	ea41 0105 	orr.w	r1, r1, r5
    bfa2:	bd30      	pop	{r4, r5, pc}
    bfa4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    bfa8:	4140      	adcs	r0, r0
    bfaa:	eb41 0101 	adc.w	r1, r1, r1
    bfae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bfb2:	f1a4 0401 	sub.w	r4, r4, #1
    bfb6:	d1e9      	bne.n	bf8c <__adddf3+0x10c>
    bfb8:	f091 0f00 	teq	r1, #0
    bfbc:	bf04      	itt	eq
    bfbe:	4601      	moveq	r1, r0
    bfc0:	2000      	moveq	r0, #0
    bfc2:	fab1 f381 	clz	r3, r1
    bfc6:	bf08      	it	eq
    bfc8:	3320      	addeq	r3, #32
    bfca:	f1a3 030b 	sub.w	r3, r3, #11
    bfce:	f1b3 0220 	subs.w	r2, r3, #32
    bfd2:	da0c      	bge.n	bfee <__adddf3+0x16e>
    bfd4:	320c      	adds	r2, #12
    bfd6:	dd08      	ble.n	bfea <__adddf3+0x16a>
    bfd8:	f102 0c14 	add.w	ip, r2, #20
    bfdc:	f1c2 020c 	rsb	r2, r2, #12
    bfe0:	fa01 f00c 	lsl.w	r0, r1, ip
    bfe4:	fa21 f102 	lsr.w	r1, r1, r2
    bfe8:	e00c      	b.n	c004 <__adddf3+0x184>
    bfea:	f102 0214 	add.w	r2, r2, #20
    bfee:	bfd8      	it	le
    bff0:	f1c2 0c20 	rsble	ip, r2, #32
    bff4:	fa01 f102 	lsl.w	r1, r1, r2
    bff8:	fa20 fc0c 	lsr.w	ip, r0, ip
    bffc:	bfdc      	itt	le
    bffe:	ea41 010c 	orrle.w	r1, r1, ip
    c002:	4090      	lslle	r0, r2
    c004:	1ae4      	subs	r4, r4, r3
    c006:	bfa2      	ittt	ge
    c008:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c00c:	4329      	orrge	r1, r5
    c00e:	bd30      	popge	{r4, r5, pc}
    c010:	ea6f 0404 	mvn.w	r4, r4
    c014:	3c1f      	subs	r4, #31
    c016:	da1c      	bge.n	c052 <__adddf3+0x1d2>
    c018:	340c      	adds	r4, #12
    c01a:	dc0e      	bgt.n	c03a <__adddf3+0x1ba>
    c01c:	f104 0414 	add.w	r4, r4, #20
    c020:	f1c4 0220 	rsb	r2, r4, #32
    c024:	fa20 f004 	lsr.w	r0, r0, r4
    c028:	fa01 f302 	lsl.w	r3, r1, r2
    c02c:	ea40 0003 	orr.w	r0, r0, r3
    c030:	fa21 f304 	lsr.w	r3, r1, r4
    c034:	ea45 0103 	orr.w	r1, r5, r3
    c038:	bd30      	pop	{r4, r5, pc}
    c03a:	f1c4 040c 	rsb	r4, r4, #12
    c03e:	f1c4 0220 	rsb	r2, r4, #32
    c042:	fa20 f002 	lsr.w	r0, r0, r2
    c046:	fa01 f304 	lsl.w	r3, r1, r4
    c04a:	ea40 0003 	orr.w	r0, r0, r3
    c04e:	4629      	mov	r1, r5
    c050:	bd30      	pop	{r4, r5, pc}
    c052:	fa21 f004 	lsr.w	r0, r1, r4
    c056:	4629      	mov	r1, r5
    c058:	bd30      	pop	{r4, r5, pc}
    c05a:	f094 0f00 	teq	r4, #0
    c05e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c062:	bf06      	itte	eq
    c064:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c068:	3401      	addeq	r4, #1
    c06a:	3d01      	subne	r5, #1
    c06c:	e74e      	b.n	bf0c <__adddf3+0x8c>
    c06e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c072:	bf18      	it	ne
    c074:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c078:	d029      	beq.n	c0ce <__adddf3+0x24e>
    c07a:	ea94 0f05 	teq	r4, r5
    c07e:	bf08      	it	eq
    c080:	ea90 0f02 	teqeq	r0, r2
    c084:	d005      	beq.n	c092 <__adddf3+0x212>
    c086:	ea54 0c00 	orrs.w	ip, r4, r0
    c08a:	bf04      	itt	eq
    c08c:	4619      	moveq	r1, r3
    c08e:	4610      	moveq	r0, r2
    c090:	bd30      	pop	{r4, r5, pc}
    c092:	ea91 0f03 	teq	r1, r3
    c096:	bf1e      	ittt	ne
    c098:	2100      	movne	r1, #0
    c09a:	2000      	movne	r0, #0
    c09c:	bd30      	popne	{r4, r5, pc}
    c09e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c0a2:	d105      	bne.n	c0b0 <__adddf3+0x230>
    c0a4:	0040      	lsls	r0, r0, #1
    c0a6:	4149      	adcs	r1, r1
    c0a8:	bf28      	it	cs
    c0aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c0ae:	bd30      	pop	{r4, r5, pc}
    c0b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c0b4:	bf3c      	itt	cc
    c0b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c0ba:	bd30      	popcc	{r4, r5, pc}
    c0bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c0c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c0c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c0c8:	f04f 0000 	mov.w	r0, #0
    c0cc:	bd30      	pop	{r4, r5, pc}
    c0ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c0d2:	bf1a      	itte	ne
    c0d4:	4619      	movne	r1, r3
    c0d6:	4610      	movne	r0, r2
    c0d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c0dc:	bf1c      	itt	ne
    c0de:	460b      	movne	r3, r1
    c0e0:	4602      	movne	r2, r0
    c0e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c0e6:	bf06      	itte	eq
    c0e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c0ec:	ea91 0f03 	teqeq	r1, r3
    c0f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c0f4:	bd30      	pop	{r4, r5, pc}
    c0f6:	bf00      	nop

0000c0f8 <__aeabi_ui2d>:
    c0f8:	f090 0f00 	teq	r0, #0
    c0fc:	bf04      	itt	eq
    c0fe:	2100      	moveq	r1, #0
    c100:	4770      	bxeq	lr
    c102:	b530      	push	{r4, r5, lr}
    c104:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c108:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c10c:	f04f 0500 	mov.w	r5, #0
    c110:	f04f 0100 	mov.w	r1, #0
    c114:	e750      	b.n	bfb8 <__adddf3+0x138>
    c116:	bf00      	nop

0000c118 <__aeabi_i2d>:
    c118:	f090 0f00 	teq	r0, #0
    c11c:	bf04      	itt	eq
    c11e:	2100      	moveq	r1, #0
    c120:	4770      	bxeq	lr
    c122:	b530      	push	{r4, r5, lr}
    c124:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c128:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c12c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c130:	bf48      	it	mi
    c132:	4240      	negmi	r0, r0
    c134:	f04f 0100 	mov.w	r1, #0
    c138:	e73e      	b.n	bfb8 <__adddf3+0x138>
    c13a:	bf00      	nop

0000c13c <__aeabi_f2d>:
    c13c:	0042      	lsls	r2, r0, #1
    c13e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c142:	ea4f 0131 	mov.w	r1, r1, rrx
    c146:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c14a:	bf1f      	itttt	ne
    c14c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c150:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c154:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c158:	4770      	bxne	lr
    c15a:	f092 0f00 	teq	r2, #0
    c15e:	bf14      	ite	ne
    c160:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c164:	4770      	bxeq	lr
    c166:	b530      	push	{r4, r5, lr}
    c168:	f44f 7460 	mov.w	r4, #896	; 0x380
    c16c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c170:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c174:	e720      	b.n	bfb8 <__adddf3+0x138>
    c176:	bf00      	nop

0000c178 <__aeabi_ul2d>:
    c178:	ea50 0201 	orrs.w	r2, r0, r1
    c17c:	bf08      	it	eq
    c17e:	4770      	bxeq	lr
    c180:	b530      	push	{r4, r5, lr}
    c182:	f04f 0500 	mov.w	r5, #0
    c186:	e00a      	b.n	c19e <__aeabi_l2d+0x16>

0000c188 <__aeabi_l2d>:
    c188:	ea50 0201 	orrs.w	r2, r0, r1
    c18c:	bf08      	it	eq
    c18e:	4770      	bxeq	lr
    c190:	b530      	push	{r4, r5, lr}
    c192:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c196:	d502      	bpl.n	c19e <__aeabi_l2d+0x16>
    c198:	4240      	negs	r0, r0
    c19a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c19e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c1a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c1a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c1aa:	f43f aedc 	beq.w	bf66 <__adddf3+0xe6>
    c1ae:	f04f 0203 	mov.w	r2, #3
    c1b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c1b6:	bf18      	it	ne
    c1b8:	3203      	addne	r2, #3
    c1ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c1be:	bf18      	it	ne
    c1c0:	3203      	addne	r2, #3
    c1c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c1c6:	f1c2 0320 	rsb	r3, r2, #32
    c1ca:	fa00 fc03 	lsl.w	ip, r0, r3
    c1ce:	fa20 f002 	lsr.w	r0, r0, r2
    c1d2:	fa01 fe03 	lsl.w	lr, r1, r3
    c1d6:	ea40 000e 	orr.w	r0, r0, lr
    c1da:	fa21 f102 	lsr.w	r1, r1, r2
    c1de:	4414      	add	r4, r2
    c1e0:	e6c1      	b.n	bf66 <__adddf3+0xe6>
    c1e2:	bf00      	nop

0000c1e4 <__aeabi_dmul>:
    c1e4:	b570      	push	{r4, r5, r6, lr}
    c1e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c1ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c1ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c1f2:	bf1d      	ittte	ne
    c1f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c1f8:	ea94 0f0c 	teqne	r4, ip
    c1fc:	ea95 0f0c 	teqne	r5, ip
    c200:	f000 f8de 	bleq	c3c0 <__aeabi_dmul+0x1dc>
    c204:	442c      	add	r4, r5
    c206:	ea81 0603 	eor.w	r6, r1, r3
    c20a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c20e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c212:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c216:	bf18      	it	ne
    c218:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c21c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c224:	d038      	beq.n	c298 <__aeabi_dmul+0xb4>
    c226:	fba0 ce02 	umull	ip, lr, r0, r2
    c22a:	f04f 0500 	mov.w	r5, #0
    c22e:	fbe1 e502 	umlal	lr, r5, r1, r2
    c232:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c236:	fbe0 e503 	umlal	lr, r5, r0, r3
    c23a:	f04f 0600 	mov.w	r6, #0
    c23e:	fbe1 5603 	umlal	r5, r6, r1, r3
    c242:	f09c 0f00 	teq	ip, #0
    c246:	bf18      	it	ne
    c248:	f04e 0e01 	orrne.w	lr, lr, #1
    c24c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c250:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c254:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c258:	d204      	bcs.n	c264 <__aeabi_dmul+0x80>
    c25a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c25e:	416d      	adcs	r5, r5
    c260:	eb46 0606 	adc.w	r6, r6, r6
    c264:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c268:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c26c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c270:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c274:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c278:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c27c:	bf88      	it	hi
    c27e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c282:	d81e      	bhi.n	c2c2 <__aeabi_dmul+0xde>
    c284:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c288:	bf08      	it	eq
    c28a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c28e:	f150 0000 	adcs.w	r0, r0, #0
    c292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c296:	bd70      	pop	{r4, r5, r6, pc}
    c298:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c29c:	ea46 0101 	orr.w	r1, r6, r1
    c2a0:	ea40 0002 	orr.w	r0, r0, r2
    c2a4:	ea81 0103 	eor.w	r1, r1, r3
    c2a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c2ac:	bfc2      	ittt	gt
    c2ae:	ebd4 050c 	rsbsgt	r5, r4, ip
    c2b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c2b6:	bd70      	popgt	{r4, r5, r6, pc}
    c2b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c2bc:	f04f 0e00 	mov.w	lr, #0
    c2c0:	3c01      	subs	r4, #1
    c2c2:	f300 80ab 	bgt.w	c41c <__aeabi_dmul+0x238>
    c2c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c2ca:	bfde      	ittt	le
    c2cc:	2000      	movle	r0, #0
    c2ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c2d2:	bd70      	pople	{r4, r5, r6, pc}
    c2d4:	f1c4 0400 	rsb	r4, r4, #0
    c2d8:	3c20      	subs	r4, #32
    c2da:	da35      	bge.n	c348 <__aeabi_dmul+0x164>
    c2dc:	340c      	adds	r4, #12
    c2de:	dc1b      	bgt.n	c318 <__aeabi_dmul+0x134>
    c2e0:	f104 0414 	add.w	r4, r4, #20
    c2e4:	f1c4 0520 	rsb	r5, r4, #32
    c2e8:	fa00 f305 	lsl.w	r3, r0, r5
    c2ec:	fa20 f004 	lsr.w	r0, r0, r4
    c2f0:	fa01 f205 	lsl.w	r2, r1, r5
    c2f4:	ea40 0002 	orr.w	r0, r0, r2
    c2f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c2fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c300:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c304:	fa21 f604 	lsr.w	r6, r1, r4
    c308:	eb42 0106 	adc.w	r1, r2, r6
    c30c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c310:	bf08      	it	eq
    c312:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c316:	bd70      	pop	{r4, r5, r6, pc}
    c318:	f1c4 040c 	rsb	r4, r4, #12
    c31c:	f1c4 0520 	rsb	r5, r4, #32
    c320:	fa00 f304 	lsl.w	r3, r0, r4
    c324:	fa20 f005 	lsr.w	r0, r0, r5
    c328:	fa01 f204 	lsl.w	r2, r1, r4
    c32c:	ea40 0002 	orr.w	r0, r0, r2
    c330:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c338:	f141 0100 	adc.w	r1, r1, #0
    c33c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c340:	bf08      	it	eq
    c342:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c346:	bd70      	pop	{r4, r5, r6, pc}
    c348:	f1c4 0520 	rsb	r5, r4, #32
    c34c:	fa00 f205 	lsl.w	r2, r0, r5
    c350:	ea4e 0e02 	orr.w	lr, lr, r2
    c354:	fa20 f304 	lsr.w	r3, r0, r4
    c358:	fa01 f205 	lsl.w	r2, r1, r5
    c35c:	ea43 0302 	orr.w	r3, r3, r2
    c360:	fa21 f004 	lsr.w	r0, r1, r4
    c364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c368:	fa21 f204 	lsr.w	r2, r1, r4
    c36c:	ea20 0002 	bic.w	r0, r0, r2
    c370:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c374:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c378:	bf08      	it	eq
    c37a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c37e:	bd70      	pop	{r4, r5, r6, pc}
    c380:	f094 0f00 	teq	r4, #0
    c384:	d10f      	bne.n	c3a6 <__aeabi_dmul+0x1c2>
    c386:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c38a:	0040      	lsls	r0, r0, #1
    c38c:	eb41 0101 	adc.w	r1, r1, r1
    c390:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c394:	bf08      	it	eq
    c396:	3c01      	subeq	r4, #1
    c398:	d0f7      	beq.n	c38a <__aeabi_dmul+0x1a6>
    c39a:	ea41 0106 	orr.w	r1, r1, r6
    c39e:	f095 0f00 	teq	r5, #0
    c3a2:	bf18      	it	ne
    c3a4:	4770      	bxne	lr
    c3a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c3aa:	0052      	lsls	r2, r2, #1
    c3ac:	eb43 0303 	adc.w	r3, r3, r3
    c3b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c3b4:	bf08      	it	eq
    c3b6:	3d01      	subeq	r5, #1
    c3b8:	d0f7      	beq.n	c3aa <__aeabi_dmul+0x1c6>
    c3ba:	ea43 0306 	orr.w	r3, r3, r6
    c3be:	4770      	bx	lr
    c3c0:	ea94 0f0c 	teq	r4, ip
    c3c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c3c8:	bf18      	it	ne
    c3ca:	ea95 0f0c 	teqne	r5, ip
    c3ce:	d00c      	beq.n	c3ea <__aeabi_dmul+0x206>
    c3d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c3d4:	bf18      	it	ne
    c3d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c3da:	d1d1      	bne.n	c380 <__aeabi_dmul+0x19c>
    c3dc:	ea81 0103 	eor.w	r1, r1, r3
    c3e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c3e4:	f04f 0000 	mov.w	r0, #0
    c3e8:	bd70      	pop	{r4, r5, r6, pc}
    c3ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c3ee:	bf06      	itte	eq
    c3f0:	4610      	moveq	r0, r2
    c3f2:	4619      	moveq	r1, r3
    c3f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c3f8:	d019      	beq.n	c42e <__aeabi_dmul+0x24a>
    c3fa:	ea94 0f0c 	teq	r4, ip
    c3fe:	d102      	bne.n	c406 <__aeabi_dmul+0x222>
    c400:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c404:	d113      	bne.n	c42e <__aeabi_dmul+0x24a>
    c406:	ea95 0f0c 	teq	r5, ip
    c40a:	d105      	bne.n	c418 <__aeabi_dmul+0x234>
    c40c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c410:	bf1c      	itt	ne
    c412:	4610      	movne	r0, r2
    c414:	4619      	movne	r1, r3
    c416:	d10a      	bne.n	c42e <__aeabi_dmul+0x24a>
    c418:	ea81 0103 	eor.w	r1, r1, r3
    c41c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c420:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c428:	f04f 0000 	mov.w	r0, #0
    c42c:	bd70      	pop	{r4, r5, r6, pc}
    c42e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c432:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c436:	bd70      	pop	{r4, r5, r6, pc}

0000c438 <__aeabi_ddiv>:
    c438:	b570      	push	{r4, r5, r6, lr}
    c43a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c43e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c442:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c446:	bf1d      	ittte	ne
    c448:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c44c:	ea94 0f0c 	teqne	r4, ip
    c450:	ea95 0f0c 	teqne	r5, ip
    c454:	f000 f8a7 	bleq	c5a6 <__aeabi_ddiv+0x16e>
    c458:	eba4 0405 	sub.w	r4, r4, r5
    c45c:	ea81 0e03 	eor.w	lr, r1, r3
    c460:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c464:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c468:	f000 8088 	beq.w	c57c <__aeabi_ddiv+0x144>
    c46c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c470:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c474:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c478:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c47c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c480:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c484:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c488:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c48c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c490:	429d      	cmp	r5, r3
    c492:	bf08      	it	eq
    c494:	4296      	cmpeq	r6, r2
    c496:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c49a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c49e:	d202      	bcs.n	c4a6 <__aeabi_ddiv+0x6e>
    c4a0:	085b      	lsrs	r3, r3, #1
    c4a2:	ea4f 0232 	mov.w	r2, r2, rrx
    c4a6:	1ab6      	subs	r6, r6, r2
    c4a8:	eb65 0503 	sbc.w	r5, r5, r3
    c4ac:	085b      	lsrs	r3, r3, #1
    c4ae:	ea4f 0232 	mov.w	r2, r2, rrx
    c4b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c4b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c4ba:	ebb6 0e02 	subs.w	lr, r6, r2
    c4be:	eb75 0e03 	sbcs.w	lr, r5, r3
    c4c2:	bf22      	ittt	cs
    c4c4:	1ab6      	subcs	r6, r6, r2
    c4c6:	4675      	movcs	r5, lr
    c4c8:	ea40 000c 	orrcs.w	r0, r0, ip
    c4cc:	085b      	lsrs	r3, r3, #1
    c4ce:	ea4f 0232 	mov.w	r2, r2, rrx
    c4d2:	ebb6 0e02 	subs.w	lr, r6, r2
    c4d6:	eb75 0e03 	sbcs.w	lr, r5, r3
    c4da:	bf22      	ittt	cs
    c4dc:	1ab6      	subcs	r6, r6, r2
    c4de:	4675      	movcs	r5, lr
    c4e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c4e4:	085b      	lsrs	r3, r3, #1
    c4e6:	ea4f 0232 	mov.w	r2, r2, rrx
    c4ea:	ebb6 0e02 	subs.w	lr, r6, r2
    c4ee:	eb75 0e03 	sbcs.w	lr, r5, r3
    c4f2:	bf22      	ittt	cs
    c4f4:	1ab6      	subcs	r6, r6, r2
    c4f6:	4675      	movcs	r5, lr
    c4f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c4fc:	085b      	lsrs	r3, r3, #1
    c4fe:	ea4f 0232 	mov.w	r2, r2, rrx
    c502:	ebb6 0e02 	subs.w	lr, r6, r2
    c506:	eb75 0e03 	sbcs.w	lr, r5, r3
    c50a:	bf22      	ittt	cs
    c50c:	1ab6      	subcs	r6, r6, r2
    c50e:	4675      	movcs	r5, lr
    c510:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c514:	ea55 0e06 	orrs.w	lr, r5, r6
    c518:	d018      	beq.n	c54c <__aeabi_ddiv+0x114>
    c51a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c51e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c522:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c526:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c52a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c52e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c532:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c536:	d1c0      	bne.n	c4ba <__aeabi_ddiv+0x82>
    c538:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c53c:	d10b      	bne.n	c556 <__aeabi_ddiv+0x11e>
    c53e:	ea41 0100 	orr.w	r1, r1, r0
    c542:	f04f 0000 	mov.w	r0, #0
    c546:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c54a:	e7b6      	b.n	c4ba <__aeabi_ddiv+0x82>
    c54c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c550:	bf04      	itt	eq
    c552:	4301      	orreq	r1, r0
    c554:	2000      	moveq	r0, #0
    c556:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c55a:	bf88      	it	hi
    c55c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c560:	f63f aeaf 	bhi.w	c2c2 <__aeabi_dmul+0xde>
    c564:	ebb5 0c03 	subs.w	ip, r5, r3
    c568:	bf04      	itt	eq
    c56a:	ebb6 0c02 	subseq.w	ip, r6, r2
    c56e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c572:	f150 0000 	adcs.w	r0, r0, #0
    c576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c57a:	bd70      	pop	{r4, r5, r6, pc}
    c57c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c580:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c584:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c588:	bfc2      	ittt	gt
    c58a:	ebd4 050c 	rsbsgt	r5, r4, ip
    c58e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c592:	bd70      	popgt	{r4, r5, r6, pc}
    c594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c598:	f04f 0e00 	mov.w	lr, #0
    c59c:	3c01      	subs	r4, #1
    c59e:	e690      	b.n	c2c2 <__aeabi_dmul+0xde>
    c5a0:	ea45 0e06 	orr.w	lr, r5, r6
    c5a4:	e68d      	b.n	c2c2 <__aeabi_dmul+0xde>
    c5a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c5aa:	ea94 0f0c 	teq	r4, ip
    c5ae:	bf08      	it	eq
    c5b0:	ea95 0f0c 	teqeq	r5, ip
    c5b4:	f43f af3b 	beq.w	c42e <__aeabi_dmul+0x24a>
    c5b8:	ea94 0f0c 	teq	r4, ip
    c5bc:	d10a      	bne.n	c5d4 <__aeabi_ddiv+0x19c>
    c5be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c5c2:	f47f af34 	bne.w	c42e <__aeabi_dmul+0x24a>
    c5c6:	ea95 0f0c 	teq	r5, ip
    c5ca:	f47f af25 	bne.w	c418 <__aeabi_dmul+0x234>
    c5ce:	4610      	mov	r0, r2
    c5d0:	4619      	mov	r1, r3
    c5d2:	e72c      	b.n	c42e <__aeabi_dmul+0x24a>
    c5d4:	ea95 0f0c 	teq	r5, ip
    c5d8:	d106      	bne.n	c5e8 <__aeabi_ddiv+0x1b0>
    c5da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c5de:	f43f aefd 	beq.w	c3dc <__aeabi_dmul+0x1f8>
    c5e2:	4610      	mov	r0, r2
    c5e4:	4619      	mov	r1, r3
    c5e6:	e722      	b.n	c42e <__aeabi_dmul+0x24a>
    c5e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c5ec:	bf18      	it	ne
    c5ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c5f2:	f47f aec5 	bne.w	c380 <__aeabi_dmul+0x19c>
    c5f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c5fa:	f47f af0d 	bne.w	c418 <__aeabi_dmul+0x234>
    c5fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c602:	f47f aeeb 	bne.w	c3dc <__aeabi_dmul+0x1f8>
    c606:	e712      	b.n	c42e <__aeabi_dmul+0x24a>

0000c608 <__gedf2>:
    c608:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    c60c:	e006      	b.n	c61c <__cmpdf2+0x4>
    c60e:	bf00      	nop

0000c610 <__ledf2>:
    c610:	f04f 0c01 	mov.w	ip, #1
    c614:	e002      	b.n	c61c <__cmpdf2+0x4>
    c616:	bf00      	nop

0000c618 <__cmpdf2>:
    c618:	f04f 0c01 	mov.w	ip, #1
    c61c:	f84d cd04 	str.w	ip, [sp, #-4]!
    c620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c62c:	bf18      	it	ne
    c62e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c632:	d01b      	beq.n	c66c <__cmpdf2+0x54>
    c634:	b001      	add	sp, #4
    c636:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c63a:	bf0c      	ite	eq
    c63c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c640:	ea91 0f03 	teqne	r1, r3
    c644:	bf02      	ittt	eq
    c646:	ea90 0f02 	teqeq	r0, r2
    c64a:	2000      	moveq	r0, #0
    c64c:	4770      	bxeq	lr
    c64e:	f110 0f00 	cmn.w	r0, #0
    c652:	ea91 0f03 	teq	r1, r3
    c656:	bf58      	it	pl
    c658:	4299      	cmppl	r1, r3
    c65a:	bf08      	it	eq
    c65c:	4290      	cmpeq	r0, r2
    c65e:	bf2c      	ite	cs
    c660:	17d8      	asrcs	r0, r3, #31
    c662:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c666:	f040 0001 	orr.w	r0, r0, #1
    c66a:	4770      	bx	lr
    c66c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c674:	d102      	bne.n	c67c <__cmpdf2+0x64>
    c676:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c67a:	d107      	bne.n	c68c <__cmpdf2+0x74>
    c67c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c684:	d1d6      	bne.n	c634 <__cmpdf2+0x1c>
    c686:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c68a:	d0d3      	beq.n	c634 <__cmpdf2+0x1c>
    c68c:	f85d 0b04 	ldr.w	r0, [sp], #4
    c690:	4770      	bx	lr
    c692:	bf00      	nop

0000c694 <__aeabi_cdrcmple>:
    c694:	4684      	mov	ip, r0
    c696:	4610      	mov	r0, r2
    c698:	4662      	mov	r2, ip
    c69a:	468c      	mov	ip, r1
    c69c:	4619      	mov	r1, r3
    c69e:	4663      	mov	r3, ip
    c6a0:	e000      	b.n	c6a4 <__aeabi_cdcmpeq>
    c6a2:	bf00      	nop

0000c6a4 <__aeabi_cdcmpeq>:
    c6a4:	b501      	push	{r0, lr}
    c6a6:	f7ff ffb7 	bl	c618 <__cmpdf2>
    c6aa:	2800      	cmp	r0, #0
    c6ac:	bf48      	it	mi
    c6ae:	f110 0f00 	cmnmi.w	r0, #0
    c6b2:	bd01      	pop	{r0, pc}

0000c6b4 <__aeabi_dcmpeq>:
    c6b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6b8:	f7ff fff4 	bl	c6a4 <__aeabi_cdcmpeq>
    c6bc:	bf0c      	ite	eq
    c6be:	2001      	moveq	r0, #1
    c6c0:	2000      	movne	r0, #0
    c6c2:	f85d fb08 	ldr.w	pc, [sp], #8
    c6c6:	bf00      	nop

0000c6c8 <__aeabi_dcmplt>:
    c6c8:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6cc:	f7ff ffea 	bl	c6a4 <__aeabi_cdcmpeq>
    c6d0:	bf34      	ite	cc
    c6d2:	2001      	movcc	r0, #1
    c6d4:	2000      	movcs	r0, #0
    c6d6:	f85d fb08 	ldr.w	pc, [sp], #8
    c6da:	bf00      	nop

0000c6dc <__aeabi_dcmple>:
    c6dc:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6e0:	f7ff ffe0 	bl	c6a4 <__aeabi_cdcmpeq>
    c6e4:	bf94      	ite	ls
    c6e6:	2001      	movls	r0, #1
    c6e8:	2000      	movhi	r0, #0
    c6ea:	f85d fb08 	ldr.w	pc, [sp], #8
    c6ee:	bf00      	nop

0000c6f0 <__aeabi_dcmpge>:
    c6f0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6f4:	f7ff ffce 	bl	c694 <__aeabi_cdrcmple>
    c6f8:	bf94      	ite	ls
    c6fa:	2001      	movls	r0, #1
    c6fc:	2000      	movhi	r0, #0
    c6fe:	f85d fb08 	ldr.w	pc, [sp], #8
    c702:	bf00      	nop

0000c704 <__aeabi_dcmpgt>:
    c704:	f84d ed08 	str.w	lr, [sp, #-8]!
    c708:	f7ff ffc4 	bl	c694 <__aeabi_cdrcmple>
    c70c:	bf34      	ite	cc
    c70e:	2001      	movcc	r0, #1
    c710:	2000      	movcs	r0, #0
    c712:	f85d fb08 	ldr.w	pc, [sp], #8
    c716:	bf00      	nop

0000c718 <__aeabi_d2iz>:
    c718:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c71c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c720:	d215      	bcs.n	c74e <__aeabi_d2iz+0x36>
    c722:	d511      	bpl.n	c748 <__aeabi_d2iz+0x30>
    c724:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c72c:	d912      	bls.n	c754 <__aeabi_d2iz+0x3c>
    c72e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c73a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c73e:	fa23 f002 	lsr.w	r0, r3, r2
    c742:	bf18      	it	ne
    c744:	4240      	negne	r0, r0
    c746:	4770      	bx	lr
    c748:	f04f 0000 	mov.w	r0, #0
    c74c:	4770      	bx	lr
    c74e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c752:	d105      	bne.n	c760 <__aeabi_d2iz+0x48>
    c754:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c758:	bf08      	it	eq
    c75a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c75e:	4770      	bx	lr
    c760:	f04f 0000 	mov.w	r0, #0
    c764:	4770      	bx	lr
    c766:	bf00      	nop

0000c768 <__aeabi_d2uiz>:
    c768:	004a      	lsls	r2, r1, #1
    c76a:	d211      	bcs.n	c790 <__aeabi_d2uiz+0x28>
    c76c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c770:	d211      	bcs.n	c796 <__aeabi_d2uiz+0x2e>
    c772:	d50d      	bpl.n	c790 <__aeabi_d2uiz+0x28>
    c774:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c778:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c77c:	d40e      	bmi.n	c79c <__aeabi_d2uiz+0x34>
    c77e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c786:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c78a:	fa23 f002 	lsr.w	r0, r3, r2
    c78e:	4770      	bx	lr
    c790:	f04f 0000 	mov.w	r0, #0
    c794:	4770      	bx	lr
    c796:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c79a:	d102      	bne.n	c7a2 <__aeabi_d2uiz+0x3a>
    c79c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c7a0:	4770      	bx	lr
    c7a2:	f04f 0000 	mov.w	r0, #0
    c7a6:	4770      	bx	lr

0000c7a8 <selfrel_offset31>:
    c7a8:	6803      	ldr	r3, [r0, #0]
    c7aa:	005a      	lsls	r2, r3, #1
    c7ac:	bf4c      	ite	mi
    c7ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    c7b2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    c7b6:	4418      	add	r0, r3
    c7b8:	4770      	bx	lr
    c7ba:	bf00      	nop

0000c7bc <search_EIT_table>:
    c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7c0:	4606      	mov	r6, r0
    c7c2:	b083      	sub	sp, #12
    c7c4:	4691      	mov	r9, r2
    c7c6:	b321      	cbz	r1, c812 <search_EIT_table+0x56>
    c7c8:	3901      	subs	r1, #1
    c7ca:	9101      	str	r1, [sp, #4]
    c7cc:	4688      	mov	r8, r1
    c7ce:	2700      	movs	r7, #0
    c7d0:	eb07 0408 	add.w	r4, r7, r8
    c7d4:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    c7d8:	1064      	asrs	r4, r4, #1
    c7da:	00e5      	lsls	r5, r4, #3
    c7dc:	eb06 0b05 	add.w	fp, r6, r5
    c7e0:	4658      	mov	r0, fp
    c7e2:	f7ff ffe1 	bl	c7a8 <selfrel_offset31>
    c7e6:	9b01      	ldr	r3, [sp, #4]
    c7e8:	4682      	mov	sl, r0
    c7ea:	42a3      	cmp	r3, r4
    c7ec:	f105 0008 	add.w	r0, r5, #8
    c7f0:	4430      	add	r0, r6
    c7f2:	d019      	beq.n	c828 <search_EIT_table+0x6c>
    c7f4:	f7ff ffd8 	bl	c7a8 <selfrel_offset31>
    c7f8:	45ca      	cmp	sl, r9
    c7fa:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    c7fe:	d904      	bls.n	c80a <search_EIT_table+0x4e>
    c800:	42bc      	cmp	r4, r7
    c802:	d00b      	beq.n	c81c <search_EIT_table+0x60>
    c804:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    c808:	e7e2      	b.n	c7d0 <search_EIT_table+0x14>
    c80a:	4548      	cmp	r0, r9
    c80c:	d202      	bcs.n	c814 <search_EIT_table+0x58>
    c80e:	1c67      	adds	r7, r4, #1
    c810:	e7de      	b.n	c7d0 <search_EIT_table+0x14>
    c812:	468b      	mov	fp, r1
    c814:	4658      	mov	r0, fp
    c816:	b003      	add	sp, #12
    c818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c81c:	f04f 0b00 	mov.w	fp, #0
    c820:	4658      	mov	r0, fp
    c822:	b003      	add	sp, #12
    c824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c828:	45ca      	cmp	sl, r9
    c82a:	d8e9      	bhi.n	c800 <search_EIT_table+0x44>
    c82c:	e7f2      	b.n	c814 <search_EIT_table+0x58>
    c82e:	bf00      	nop

0000c830 <__gnu_unwind_get_pr_addr>:
    c830:	2801      	cmp	r0, #1
    c832:	d007      	beq.n	c844 <__gnu_unwind_get_pr_addr+0x14>
    c834:	2802      	cmp	r0, #2
    c836:	d007      	beq.n	c848 <__gnu_unwind_get_pr_addr+0x18>
    c838:	4b04      	ldr	r3, [pc, #16]	; (c84c <__gnu_unwind_get_pr_addr+0x1c>)
    c83a:	2800      	cmp	r0, #0
    c83c:	bf0c      	ite	eq
    c83e:	4618      	moveq	r0, r3
    c840:	2000      	movne	r0, #0
    c842:	4770      	bx	lr
    c844:	4802      	ldr	r0, [pc, #8]	; (c850 <__gnu_unwind_get_pr_addr+0x20>)
    c846:	4770      	bx	lr
    c848:	4802      	ldr	r0, [pc, #8]	; (c854 <__gnu_unwind_get_pr_addr+0x24>)
    c84a:	4770      	bx	lr
    c84c:	0000cf61 	.word	0x0000cf61
    c850:	0000cf69 	.word	0x0000cf69
    c854:	0000cf71 	.word	0x0000cf71

0000c858 <get_eit_entry>:
    c858:	b530      	push	{r4, r5, lr}
    c85a:	4b27      	ldr	r3, [pc, #156]	; (c8f8 <get_eit_entry+0xa0>)
    c85c:	b083      	sub	sp, #12
    c85e:	4604      	mov	r4, r0
    c860:	1e8d      	subs	r5, r1, #2
    c862:	2b00      	cmp	r3, #0
    c864:	d042      	beq.n	c8ec <get_eit_entry+0x94>
    c866:	4628      	mov	r0, r5
    c868:	a901      	add	r1, sp, #4
    c86a:	f3af 8000 	nop.w
    c86e:	4603      	mov	r3, r0
    c870:	b323      	cbz	r3, c8bc <get_eit_entry+0x64>
    c872:	462a      	mov	r2, r5
    c874:	9901      	ldr	r1, [sp, #4]
    c876:	f7ff ffa1 	bl	c7bc <search_EIT_table>
    c87a:	4605      	mov	r5, r0
    c87c:	b318      	cbz	r0, c8c6 <get_eit_entry+0x6e>
    c87e:	f7ff ff93 	bl	c7a8 <selfrel_offset31>
    c882:	686b      	ldr	r3, [r5, #4]
    c884:	64a0      	str	r0, [r4, #72]	; 0x48
    c886:	2b01      	cmp	r3, #1
    c888:	d012      	beq.n	c8b0 <get_eit_entry+0x58>
    c88a:	2b00      	cmp	r3, #0
    c88c:	f105 0004 	add.w	r0, r5, #4
    c890:	db28      	blt.n	c8e4 <get_eit_entry+0x8c>
    c892:	f7ff ff89 	bl	c7a8 <selfrel_offset31>
    c896:	2300      	movs	r3, #0
    c898:	64e0      	str	r0, [r4, #76]	; 0x4c
    c89a:	6523      	str	r3, [r4, #80]	; 0x50
    c89c:	6803      	ldr	r3, [r0, #0]
    c89e:	2b00      	cmp	r3, #0
    c8a0:	db16      	blt.n	c8d0 <get_eit_entry+0x78>
    c8a2:	f7ff ff81 	bl	c7a8 <selfrel_offset31>
    c8a6:	2300      	movs	r3, #0
    c8a8:	6120      	str	r0, [r4, #16]
    c8aa:	4618      	mov	r0, r3
    c8ac:	b003      	add	sp, #12
    c8ae:	bd30      	pop	{r4, r5, pc}
    c8b0:	2300      	movs	r3, #0
    c8b2:	6123      	str	r3, [r4, #16]
    c8b4:	2305      	movs	r3, #5
    c8b6:	4618      	mov	r0, r3
    c8b8:	b003      	add	sp, #12
    c8ba:	bd30      	pop	{r4, r5, pc}
    c8bc:	6123      	str	r3, [r4, #16]
    c8be:	2309      	movs	r3, #9
    c8c0:	4618      	mov	r0, r3
    c8c2:	b003      	add	sp, #12
    c8c4:	bd30      	pop	{r4, r5, pc}
    c8c6:	2309      	movs	r3, #9
    c8c8:	6120      	str	r0, [r4, #16]
    c8ca:	4618      	mov	r0, r3
    c8cc:	b003      	add	sp, #12
    c8ce:	bd30      	pop	{r4, r5, pc}
    c8d0:	f3c3 6003 	ubfx	r0, r3, #24, #4
    c8d4:	f7ff ffac 	bl	c830 <__gnu_unwind_get_pr_addr>
    c8d8:	2800      	cmp	r0, #0
    c8da:	6120      	str	r0, [r4, #16]
    c8dc:	bf14      	ite	ne
    c8de:	2300      	movne	r3, #0
    c8e0:	2309      	moveq	r3, #9
    c8e2:	e7e2      	b.n	c8aa <get_eit_entry+0x52>
    c8e4:	2301      	movs	r3, #1
    c8e6:	64e0      	str	r0, [r4, #76]	; 0x4c
    c8e8:	6523      	str	r3, [r4, #80]	; 0x50
    c8ea:	e7d7      	b.n	c89c <get_eit_entry+0x44>
    c8ec:	4b03      	ldr	r3, [pc, #12]	; (c8fc <get_eit_entry+0xa4>)
    c8ee:	4804      	ldr	r0, [pc, #16]	; (c900 <get_eit_entry+0xa8>)
    c8f0:	1a1b      	subs	r3, r3, r0
    c8f2:	10db      	asrs	r3, r3, #3
    c8f4:	9301      	str	r3, [sp, #4]
    c8f6:	e7bc      	b.n	c872 <get_eit_entry+0x1a>
    c8f8:	00000000 	.word	0x00000000
    c8fc:	000144cc 	.word	0x000144cc
    c900:	00014314 	.word	0x00014314

0000c904 <restore_non_core_regs>:
    c904:	6803      	ldr	r3, [r0, #0]
    c906:	07da      	lsls	r2, r3, #31
    c908:	b510      	push	{r4, lr}
    c90a:	4604      	mov	r4, r0
    c90c:	d406      	bmi.n	c91c <restore_non_core_regs+0x18>
    c90e:	079b      	lsls	r3, r3, #30
    c910:	f100 0048 	add.w	r0, r0, #72	; 0x48
    c914:	d509      	bpl.n	c92a <restore_non_core_regs+0x26>
    c916:	f000 fc69 	bl	d1ec <__gnu_Unwind_Restore_VFP_D>
    c91a:	6823      	ldr	r3, [r4, #0]
    c91c:	0759      	lsls	r1, r3, #29
    c91e:	d509      	bpl.n	c934 <restore_non_core_regs+0x30>
    c920:	071a      	lsls	r2, r3, #28
    c922:	d50e      	bpl.n	c942 <restore_non_core_regs+0x3e>
    c924:	06db      	lsls	r3, r3, #27
    c926:	d513      	bpl.n	c950 <restore_non_core_regs+0x4c>
    c928:	bd10      	pop	{r4, pc}
    c92a:	f000 fc57 	bl	d1dc <__gnu_Unwind_Restore_VFP>
    c92e:	6823      	ldr	r3, [r4, #0]
    c930:	0759      	lsls	r1, r3, #29
    c932:	d4f5      	bmi.n	c920 <restore_non_core_regs+0x1c>
    c934:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    c938:	f000 fc60 	bl	d1fc <__gnu_Unwind_Restore_VFP_D_16_to_31>
    c93c:	6823      	ldr	r3, [r4, #0]
    c93e:	071a      	lsls	r2, r3, #28
    c940:	d4f0      	bmi.n	c924 <restore_non_core_regs+0x20>
    c942:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    c946:	f000 fc61 	bl	d20c <__gnu_Unwind_Restore_WMMXD>
    c94a:	6823      	ldr	r3, [r4, #0]
    c94c:	06db      	lsls	r3, r3, #27
    c94e:	d4eb      	bmi.n	c928 <restore_non_core_regs+0x24>
    c950:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    c954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c958:	f000 bc9c 	b.w	d294 <__gnu_Unwind_Restore_WMMXC>

0000c95c <_Unwind_decode_typeinfo_ptr.isra.0>:
    c95c:	6803      	ldr	r3, [r0, #0]
    c95e:	b10b      	cbz	r3, c964 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    c960:	4418      	add	r0, r3
    c962:	4770      	bx	lr
    c964:	4618      	mov	r0, r3
    c966:	4770      	bx	lr

0000c968 <__gnu_unwind_24bit.isra.1>:
    c968:	2009      	movs	r0, #9
    c96a:	4770      	bx	lr

0000c96c <_Unwind_DebugHook>:
    c96c:	4770      	bx	lr
    c96e:	bf00      	nop

0000c970 <unwind_phase2>:
    c970:	b570      	push	{r4, r5, r6, lr}
    c972:	4604      	mov	r4, r0
    c974:	460d      	mov	r5, r1
    c976:	e008      	b.n	c98a <unwind_phase2+0x1a>
    c978:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    c97a:	6163      	str	r3, [r4, #20]
    c97c:	2001      	movs	r0, #1
    c97e:	6923      	ldr	r3, [r4, #16]
    c980:	4621      	mov	r1, r4
    c982:	462a      	mov	r2, r5
    c984:	4798      	blx	r3
    c986:	2808      	cmp	r0, #8
    c988:	d108      	bne.n	c99c <unwind_phase2+0x2c>
    c98a:	4620      	mov	r0, r4
    c98c:	6c29      	ldr	r1, [r5, #64]	; 0x40
    c98e:	f7ff ff63 	bl	c858 <get_eit_entry>
    c992:	4606      	mov	r6, r0
    c994:	2800      	cmp	r0, #0
    c996:	d0ef      	beq.n	c978 <unwind_phase2+0x8>
    c998:	f000 fe88 	bl	d6ac <abort>
    c99c:	2807      	cmp	r0, #7
    c99e:	d1fb      	bne.n	c998 <unwind_phase2+0x28>
    c9a0:	4630      	mov	r0, r6
    c9a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    c9a4:	f7ff ffe2 	bl	c96c <_Unwind_DebugHook>
    c9a8:	1d28      	adds	r0, r5, #4
    c9aa:	f000 fc0b 	bl	d1c4 <__restore_core_regs>
    c9ae:	bf00      	nop

0000c9b0 <unwind_phase2_forced>:
    c9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c9b4:	1d0c      	adds	r4, r1, #4
    c9b6:	4605      	mov	r5, r0
    c9b8:	4617      	mov	r7, r2
    c9ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c9bc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    c9c0:	ae03      	add	r6, sp, #12
    c9c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    c9c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c9c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    c9c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c9ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    c9cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c9d0:	ac02      	add	r4, sp, #8
    c9d2:	f04f 0e00 	mov.w	lr, #0
    c9d6:	f8d5 800c 	ldr.w	r8, [r5, #12]
    c9da:	f8d5 9018 	ldr.w	r9, [r5, #24]
    c9de:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    c9e2:	4628      	mov	r0, r5
    c9e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    c9e6:	f8c4 e000 	str.w	lr, [r4]
    c9ea:	f7ff ff35 	bl	c858 <get_eit_entry>
    c9ee:	2f00      	cmp	r7, #0
    c9f0:	4606      	mov	r6, r0
    c9f2:	bf14      	ite	ne
    c9f4:	270a      	movne	r7, #10
    c9f6:	2709      	moveq	r7, #9
    c9f8:	b186      	cbz	r6, ca1c <unwind_phase2_forced+0x6c>
    c9fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    c9fc:	462a      	mov	r2, r5
    c9fe:	e88d 0210 	stmia.w	sp, {r4, r9}
    ca02:	f047 0110 	orr.w	r1, r7, #16
    ca06:	6460      	str	r0, [r4, #68]	; 0x44
    ca08:	462b      	mov	r3, r5
    ca0a:	2001      	movs	r0, #1
    ca0c:	47c0      	blx	r8
    ca0e:	2800      	cmp	r0, #0
    ca10:	d12f      	bne.n	ca72 <unwind_phase2_forced+0xc2>
    ca12:	4630      	mov	r0, r6
    ca14:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    ca18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ca1e:	616b      	str	r3, [r5, #20]
    ca20:	4621      	mov	r1, r4
    ca22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    ca26:	a87a      	add	r0, sp, #488	; 0x1e8
    ca28:	f001 fbb2 	bl	e190 <memcpy>
    ca2c:	692b      	ldr	r3, [r5, #16]
    ca2e:	4629      	mov	r1, r5
    ca30:	aa7a      	add	r2, sp, #488	; 0x1e8
    ca32:	4638      	mov	r0, r7
    ca34:	4798      	blx	r3
    ca36:	9b88      	ldr	r3, [sp, #544]	; 0x220
    ca38:	4682      	mov	sl, r0
    ca3a:	e88d 0210 	stmia.w	sp, {r4, r9}
    ca3e:	4639      	mov	r1, r7
    ca40:	6463      	str	r3, [r4, #68]	; 0x44
    ca42:	2001      	movs	r0, #1
    ca44:	462a      	mov	r2, r5
    ca46:	462b      	mov	r3, r5
    ca48:	47c0      	blx	r8
    ca4a:	b990      	cbnz	r0, ca72 <unwind_phase2_forced+0xc2>
    ca4c:	4620      	mov	r0, r4
    ca4e:	a97a      	add	r1, sp, #488	; 0x1e8
    ca50:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    ca54:	f001 fb9c 	bl	e190 <memcpy>
    ca58:	f1ba 0f08 	cmp.w	sl, #8
    ca5c:	d106      	bne.n	ca6c <unwind_phase2_forced+0xbc>
    ca5e:	4628      	mov	r0, r5
    ca60:	6c21      	ldr	r1, [r4, #64]	; 0x40
    ca62:	f7ff fef9 	bl	c858 <get_eit_entry>
    ca66:	2709      	movs	r7, #9
    ca68:	4606      	mov	r6, r0
    ca6a:	e7c5      	b.n	c9f8 <unwind_phase2_forced+0x48>
    ca6c:	f1ba 0f07 	cmp.w	sl, #7
    ca70:	d004      	beq.n	ca7c <unwind_phase2_forced+0xcc>
    ca72:	2009      	movs	r0, #9
    ca74:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    ca78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca7c:	4630      	mov	r0, r6
    ca7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    ca80:	f7ff ff74 	bl	c96c <_Unwind_DebugHook>
    ca84:	a803      	add	r0, sp, #12
    ca86:	f000 fb9d 	bl	d1c4 <__restore_core_regs>
    ca8a:	bf00      	nop

0000ca8c <_Unwind_GetCFA>:
    ca8c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    ca8e:	4770      	bx	lr

0000ca90 <__gnu_Unwind_RaiseException>:
    ca90:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca92:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    ca94:	640b      	str	r3, [r1, #64]	; 0x40
    ca96:	1d0e      	adds	r6, r1, #4
    ca98:	460f      	mov	r7, r1
    ca9a:	4604      	mov	r4, r0
    ca9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ca9e:	b0f9      	sub	sp, #484	; 0x1e4
    caa0:	ad01      	add	r5, sp, #4
    caa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    caa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    caa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    caa8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    caaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    caac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    cab0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    cab4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    cab8:	9600      	str	r6, [sp, #0]
    caba:	e006      	b.n	caca <__gnu_Unwind_RaiseException+0x3a>
    cabc:	6923      	ldr	r3, [r4, #16]
    cabe:	4621      	mov	r1, r4
    cac0:	466a      	mov	r2, sp
    cac2:	4798      	blx	r3
    cac4:	2808      	cmp	r0, #8
    cac6:	4605      	mov	r5, r0
    cac8:	d108      	bne.n	cadc <__gnu_Unwind_RaiseException+0x4c>
    caca:	4620      	mov	r0, r4
    cacc:	9910      	ldr	r1, [sp, #64]	; 0x40
    cace:	f7ff fec3 	bl	c858 <get_eit_entry>
    cad2:	2800      	cmp	r0, #0
    cad4:	d0f2      	beq.n	cabc <__gnu_Unwind_RaiseException+0x2c>
    cad6:	2009      	movs	r0, #9
    cad8:	b079      	add	sp, #484	; 0x1e4
    cada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cadc:	4668      	mov	r0, sp
    cade:	f7ff ff11 	bl	c904 <restore_non_core_regs>
    cae2:	2d06      	cmp	r5, #6
    cae4:	d1f7      	bne.n	cad6 <__gnu_Unwind_RaiseException+0x46>
    cae6:	4620      	mov	r0, r4
    cae8:	4639      	mov	r1, r7
    caea:	f7ff ff41 	bl	c970 <unwind_phase2>
    caee:	bf00      	nop

0000caf0 <__gnu_Unwind_ForcedUnwind>:
    caf0:	b430      	push	{r4, r5}
    caf2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    caf4:	60c1      	str	r1, [r0, #12]
    caf6:	6182      	str	r2, [r0, #24]
    caf8:	4619      	mov	r1, r3
    cafa:	641d      	str	r5, [r3, #64]	; 0x40
    cafc:	2200      	movs	r2, #0
    cafe:	bc30      	pop	{r4, r5}
    cb00:	f7ff bf56 	b.w	c9b0 <unwind_phase2_forced>

0000cb04 <__gnu_Unwind_Resume>:
    cb04:	b570      	push	{r4, r5, r6, lr}
    cb06:	68c6      	ldr	r6, [r0, #12]
    cb08:	6943      	ldr	r3, [r0, #20]
    cb0a:	640b      	str	r3, [r1, #64]	; 0x40
    cb0c:	4604      	mov	r4, r0
    cb0e:	460d      	mov	r5, r1
    cb10:	b126      	cbz	r6, cb1c <__gnu_Unwind_Resume+0x18>
    cb12:	2201      	movs	r2, #1
    cb14:	f7ff ff4c 	bl	c9b0 <unwind_phase2_forced>
    cb18:	f000 fdc8 	bl	d6ac <abort>
    cb1c:	6903      	ldr	r3, [r0, #16]
    cb1e:	4621      	mov	r1, r4
    cb20:	2002      	movs	r0, #2
    cb22:	462a      	mov	r2, r5
    cb24:	4798      	blx	r3
    cb26:	2807      	cmp	r0, #7
    cb28:	d007      	beq.n	cb3a <__gnu_Unwind_Resume+0x36>
    cb2a:	2808      	cmp	r0, #8
    cb2c:	d103      	bne.n	cb36 <__gnu_Unwind_Resume+0x32>
    cb2e:	4620      	mov	r0, r4
    cb30:	4629      	mov	r1, r5
    cb32:	f7ff ff1d 	bl	c970 <unwind_phase2>
    cb36:	f000 fdb9 	bl	d6ac <abort>
    cb3a:	4630      	mov	r0, r6
    cb3c:	6c29      	ldr	r1, [r5, #64]	; 0x40
    cb3e:	f7ff ff15 	bl	c96c <_Unwind_DebugHook>
    cb42:	1d28      	adds	r0, r5, #4
    cb44:	f000 fb3e 	bl	d1c4 <__restore_core_regs>

0000cb48 <__gnu_Unwind_Resume_or_Rethrow>:
    cb48:	68c2      	ldr	r2, [r0, #12]
    cb4a:	b122      	cbz	r2, cb56 <__gnu_Unwind_Resume_or_Rethrow+0xe>
    cb4c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    cb4e:	640a      	str	r2, [r1, #64]	; 0x40
    cb50:	2200      	movs	r2, #0
    cb52:	f7ff bf2d 	b.w	c9b0 <unwind_phase2_forced>
    cb56:	e79b      	b.n	ca90 <__gnu_Unwind_RaiseException>

0000cb58 <_Unwind_Complete>:
    cb58:	4770      	bx	lr
    cb5a:	bf00      	nop

0000cb5c <_Unwind_DeleteException>:
    cb5c:	b508      	push	{r3, lr}
    cb5e:	6883      	ldr	r3, [r0, #8]
    cb60:	b113      	cbz	r3, cb68 <_Unwind_DeleteException+0xc>
    cb62:	4601      	mov	r1, r0
    cb64:	2001      	movs	r0, #1
    cb66:	4798      	blx	r3
    cb68:	bd08      	pop	{r3, pc}
    cb6a:	bf00      	nop

0000cb6c <_Unwind_VRS_Get>:
    cb6c:	b410      	push	{r4}
    cb6e:	2904      	cmp	r1, #4
    cb70:	d809      	bhi.n	cb86 <_Unwind_VRS_Get+0x1a>
    cb72:	e8df f001 	tbb	[pc, r1]
    cb76:	0307      	.short	0x0307
    cb78:	0308      	.short	0x0308
    cb7a:	03          	.byte	0x03
    cb7b:	00          	.byte	0x00
    cb7c:	2001      	movs	r0, #1
    cb7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    cb82:	4770      	bx	lr
    cb84:	b11b      	cbz	r3, cb8e <_Unwind_VRS_Get+0x22>
    cb86:	2002      	movs	r0, #2
    cb88:	f85d 4b04 	ldr.w	r4, [sp], #4
    cb8c:	4770      	bx	lr
    cb8e:	2a0f      	cmp	r2, #15
    cb90:	d8f9      	bhi.n	cb86 <_Unwind_VRS_Get+0x1a>
    cb92:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    cb96:	4618      	mov	r0, r3
    cb98:	6853      	ldr	r3, [r2, #4]
    cb9a:	9a01      	ldr	r2, [sp, #4]
    cb9c:	6013      	str	r3, [r2, #0]
    cb9e:	e7ee      	b.n	cb7e <_Unwind_VRS_Get+0x12>

0000cba0 <_Unwind_GetGR>:
    cba0:	b500      	push	{lr}
    cba2:	b085      	sub	sp, #20
    cba4:	460a      	mov	r2, r1
    cba6:	ab03      	add	r3, sp, #12
    cba8:	2100      	movs	r1, #0
    cbaa:	9300      	str	r3, [sp, #0]
    cbac:	460b      	mov	r3, r1
    cbae:	f7ff ffdd 	bl	cb6c <_Unwind_VRS_Get>
    cbb2:	9803      	ldr	r0, [sp, #12]
    cbb4:	b005      	add	sp, #20
    cbb6:	f85d fb04 	ldr.w	pc, [sp], #4
    cbba:	bf00      	nop

0000cbbc <_Unwind_VRS_Set>:
    cbbc:	b410      	push	{r4}
    cbbe:	2904      	cmp	r1, #4
    cbc0:	d809      	bhi.n	cbd6 <_Unwind_VRS_Set+0x1a>
    cbc2:	e8df f001 	tbb	[pc, r1]
    cbc6:	0307      	.short	0x0307
    cbc8:	0308      	.short	0x0308
    cbca:	03          	.byte	0x03
    cbcb:	00          	.byte	0x00
    cbcc:	2001      	movs	r0, #1
    cbce:	f85d 4b04 	ldr.w	r4, [sp], #4
    cbd2:	4770      	bx	lr
    cbd4:	b11b      	cbz	r3, cbde <_Unwind_VRS_Set+0x22>
    cbd6:	2002      	movs	r0, #2
    cbd8:	f85d 4b04 	ldr.w	r4, [sp], #4
    cbdc:	4770      	bx	lr
    cbde:	2a0f      	cmp	r2, #15
    cbe0:	d8f9      	bhi.n	cbd6 <_Unwind_VRS_Set+0x1a>
    cbe2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    cbe6:	9801      	ldr	r0, [sp, #4]
    cbe8:	6801      	ldr	r1, [r0, #0]
    cbea:	6051      	str	r1, [r2, #4]
    cbec:	4618      	mov	r0, r3
    cbee:	e7ee      	b.n	cbce <_Unwind_VRS_Set+0x12>

0000cbf0 <_Unwind_SetGR>:
    cbf0:	b510      	push	{r4, lr}
    cbf2:	b084      	sub	sp, #16
    cbf4:	ab04      	add	r3, sp, #16
    cbf6:	460c      	mov	r4, r1
    cbf8:	f843 2d04 	str.w	r2, [r3, #-4]!
    cbfc:	2100      	movs	r1, #0
    cbfe:	9300      	str	r3, [sp, #0]
    cc00:	4622      	mov	r2, r4
    cc02:	460b      	mov	r3, r1
    cc04:	f7ff ffda 	bl	cbbc <_Unwind_VRS_Set>
    cc08:	b004      	add	sp, #16
    cc0a:	bd10      	pop	{r4, pc}

0000cc0c <__gnu_Unwind_Backtrace>:
    cc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc0e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    cc10:	6413      	str	r3, [r2, #64]	; 0x40
    cc12:	1d15      	adds	r5, r2, #4
    cc14:	4607      	mov	r7, r0
    cc16:	460e      	mov	r6, r1
    cc18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cc1a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    cc1e:	ac17      	add	r4, sp, #92	; 0x5c
    cc20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cc22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cc24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cc26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cc28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cc2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    cc2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    cc32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cc36:	9516      	str	r5, [sp, #88]	; 0x58
    cc38:	e010      	b.n	cc5c <__gnu_Unwind_Backtrace+0x50>
    cc3a:	a816      	add	r0, sp, #88	; 0x58
    cc3c:	f7ff ffd8 	bl	cbf0 <_Unwind_SetGR>
    cc40:	4631      	mov	r1, r6
    cc42:	a816      	add	r0, sp, #88	; 0x58
    cc44:	47b8      	blx	r7
    cc46:	4669      	mov	r1, sp
    cc48:	aa16      	add	r2, sp, #88	; 0x58
    cc4a:	b978      	cbnz	r0, cc6c <__gnu_Unwind_Backtrace+0x60>
    cc4c:	9b04      	ldr	r3, [sp, #16]
    cc4e:	2008      	movs	r0, #8
    cc50:	4798      	blx	r3
    cc52:	2805      	cmp	r0, #5
    cc54:	4604      	mov	r4, r0
    cc56:	d00a      	beq.n	cc6e <__gnu_Unwind_Backtrace+0x62>
    cc58:	2809      	cmp	r0, #9
    cc5a:	d007      	beq.n	cc6c <__gnu_Unwind_Backtrace+0x60>
    cc5c:	9926      	ldr	r1, [sp, #152]	; 0x98
    cc5e:	4668      	mov	r0, sp
    cc60:	f7ff fdfa 	bl	c858 <get_eit_entry>
    cc64:	466a      	mov	r2, sp
    cc66:	210c      	movs	r1, #12
    cc68:	2800      	cmp	r0, #0
    cc6a:	d0e6      	beq.n	cc3a <__gnu_Unwind_Backtrace+0x2e>
    cc6c:	2409      	movs	r4, #9
    cc6e:	a816      	add	r0, sp, #88	; 0x58
    cc70:	f7ff fe48 	bl	c904 <restore_non_core_regs>
    cc74:	4620      	mov	r0, r4
    cc76:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    cc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cc7c <__gnu_unwind_pr_common>:
    cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc80:	460c      	mov	r4, r1
    cc82:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    cc84:	b08b      	sub	sp, #44	; 0x2c
    cc86:	461d      	mov	r5, r3
    cc88:	1d0e      	adds	r6, r1, #4
    cc8a:	680b      	ldr	r3, [r1, #0]
    cc8c:	9307      	str	r3, [sp, #28]
    cc8e:	4690      	mov	r8, r2
    cc90:	9608      	str	r6, [sp, #32]
    cc92:	f000 0903 	and.w	r9, r0, #3
    cc96:	2d00      	cmp	r5, #0
    cc98:	f040 8089 	bne.w	cdae <__gnu_unwind_pr_common+0x132>
    cc9c:	021b      	lsls	r3, r3, #8
    cc9e:	2203      	movs	r2, #3
    cca0:	9307      	str	r3, [sp, #28]
    cca2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
    cca6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    ccaa:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ccac:	f1b9 0f02 	cmp.w	r9, #2
    ccb0:	bf08      	it	eq
    ccb2:	6ba6      	ldreq	r6, [r4, #56]	; 0x38
    ccb4:	f013 0301 	ands.w	r3, r3, #1
    ccb8:	d142      	bne.n	cd40 <__gnu_unwind_pr_common+0xc4>
    ccba:	f000 0008 	and.w	r0, r0, #8
    ccbe:	b2c0      	uxtb	r0, r0
    ccc0:	9003      	str	r0, [sp, #12]
    ccc2:	9302      	str	r3, [sp, #8]
    ccc4:	6837      	ldr	r7, [r6, #0]
    ccc6:	2f00      	cmp	r7, #0
    ccc8:	d03c      	beq.n	cd44 <__gnu_unwind_pr_common+0xc8>
    ccca:	2d02      	cmp	r5, #2
    cccc:	d06b      	beq.n	cda6 <__gnu_unwind_pr_common+0x12a>
    ccce:	8837      	ldrh	r7, [r6, #0]
    ccd0:	f8b6 a002 	ldrh.w	sl, [r6, #2]
    ccd4:	3604      	adds	r6, #4
    ccd6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ccd8:	f02a 0b01 	bic.w	fp, sl, #1
    ccdc:	4640      	mov	r0, r8
    ccde:	210f      	movs	r1, #15
    cce0:	449b      	add	fp, r3
    cce2:	f7ff ff5d 	bl	cba0 <_Unwind_GetGR>
    cce6:	4583      	cmp	fp, r0
    cce8:	d836      	bhi.n	cd58 <__gnu_unwind_pr_common+0xdc>
    ccea:	f027 0301 	bic.w	r3, r7, #1
    ccee:	449b      	add	fp, r3
    ccf0:	f00a 0a01 	and.w	sl, sl, #1
    ccf4:	f007 0701 	and.w	r7, r7, #1
    ccf8:	4558      	cmp	r0, fp
    ccfa:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    ccfe:	bf2c      	ite	cs
    cd00:	2000      	movcs	r0, #0
    cd02:	2001      	movcc	r0, #1
    cd04:	2f01      	cmp	r7, #1
    cd06:	d031      	beq.n	cd6c <__gnu_unwind_pr_common+0xf0>
    cd08:	d360      	bcc.n	cdcc <__gnu_unwind_pr_common+0x150>
    cd0a:	2f02      	cmp	r7, #2
    cd0c:	d120      	bne.n	cd50 <__gnu_unwind_pr_common+0xd4>
    cd0e:	6833      	ldr	r3, [r6, #0]
    cd10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    cd14:	9101      	str	r1, [sp, #4]
    cd16:	f1b9 0f00 	cmp.w	r9, #0
    cd1a:	f040 8085 	bne.w	ce28 <__gnu_unwind_pr_common+0x1ac>
    cd1e:	b130      	cbz	r0, cd2e <__gnu_unwind_pr_common+0xb2>
    cd20:	9a03      	ldr	r2, [sp, #12]
    cd22:	2a00      	cmp	r2, #0
    cd24:	f000 808d 	beq.w	ce42 <__gnu_unwind_pr_common+0x1c6>
    cd28:	2900      	cmp	r1, #0
    cd2a:	f000 80b0 	beq.w	ce8e <__gnu_unwind_pr_common+0x212>
    cd2e:	2b00      	cmp	r3, #0
    cd30:	f2c0 8085 	blt.w	ce3e <__gnu_unwind_pr_common+0x1c2>
    cd34:	9b01      	ldr	r3, [sp, #4]
    cd36:	f103 0a01 	add.w	sl, r3, #1
    cd3a:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    cd3e:	e7c1      	b.n	ccc4 <__gnu_unwind_pr_common+0x48>
    cd40:	2100      	movs	r1, #0
    cd42:	9102      	str	r1, [sp, #8]
    cd44:	2d02      	cmp	r5, #2
    cd46:	dd49      	ble.n	cddc <__gnu_unwind_pr_common+0x160>
    cd48:	f7ff fe0e 	bl	c968 <__gnu_unwind_24bit.isra.1>
    cd4c:	2800      	cmp	r0, #0
    cd4e:	d04b      	beq.n	cde8 <__gnu_unwind_pr_common+0x16c>
    cd50:	2009      	movs	r0, #9
    cd52:	b00b      	add	sp, #44	; 0x2c
    cd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd58:	f00a 0a01 	and.w	sl, sl, #1
    cd5c:	f007 0701 	and.w	r7, r7, #1
    cd60:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    cd64:	2f01      	cmp	r7, #1
    cd66:	f04f 0000 	mov.w	r0, #0
    cd6a:	d1cd      	bne.n	cd08 <__gnu_unwind_pr_common+0x8c>
    cd6c:	f1b9 0f00 	cmp.w	r9, #0
    cd70:	d141      	bne.n	cdf6 <__gnu_unwind_pr_common+0x17a>
    cd72:	b1b0      	cbz	r0, cda2 <__gnu_unwind_pr_common+0x126>
    cd74:	e896 000c 	ldmia.w	r6, {r2, r3}
    cd78:	0fd7      	lsrs	r7, r2, #31
    cd7a:	1c9a      	adds	r2, r3, #2
    cd7c:	d0e8      	beq.n	cd50 <__gnu_unwind_pr_common+0xd4>
    cd7e:	f104 0158 	add.w	r1, r4, #88	; 0x58
    cd82:	3301      	adds	r3, #1
    cd84:	9106      	str	r1, [sp, #24]
    cd86:	f000 80ad 	beq.w	cee4 <__gnu_unwind_pr_common+0x268>
    cd8a:	1d30      	adds	r0, r6, #4
    cd8c:	f7ff fde6 	bl	c95c <_Unwind_decode_typeinfo_ptr.isra.0>
    cd90:	463a      	mov	r2, r7
    cd92:	4601      	mov	r1, r0
    cd94:	ab06      	add	r3, sp, #24
    cd96:	4620      	mov	r0, r4
    cd98:	f7f7 fb62 	bl	4460 <__cxa_type_match>
    cd9c:	2800      	cmp	r0, #0
    cd9e:	f040 80cf 	bne.w	cf40 <__gnu_unwind_pr_common+0x2c4>
    cda2:	3608      	adds	r6, #8
    cda4:	e78e      	b.n	ccc4 <__gnu_unwind_pr_common+0x48>
    cda6:	f8d6 a004 	ldr.w	sl, [r6, #4]
    cdaa:	3608      	adds	r6, #8
    cdac:	e793      	b.n	ccd6 <__gnu_unwind_pr_common+0x5a>
    cdae:	2d02      	cmp	r5, #2
    cdb0:	f73f af7b 	bgt.w	ccaa <__gnu_unwind_pr_common+0x2e>
    cdb4:	0c1a      	lsrs	r2, r3, #16
    cdb6:	b2d7      	uxtb	r7, r2
    cdb8:	041b      	lsls	r3, r3, #16
    cdba:	2102      	movs	r1, #2
    cdbc:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    cdc0:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    cdc4:	9307      	str	r3, [sp, #28]
    cdc6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    cdca:	e76e      	b.n	ccaa <__gnu_unwind_pr_common+0x2e>
    cdcc:	f1b9 0f00 	cmp.w	r9, #0
    cdd0:	d002      	beq.n	cdd8 <__gnu_unwind_pr_common+0x15c>
    cdd2:	2800      	cmp	r0, #0
    cdd4:	f040 8090 	bne.w	cef8 <__gnu_unwind_pr_common+0x27c>
    cdd8:	3604      	adds	r6, #4
    cdda:	e773      	b.n	ccc4 <__gnu_unwind_pr_common+0x48>
    cddc:	4640      	mov	r0, r8
    cdde:	a907      	add	r1, sp, #28
    cde0:	f000 faf0 	bl	d3c4 <__gnu_unwind_execute>
    cde4:	2800      	cmp	r0, #0
    cde6:	d1b3      	bne.n	cd50 <__gnu_unwind_pr_common+0xd4>
    cde8:	9a02      	ldr	r2, [sp, #8]
    cdea:	2a00      	cmp	r2, #0
    cdec:	d159      	bne.n	cea2 <__gnu_unwind_pr_common+0x226>
    cdee:	2008      	movs	r0, #8
    cdf0:	b00b      	add	sp, #44	; 0x2c
    cdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdf6:	4640      	mov	r0, r8
    cdf8:	210d      	movs	r1, #13
    cdfa:	6a27      	ldr	r7, [r4, #32]
    cdfc:	f7ff fed0 	bl	cba0 <_Unwind_GetGR>
    ce00:	4287      	cmp	r7, r0
    ce02:	d1ce      	bne.n	cda2 <__gnu_unwind_pr_common+0x126>
    ce04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ce06:	429e      	cmp	r6, r3
    ce08:	d1cb      	bne.n	cda2 <__gnu_unwind_pr_common+0x126>
    ce0a:	4630      	mov	r0, r6
    ce0c:	f7ff fccc 	bl	c7a8 <selfrel_offset31>
    ce10:	210f      	movs	r1, #15
    ce12:	4602      	mov	r2, r0
    ce14:	4640      	mov	r0, r8
    ce16:	f7ff feeb 	bl	cbf0 <_Unwind_SetGR>
    ce1a:	4640      	mov	r0, r8
    ce1c:	4622      	mov	r2, r4
    ce1e:	2100      	movs	r1, #0
    ce20:	f7ff fee6 	bl	cbf0 <_Unwind_SetGR>
    ce24:	2007      	movs	r0, #7
    ce26:	e794      	b.n	cd52 <__gnu_unwind_pr_common+0xd6>
    ce28:	4640      	mov	r0, r8
    ce2a:	210d      	movs	r1, #13
    ce2c:	6a27      	ldr	r7, [r4, #32]
    ce2e:	f7ff feb7 	bl	cba0 <_Unwind_GetGR>
    ce32:	4287      	cmp	r7, r0
    ce34:	d045      	beq.n	cec2 <__gnu_unwind_pr_common+0x246>
    ce36:	6833      	ldr	r3, [r6, #0]
    ce38:	2b00      	cmp	r3, #0
    ce3a:	f6bf af7b 	bge.w	cd34 <__gnu_unwind_pr_common+0xb8>
    ce3e:	3604      	adds	r6, #4
    ce40:	e778      	b.n	cd34 <__gnu_unwind_pr_common+0xb8>
    ce42:	9901      	ldr	r1, [sp, #4]
    ce44:	b319      	cbz	r1, ce8e <__gnu_unwind_pr_common+0x212>
    ce46:	f104 0c58 	add.w	ip, r4, #88	; 0x58
    ce4a:	f8cd 9010 	str.w	r9, [sp, #16]
    ce4e:	9505      	str	r5, [sp, #20]
    ce50:	1d37      	adds	r7, r6, #4
    ce52:	f8dd b00c 	ldr.w	fp, [sp, #12]
    ce56:	f8dd 9004 	ldr.w	r9, [sp, #4]
    ce5a:	4665      	mov	r5, ip
    ce5c:	e002      	b.n	ce64 <__gnu_unwind_pr_common+0x1e8>
    ce5e:	45ca      	cmp	sl, r9
    ce60:	d015      	beq.n	ce8e <__gnu_unwind_pr_common+0x212>
    ce62:	46d3      	mov	fp, sl
    ce64:	4638      	mov	r0, r7
    ce66:	9506      	str	r5, [sp, #24]
    ce68:	f7ff fd78 	bl	c95c <_Unwind_decode_typeinfo_ptr.isra.0>
    ce6c:	2200      	movs	r2, #0
    ce6e:	4601      	mov	r1, r0
    ce70:	ab06      	add	r3, sp, #24
    ce72:	4620      	mov	r0, r4
    ce74:	f7f7 faf4 	bl	4460 <__cxa_type_match>
    ce78:	f10b 0a01 	add.w	sl, fp, #1
    ce7c:	3704      	adds	r7, #4
    ce7e:	2800      	cmp	r0, #0
    ce80:	d0ed      	beq.n	ce5e <__gnu_unwind_pr_common+0x1e2>
    ce82:	9b01      	ldr	r3, [sp, #4]
    ce84:	f8dd 9010 	ldr.w	r9, [sp, #16]
    ce88:	9d05      	ldr	r5, [sp, #20]
    ce8a:	455b      	cmp	r3, fp
    ce8c:	d1d3      	bne.n	ce36 <__gnu_unwind_pr_common+0x1ba>
    ce8e:	4640      	mov	r0, r8
    ce90:	210d      	movs	r1, #13
    ce92:	f7ff fe85 	bl	cba0 <_Unwind_GetGR>
    ce96:	9b06      	ldr	r3, [sp, #24]
    ce98:	6220      	str	r0, [r4, #32]
    ce9a:	62a6      	str	r6, [r4, #40]	; 0x28
    ce9c:	6263      	str	r3, [r4, #36]	; 0x24
    ce9e:	2006      	movs	r0, #6
    cea0:	e757      	b.n	cd52 <__gnu_unwind_pr_common+0xd6>
    cea2:	210f      	movs	r1, #15
    cea4:	4640      	mov	r0, r8
    cea6:	f7ff fe7b 	bl	cba0 <_Unwind_GetGR>
    ceaa:	210e      	movs	r1, #14
    ceac:	4602      	mov	r2, r0
    ceae:	4640      	mov	r0, r8
    ceb0:	f7ff fe9e 	bl	cbf0 <_Unwind_SetGR>
    ceb4:	4640      	mov	r0, r8
    ceb6:	210f      	movs	r1, #15
    ceb8:	4a28      	ldr	r2, [pc, #160]	; (cf5c <__gnu_unwind_pr_common+0x2e0>)
    ceba:	f7ff fe99 	bl	cbf0 <_Unwind_SetGR>
    cebe:	2007      	movs	r0, #7
    cec0:	e747      	b.n	cd52 <__gnu_unwind_pr_common+0xd6>
    cec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cec4:	429e      	cmp	r6, r3
    cec6:	d1b6      	bne.n	ce36 <__gnu_unwind_pr_common+0x1ba>
    cec8:	2204      	movs	r2, #4
    ceca:	2700      	movs	r7, #0
    cecc:	18b3      	adds	r3, r6, r2
    cece:	9901      	ldr	r1, [sp, #4]
    ced0:	62a1      	str	r1, [r4, #40]	; 0x28
    ced2:	62e7      	str	r7, [r4, #44]	; 0x2c
    ced4:	6322      	str	r2, [r4, #48]	; 0x30
    ced6:	6363      	str	r3, [r4, #52]	; 0x34
    ced8:	6833      	ldr	r3, [r6, #0]
    ceda:	42bb      	cmp	r3, r7
    cedc:	db1f      	blt.n	cf1e <__gnu_unwind_pr_common+0x2a2>
    cede:	2201      	movs	r2, #1
    cee0:	9202      	str	r2, [sp, #8]
    cee2:	e727      	b.n	cd34 <__gnu_unwind_pr_common+0xb8>
    cee4:	4640      	mov	r0, r8
    cee6:	210d      	movs	r1, #13
    cee8:	f7ff fe5a 	bl	cba0 <_Unwind_GetGR>
    ceec:	6220      	str	r0, [r4, #32]
    ceee:	9b06      	ldr	r3, [sp, #24]
    cef0:	6263      	str	r3, [r4, #36]	; 0x24
    cef2:	62a6      	str	r6, [r4, #40]	; 0x28
    cef4:	2006      	movs	r0, #6
    cef6:	e72c      	b.n	cd52 <__gnu_unwind_pr_common+0xd6>
    cef8:	4630      	mov	r0, r6
    cefa:	f7ff fc55 	bl	c7a8 <selfrel_offset31>
    cefe:	3604      	adds	r6, #4
    cf00:	4605      	mov	r5, r0
    cf02:	63a6      	str	r6, [r4, #56]	; 0x38
    cf04:	4620      	mov	r0, r4
    cf06:	f7f7 fb01 	bl	450c <__cxa_begin_cleanup>
    cf0a:	2800      	cmp	r0, #0
    cf0c:	f43f af20 	beq.w	cd50 <__gnu_unwind_pr_common+0xd4>
    cf10:	4640      	mov	r0, r8
    cf12:	462a      	mov	r2, r5
    cf14:	210f      	movs	r1, #15
    cf16:	f7ff fe6b 	bl	cbf0 <_Unwind_SetGR>
    cf1a:	2007      	movs	r0, #7
    cf1c:	e719      	b.n	cd52 <__gnu_unwind_pr_common+0xd6>
    cf1e:	1c48      	adds	r0, r1, #1
    cf20:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    cf24:	f7ff fc40 	bl	c7a8 <selfrel_offset31>
    cf28:	210f      	movs	r1, #15
    cf2a:	4602      	mov	r2, r0
    cf2c:	4640      	mov	r0, r8
    cf2e:	f7ff fe5f 	bl	cbf0 <_Unwind_SetGR>
    cf32:	4640      	mov	r0, r8
    cf34:	4639      	mov	r1, r7
    cf36:	4622      	mov	r2, r4
    cf38:	f7ff fe5a 	bl	cbf0 <_Unwind_SetGR>
    cf3c:	2007      	movs	r0, #7
    cf3e:	e708      	b.n	cd52 <__gnu_unwind_pr_common+0xd6>
    cf40:	4607      	mov	r7, r0
    cf42:	210d      	movs	r1, #13
    cf44:	4640      	mov	r0, r8
    cf46:	f7ff fe2b 	bl	cba0 <_Unwind_GetGR>
    cf4a:	2f02      	cmp	r7, #2
    cf4c:	6220      	str	r0, [r4, #32]
    cf4e:	d1ce      	bne.n	ceee <__gnu_unwind_pr_common+0x272>
    cf50:	4623      	mov	r3, r4
    cf52:	9a06      	ldr	r2, [sp, #24]
    cf54:	f843 2f2c 	str.w	r2, [r3, #44]!
    cf58:	6263      	str	r3, [r4, #36]	; 0x24
    cf5a:	e7ca      	b.n	cef2 <__gnu_unwind_pr_common+0x276>
    cf5c:	0000463d 	.word	0x0000463d

0000cf60 <__aeabi_unwind_cpp_pr0>:
    cf60:	2300      	movs	r3, #0
    cf62:	f7ff be8b 	b.w	cc7c <__gnu_unwind_pr_common>
    cf66:	bf00      	nop

0000cf68 <__aeabi_unwind_cpp_pr1>:
    cf68:	2301      	movs	r3, #1
    cf6a:	f7ff be87 	b.w	cc7c <__gnu_unwind_pr_common>
    cf6e:	bf00      	nop

0000cf70 <__aeabi_unwind_cpp_pr2>:
    cf70:	2302      	movs	r3, #2
    cf72:	f7ff be83 	b.w	cc7c <__gnu_unwind_pr_common>
    cf76:	bf00      	nop

0000cf78 <_Unwind_VRS_Pop>:
    cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf7c:	4604      	mov	r4, r0
    cf7e:	b0c4      	sub	sp, #272	; 0x110
    cf80:	2904      	cmp	r1, #4
    cf82:	d80b      	bhi.n	cf9c <_Unwind_VRS_Pop+0x24>
    cf84:	e8df f001 	tbb	[pc, r1]
    cf88:	300a0359 	.word	0x300a0359
    cf8c:	0e          	.byte	0x0e
    cf8d:	00          	.byte	0x00
    cf8e:	2b01      	cmp	r3, #1
    cf90:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cf94:	b296      	uxth	r6, r2
    cf96:	d066      	beq.n	d066 <_Unwind_VRS_Pop+0xee>
    cf98:	2b05      	cmp	r3, #5
    cf9a:	d06b      	beq.n	d074 <_Unwind_VRS_Pop+0xfc>
    cf9c:	2002      	movs	r0, #2
    cf9e:	b044      	add	sp, #272	; 0x110
    cfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d1f9      	bne.n	cf9c <_Unwind_VRS_Pop+0x24>
    cfa8:	2a10      	cmp	r2, #16
    cfaa:	d8f7      	bhi.n	cf9c <_Unwind_VRS_Pop+0x24>
    cfac:	6823      	ldr	r3, [r4, #0]
    cfae:	06d9      	lsls	r1, r3, #27
    cfb0:	f100 80d3 	bmi.w	d15a <_Unwind_VRS_Pop+0x1e2>
    cfb4:	ae22      	add	r6, sp, #136	; 0x88
    cfb6:	4630      	mov	r0, r6
    cfb8:	9201      	str	r2, [sp, #4]
    cfba:	f000 f975 	bl	d2a8 <__gnu_Unwind_Save_WMMXC>
    cfbe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    cfc0:	9a01      	ldr	r2, [sp, #4]
    cfc2:	2300      	movs	r3, #0
    cfc4:	2001      	movs	r0, #1
    cfc6:	fa00 f103 	lsl.w	r1, r0, r3
    cfca:	4211      	tst	r1, r2
    cfcc:	d003      	beq.n	cfd6 <_Unwind_VRS_Pop+0x5e>
    cfce:	6829      	ldr	r1, [r5, #0]
    cfd0:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
    cfd4:	3504      	adds	r5, #4
    cfd6:	3301      	adds	r3, #1
    cfd8:	2b04      	cmp	r3, #4
    cfda:	d1f4      	bne.n	cfc6 <_Unwind_VRS_Pop+0x4e>
    cfdc:	4630      	mov	r0, r6
    cfde:	63a5      	str	r5, [r4, #56]	; 0x38
    cfe0:	f000 f958 	bl	d294 <__gnu_Unwind_Restore_WMMXC>
    cfe4:	2000      	movs	r0, #0
    cfe6:	e7da      	b.n	cf9e <_Unwind_VRS_Pop+0x26>
    cfe8:	2b03      	cmp	r3, #3
    cfea:	d1d7      	bne.n	cf9c <_Unwind_VRS_Pop+0x24>
    cfec:	0c15      	lsrs	r5, r2, #16
    cfee:	b297      	uxth	r7, r2
    cff0:	197b      	adds	r3, r7, r5
    cff2:	2b10      	cmp	r3, #16
    cff4:	d8d2      	bhi.n	cf9c <_Unwind_VRS_Pop+0x24>
    cff6:	6823      	ldr	r3, [r4, #0]
    cff8:	071e      	lsls	r6, r3, #28
    cffa:	f100 80bf 	bmi.w	d17c <_Unwind_VRS_Pop+0x204>
    cffe:	ae22      	add	r6, sp, #136	; 0x88
    d000:	4630      	mov	r0, r6
    d002:	f000 f925 	bl	d250 <__gnu_Unwind_Save_WMMXD>
    d006:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
    d00a:	007f      	lsls	r7, r7, #1
    d00c:	eb06 00c5 	add.w	r0, r6, r5, lsl #3
    d010:	1e7b      	subs	r3, r7, #1
    d012:	4672      	mov	r2, lr
    d014:	b15f      	cbz	r7, d02e <_Unwind_VRS_Pop+0xb6>
    d016:	ebce 0000 	rsb	r0, lr, r0
    d01a:	f1ae 0204 	sub.w	r2, lr, #4
    d01e:	3b01      	subs	r3, #1
    d020:	f852 1f04 	ldr.w	r1, [r2, #4]!
    d024:	5081      	str	r1, [r0, r2]
    d026:	1c5d      	adds	r5, r3, #1
    d028:	d1f9      	bne.n	d01e <_Unwind_VRS_Pop+0xa6>
    d02a:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
    d02e:	4630      	mov	r0, r6
    d030:	63a2      	str	r2, [r4, #56]	; 0x38
    d032:	f000 f8eb 	bl	d20c <__gnu_Unwind_Restore_WMMXD>
    d036:	2000      	movs	r0, #0
    d038:	e7b1      	b.n	cf9e <_Unwind_VRS_Pop+0x26>
    d03a:	2b00      	cmp	r3, #0
    d03c:	d1ae      	bne.n	cf9c <_Unwind_VRS_Pop+0x24>
    d03e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    d040:	b296      	uxth	r6, r2
    d042:	2001      	movs	r0, #1
    d044:	fa00 f103 	lsl.w	r1, r0, r3
    d048:	4231      	tst	r1, r6
    d04a:	d004      	beq.n	d056 <_Unwind_VRS_Pop+0xde>
    d04c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    d050:	6829      	ldr	r1, [r5, #0]
    d052:	6079      	str	r1, [r7, #4]
    d054:	3504      	adds	r5, #4
    d056:	3301      	adds	r3, #1
    d058:	2b10      	cmp	r3, #16
    d05a:	d1f3      	bne.n	d044 <_Unwind_VRS_Pop+0xcc>
    d05c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    d060:	d175      	bne.n	d14e <_Unwind_VRS_Pop+0x1d6>
    d062:	63a5      	str	r5, [r4, #56]	; 0x38
    d064:	e79b      	b.n	cf9e <_Unwind_VRS_Pop+0x26>
    d066:	1972      	adds	r2, r6, r5
    d068:	2a10      	cmp	r2, #16
    d06a:	d897      	bhi.n	cf9c <_Unwind_VRS_Pop+0x24>
    d06c:	2d0f      	cmp	r5, #15
    d06e:	d895      	bhi.n	cf9c <_Unwind_VRS_Pop+0x24>
    d070:	2700      	movs	r7, #0
    d072:	e008      	b.n	d086 <_Unwind_VRS_Pop+0x10e>
    d074:	1977      	adds	r7, r6, r5
    d076:	2f20      	cmp	r7, #32
    d078:	d890      	bhi.n	cf9c <_Unwind_VRS_Pop+0x24>
    d07a:	2d0f      	cmp	r5, #15
    d07c:	d969      	bls.n	d152 <_Unwind_VRS_Pop+0x1da>
    d07e:	4637      	mov	r7, r6
    d080:	b346      	cbz	r6, d0d4 <_Unwind_VRS_Pop+0x15c>
    d082:	2d0f      	cmp	r5, #15
    d084:	d811      	bhi.n	d0aa <_Unwind_VRS_Pop+0x132>
    d086:	6822      	ldr	r2, [r4, #0]
    d088:	07d0      	lsls	r0, r2, #31
    d08a:	d50e      	bpl.n	d0aa <_Unwind_VRS_Pop+0x132>
    d08c:	f022 0101 	bic.w	r1, r2, #1
    d090:	2b05      	cmp	r3, #5
    d092:	6021      	str	r1, [r4, #0]
    d094:	4620      	mov	r0, r4
    d096:	f000 808b 	beq.w	d1b0 <_Unwind_VRS_Pop+0x238>
    d09a:	f022 0203 	bic.w	r2, r2, #3
    d09e:	f840 2b48 	str.w	r2, [r0], #72
    d0a2:	9301      	str	r3, [sp, #4]
    d0a4:	f000 f89e 	bl	d1e4 <__gnu_Unwind_Save_VFP>
    d0a8:	9b01      	ldr	r3, [sp, #4]
    d0aa:	b117      	cbz	r7, d0b2 <_Unwind_VRS_Pop+0x13a>
    d0ac:	6822      	ldr	r2, [r4, #0]
    d0ae:	0751      	lsls	r1, r2, #29
    d0b0:	d46c      	bmi.n	d18c <_Unwind_VRS_Pop+0x214>
    d0b2:	2b01      	cmp	r3, #1
    d0b4:	d074      	beq.n	d1a0 <_Unwind_VRS_Pop+0x228>
    d0b6:	2d0f      	cmp	r5, #15
    d0b8:	d804      	bhi.n	d0c4 <_Unwind_VRS_Pop+0x14c>
    d0ba:	a822      	add	r0, sp, #136	; 0x88
    d0bc:	9301      	str	r3, [sp, #4]
    d0be:	f000 f899 	bl	d1f4 <__gnu_Unwind_Save_VFP_D>
    d0c2:	9b01      	ldr	r3, [sp, #4]
    d0c4:	b137      	cbz	r7, d0d4 <_Unwind_VRS_Pop+0x15c>
    d0c6:	a802      	add	r0, sp, #8
    d0c8:	9301      	str	r3, [sp, #4]
    d0ca:	f000 f89b 	bl	d204 <__gnu_Unwind_Save_VFP_D_16_to_31>
    d0ce:	9b01      	ldr	r3, [sp, #4]
    d0d0:	f1c5 0610 	rsb	r6, r5, #16
    d0d4:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
    d0d8:	2e00      	cmp	r6, #0
    d0da:	46c4      	mov	ip, r8
    d0dc:	dd12      	ble.n	d104 <_Unwind_VRS_Pop+0x18c>
    d0de:	aa22      	add	r2, sp, #136	; 0x88
    d0e0:	ea4f 0c46 	mov.w	ip, r6, lsl #1
    d0e4:	eb02 06c5 	add.w	r6, r2, r5, lsl #3
    d0e8:	ebc8 0606 	rsb	r6, r8, r6
    d0ec:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    d0f0:	f1a8 0204 	sub.w	r2, r8, #4
    d0f4:	f852 0f04 	ldr.w	r0, [r2, #4]!
    d0f8:	50b0      	str	r0, [r6, r2]
    d0fa:	3901      	subs	r1, #1
    d0fc:	1c48      	adds	r0, r1, #1
    d0fe:	d1f9      	bne.n	d0f4 <_Unwind_VRS_Pop+0x17c>
    d100:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
    d104:	b1b7      	cbz	r7, d134 <_Unwind_VRS_Pop+0x1bc>
    d106:	aa44      	add	r2, sp, #272	; 0x110
    d108:	2d10      	cmp	r5, #16
    d10a:	bf2c      	ite	cs
    d10c:	4628      	movcs	r0, r5
    d10e:	2010      	movcc	r0, #16
    d110:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    d114:	ea4f 0847 	mov.w	r8, r7, lsl #1
    d118:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
    d11c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    d120:	4661      	mov	r1, ip
    d122:	f851 6b04 	ldr.w	r6, [r1], #4
    d126:	f840 6b04 	str.w	r6, [r0], #4
    d12a:	3a01      	subs	r2, #1
    d12c:	1c56      	adds	r6, r2, #1
    d12e:	d1f8      	bne.n	d122 <_Unwind_VRS_Pop+0x1aa>
    d130:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
    d134:	2b01      	cmp	r3, #1
    d136:	d01a      	beq.n	d16e <_Unwind_VRS_Pop+0x1f6>
    d138:	2d0f      	cmp	r5, #15
    d13a:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
    d13e:	d802      	bhi.n	d146 <_Unwind_VRS_Pop+0x1ce>
    d140:	a822      	add	r0, sp, #136	; 0x88
    d142:	f000 f853 	bl	d1ec <__gnu_Unwind_Restore_VFP_D>
    d146:	b117      	cbz	r7, d14e <_Unwind_VRS_Pop+0x1d6>
    d148:	a802      	add	r0, sp, #8
    d14a:	f000 f857 	bl	d1fc <__gnu_Unwind_Restore_VFP_D_16_to_31>
    d14e:	2000      	movs	r0, #0
    d150:	e725      	b.n	cf9e <_Unwind_VRS_Pop+0x26>
    d152:	2f10      	cmp	r7, #16
    d154:	d98c      	bls.n	d070 <_Unwind_VRS_Pop+0xf8>
    d156:	3f10      	subs	r7, #16
    d158:	e793      	b.n	d082 <_Unwind_VRS_Pop+0x10a>
    d15a:	f023 0310 	bic.w	r3, r3, #16
    d15e:	6023      	str	r3, [r4, #0]
    d160:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    d164:	9201      	str	r2, [sp, #4]
    d166:	f000 f89f 	bl	d2a8 <__gnu_Unwind_Save_WMMXC>
    d16a:	9a01      	ldr	r2, [sp, #4]
    d16c:	e722      	b.n	cfb4 <_Unwind_VRS_Pop+0x3c>
    d16e:	f10c 0304 	add.w	r3, ip, #4
    d172:	63a3      	str	r3, [r4, #56]	; 0x38
    d174:	a822      	add	r0, sp, #136	; 0x88
    d176:	f000 f831 	bl	d1dc <__gnu_Unwind_Restore_VFP>
    d17a:	e7e8      	b.n	d14e <_Unwind_VRS_Pop+0x1d6>
    d17c:	f023 0308 	bic.w	r3, r3, #8
    d180:	6023      	str	r3, [r4, #0]
    d182:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    d186:	f000 f863 	bl	d250 <__gnu_Unwind_Save_WMMXD>
    d18a:	e738      	b.n	cffe <_Unwind_VRS_Pop+0x86>
    d18c:	4620      	mov	r0, r4
    d18e:	f022 0204 	bic.w	r2, r2, #4
    d192:	f840 2bd0 	str.w	r2, [r0], #208
    d196:	9301      	str	r3, [sp, #4]
    d198:	f000 f834 	bl	d204 <__gnu_Unwind_Save_VFP_D_16_to_31>
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	e788      	b.n	d0b2 <_Unwind_VRS_Pop+0x13a>
    d1a0:	a822      	add	r0, sp, #136	; 0x88
    d1a2:	9301      	str	r3, [sp, #4]
    d1a4:	f000 f81e 	bl	d1e4 <__gnu_Unwind_Save_VFP>
    d1a8:	9b01      	ldr	r3, [sp, #4]
    d1aa:	2f00      	cmp	r7, #0
    d1ac:	d190      	bne.n	d0d0 <_Unwind_VRS_Pop+0x158>
    d1ae:	e791      	b.n	d0d4 <_Unwind_VRS_Pop+0x15c>
    d1b0:	f041 0102 	orr.w	r1, r1, #2
    d1b4:	f840 1b48 	str.w	r1, [r0], #72
    d1b8:	9301      	str	r3, [sp, #4]
    d1ba:	f000 f81b 	bl	d1f4 <__gnu_Unwind_Save_VFP_D>
    d1be:	9b01      	ldr	r3, [sp, #4]
    d1c0:	e773      	b.n	d0aa <_Unwind_VRS_Pop+0x132>
    d1c2:	bf00      	nop

0000d1c4 <__restore_core_regs>:
    d1c4:	f100 0134 	add.w	r1, r0, #52	; 0x34
    d1c8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    d1cc:	469c      	mov	ip, r3
    d1ce:	46a6      	mov	lr, r4
    d1d0:	f84c 5d04 	str.w	r5, [ip, #-4]!
    d1d4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    d1d8:	46e5      	mov	sp, ip
    d1da:	bd00      	pop	{pc}

0000d1dc <__gnu_Unwind_Restore_VFP>:
    d1dc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    d1e0:	4770      	bx	lr
    d1e2:	bf00      	nop

0000d1e4 <__gnu_Unwind_Save_VFP>:
    d1e4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    d1e8:	4770      	bx	lr
    d1ea:	bf00      	nop

0000d1ec <__gnu_Unwind_Restore_VFP_D>:
    d1ec:	ec90 0b20 	vldmia	r0, {d0-d15}
    d1f0:	4770      	bx	lr
    d1f2:	bf00      	nop

0000d1f4 <__gnu_Unwind_Save_VFP_D>:
    d1f4:	ec80 0b20 	vstmia	r0, {d0-d15}
    d1f8:	4770      	bx	lr
    d1fa:	bf00      	nop

0000d1fc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    d1fc:	ecd0 0b20 	vldmia	r0, {d16-d31}
    d200:	4770      	bx	lr
    d202:	bf00      	nop

0000d204 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    d204:	ecc0 0b20 	vstmia	r0, {d16-d31}
    d208:	4770      	bx	lr
    d20a:	bf00      	nop

0000d20c <__gnu_Unwind_Restore_WMMXD>:
    d20c:	ecf0 0102 	ldfe	f0, [r0], #8
    d210:	ecf0 1102 	ldfe	f1, [r0], #8
    d214:	ecf0 2102 	ldfe	f2, [r0], #8
    d218:	ecf0 3102 	ldfe	f3, [r0], #8
    d21c:	ecf0 4102 	ldfe	f4, [r0], #8
    d220:	ecf0 5102 	ldfe	f5, [r0], #8
    d224:	ecf0 6102 	ldfe	f6, [r0], #8
    d228:	ecf0 7102 	ldfe	f7, [r0], #8
    d22c:	ecf0 8102 	ldfp	f0, [r0], #8
    d230:	ecf0 9102 	ldfp	f1, [r0], #8
    d234:	ecf0 a102 	ldfp	f2, [r0], #8
    d238:	ecf0 b102 	ldfp	f3, [r0], #8
    d23c:	ecf0 c102 	ldfp	f4, [r0], #8
    d240:	ecf0 d102 	ldfp	f5, [r0], #8
    d244:	ecf0 e102 	ldfp	f6, [r0], #8
    d248:	ecf0 f102 	ldfp	f7, [r0], #8
    d24c:	4770      	bx	lr
    d24e:	bf00      	nop

0000d250 <__gnu_Unwind_Save_WMMXD>:
    d250:	ece0 0102 	stfe	f0, [r0], #8
    d254:	ece0 1102 	stfe	f1, [r0], #8
    d258:	ece0 2102 	stfe	f2, [r0], #8
    d25c:	ece0 3102 	stfe	f3, [r0], #8
    d260:	ece0 4102 	stfe	f4, [r0], #8
    d264:	ece0 5102 	stfe	f5, [r0], #8
    d268:	ece0 6102 	stfe	f6, [r0], #8
    d26c:	ece0 7102 	stfe	f7, [r0], #8
    d270:	ece0 8102 	stfp	f0, [r0], #8
    d274:	ece0 9102 	stfp	f1, [r0], #8
    d278:	ece0 a102 	stfp	f2, [r0], #8
    d27c:	ece0 b102 	stfp	f3, [r0], #8
    d280:	ece0 c102 	stfp	f4, [r0], #8
    d284:	ece0 d102 	stfp	f5, [r0], #8
    d288:	ece0 e102 	stfp	f6, [r0], #8
    d28c:	ece0 f102 	stfp	f7, [r0], #8
    d290:	4770      	bx	lr
    d292:	bf00      	nop

0000d294 <__gnu_Unwind_Restore_WMMXC>:
    d294:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    d298:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    d29c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    d2a0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    d2a4:	4770      	bx	lr
    d2a6:	bf00      	nop

0000d2a8 <__gnu_Unwind_Save_WMMXC>:
    d2a8:	fca0 8101 	stc2	1, cr8, [r0], #4
    d2ac:	fca0 9101 	stc2	1, cr9, [r0], #4
    d2b0:	fca0 a101 	stc2	1, cr10, [r0], #4
    d2b4:	fca0 b101 	stc2	1, cr11, [r0], #4
    d2b8:	4770      	bx	lr
    d2ba:	bf00      	nop

0000d2bc <_Unwind_RaiseException>:
    d2bc:	46ec      	mov	ip, sp
    d2be:	b500      	push	{lr}
    d2c0:	e92d 5000 	stmdb	sp!, {ip, lr}
    d2c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d2c8:	f04f 0300 	mov.w	r3, #0
    d2cc:	e92d 000c 	stmdb	sp!, {r2, r3}
    d2d0:	a901      	add	r1, sp, #4
    d2d2:	f7ff fbdd 	bl	ca90 <__gnu_Unwind_RaiseException>
    d2d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d2da:	b012      	add	sp, #72	; 0x48
    d2dc:	4770      	bx	lr
    d2de:	bf00      	nop

0000d2e0 <_Unwind_Resume>:
    d2e0:	46ec      	mov	ip, sp
    d2e2:	b500      	push	{lr}
    d2e4:	e92d 5000 	stmdb	sp!, {ip, lr}
    d2e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d2ec:	f04f 0300 	mov.w	r3, #0
    d2f0:	e92d 000c 	stmdb	sp!, {r2, r3}
    d2f4:	a901      	add	r1, sp, #4
    d2f6:	f7ff fc05 	bl	cb04 <__gnu_Unwind_Resume>
    d2fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d2fe:	b012      	add	sp, #72	; 0x48
    d300:	4770      	bx	lr
    d302:	bf00      	nop

0000d304 <_Unwind_Resume_or_Rethrow>:
    d304:	46ec      	mov	ip, sp
    d306:	b500      	push	{lr}
    d308:	e92d 5000 	stmdb	sp!, {ip, lr}
    d30c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d310:	f04f 0300 	mov.w	r3, #0
    d314:	e92d 000c 	stmdb	sp!, {r2, r3}
    d318:	a901      	add	r1, sp, #4
    d31a:	f7ff fc15 	bl	cb48 <__gnu_Unwind_Resume_or_Rethrow>
    d31e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d322:	b012      	add	sp, #72	; 0x48
    d324:	4770      	bx	lr
    d326:	bf00      	nop

0000d328 <_Unwind_ForcedUnwind>:
    d328:	46ec      	mov	ip, sp
    d32a:	b500      	push	{lr}
    d32c:	e92d 5000 	stmdb	sp!, {ip, lr}
    d330:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d334:	f04f 0300 	mov.w	r3, #0
    d338:	e92d 000c 	stmdb	sp!, {r2, r3}
    d33c:	ab01      	add	r3, sp, #4
    d33e:	f7ff fbd7 	bl	caf0 <__gnu_Unwind_ForcedUnwind>
    d342:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d346:	b012      	add	sp, #72	; 0x48
    d348:	4770      	bx	lr
    d34a:	bf00      	nop

0000d34c <_Unwind_Backtrace>:
    d34c:	46ec      	mov	ip, sp
    d34e:	b500      	push	{lr}
    d350:	e92d 5000 	stmdb	sp!, {ip, lr}
    d354:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    d358:	f04f 0300 	mov.w	r3, #0
    d35c:	e92d 000c 	stmdb	sp!, {r2, r3}
    d360:	aa01      	add	r2, sp, #4
    d362:	f7ff fc53 	bl	cc0c <__gnu_Unwind_Backtrace>
    d366:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    d36a:	b012      	add	sp, #72	; 0x48
    d36c:	4770      	bx	lr
    d36e:	bf00      	nop

0000d370 <next_unwind_byte>:
    d370:	7a03      	ldrb	r3, [r0, #8]
    d372:	b91b      	cbnz	r3, d37c <next_unwind_byte+0xc>
    d374:	7a43      	ldrb	r3, [r0, #9]
    d376:	b943      	cbnz	r3, d38a <next_unwind_byte+0x1a>
    d378:	20b0      	movs	r0, #176	; 0xb0
    d37a:	4770      	bx	lr
    d37c:	6802      	ldr	r2, [r0, #0]
    d37e:	3b01      	subs	r3, #1
    d380:	7203      	strb	r3, [r0, #8]
    d382:	0213      	lsls	r3, r2, #8
    d384:	6003      	str	r3, [r0, #0]
    d386:	0e10      	lsrs	r0, r2, #24
    d388:	4770      	bx	lr
    d38a:	6842      	ldr	r2, [r0, #4]
    d38c:	3b01      	subs	r3, #1
    d38e:	7243      	strb	r3, [r0, #9]
    d390:	1d11      	adds	r1, r2, #4
    d392:	6812      	ldr	r2, [r2, #0]
    d394:	6041      	str	r1, [r0, #4]
    d396:	2303      	movs	r3, #3
    d398:	7203      	strb	r3, [r0, #8]
    d39a:	0213      	lsls	r3, r2, #8
    d39c:	6003      	str	r3, [r0, #0]
    d39e:	0e10      	lsrs	r0, r2, #24
    d3a0:	4770      	bx	lr
    d3a2:	bf00      	nop

0000d3a4 <_Unwind_GetGR.constprop.0>:
    d3a4:	b500      	push	{lr}
    d3a6:	b085      	sub	sp, #20
    d3a8:	ab03      	add	r3, sp, #12
    d3aa:	2100      	movs	r1, #0
    d3ac:	9300      	str	r3, [sp, #0]
    d3ae:	220c      	movs	r2, #12
    d3b0:	460b      	mov	r3, r1
    d3b2:	f7ff fbdb 	bl	cb6c <_Unwind_VRS_Get>
    d3b6:	9803      	ldr	r0, [sp, #12]
    d3b8:	b005      	add	sp, #20
    d3ba:	f85d fb04 	ldr.w	pc, [sp], #4
    d3be:	bf00      	nop

0000d3c0 <unwind_UCB_from_context>:
    d3c0:	f7ff bff0 	b.w	d3a4 <_Unwind_GetGR.constprop.0>

0000d3c4 <__gnu_unwind_execute>:
    d3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d3c8:	4606      	mov	r6, r0
    d3ca:	b085      	sub	sp, #20
    d3cc:	460d      	mov	r5, r1
    d3ce:	f04f 0800 	mov.w	r8, #0
    d3d2:	4628      	mov	r0, r5
    d3d4:	f7ff ffcc 	bl	d370 <next_unwind_byte>
    d3d8:	28b0      	cmp	r0, #176	; 0xb0
    d3da:	4604      	mov	r4, r0
    d3dc:	f000 80ac 	beq.w	d538 <__gnu_unwind_execute+0x174>
    d3e0:	f020 027f 	bic.w	r2, r0, #127	; 0x7f
    d3e4:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    d3e8:	d020      	beq.n	d42c <__gnu_unwind_execute+0x68>
    d3ea:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d3ee:	2a80      	cmp	r2, #128	; 0x80
    d3f0:	d073      	beq.n	d4da <__gnu_unwind_execute+0x116>
    d3f2:	2a90      	cmp	r2, #144	; 0x90
    d3f4:	d036      	beq.n	d464 <__gnu_unwind_execute+0xa0>
    d3f6:	2aa0      	cmp	r2, #160	; 0xa0
    d3f8:	d042      	beq.n	d480 <__gnu_unwind_execute+0xbc>
    d3fa:	2ab0      	cmp	r2, #176	; 0xb0
    d3fc:	d056      	beq.n	d4ac <__gnu_unwind_execute+0xe8>
    d3fe:	2ac0      	cmp	r2, #192	; 0xc0
    d400:	f000 8082 	beq.w	d508 <__gnu_unwind_execute+0x144>
    d404:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    d408:	2bd0      	cmp	r3, #208	; 0xd0
    d40a:	d10b      	bne.n	d424 <__gnu_unwind_execute+0x60>
    d40c:	f000 0407 	and.w	r4, r0, #7
    d410:	1c62      	adds	r2, r4, #1
    d412:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    d416:	4630      	mov	r0, r6
    d418:	2101      	movs	r1, #1
    d41a:	2305      	movs	r3, #5
    d41c:	f7ff fdac 	bl	cf78 <_Unwind_VRS_Pop>
    d420:	2800      	cmp	r0, #0
    d422:	d0d6      	beq.n	d3d2 <__gnu_unwind_execute+0xe>
    d424:	2009      	movs	r0, #9
    d426:	b005      	add	sp, #20
    d428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d42c:	af03      	add	r7, sp, #12
    d42e:	ea4f 0980 	mov.w	r9, r0, lsl #2
    d432:	460b      	mov	r3, r1
    d434:	9700      	str	r7, [sp, #0]
    d436:	4630      	mov	r0, r6
    d438:	220d      	movs	r2, #13
    d43a:	f7ff fb97 	bl	cb6c <_Unwind_VRS_Get>
    d43e:	fa5f f989 	uxtb.w	r9, r9
    d442:	9b03      	ldr	r3, [sp, #12]
    d444:	f109 0904 	add.w	r9, r9, #4
    d448:	0660      	lsls	r0, r4, #25
    d44a:	bf4c      	ite	mi
    d44c:	ebc9 0303 	rsbmi	r3, r9, r3
    d450:	444b      	addpl	r3, r9
    d452:	9303      	str	r3, [sp, #12]
    d454:	2100      	movs	r1, #0
    d456:	9700      	str	r7, [sp, #0]
    d458:	460b      	mov	r3, r1
    d45a:	4630      	mov	r0, r6
    d45c:	220d      	movs	r2, #13
    d45e:	f7ff fbad 	bl	cbbc <_Unwind_VRS_Set>
    d462:	e7b6      	b.n	d3d2 <__gnu_unwind_execute+0xe>
    d464:	f000 030d 	and.w	r3, r0, #13
    d468:	2b0d      	cmp	r3, #13
    d46a:	d0db      	beq.n	d424 <__gnu_unwind_execute+0x60>
    d46c:	af03      	add	r7, sp, #12
    d46e:	2100      	movs	r1, #0
    d470:	f000 020f 	and.w	r2, r0, #15
    d474:	9700      	str	r7, [sp, #0]
    d476:	460b      	mov	r3, r1
    d478:	4630      	mov	r0, r6
    d47a:	f7ff fb77 	bl	cb6c <_Unwind_VRS_Get>
    d47e:	e7e9      	b.n	d454 <__gnu_unwind_execute+0x90>
    d480:	43c2      	mvns	r2, r0
    d482:	f44f 637f 	mov.w	r3, #4080	; 0xff0
    d486:	f002 0207 	and.w	r2, r2, #7
    d48a:	fa43 f202 	asr.w	r2, r3, r2
    d48e:	0701      	lsls	r1, r0, #28
    d490:	ea02 0203 	and.w	r2, r2, r3
    d494:	f04f 0100 	mov.w	r1, #0
    d498:	bf48      	it	mi
    d49a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    d49e:	460b      	mov	r3, r1
    d4a0:	4630      	mov	r0, r6
    d4a2:	f7ff fd69 	bl	cf78 <_Unwind_VRS_Pop>
    d4a6:	2800      	cmp	r0, #0
    d4a8:	d1bc      	bne.n	d424 <__gnu_unwind_execute+0x60>
    d4aa:	e792      	b.n	d3d2 <__gnu_unwind_execute+0xe>
    d4ac:	28b1      	cmp	r0, #177	; 0xb1
    d4ae:	d048      	beq.n	d542 <__gnu_unwind_execute+0x17e>
    d4b0:	28b2      	cmp	r0, #178	; 0xb2
    d4b2:	d051      	beq.n	d558 <__gnu_unwind_execute+0x194>
    d4b4:	28b3      	cmp	r0, #179	; 0xb3
    d4b6:	d07c      	beq.n	d5b2 <__gnu_unwind_execute+0x1ee>
    d4b8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    d4bc:	2bb4      	cmp	r3, #180	; 0xb4
    d4be:	d0b1      	beq.n	d424 <__gnu_unwind_execute+0x60>
    d4c0:	f000 0207 	and.w	r2, r0, #7
    d4c4:	3201      	adds	r2, #1
    d4c6:	2101      	movs	r1, #1
    d4c8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    d4cc:	460b      	mov	r3, r1
    d4ce:	4630      	mov	r0, r6
    d4d0:	f7ff fd52 	bl	cf78 <_Unwind_VRS_Pop>
    d4d4:	2800      	cmp	r0, #0
    d4d6:	d1a5      	bne.n	d424 <__gnu_unwind_execute+0x60>
    d4d8:	e77b      	b.n	d3d2 <__gnu_unwind_execute+0xe>
    d4da:	4628      	mov	r0, r5
    d4dc:	f7ff ff48 	bl	d370 <next_unwind_byte>
    d4e0:	0224      	lsls	r4, r4, #8
    d4e2:	4320      	orrs	r0, r4
    d4e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d4e8:	d09c      	beq.n	d424 <__gnu_unwind_execute+0x60>
    d4ea:	0104      	lsls	r4, r0, #4
    d4ec:	2100      	movs	r1, #0
    d4ee:	b2a2      	uxth	r2, r4
    d4f0:	460b      	mov	r3, r1
    d4f2:	4630      	mov	r0, r6
    d4f4:	f7ff fd40 	bl	cf78 <_Unwind_VRS_Pop>
    d4f8:	2800      	cmp	r0, #0
    d4fa:	d193      	bne.n	d424 <__gnu_unwind_execute+0x60>
    d4fc:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    d500:	bf18      	it	ne
    d502:	f04f 0801 	movne.w	r8, #1
    d506:	e764      	b.n	d3d2 <__gnu_unwind_execute+0xe>
    d508:	28c6      	cmp	r0, #198	; 0xc6
    d50a:	d05e      	beq.n	d5ca <__gnu_unwind_execute+0x206>
    d50c:	28c7      	cmp	r0, #199	; 0xc7
    d50e:	d068      	beq.n	d5e2 <__gnu_unwind_execute+0x21e>
    d510:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    d514:	2bc0      	cmp	r3, #192	; 0xc0
    d516:	d077      	beq.n	d608 <__gnu_unwind_execute+0x244>
    d518:	28c8      	cmp	r0, #200	; 0xc8
    d51a:	f000 808d 	beq.w	d638 <__gnu_unwind_execute+0x274>
    d51e:	28c9      	cmp	r0, #201	; 0xc9
    d520:	d180      	bne.n	d424 <__gnu_unwind_execute+0x60>
    d522:	4628      	mov	r0, r5
    d524:	f7ff ff24 	bl	d370 <next_unwind_byte>
    d528:	f000 030f 	and.w	r3, r0, #15
    d52c:	3301      	adds	r3, #1
    d52e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d532:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    d536:	e76e      	b.n	d416 <__gnu_unwind_execute+0x52>
    d538:	f1b8 0f00 	cmp.w	r8, #0
    d53c:	d06b      	beq.n	d616 <__gnu_unwind_execute+0x252>
    d53e:	2000      	movs	r0, #0
    d540:	e771      	b.n	d426 <__gnu_unwind_execute+0x62>
    d542:	4628      	mov	r0, r5
    d544:	f7ff ff14 	bl	d370 <next_unwind_byte>
    d548:	4602      	mov	r2, r0
    d54a:	2800      	cmp	r0, #0
    d54c:	f43f af6a 	beq.w	d424 <__gnu_unwind_execute+0x60>
    d550:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
    d554:	d0ba      	beq.n	d4cc <__gnu_unwind_execute+0x108>
    d556:	e765      	b.n	d424 <__gnu_unwind_execute+0x60>
    d558:	2100      	movs	r1, #0
    d55a:	af03      	add	r7, sp, #12
    d55c:	220d      	movs	r2, #13
    d55e:	460b      	mov	r3, r1
    d560:	9700      	str	r7, [sp, #0]
    d562:	4630      	mov	r0, r6
    d564:	f7ff fb02 	bl	cb6c <_Unwind_VRS_Get>
    d568:	4628      	mov	r0, r5
    d56a:	f7ff ff01 	bl	d370 <next_unwind_byte>
    d56e:	0602      	lsls	r2, r0, #24
    d570:	f04f 0402 	mov.w	r4, #2
    d574:	d50c      	bpl.n	d590 <__gnu_unwind_execute+0x1cc>
    d576:	9b03      	ldr	r3, [sp, #12]
    d578:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    d57c:	40a0      	lsls	r0, r4
    d57e:	4403      	add	r3, r0
    d580:	4628      	mov	r0, r5
    d582:	9303      	str	r3, [sp, #12]
    d584:	f7ff fef4 	bl	d370 <next_unwind_byte>
    d588:	0603      	lsls	r3, r0, #24
    d58a:	f104 0407 	add.w	r4, r4, #7
    d58e:	d4f2      	bmi.n	d576 <__gnu_unwind_execute+0x1b2>
    d590:	9b03      	ldr	r3, [sp, #12]
    d592:	9700      	str	r7, [sp, #0]
    d594:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    d598:	fa00 f404 	lsl.w	r4, r0, r4
    d59c:	f503 7301 	add.w	r3, r3, #516	; 0x204
    d5a0:	2100      	movs	r1, #0
    d5a2:	441c      	add	r4, r3
    d5a4:	4630      	mov	r0, r6
    d5a6:	460b      	mov	r3, r1
    d5a8:	220d      	movs	r2, #13
    d5aa:	9403      	str	r4, [sp, #12]
    d5ac:	f7ff fb06 	bl	cbbc <_Unwind_VRS_Set>
    d5b0:	e70f      	b.n	d3d2 <__gnu_unwind_execute+0xe>
    d5b2:	4628      	mov	r0, r5
    d5b4:	f7ff fedc 	bl	d370 <next_unwind_byte>
    d5b8:	f000 030f 	and.w	r3, r0, #15
    d5bc:	3301      	adds	r3, #1
    d5be:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d5c2:	2101      	movs	r1, #1
    d5c4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    d5c8:	e780      	b.n	d4cc <__gnu_unwind_execute+0x108>
    d5ca:	4628      	mov	r0, r5
    d5cc:	f7ff fed0 	bl	d370 <next_unwind_byte>
    d5d0:	f000 030f 	and.w	r3, r0, #15
    d5d4:	3301      	adds	r3, #1
    d5d6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d5da:	2103      	movs	r1, #3
    d5dc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    d5e0:	e774      	b.n	d4cc <__gnu_unwind_execute+0x108>
    d5e2:	4628      	mov	r0, r5
    d5e4:	f7ff fec4 	bl	d370 <next_unwind_byte>
    d5e8:	4602      	mov	r2, r0
    d5ea:	2800      	cmp	r0, #0
    d5ec:	f43f af1a 	beq.w	d424 <__gnu_unwind_execute+0x60>
    d5f0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    d5f4:	f47f af16 	bne.w	d424 <__gnu_unwind_execute+0x60>
    d5f8:	4630      	mov	r0, r6
    d5fa:	2104      	movs	r1, #4
    d5fc:	f7ff fcbc 	bl	cf78 <_Unwind_VRS_Pop>
    d600:	2800      	cmp	r0, #0
    d602:	f47f af0f 	bne.w	d424 <__gnu_unwind_execute+0x60>
    d606:	e6e4      	b.n	d3d2 <__gnu_unwind_execute+0xe>
    d608:	f000 020f 	and.w	r2, r0, #15
    d60c:	3201      	adds	r2, #1
    d60e:	2103      	movs	r1, #3
    d610:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    d614:	e75a      	b.n	d4cc <__gnu_unwind_execute+0x108>
    d616:	ac03      	add	r4, sp, #12
    d618:	4641      	mov	r1, r8
    d61a:	220e      	movs	r2, #14
    d61c:	4643      	mov	r3, r8
    d61e:	9400      	str	r4, [sp, #0]
    d620:	4630      	mov	r0, r6
    d622:	f7ff faa3 	bl	cb6c <_Unwind_VRS_Get>
    d626:	9400      	str	r4, [sp, #0]
    d628:	4630      	mov	r0, r6
    d62a:	4641      	mov	r1, r8
    d62c:	220f      	movs	r2, #15
    d62e:	4643      	mov	r3, r8
    d630:	f7ff fac4 	bl	cbbc <_Unwind_VRS_Set>
    d634:	4640      	mov	r0, r8
    d636:	e6f6      	b.n	d426 <__gnu_unwind_execute+0x62>
    d638:	4628      	mov	r0, r5
    d63a:	f7ff fe99 	bl	d370 <next_unwind_byte>
    d63e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    d642:	f000 030f 	and.w	r3, r0, #15
    d646:	3210      	adds	r2, #16
    d648:	3301      	adds	r3, #1
    d64a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    d64e:	e6e2      	b.n	d416 <__gnu_unwind_execute+0x52>

0000d650 <__gnu_unwind_frame>:
    d650:	b500      	push	{lr}
    d652:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    d654:	b085      	sub	sp, #20
    d656:	685a      	ldr	r2, [r3, #4]
    d658:	2003      	movs	r0, #3
    d65a:	f88d 000c 	strb.w	r0, [sp, #12]
    d65e:	4608      	mov	r0, r1
    d660:	0211      	lsls	r1, r2, #8
    d662:	9101      	str	r1, [sp, #4]
    d664:	79da      	ldrb	r2, [r3, #7]
    d666:	f88d 200d 	strb.w	r2, [sp, #13]
    d66a:	3308      	adds	r3, #8
    d66c:	a901      	add	r1, sp, #4
    d66e:	9302      	str	r3, [sp, #8]
    d670:	f7ff fea8 	bl	d3c4 <__gnu_unwind_execute>
    d674:	b005      	add	sp, #20
    d676:	f85d fb04 	ldr.w	pc, [sp], #4
    d67a:	bf00      	nop

0000d67c <_Unwind_GetRegionStart>:
    d67c:	b508      	push	{r3, lr}
    d67e:	f7ff fe9f 	bl	d3c0 <unwind_UCB_from_context>
    d682:	6c80      	ldr	r0, [r0, #72]	; 0x48
    d684:	bd08      	pop	{r3, pc}
    d686:	bf00      	nop

0000d688 <_Unwind_GetLanguageSpecificData>:
    d688:	b508      	push	{r3, lr}
    d68a:	f7ff fe99 	bl	d3c0 <unwind_UCB_from_context>
    d68e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    d690:	79da      	ldrb	r2, [r3, #7]
    d692:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    d696:	3008      	adds	r0, #8
    d698:	bd08      	pop	{r3, pc}
    d69a:	bf00      	nop

0000d69c <_Unwind_GetDataRelBase>:
    d69c:	b508      	push	{r3, lr}
    d69e:	f000 f805 	bl	d6ac <abort>
    d6a2:	bf00      	nop

0000d6a4 <_Unwind_GetTextRelBase>:
    d6a4:	b508      	push	{r3, lr}
    d6a6:	f000 f801 	bl	d6ac <abort>
    d6aa:	bf00      	nop

0000d6ac <abort>:
    d6ac:	b508      	push	{r3, lr}
    d6ae:	2006      	movs	r0, #6
    d6b0:	f001 f90e 	bl	e8d0 <raise>
    d6b4:	2001      	movs	r0, #1
    d6b6:	f7f4 ffbb 	bl	2630 <_exit>
    d6ba:	bf00      	nop

0000d6bc <__cxa_atexit>:
    d6bc:	b410      	push	{r4}
    d6be:	460c      	mov	r4, r1
    d6c0:	4613      	mov	r3, r2
    d6c2:	4601      	mov	r1, r0
    d6c4:	4622      	mov	r2, r4
    d6c6:	2002      	movs	r0, #2
    d6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6cc:	f002 be24 	b.w	10318 <__register_exitproc>

0000d6d0 <fputc>:
    d6d0:	4b08      	ldr	r3, [pc, #32]	; (d6f4 <fputc+0x24>)
    d6d2:	b570      	push	{r4, r5, r6, lr}
    d6d4:	681c      	ldr	r4, [r3, #0]
    d6d6:	4606      	mov	r6, r0
    d6d8:	460d      	mov	r5, r1
    d6da:	b124      	cbz	r4, d6e6 <fputc+0x16>
    d6dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d6de:	b913      	cbnz	r3, d6e6 <fputc+0x16>
    d6e0:	4620      	mov	r0, r4
    d6e2:	f003 fef7 	bl	114d4 <__sinit>
    d6e6:	4620      	mov	r0, r4
    d6e8:	4631      	mov	r1, r6
    d6ea:	462a      	mov	r2, r5
    d6ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d6f0:	f000 be96 	b.w	e420 <_putc_r>
    d6f4:	1fff88f0 	.word	0x1fff88f0

0000d6f8 <_fputs_r>:
    d6f8:	b530      	push	{r4, r5, lr}
    d6fa:	b087      	sub	sp, #28
    d6fc:	4605      	mov	r5, r0
    d6fe:	4608      	mov	r0, r1
    d700:	4614      	mov	r4, r2
    d702:	9101      	str	r1, [sp, #4]
    d704:	f7f4 ffca 	bl	269c <strlen>
    d708:	aa01      	add	r2, sp, #4
    d70a:	2301      	movs	r3, #1
    d70c:	9005      	str	r0, [sp, #20]
    d70e:	9002      	str	r0, [sp, #8]
    d710:	9203      	str	r2, [sp, #12]
    d712:	9304      	str	r3, [sp, #16]
    d714:	b10d      	cbz	r5, d71a <_fputs_r+0x22>
    d716:	6bab      	ldr	r3, [r5, #56]	; 0x38
    d718:	b183      	cbz	r3, d73c <_fputs_r+0x44>
    d71a:	89a3      	ldrh	r3, [r4, #12]
    d71c:	049a      	lsls	r2, r3, #18
    d71e:	d406      	bmi.n	d72e <_fputs_r+0x36>
    d720:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    d72a:	81a3      	strh	r3, [r4, #12]
    d72c:	6662      	str	r2, [r4, #100]	; 0x64
    d72e:	4628      	mov	r0, r5
    d730:	4621      	mov	r1, r4
    d732:	aa03      	add	r2, sp, #12
    d734:	f000 f80e 	bl	d754 <__sfvwrite_r>
    d738:	b007      	add	sp, #28
    d73a:	bd30      	pop	{r4, r5, pc}
    d73c:	4628      	mov	r0, r5
    d73e:	f003 fec9 	bl	114d4 <__sinit>
    d742:	e7ea      	b.n	d71a <_fputs_r+0x22>

0000d744 <fputs>:
    d744:	4b02      	ldr	r3, [pc, #8]	; (d750 <fputs+0xc>)
    d746:	460a      	mov	r2, r1
    d748:	4601      	mov	r1, r0
    d74a:	6818      	ldr	r0, [r3, #0]
    d74c:	f7ff bfd4 	b.w	d6f8 <_fputs_r>
    d750:	1fff88f0 	.word	0x1fff88f0

0000d754 <__sfvwrite_r>:
    d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d758:	6893      	ldr	r3, [r2, #8]
    d75a:	b083      	sub	sp, #12
    d75c:	4616      	mov	r6, r2
    d75e:	4681      	mov	r9, r0
    d760:	460c      	mov	r4, r1
    d762:	b32b      	cbz	r3, d7b0 <__sfvwrite_r+0x5c>
    d764:	898b      	ldrh	r3, [r1, #12]
    d766:	0719      	lsls	r1, r3, #28
    d768:	d526      	bpl.n	d7b8 <__sfvwrite_r+0x64>
    d76a:	6922      	ldr	r2, [r4, #16]
    d76c:	b322      	cbz	r2, d7b8 <__sfvwrite_r+0x64>
    d76e:	f003 0202 	and.w	r2, r3, #2
    d772:	b292      	uxth	r2, r2
    d774:	6835      	ldr	r5, [r6, #0]
    d776:	2a00      	cmp	r2, #0
    d778:	d02c      	beq.n	d7d4 <__sfvwrite_r+0x80>
    d77a:	f04f 0a00 	mov.w	sl, #0
    d77e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; da68 <__sfvwrite_r+0x314>
    d782:	46d0      	mov	r8, sl
    d784:	45d8      	cmp	r8, fp
    d786:	bf34      	ite	cc
    d788:	4643      	movcc	r3, r8
    d78a:	465b      	movcs	r3, fp
    d78c:	4652      	mov	r2, sl
    d78e:	4648      	mov	r0, r9
    d790:	f1b8 0f00 	cmp.w	r8, #0
    d794:	d04f      	beq.n	d836 <__sfvwrite_r+0xe2>
    d796:	69e1      	ldr	r1, [r4, #28]
    d798:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d79a:	47b8      	blx	r7
    d79c:	2800      	cmp	r0, #0
    d79e:	dd56      	ble.n	d84e <__sfvwrite_r+0xfa>
    d7a0:	68b3      	ldr	r3, [r6, #8]
    d7a2:	1a1b      	subs	r3, r3, r0
    d7a4:	4482      	add	sl, r0
    d7a6:	ebc0 0808 	rsb	r8, r0, r8
    d7aa:	60b3      	str	r3, [r6, #8]
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d1e9      	bne.n	d784 <__sfvwrite_r+0x30>
    d7b0:	2000      	movs	r0, #0
    d7b2:	b003      	add	sp, #12
    d7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7b8:	4648      	mov	r0, r9
    d7ba:	4621      	mov	r1, r4
    d7bc:	f002 fd4a 	bl	10254 <__swsetup_r>
    d7c0:	2800      	cmp	r0, #0
    d7c2:	f040 8148 	bne.w	da56 <__sfvwrite_r+0x302>
    d7c6:	89a3      	ldrh	r3, [r4, #12]
    d7c8:	6835      	ldr	r5, [r6, #0]
    d7ca:	f003 0202 	and.w	r2, r3, #2
    d7ce:	b292      	uxth	r2, r2
    d7d0:	2a00      	cmp	r2, #0
    d7d2:	d1d2      	bne.n	d77a <__sfvwrite_r+0x26>
    d7d4:	f013 0a01 	ands.w	sl, r3, #1
    d7d8:	d142      	bne.n	d860 <__sfvwrite_r+0x10c>
    d7da:	46d0      	mov	r8, sl
    d7dc:	f1b8 0f00 	cmp.w	r8, #0
    d7e0:	d023      	beq.n	d82a <__sfvwrite_r+0xd6>
    d7e2:	059a      	lsls	r2, r3, #22
    d7e4:	68a7      	ldr	r7, [r4, #8]
    d7e6:	d576      	bpl.n	d8d6 <__sfvwrite_r+0x182>
    d7e8:	45b8      	cmp	r8, r7
    d7ea:	f0c0 80a4 	bcc.w	d936 <__sfvwrite_r+0x1e2>
    d7ee:	f413 6f90 	tst.w	r3, #1152	; 0x480
    d7f2:	f040 80b2 	bne.w	d95a <__sfvwrite_r+0x206>
    d7f6:	6820      	ldr	r0, [r4, #0]
    d7f8:	46bb      	mov	fp, r7
    d7fa:	4651      	mov	r1, sl
    d7fc:	465a      	mov	r2, fp
    d7fe:	f000 fd61 	bl	e2c4 <memmove>
    d802:	68a2      	ldr	r2, [r4, #8]
    d804:	6821      	ldr	r1, [r4, #0]
    d806:	1bd2      	subs	r2, r2, r7
    d808:	eb01 030b 	add.w	r3, r1, fp
    d80c:	60a2      	str	r2, [r4, #8]
    d80e:	6023      	str	r3, [r4, #0]
    d810:	4642      	mov	r2, r8
    d812:	68b3      	ldr	r3, [r6, #8]
    d814:	1a9b      	subs	r3, r3, r2
    d816:	4492      	add	sl, r2
    d818:	ebc2 0808 	rsb	r8, r2, r8
    d81c:	60b3      	str	r3, [r6, #8]
    d81e:	2b00      	cmp	r3, #0
    d820:	d0c6      	beq.n	d7b0 <__sfvwrite_r+0x5c>
    d822:	89a3      	ldrh	r3, [r4, #12]
    d824:	f1b8 0f00 	cmp.w	r8, #0
    d828:	d1db      	bne.n	d7e2 <__sfvwrite_r+0x8e>
    d82a:	f8d5 a000 	ldr.w	sl, [r5]
    d82e:	f8d5 8004 	ldr.w	r8, [r5, #4]
    d832:	3508      	adds	r5, #8
    d834:	e7d2      	b.n	d7dc <__sfvwrite_r+0x88>
    d836:	f8d5 a000 	ldr.w	sl, [r5]
    d83a:	f8d5 8004 	ldr.w	r8, [r5, #4]
    d83e:	3508      	adds	r5, #8
    d840:	e7a0      	b.n	d784 <__sfvwrite_r+0x30>
    d842:	4648      	mov	r0, r9
    d844:	4621      	mov	r1, r4
    d846:	f003 fe29 	bl	1149c <_fflush_r>
    d84a:	2800      	cmp	r0, #0
    d84c:	d059      	beq.n	d902 <__sfvwrite_r+0x1ae>
    d84e:	89a3      	ldrh	r3, [r4, #12]
    d850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d858:	81a3      	strh	r3, [r4, #12]
    d85a:	b003      	add	sp, #12
    d85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d860:	4692      	mov	sl, r2
    d862:	9201      	str	r2, [sp, #4]
    d864:	4693      	mov	fp, r2
    d866:	4690      	mov	r8, r2
    d868:	f1b8 0f00 	cmp.w	r8, #0
    d86c:	d02b      	beq.n	d8c6 <__sfvwrite_r+0x172>
    d86e:	9f01      	ldr	r7, [sp, #4]
    d870:	2f00      	cmp	r7, #0
    d872:	d064      	beq.n	d93e <__sfvwrite_r+0x1ea>
    d874:	6820      	ldr	r0, [r4, #0]
    d876:	6921      	ldr	r1, [r4, #16]
    d878:	f8d4 c008 	ldr.w	ip, [r4, #8]
    d87c:	6962      	ldr	r2, [r4, #20]
    d87e:	45c2      	cmp	sl, r8
    d880:	bf34      	ite	cc
    d882:	4653      	movcc	r3, sl
    d884:	4643      	movcs	r3, r8
    d886:	4288      	cmp	r0, r1
    d888:	461f      	mov	r7, r3
    d88a:	d903      	bls.n	d894 <__sfvwrite_r+0x140>
    d88c:	4494      	add	ip, r2
    d88e:	4563      	cmp	r3, ip
    d890:	f300 80ae 	bgt.w	d9f0 <__sfvwrite_r+0x29c>
    d894:	4293      	cmp	r3, r2
    d896:	db36      	blt.n	d906 <__sfvwrite_r+0x1b2>
    d898:	4613      	mov	r3, r2
    d89a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d89c:	69e1      	ldr	r1, [r4, #28]
    d89e:	4648      	mov	r0, r9
    d8a0:	465a      	mov	r2, fp
    d8a2:	47b8      	blx	r7
    d8a4:	1e07      	subs	r7, r0, #0
    d8a6:	ddd2      	ble.n	d84e <__sfvwrite_r+0xfa>
    d8a8:	ebba 0a07 	subs.w	sl, sl, r7
    d8ac:	d03a      	beq.n	d924 <__sfvwrite_r+0x1d0>
    d8ae:	68b3      	ldr	r3, [r6, #8]
    d8b0:	1bdb      	subs	r3, r3, r7
    d8b2:	44bb      	add	fp, r7
    d8b4:	ebc7 0808 	rsb	r8, r7, r8
    d8b8:	60b3      	str	r3, [r6, #8]
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	f43f af78 	beq.w	d7b0 <__sfvwrite_r+0x5c>
    d8c0:	f1b8 0f00 	cmp.w	r8, #0
    d8c4:	d1d3      	bne.n	d86e <__sfvwrite_r+0x11a>
    d8c6:	2700      	movs	r7, #0
    d8c8:	f8d5 b000 	ldr.w	fp, [r5]
    d8cc:	f8d5 8004 	ldr.w	r8, [r5, #4]
    d8d0:	9701      	str	r7, [sp, #4]
    d8d2:	3508      	adds	r5, #8
    d8d4:	e7c8      	b.n	d868 <__sfvwrite_r+0x114>
    d8d6:	6820      	ldr	r0, [r4, #0]
    d8d8:	6923      	ldr	r3, [r4, #16]
    d8da:	4298      	cmp	r0, r3
    d8dc:	d802      	bhi.n	d8e4 <__sfvwrite_r+0x190>
    d8de:	6963      	ldr	r3, [r4, #20]
    d8e0:	4598      	cmp	r8, r3
    d8e2:	d272      	bcs.n	d9ca <__sfvwrite_r+0x276>
    d8e4:	45b8      	cmp	r8, r7
    d8e6:	bf38      	it	cc
    d8e8:	4647      	movcc	r7, r8
    d8ea:	463a      	mov	r2, r7
    d8ec:	4651      	mov	r1, sl
    d8ee:	f000 fce9 	bl	e2c4 <memmove>
    d8f2:	68a3      	ldr	r3, [r4, #8]
    d8f4:	6822      	ldr	r2, [r4, #0]
    d8f6:	1bdb      	subs	r3, r3, r7
    d8f8:	443a      	add	r2, r7
    d8fa:	60a3      	str	r3, [r4, #8]
    d8fc:	6022      	str	r2, [r4, #0]
    d8fe:	2b00      	cmp	r3, #0
    d900:	d09f      	beq.n	d842 <__sfvwrite_r+0xee>
    d902:	463a      	mov	r2, r7
    d904:	e785      	b.n	d812 <__sfvwrite_r+0xbe>
    d906:	461a      	mov	r2, r3
    d908:	4659      	mov	r1, fp
    d90a:	9300      	str	r3, [sp, #0]
    d90c:	f000 fcda 	bl	e2c4 <memmove>
    d910:	9b00      	ldr	r3, [sp, #0]
    d912:	68a1      	ldr	r1, [r4, #8]
    d914:	6822      	ldr	r2, [r4, #0]
    d916:	1ac9      	subs	r1, r1, r3
    d918:	ebba 0a07 	subs.w	sl, sl, r7
    d91c:	4413      	add	r3, r2
    d91e:	60a1      	str	r1, [r4, #8]
    d920:	6023      	str	r3, [r4, #0]
    d922:	d1c4      	bne.n	d8ae <__sfvwrite_r+0x15a>
    d924:	4648      	mov	r0, r9
    d926:	4621      	mov	r1, r4
    d928:	f003 fdb8 	bl	1149c <_fflush_r>
    d92c:	2800      	cmp	r0, #0
    d92e:	d18e      	bne.n	d84e <__sfvwrite_r+0xfa>
    d930:	f8cd a004 	str.w	sl, [sp, #4]
    d934:	e7bb      	b.n	d8ae <__sfvwrite_r+0x15a>
    d936:	6820      	ldr	r0, [r4, #0]
    d938:	4647      	mov	r7, r8
    d93a:	46c3      	mov	fp, r8
    d93c:	e75d      	b.n	d7fa <__sfvwrite_r+0xa6>
    d93e:	4658      	mov	r0, fp
    d940:	210a      	movs	r1, #10
    d942:	4642      	mov	r2, r8
    d944:	f000 fba8 	bl	e098 <memchr>
    d948:	2800      	cmp	r0, #0
    d94a:	d07f      	beq.n	da4c <__sfvwrite_r+0x2f8>
    d94c:	f100 0a01 	add.w	sl, r0, #1
    d950:	2701      	movs	r7, #1
    d952:	ebcb 0a0a 	rsb	sl, fp, sl
    d956:	9701      	str	r7, [sp, #4]
    d958:	e78c      	b.n	d874 <__sfvwrite_r+0x120>
    d95a:	6822      	ldr	r2, [r4, #0]
    d95c:	6921      	ldr	r1, [r4, #16]
    d95e:	6967      	ldr	r7, [r4, #20]
    d960:	ebc1 0c02 	rsb	ip, r1, r2
    d964:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    d968:	f10c 0201 	add.w	r2, ip, #1
    d96c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    d970:	4442      	add	r2, r8
    d972:	107f      	asrs	r7, r7, #1
    d974:	4297      	cmp	r7, r2
    d976:	bf34      	ite	cc
    d978:	4617      	movcc	r7, r2
    d97a:	463a      	movcs	r2, r7
    d97c:	055b      	lsls	r3, r3, #21
    d97e:	d54f      	bpl.n	da20 <__sfvwrite_r+0x2cc>
    d980:	4611      	mov	r1, r2
    d982:	4648      	mov	r0, r9
    d984:	f8cd c000 	str.w	ip, [sp]
    d988:	f000 f8ea 	bl	db60 <_malloc_r>
    d98c:	f8dd c000 	ldr.w	ip, [sp]
    d990:	4683      	mov	fp, r0
    d992:	2800      	cmp	r0, #0
    d994:	d062      	beq.n	da5c <__sfvwrite_r+0x308>
    d996:	4662      	mov	r2, ip
    d998:	6921      	ldr	r1, [r4, #16]
    d99a:	f8cd c000 	str.w	ip, [sp]
    d99e:	f000 fbf7 	bl	e190 <memcpy>
    d9a2:	89a2      	ldrh	r2, [r4, #12]
    d9a4:	f8dd c000 	ldr.w	ip, [sp]
    d9a8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    d9ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d9b0:	81a2      	strh	r2, [r4, #12]
    d9b2:	eb0b 000c 	add.w	r0, fp, ip
    d9b6:	ebcc 0207 	rsb	r2, ip, r7
    d9ba:	f8c4 b010 	str.w	fp, [r4, #16]
    d9be:	6167      	str	r7, [r4, #20]
    d9c0:	6020      	str	r0, [r4, #0]
    d9c2:	60a2      	str	r2, [r4, #8]
    d9c4:	4647      	mov	r7, r8
    d9c6:	46c3      	mov	fp, r8
    d9c8:	e717      	b.n	d7fa <__sfvwrite_r+0xa6>
    d9ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    d9ce:	4590      	cmp	r8, r2
    d9d0:	bf38      	it	cc
    d9d2:	4642      	movcc	r2, r8
    d9d4:	fb92 f2f3 	sdiv	r2, r2, r3
    d9d8:	fb02 f303 	mul.w	r3, r2, r3
    d9dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d9de:	69e1      	ldr	r1, [r4, #28]
    d9e0:	4648      	mov	r0, r9
    d9e2:	4652      	mov	r2, sl
    d9e4:	47b8      	blx	r7
    d9e6:	2800      	cmp	r0, #0
    d9e8:	f77f af31 	ble.w	d84e <__sfvwrite_r+0xfa>
    d9ec:	4602      	mov	r2, r0
    d9ee:	e710      	b.n	d812 <__sfvwrite_r+0xbe>
    d9f0:	4662      	mov	r2, ip
    d9f2:	4659      	mov	r1, fp
    d9f4:	f8cd c000 	str.w	ip, [sp]
    d9f8:	f000 fc64 	bl	e2c4 <memmove>
    d9fc:	f8dd c000 	ldr.w	ip, [sp]
    da00:	6823      	ldr	r3, [r4, #0]
    da02:	4463      	add	r3, ip
    da04:	6023      	str	r3, [r4, #0]
    da06:	4648      	mov	r0, r9
    da08:	4621      	mov	r1, r4
    da0a:	f8cd c000 	str.w	ip, [sp]
    da0e:	f003 fd45 	bl	1149c <_fflush_r>
    da12:	f8dd c000 	ldr.w	ip, [sp]
    da16:	2800      	cmp	r0, #0
    da18:	f47f af19 	bne.w	d84e <__sfvwrite_r+0xfa>
    da1c:	4667      	mov	r7, ip
    da1e:	e743      	b.n	d8a8 <__sfvwrite_r+0x154>
    da20:	4648      	mov	r0, r9
    da22:	f8cd c000 	str.w	ip, [sp]
    da26:	f000 fd2f 	bl	e488 <_realloc_r>
    da2a:	f8dd c000 	ldr.w	ip, [sp]
    da2e:	4683      	mov	fp, r0
    da30:	2800      	cmp	r0, #0
    da32:	d1be      	bne.n	d9b2 <__sfvwrite_r+0x25e>
    da34:	4648      	mov	r0, r9
    da36:	6921      	ldr	r1, [r4, #16]
    da38:	f003 fe30 	bl	1169c <_free_r>
    da3c:	89a3      	ldrh	r3, [r4, #12]
    da3e:	220c      	movs	r2, #12
    da40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    da44:	b29b      	uxth	r3, r3
    da46:	f8c9 2000 	str.w	r2, [r9]
    da4a:	e701      	b.n	d850 <__sfvwrite_r+0xfc>
    da4c:	2701      	movs	r7, #1
    da4e:	f108 0a01 	add.w	sl, r8, #1
    da52:	9701      	str	r7, [sp, #4]
    da54:	e70e      	b.n	d874 <__sfvwrite_r+0x120>
    da56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da5a:	e6aa      	b.n	d7b2 <__sfvwrite_r+0x5e>
    da5c:	230c      	movs	r3, #12
    da5e:	f8c9 3000 	str.w	r3, [r9]
    da62:	89a3      	ldrh	r3, [r4, #12]
    da64:	e6f4      	b.n	d850 <__sfvwrite_r+0xfc>
    da66:	bf00      	nop
    da68:	7ffffc00 	.word	0x7ffffc00

0000da6c <_fwrite_r>:
    da6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da70:	b086      	sub	sp, #24
    da72:	fb02 f503 	mul.w	r5, r2, r3
    da76:	4617      	mov	r7, r2
    da78:	4698      	mov	r8, r3
    da7a:	aa01      	add	r2, sp, #4
    da7c:	2301      	movs	r3, #1
    da7e:	9101      	str	r1, [sp, #4]
    da80:	9502      	str	r5, [sp, #8]
    da82:	9505      	str	r5, [sp, #20]
    da84:	9203      	str	r2, [sp, #12]
    da86:	9304      	str	r3, [sp, #16]
    da88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    da8a:	4606      	mov	r6, r0
    da8c:	b108      	cbz	r0, da92 <_fwrite_r+0x26>
    da8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    da90:	b1d3      	cbz	r3, dac8 <_fwrite_r+0x5c>
    da92:	89a2      	ldrh	r2, [r4, #12]
    da94:	0493      	lsls	r3, r2, #18
    da96:	d406      	bmi.n	daa6 <_fwrite_r+0x3a>
    da98:	6e63      	ldr	r3, [r4, #100]	; 0x64
    da9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    da9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    daa2:	81a2      	strh	r2, [r4, #12]
    daa4:	6663      	str	r3, [r4, #100]	; 0x64
    daa6:	4630      	mov	r0, r6
    daa8:	4621      	mov	r1, r4
    daaa:	aa03      	add	r2, sp, #12
    daac:	f7ff fe52 	bl	d754 <__sfvwrite_r>
    dab0:	b130      	cbz	r0, dac0 <_fwrite_r+0x54>
    dab2:	9805      	ldr	r0, [sp, #20]
    dab4:	1a28      	subs	r0, r5, r0
    dab6:	fbb0 f0f7 	udiv	r0, r0, r7
    daba:	b006      	add	sp, #24
    dabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dac0:	4640      	mov	r0, r8
    dac2:	b006      	add	sp, #24
    dac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dac8:	f003 fd04 	bl	114d4 <__sinit>
    dacc:	e7e1      	b.n	da92 <_fwrite_r+0x26>
    dace:	bf00      	nop

0000dad0 <fwrite>:
    dad0:	b530      	push	{r4, r5, lr}
    dad2:	b083      	sub	sp, #12
    dad4:	4c05      	ldr	r4, [pc, #20]	; (daec <fwrite+0x1c>)
    dad6:	9300      	str	r3, [sp, #0]
    dad8:	6824      	ldr	r4, [r4, #0]
    dada:	460d      	mov	r5, r1
    dadc:	4613      	mov	r3, r2
    dade:	4601      	mov	r1, r0
    dae0:	462a      	mov	r2, r5
    dae2:	4620      	mov	r0, r4
    dae4:	f7ff ffc2 	bl	da6c <_fwrite_r>
    dae8:	b003      	add	sp, #12
    daea:	bd30      	pop	{r4, r5, pc}
    daec:	1fff88f0 	.word	0x1fff88f0

0000daf0 <__libc_init_array>:
    daf0:	b570      	push	{r4, r5, r6, lr}
    daf2:	4e0f      	ldr	r6, [pc, #60]	; (db30 <__libc_init_array+0x40>)
    daf4:	4d0f      	ldr	r5, [pc, #60]	; (db34 <__libc_init_array+0x44>)
    daf6:	1b76      	subs	r6, r6, r5
    daf8:	10b6      	asrs	r6, r6, #2
    dafa:	d007      	beq.n	db0c <__libc_init_array+0x1c>
    dafc:	3d04      	subs	r5, #4
    dafe:	2400      	movs	r4, #0
    db00:	3401      	adds	r4, #1
    db02:	f855 3f04 	ldr.w	r3, [r5, #4]!
    db06:	4798      	blx	r3
    db08:	42a6      	cmp	r6, r4
    db0a:	d1f9      	bne.n	db00 <__libc_init_array+0x10>
    db0c:	4e0a      	ldr	r6, [pc, #40]	; (db38 <__libc_init_array+0x48>)
    db0e:	4d0b      	ldr	r5, [pc, #44]	; (db3c <__libc_init_array+0x4c>)
    db10:	1b76      	subs	r6, r6, r5
    db12:	f006 fbe3 	bl	142dc <_init>
    db16:	10b6      	asrs	r6, r6, #2
    db18:	d008      	beq.n	db2c <__libc_init_array+0x3c>
    db1a:	3d04      	subs	r5, #4
    db1c:	2400      	movs	r4, #0
    db1e:	3401      	adds	r4, #1
    db20:	f855 3f04 	ldr.w	r3, [r5, #4]!
    db24:	4798      	blx	r3
    db26:	42a6      	cmp	r6, r4
    db28:	d1f9      	bne.n	db1e <__libc_init_array+0x2e>
    db2a:	bd70      	pop	{r4, r5, r6, pc}
    db2c:	bd70      	pop	{r4, r5, r6, pc}
    db2e:	bf00      	nop
    db30:	000142e8 	.word	0x000142e8
    db34:	000142e8 	.word	0x000142e8
    db38:	00014310 	.word	0x00014310
    db3c:	000142e8 	.word	0x000142e8

0000db40 <malloc>:
    db40:	4b02      	ldr	r3, [pc, #8]	; (db4c <malloc+0xc>)
    db42:	4601      	mov	r1, r0
    db44:	6818      	ldr	r0, [r3, #0]
    db46:	f000 b80b 	b.w	db60 <_malloc_r>
    db4a:	bf00      	nop
    db4c:	1fff88f0 	.word	0x1fff88f0

0000db50 <free>:
    db50:	4b02      	ldr	r3, [pc, #8]	; (db5c <free+0xc>)
    db52:	4601      	mov	r1, r0
    db54:	6818      	ldr	r0, [r3, #0]
    db56:	f003 bda1 	b.w	1169c <_free_r>
    db5a:	bf00      	nop
    db5c:	1fff88f0 	.word	0x1fff88f0

0000db60 <_malloc_r>:
    db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db64:	f101 050b 	add.w	r5, r1, #11
    db68:	2d16      	cmp	r5, #22
    db6a:	b083      	sub	sp, #12
    db6c:	4606      	mov	r6, r0
    db6e:	d927      	bls.n	dbc0 <_malloc_r+0x60>
    db70:	f035 0507 	bics.w	r5, r5, #7
    db74:	d427      	bmi.n	dbc6 <_malloc_r+0x66>
    db76:	42a9      	cmp	r1, r5
    db78:	d825      	bhi.n	dbc6 <_malloc_r+0x66>
    db7a:	4630      	mov	r0, r6
    db7c:	f000 fc4c 	bl	e418 <__malloc_lock>
    db80:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    db84:	d226      	bcs.n	dbd4 <_malloc_r+0x74>
    db86:	4fc1      	ldr	r7, [pc, #772]	; (de8c <_malloc_r+0x32c>)
    db88:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    db8c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
    db90:	68dc      	ldr	r4, [r3, #12]
    db92:	429c      	cmp	r4, r3
    db94:	f000 81d2 	beq.w	df3c <_malloc_r+0x3dc>
    db98:	6863      	ldr	r3, [r4, #4]
    db9a:	68e2      	ldr	r2, [r4, #12]
    db9c:	68a1      	ldr	r1, [r4, #8]
    db9e:	f023 0303 	bic.w	r3, r3, #3
    dba2:	4423      	add	r3, r4
    dba4:	4630      	mov	r0, r6
    dba6:	685d      	ldr	r5, [r3, #4]
    dba8:	60ca      	str	r2, [r1, #12]
    dbaa:	f045 0501 	orr.w	r5, r5, #1
    dbae:	6091      	str	r1, [r2, #8]
    dbb0:	605d      	str	r5, [r3, #4]
    dbb2:	f000 fc33 	bl	e41c <__malloc_unlock>
    dbb6:	3408      	adds	r4, #8
    dbb8:	4620      	mov	r0, r4
    dbba:	b003      	add	sp, #12
    dbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbc0:	2510      	movs	r5, #16
    dbc2:	42a9      	cmp	r1, r5
    dbc4:	d9d9      	bls.n	db7a <_malloc_r+0x1a>
    dbc6:	2400      	movs	r4, #0
    dbc8:	230c      	movs	r3, #12
    dbca:	4620      	mov	r0, r4
    dbcc:	6033      	str	r3, [r6, #0]
    dbce:	b003      	add	sp, #12
    dbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbd4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    dbd8:	f000 808a 	beq.w	dcf0 <_malloc_r+0x190>
    dbdc:	f1bc 0f04 	cmp.w	ip, #4
    dbe0:	f200 8160 	bhi.w	dea4 <_malloc_r+0x344>
    dbe4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    dbe8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    dbec:	ea4f 014c 	mov.w	r1, ip, lsl #1
    dbf0:	4fa6      	ldr	r7, [pc, #664]	; (de8c <_malloc_r+0x32c>)
    dbf2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    dbf6:	68cc      	ldr	r4, [r1, #12]
    dbf8:	42a1      	cmp	r1, r4
    dbfa:	d105      	bne.n	dc08 <_malloc_r+0xa8>
    dbfc:	e00c      	b.n	dc18 <_malloc_r+0xb8>
    dbfe:	2b00      	cmp	r3, #0
    dc00:	da7a      	bge.n	dcf8 <_malloc_r+0x198>
    dc02:	68e4      	ldr	r4, [r4, #12]
    dc04:	42a1      	cmp	r1, r4
    dc06:	d007      	beq.n	dc18 <_malloc_r+0xb8>
    dc08:	6862      	ldr	r2, [r4, #4]
    dc0a:	f022 0203 	bic.w	r2, r2, #3
    dc0e:	1b53      	subs	r3, r2, r5
    dc10:	2b0f      	cmp	r3, #15
    dc12:	ddf4      	ble.n	dbfe <_malloc_r+0x9e>
    dc14:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    dc18:	f10c 0c01 	add.w	ip, ip, #1
    dc1c:	4b9b      	ldr	r3, [pc, #620]	; (de8c <_malloc_r+0x32c>)
    dc1e:	693c      	ldr	r4, [r7, #16]
    dc20:	f103 0e08 	add.w	lr, r3, #8
    dc24:	4574      	cmp	r4, lr
    dc26:	f000 817e 	beq.w	df26 <_malloc_r+0x3c6>
    dc2a:	6861      	ldr	r1, [r4, #4]
    dc2c:	f021 0103 	bic.w	r1, r1, #3
    dc30:	1b4a      	subs	r2, r1, r5
    dc32:	2a0f      	cmp	r2, #15
    dc34:	f300 8164 	bgt.w	df00 <_malloc_r+0x3a0>
    dc38:	2a00      	cmp	r2, #0
    dc3a:	f8c3 e014 	str.w	lr, [r3, #20]
    dc3e:	f8c3 e010 	str.w	lr, [r3, #16]
    dc42:	da6a      	bge.n	dd1a <_malloc_r+0x1ba>
    dc44:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    dc48:	f080 813a 	bcs.w	dec0 <_malloc_r+0x360>
    dc4c:	08c9      	lsrs	r1, r1, #3
    dc4e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
    dc52:	ea4f 08a1 	mov.w	r8, r1, asr #2
    dc56:	685a      	ldr	r2, [r3, #4]
    dc58:	6881      	ldr	r1, [r0, #8]
    dc5a:	60a1      	str	r1, [r4, #8]
    dc5c:	f04f 0901 	mov.w	r9, #1
    dc60:	fa09 f808 	lsl.w	r8, r9, r8
    dc64:	ea48 0202 	orr.w	r2, r8, r2
    dc68:	60e0      	str	r0, [r4, #12]
    dc6a:	605a      	str	r2, [r3, #4]
    dc6c:	6084      	str	r4, [r0, #8]
    dc6e:	60cc      	str	r4, [r1, #12]
    dc70:	ea4f 03ac 	mov.w	r3, ip, asr #2
    dc74:	2001      	movs	r0, #1
    dc76:	4098      	lsls	r0, r3
    dc78:	4290      	cmp	r0, r2
    dc7a:	d85b      	bhi.n	dd34 <_malloc_r+0x1d4>
    dc7c:	4202      	tst	r2, r0
    dc7e:	d106      	bne.n	dc8e <_malloc_r+0x12e>
    dc80:	f02c 0c03 	bic.w	ip, ip, #3
    dc84:	0040      	lsls	r0, r0, #1
    dc86:	4202      	tst	r2, r0
    dc88:	f10c 0c04 	add.w	ip, ip, #4
    dc8c:	d0fa      	beq.n	dc84 <_malloc_r+0x124>
    dc8e:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
    dc92:	4644      	mov	r4, r8
    dc94:	46e1      	mov	r9, ip
    dc96:	68e3      	ldr	r3, [r4, #12]
    dc98:	429c      	cmp	r4, r3
    dc9a:	d107      	bne.n	dcac <_malloc_r+0x14c>
    dc9c:	e145      	b.n	df2a <_malloc_r+0x3ca>
    dc9e:	2a00      	cmp	r2, #0
    dca0:	f280 8156 	bge.w	df50 <_malloc_r+0x3f0>
    dca4:	68db      	ldr	r3, [r3, #12]
    dca6:	429c      	cmp	r4, r3
    dca8:	f000 813f 	beq.w	df2a <_malloc_r+0x3ca>
    dcac:	6859      	ldr	r1, [r3, #4]
    dcae:	f021 0103 	bic.w	r1, r1, #3
    dcb2:	1b4a      	subs	r2, r1, r5
    dcb4:	2a0f      	cmp	r2, #15
    dcb6:	ddf2      	ble.n	dc9e <_malloc_r+0x13e>
    dcb8:	461c      	mov	r4, r3
    dcba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    dcbe:	f854 8f08 	ldr.w	r8, [r4, #8]!
    dcc2:	1959      	adds	r1, r3, r5
    dcc4:	f045 0901 	orr.w	r9, r5, #1
    dcc8:	f042 0501 	orr.w	r5, r2, #1
    dccc:	f8c3 9004 	str.w	r9, [r3, #4]
    dcd0:	4630      	mov	r0, r6
    dcd2:	f8c8 c00c 	str.w	ip, [r8, #12]
    dcd6:	f8cc 8008 	str.w	r8, [ip, #8]
    dcda:	6179      	str	r1, [r7, #20]
    dcdc:	6139      	str	r1, [r7, #16]
    dcde:	f8c1 e00c 	str.w	lr, [r1, #12]
    dce2:	f8c1 e008 	str.w	lr, [r1, #8]
    dce6:	604d      	str	r5, [r1, #4]
    dce8:	508a      	str	r2, [r1, r2]
    dcea:	f000 fb97 	bl	e41c <__malloc_unlock>
    dcee:	e763      	b.n	dbb8 <_malloc_r+0x58>
    dcf0:	217e      	movs	r1, #126	; 0x7e
    dcf2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    dcf6:	e77b      	b.n	dbf0 <_malloc_r+0x90>
    dcf8:	4422      	add	r2, r4
    dcfa:	68e3      	ldr	r3, [r4, #12]
    dcfc:	6850      	ldr	r0, [r2, #4]
    dcfe:	68a1      	ldr	r1, [r4, #8]
    dd00:	f040 0501 	orr.w	r5, r0, #1
    dd04:	60cb      	str	r3, [r1, #12]
    dd06:	4630      	mov	r0, r6
    dd08:	6099      	str	r1, [r3, #8]
    dd0a:	6055      	str	r5, [r2, #4]
    dd0c:	f000 fb86 	bl	e41c <__malloc_unlock>
    dd10:	3408      	adds	r4, #8
    dd12:	4620      	mov	r0, r4
    dd14:	b003      	add	sp, #12
    dd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd1a:	4421      	add	r1, r4
    dd1c:	4630      	mov	r0, r6
    dd1e:	684b      	ldr	r3, [r1, #4]
    dd20:	f043 0301 	orr.w	r3, r3, #1
    dd24:	604b      	str	r3, [r1, #4]
    dd26:	f000 fb79 	bl	e41c <__malloc_unlock>
    dd2a:	3408      	adds	r4, #8
    dd2c:	4620      	mov	r0, r4
    dd2e:	b003      	add	sp, #12
    dd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd34:	68bc      	ldr	r4, [r7, #8]
    dd36:	6863      	ldr	r3, [r4, #4]
    dd38:	f023 0903 	bic.w	r9, r3, #3
    dd3c:	45a9      	cmp	r9, r5
    dd3e:	d304      	bcc.n	dd4a <_malloc_r+0x1ea>
    dd40:	ebc5 0309 	rsb	r3, r5, r9
    dd44:	2b0f      	cmp	r3, #15
    dd46:	f300 8091 	bgt.w	de6c <_malloc_r+0x30c>
    dd4a:	4b51      	ldr	r3, [pc, #324]	; (de90 <_malloc_r+0x330>)
    dd4c:	4a51      	ldr	r2, [pc, #324]	; (de94 <_malloc_r+0x334>)
    dd4e:	6819      	ldr	r1, [r3, #0]
    dd50:	6813      	ldr	r3, [r2, #0]
    dd52:	3301      	adds	r3, #1
    dd54:	eb05 0a01 	add.w	sl, r5, r1
    dd58:	eb04 0b09 	add.w	fp, r4, r9
    dd5c:	f000 8161 	beq.w	e022 <_malloc_r+0x4c2>
    dd60:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    dd64:	f10a 0a0f 	add.w	sl, sl, #15
    dd68:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    dd6c:	f02a 0a0f 	bic.w	sl, sl, #15
    dd70:	4630      	mov	r0, r6
    dd72:	4651      	mov	r1, sl
    dd74:	9201      	str	r2, [sp, #4]
    dd76:	f000 fd6d 	bl	e854 <_sbrk_r>
    dd7a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    dd7e:	4680      	mov	r8, r0
    dd80:	9a01      	ldr	r2, [sp, #4]
    dd82:	f000 8100 	beq.w	df86 <_malloc_r+0x426>
    dd86:	4583      	cmp	fp, r0
    dd88:	f200 80fa 	bhi.w	df80 <_malloc_r+0x420>
    dd8c:	f8df c110 	ldr.w	ip, [pc, #272]	; dea0 <_malloc_r+0x340>
    dd90:	f8dc 3000 	ldr.w	r3, [ip]
    dd94:	45c3      	cmp	fp, r8
    dd96:	4453      	add	r3, sl
    dd98:	f8cc 3000 	str.w	r3, [ip]
    dd9c:	f000 814a 	beq.w	e034 <_malloc_r+0x4d4>
    dda0:	6812      	ldr	r2, [r2, #0]
    dda2:	493c      	ldr	r1, [pc, #240]	; (de94 <_malloc_r+0x334>)
    dda4:	3201      	adds	r2, #1
    dda6:	bf1b      	ittet	ne
    dda8:	ebcb 0b08 	rsbne	fp, fp, r8
    ddac:	445b      	addne	r3, fp
    ddae:	f8c1 8000 	streq.w	r8, [r1]
    ddb2:	f8cc 3000 	strne.w	r3, [ip]
    ddb6:	f018 0307 	ands.w	r3, r8, #7
    ddba:	f000 8113 	beq.w	dfe4 <_malloc_r+0x484>
    ddbe:	f1c3 0208 	rsb	r2, r3, #8
    ddc2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    ddc6:	4490      	add	r8, r2
    ddc8:	3308      	adds	r3, #8
    ddca:	44c2      	add	sl, r8
    ddcc:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    ddd0:	ebca 0a03 	rsb	sl, sl, r3
    ddd4:	4651      	mov	r1, sl
    ddd6:	4630      	mov	r0, r6
    ddd8:	f8cd c004 	str.w	ip, [sp, #4]
    dddc:	f000 fd3a 	bl	e854 <_sbrk_r>
    dde0:	1c43      	adds	r3, r0, #1
    dde2:	f8dd c004 	ldr.w	ip, [sp, #4]
    dde6:	f000 8135 	beq.w	e054 <_malloc_r+0x4f4>
    ddea:	ebc8 0200 	rsb	r2, r8, r0
    ddee:	4452      	add	r2, sl
    ddf0:	f042 0201 	orr.w	r2, r2, #1
    ddf4:	f8dc 3000 	ldr.w	r3, [ip]
    ddf8:	f8c7 8008 	str.w	r8, [r7, #8]
    ddfc:	4453      	add	r3, sl
    ddfe:	42bc      	cmp	r4, r7
    de00:	f8c8 2004 	str.w	r2, [r8, #4]
    de04:	f8cc 3000 	str.w	r3, [ip]
    de08:	f8df a094 	ldr.w	sl, [pc, #148]	; dea0 <_malloc_r+0x340>
    de0c:	d015      	beq.n	de3a <_malloc_r+0x2da>
    de0e:	f1b9 0f0f 	cmp.w	r9, #15
    de12:	f240 80ea 	bls.w	dfea <_malloc_r+0x48a>
    de16:	6861      	ldr	r1, [r4, #4]
    de18:	f1a9 020c 	sub.w	r2, r9, #12
    de1c:	f022 0207 	bic.w	r2, r2, #7
    de20:	f001 0e01 	and.w	lr, r1, #1
    de24:	18a1      	adds	r1, r4, r2
    de26:	2005      	movs	r0, #5
    de28:	ea42 0e0e 	orr.w	lr, r2, lr
    de2c:	2a0f      	cmp	r2, #15
    de2e:	f8c4 e004 	str.w	lr, [r4, #4]
    de32:	6048      	str	r0, [r1, #4]
    de34:	6088      	str	r0, [r1, #8]
    de36:	f200 8111 	bhi.w	e05c <_malloc_r+0x4fc>
    de3a:	4a17      	ldr	r2, [pc, #92]	; (de98 <_malloc_r+0x338>)
    de3c:	68bc      	ldr	r4, [r7, #8]
    de3e:	6811      	ldr	r1, [r2, #0]
    de40:	428b      	cmp	r3, r1
    de42:	bf88      	it	hi
    de44:	6013      	strhi	r3, [r2, #0]
    de46:	4a15      	ldr	r2, [pc, #84]	; (de9c <_malloc_r+0x33c>)
    de48:	6811      	ldr	r1, [r2, #0]
    de4a:	428b      	cmp	r3, r1
    de4c:	bf88      	it	hi
    de4e:	6013      	strhi	r3, [r2, #0]
    de50:	6862      	ldr	r2, [r4, #4]
    de52:	f022 0203 	bic.w	r2, r2, #3
    de56:	4295      	cmp	r5, r2
    de58:	ebc5 0302 	rsb	r3, r5, r2
    de5c:	d801      	bhi.n	de62 <_malloc_r+0x302>
    de5e:	2b0f      	cmp	r3, #15
    de60:	dc04      	bgt.n	de6c <_malloc_r+0x30c>
    de62:	4630      	mov	r0, r6
    de64:	f000 fada 	bl	e41c <__malloc_unlock>
    de68:	2400      	movs	r4, #0
    de6a:	e6a5      	b.n	dbb8 <_malloc_r+0x58>
    de6c:	1962      	adds	r2, r4, r5
    de6e:	f043 0301 	orr.w	r3, r3, #1
    de72:	f045 0501 	orr.w	r5, r5, #1
    de76:	6065      	str	r5, [r4, #4]
    de78:	4630      	mov	r0, r6
    de7a:	60ba      	str	r2, [r7, #8]
    de7c:	6053      	str	r3, [r2, #4]
    de7e:	f000 facd 	bl	e41c <__malloc_unlock>
    de82:	3408      	adds	r4, #8
    de84:	4620      	mov	r0, r4
    de86:	b003      	add	sp, #12
    de88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de8c:	1fff88f4 	.word	0x1fff88f4
    de90:	1fff9c54 	.word	0x1fff9c54
    de94:	1fff8d00 	.word	0x1fff8d00
    de98:	1fff9c50 	.word	0x1fff9c50
    de9c:	1fff9c4c 	.word	0x1fff9c4c
    dea0:	1fff9c58 	.word	0x1fff9c58
    dea4:	f1bc 0f14 	cmp.w	ip, #20
    dea8:	d961      	bls.n	df6e <_malloc_r+0x40e>
    deaa:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    deae:	f200 808f 	bhi.w	dfd0 <_malloc_r+0x470>
    deb2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    deb6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    deba:	ea4f 014c 	mov.w	r1, ip, lsl #1
    debe:	e697      	b.n	dbf0 <_malloc_r+0x90>
    dec0:	0a4b      	lsrs	r3, r1, #9
    dec2:	2b04      	cmp	r3, #4
    dec4:	d958      	bls.n	df78 <_malloc_r+0x418>
    dec6:	2b14      	cmp	r3, #20
    dec8:	f200 80ae 	bhi.w	e028 <_malloc_r+0x4c8>
    decc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    ded0:	0050      	lsls	r0, r2, #1
    ded2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    ded6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; e094 <_malloc_r+0x534>
    deda:	6883      	ldr	r3, [r0, #8]
    dedc:	4283      	cmp	r3, r0
    dede:	f000 808a 	beq.w	dff6 <_malloc_r+0x496>
    dee2:	685a      	ldr	r2, [r3, #4]
    dee4:	f022 0203 	bic.w	r2, r2, #3
    dee8:	4291      	cmp	r1, r2
    deea:	d202      	bcs.n	def2 <_malloc_r+0x392>
    deec:	689b      	ldr	r3, [r3, #8]
    deee:	4298      	cmp	r0, r3
    def0:	d1f7      	bne.n	dee2 <_malloc_r+0x382>
    def2:	68d9      	ldr	r1, [r3, #12]
    def4:	687a      	ldr	r2, [r7, #4]
    def6:	60e1      	str	r1, [r4, #12]
    def8:	60a3      	str	r3, [r4, #8]
    defa:	608c      	str	r4, [r1, #8]
    defc:	60dc      	str	r4, [r3, #12]
    defe:	e6b7      	b.n	dc70 <_malloc_r+0x110>
    df00:	1961      	adds	r1, r4, r5
    df02:	f042 0701 	orr.w	r7, r2, #1
    df06:	f045 0501 	orr.w	r5, r5, #1
    df0a:	6065      	str	r5, [r4, #4]
    df0c:	4630      	mov	r0, r6
    df0e:	6159      	str	r1, [r3, #20]
    df10:	6119      	str	r1, [r3, #16]
    df12:	f8c1 e00c 	str.w	lr, [r1, #12]
    df16:	f8c1 e008 	str.w	lr, [r1, #8]
    df1a:	604f      	str	r7, [r1, #4]
    df1c:	508a      	str	r2, [r1, r2]
    df1e:	3408      	adds	r4, #8
    df20:	f000 fa7c 	bl	e41c <__malloc_unlock>
    df24:	e648      	b.n	dbb8 <_malloc_r+0x58>
    df26:	685a      	ldr	r2, [r3, #4]
    df28:	e6a2      	b.n	dc70 <_malloc_r+0x110>
    df2a:	f109 0901 	add.w	r9, r9, #1
    df2e:	f019 0f03 	tst.w	r9, #3
    df32:	f104 0408 	add.w	r4, r4, #8
    df36:	f47f aeae 	bne.w	dc96 <_malloc_r+0x136>
    df3a:	e02d      	b.n	df98 <_malloc_r+0x438>
    df3c:	f104 0308 	add.w	r3, r4, #8
    df40:	6964      	ldr	r4, [r4, #20]
    df42:	42a3      	cmp	r3, r4
    df44:	bf08      	it	eq
    df46:	f10c 0c02 	addeq.w	ip, ip, #2
    df4a:	f43f ae67 	beq.w	dc1c <_malloc_r+0xbc>
    df4e:	e623      	b.n	db98 <_malloc_r+0x38>
    df50:	4419      	add	r1, r3
    df52:	461c      	mov	r4, r3
    df54:	6848      	ldr	r0, [r1, #4]
    df56:	68db      	ldr	r3, [r3, #12]
    df58:	f854 2f08 	ldr.w	r2, [r4, #8]!
    df5c:	f040 0501 	orr.w	r5, r0, #1
    df60:	604d      	str	r5, [r1, #4]
    df62:	4630      	mov	r0, r6
    df64:	60d3      	str	r3, [r2, #12]
    df66:	609a      	str	r2, [r3, #8]
    df68:	f000 fa58 	bl	e41c <__malloc_unlock>
    df6c:	e624      	b.n	dbb8 <_malloc_r+0x58>
    df6e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
    df72:	ea4f 014c 	mov.w	r1, ip, lsl #1
    df76:	e63b      	b.n	dbf0 <_malloc_r+0x90>
    df78:	098a      	lsrs	r2, r1, #6
    df7a:	3238      	adds	r2, #56	; 0x38
    df7c:	0050      	lsls	r0, r2, #1
    df7e:	e7a8      	b.n	ded2 <_malloc_r+0x372>
    df80:	42bc      	cmp	r4, r7
    df82:	f43f af03 	beq.w	dd8c <_malloc_r+0x22c>
    df86:	68bc      	ldr	r4, [r7, #8]
    df88:	6862      	ldr	r2, [r4, #4]
    df8a:	f022 0203 	bic.w	r2, r2, #3
    df8e:	e762      	b.n	de56 <_malloc_r+0x2f6>
    df90:	f8d8 8000 	ldr.w	r8, [r8]
    df94:	4598      	cmp	r8, r3
    df96:	d17b      	bne.n	e090 <_malloc_r+0x530>
    df98:	f01c 0f03 	tst.w	ip, #3
    df9c:	f1a8 0308 	sub.w	r3, r8, #8
    dfa0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    dfa4:	d1f4      	bne.n	df90 <_malloc_r+0x430>
    dfa6:	687b      	ldr	r3, [r7, #4]
    dfa8:	ea23 0300 	bic.w	r3, r3, r0
    dfac:	607b      	str	r3, [r7, #4]
    dfae:	0040      	lsls	r0, r0, #1
    dfb0:	4298      	cmp	r0, r3
    dfb2:	f63f aebf 	bhi.w	dd34 <_malloc_r+0x1d4>
    dfb6:	2800      	cmp	r0, #0
    dfb8:	f43f aebc 	beq.w	dd34 <_malloc_r+0x1d4>
    dfbc:	4203      	tst	r3, r0
    dfbe:	46cc      	mov	ip, r9
    dfc0:	f47f ae65 	bne.w	dc8e <_malloc_r+0x12e>
    dfc4:	0040      	lsls	r0, r0, #1
    dfc6:	4203      	tst	r3, r0
    dfc8:	f10c 0c04 	add.w	ip, ip, #4
    dfcc:	d0fa      	beq.n	dfc4 <_malloc_r+0x464>
    dfce:	e65e      	b.n	dc8e <_malloc_r+0x12e>
    dfd0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    dfd4:	d81a      	bhi.n	e00c <_malloc_r+0x4ac>
    dfd6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    dfda:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    dfde:	ea4f 014c 	mov.w	r1, ip, lsl #1
    dfe2:	e605      	b.n	dbf0 <_malloc_r+0x90>
    dfe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    dfe8:	e6ef      	b.n	ddca <_malloc_r+0x26a>
    dfea:	2301      	movs	r3, #1
    dfec:	f8c8 3004 	str.w	r3, [r8, #4]
    dff0:	4644      	mov	r4, r8
    dff2:	2200      	movs	r2, #0
    dff4:	e72f      	b.n	de56 <_malloc_r+0x2f6>
    dff6:	1091      	asrs	r1, r2, #2
    dff8:	2001      	movs	r0, #1
    dffa:	f8d8 2004 	ldr.w	r2, [r8, #4]
    dffe:	fa00 f101 	lsl.w	r1, r0, r1
    e002:	430a      	orrs	r2, r1
    e004:	f8c8 2004 	str.w	r2, [r8, #4]
    e008:	4619      	mov	r1, r3
    e00a:	e774      	b.n	def6 <_malloc_r+0x396>
    e00c:	f240 5354 	movw	r3, #1364	; 0x554
    e010:	459c      	cmp	ip, r3
    e012:	d81b      	bhi.n	e04c <_malloc_r+0x4ec>
    e014:	ea4f 4c95 	mov.w	ip, r5, lsr #18
    e018:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
    e01c:	ea4f 014c 	mov.w	r1, ip, lsl #1
    e020:	e5e6      	b.n	dbf0 <_malloc_r+0x90>
    e022:	f10a 0a10 	add.w	sl, sl, #16
    e026:	e6a3      	b.n	dd70 <_malloc_r+0x210>
    e028:	2b54      	cmp	r3, #84	; 0x54
    e02a:	d81f      	bhi.n	e06c <_malloc_r+0x50c>
    e02c:	0b0a      	lsrs	r2, r1, #12
    e02e:	326e      	adds	r2, #110	; 0x6e
    e030:	0050      	lsls	r0, r2, #1
    e032:	e74e      	b.n	ded2 <_malloc_r+0x372>
    e034:	f3cb 010b 	ubfx	r1, fp, #0, #12
    e038:	2900      	cmp	r1, #0
    e03a:	f47f aeb1 	bne.w	dda0 <_malloc_r+0x240>
    e03e:	eb0a 0109 	add.w	r1, sl, r9
    e042:	68ba      	ldr	r2, [r7, #8]
    e044:	f041 0101 	orr.w	r1, r1, #1
    e048:	6051      	str	r1, [r2, #4]
    e04a:	e6f6      	b.n	de3a <_malloc_r+0x2da>
    e04c:	21fc      	movs	r1, #252	; 0xfc
    e04e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    e052:	e5cd      	b.n	dbf0 <_malloc_r+0x90>
    e054:	2201      	movs	r2, #1
    e056:	f04f 0a00 	mov.w	sl, #0
    e05a:	e6cb      	b.n	ddf4 <_malloc_r+0x294>
    e05c:	f104 0108 	add.w	r1, r4, #8
    e060:	4630      	mov	r0, r6
    e062:	f003 fb1b 	bl	1169c <_free_r>
    e066:	f8da 3000 	ldr.w	r3, [sl]
    e06a:	e6e6      	b.n	de3a <_malloc_r+0x2da>
    e06c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    e070:	d803      	bhi.n	e07a <_malloc_r+0x51a>
    e072:	0bca      	lsrs	r2, r1, #15
    e074:	3277      	adds	r2, #119	; 0x77
    e076:	0050      	lsls	r0, r2, #1
    e078:	e72b      	b.n	ded2 <_malloc_r+0x372>
    e07a:	f240 5254 	movw	r2, #1364	; 0x554
    e07e:	4293      	cmp	r3, r2
    e080:	d803      	bhi.n	e08a <_malloc_r+0x52a>
    e082:	0c8a      	lsrs	r2, r1, #18
    e084:	327c      	adds	r2, #124	; 0x7c
    e086:	0050      	lsls	r0, r2, #1
    e088:	e723      	b.n	ded2 <_malloc_r+0x372>
    e08a:	20fc      	movs	r0, #252	; 0xfc
    e08c:	227e      	movs	r2, #126	; 0x7e
    e08e:	e720      	b.n	ded2 <_malloc_r+0x372>
    e090:	687b      	ldr	r3, [r7, #4]
    e092:	e78c      	b.n	dfae <_malloc_r+0x44e>
    e094:	1fff88f4 	.word	0x1fff88f4

0000e098 <memchr>:
    e098:	0783      	lsls	r3, r0, #30
    e09a:	b470      	push	{r4, r5, r6}
    e09c:	b2c9      	uxtb	r1, r1
    e09e:	d03f      	beq.n	e120 <memchr+0x88>
    e0a0:	1e54      	subs	r4, r2, #1
    e0a2:	b32a      	cbz	r2, e0f0 <memchr+0x58>
    e0a4:	7803      	ldrb	r3, [r0, #0]
    e0a6:	428b      	cmp	r3, r1
    e0a8:	d023      	beq.n	e0f2 <memchr+0x5a>
    e0aa:	1c43      	adds	r3, r0, #1
    e0ac:	e004      	b.n	e0b8 <memchr+0x20>
    e0ae:	b1fc      	cbz	r4, e0f0 <memchr+0x58>
    e0b0:	7804      	ldrb	r4, [r0, #0]
    e0b2:	428c      	cmp	r4, r1
    e0b4:	d01d      	beq.n	e0f2 <memchr+0x5a>
    e0b6:	4614      	mov	r4, r2
    e0b8:	f013 0f03 	tst.w	r3, #3
    e0bc:	4618      	mov	r0, r3
    e0be:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
    e0c2:	f103 0301 	add.w	r3, r3, #1
    e0c6:	d1f2      	bne.n	e0ae <memchr+0x16>
    e0c8:	2c03      	cmp	r4, #3
    e0ca:	d814      	bhi.n	e0f6 <memchr+0x5e>
    e0cc:	1e65      	subs	r5, r4, #1
    e0ce:	b34c      	cbz	r4, e124 <memchr+0x8c>
    e0d0:	7803      	ldrb	r3, [r0, #0]
    e0d2:	428b      	cmp	r3, r1
    e0d4:	d00d      	beq.n	e0f2 <memchr+0x5a>
    e0d6:	1c42      	adds	r2, r0, #1
    e0d8:	2300      	movs	r3, #0
    e0da:	e002      	b.n	e0e2 <memchr+0x4a>
    e0dc:	7804      	ldrb	r4, [r0, #0]
    e0de:	428c      	cmp	r4, r1
    e0e0:	d007      	beq.n	e0f2 <memchr+0x5a>
    e0e2:	42ab      	cmp	r3, r5
    e0e4:	4610      	mov	r0, r2
    e0e6:	f103 0301 	add.w	r3, r3, #1
    e0ea:	f102 0201 	add.w	r2, r2, #1
    e0ee:	d1f5      	bne.n	e0dc <memchr+0x44>
    e0f0:	2000      	movs	r0, #0
    e0f2:	bc70      	pop	{r4, r5, r6}
    e0f4:	4770      	bx	lr
    e0f6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
    e0fa:	4603      	mov	r3, r0
    e0fc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    e100:	4618      	mov	r0, r3
    e102:	3304      	adds	r3, #4
    e104:	6802      	ldr	r2, [r0, #0]
    e106:	4072      	eors	r2, r6
    e108:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
    e10c:	ea25 0202 	bic.w	r2, r5, r2
    e110:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    e114:	d1da      	bne.n	e0cc <memchr+0x34>
    e116:	3c04      	subs	r4, #4
    e118:	2c03      	cmp	r4, #3
    e11a:	4618      	mov	r0, r3
    e11c:	d8f0      	bhi.n	e100 <memchr+0x68>
    e11e:	e7d5      	b.n	e0cc <memchr+0x34>
    e120:	4614      	mov	r4, r2
    e122:	e7d1      	b.n	e0c8 <memchr+0x30>
    e124:	4620      	mov	r0, r4
    e126:	e7e4      	b.n	e0f2 <memchr+0x5a>

0000e128 <memcmp>:
    e128:	2a03      	cmp	r2, #3
    e12a:	b470      	push	{r4, r5, r6}
    e12c:	d928      	bls.n	e180 <memcmp+0x58>
    e12e:	ea40 0301 	orr.w	r3, r0, r1
    e132:	079b      	lsls	r3, r3, #30
    e134:	d013      	beq.n	e15e <memcmp+0x36>
    e136:	7805      	ldrb	r5, [r0, #0]
    e138:	780c      	ldrb	r4, [r1, #0]
    e13a:	42a5      	cmp	r5, r4
    e13c:	d124      	bne.n	e188 <memcmp+0x60>
    e13e:	3a01      	subs	r2, #1
    e140:	2300      	movs	r3, #0
    e142:	e005      	b.n	e150 <memcmp+0x28>
    e144:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    e148:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    e14c:	42a5      	cmp	r5, r4
    e14e:	d11b      	bne.n	e188 <memcmp+0x60>
    e150:	4293      	cmp	r3, r2
    e152:	f103 0301 	add.w	r3, r3, #1
    e156:	d1f5      	bne.n	e144 <memcmp+0x1c>
    e158:	2000      	movs	r0, #0
    e15a:	bc70      	pop	{r4, r5, r6}
    e15c:	4770      	bx	lr
    e15e:	460c      	mov	r4, r1
    e160:	4603      	mov	r3, r0
    e162:	6825      	ldr	r5, [r4, #0]
    e164:	681e      	ldr	r6, [r3, #0]
    e166:	42ae      	cmp	r6, r5
    e168:	4621      	mov	r1, r4
    e16a:	4618      	mov	r0, r3
    e16c:	f104 0404 	add.w	r4, r4, #4
    e170:	f103 0304 	add.w	r3, r3, #4
    e174:	d104      	bne.n	e180 <memcmp+0x58>
    e176:	3a04      	subs	r2, #4
    e178:	2a03      	cmp	r2, #3
    e17a:	4618      	mov	r0, r3
    e17c:	4621      	mov	r1, r4
    e17e:	d8f0      	bhi.n	e162 <memcmp+0x3a>
    e180:	2a00      	cmp	r2, #0
    e182:	d1d8      	bne.n	e136 <memcmp+0xe>
    e184:	4610      	mov	r0, r2
    e186:	e7e8      	b.n	e15a <memcmp+0x32>
    e188:	1b28      	subs	r0, r5, r4
    e18a:	bc70      	pop	{r4, r5, r6}
    e18c:	4770      	bx	lr
    e18e:	bf00      	nop

0000e190 <memcpy>:
    e190:	4684      	mov	ip, r0
    e192:	ea41 0300 	orr.w	r3, r1, r0
    e196:	f013 0303 	ands.w	r3, r3, #3
    e19a:	d16d      	bne.n	e278 <memcpy+0xe8>
    e19c:	3a40      	subs	r2, #64	; 0x40
    e19e:	d341      	bcc.n	e224 <memcpy+0x94>
    e1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    e1a4:	f840 3b04 	str.w	r3, [r0], #4
    e1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    e1ac:	f840 3b04 	str.w	r3, [r0], #4
    e1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    e1b4:	f840 3b04 	str.w	r3, [r0], #4
    e1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    e1bc:	f840 3b04 	str.w	r3, [r0], #4
    e1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    e1c4:	f840 3b04 	str.w	r3, [r0], #4
    e1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    e1cc:	f840 3b04 	str.w	r3, [r0], #4
    e1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    e1d4:	f840 3b04 	str.w	r3, [r0], #4
    e1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    e1dc:	f840 3b04 	str.w	r3, [r0], #4
    e1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    e1e4:	f840 3b04 	str.w	r3, [r0], #4
    e1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    e1ec:	f840 3b04 	str.w	r3, [r0], #4
    e1f0:	f851 3b04 	ldr.w	r3, [r1], #4
    e1f4:	f840 3b04 	str.w	r3, [r0], #4
    e1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    e1fc:	f840 3b04 	str.w	r3, [r0], #4
    e200:	f851 3b04 	ldr.w	r3, [r1], #4
    e204:	f840 3b04 	str.w	r3, [r0], #4
    e208:	f851 3b04 	ldr.w	r3, [r1], #4
    e20c:	f840 3b04 	str.w	r3, [r0], #4
    e210:	f851 3b04 	ldr.w	r3, [r1], #4
    e214:	f840 3b04 	str.w	r3, [r0], #4
    e218:	f851 3b04 	ldr.w	r3, [r1], #4
    e21c:	f840 3b04 	str.w	r3, [r0], #4
    e220:	3a40      	subs	r2, #64	; 0x40
    e222:	d2bd      	bcs.n	e1a0 <memcpy+0x10>
    e224:	3230      	adds	r2, #48	; 0x30
    e226:	d311      	bcc.n	e24c <memcpy+0xbc>
    e228:	f851 3b04 	ldr.w	r3, [r1], #4
    e22c:	f840 3b04 	str.w	r3, [r0], #4
    e230:	f851 3b04 	ldr.w	r3, [r1], #4
    e234:	f840 3b04 	str.w	r3, [r0], #4
    e238:	f851 3b04 	ldr.w	r3, [r1], #4
    e23c:	f840 3b04 	str.w	r3, [r0], #4
    e240:	f851 3b04 	ldr.w	r3, [r1], #4
    e244:	f840 3b04 	str.w	r3, [r0], #4
    e248:	3a10      	subs	r2, #16
    e24a:	d2ed      	bcs.n	e228 <memcpy+0x98>
    e24c:	320c      	adds	r2, #12
    e24e:	d305      	bcc.n	e25c <memcpy+0xcc>
    e250:	f851 3b04 	ldr.w	r3, [r1], #4
    e254:	f840 3b04 	str.w	r3, [r0], #4
    e258:	3a04      	subs	r2, #4
    e25a:	d2f9      	bcs.n	e250 <memcpy+0xc0>
    e25c:	3204      	adds	r2, #4
    e25e:	d008      	beq.n	e272 <memcpy+0xe2>
    e260:	07d2      	lsls	r2, r2, #31
    e262:	bf1c      	itt	ne
    e264:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e268:	f800 3b01 	strbne.w	r3, [r0], #1
    e26c:	d301      	bcc.n	e272 <memcpy+0xe2>
    e26e:	880b      	ldrh	r3, [r1, #0]
    e270:	8003      	strh	r3, [r0, #0]
    e272:	4660      	mov	r0, ip
    e274:	4770      	bx	lr
    e276:	bf00      	nop
    e278:	2a08      	cmp	r2, #8
    e27a:	d313      	bcc.n	e2a4 <memcpy+0x114>
    e27c:	078b      	lsls	r3, r1, #30
    e27e:	d08d      	beq.n	e19c <memcpy+0xc>
    e280:	f010 0303 	ands.w	r3, r0, #3
    e284:	d08a      	beq.n	e19c <memcpy+0xc>
    e286:	f1c3 0304 	rsb	r3, r3, #4
    e28a:	1ad2      	subs	r2, r2, r3
    e28c:	07db      	lsls	r3, r3, #31
    e28e:	bf1c      	itt	ne
    e290:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e294:	f800 3b01 	strbne.w	r3, [r0], #1
    e298:	d380      	bcc.n	e19c <memcpy+0xc>
    e29a:	f831 3b02 	ldrh.w	r3, [r1], #2
    e29e:	f820 3b02 	strh.w	r3, [r0], #2
    e2a2:	e77b      	b.n	e19c <memcpy+0xc>
    e2a4:	3a04      	subs	r2, #4
    e2a6:	d3d9      	bcc.n	e25c <memcpy+0xcc>
    e2a8:	3a01      	subs	r2, #1
    e2aa:	f811 3b01 	ldrb.w	r3, [r1], #1
    e2ae:	f800 3b01 	strb.w	r3, [r0], #1
    e2b2:	d2f9      	bcs.n	e2a8 <memcpy+0x118>
    e2b4:	780b      	ldrb	r3, [r1, #0]
    e2b6:	7003      	strb	r3, [r0, #0]
    e2b8:	784b      	ldrb	r3, [r1, #1]
    e2ba:	7043      	strb	r3, [r0, #1]
    e2bc:	788b      	ldrb	r3, [r1, #2]
    e2be:	7083      	strb	r3, [r0, #2]
    e2c0:	4660      	mov	r0, ip
    e2c2:	4770      	bx	lr

0000e2c4 <memmove>:
    e2c4:	4288      	cmp	r0, r1
    e2c6:	b4f0      	push	{r4, r5, r6, r7}
    e2c8:	d910      	bls.n	e2ec <memmove+0x28>
    e2ca:	188c      	adds	r4, r1, r2
    e2cc:	42a0      	cmp	r0, r4
    e2ce:	d20d      	bcs.n	e2ec <memmove+0x28>
    e2d0:	1885      	adds	r5, r0, r2
    e2d2:	1e53      	subs	r3, r2, #1
    e2d4:	b142      	cbz	r2, e2e8 <memmove+0x24>
    e2d6:	4621      	mov	r1, r4
    e2d8:	462a      	mov	r2, r5
    e2da:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    e2de:	f802 4d01 	strb.w	r4, [r2, #-1]!
    e2e2:	3b01      	subs	r3, #1
    e2e4:	1c5c      	adds	r4, r3, #1
    e2e6:	d1f8      	bne.n	e2da <memmove+0x16>
    e2e8:	bcf0      	pop	{r4, r5, r6, r7}
    e2ea:	4770      	bx	lr
    e2ec:	2a0f      	cmp	r2, #15
    e2ee:	d93f      	bls.n	e370 <memmove+0xac>
    e2f0:	ea40 0301 	orr.w	r3, r0, r1
    e2f4:	079b      	lsls	r3, r3, #30
    e2f6:	d13f      	bne.n	e378 <memmove+0xb4>
    e2f8:	f1a2 0710 	sub.w	r7, r2, #16
    e2fc:	093f      	lsrs	r7, r7, #4
    e2fe:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    e302:	3610      	adds	r6, #16
    e304:	460c      	mov	r4, r1
    e306:	4603      	mov	r3, r0
    e308:	6825      	ldr	r5, [r4, #0]
    e30a:	601d      	str	r5, [r3, #0]
    e30c:	6865      	ldr	r5, [r4, #4]
    e30e:	605d      	str	r5, [r3, #4]
    e310:	68a5      	ldr	r5, [r4, #8]
    e312:	609d      	str	r5, [r3, #8]
    e314:	68e5      	ldr	r5, [r4, #12]
    e316:	60dd      	str	r5, [r3, #12]
    e318:	3310      	adds	r3, #16
    e31a:	42b3      	cmp	r3, r6
    e31c:	f104 0410 	add.w	r4, r4, #16
    e320:	d1f2      	bne.n	e308 <memmove+0x44>
    e322:	1c7b      	adds	r3, r7, #1
    e324:	f002 0c0f 	and.w	ip, r2, #15
    e328:	011b      	lsls	r3, r3, #4
    e32a:	f1bc 0f03 	cmp.w	ip, #3
    e32e:	4419      	add	r1, r3
    e330:	4403      	add	r3, r0
    e332:	d923      	bls.n	e37c <memmove+0xb8>
    e334:	460e      	mov	r6, r1
    e336:	461d      	mov	r5, r3
    e338:	4664      	mov	r4, ip
    e33a:	3c04      	subs	r4, #4
    e33c:	f856 7b04 	ldr.w	r7, [r6], #4
    e340:	f845 7b04 	str.w	r7, [r5], #4
    e344:	2c03      	cmp	r4, #3
    e346:	d8f8      	bhi.n	e33a <memmove+0x76>
    e348:	f1ac 0404 	sub.w	r4, ip, #4
    e34c:	f024 0403 	bic.w	r4, r4, #3
    e350:	3404      	adds	r4, #4
    e352:	f002 0203 	and.w	r2, r2, #3
    e356:	4423      	add	r3, r4
    e358:	4421      	add	r1, r4
    e35a:	2a00      	cmp	r2, #0
    e35c:	d0c4      	beq.n	e2e8 <memmove+0x24>
    e35e:	441a      	add	r2, r3
    e360:	f811 4b01 	ldrb.w	r4, [r1], #1
    e364:	f803 4b01 	strb.w	r4, [r3], #1
    e368:	4293      	cmp	r3, r2
    e36a:	d1f9      	bne.n	e360 <memmove+0x9c>
    e36c:	bcf0      	pop	{r4, r5, r6, r7}
    e36e:	4770      	bx	lr
    e370:	4603      	mov	r3, r0
    e372:	2a00      	cmp	r2, #0
    e374:	d1f3      	bne.n	e35e <memmove+0x9a>
    e376:	e7b7      	b.n	e2e8 <memmove+0x24>
    e378:	4603      	mov	r3, r0
    e37a:	e7f0      	b.n	e35e <memmove+0x9a>
    e37c:	4662      	mov	r2, ip
    e37e:	2a00      	cmp	r2, #0
    e380:	d1ed      	bne.n	e35e <memmove+0x9a>
    e382:	e7b1      	b.n	e2e8 <memmove+0x24>

0000e384 <memset>:
    e384:	b4f0      	push	{r4, r5, r6, r7}
    e386:	0784      	lsls	r4, r0, #30
    e388:	d043      	beq.n	e412 <memset+0x8e>
    e38a:	1e54      	subs	r4, r2, #1
    e38c:	2a00      	cmp	r2, #0
    e38e:	d03e      	beq.n	e40e <memset+0x8a>
    e390:	b2cd      	uxtb	r5, r1
    e392:	4603      	mov	r3, r0
    e394:	e003      	b.n	e39e <memset+0x1a>
    e396:	1e62      	subs	r2, r4, #1
    e398:	2c00      	cmp	r4, #0
    e39a:	d038      	beq.n	e40e <memset+0x8a>
    e39c:	4614      	mov	r4, r2
    e39e:	f803 5b01 	strb.w	r5, [r3], #1
    e3a2:	079a      	lsls	r2, r3, #30
    e3a4:	d1f7      	bne.n	e396 <memset+0x12>
    e3a6:	2c03      	cmp	r4, #3
    e3a8:	d92a      	bls.n	e400 <memset+0x7c>
    e3aa:	b2cd      	uxtb	r5, r1
    e3ac:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e3b0:	2c0f      	cmp	r4, #15
    e3b2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e3b6:	d915      	bls.n	e3e4 <memset+0x60>
    e3b8:	f1a4 0710 	sub.w	r7, r4, #16
    e3bc:	093f      	lsrs	r7, r7, #4
    e3be:	f103 0610 	add.w	r6, r3, #16
    e3c2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    e3c6:	461a      	mov	r2, r3
    e3c8:	6015      	str	r5, [r2, #0]
    e3ca:	6055      	str	r5, [r2, #4]
    e3cc:	6095      	str	r5, [r2, #8]
    e3ce:	60d5      	str	r5, [r2, #12]
    e3d0:	3210      	adds	r2, #16
    e3d2:	42b2      	cmp	r2, r6
    e3d4:	d1f8      	bne.n	e3c8 <memset+0x44>
    e3d6:	f004 040f 	and.w	r4, r4, #15
    e3da:	3701      	adds	r7, #1
    e3dc:	2c03      	cmp	r4, #3
    e3de:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    e3e2:	d90d      	bls.n	e400 <memset+0x7c>
    e3e4:	461e      	mov	r6, r3
    e3e6:	4622      	mov	r2, r4
    e3e8:	3a04      	subs	r2, #4
    e3ea:	2a03      	cmp	r2, #3
    e3ec:	f846 5b04 	str.w	r5, [r6], #4
    e3f0:	d8fa      	bhi.n	e3e8 <memset+0x64>
    e3f2:	1f22      	subs	r2, r4, #4
    e3f4:	f022 0203 	bic.w	r2, r2, #3
    e3f8:	3204      	adds	r2, #4
    e3fa:	4413      	add	r3, r2
    e3fc:	f004 0403 	and.w	r4, r4, #3
    e400:	b12c      	cbz	r4, e40e <memset+0x8a>
    e402:	b2c9      	uxtb	r1, r1
    e404:	441c      	add	r4, r3
    e406:	f803 1b01 	strb.w	r1, [r3], #1
    e40a:	42a3      	cmp	r3, r4
    e40c:	d1fb      	bne.n	e406 <memset+0x82>
    e40e:	bcf0      	pop	{r4, r5, r6, r7}
    e410:	4770      	bx	lr
    e412:	4614      	mov	r4, r2
    e414:	4603      	mov	r3, r0
    e416:	e7c6      	b.n	e3a6 <memset+0x22>

0000e418 <__malloc_lock>:
    e418:	4770      	bx	lr
    e41a:	bf00      	nop

0000e41c <__malloc_unlock>:
    e41c:	4770      	bx	lr
    e41e:	bf00      	nop

0000e420 <_putc_r>:
    e420:	b570      	push	{r4, r5, r6, lr}
    e422:	460d      	mov	r5, r1
    e424:	4614      	mov	r4, r2
    e426:	4606      	mov	r6, r0
    e428:	b108      	cbz	r0, e42e <_putc_r+0xe>
    e42a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    e42c:	b1d3      	cbz	r3, e464 <_putc_r+0x44>
    e42e:	68a3      	ldr	r3, [r4, #8]
    e430:	3b01      	subs	r3, #1
    e432:	2b00      	cmp	r3, #0
    e434:	60a3      	str	r3, [r4, #8]
    e436:	db06      	blt.n	e446 <_putc_r+0x26>
    e438:	6823      	ldr	r3, [r4, #0]
    e43a:	701d      	strb	r5, [r3, #0]
    e43c:	6823      	ldr	r3, [r4, #0]
    e43e:	1c5a      	adds	r2, r3, #1
    e440:	6022      	str	r2, [r4, #0]
    e442:	7818      	ldrb	r0, [r3, #0]
    e444:	bd70      	pop	{r4, r5, r6, pc}
    e446:	69a2      	ldr	r2, [r4, #24]
    e448:	4293      	cmp	r3, r2
    e44a:	db0e      	blt.n	e46a <_putc_r+0x4a>
    e44c:	6823      	ldr	r3, [r4, #0]
    e44e:	701d      	strb	r5, [r3, #0]
    e450:	6823      	ldr	r3, [r4, #0]
    e452:	7819      	ldrb	r1, [r3, #0]
    e454:	290a      	cmp	r1, #10
    e456:	d1f2      	bne.n	e43e <_putc_r+0x1e>
    e458:	4630      	mov	r0, r6
    e45a:	4622      	mov	r2, r4
    e45c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e460:	f001 be90 	b.w	10184 <__swbuf_r>
    e464:	f003 f836 	bl	114d4 <__sinit>
    e468:	e7e1      	b.n	e42e <_putc_r+0xe>
    e46a:	4630      	mov	r0, r6
    e46c:	4629      	mov	r1, r5
    e46e:	4622      	mov	r2, r4
    e470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e474:	f001 be86 	b.w	10184 <__swbuf_r>

0000e478 <realloc>:
    e478:	4b02      	ldr	r3, [pc, #8]	; (e484 <realloc+0xc>)
    e47a:	460a      	mov	r2, r1
    e47c:	4601      	mov	r1, r0
    e47e:	6818      	ldr	r0, [r3, #0]
    e480:	f000 b802 	b.w	e488 <_realloc_r>
    e484:	1fff88f0 	.word	0x1fff88f0

0000e488 <_realloc_r>:
    e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e48c:	460c      	mov	r4, r1
    e48e:	b083      	sub	sp, #12
    e490:	4690      	mov	r8, r2
    e492:	4681      	mov	r9, r0
    e494:	2900      	cmp	r1, #0
    e496:	f000 80e2 	beq.w	e65e <_realloc_r+0x1d6>
    e49a:	f7ff ffbd 	bl	e418 <__malloc_lock>
    e49e:	f108 060b 	add.w	r6, r8, #11
    e4a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e4a6:	2e16      	cmp	r6, #22
    e4a8:	f023 0503 	bic.w	r5, r3, #3
    e4ac:	f1a4 0708 	sub.w	r7, r4, #8
    e4b0:	d84b      	bhi.n	e54a <_realloc_r+0xc2>
    e4b2:	2110      	movs	r1, #16
    e4b4:	460e      	mov	r6, r1
    e4b6:	45b0      	cmp	r8, r6
    e4b8:	d84c      	bhi.n	e554 <_realloc_r+0xcc>
    e4ba:	428d      	cmp	r5, r1
    e4bc:	da78      	bge.n	e5b0 <_realloc_r+0x128>
    e4be:	f8df b390 	ldr.w	fp, [pc, #912]	; e850 <_realloc_r+0x3c8>
    e4c2:	f8db e008 	ldr.w	lr, [fp, #8]
    e4c6:	1978      	adds	r0, r7, r5
    e4c8:	4586      	cmp	lr, r0
    e4ca:	f000 80ce 	beq.w	e66a <_realloc_r+0x1e2>
    e4ce:	6842      	ldr	r2, [r0, #4]
    e4d0:	f022 0c01 	bic.w	ip, r2, #1
    e4d4:	4484      	add	ip, r0
    e4d6:	f8dc c004 	ldr.w	ip, [ip, #4]
    e4da:	f01c 0f01 	tst.w	ip, #1
    e4de:	d07a      	beq.n	e5d6 <_realloc_r+0x14e>
    e4e0:	2200      	movs	r2, #0
    e4e2:	4610      	mov	r0, r2
    e4e4:	07db      	lsls	r3, r3, #31
    e4e6:	f100 8092 	bmi.w	e60e <_realloc_r+0x186>
    e4ea:	f854 3c08 	ldr.w	r3, [r4, #-8]
    e4ee:	ebc3 0a07 	rsb	sl, r3, r7
    e4f2:	f8da 3004 	ldr.w	r3, [sl, #4]
    e4f6:	f023 0303 	bic.w	r3, r3, #3
    e4fa:	442b      	add	r3, r5
    e4fc:	b388      	cbz	r0, e562 <_realloc_r+0xda>
    e4fe:	4570      	cmp	r0, lr
    e500:	f000 80ed 	beq.w	e6de <_realloc_r+0x256>
    e504:	eb02 0e03 	add.w	lr, r2, r3
    e508:	458e      	cmp	lr, r1
    e50a:	db2a      	blt.n	e562 <_realloc_r+0xda>
    e50c:	68c3      	ldr	r3, [r0, #12]
    e50e:	6882      	ldr	r2, [r0, #8]
    e510:	4657      	mov	r7, sl
    e512:	60d3      	str	r3, [r2, #12]
    e514:	609a      	str	r2, [r3, #8]
    e516:	f857 1f08 	ldr.w	r1, [r7, #8]!
    e51a:	f8da 300c 	ldr.w	r3, [sl, #12]
    e51e:	60cb      	str	r3, [r1, #12]
    e520:	1f2a      	subs	r2, r5, #4
    e522:	2a24      	cmp	r2, #36	; 0x24
    e524:	6099      	str	r1, [r3, #8]
    e526:	f200 8126 	bhi.w	e776 <_realloc_r+0x2ee>
    e52a:	2a13      	cmp	r2, #19
    e52c:	f240 80b3 	bls.w	e696 <_realloc_r+0x20e>
    e530:	6823      	ldr	r3, [r4, #0]
    e532:	f8ca 3008 	str.w	r3, [sl, #8]
    e536:	6863      	ldr	r3, [r4, #4]
    e538:	f8ca 300c 	str.w	r3, [sl, #12]
    e53c:	2a1b      	cmp	r2, #27
    e53e:	f200 8130 	bhi.w	e7a2 <_realloc_r+0x31a>
    e542:	3408      	adds	r4, #8
    e544:	f10a 0310 	add.w	r3, sl, #16
    e548:	e0a6      	b.n	e698 <_realloc_r+0x210>
    e54a:	f026 0607 	bic.w	r6, r6, #7
    e54e:	2e00      	cmp	r6, #0
    e550:	4631      	mov	r1, r6
    e552:	dab0      	bge.n	e4b6 <_realloc_r+0x2e>
    e554:	230c      	movs	r3, #12
    e556:	2000      	movs	r0, #0
    e558:	f8c9 3000 	str.w	r3, [r9]
    e55c:	b003      	add	sp, #12
    e55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e562:	428b      	cmp	r3, r1
    e564:	db53      	blt.n	e60e <_realloc_r+0x186>
    e566:	4657      	mov	r7, sl
    e568:	f8da 100c 	ldr.w	r1, [sl, #12]
    e56c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    e570:	1f2a      	subs	r2, r5, #4
    e572:	2a24      	cmp	r2, #36	; 0x24
    e574:	60c1      	str	r1, [r0, #12]
    e576:	6088      	str	r0, [r1, #8]
    e578:	f200 8109 	bhi.w	e78e <_realloc_r+0x306>
    e57c:	2a13      	cmp	r2, #19
    e57e:	f240 8104 	bls.w	e78a <_realloc_r+0x302>
    e582:	6821      	ldr	r1, [r4, #0]
    e584:	f8ca 1008 	str.w	r1, [sl, #8]
    e588:	6861      	ldr	r1, [r4, #4]
    e58a:	f8ca 100c 	str.w	r1, [sl, #12]
    e58e:	2a1b      	cmp	r2, #27
    e590:	f200 811c 	bhi.w	e7cc <_realloc_r+0x344>
    e594:	3408      	adds	r4, #8
    e596:	f10a 0210 	add.w	r2, sl, #16
    e59a:	6821      	ldr	r1, [r4, #0]
    e59c:	6011      	str	r1, [r2, #0]
    e59e:	6861      	ldr	r1, [r4, #4]
    e5a0:	6051      	str	r1, [r2, #4]
    e5a2:	68a1      	ldr	r1, [r4, #8]
    e5a4:	6091      	str	r1, [r2, #8]
    e5a6:	461d      	mov	r5, r3
    e5a8:	f8da 3004 	ldr.w	r3, [sl, #4]
    e5ac:	463c      	mov	r4, r7
    e5ae:	4657      	mov	r7, sl
    e5b0:	1baa      	subs	r2, r5, r6
    e5b2:	2a0f      	cmp	r2, #15
    e5b4:	f003 0301 	and.w	r3, r3, #1
    e5b8:	d819      	bhi.n	e5ee <_realloc_r+0x166>
    e5ba:	432b      	orrs	r3, r5
    e5bc:	443d      	add	r5, r7
    e5be:	607b      	str	r3, [r7, #4]
    e5c0:	686b      	ldr	r3, [r5, #4]
    e5c2:	f043 0301 	orr.w	r3, r3, #1
    e5c6:	606b      	str	r3, [r5, #4]
    e5c8:	4648      	mov	r0, r9
    e5ca:	f7ff ff27 	bl	e41c <__malloc_unlock>
    e5ce:	4620      	mov	r0, r4
    e5d0:	b003      	add	sp, #12
    e5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5d6:	f022 0203 	bic.w	r2, r2, #3
    e5da:	eb02 0c05 	add.w	ip, r2, r5
    e5de:	458c      	cmp	ip, r1
    e5e0:	db80      	blt.n	e4e4 <_realloc_r+0x5c>
    e5e2:	68c2      	ldr	r2, [r0, #12]
    e5e4:	6881      	ldr	r1, [r0, #8]
    e5e6:	4665      	mov	r5, ip
    e5e8:	60ca      	str	r2, [r1, #12]
    e5ea:	6091      	str	r1, [r2, #8]
    e5ec:	e7e0      	b.n	e5b0 <_realloc_r+0x128>
    e5ee:	19b9      	adds	r1, r7, r6
    e5f0:	f042 0001 	orr.w	r0, r2, #1
    e5f4:	431e      	orrs	r6, r3
    e5f6:	440a      	add	r2, r1
    e5f8:	607e      	str	r6, [r7, #4]
    e5fa:	6048      	str	r0, [r1, #4]
    e5fc:	6853      	ldr	r3, [r2, #4]
    e5fe:	f043 0301 	orr.w	r3, r3, #1
    e602:	3108      	adds	r1, #8
    e604:	6053      	str	r3, [r2, #4]
    e606:	4648      	mov	r0, r9
    e608:	f003 f848 	bl	1169c <_free_r>
    e60c:	e7dc      	b.n	e5c8 <_realloc_r+0x140>
    e60e:	4641      	mov	r1, r8
    e610:	4648      	mov	r0, r9
    e612:	f7ff faa5 	bl	db60 <_malloc_r>
    e616:	4680      	mov	r8, r0
    e618:	b1d0      	cbz	r0, e650 <_realloc_r+0x1c8>
    e61a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e61e:	f023 0201 	bic.w	r2, r3, #1
    e622:	443a      	add	r2, r7
    e624:	f1a0 0108 	sub.w	r1, r0, #8
    e628:	4291      	cmp	r1, r2
    e62a:	f000 809e 	beq.w	e76a <_realloc_r+0x2e2>
    e62e:	1f2a      	subs	r2, r5, #4
    e630:	2a24      	cmp	r2, #36	; 0x24
    e632:	d850      	bhi.n	e6d6 <_realloc_r+0x24e>
    e634:	2a13      	cmp	r2, #19
    e636:	d823      	bhi.n	e680 <_realloc_r+0x1f8>
    e638:	4603      	mov	r3, r0
    e63a:	4622      	mov	r2, r4
    e63c:	6811      	ldr	r1, [r2, #0]
    e63e:	6019      	str	r1, [r3, #0]
    e640:	6851      	ldr	r1, [r2, #4]
    e642:	6059      	str	r1, [r3, #4]
    e644:	6892      	ldr	r2, [r2, #8]
    e646:	609a      	str	r2, [r3, #8]
    e648:	4621      	mov	r1, r4
    e64a:	4648      	mov	r0, r9
    e64c:	f003 f826 	bl	1169c <_free_r>
    e650:	4648      	mov	r0, r9
    e652:	f7ff fee3 	bl	e41c <__malloc_unlock>
    e656:	4640      	mov	r0, r8
    e658:	b003      	add	sp, #12
    e65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e65e:	4611      	mov	r1, r2
    e660:	b003      	add	sp, #12
    e662:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e666:	f7ff ba7b 	b.w	db60 <_malloc_r>
    e66a:	f8de 2004 	ldr.w	r2, [lr, #4]
    e66e:	f022 0203 	bic.w	r2, r2, #3
    e672:	1950      	adds	r0, r2, r5
    e674:	f106 0c10 	add.w	ip, r6, #16
    e678:	4560      	cmp	r0, ip
    e67a:	da19      	bge.n	e6b0 <_realloc_r+0x228>
    e67c:	4670      	mov	r0, lr
    e67e:	e731      	b.n	e4e4 <_realloc_r+0x5c>
    e680:	6823      	ldr	r3, [r4, #0]
    e682:	6003      	str	r3, [r0, #0]
    e684:	6863      	ldr	r3, [r4, #4]
    e686:	6043      	str	r3, [r0, #4]
    e688:	2a1b      	cmp	r2, #27
    e68a:	d863      	bhi.n	e754 <_realloc_r+0x2cc>
    e68c:	f100 0308 	add.w	r3, r0, #8
    e690:	f104 0208 	add.w	r2, r4, #8
    e694:	e7d2      	b.n	e63c <_realloc_r+0x1b4>
    e696:	463b      	mov	r3, r7
    e698:	6822      	ldr	r2, [r4, #0]
    e69a:	601a      	str	r2, [r3, #0]
    e69c:	6862      	ldr	r2, [r4, #4]
    e69e:	605a      	str	r2, [r3, #4]
    e6a0:	68a2      	ldr	r2, [r4, #8]
    e6a2:	609a      	str	r2, [r3, #8]
    e6a4:	463c      	mov	r4, r7
    e6a6:	4675      	mov	r5, lr
    e6a8:	f8da 3004 	ldr.w	r3, [sl, #4]
    e6ac:	4657      	mov	r7, sl
    e6ae:	e77f      	b.n	e5b0 <_realloc_r+0x128>
    e6b0:	4437      	add	r7, r6
    e6b2:	1b83      	subs	r3, r0, r6
    e6b4:	f043 0301 	orr.w	r3, r3, #1
    e6b8:	f8cb 7008 	str.w	r7, [fp, #8]
    e6bc:	607b      	str	r3, [r7, #4]
    e6be:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e6c2:	f003 0301 	and.w	r3, r3, #1
    e6c6:	431e      	orrs	r6, r3
    e6c8:	4648      	mov	r0, r9
    e6ca:	f844 6c04 	str.w	r6, [r4, #-4]
    e6ce:	f7ff fea5 	bl	e41c <__malloc_unlock>
    e6d2:	4620      	mov	r0, r4
    e6d4:	e77c      	b.n	e5d0 <_realloc_r+0x148>
    e6d6:	4621      	mov	r1, r4
    e6d8:	f7ff fdf4 	bl	e2c4 <memmove>
    e6dc:	e7b4      	b.n	e648 <_realloc_r+0x1c0>
    e6de:	eb02 0c03 	add.w	ip, r2, r3
    e6e2:	f106 0210 	add.w	r2, r6, #16
    e6e6:	4594      	cmp	ip, r2
    e6e8:	f6ff af3b 	blt.w	e562 <_realloc_r+0xda>
    e6ec:	4657      	mov	r7, sl
    e6ee:	f8da 300c 	ldr.w	r3, [sl, #12]
    e6f2:	f857 1f08 	ldr.w	r1, [r7, #8]!
    e6f6:	1f2a      	subs	r2, r5, #4
    e6f8:	2a24      	cmp	r2, #36	; 0x24
    e6fa:	60cb      	str	r3, [r1, #12]
    e6fc:	6099      	str	r1, [r3, #8]
    e6fe:	f200 8087 	bhi.w	e810 <_realloc_r+0x388>
    e702:	2a13      	cmp	r2, #19
    e704:	d978      	bls.n	e7f8 <_realloc_r+0x370>
    e706:	6823      	ldr	r3, [r4, #0]
    e708:	f8ca 3008 	str.w	r3, [sl, #8]
    e70c:	6863      	ldr	r3, [r4, #4]
    e70e:	f8ca 300c 	str.w	r3, [sl, #12]
    e712:	2a1b      	cmp	r2, #27
    e714:	f200 8085 	bhi.w	e822 <_realloc_r+0x39a>
    e718:	3408      	adds	r4, #8
    e71a:	f10a 0310 	add.w	r3, sl, #16
    e71e:	6822      	ldr	r2, [r4, #0]
    e720:	601a      	str	r2, [r3, #0]
    e722:	6862      	ldr	r2, [r4, #4]
    e724:	605a      	str	r2, [r3, #4]
    e726:	68a2      	ldr	r2, [r4, #8]
    e728:	609a      	str	r2, [r3, #8]
    e72a:	eb0a 0306 	add.w	r3, sl, r6
    e72e:	ebc6 020c 	rsb	r2, r6, ip
    e732:	f042 0201 	orr.w	r2, r2, #1
    e736:	f8cb 3008 	str.w	r3, [fp, #8]
    e73a:	605a      	str	r2, [r3, #4]
    e73c:	f8da 3004 	ldr.w	r3, [sl, #4]
    e740:	f003 0301 	and.w	r3, r3, #1
    e744:	431e      	orrs	r6, r3
    e746:	4648      	mov	r0, r9
    e748:	f8ca 6004 	str.w	r6, [sl, #4]
    e74c:	f7ff fe66 	bl	e41c <__malloc_unlock>
    e750:	4638      	mov	r0, r7
    e752:	e73d      	b.n	e5d0 <_realloc_r+0x148>
    e754:	68a3      	ldr	r3, [r4, #8]
    e756:	6083      	str	r3, [r0, #8]
    e758:	68e3      	ldr	r3, [r4, #12]
    e75a:	60c3      	str	r3, [r0, #12]
    e75c:	2a24      	cmp	r2, #36	; 0x24
    e75e:	d02c      	beq.n	e7ba <_realloc_r+0x332>
    e760:	f100 0310 	add.w	r3, r0, #16
    e764:	f104 0210 	add.w	r2, r4, #16
    e768:	e768      	b.n	e63c <_realloc_r+0x1b4>
    e76a:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e76e:	f022 0203 	bic.w	r2, r2, #3
    e772:	4415      	add	r5, r2
    e774:	e71c      	b.n	e5b0 <_realloc_r+0x128>
    e776:	4621      	mov	r1, r4
    e778:	4638      	mov	r0, r7
    e77a:	4675      	mov	r5, lr
    e77c:	463c      	mov	r4, r7
    e77e:	f7ff fda1 	bl	e2c4 <memmove>
    e782:	4657      	mov	r7, sl
    e784:	f8da 3004 	ldr.w	r3, [sl, #4]
    e788:	e712      	b.n	e5b0 <_realloc_r+0x128>
    e78a:	463a      	mov	r2, r7
    e78c:	e705      	b.n	e59a <_realloc_r+0x112>
    e78e:	4621      	mov	r1, r4
    e790:	4638      	mov	r0, r7
    e792:	461d      	mov	r5, r3
    e794:	463c      	mov	r4, r7
    e796:	f7ff fd95 	bl	e2c4 <memmove>
    e79a:	4657      	mov	r7, sl
    e79c:	f8da 3004 	ldr.w	r3, [sl, #4]
    e7a0:	e706      	b.n	e5b0 <_realloc_r+0x128>
    e7a2:	68a3      	ldr	r3, [r4, #8]
    e7a4:	f8ca 3010 	str.w	r3, [sl, #16]
    e7a8:	68e3      	ldr	r3, [r4, #12]
    e7aa:	f8ca 3014 	str.w	r3, [sl, #20]
    e7ae:	2a24      	cmp	r2, #36	; 0x24
    e7b0:	d018      	beq.n	e7e4 <_realloc_r+0x35c>
    e7b2:	3410      	adds	r4, #16
    e7b4:	f10a 0318 	add.w	r3, sl, #24
    e7b8:	e76e      	b.n	e698 <_realloc_r+0x210>
    e7ba:	6923      	ldr	r3, [r4, #16]
    e7bc:	6103      	str	r3, [r0, #16]
    e7be:	6963      	ldr	r3, [r4, #20]
    e7c0:	6143      	str	r3, [r0, #20]
    e7c2:	f104 0218 	add.w	r2, r4, #24
    e7c6:	f100 0318 	add.w	r3, r0, #24
    e7ca:	e737      	b.n	e63c <_realloc_r+0x1b4>
    e7cc:	68a1      	ldr	r1, [r4, #8]
    e7ce:	f8ca 1010 	str.w	r1, [sl, #16]
    e7d2:	68e1      	ldr	r1, [r4, #12]
    e7d4:	f8ca 1014 	str.w	r1, [sl, #20]
    e7d8:	2a24      	cmp	r2, #36	; 0x24
    e7da:	d00f      	beq.n	e7fc <_realloc_r+0x374>
    e7dc:	3410      	adds	r4, #16
    e7de:	f10a 0218 	add.w	r2, sl, #24
    e7e2:	e6da      	b.n	e59a <_realloc_r+0x112>
    e7e4:	6923      	ldr	r3, [r4, #16]
    e7e6:	f8ca 3018 	str.w	r3, [sl, #24]
    e7ea:	6963      	ldr	r3, [r4, #20]
    e7ec:	f8ca 301c 	str.w	r3, [sl, #28]
    e7f0:	3418      	adds	r4, #24
    e7f2:	f10a 0320 	add.w	r3, sl, #32
    e7f6:	e74f      	b.n	e698 <_realloc_r+0x210>
    e7f8:	463b      	mov	r3, r7
    e7fa:	e790      	b.n	e71e <_realloc_r+0x296>
    e7fc:	6922      	ldr	r2, [r4, #16]
    e7fe:	f8ca 2018 	str.w	r2, [sl, #24]
    e802:	6962      	ldr	r2, [r4, #20]
    e804:	f8ca 201c 	str.w	r2, [sl, #28]
    e808:	3418      	adds	r4, #24
    e80a:	f10a 0220 	add.w	r2, sl, #32
    e80e:	e6c4      	b.n	e59a <_realloc_r+0x112>
    e810:	4621      	mov	r1, r4
    e812:	4638      	mov	r0, r7
    e814:	f8cd c004 	str.w	ip, [sp, #4]
    e818:	f7ff fd54 	bl	e2c4 <memmove>
    e81c:	f8dd c004 	ldr.w	ip, [sp, #4]
    e820:	e783      	b.n	e72a <_realloc_r+0x2a2>
    e822:	68a3      	ldr	r3, [r4, #8]
    e824:	f8ca 3010 	str.w	r3, [sl, #16]
    e828:	68e3      	ldr	r3, [r4, #12]
    e82a:	f8ca 3014 	str.w	r3, [sl, #20]
    e82e:	2a24      	cmp	r2, #36	; 0x24
    e830:	d003      	beq.n	e83a <_realloc_r+0x3b2>
    e832:	3410      	adds	r4, #16
    e834:	f10a 0318 	add.w	r3, sl, #24
    e838:	e771      	b.n	e71e <_realloc_r+0x296>
    e83a:	6923      	ldr	r3, [r4, #16]
    e83c:	f8ca 3018 	str.w	r3, [sl, #24]
    e840:	6963      	ldr	r3, [r4, #20]
    e842:	f8ca 301c 	str.w	r3, [sl, #28]
    e846:	3418      	adds	r4, #24
    e848:	f10a 0320 	add.w	r3, sl, #32
    e84c:	e767      	b.n	e71e <_realloc_r+0x296>
    e84e:	bf00      	nop
    e850:	1fff88f4 	.word	0x1fff88f4

0000e854 <_sbrk_r>:
    e854:	b538      	push	{r3, r4, r5, lr}
    e856:	4c07      	ldr	r4, [pc, #28]	; (e874 <_sbrk_r+0x20>)
    e858:	2300      	movs	r3, #0
    e85a:	4605      	mov	r5, r0
    e85c:	4608      	mov	r0, r1
    e85e:	6023      	str	r3, [r4, #0]
    e860:	f7f3 ff10 	bl	2684 <_sbrk>
    e864:	1c43      	adds	r3, r0, #1
    e866:	d000      	beq.n	e86a <_sbrk_r+0x16>
    e868:	bd38      	pop	{r3, r4, r5, pc}
    e86a:	6823      	ldr	r3, [r4, #0]
    e86c:	2b00      	cmp	r3, #0
    e86e:	d0fb      	beq.n	e868 <_sbrk_r+0x14>
    e870:	602b      	str	r3, [r5, #0]
    e872:	bd38      	pop	{r3, r4, r5, pc}
    e874:	1fff9c90 	.word	0x1fff9c90

0000e878 <_raise_r>:
    e878:	291f      	cmp	r1, #31
    e87a:	b538      	push	{r3, r4, r5, lr}
    e87c:	460c      	mov	r4, r1
    e87e:	4605      	mov	r5, r0
    e880:	d820      	bhi.n	e8c4 <_raise_r+0x4c>
    e882:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
    e886:	b19a      	cbz	r2, e8b0 <_raise_r+0x38>
    e888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    e88c:	b183      	cbz	r3, e8b0 <_raise_r+0x38>
    e88e:	2b01      	cmp	r3, #1
    e890:	d00c      	beq.n	e8ac <_raise_r+0x34>
    e892:	1c59      	adds	r1, r3, #1
    e894:	d006      	beq.n	e8a4 <_raise_r+0x2c>
    e896:	2500      	movs	r5, #0
    e898:	4620      	mov	r0, r4
    e89a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    e89e:	4798      	blx	r3
    e8a0:	4628      	mov	r0, r5
    e8a2:	bd38      	pop	{r3, r4, r5, pc}
    e8a4:	2316      	movs	r3, #22
    e8a6:	6003      	str	r3, [r0, #0]
    e8a8:	2001      	movs	r0, #1
    e8aa:	bd38      	pop	{r3, r4, r5, pc}
    e8ac:	2000      	movs	r0, #0
    e8ae:	bd38      	pop	{r3, r4, r5, pc}
    e8b0:	4628      	mov	r0, r5
    e8b2:	f000 f829 	bl	e908 <_getpid_r>
    e8b6:	4622      	mov	r2, r4
    e8b8:	4601      	mov	r1, r0
    e8ba:	4628      	mov	r0, r5
    e8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e8c0:	f000 b80e 	b.w	e8e0 <_kill_r>
    e8c4:	2316      	movs	r3, #22
    e8c6:	6003      	str	r3, [r0, #0]
    e8c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e8cc:	bd38      	pop	{r3, r4, r5, pc}
    e8ce:	bf00      	nop

0000e8d0 <raise>:
    e8d0:	4b02      	ldr	r3, [pc, #8]	; (e8dc <raise+0xc>)
    e8d2:	4601      	mov	r1, r0
    e8d4:	6818      	ldr	r0, [r3, #0]
    e8d6:	f7ff bfcf 	b.w	e878 <_raise_r>
    e8da:	bf00      	nop
    e8dc:	1fff88f0 	.word	0x1fff88f0

0000e8e0 <_kill_r>:
    e8e0:	b538      	push	{r3, r4, r5, lr}
    e8e2:	4c08      	ldr	r4, [pc, #32]	; (e904 <_kill_r+0x24>)
    e8e4:	2300      	movs	r3, #0
    e8e6:	4605      	mov	r5, r0
    e8e8:	4608      	mov	r0, r1
    e8ea:	4611      	mov	r1, r2
    e8ec:	6023      	str	r3, [r4, #0]
    e8ee:	f7f3 fed1 	bl	2694 <_kill>
    e8f2:	1c43      	adds	r3, r0, #1
    e8f4:	d000      	beq.n	e8f8 <_kill_r+0x18>
    e8f6:	bd38      	pop	{r3, r4, r5, pc}
    e8f8:	6823      	ldr	r3, [r4, #0]
    e8fa:	2b00      	cmp	r3, #0
    e8fc:	d0fb      	beq.n	e8f6 <_kill_r+0x16>
    e8fe:	602b      	str	r3, [r5, #0]
    e900:	bd38      	pop	{r3, r4, r5, pc}
    e902:	bf00      	nop
    e904:	1fff9c90 	.word	0x1fff9c90

0000e908 <_getpid_r>:
    e908:	f7f3 bec6 	b.w	2698 <_getpid>

0000e90c <sprintf>:
    e90c:	b40e      	push	{r1, r2, r3}
    e90e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e910:	b09c      	sub	sp, #112	; 0x70
    e912:	ab21      	add	r3, sp, #132	; 0x84
    e914:	490f      	ldr	r1, [pc, #60]	; (e954 <sprintf+0x48>)
    e916:	f853 2b04 	ldr.w	r2, [r3], #4
    e91a:	9301      	str	r3, [sp, #4]
    e91c:	4605      	mov	r5, r0
    e91e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    e922:	6808      	ldr	r0, [r1, #0]
    e924:	9502      	str	r5, [sp, #8]
    e926:	f44f 7702 	mov.w	r7, #520	; 0x208
    e92a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e92e:	a902      	add	r1, sp, #8
    e930:	9506      	str	r5, [sp, #24]
    e932:	f8ad 7014 	strh.w	r7, [sp, #20]
    e936:	9404      	str	r4, [sp, #16]
    e938:	9407      	str	r4, [sp, #28]
    e93a:	f8ad 6016 	strh.w	r6, [sp, #22]
    e93e:	f000 f973 	bl	ec28 <_svfprintf_r>
    e942:	9b02      	ldr	r3, [sp, #8]
    e944:	2200      	movs	r2, #0
    e946:	701a      	strb	r2, [r3, #0]
    e948:	b01c      	add	sp, #112	; 0x70
    e94a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e94e:	b003      	add	sp, #12
    e950:	4770      	bx	lr
    e952:	bf00      	nop
    e954:	1fff88f0 	.word	0x1fff88f0

0000e958 <strcmp>:
    e958:	ea40 0c01 	orr.w	ip, r0, r1
    e95c:	f01c 0f07 	tst.w	ip, #7
    e960:	d123      	bne.n	e9aa <strcmp+0x52>
    e962:	f1bd 0d10 	subs.w	sp, sp, #16
    e966:	e9cd 4502 	strd	r4, r5, [sp, #8]
    e96a:	e9cd 6700 	strd	r6, r7, [sp]
    e96e:	f06f 0600 	mvn.w	r6, #0
    e972:	f04f 0700 	mov.w	r7, #0
    e976:	bf00      	nop
    e978:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    e97c:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    e980:	42a2      	cmp	r2, r4
    e982:	fa82 fc46 	uadd8	ip, r2, r6
    e986:	faa7 fc86 	sel	ip, r7, r6
    e98a:	bf08      	it	eq
    e98c:	f1bc 0f00 	cmpeq.w	ip, #0
    e990:	f040 80d7 	bne.w	eb42 <strcmp+0x1ea>
    e994:	42ab      	cmp	r3, r5
    e996:	fa83 fc46 	uadd8	ip, r3, r6
    e99a:	faa7 fc86 	sel	ip, r7, r6
    e99e:	bf08      	it	eq
    e9a0:	f1bc 0f00 	cmpeq.w	ip, #0
    e9a4:	f040 80ca 	bne.w	eb3c <strcmp+0x1e4>
    e9a8:	e7e6      	b.n	e978 <strcmp+0x20>
    e9aa:	f010 0c03 	ands.w	ip, r0, #3
    e9ae:	d021      	beq.n	e9f4 <strcmp+0x9c>
    e9b0:	f020 0003 	bic.w	r0, r0, #3
    e9b4:	f850 2b04 	ldr.w	r2, [r0], #4
    e9b8:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
    e9bc:	d008      	beq.n	e9d0 <strcmp+0x78>
    e9be:	d20f      	bcs.n	e9e0 <strcmp+0x88>
    e9c0:	f811 cb01 	ldrb.w	ip, [r1], #1
    e9c4:	fa5f f392 	uxtb.w	r3, r2, ror #8
    e9c8:	ebb3 0c0c 	subs.w	ip, r3, ip
    e9cc:	d110      	bne.n	e9f0 <strcmp+0x98>
    e9ce:	b17b      	cbz	r3, e9f0 <strcmp+0x98>
    e9d0:	f811 cb01 	ldrb.w	ip, [r1], #1
    e9d4:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
    e9d8:	ebb3 0c0c 	subs.w	ip, r3, ip
    e9dc:	d108      	bne.n	e9f0 <strcmp+0x98>
    e9de:	b13b      	cbz	r3, e9f0 <strcmp+0x98>
    e9e0:	f811 cb01 	ldrb.w	ip, [r1], #1
    e9e4:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
    e9e8:	ebb3 0c0c 	subs.w	ip, r3, ip
    e9ec:	d100      	bne.n	e9f0 <strcmp+0x98>
    e9ee:	b90b      	cbnz	r3, e9f4 <strcmp+0x9c>
    e9f0:	4660      	mov	r0, ip
    e9f2:	4770      	bx	lr
    e9f4:	f1bd 0d10 	subs.w	sp, sp, #16
    e9f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
    e9fc:	e9cd 6700 	strd	r6, r7, [sp]
    ea00:	f06f 0600 	mvn.w	r6, #0
    ea04:	f04f 0700 	mov.w	r7, #0
    ea08:	f011 0c03 	ands.w	ip, r1, #3
    ea0c:	d12d      	bne.n	ea6a <strcmp+0x112>
    ea0e:	f010 0f04 	tst.w	r0, #4
    ea12:	d00d      	beq.n	ea30 <strcmp+0xd8>
    ea14:	f850 2b04 	ldr.w	r2, [r0], #4
    ea18:	f851 4b04 	ldr.w	r4, [r1], #4
    ea1c:	42a2      	cmp	r2, r4
    ea1e:	fa82 fc46 	uadd8	ip, r2, r6
    ea22:	faa7 fc86 	sel	ip, r7, r6
    ea26:	bf08      	it	eq
    ea28:	f1bc 0f00 	cmpeq.w	ip, #0
    ea2c:	f040 8089 	bne.w	eb42 <strcmp+0x1ea>
    ea30:	f011 0f04 	tst.w	r1, #4
    ea34:	d09f      	beq.n	e976 <strcmp+0x1e>
    ea36:	f851 5b04 	ldr.w	r5, [r1], #4
    ea3a:	bf00      	nop
    ea3c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    ea40:	42aa      	cmp	r2, r5
    ea42:	fa82 fc46 	uadd8	ip, r2, r6
    ea46:	faa7 fc86 	sel	ip, r7, r6
    ea4a:	bf08      	it	eq
    ea4c:	f1bc 0f00 	cmpeq.w	ip, #0
    ea50:	d171      	bne.n	eb36 <strcmp+0x1de>
    ea52:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    ea56:	42a3      	cmp	r3, r4
    ea58:	fa83 fc46 	uadd8	ip, r3, r6
    ea5c:	faa7 fc86 	sel	ip, r7, r6
    ea60:	bf08      	it	eq
    ea62:	f1bc 0f00 	cmpeq.w	ip, #0
    ea66:	d163      	bne.n	eb30 <strcmp+0x1d8>
    ea68:	e7e8      	b.n	ea3c <strcmp+0xe4>
    ea6a:	f021 0103 	bic.w	r1, r1, #3
    ea6e:	f1bc 0f02 	cmp.w	ip, #2
    ea72:	d01e      	beq.n	eab2 <strcmp+0x15a>
    ea74:	da3b      	bge.n	eaee <strcmp+0x196>
    ea76:	f851 5b04 	ldr.w	r5, [r1], #4
    ea7a:	bf00      	nop
    ea7c:	f850 3b04 	ldr.w	r3, [r0], #4
    ea80:	ea4f 2515 	mov.w	r5, r5, lsr #8
    ea84:	fa83 fc46 	uadd8	ip, r3, r6
    ea88:	faa7 fc86 	sel	ip, r7, r6
    ea8c:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
    ea90:	ea03 2216 	and.w	r2, r3, r6, lsr #8
    ea94:	bf08      	it	eq
    ea96:	42aa      	cmpeq	r2, r5
    ea98:	d14d      	bne.n	eb36 <strcmp+0x1de>
    ea9a:	f851 5b04 	ldr.w	r5, [r1], #4
    ea9e:	f1bc 0f00 	cmp.w	ip, #0
    eaa2:	ea82 0303 	eor.w	r3, r2, r3
    eaa6:	ea4f 6205 	mov.w	r2, r5, lsl #24
    eaaa:	bf08      	it	eq
    eaac:	4293      	cmpeq	r3, r2
    eaae:	d13c      	bne.n	eb2a <strcmp+0x1d2>
    eab0:	e7e4      	b.n	ea7c <strcmp+0x124>
    eab2:	f851 5b04 	ldr.w	r5, [r1], #4
    eab6:	bf00      	nop
    eab8:	f850 3b04 	ldr.w	r3, [r0], #4
    eabc:	ea4f 4515 	mov.w	r5, r5, lsr #16
    eac0:	fa83 fc46 	uadd8	ip, r3, r6
    eac4:	faa7 fc86 	sel	ip, r7, r6
    eac8:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
    eacc:	ea03 4216 	and.w	r2, r3, r6, lsr #16
    ead0:	bf08      	it	eq
    ead2:	42aa      	cmpeq	r2, r5
    ead4:	d12f      	bne.n	eb36 <strcmp+0x1de>
    ead6:	f851 5b04 	ldr.w	r5, [r1], #4
    eada:	f1bc 0f00 	cmp.w	ip, #0
    eade:	ea82 0303 	eor.w	r3, r2, r3
    eae2:	ea4f 4205 	mov.w	r2, r5, lsl #16
    eae6:	bf08      	it	eq
    eae8:	4293      	cmpeq	r3, r2
    eaea:	d11e      	bne.n	eb2a <strcmp+0x1d2>
    eaec:	e7e4      	b.n	eab8 <strcmp+0x160>
    eaee:	f851 5b04 	ldr.w	r5, [r1], #4
    eaf2:	bf00      	nop
    eaf4:	f850 3b04 	ldr.w	r3, [r0], #4
    eaf8:	ea4f 6515 	mov.w	r5, r5, lsr #24
    eafc:	fa83 fc46 	uadd8	ip, r3, r6
    eb00:	faa7 fc86 	sel	ip, r7, r6
    eb04:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
    eb08:	ea03 6216 	and.w	r2, r3, r6, lsr #24
    eb0c:	bf08      	it	eq
    eb0e:	42aa      	cmpeq	r2, r5
    eb10:	d111      	bne.n	eb36 <strcmp+0x1de>
    eb12:	f851 5b04 	ldr.w	r5, [r1], #4
    eb16:	f1bc 0f00 	cmp.w	ip, #0
    eb1a:	ea82 0303 	eor.w	r3, r2, r3
    eb1e:	ea4f 2205 	mov.w	r2, r5, lsl #8
    eb22:	bf08      	it	eq
    eb24:	4293      	cmpeq	r3, r2
    eb26:	d100      	bne.n	eb2a <strcmp+0x1d2>
    eb28:	e7e4      	b.n	eaf4 <strcmp+0x19c>
    eb2a:	ba19      	rev	r1, r3
    eb2c:	ba12      	rev	r2, r2
    eb2e:	e00a      	b.n	eb46 <strcmp+0x1ee>
    eb30:	ba19      	rev	r1, r3
    eb32:	ba22      	rev	r2, r4
    eb34:	e007      	b.n	eb46 <strcmp+0x1ee>
    eb36:	ba11      	rev	r1, r2
    eb38:	ba2a      	rev	r2, r5
    eb3a:	e004      	b.n	eb46 <strcmp+0x1ee>
    eb3c:	ba19      	rev	r1, r3
    eb3e:	ba2a      	rev	r2, r5
    eb40:	e001      	b.n	eb46 <strcmp+0x1ee>
    eb42:	ba11      	rev	r1, r2
    eb44:	ba22      	rev	r2, r4
    eb46:	fa9c f08c 	rev.w	r0, ip
    eb4a:	e9dd 6700 	ldrd	r6, r7, [sp]
    eb4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    eb52:	f11d 0d10 	adds.w	sp, sp, #16
    eb56:	b138      	cbz	r0, eb68 <strcmp+0x210>
    eb58:	fab0 f080 	clz	r0, r0
    eb5c:	f1c0 0018 	rsb	r0, r0, #24
    eb60:	fa21 f100 	lsr.w	r1, r1, r0
    eb64:	fa22 f200 	lsr.w	r2, r2, r0
    eb68:	2001      	movs	r0, #1
    eb6a:	4291      	cmp	r1, r2
    eb6c:	bf98      	it	ls
    eb6e:	4180      	sbcls	r0, r0
    eb70:	4770      	bx	lr
    eb72:	bf00      	nop

0000eb74 <strncmp>:
    eb74:	b430      	push	{r4, r5}
    eb76:	2a00      	cmp	r2, #0
    eb78:	d04a      	beq.n	ec10 <strncmp+0x9c>
    eb7a:	ea40 0301 	orr.w	r3, r0, r1
    eb7e:	f013 0303 	ands.w	r3, r3, #3
    eb82:	d12d      	bne.n	ebe0 <strncmp+0x6c>
    eb84:	2a03      	cmp	r2, #3
    eb86:	d92b      	bls.n	ebe0 <strncmp+0x6c>
    eb88:	6804      	ldr	r4, [r0, #0]
    eb8a:	680d      	ldr	r5, [r1, #0]
    eb8c:	42ac      	cmp	r4, r5
    eb8e:	d127      	bne.n	ebe0 <strncmp+0x6c>
    eb90:	3a04      	subs	r2, #4
    eb92:	d03d      	beq.n	ec10 <strncmp+0x9c>
    eb94:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
    eb98:	ea25 0404 	bic.w	r4, r5, r4
    eb9c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    eba0:	d13c      	bne.n	ec1c <strncmp+0xa8>
    eba2:	460c      	mov	r4, r1
    eba4:	4603      	mov	r3, r0
    eba6:	e00e      	b.n	ebc6 <strncmp+0x52>
    eba8:	685b      	ldr	r3, [r3, #4]
    ebaa:	6864      	ldr	r4, [r4, #4]
    ebac:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
    ebb0:	42a3      	cmp	r3, r4
    ebb2:	ea25 0503 	bic.w	r5, r5, r3
    ebb6:	d113      	bne.n	ebe0 <strncmp+0x6c>
    ebb8:	3a04      	subs	r2, #4
    ebba:	d029      	beq.n	ec10 <strncmp+0x9c>
    ebbc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    ebc0:	d129      	bne.n	ec16 <strncmp+0xa2>
    ebc2:	4603      	mov	r3, r0
    ebc4:	460c      	mov	r4, r1
    ebc6:	2a03      	cmp	r2, #3
    ebc8:	f100 0004 	add.w	r0, r0, #4
    ebcc:	f101 0104 	add.w	r1, r1, #4
    ebd0:	d8ea      	bhi.n	eba8 <strncmp+0x34>
    ebd2:	1e55      	subs	r5, r2, #1
    ebd4:	b92a      	cbnz	r2, ebe2 <strncmp+0x6e>
    ebd6:	7918      	ldrb	r0, [r3, #4]
    ebd8:	7922      	ldrb	r2, [r4, #4]
    ebda:	1a80      	subs	r0, r0, r2
    ebdc:	bc30      	pop	{r4, r5}
    ebde:	4770      	bx	lr
    ebe0:	1e55      	subs	r5, r2, #1
    ebe2:	7803      	ldrb	r3, [r0, #0]
    ebe4:	780a      	ldrb	r2, [r1, #0]
    ebe6:	4293      	cmp	r3, r2
    ebe8:	d11a      	bne.n	ec20 <strncmp+0xac>
    ebea:	b1dd      	cbz	r5, ec24 <strncmp+0xb0>
    ebec:	b1b3      	cbz	r3, ec1c <strncmp+0xa8>
    ebee:	1c6c      	adds	r4, r5, #1
    ebf0:	440c      	add	r4, r1
    ebf2:	1c8b      	adds	r3, r1, #2
    ebf4:	4601      	mov	r1, r0
    ebf6:	e004      	b.n	ec02 <strncmp+0x8e>
    ebf8:	42a3      	cmp	r3, r4
    ebfa:	d00c      	beq.n	ec16 <strncmp+0xa2>
    ebfc:	3301      	adds	r3, #1
    ebfe:	2800      	cmp	r0, #0
    ec00:	d0ec      	beq.n	ebdc <strncmp+0x68>
    ec02:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ec06:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    ec0a:	4290      	cmp	r0, r2
    ec0c:	d0f4      	beq.n	ebf8 <strncmp+0x84>
    ec0e:	e7e4      	b.n	ebda <strncmp+0x66>
    ec10:	4610      	mov	r0, r2
    ec12:	bc30      	pop	{r4, r5}
    ec14:	4770      	bx	lr
    ec16:	2000      	movs	r0, #0
    ec18:	bc30      	pop	{r4, r5}
    ec1a:	4770      	bx	lr
    ec1c:	4618      	mov	r0, r3
    ec1e:	e7dd      	b.n	ebdc <strncmp+0x68>
    ec20:	4618      	mov	r0, r3
    ec22:	e7da      	b.n	ebda <strncmp+0x66>
    ec24:	4628      	mov	r0, r5
    ec26:	e7d9      	b.n	ebdc <strncmp+0x68>

0000ec28 <_svfprintf_r>:
    ec28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec2c:	b0c9      	sub	sp, #292	; 0x124
    ec2e:	4691      	mov	r9, r2
    ec30:	9310      	str	r3, [sp, #64]	; 0x40
    ec32:	910c      	str	r1, [sp, #48]	; 0x30
    ec34:	900d      	str	r0, [sp, #52]	; 0x34
    ec36:	f002 fe25 	bl	11884 <_localeconv_r>
    ec3a:	6800      	ldr	r0, [r0, #0]
    ec3c:	9015      	str	r0, [sp, #84]	; 0x54
    ec3e:	f7f3 fd2d 	bl	269c <strlen>
    ec42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ec44:	9018      	str	r0, [sp, #96]	; 0x60
    ec46:	89a3      	ldrh	r3, [r4, #12]
    ec48:	061a      	lsls	r2, r3, #24
    ec4a:	d503      	bpl.n	ec54 <_svfprintf_r+0x2c>
    ec4c:	6923      	ldr	r3, [r4, #16]
    ec4e:	2b00      	cmp	r3, #0
    ec50:	f001 808d 	beq.w	fd6e <_svfprintf_r+0x1146>
    ec54:	ac38      	add	r4, sp, #224	; 0xe0
    ec56:	46a4      	mov	ip, r4
    ec58:	9408      	str	r4, [sp, #32]
    ec5a:	942b      	str	r4, [sp, #172]	; 0xac
    ec5c:	2500      	movs	r5, #0
    ec5e:	2400      	movs	r4, #0
    ec60:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    ec64:	2300      	movs	r3, #0
    ec66:	9311      	str	r3, [sp, #68]	; 0x44
    ec68:	932d      	str	r3, [sp, #180]	; 0xb4
    ec6a:	932c      	str	r3, [sp, #176]	; 0xb0
    ec6c:	931a      	str	r3, [sp, #104]	; 0x68
    ec6e:	9319      	str	r3, [sp, #100]	; 0x64
    ec70:	930e      	str	r3, [sp, #56]	; 0x38
    ec72:	4666      	mov	r6, ip
    ec74:	f899 3000 	ldrb.w	r3, [r9]
    ec78:	2b00      	cmp	r3, #0
    ec7a:	f000 80f8 	beq.w	ee6e <_svfprintf_r+0x246>
    ec7e:	2b25      	cmp	r3, #37	; 0x25
    ec80:	f000 80f5 	beq.w	ee6e <_svfprintf_r+0x246>
    ec84:	f109 0201 	add.w	r2, r9, #1
    ec88:	e001      	b.n	ec8e <_svfprintf_r+0x66>
    ec8a:	2b25      	cmp	r3, #37	; 0x25
    ec8c:	d004      	beq.n	ec98 <_svfprintf_r+0x70>
    ec8e:	4614      	mov	r4, r2
    ec90:	3201      	adds	r2, #1
    ec92:	7823      	ldrb	r3, [r4, #0]
    ec94:	2b00      	cmp	r3, #0
    ec96:	d1f8      	bne.n	ec8a <_svfprintf_r+0x62>
    ec98:	ebc9 0504 	rsb	r5, r9, r4
    ec9c:	b17d      	cbz	r5, ecbe <_svfprintf_r+0x96>
    ec9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    eca0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    eca2:	f8c6 9000 	str.w	r9, [r6]
    eca6:	3301      	adds	r3, #1
    eca8:	442a      	add	r2, r5
    ecaa:	2b07      	cmp	r3, #7
    ecac:	6075      	str	r5, [r6, #4]
    ecae:	922d      	str	r2, [sp, #180]	; 0xb4
    ecb0:	932c      	str	r3, [sp, #176]	; 0xb0
    ecb2:	f300 80c2 	bgt.w	ee3a <_svfprintf_r+0x212>
    ecb6:	3608      	adds	r6, #8
    ecb8:	980e      	ldr	r0, [sp, #56]	; 0x38
    ecba:	4428      	add	r0, r5
    ecbc:	900e      	str	r0, [sp, #56]	; 0x38
    ecbe:	7823      	ldrb	r3, [r4, #0]
    ecc0:	2b00      	cmp	r3, #0
    ecc2:	f000 80c2 	beq.w	ee4a <_svfprintf_r+0x222>
    ecc6:	2300      	movs	r3, #0
    ecc8:	f894 8001 	ldrb.w	r8, [r4, #1]
    eccc:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    ecd0:	461a      	mov	r2, r3
    ecd2:	930f      	str	r3, [sp, #60]	; 0x3c
    ecd4:	9309      	str	r3, [sp, #36]	; 0x24
    ecd6:	f104 0901 	add.w	r9, r4, #1
    ecda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ecde:	940a      	str	r4, [sp, #40]	; 0x28
    ece0:	f109 0901 	add.w	r9, r9, #1
    ece4:	f1a8 0320 	sub.w	r3, r8, #32
    ece8:	2b58      	cmp	r3, #88	; 0x58
    ecea:	f200 83c7 	bhi.w	f47c <_svfprintf_r+0x854>
    ecee:	e8df f013 	tbh	[pc, r3, lsl #1]
    ecf2:	026a      	.short	0x026a
    ecf4:	03c503c5 	.word	0x03c503c5
    ecf8:	03c50271 	.word	0x03c50271
    ecfc:	03c503c5 	.word	0x03c503c5
    ed00:	03c503c5 	.word	0x03c503c5
    ed04:	031403c5 	.word	0x031403c5
    ed08:	03c50364 	.word	0x03c50364
    ed0c:	00c0009d 	.word	0x00c0009d
    ed10:	027803c5 	.word	0x027803c5
    ed14:	027f027f 	.word	0x027f027f
    ed18:	027f027f 	.word	0x027f027f
    ed1c:	027f027f 	.word	0x027f027f
    ed20:	027f027f 	.word	0x027f027f
    ed24:	03c5027f 	.word	0x03c5027f
    ed28:	03c503c5 	.word	0x03c503c5
    ed2c:	03c503c5 	.word	0x03c503c5
    ed30:	03c503c5 	.word	0x03c503c5
    ed34:	03c503c5 	.word	0x03c503c5
    ed38:	029003c5 	.word	0x029003c5
    ed3c:	03c5036f 	.word	0x03c5036f
    ed40:	03c5036f 	.word	0x03c5036f
    ed44:	03c503c5 	.word	0x03c503c5
    ed48:	036803c5 	.word	0x036803c5
    ed4c:	03c503c5 	.word	0x03c503c5
    ed50:	03c50078 	.word	0x03c50078
    ed54:	03c503c5 	.word	0x03c503c5
    ed58:	03c503c5 	.word	0x03c503c5
    ed5c:	03c50059 	.word	0x03c50059
    ed60:	02af03c5 	.word	0x02af03c5
    ed64:	03c503c5 	.word	0x03c503c5
    ed68:	03c503c5 	.word	0x03c503c5
    ed6c:	03c503c5 	.word	0x03c503c5
    ed70:	03c503c5 	.word	0x03c503c5
    ed74:	03c503c5 	.word	0x03c503c5
    ed78:	03480337 	.word	0x03480337
    ed7c:	036f036f 	.word	0x036f036f
    ed80:	02ff036f 	.word	0x02ff036f
    ed84:	03c50348 	.word	0x03c50348
    ed88:	030803c5 	.word	0x030803c5
    ed8c:	02c503c5 	.word	0x02c503c5
    ed90:	0321007c 	.word	0x0321007c
    ed94:	03c503a5 	.word	0x03c503a5
    ed98:	03c502d9 	.word	0x03c502d9
    ed9c:	03c5005f 	.word	0x03c5005f
    eda0:	00de03c5 	.word	0x00de03c5
    eda4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    eda8:	f04c 0c10 	orr.w	ip, ip, #16
    edac:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    edb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    edb2:	06a2      	lsls	r2, r4, #26
    edb4:	f100 8356 	bmi.w	f464 <_svfprintf_r+0x83c>
    edb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    edba:	06e3      	lsls	r3, r4, #27
    edbc:	f100 85e0 	bmi.w	f980 <_svfprintf_r+0xd58>
    edc0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    edc4:	f01c 0f40 	tst.w	ip, #64	; 0x40
    edc8:	f000 85da 	beq.w	f980 <_svfprintf_r+0xd58>
    edcc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    edd0:	f8bc 4000 	ldrh.w	r4, [ip]
    edd4:	f10c 0c04 	add.w	ip, ip, #4
    edd8:	2500      	movs	r5, #0
    edda:	2301      	movs	r3, #1
    eddc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    ede0:	e08c      	b.n	eefc <_svfprintf_r+0x2d4>
    ede2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ede4:	f045 0510 	orr.w	r5, r5, #16
    ede8:	9509      	str	r5, [sp, #36]	; 0x24
    edea:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    edee:	f01c 0320 	ands.w	r3, ip, #32
    edf2:	f040 832c 	bne.w	f44e <_svfprintf_r+0x826>
    edf6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    edfa:	f01c 0210 	ands.w	r2, ip, #16
    edfe:	f040 85b8 	bne.w	f972 <_svfprintf_r+0xd4a>
    ee02:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ee06:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
    ee0a:	f000 85b2 	beq.w	f972 <_svfprintf_r+0xd4a>
    ee0e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    ee12:	f8bc 4000 	ldrh.w	r4, [ip]
    ee16:	f10c 0c04 	add.w	ip, ip, #4
    ee1a:	4613      	mov	r3, r2
    ee1c:	2500      	movs	r5, #0
    ee1e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    ee22:	e06b      	b.n	eefc <_svfprintf_r+0x2d4>
    ee24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    ee26:	9310      	str	r3, [sp, #64]	; 0x40
    ee28:	4264      	negs	r4, r4
    ee2a:	940f      	str	r4, [sp, #60]	; 0x3c
    ee2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ee2e:	f045 0504 	orr.w	r5, r5, #4
    ee32:	9509      	str	r5, [sp, #36]	; 0x24
    ee34:	f899 8000 	ldrb.w	r8, [r9]
    ee38:	e752      	b.n	ece0 <_svfprintf_r+0xb8>
    ee3a:	980d      	ldr	r0, [sp, #52]	; 0x34
    ee3c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ee3e:	aa2b      	add	r2, sp, #172	; 0xac
    ee40:	f003 f8e0 	bl	12004 <__ssprint_r>
    ee44:	b940      	cbnz	r0, ee58 <_svfprintf_r+0x230>
    ee46:	ae38      	add	r6, sp, #224	; 0xe0
    ee48:	e736      	b.n	ecb8 <_svfprintf_r+0x90>
    ee4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ee4c:	b123      	cbz	r3, ee58 <_svfprintf_r+0x230>
    ee4e:	980d      	ldr	r0, [sp, #52]	; 0x34
    ee50:	990c      	ldr	r1, [sp, #48]	; 0x30
    ee52:	aa2b      	add	r2, sp, #172	; 0xac
    ee54:	f003 f8d6 	bl	12004 <__ssprint_r>
    ee58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ee5a:	980e      	ldr	r0, [sp, #56]	; 0x38
    ee5c:	89a3      	ldrh	r3, [r4, #12]
    ee5e:	f013 0f40 	tst.w	r3, #64	; 0x40
    ee62:	bf18      	it	ne
    ee64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ee68:	b049      	add	sp, #292	; 0x124
    ee6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee6e:	464c      	mov	r4, r9
    ee70:	e725      	b.n	ecbe <_svfprintf_r+0x96>
    ee72:	f899 8000 	ldrb.w	r8, [r9]
    ee76:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
    ee7a:	f109 0001 	add.w	r0, r9, #1
    ee7e:	f001 8118 	beq.w	100b2 <_svfprintf_r+0x148a>
    ee82:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    ee86:	2b09      	cmp	r3, #9
    ee88:	bf98      	it	ls
    ee8a:	2100      	movls	r1, #0
    ee8c:	f201 8077 	bhi.w	ff7e <_svfprintf_r+0x1356>
    ee90:	f810 8b01 	ldrb.w	r8, [r0], #1
    ee94:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ee98:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    ee9c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    eea0:	2b09      	cmp	r3, #9
    eea2:	d9f5      	bls.n	ee90 <_svfprintf_r+0x268>
    eea4:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    eea8:	910a      	str	r1, [sp, #40]	; 0x28
    eeaa:	4681      	mov	r9, r0
    eeac:	e71a      	b.n	ece4 <_svfprintf_r+0xbc>
    eeae:	9d09      	ldr	r5, [sp, #36]	; 0x24
    eeb0:	4ca1      	ldr	r4, [pc, #644]	; (f138 <_svfprintf_r+0x510>)
    eeb2:	941a      	str	r4, [sp, #104]	; 0x68
    eeb4:	06af      	lsls	r7, r5, #26
    eeb6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    eeba:	f140 81d1 	bpl.w	f260 <_svfprintf_r+0x638>
    eebe:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    eec2:	f10c 0307 	add.w	r3, ip, #7
    eec6:	f023 0307 	bic.w	r3, r3, #7
    eeca:	f103 0408 	add.w	r4, r3, #8
    eece:	9410      	str	r4, [sp, #64]	; 0x40
    eed0:	e9d3 4500 	ldrd	r4, r5, [r3]
    eed4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    eed8:	f01c 0f01 	tst.w	ip, #1
    eedc:	f000 8464 	beq.w	f7a8 <_svfprintf_r+0xb80>
    eee0:	ea54 0005 	orrs.w	r0, r4, r5
    eee4:	f000 8460 	beq.w	f7a8 <_svfprintf_r+0xb80>
    eee8:	2330      	movs	r3, #48	; 0x30
    eeea:	f04c 0c02 	orr.w	ip, ip, #2
    eeee:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    eef2:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
    eef6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    eefa:	2302      	movs	r3, #2
    eefc:	f04f 0a00 	mov.w	sl, #0
    ef00:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    ef04:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef06:	2900      	cmp	r1, #0
    ef08:	db05      	blt.n	ef16 <_svfprintf_r+0x2ee>
    ef0a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ef0e:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
    ef12:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    ef16:	ea54 0005 	orrs.w	r0, r4, r5
    ef1a:	f040 82c7 	bne.w	f4ac <_svfprintf_r+0x884>
    ef1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef20:	2900      	cmp	r1, #0
    ef22:	f040 82c3 	bne.w	f4ac <_svfprintf_r+0x884>
    ef26:	2b00      	cmp	r3, #0
    ef28:	f040 843a 	bne.w	f7a0 <_svfprintf_r+0xb78>
    ef2c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ef30:	f01c 0f01 	tst.w	ip, #1
    ef34:	f000 8434 	beq.w	f7a0 <_svfprintf_r+0xb78>
    ef38:	af48      	add	r7, sp, #288	; 0x120
    ef3a:	2330      	movs	r3, #48	; 0x30
    ef3c:	f807 3d41 	strb.w	r3, [r7, #-65]!
    ef40:	9d08      	ldr	r5, [sp, #32]
    ef42:	1bec      	subs	r4, r5, r7
    ef44:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    ef48:	2500      	movs	r5, #0
    ef4a:	4564      	cmp	r4, ip
    ef4c:	bfa8      	it	ge
    ef4e:	46a4      	movge	ip, r4
    ef50:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    ef54:	9514      	str	r5, [sp, #80]	; 0x50
    ef56:	f1ba 0f00 	cmp.w	sl, #0
    ef5a:	d002      	beq.n	ef62 <_svfprintf_r+0x33a>
    ef5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ef5e:	3501      	adds	r5, #1
    ef60:	950b      	str	r5, [sp, #44]	; 0x2c
    ef62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef64:	f013 0302 	ands.w	r3, r3, #2
    ef68:	9312      	str	r3, [sp, #72]	; 0x48
    ef6a:	d002      	beq.n	ef72 <_svfprintf_r+0x34a>
    ef6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ef6e:	3502      	adds	r5, #2
    ef70:	950b      	str	r5, [sp, #44]	; 0x2c
    ef72:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ef76:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
    ef7a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    ef7e:	f040 8292 	bne.w	f4a6 <_svfprintf_r+0x87e>
    ef82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    ef84:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    ef88:	ebcc 0b05 	rsb	fp, ip, r5
    ef8c:	f1bb 0f00 	cmp.w	fp, #0
    ef90:	f340 8289 	ble.w	f4a6 <_svfprintf_r+0x87e>
    ef94:	f1bb 0f10 	cmp.w	fp, #16
    ef98:	992d      	ldr	r1, [sp, #180]	; 0xb4
    ef9a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    ef9c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; f140 <_svfprintf_r+0x518>
    efa0:	dd2c      	ble.n	effc <_svfprintf_r+0x3d4>
    efa2:	971b      	str	r7, [sp, #108]	; 0x6c
    efa4:	4630      	mov	r0, r6
    efa6:	4657      	mov	r7, sl
    efa8:	2510      	movs	r5, #16
    efaa:	46ca      	mov	sl, r9
    efac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    efae:	46a1      	mov	r9, r4
    efb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    efb2:	e006      	b.n	efc2 <_svfprintf_r+0x39a>
    efb4:	f1ab 0b10 	sub.w	fp, fp, #16
    efb8:	f1bb 0f10 	cmp.w	fp, #16
    efbc:	f100 0008 	add.w	r0, r0, #8
    efc0:	dd17      	ble.n	eff2 <_svfprintf_r+0x3ca>
    efc2:	3201      	adds	r2, #1
    efc4:	3110      	adds	r1, #16
    efc6:	2a07      	cmp	r2, #7
    efc8:	912d      	str	r1, [sp, #180]	; 0xb4
    efca:	922c      	str	r2, [sp, #176]	; 0xb0
    efcc:	6007      	str	r7, [r0, #0]
    efce:	6045      	str	r5, [r0, #4]
    efd0:	ddf0      	ble.n	efb4 <_svfprintf_r+0x38c>
    efd2:	4620      	mov	r0, r4
    efd4:	4631      	mov	r1, r6
    efd6:	aa2b      	add	r2, sp, #172	; 0xac
    efd8:	f003 f814 	bl	12004 <__ssprint_r>
    efdc:	2800      	cmp	r0, #0
    efde:	f47f af3b 	bne.w	ee58 <_svfprintf_r+0x230>
    efe2:	f1ab 0b10 	sub.w	fp, fp, #16
    efe6:	f1bb 0f10 	cmp.w	fp, #16
    efea:	992d      	ldr	r1, [sp, #180]	; 0xb4
    efec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    efee:	a838      	add	r0, sp, #224	; 0xe0
    eff0:	dce7      	bgt.n	efc2 <_svfprintf_r+0x39a>
    eff2:	464c      	mov	r4, r9
    eff4:	46d1      	mov	r9, sl
    eff6:	46ba      	mov	sl, r7
    eff8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    effa:	4606      	mov	r6, r0
    effc:	3201      	adds	r2, #1
    effe:	eb0b 0c01 	add.w	ip, fp, r1
    f002:	2a07      	cmp	r2, #7
    f004:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f008:	922c      	str	r2, [sp, #176]	; 0xb0
    f00a:	e886 0c00 	stmia.w	r6, {sl, fp}
    f00e:	f300 841c 	bgt.w	f84a <_svfprintf_r+0xc22>
    f012:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f016:	3608      	adds	r6, #8
    f018:	f1ba 0f00 	cmp.w	sl, #0
    f01c:	d00f      	beq.n	f03e <_svfprintf_r+0x416>
    f01e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f020:	3301      	adds	r3, #1
    f022:	f10c 0c01 	add.w	ip, ip, #1
    f026:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
    f02a:	2201      	movs	r2, #1
    f02c:	2b07      	cmp	r3, #7
    f02e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f032:	932c      	str	r3, [sp, #176]	; 0xb0
    f034:	e886 0006 	stmia.w	r6, {r1, r2}
    f038:	f300 839a 	bgt.w	f770 <_svfprintf_r+0xb48>
    f03c:	3608      	adds	r6, #8
    f03e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f040:	b173      	cbz	r3, f060 <_svfprintf_r+0x438>
    f042:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f044:	3301      	adds	r3, #1
    f046:	f10c 0c02 	add.w	ip, ip, #2
    f04a:	a924      	add	r1, sp, #144	; 0x90
    f04c:	2202      	movs	r2, #2
    f04e:	2b07      	cmp	r3, #7
    f050:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f054:	932c      	str	r3, [sp, #176]	; 0xb0
    f056:	e886 0006 	stmia.w	r6, {r1, r2}
    f05a:	f300 8395 	bgt.w	f788 <_svfprintf_r+0xb60>
    f05e:	3608      	adds	r6, #8
    f060:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    f062:	2d80      	cmp	r5, #128	; 0x80
    f064:	f000 82cc 	beq.w	f600 <_svfprintf_r+0x9d8>
    f068:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f06a:	ebc4 0a05 	rsb	sl, r4, r5
    f06e:	f1ba 0f00 	cmp.w	sl, #0
    f072:	dd3b      	ble.n	f0ec <_svfprintf_r+0x4c4>
    f074:	f1ba 0f10 	cmp.w	sl, #16
    f078:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f07a:	4d30      	ldr	r5, [pc, #192]	; (f13c <_svfprintf_r+0x514>)
    f07c:	dd2b      	ble.n	f0d6 <_svfprintf_r+0x4ae>
    f07e:	940a      	str	r4, [sp, #40]	; 0x28
    f080:	4632      	mov	r2, r6
    f082:	f04f 0b10 	mov.w	fp, #16
    f086:	462e      	mov	r6, r5
    f088:	4661      	mov	r1, ip
    f08a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    f08c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f08e:	e006      	b.n	f09e <_svfprintf_r+0x476>
    f090:	f1aa 0a10 	sub.w	sl, sl, #16
    f094:	f1ba 0f10 	cmp.w	sl, #16
    f098:	f102 0208 	add.w	r2, r2, #8
    f09c:	dd17      	ble.n	f0ce <_svfprintf_r+0x4a6>
    f09e:	3301      	adds	r3, #1
    f0a0:	3110      	adds	r1, #16
    f0a2:	2b07      	cmp	r3, #7
    f0a4:	912d      	str	r1, [sp, #180]	; 0xb4
    f0a6:	932c      	str	r3, [sp, #176]	; 0xb0
    f0a8:	e882 0840 	stmia.w	r2, {r6, fp}
    f0ac:	ddf0      	ble.n	f090 <_svfprintf_r+0x468>
    f0ae:	4620      	mov	r0, r4
    f0b0:	4629      	mov	r1, r5
    f0b2:	aa2b      	add	r2, sp, #172	; 0xac
    f0b4:	f002 ffa6 	bl	12004 <__ssprint_r>
    f0b8:	2800      	cmp	r0, #0
    f0ba:	f47f aecd 	bne.w	ee58 <_svfprintf_r+0x230>
    f0be:	f1aa 0a10 	sub.w	sl, sl, #16
    f0c2:	f1ba 0f10 	cmp.w	sl, #16
    f0c6:	992d      	ldr	r1, [sp, #180]	; 0xb4
    f0c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f0ca:	aa38      	add	r2, sp, #224	; 0xe0
    f0cc:	dce7      	bgt.n	f09e <_svfprintf_r+0x476>
    f0ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f0d0:	4635      	mov	r5, r6
    f0d2:	468c      	mov	ip, r1
    f0d4:	4616      	mov	r6, r2
    f0d6:	3301      	adds	r3, #1
    f0d8:	44d4      	add	ip, sl
    f0da:	2b07      	cmp	r3, #7
    f0dc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f0e0:	932c      	str	r3, [sp, #176]	; 0xb0
    f0e2:	e886 0420 	stmia.w	r6, {r5, sl}
    f0e6:	f300 8337 	bgt.w	f758 <_svfprintf_r+0xb30>
    f0ea:	3608      	adds	r6, #8
    f0ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f0ee:	05ed      	lsls	r5, r5, #23
    f0f0:	f100 8226 	bmi.w	f540 <_svfprintf_r+0x918>
    f0f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f0f6:	6037      	str	r7, [r6, #0]
    f0f8:	3301      	adds	r3, #1
    f0fa:	44a4      	add	ip, r4
    f0fc:	2b07      	cmp	r3, #7
    f0fe:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f102:	6074      	str	r4, [r6, #4]
    f104:	932c      	str	r3, [sp, #176]	; 0xb0
    f106:	f300 8311 	bgt.w	f72c <_svfprintf_r+0xb04>
    f10a:	3608      	adds	r6, #8
    f10c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f10e:	0763      	lsls	r3, r4, #29
    f110:	d549      	bpl.n	f1a6 <_svfprintf_r+0x57e>
    f112:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f114:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f116:	1a2c      	subs	r4, r5, r0
    f118:	2c00      	cmp	r4, #0
    f11a:	dd44      	ble.n	f1a6 <_svfprintf_r+0x57e>
    f11c:	2c10      	cmp	r4, #16
    f11e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f120:	f8df a01c 	ldr.w	sl, [pc, #28]	; f140 <_svfprintf_r+0x518>
    f124:	dd2b      	ble.n	f17e <_svfprintf_r+0x556>
    f126:	4657      	mov	r7, sl
    f128:	2510      	movs	r5, #16
    f12a:	4662      	mov	r2, ip
    f12c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    f130:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    f134:	e00b      	b.n	f14e <_svfprintf_r+0x526>
    f136:	bf00      	nop
    f138:	00014194 	.word	0x00014194
    f13c:	00014160 	.word	0x00014160
    f140:	000141b4 	.word	0x000141b4
    f144:	3c10      	subs	r4, #16
    f146:	2c10      	cmp	r4, #16
    f148:	f106 0608 	add.w	r6, r6, #8
    f14c:	dd15      	ble.n	f17a <_svfprintf_r+0x552>
    f14e:	3301      	adds	r3, #1
    f150:	3210      	adds	r2, #16
    f152:	2b07      	cmp	r3, #7
    f154:	922d      	str	r2, [sp, #180]	; 0xb4
    f156:	932c      	str	r3, [sp, #176]	; 0xb0
    f158:	6037      	str	r7, [r6, #0]
    f15a:	6075      	str	r5, [r6, #4]
    f15c:	ddf2      	ble.n	f144 <_svfprintf_r+0x51c>
    f15e:	4650      	mov	r0, sl
    f160:	4641      	mov	r1, r8
    f162:	aa2b      	add	r2, sp, #172	; 0xac
    f164:	f002 ff4e 	bl	12004 <__ssprint_r>
    f168:	2800      	cmp	r0, #0
    f16a:	f47f ae75 	bne.w	ee58 <_svfprintf_r+0x230>
    f16e:	3c10      	subs	r4, #16
    f170:	2c10      	cmp	r4, #16
    f172:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f174:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f176:	ae38      	add	r6, sp, #224	; 0xe0
    f178:	dce9      	bgt.n	f14e <_svfprintf_r+0x526>
    f17a:	4694      	mov	ip, r2
    f17c:	46ba      	mov	sl, r7
    f17e:	3301      	adds	r3, #1
    f180:	44a4      	add	ip, r4
    f182:	2b07      	cmp	r3, #7
    f184:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f188:	932c      	str	r3, [sp, #176]	; 0xb0
    f18a:	f8c6 a000 	str.w	sl, [r6]
    f18e:	6074      	str	r4, [r6, #4]
    f190:	dd09      	ble.n	f1a6 <_svfprintf_r+0x57e>
    f192:	980d      	ldr	r0, [sp, #52]	; 0x34
    f194:	990c      	ldr	r1, [sp, #48]	; 0x30
    f196:	aa2b      	add	r2, sp, #172	; 0xac
    f198:	f002 ff34 	bl	12004 <__ssprint_r>
    f19c:	2800      	cmp	r0, #0
    f19e:	f47f ae5b 	bne.w	ee58 <_svfprintf_r+0x230>
    f1a2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f1a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f1a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f1aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f1ac:	42a8      	cmp	r0, r5
    f1ae:	bfac      	ite	ge
    f1b0:	1824      	addge	r4, r4, r0
    f1b2:	1964      	addlt	r4, r4, r5
    f1b4:	940e      	str	r4, [sp, #56]	; 0x38
    f1b6:	f1bc 0f00 	cmp.w	ip, #0
    f1ba:	f040 82c3 	bne.w	f744 <_svfprintf_r+0xb1c>
    f1be:	2300      	movs	r3, #0
    f1c0:	932c      	str	r3, [sp, #176]	; 0xb0
    f1c2:	ae38      	add	r6, sp, #224	; 0xe0
    f1c4:	e556      	b.n	ec74 <_svfprintf_r+0x4c>
    f1c6:	f899 8000 	ldrb.w	r8, [r9]
    f1ca:	2a00      	cmp	r2, #0
    f1cc:	f47f ad88 	bne.w	ece0 <_svfprintf_r+0xb8>
    f1d0:	2220      	movs	r2, #32
    f1d2:	e585      	b.n	ece0 <_svfprintf_r+0xb8>
    f1d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f1d6:	f045 0501 	orr.w	r5, r5, #1
    f1da:	9509      	str	r5, [sp, #36]	; 0x24
    f1dc:	f899 8000 	ldrb.w	r8, [r9]
    f1e0:	e57e      	b.n	ece0 <_svfprintf_r+0xb8>
    f1e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f1e4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    f1e8:	9509      	str	r5, [sp, #36]	; 0x24
    f1ea:	f899 8000 	ldrb.w	r8, [r9]
    f1ee:	e577      	b.n	ece0 <_svfprintf_r+0xb8>
    f1f0:	2400      	movs	r4, #0
    f1f2:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    f1f6:	940f      	str	r4, [sp, #60]	; 0x3c
    f1f8:	4621      	mov	r1, r4
    f1fa:	f819 8b01 	ldrb.w	r8, [r9], #1
    f1fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f202:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    f206:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    f20a:	2b09      	cmp	r3, #9
    f20c:	d9f5      	bls.n	f1fa <_svfprintf_r+0x5d2>
    f20e:	910f      	str	r1, [sp, #60]	; 0x3c
    f210:	e568      	b.n	ece4 <_svfprintf_r+0xbc>
    f212:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f216:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f21a:	f04c 0c10 	orr.w	ip, ip, #16
    f21e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f222:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f224:	06a3      	lsls	r3, r4, #26
    f226:	f140 80b2 	bpl.w	f38e <_svfprintf_r+0x766>
    f22a:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f22c:	1de9      	adds	r1, r5, #7
    f22e:	f021 0107 	bic.w	r1, r1, #7
    f232:	e9d1 2300 	ldrd	r2, r3, [r1]
    f236:	3108      	adds	r1, #8
    f238:	9110      	str	r1, [sp, #64]	; 0x40
    f23a:	4614      	mov	r4, r2
    f23c:	461d      	mov	r5, r3
    f23e:	2a00      	cmp	r2, #0
    f240:	f173 0000 	sbcs.w	r0, r3, #0
    f244:	f2c0 838b 	blt.w	f95e <_svfprintf_r+0xd36>
    f248:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f24c:	2301      	movs	r3, #1
    f24e:	e659      	b.n	ef04 <_svfprintf_r+0x2dc>
    f250:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f252:	4cb7      	ldr	r4, [pc, #732]	; (f530 <_svfprintf_r+0x908>)
    f254:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f258:	06af      	lsls	r7, r5, #26
    f25a:	941a      	str	r4, [sp, #104]	; 0x68
    f25c:	f53f ae2f 	bmi.w	eebe <_svfprintf_r+0x296>
    f260:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f262:	06ed      	lsls	r5, r5, #27
    f264:	f140 845d 	bpl.w	fb22 <_svfprintf_r+0xefa>
    f268:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f26c:	f8dc 4000 	ldr.w	r4, [ip]
    f270:	f10c 0c04 	add.w	ip, ip, #4
    f274:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    f278:	2500      	movs	r5, #0
    f27a:	e62b      	b.n	eed4 <_svfprintf_r+0x2ac>
    f27c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f280:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f284:	f01c 0f20 	tst.w	ip, #32
    f288:	f000 843d 	beq.w	fb06 <_svfprintf_r+0xede>
    f28c:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f28e:	6821      	ldr	r1, [r4, #0]
    f290:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f292:	17e5      	asrs	r5, r4, #31
    f294:	462b      	mov	r3, r5
    f296:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f298:	4622      	mov	r2, r4
    f29a:	3504      	adds	r5, #4
    f29c:	9510      	str	r5, [sp, #64]	; 0x40
    f29e:	e9c1 2300 	strd	r2, r3, [r1]
    f2a2:	e4e7      	b.n	ec74 <_svfprintf_r+0x4c>
    f2a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f2a6:	6827      	ldr	r7, [r4, #0]
    f2a8:	f04f 0a00 	mov.w	sl, #0
    f2ac:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    f2b0:	1d25      	adds	r5, r4, #4
    f2b2:	2f00      	cmp	r7, #0
    f2b4:	f000 85f5 	beq.w	fea2 <_svfprintf_r+0x127a>
    f2b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f2ba:	2c00      	cmp	r4, #0
    f2bc:	4638      	mov	r0, r7
    f2be:	f2c0 85a7 	blt.w	fe10 <_svfprintf_r+0x11e8>
    f2c2:	4651      	mov	r1, sl
    f2c4:	4622      	mov	r2, r4
    f2c6:	f7fe fee7 	bl	e098 <memchr>
    f2ca:	2800      	cmp	r0, #0
    f2cc:	f000 861f 	beq.w	ff0e <_svfprintf_r+0x12e6>
    f2d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f2d2:	9510      	str	r5, [sp, #64]	; 0x40
    f2d4:	1bc0      	subs	r0, r0, r7
    f2d6:	42a0      	cmp	r0, r4
    f2d8:	bfb8      	it	lt
    f2da:	4604      	movlt	r4, r0
    f2dc:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
    f2e0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    f2e4:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    f2e8:	950b      	str	r5, [sp, #44]	; 0x2c
    f2ea:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f2ee:	e632      	b.n	ef56 <_svfprintf_r+0x32e>
    f2f0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f2f4:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
    f2f8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f2fc:	f899 8000 	ldrb.w	r8, [r9]
    f300:	e4ee      	b.n	ece0 <_svfprintf_r+0xb8>
    f302:	f899 8000 	ldrb.w	r8, [r9]
    f306:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    f30a:	464b      	mov	r3, r9
    f30c:	f000 848b 	beq.w	fc26 <_svfprintf_r+0xffe>
    f310:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f312:	f045 0510 	orr.w	r5, r5, #16
    f316:	9509      	str	r5, [sp, #36]	; 0x24
    f318:	e4e2      	b.n	ece0 <_svfprintf_r+0xb8>
    f31a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f31c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f31e:	6824      	ldr	r4, [r4, #0]
    f320:	940f      	str	r4, [sp, #60]	; 0x3c
    f322:	2c00      	cmp	r4, #0
    f324:	f105 0304 	add.w	r3, r5, #4
    f328:	f6ff ad7c 	blt.w	ee24 <_svfprintf_r+0x1fc>
    f32c:	9310      	str	r3, [sp, #64]	; 0x40
    f32e:	f899 8000 	ldrb.w	r8, [r9]
    f332:	e4d5      	b.n	ece0 <_svfprintf_r+0xb8>
    f334:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f336:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f33a:	487e      	ldr	r0, [pc, #504]	; (f534 <_svfprintf_r+0x90c>)
    f33c:	6814      	ldr	r4, [r2, #0]
    f33e:	901a      	str	r0, [sp, #104]	; 0x68
    f340:	2330      	movs	r3, #48	; 0x30
    f342:	1d15      	adds	r5, r2, #4
    f344:	f04f 0878 	mov.w	r8, #120	; 0x78
    f348:	f04c 0c02 	orr.w	ip, ip, #2
    f34c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    f350:	9510      	str	r5, [sp, #64]	; 0x40
    f352:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f356:	2500      	movs	r5, #0
    f358:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
    f35c:	2302      	movs	r3, #2
    f35e:	e5cd      	b.n	eefc <_svfprintf_r+0x2d4>
    f360:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f362:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f364:	6812      	ldr	r2, [r2, #0]
    f366:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
    f36a:	2300      	movs	r3, #0
    f36c:	2401      	movs	r4, #1
    f36e:	3504      	adds	r5, #4
    f370:	469a      	mov	sl, r3
    f372:	940b      	str	r4, [sp, #44]	; 0x2c
    f374:	9510      	str	r5, [sp, #64]	; 0x40
    f376:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    f37a:	930a      	str	r3, [sp, #40]	; 0x28
    f37c:	9314      	str	r3, [sp, #80]	; 0x50
    f37e:	af2e      	add	r7, sp, #184	; 0xb8
    f380:	e5ef      	b.n	ef62 <_svfprintf_r+0x33a>
    f382:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f384:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f388:	06a3      	lsls	r3, r4, #26
    f38a:	f53f af4e 	bmi.w	f22a <_svfprintf_r+0x602>
    f38e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f392:	f01c 0f10 	tst.w	ip, #16
    f396:	f040 82d2 	bne.w	f93e <_svfprintf_r+0xd16>
    f39a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f39c:	0667      	lsls	r7, r4, #25
    f39e:	f140 82ce 	bpl.w	f93e <_svfprintf_r+0xd16>
    f3a2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f3a6:	f9bc 4000 	ldrsh.w	r4, [ip]
    f3aa:	f10c 0c04 	add.w	ip, ip, #4
    f3ae:	17e5      	asrs	r5, r4, #31
    f3b0:	4622      	mov	r2, r4
    f3b2:	462b      	mov	r3, r5
    f3b4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    f3b8:	e741      	b.n	f23e <_svfprintf_r+0x616>
    f3ba:	f899 8000 	ldrb.w	r8, [r9]
    f3be:	222b      	movs	r2, #43	; 0x2b
    f3c0:	e48e      	b.n	ece0 <_svfprintf_r+0xb8>
    f3c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f3c4:	f045 0508 	orr.w	r5, r5, #8
    f3c8:	9509      	str	r5, [sp, #36]	; 0x24
    f3ca:	f899 8000 	ldrb.w	r8, [r9]
    f3ce:	e487      	b.n	ece0 <_svfprintf_r+0xb8>
    f3d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f3d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f3d4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f3d8:	1deb      	adds	r3, r5, #7
    f3da:	0725      	lsls	r5, r4, #28
    f3dc:	f023 0307 	bic.w	r3, r3, #7
    f3e0:	f140 838a 	bpl.w	faf8 <_svfprintf_r+0xed0>
    f3e4:	e9d3 4500 	ldrd	r4, r5, [r3]
    f3e8:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    f3ec:	f103 0c08 	add.w	ip, r3, #8
    f3f0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    f3f4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    f3f8:	f7fc fc7e 	bl	bcf8 <__fpclassifyd>
    f3fc:	2801      	cmp	r0, #1
    f3fe:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    f402:	f040 835f 	bne.w	fac4 <_svfprintf_r+0xe9c>
    f406:	2200      	movs	r2, #0
    f408:	2300      	movs	r3, #0
    f40a:	f7fd f95d 	bl	c6c8 <__aeabi_dcmplt>
    f40e:	2800      	cmp	r0, #0
    f410:	f040 856d 	bne.w	feee <_svfprintf_r+0x12c6>
    f414:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f418:	2503      	movs	r5, #3
    f41a:	950b      	str	r5, [sp, #44]	; 0x2c
    f41c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f41e:	4f46      	ldr	r7, [pc, #280]	; (f538 <_svfprintf_r+0x910>)
    f420:	4b46      	ldr	r3, [pc, #280]	; (f53c <_svfprintf_r+0x914>)
    f422:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    f426:	2400      	movs	r4, #0
    f428:	9509      	str	r5, [sp, #36]	; 0x24
    f42a:	2500      	movs	r5, #0
    f42c:	940a      	str	r4, [sp, #40]	; 0x28
    f42e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    f432:	bfd8      	it	le
    f434:	461f      	movle	r7, r3
    f436:	2403      	movs	r4, #3
    f438:	9514      	str	r5, [sp, #80]	; 0x50
    f43a:	e58c      	b.n	ef56 <_svfprintf_r+0x32e>
    f43c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f440:	f04c 0c20 	orr.w	ip, ip, #32
    f444:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f448:	f899 8000 	ldrb.w	r8, [r9]
    f44c:	e448      	b.n	ece0 <_svfprintf_r+0xb8>
    f44e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f450:	1de3      	adds	r3, r4, #7
    f452:	f023 0307 	bic.w	r3, r3, #7
    f456:	f103 0508 	add.w	r5, r3, #8
    f45a:	9510      	str	r5, [sp, #64]	; 0x40
    f45c:	e9d3 4500 	ldrd	r4, r5, [r3]
    f460:	2300      	movs	r3, #0
    f462:	e54b      	b.n	eefc <_svfprintf_r+0x2d4>
    f464:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f466:	1deb      	adds	r3, r5, #7
    f468:	f023 0307 	bic.w	r3, r3, #7
    f46c:	f103 0c08 	add.w	ip, r3, #8
    f470:	e9d3 4500 	ldrd	r4, r5, [r3]
    f474:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    f478:	2301      	movs	r3, #1
    f47a:	e53f      	b.n	eefc <_svfprintf_r+0x2d4>
    f47c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    f480:	f1b8 0f00 	cmp.w	r8, #0
    f484:	f43f ace1 	beq.w	ee4a <_svfprintf_r+0x222>
    f488:	2300      	movs	r3, #0
    f48a:	f04f 0c01 	mov.w	ip, #1
    f48e:	469a      	mov	sl, r3
    f490:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    f494:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
    f498:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    f49c:	930a      	str	r3, [sp, #40]	; 0x28
    f49e:	9314      	str	r3, [sp, #80]	; 0x50
    f4a0:	4664      	mov	r4, ip
    f4a2:	af2e      	add	r7, sp, #184	; 0xb8
    f4a4:	e55d      	b.n	ef62 <_svfprintf_r+0x33a>
    f4a6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f4aa:	e5b5      	b.n	f018 <_svfprintf_r+0x3f0>
    f4ac:	2b01      	cmp	r3, #1
    f4ae:	f000 80ec 	beq.w	f68a <_svfprintf_r+0xa62>
    f4b2:	2b02      	cmp	r3, #2
    f4b4:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
    f4b8:	d118      	bne.n	f4ec <_svfprintf_r+0x8c4>
    f4ba:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
    f4be:	4619      	mov	r1, r3
    f4c0:	f004 000f 	and.w	r0, r4, #15
    f4c4:	0922      	lsrs	r2, r4, #4
    f4c6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
    f4ca:	460f      	mov	r7, r1
    f4cc:	092b      	lsrs	r3, r5, #4
    f4ce:	f81c 1000 	ldrb.w	r1, [ip, r0]
    f4d2:	7039      	strb	r1, [r7, #0]
    f4d4:	ea52 0003 	orrs.w	r0, r2, r3
    f4d8:	4614      	mov	r4, r2
    f4da:	461d      	mov	r5, r3
    f4dc:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
    f4e0:	d1ee      	bne.n	f4c0 <_svfprintf_r+0x898>
    f4e2:	9d08      	ldr	r5, [sp, #32]
    f4e4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    f4e8:	1bec      	subs	r4, r5, r7
    f4ea:	e52b      	b.n	ef44 <_svfprintf_r+0x31c>
    f4ec:	08e0      	lsrs	r0, r4, #3
    f4ee:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
    f4f2:	f004 0207 	and.w	r2, r4, #7
    f4f6:	08e9      	lsrs	r1, r5, #3
    f4f8:	3230      	adds	r2, #48	; 0x30
    f4fa:	ea50 0c01 	orrs.w	ip, r0, r1
    f4fe:	461f      	mov	r7, r3
    f500:	701a      	strb	r2, [r3, #0]
    f502:	4604      	mov	r4, r0
    f504:	460d      	mov	r5, r1
    f506:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    f50a:	d1ef      	bne.n	f4ec <_svfprintf_r+0x8c4>
    f50c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f50e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    f512:	07e0      	lsls	r0, r4, #31
    f514:	4639      	mov	r1, r7
    f516:	f140 80c1 	bpl.w	f69c <_svfprintf_r+0xa74>
    f51a:	2a30      	cmp	r2, #48	; 0x30
    f51c:	f000 80be 	beq.w	f69c <_svfprintf_r+0xa74>
    f520:	9d08      	ldr	r5, [sp, #32]
    f522:	461f      	mov	r7, r3
    f524:	2330      	movs	r3, #48	; 0x30
    f526:	1bec      	subs	r4, r5, r7
    f528:	f801 3c01 	strb.w	r3, [r1, #-1]
    f52c:	e50a      	b.n	ef44 <_svfprintf_r+0x31c>
    f52e:	bf00      	nop
    f530:	00014180 	.word	0x00014180
    f534:	00014194 	.word	0x00014194
    f538:	00014174 	.word	0x00014174
    f53c:	00014170 	.word	0x00014170
    f540:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    f544:	f340 80ad 	ble.w	f6a2 <_svfprintf_r+0xa7a>
    f548:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    f54c:	2200      	movs	r2, #0
    f54e:	2300      	movs	r3, #0
    f550:	f8cd c01c 	str.w	ip, [sp, #28]
    f554:	f7fd f8ae 	bl	c6b4 <__aeabi_dcmpeq>
    f558:	f8dd c01c 	ldr.w	ip, [sp, #28]
    f55c:	2800      	cmp	r0, #0
    f55e:	f000 8126 	beq.w	f7ae <_svfprintf_r+0xb86>
    f562:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f564:	4aaa      	ldr	r2, [pc, #680]	; (f810 <_svfprintf_r+0xbe8>)
    f566:	6032      	str	r2, [r6, #0]
    f568:	3301      	adds	r3, #1
    f56a:	f10c 0c01 	add.w	ip, ip, #1
    f56e:	2201      	movs	r2, #1
    f570:	2b07      	cmp	r3, #7
    f572:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f576:	932c      	str	r3, [sp, #176]	; 0xb0
    f578:	6072      	str	r2, [r6, #4]
    f57a:	f300 82f7 	bgt.w	fb6c <_svfprintf_r+0xf44>
    f57e:	3608      	adds	r6, #8
    f580:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f582:	9c11      	ldr	r4, [sp, #68]	; 0x44
    f584:	42a3      	cmp	r3, r4
    f586:	db03      	blt.n	f590 <_svfprintf_r+0x968>
    f588:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f58a:	07ec      	lsls	r4, r5, #31
    f58c:	f57f adbe 	bpl.w	f10c <_svfprintf_r+0x4e4>
    f590:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f592:	9d18      	ldr	r5, [sp, #96]	; 0x60
    f594:	9c15      	ldr	r4, [sp, #84]	; 0x54
    f596:	6034      	str	r4, [r6, #0]
    f598:	3301      	adds	r3, #1
    f59a:	44ac      	add	ip, r5
    f59c:	2b07      	cmp	r3, #7
    f59e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f5a2:	6075      	str	r5, [r6, #4]
    f5a4:	932c      	str	r3, [sp, #176]	; 0xb0
    f5a6:	f300 8348 	bgt.w	fc3a <_svfprintf_r+0x1012>
    f5aa:	3608      	adds	r6, #8
    f5ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f5ae:	1e6c      	subs	r4, r5, #1
    f5b0:	2c00      	cmp	r4, #0
    f5b2:	f77f adab 	ble.w	f10c <_svfprintf_r+0x4e4>
    f5b6:	2c10      	cmp	r4, #16
    f5b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f5ba:	4d96      	ldr	r5, [pc, #600]	; (f814 <_svfprintf_r+0xbec>)
    f5bc:	f340 8197 	ble.w	f8ee <_svfprintf_r+0xcc6>
    f5c0:	2710      	movs	r7, #16
    f5c2:	4662      	mov	r2, ip
    f5c4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    f5c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    f5cc:	e004      	b.n	f5d8 <_svfprintf_r+0x9b0>
    f5ce:	3608      	adds	r6, #8
    f5d0:	3c10      	subs	r4, #16
    f5d2:	2c10      	cmp	r4, #16
    f5d4:	f340 818a 	ble.w	f8ec <_svfprintf_r+0xcc4>
    f5d8:	3301      	adds	r3, #1
    f5da:	3210      	adds	r2, #16
    f5dc:	2b07      	cmp	r3, #7
    f5de:	922d      	str	r2, [sp, #180]	; 0xb4
    f5e0:	932c      	str	r3, [sp, #176]	; 0xb0
    f5e2:	e886 00a0 	stmia.w	r6, {r5, r7}
    f5e6:	ddf2      	ble.n	f5ce <_svfprintf_r+0x9a6>
    f5e8:	4640      	mov	r0, r8
    f5ea:	4651      	mov	r1, sl
    f5ec:	aa2b      	add	r2, sp, #172	; 0xac
    f5ee:	f002 fd09 	bl	12004 <__ssprint_r>
    f5f2:	2800      	cmp	r0, #0
    f5f4:	f47f ac30 	bne.w	ee58 <_svfprintf_r+0x230>
    f5f8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f5fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f5fc:	ae38      	add	r6, sp, #224	; 0xe0
    f5fe:	e7e7      	b.n	f5d0 <_svfprintf_r+0x9a8>
    f600:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f602:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f604:	ebc0 0a05 	rsb	sl, r0, r5
    f608:	f1ba 0f00 	cmp.w	sl, #0
    f60c:	f77f ad2c 	ble.w	f068 <_svfprintf_r+0x440>
    f610:	f1ba 0f10 	cmp.w	sl, #16
    f614:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f616:	4d7f      	ldr	r5, [pc, #508]	; (f814 <_svfprintf_r+0xbec>)
    f618:	dd2b      	ble.n	f672 <_svfprintf_r+0xa4a>
    f61a:	9412      	str	r4, [sp, #72]	; 0x48
    f61c:	4632      	mov	r2, r6
    f61e:	f04f 0b10 	mov.w	fp, #16
    f622:	462e      	mov	r6, r5
    f624:	4661      	mov	r1, ip
    f626:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    f628:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f62a:	e006      	b.n	f63a <_svfprintf_r+0xa12>
    f62c:	f1aa 0a10 	sub.w	sl, sl, #16
    f630:	f1ba 0f10 	cmp.w	sl, #16
    f634:	f102 0208 	add.w	r2, r2, #8
    f638:	dd17      	ble.n	f66a <_svfprintf_r+0xa42>
    f63a:	3301      	adds	r3, #1
    f63c:	3110      	adds	r1, #16
    f63e:	2b07      	cmp	r3, #7
    f640:	912d      	str	r1, [sp, #180]	; 0xb4
    f642:	932c      	str	r3, [sp, #176]	; 0xb0
    f644:	e882 0840 	stmia.w	r2, {r6, fp}
    f648:	ddf0      	ble.n	f62c <_svfprintf_r+0xa04>
    f64a:	4620      	mov	r0, r4
    f64c:	4629      	mov	r1, r5
    f64e:	aa2b      	add	r2, sp, #172	; 0xac
    f650:	f002 fcd8 	bl	12004 <__ssprint_r>
    f654:	2800      	cmp	r0, #0
    f656:	f47f abff 	bne.w	ee58 <_svfprintf_r+0x230>
    f65a:	f1aa 0a10 	sub.w	sl, sl, #16
    f65e:	f1ba 0f10 	cmp.w	sl, #16
    f662:	992d      	ldr	r1, [sp, #180]	; 0xb4
    f664:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f666:	aa38      	add	r2, sp, #224	; 0xe0
    f668:	dce7      	bgt.n	f63a <_svfprintf_r+0xa12>
    f66a:	9c12      	ldr	r4, [sp, #72]	; 0x48
    f66c:	4635      	mov	r5, r6
    f66e:	468c      	mov	ip, r1
    f670:	4616      	mov	r6, r2
    f672:	3301      	adds	r3, #1
    f674:	44d4      	add	ip, sl
    f676:	2b07      	cmp	r3, #7
    f678:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f67c:	932c      	str	r3, [sp, #176]	; 0xb0
    f67e:	e886 0420 	stmia.w	r6, {r5, sl}
    f682:	f300 8212 	bgt.w	faaa <_svfprintf_r+0xe82>
    f686:	3608      	adds	r6, #8
    f688:	e4ee      	b.n	f068 <_svfprintf_r+0x440>
    f68a:	2d00      	cmp	r5, #0
    f68c:	bf08      	it	eq
    f68e:	2c0a      	cmpeq	r4, #10
    f690:	f080 8138 	bcs.w	f904 <_svfprintf_r+0xcdc>
    f694:	af48      	add	r7, sp, #288	; 0x120
    f696:	3430      	adds	r4, #48	; 0x30
    f698:	f807 4d41 	strb.w	r4, [r7, #-65]!
    f69c:	9d08      	ldr	r5, [sp, #32]
    f69e:	1bec      	subs	r4, r5, r7
    f6a0:	e450      	b.n	ef44 <_svfprintf_r+0x31c>
    f6a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
    f6a4:	2c01      	cmp	r4, #1
    f6a6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    f6a8:	f340 81d5 	ble.w	fa56 <_svfprintf_r+0xe2e>
    f6ac:	3401      	adds	r4, #1
    f6ae:	f10c 0301 	add.w	r3, ip, #1
    f6b2:	2201      	movs	r2, #1
    f6b4:	2c07      	cmp	r4, #7
    f6b6:	6037      	str	r7, [r6, #0]
    f6b8:	932d      	str	r3, [sp, #180]	; 0xb4
    f6ba:	942c      	str	r4, [sp, #176]	; 0xb0
    f6bc:	6072      	str	r2, [r6, #4]
    f6be:	f300 81db 	bgt.w	fa78 <_svfprintf_r+0xe50>
    f6c2:	3608      	adds	r6, #8
    f6c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    f6c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
    f6ca:	6035      	str	r5, [r6, #0]
    f6cc:	3401      	adds	r4, #1
    f6ce:	4498      	add	r8, r3
    f6d0:	9d18      	ldr	r5, [sp, #96]	; 0x60
    f6d2:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    f6d6:	2c07      	cmp	r4, #7
    f6d8:	942c      	str	r4, [sp, #176]	; 0xb0
    f6da:	6075      	str	r5, [r6, #4]
    f6dc:	f300 81d8 	bgt.w	fa90 <_svfprintf_r+0xe68>
    f6e0:	3608      	adds	r6, #8
    f6e2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    f6e6:	2200      	movs	r2, #0
    f6e8:	2300      	movs	r3, #0
    f6ea:	f7fc ffe3 	bl	c6b4 <__aeabi_dcmpeq>
    f6ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f6f0:	2800      	cmp	r0, #0
    f6f2:	f040 80b9 	bne.w	f868 <_svfprintf_r+0xc40>
    f6f6:	1e6b      	subs	r3, r5, #1
    f6f8:	3401      	adds	r4, #1
    f6fa:	3701      	adds	r7, #1
    f6fc:	4498      	add	r8, r3
    f6fe:	2c07      	cmp	r4, #7
    f700:	942c      	str	r4, [sp, #176]	; 0xb0
    f702:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    f706:	6037      	str	r7, [r6, #0]
    f708:	6073      	str	r3, [r6, #4]
    f70a:	f300 80e2 	bgt.w	f8d2 <_svfprintf_r+0xcaa>
    f70e:	3608      	adds	r6, #8
    f710:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
    f714:	9d19      	ldr	r5, [sp, #100]	; 0x64
    f716:	3401      	adds	r4, #1
    f718:	44c4      	add	ip, r8
    f71a:	ab27      	add	r3, sp, #156	; 0x9c
    f71c:	2c07      	cmp	r4, #7
    f71e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f722:	942c      	str	r4, [sp, #176]	; 0xb0
    f724:	e886 0028 	stmia.w	r6, {r3, r5}
    f728:	f77f acef 	ble.w	f10a <_svfprintf_r+0x4e2>
    f72c:	980d      	ldr	r0, [sp, #52]	; 0x34
    f72e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f730:	aa2b      	add	r2, sp, #172	; 0xac
    f732:	f002 fc67 	bl	12004 <__ssprint_r>
    f736:	2800      	cmp	r0, #0
    f738:	f47f ab8e 	bne.w	ee58 <_svfprintf_r+0x230>
    f73c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f740:	ae38      	add	r6, sp, #224	; 0xe0
    f742:	e4e3      	b.n	f10c <_svfprintf_r+0x4e4>
    f744:	980d      	ldr	r0, [sp, #52]	; 0x34
    f746:	990c      	ldr	r1, [sp, #48]	; 0x30
    f748:	aa2b      	add	r2, sp, #172	; 0xac
    f74a:	f002 fc5b 	bl	12004 <__ssprint_r>
    f74e:	2800      	cmp	r0, #0
    f750:	f43f ad35 	beq.w	f1be <_svfprintf_r+0x596>
    f754:	f7ff bb80 	b.w	ee58 <_svfprintf_r+0x230>
    f758:	980d      	ldr	r0, [sp, #52]	; 0x34
    f75a:	990c      	ldr	r1, [sp, #48]	; 0x30
    f75c:	aa2b      	add	r2, sp, #172	; 0xac
    f75e:	f002 fc51 	bl	12004 <__ssprint_r>
    f762:	2800      	cmp	r0, #0
    f764:	f47f ab78 	bne.w	ee58 <_svfprintf_r+0x230>
    f768:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f76c:	ae38      	add	r6, sp, #224	; 0xe0
    f76e:	e4bd      	b.n	f0ec <_svfprintf_r+0x4c4>
    f770:	980d      	ldr	r0, [sp, #52]	; 0x34
    f772:	990c      	ldr	r1, [sp, #48]	; 0x30
    f774:	aa2b      	add	r2, sp, #172	; 0xac
    f776:	f002 fc45 	bl	12004 <__ssprint_r>
    f77a:	2800      	cmp	r0, #0
    f77c:	f47f ab6c 	bne.w	ee58 <_svfprintf_r+0x230>
    f780:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f784:	ae38      	add	r6, sp, #224	; 0xe0
    f786:	e45a      	b.n	f03e <_svfprintf_r+0x416>
    f788:	980d      	ldr	r0, [sp, #52]	; 0x34
    f78a:	990c      	ldr	r1, [sp, #48]	; 0x30
    f78c:	aa2b      	add	r2, sp, #172	; 0xac
    f78e:	f002 fc39 	bl	12004 <__ssprint_r>
    f792:	2800      	cmp	r0, #0
    f794:	f47f ab60 	bne.w	ee58 <_svfprintf_r+0x230>
    f798:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f79c:	ae38      	add	r6, sp, #224	; 0xe0
    f79e:	e45f      	b.n	f060 <_svfprintf_r+0x438>
    f7a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f7a2:	af38      	add	r7, sp, #224	; 0xe0
    f7a4:	f7ff bbce 	b.w	ef44 <_svfprintf_r+0x31c>
    f7a8:	2302      	movs	r3, #2
    f7aa:	f7ff bba7 	b.w	eefc <_svfprintf_r+0x2d4>
    f7ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f7b0:	2b00      	cmp	r3, #0
    f7b2:	f340 81e7 	ble.w	fb84 <_svfprintf_r+0xf5c>
    f7b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
    f7b8:	9d14      	ldr	r5, [sp, #80]	; 0x50
    f7ba:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    f7be:	42ac      	cmp	r4, r5
    f7c0:	bfa8      	it	ge
    f7c2:	462c      	movge	r4, r5
    f7c4:	2c00      	cmp	r4, #0
    f7c6:	44ba      	add	sl, r7
    f7c8:	dd0b      	ble.n	f7e2 <_svfprintf_r+0xbba>
    f7ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f7cc:	6037      	str	r7, [r6, #0]
    f7ce:	3301      	adds	r3, #1
    f7d0:	44a4      	add	ip, r4
    f7d2:	2b07      	cmp	r3, #7
    f7d4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f7d8:	6074      	str	r4, [r6, #4]
    f7da:	932c      	str	r3, [sp, #176]	; 0xb0
    f7dc:	f300 8328 	bgt.w	fe30 <_svfprintf_r+0x1208>
    f7e0:	3608      	adds	r6, #8
    f7e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
    f7e4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    f7e8:	1b2c      	subs	r4, r5, r4
    f7ea:	2c00      	cmp	r4, #0
    f7ec:	f340 80db 	ble.w	f9a6 <_svfprintf_r+0xd7e>
    f7f0:	2c10      	cmp	r4, #16
    f7f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f7f4:	4d07      	ldr	r5, [pc, #28]	; (f814 <_svfprintf_r+0xbec>)
    f7f6:	f340 81ad 	ble.w	fb54 <_svfprintf_r+0xf2c>
    f7fa:	970a      	str	r7, [sp, #40]	; 0x28
    f7fc:	f04f 0810 	mov.w	r8, #16
    f800:	462f      	mov	r7, r5
    f802:	4662      	mov	r2, ip
    f804:	4625      	mov	r5, r4
    f806:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    f80a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f80c:	e009      	b.n	f822 <_svfprintf_r+0xbfa>
    f80e:	bf00      	nop
    f810:	000141b0 	.word	0x000141b0
    f814:	00014160 	.word	0x00014160
    f818:	3608      	adds	r6, #8
    f81a:	3d10      	subs	r5, #16
    f81c:	2d10      	cmp	r5, #16
    f81e:	f340 8195 	ble.w	fb4c <_svfprintf_r+0xf24>
    f822:	3301      	adds	r3, #1
    f824:	3210      	adds	r2, #16
    f826:	2b07      	cmp	r3, #7
    f828:	922d      	str	r2, [sp, #180]	; 0xb4
    f82a:	932c      	str	r3, [sp, #176]	; 0xb0
    f82c:	e886 0180 	stmia.w	r6, {r7, r8}
    f830:	ddf2      	ble.n	f818 <_svfprintf_r+0xbf0>
    f832:	4658      	mov	r0, fp
    f834:	4621      	mov	r1, r4
    f836:	aa2b      	add	r2, sp, #172	; 0xac
    f838:	f002 fbe4 	bl	12004 <__ssprint_r>
    f83c:	2800      	cmp	r0, #0
    f83e:	f47f ab0b 	bne.w	ee58 <_svfprintf_r+0x230>
    f842:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f844:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f846:	ae38      	add	r6, sp, #224	; 0xe0
    f848:	e7e7      	b.n	f81a <_svfprintf_r+0xbf2>
    f84a:	980d      	ldr	r0, [sp, #52]	; 0x34
    f84c:	990c      	ldr	r1, [sp, #48]	; 0x30
    f84e:	aa2b      	add	r2, sp, #172	; 0xac
    f850:	f002 fbd8 	bl	12004 <__ssprint_r>
    f854:	2800      	cmp	r0, #0
    f856:	f47f aaff 	bne.w	ee58 <_svfprintf_r+0x230>
    f85a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    f85e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f862:	ae38      	add	r6, sp, #224	; 0xe0
    f864:	f7ff bbd8 	b.w	f018 <_svfprintf_r+0x3f0>
    f868:	1e6f      	subs	r7, r5, #1
    f86a:	2f00      	cmp	r7, #0
    f86c:	f77f af50 	ble.w	f710 <_svfprintf_r+0xae8>
    f870:	2f10      	cmp	r7, #16
    f872:	4db3      	ldr	r5, [pc, #716]	; (fb40 <_svfprintf_r+0xf18>)
    f874:	dd23      	ble.n	f8be <_svfprintf_r+0xc96>
    f876:	4643      	mov	r3, r8
    f878:	f04f 0a10 	mov.w	sl, #16
    f87c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    f880:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    f884:	e004      	b.n	f890 <_svfprintf_r+0xc68>
    f886:	3f10      	subs	r7, #16
    f888:	2f10      	cmp	r7, #16
    f88a:	f106 0608 	add.w	r6, r6, #8
    f88e:	dd15      	ble.n	f8bc <_svfprintf_r+0xc94>
    f890:	3401      	adds	r4, #1
    f892:	3310      	adds	r3, #16
    f894:	2c07      	cmp	r4, #7
    f896:	932d      	str	r3, [sp, #180]	; 0xb4
    f898:	942c      	str	r4, [sp, #176]	; 0xb0
    f89a:	e886 0420 	stmia.w	r6, {r5, sl}
    f89e:	ddf2      	ble.n	f886 <_svfprintf_r+0xc5e>
    f8a0:	4640      	mov	r0, r8
    f8a2:	4659      	mov	r1, fp
    f8a4:	aa2b      	add	r2, sp, #172	; 0xac
    f8a6:	f002 fbad 	bl	12004 <__ssprint_r>
    f8aa:	2800      	cmp	r0, #0
    f8ac:	f47f aad4 	bne.w	ee58 <_svfprintf_r+0x230>
    f8b0:	3f10      	subs	r7, #16
    f8b2:	2f10      	cmp	r7, #16
    f8b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f8b6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    f8b8:	ae38      	add	r6, sp, #224	; 0xe0
    f8ba:	dce9      	bgt.n	f890 <_svfprintf_r+0xc68>
    f8bc:	4698      	mov	r8, r3
    f8be:	3401      	adds	r4, #1
    f8c0:	44b8      	add	r8, r7
    f8c2:	2c07      	cmp	r4, #7
    f8c4:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    f8c8:	942c      	str	r4, [sp, #176]	; 0xb0
    f8ca:	e886 00a0 	stmia.w	r6, {r5, r7}
    f8ce:	f77f af1e 	ble.w	f70e <_svfprintf_r+0xae6>
    f8d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    f8d4:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8d6:	aa2b      	add	r2, sp, #172	; 0xac
    f8d8:	f002 fb94 	bl	12004 <__ssprint_r>
    f8dc:	2800      	cmp	r0, #0
    f8de:	f47f aabb 	bne.w	ee58 <_svfprintf_r+0x230>
    f8e2:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
    f8e6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    f8e8:	ae38      	add	r6, sp, #224	; 0xe0
    f8ea:	e711      	b.n	f710 <_svfprintf_r+0xae8>
    f8ec:	4694      	mov	ip, r2
    f8ee:	3301      	adds	r3, #1
    f8f0:	44a4      	add	ip, r4
    f8f2:	2b07      	cmp	r3, #7
    f8f4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f8f8:	932c      	str	r3, [sp, #176]	; 0xb0
    f8fa:	6035      	str	r5, [r6, #0]
    f8fc:	6074      	str	r4, [r6, #4]
    f8fe:	f77f ac04 	ble.w	f10a <_svfprintf_r+0x4e2>
    f902:	e713      	b.n	f72c <_svfprintf_r+0xb04>
    f904:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
    f908:	4620      	mov	r0, r4
    f90a:	4629      	mov	r1, r5
    f90c:	220a      	movs	r2, #10
    f90e:	2300      	movs	r3, #0
    f910:	f002 fd00 	bl	12314 <__aeabi_uldivmod>
    f914:	3230      	adds	r2, #48	; 0x30
    f916:	f88b 2000 	strb.w	r2, [fp]
    f91a:	4620      	mov	r0, r4
    f91c:	4629      	mov	r1, r5
    f91e:	220a      	movs	r2, #10
    f920:	2300      	movs	r3, #0
    f922:	f002 fcf7 	bl	12314 <__aeabi_uldivmod>
    f926:	4604      	mov	r4, r0
    f928:	460d      	mov	r5, r1
    f92a:	ea54 0c05 	orrs.w	ip, r4, r5
    f92e:	465f      	mov	r7, fp
    f930:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    f934:	d1e8      	bne.n	f908 <_svfprintf_r+0xce0>
    f936:	9d08      	ldr	r5, [sp, #32]
    f938:	1bec      	subs	r4, r5, r7
    f93a:	f7ff bb03 	b.w	ef44 <_svfprintf_r+0x31c>
    f93e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f940:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f944:	682c      	ldr	r4, [r5, #0]
    f946:	17e5      	asrs	r5, r4, #31
    f948:	4622      	mov	r2, r4
    f94a:	462b      	mov	r3, r5
    f94c:	f10c 0c04 	add.w	ip, ip, #4
    f950:	2a00      	cmp	r2, #0
    f952:	f173 0000 	sbcs.w	r0, r3, #0
    f956:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    f95a:	f6bf ac75 	bge.w	f248 <_svfprintf_r+0x620>
    f95e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
    f962:	4264      	negs	r4, r4
    f964:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    f968:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    f96c:	2301      	movs	r3, #1
    f96e:	f7ff bac9 	b.w	ef04 <_svfprintf_r+0x2dc>
    f972:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f974:	682c      	ldr	r4, [r5, #0]
    f976:	3504      	adds	r5, #4
    f978:	9510      	str	r5, [sp, #64]	; 0x40
    f97a:	2500      	movs	r5, #0
    f97c:	f7ff babe 	b.w	eefc <_svfprintf_r+0x2d4>
    f980:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f982:	682c      	ldr	r4, [r5, #0]
    f984:	3504      	adds	r5, #4
    f986:	9510      	str	r5, [sp, #64]	; 0x40
    f988:	2301      	movs	r3, #1
    f98a:	2500      	movs	r5, #0
    f98c:	f7ff bab6 	b.w	eefc <_svfprintf_r+0x2d4>
    f990:	980d      	ldr	r0, [sp, #52]	; 0x34
    f992:	990c      	ldr	r1, [sp, #48]	; 0x30
    f994:	aa2b      	add	r2, sp, #172	; 0xac
    f996:	f002 fb35 	bl	12004 <__ssprint_r>
    f99a:	2800      	cmp	r0, #0
    f99c:	f47f aa5c 	bne.w	ee58 <_svfprintf_r+0x230>
    f9a0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    f9a4:	ae38      	add	r6, sp, #224	; 0xe0
    f9a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
    f9a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    f9aa:	442f      	add	r7, r5
    f9ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f9ae:	42ac      	cmp	r4, r5
    f9b0:	db42      	blt.n	fa38 <_svfprintf_r+0xe10>
    f9b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f9b4:	07e9      	lsls	r1, r5, #31
    f9b6:	d43f      	bmi.n	fa38 <_svfprintf_r+0xe10>
    f9b8:	9811      	ldr	r0, [sp, #68]	; 0x44
    f9ba:	ebc7 050a 	rsb	r5, r7, sl
    f9be:	1b04      	subs	r4, r0, r4
    f9c0:	42ac      	cmp	r4, r5
    f9c2:	bfb8      	it	lt
    f9c4:	4625      	movlt	r5, r4
    f9c6:	2d00      	cmp	r5, #0
    f9c8:	dd0b      	ble.n	f9e2 <_svfprintf_r+0xdba>
    f9ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f9cc:	6037      	str	r7, [r6, #0]
    f9ce:	3301      	adds	r3, #1
    f9d0:	44ac      	add	ip, r5
    f9d2:	2b07      	cmp	r3, #7
    f9d4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    f9d8:	6075      	str	r5, [r6, #4]
    f9da:	932c      	str	r3, [sp, #176]	; 0xb0
    f9dc:	f300 8252 	bgt.w	fe84 <_svfprintf_r+0x125c>
    f9e0:	3608      	adds	r6, #8
    f9e2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    f9e6:	1b64      	subs	r4, r4, r5
    f9e8:	2c00      	cmp	r4, #0
    f9ea:	f77f ab8f 	ble.w	f10c <_svfprintf_r+0x4e4>
    f9ee:	2c10      	cmp	r4, #16
    f9f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    f9f2:	4d53      	ldr	r5, [pc, #332]	; (fb40 <_svfprintf_r+0xf18>)
    f9f4:	f77f af7b 	ble.w	f8ee <_svfprintf_r+0xcc6>
    f9f8:	2710      	movs	r7, #16
    f9fa:	4662      	mov	r2, ip
    f9fc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    fa00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    fa04:	e004      	b.n	fa10 <_svfprintf_r+0xde8>
    fa06:	3608      	adds	r6, #8
    fa08:	3c10      	subs	r4, #16
    fa0a:	2c10      	cmp	r4, #16
    fa0c:	f77f af6e 	ble.w	f8ec <_svfprintf_r+0xcc4>
    fa10:	3301      	adds	r3, #1
    fa12:	3210      	adds	r2, #16
    fa14:	2b07      	cmp	r3, #7
    fa16:	922d      	str	r2, [sp, #180]	; 0xb4
    fa18:	932c      	str	r3, [sp, #176]	; 0xb0
    fa1a:	e886 00a0 	stmia.w	r6, {r5, r7}
    fa1e:	ddf2      	ble.n	fa06 <_svfprintf_r+0xdde>
    fa20:	4640      	mov	r0, r8
    fa22:	4651      	mov	r1, sl
    fa24:	aa2b      	add	r2, sp, #172	; 0xac
    fa26:	f002 faed 	bl	12004 <__ssprint_r>
    fa2a:	2800      	cmp	r0, #0
    fa2c:	f47f aa14 	bne.w	ee58 <_svfprintf_r+0x230>
    fa30:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    fa32:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fa34:	ae38      	add	r6, sp, #224	; 0xe0
    fa36:	e7e7      	b.n	fa08 <_svfprintf_r+0xde0>
    fa38:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fa3a:	9d15      	ldr	r5, [sp, #84]	; 0x54
    fa3c:	6035      	str	r5, [r6, #0]
    fa3e:	9d18      	ldr	r5, [sp, #96]	; 0x60
    fa40:	6075      	str	r5, [r6, #4]
    fa42:	3301      	adds	r3, #1
    fa44:	44ac      	add	ip, r5
    fa46:	2b07      	cmp	r3, #7
    fa48:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    fa4c:	932c      	str	r3, [sp, #176]	; 0xb0
    fa4e:	f300 81fb 	bgt.w	fe48 <_svfprintf_r+0x1220>
    fa52:	3608      	adds	r6, #8
    fa54:	e7b0      	b.n	f9b8 <_svfprintf_r+0xd90>
    fa56:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fa58:	07ea      	lsls	r2, r5, #31
    fa5a:	f53f ae27 	bmi.w	f6ac <_svfprintf_r+0xa84>
    fa5e:	3401      	adds	r4, #1
    fa60:	f10c 0801 	add.w	r8, ip, #1
    fa64:	2301      	movs	r3, #1
    fa66:	2c07      	cmp	r4, #7
    fa68:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    fa6c:	942c      	str	r4, [sp, #176]	; 0xb0
    fa6e:	6037      	str	r7, [r6, #0]
    fa70:	6073      	str	r3, [r6, #4]
    fa72:	f77f ae4c 	ble.w	f70e <_svfprintf_r+0xae6>
    fa76:	e72c      	b.n	f8d2 <_svfprintf_r+0xcaa>
    fa78:	980d      	ldr	r0, [sp, #52]	; 0x34
    fa7a:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa7c:	aa2b      	add	r2, sp, #172	; 0xac
    fa7e:	f002 fac1 	bl	12004 <__ssprint_r>
    fa82:	2800      	cmp	r0, #0
    fa84:	f47f a9e8 	bne.w	ee58 <_svfprintf_r+0x230>
    fa88:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fa8a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    fa8c:	ae38      	add	r6, sp, #224	; 0xe0
    fa8e:	e619      	b.n	f6c4 <_svfprintf_r+0xa9c>
    fa90:	980d      	ldr	r0, [sp, #52]	; 0x34
    fa92:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa94:	aa2b      	add	r2, sp, #172	; 0xac
    fa96:	f002 fab5 	bl	12004 <__ssprint_r>
    fa9a:	2800      	cmp	r0, #0
    fa9c:	f47f a9dc 	bne.w	ee58 <_svfprintf_r+0x230>
    faa0:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
    faa4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    faa6:	ae38      	add	r6, sp, #224	; 0xe0
    faa8:	e61b      	b.n	f6e2 <_svfprintf_r+0xaba>
    faaa:	980d      	ldr	r0, [sp, #52]	; 0x34
    faac:	990c      	ldr	r1, [sp, #48]	; 0x30
    faae:	aa2b      	add	r2, sp, #172	; 0xac
    fab0:	f002 faa8 	bl	12004 <__ssprint_r>
    fab4:	2800      	cmp	r0, #0
    fab6:	f47f a9cf 	bne.w	ee58 <_svfprintf_r+0x230>
    faba:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fabe:	ae38      	add	r6, sp, #224	; 0xe0
    fac0:	f7ff bad2 	b.w	f068 <_svfprintf_r+0x440>
    fac4:	f7fc f918 	bl	bcf8 <__fpclassifyd>
    fac8:	2800      	cmp	r0, #0
    faca:	f040 80c2 	bne.w	fc52 <_svfprintf_r+0x102a>
    face:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fad0:	4f1c      	ldr	r7, [pc, #112]	; (fb44 <_svfprintf_r+0xf1c>)
    fad2:	4b1d      	ldr	r3, [pc, #116]	; (fb48 <_svfprintf_r+0xf20>)
    fad4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    fad8:	900a      	str	r0, [sp, #40]	; 0x28
    fada:	f04f 0c03 	mov.w	ip, #3
    fade:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fae2:	9409      	str	r4, [sp, #36]	; 0x24
    fae4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    fae8:	9014      	str	r0, [sp, #80]	; 0x50
    faea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    faee:	bfd8      	it	le
    faf0:	461f      	movle	r7, r3
    faf2:	4664      	mov	r4, ip
    faf4:	f7ff ba2f 	b.w	ef56 <_svfprintf_r+0x32e>
    faf8:	e9d3 4500 	ldrd	r4, r5, [r3]
    fafc:	3308      	adds	r3, #8
    fafe:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    fb02:	9310      	str	r3, [sp, #64]	; 0x40
    fb04:	e476      	b.n	f3f4 <_svfprintf_r+0x7cc>
    fb06:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fb0a:	f01c 0f10 	tst.w	ip, #16
    fb0e:	f000 8155 	beq.w	fdbc <_svfprintf_r+0x1194>
    fb12:	9c10      	ldr	r4, [sp, #64]	; 0x40
    fb14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    fb16:	6823      	ldr	r3, [r4, #0]
    fb18:	3404      	adds	r4, #4
    fb1a:	9410      	str	r4, [sp, #64]	; 0x40
    fb1c:	601d      	str	r5, [r3, #0]
    fb1e:	f7ff b8a9 	b.w	ec74 <_svfprintf_r+0x4c>
    fb22:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fb24:	0664      	lsls	r4, r4, #25
    fb26:	f140 8142 	bpl.w	fdae <_svfprintf_r+0x1186>
    fb2a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    fb2e:	f8bc 4000 	ldrh.w	r4, [ip]
    fb32:	f10c 0c04 	add.w	ip, ip, #4
    fb36:	2500      	movs	r5, #0
    fb38:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    fb3c:	f7ff b9ca 	b.w	eed4 <_svfprintf_r+0x2ac>
    fb40:	00014160 	.word	0x00014160
    fb44:	0001417c 	.word	0x0001417c
    fb48:	00014178 	.word	0x00014178
    fb4c:	462c      	mov	r4, r5
    fb4e:	463d      	mov	r5, r7
    fb50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    fb52:	4694      	mov	ip, r2
    fb54:	3301      	adds	r3, #1
    fb56:	44a4      	add	ip, r4
    fb58:	2b07      	cmp	r3, #7
    fb5a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    fb5e:	932c      	str	r3, [sp, #176]	; 0xb0
    fb60:	6035      	str	r5, [r6, #0]
    fb62:	6074      	str	r4, [r6, #4]
    fb64:	f73f af14 	bgt.w	f990 <_svfprintf_r+0xd68>
    fb68:	3608      	adds	r6, #8
    fb6a:	e71c      	b.n	f9a6 <_svfprintf_r+0xd7e>
    fb6c:	980d      	ldr	r0, [sp, #52]	; 0x34
    fb6e:	990c      	ldr	r1, [sp, #48]	; 0x30
    fb70:	aa2b      	add	r2, sp, #172	; 0xac
    fb72:	f002 fa47 	bl	12004 <__ssprint_r>
    fb76:	2800      	cmp	r0, #0
    fb78:	f47f a96e 	bne.w	ee58 <_svfprintf_r+0x230>
    fb7c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fb80:	ae38      	add	r6, sp, #224	; 0xe0
    fb82:	e4fd      	b.n	f580 <_svfprintf_r+0x958>
    fb84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    fb86:	49b7      	ldr	r1, [pc, #732]	; (fe64 <_svfprintf_r+0x123c>)
    fb88:	6031      	str	r1, [r6, #0]
    fb8a:	3201      	adds	r2, #1
    fb8c:	f10c 0c01 	add.w	ip, ip, #1
    fb90:	2101      	movs	r1, #1
    fb92:	2a07      	cmp	r2, #7
    fb94:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    fb98:	922c      	str	r2, [sp, #176]	; 0xb0
    fb9a:	6071      	str	r1, [r6, #4]
    fb9c:	f300 80f7 	bgt.w	fd8e <_svfprintf_r+0x1166>
    fba0:	3608      	adds	r6, #8
    fba2:	461c      	mov	r4, r3
    fba4:	b92c      	cbnz	r4, fbb2 <_svfprintf_r+0xf8a>
    fba6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    fba8:	b91d      	cbnz	r5, fbb2 <_svfprintf_r+0xf8a>
    fbaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fbac:	07e8      	lsls	r0, r5, #31
    fbae:	f57f aaad 	bpl.w	f10c <_svfprintf_r+0x4e4>
    fbb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fbb4:	9918      	ldr	r1, [sp, #96]	; 0x60
    fbb6:	9d15      	ldr	r5, [sp, #84]	; 0x54
    fbb8:	6035      	str	r5, [r6, #0]
    fbba:	3301      	adds	r3, #1
    fbbc:	4461      	add	r1, ip
    fbbe:	9d18      	ldr	r5, [sp, #96]	; 0x60
    fbc0:	912d      	str	r1, [sp, #180]	; 0xb4
    fbc2:	2b07      	cmp	r3, #7
    fbc4:	6075      	str	r5, [r6, #4]
    fbc6:	932c      	str	r3, [sp, #176]	; 0xb0
    fbc8:	f300 81de 	bgt.w	ff88 <_svfprintf_r+0x1360>
    fbcc:	f106 0208 	add.w	r2, r6, #8
    fbd0:	4264      	negs	r4, r4
    fbd2:	2c00      	cmp	r4, #0
    fbd4:	f340 810b 	ble.w	fdee <_svfprintf_r+0x11c6>
    fbd8:	2c10      	cmp	r4, #16
    fbda:	4da3      	ldr	r5, [pc, #652]	; (fe68 <_svfprintf_r+0x1240>)
    fbdc:	f340 8148 	ble.w	fe70 <_svfprintf_r+0x1248>
    fbe0:	46a3      	mov	fp, r4
    fbe2:	2610      	movs	r6, #16
    fbe4:	460c      	mov	r4, r1
    fbe6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    fbea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    fbee:	e006      	b.n	fbfe <_svfprintf_r+0xfd6>
    fbf0:	3208      	adds	r2, #8
    fbf2:	f1ab 0b10 	sub.w	fp, fp, #16
    fbf6:	f1bb 0f10 	cmp.w	fp, #16
    fbfa:	f340 8137 	ble.w	fe6c <_svfprintf_r+0x1244>
    fbfe:	3301      	adds	r3, #1
    fc00:	3410      	adds	r4, #16
    fc02:	2b07      	cmp	r3, #7
    fc04:	942d      	str	r4, [sp, #180]	; 0xb4
    fc06:	932c      	str	r3, [sp, #176]	; 0xb0
    fc08:	e882 0060 	stmia.w	r2, {r5, r6}
    fc0c:	ddf0      	ble.n	fbf0 <_svfprintf_r+0xfc8>
    fc0e:	4640      	mov	r0, r8
    fc10:	4651      	mov	r1, sl
    fc12:	aa2b      	add	r2, sp, #172	; 0xac
    fc14:	f002 f9f6 	bl	12004 <__ssprint_r>
    fc18:	2800      	cmp	r0, #0
    fc1a:	f47f a91d 	bne.w	ee58 <_svfprintf_r+0x230>
    fc1e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
    fc20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fc22:	aa38      	add	r2, sp, #224	; 0xe0
    fc24:	e7e5      	b.n	fbf2 <_svfprintf_r+0xfca>
    fc26:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fc28:	f893 8001 	ldrb.w	r8, [r3, #1]
    fc2c:	f044 0420 	orr.w	r4, r4, #32
    fc30:	f109 0901 	add.w	r9, r9, #1
    fc34:	9409      	str	r4, [sp, #36]	; 0x24
    fc36:	f7ff b853 	b.w	ece0 <_svfprintf_r+0xb8>
    fc3a:	980d      	ldr	r0, [sp, #52]	; 0x34
    fc3c:	990c      	ldr	r1, [sp, #48]	; 0x30
    fc3e:	aa2b      	add	r2, sp, #172	; 0xac
    fc40:	f002 f9e0 	bl	12004 <__ssprint_r>
    fc44:	2800      	cmp	r0, #0
    fc46:	f47f a907 	bne.w	ee58 <_svfprintf_r+0x230>
    fc4a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fc4e:	ae38      	add	r6, sp, #224	; 0xe0
    fc50:	e4ac      	b.n	f5ac <_svfprintf_r+0x984>
    fc52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fc54:	3501      	adds	r5, #1
    fc56:	f028 0a20 	bic.w	sl, r8, #32
    fc5a:	f000 80a5 	beq.w	fda8 <_svfprintf_r+0x1180>
    fc5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
    fc62:	d104      	bne.n	fc6e <_svfprintf_r+0x1046>
    fc64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fc66:	2d00      	cmp	r5, #0
    fc68:	bf08      	it	eq
    fc6a:	2501      	moveq	r5, #1
    fc6c:	950a      	str	r5, [sp, #40]	; 0x28
    fc6e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    fc72:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fc76:	2b00      	cmp	r3, #0
    fc78:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
    fc7c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
    fc80:	f2c0 819c 	blt.w	ffbc <_svfprintf_r+0x1394>
    fc84:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    fc88:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
    fc8c:	f04f 0b00 	mov.w	fp, #0
    fc90:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    fc94:	f000 819b 	beq.w	ffce <_svfprintf_r+0x13a6>
    fc98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    fc9c:	f000 81a9 	beq.w	fff2 <_svfprintf_r+0x13ca>
    fca0:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
    fca4:	bf0a      	itet	eq
    fca6:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
    fca8:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
    fcaa:	1c65      	addeq	r5, r4, #1
    fcac:	2002      	movs	r0, #2
    fcae:	a925      	add	r1, sp, #148	; 0x94
    fcb0:	aa26      	add	r2, sp, #152	; 0x98
    fcb2:	ab29      	add	r3, sp, #164	; 0xa4
    fcb4:	e88d 0021 	stmia.w	sp, {r0, r5}
    fcb8:	9203      	str	r2, [sp, #12]
    fcba:	9304      	str	r3, [sp, #16]
    fcbc:	9102      	str	r1, [sp, #8]
    fcbe:	980d      	ldr	r0, [sp, #52]	; 0x34
    fcc0:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    fcc4:	f000 fc24 	bl	10510 <_dtoa_r>
    fcc8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
    fccc:	4607      	mov	r7, r0
    fcce:	d002      	beq.n	fcd6 <_svfprintf_r+0x10ae>
    fcd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    fcd4:	d105      	bne.n	fce2 <_svfprintf_r+0x10ba>
    fcd6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fcda:	f01c 0f01 	tst.w	ip, #1
    fcde:	f000 819c 	beq.w	1001a <_svfprintf_r+0x13f2>
    fce2:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
    fce6:	eb07 0405 	add.w	r4, r7, r5
    fcea:	f000 811c 	beq.w	ff26 <_svfprintf_r+0x12fe>
    fcee:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
    fcf2:	2200      	movs	r2, #0
    fcf4:	2300      	movs	r3, #0
    fcf6:	f7fc fcdd 	bl	c6b4 <__aeabi_dcmpeq>
    fcfa:	2800      	cmp	r0, #0
    fcfc:	f040 8105 	bne.w	ff0a <_svfprintf_r+0x12e2>
    fd00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    fd02:	429c      	cmp	r4, r3
    fd04:	d906      	bls.n	fd14 <_svfprintf_r+0x10ec>
    fd06:	2130      	movs	r1, #48	; 0x30
    fd08:	1c5a      	adds	r2, r3, #1
    fd0a:	9229      	str	r2, [sp, #164]	; 0xa4
    fd0c:	7019      	strb	r1, [r3, #0]
    fd0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    fd10:	429c      	cmp	r4, r3
    fd12:	d8f9      	bhi.n	fd08 <_svfprintf_r+0x10e0>
    fd14:	1bdb      	subs	r3, r3, r7
    fd16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
    fd1a:	9311      	str	r3, [sp, #68]	; 0x44
    fd1c:	f000 80ed 	beq.w	fefa <_svfprintf_r+0x12d2>
    fd20:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    fd24:	f340 81f2 	ble.w	1010c <_svfprintf_r+0x14e4>
    fd28:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    fd2c:	f000 8168 	beq.w	10000 <_svfprintf_r+0x13d8>
    fd30:	9c25      	ldr	r4, [sp, #148]	; 0x94
    fd32:	9414      	str	r4, [sp, #80]	; 0x50
    fd34:	9c11      	ldr	r4, [sp, #68]	; 0x44
    fd36:	9d14      	ldr	r5, [sp, #80]	; 0x50
    fd38:	42ac      	cmp	r4, r5
    fd3a:	f300 8132 	bgt.w	ffa2 <_svfprintf_r+0x137a>
    fd3e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fd42:	f01c 0f01 	tst.w	ip, #1
    fd46:	f040 81ad 	bne.w	100a4 <_svfprintf_r+0x147c>
    fd4a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    fd4e:	462c      	mov	r4, r5
    fd50:	f04f 0867 	mov.w	r8, #103	; 0x67
    fd54:	f1bb 0f00 	cmp.w	fp, #0
    fd58:	f040 80b2 	bne.w	fec0 <_svfprintf_r+0x1298>
    fd5c:	9d12      	ldr	r5, [sp, #72]	; 0x48
    fd5e:	930b      	str	r3, [sp, #44]	; 0x2c
    fd60:	9509      	str	r5, [sp, #36]	; 0x24
    fd62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fd66:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    fd6a:	f7ff b8f4 	b.w	ef56 <_svfprintf_r+0x32e>
    fd6e:	980d      	ldr	r0, [sp, #52]	; 0x34
    fd70:	2140      	movs	r1, #64	; 0x40
    fd72:	f7fd fef5 	bl	db60 <_malloc_r>
    fd76:	6020      	str	r0, [r4, #0]
    fd78:	6120      	str	r0, [r4, #16]
    fd7a:	2800      	cmp	r0, #0
    fd7c:	f000 81bf 	beq.w	100fe <_svfprintf_r+0x14d6>
    fd80:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    fd84:	2340      	movs	r3, #64	; 0x40
    fd86:	f8cc 3014 	str.w	r3, [ip, #20]
    fd8a:	f7fe bf63 	b.w	ec54 <_svfprintf_r+0x2c>
    fd8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    fd90:	990c      	ldr	r1, [sp, #48]	; 0x30
    fd92:	aa2b      	add	r2, sp, #172	; 0xac
    fd94:	f002 f936 	bl	12004 <__ssprint_r>
    fd98:	2800      	cmp	r0, #0
    fd9a:	f47f a85d 	bne.w	ee58 <_svfprintf_r+0x230>
    fd9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
    fda0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fda4:	ae38      	add	r6, sp, #224	; 0xe0
    fda6:	e6fd      	b.n	fba4 <_svfprintf_r+0xf7c>
    fda8:	2406      	movs	r4, #6
    fdaa:	940a      	str	r4, [sp, #40]	; 0x28
    fdac:	e75f      	b.n	fc6e <_svfprintf_r+0x1046>
    fdae:	9d10      	ldr	r5, [sp, #64]	; 0x40
    fdb0:	682c      	ldr	r4, [r5, #0]
    fdb2:	3504      	adds	r5, #4
    fdb4:	9510      	str	r5, [sp, #64]	; 0x40
    fdb6:	2500      	movs	r5, #0
    fdb8:	f7ff b88c 	b.w	eed4 <_svfprintf_r+0x2ac>
    fdbc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    fdc0:	f01c 0f40 	tst.w	ip, #64	; 0x40
    fdc4:	f000 8087 	beq.w	fed6 <_svfprintf_r+0x12ae>
    fdc8:	9c10      	ldr	r4, [sp, #64]	; 0x40
    fdca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    fdcc:	6823      	ldr	r3, [r4, #0]
    fdce:	3404      	adds	r4, #4
    fdd0:	9410      	str	r4, [sp, #64]	; 0x40
    fdd2:	801d      	strh	r5, [r3, #0]
    fdd4:	f7fe bf4e 	b.w	ec74 <_svfprintf_r+0x4c>
    fdd8:	980d      	ldr	r0, [sp, #52]	; 0x34
    fdda:	990c      	ldr	r1, [sp, #48]	; 0x30
    fddc:	aa2b      	add	r2, sp, #172	; 0xac
    fdde:	f002 f911 	bl	12004 <__ssprint_r>
    fde2:	2800      	cmp	r0, #0
    fde4:	f47f a838 	bne.w	ee58 <_svfprintf_r+0x230>
    fde8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    fdea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fdec:	aa38      	add	r2, sp, #224	; 0xe0
    fdee:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    fdf2:	9c11      	ldr	r4, [sp, #68]	; 0x44
    fdf4:	6017      	str	r7, [r2, #0]
    fdf6:	3301      	adds	r3, #1
    fdf8:	448c      	add	ip, r1
    fdfa:	2b07      	cmp	r3, #7
    fdfc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    fe00:	932c      	str	r3, [sp, #176]	; 0xb0
    fe02:	6054      	str	r4, [r2, #4]
    fe04:	f73f ac92 	bgt.w	f72c <_svfprintf_r+0xb04>
    fe08:	f102 0608 	add.w	r6, r2, #8
    fe0c:	f7ff b97e 	b.w	f10c <_svfprintf_r+0x4e4>
    fe10:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    fe14:	f7f2 fc42 	bl	269c <strlen>
    fe18:	9510      	str	r5, [sp, #64]	; 0x40
    fe1a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    fe1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fe20:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    fe24:	4604      	mov	r4, r0
    fe26:	9514      	str	r5, [sp, #80]	; 0x50
    fe28:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    fe2c:	f7ff b893 	b.w	ef56 <_svfprintf_r+0x32e>
    fe30:	980d      	ldr	r0, [sp, #52]	; 0x34
    fe32:	990c      	ldr	r1, [sp, #48]	; 0x30
    fe34:	aa2b      	add	r2, sp, #172	; 0xac
    fe36:	f002 f8e5 	bl	12004 <__ssprint_r>
    fe3a:	2800      	cmp	r0, #0
    fe3c:	f47f a80c 	bne.w	ee58 <_svfprintf_r+0x230>
    fe40:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fe44:	ae38      	add	r6, sp, #224	; 0xe0
    fe46:	e4cc      	b.n	f7e2 <_svfprintf_r+0xbba>
    fe48:	980d      	ldr	r0, [sp, #52]	; 0x34
    fe4a:	990c      	ldr	r1, [sp, #48]	; 0x30
    fe4c:	aa2b      	add	r2, sp, #172	; 0xac
    fe4e:	f002 f8d9 	bl	12004 <__ssprint_r>
    fe52:	2800      	cmp	r0, #0
    fe54:	f47f a800 	bne.w	ee58 <_svfprintf_r+0x230>
    fe58:	9c25      	ldr	r4, [sp, #148]	; 0x94
    fe5a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fe5e:	ae38      	add	r6, sp, #224	; 0xe0
    fe60:	e5aa      	b.n	f9b8 <_svfprintf_r+0xd90>
    fe62:	bf00      	nop
    fe64:	000141b0 	.word	0x000141b0
    fe68:	00014160 	.word	0x00014160
    fe6c:	4621      	mov	r1, r4
    fe6e:	465c      	mov	r4, fp
    fe70:	3301      	adds	r3, #1
    fe72:	4421      	add	r1, r4
    fe74:	2b07      	cmp	r3, #7
    fe76:	912d      	str	r1, [sp, #180]	; 0xb4
    fe78:	932c      	str	r3, [sp, #176]	; 0xb0
    fe7a:	6015      	str	r5, [r2, #0]
    fe7c:	6054      	str	r4, [r2, #4]
    fe7e:	dcab      	bgt.n	fdd8 <_svfprintf_r+0x11b0>
    fe80:	3208      	adds	r2, #8
    fe82:	e7b4      	b.n	fdee <_svfprintf_r+0x11c6>
    fe84:	980d      	ldr	r0, [sp, #52]	; 0x34
    fe86:	990c      	ldr	r1, [sp, #48]	; 0x30
    fe88:	aa2b      	add	r2, sp, #172	; 0xac
    fe8a:	f002 f8bb 	bl	12004 <__ssprint_r>
    fe8e:	2800      	cmp	r0, #0
    fe90:	f47e afe2 	bne.w	ee58 <_svfprintf_r+0x230>
    fe94:	9c25      	ldr	r4, [sp, #148]	; 0x94
    fe96:	9911      	ldr	r1, [sp, #68]	; 0x44
    fe98:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    fe9c:	1b0c      	subs	r4, r1, r4
    fe9e:	ae38      	add	r6, sp, #224	; 0xe0
    fea0:	e59f      	b.n	f9e2 <_svfprintf_r+0xdba>
    fea2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fea4:	9714      	str	r7, [sp, #80]	; 0x50
    fea6:	2c06      	cmp	r4, #6
    fea8:	bf28      	it	cs
    feaa:	2406      	movcs	r4, #6
    feac:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
    feb0:	46ba      	mov	sl, r7
    feb2:	970a      	str	r7, [sp, #40]	; 0x28
    feb4:	9510      	str	r5, [sp, #64]	; 0x40
    feb6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    feba:	4f97      	ldr	r7, [pc, #604]	; (10118 <_svfprintf_r+0x14f0>)
    febc:	f7ff b84b 	b.w	ef56 <_svfprintf_r+0x32e>
    fec0:	9d12      	ldr	r5, [sp, #72]	; 0x48
    fec2:	9509      	str	r5, [sp, #36]	; 0x24
    fec4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
    fec8:	2500      	movs	r5, #0
    feca:	930b      	str	r3, [sp, #44]	; 0x2c
    fecc:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    fed0:	950a      	str	r5, [sp, #40]	; 0x28
    fed2:	f7ff b843 	b.w	ef5c <_svfprintf_r+0x334>
    fed6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    feda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    fedc:	f8dc 3000 	ldr.w	r3, [ip]
    fee0:	f10c 0c04 	add.w	ip, ip, #4
    fee4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    fee8:	601c      	str	r4, [r3, #0]
    feea:	f7fe bec3 	b.w	ec74 <_svfprintf_r+0x4c>
    feee:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
    fef2:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    fef6:	f7ff ba8f 	b.w	f418 <_svfprintf_r+0x7f0>
    fefa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fefc:	1cdc      	adds	r4, r3, #3
    fefe:	db19      	blt.n	ff34 <_svfprintf_r+0x130c>
    ff00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ff02:	429c      	cmp	r4, r3
    ff04:	db16      	blt.n	ff34 <_svfprintf_r+0x130c>
    ff06:	9314      	str	r3, [sp, #80]	; 0x50
    ff08:	e714      	b.n	fd34 <_svfprintf_r+0x110c>
    ff0a:	4623      	mov	r3, r4
    ff0c:	e702      	b.n	fd14 <_svfprintf_r+0x10ec>
    ff0e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
    ff12:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    ff16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ff18:	9510      	str	r5, [sp, #64]	; 0x40
    ff1a:	900a      	str	r0, [sp, #40]	; 0x28
    ff1c:	9014      	str	r0, [sp, #80]	; 0x50
    ff1e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    ff22:	f7ff b818 	b.w	ef56 <_svfprintf_r+0x32e>
    ff26:	783b      	ldrb	r3, [r7, #0]
    ff28:	2b30      	cmp	r3, #48	; 0x30
    ff2a:	f000 80ad 	beq.w	10088 <_svfprintf_r+0x1460>
    ff2e:	9d25      	ldr	r5, [sp, #148]	; 0x94
    ff30:	442c      	add	r4, r5
    ff32:	e6dc      	b.n	fcee <_svfprintf_r+0x10c6>
    ff34:	f1a8 0802 	sub.w	r8, r8, #2
    ff38:	3b01      	subs	r3, #1
    ff3a:	2b00      	cmp	r3, #0
    ff3c:	9325      	str	r3, [sp, #148]	; 0x94
    ff3e:	bfba      	itte	lt
    ff40:	425b      	neglt	r3, r3
    ff42:	222d      	movlt	r2, #45	; 0x2d
    ff44:	222b      	movge	r2, #43	; 0x2b
    ff46:	2b09      	cmp	r3, #9
    ff48:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
    ff4c:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
    ff50:	dc65      	bgt.n	1001e <_svfprintf_r+0x13f6>
    ff52:	3330      	adds	r3, #48	; 0x30
    ff54:	2230      	movs	r2, #48	; 0x30
    ff56:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    ff5a:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
    ff5e:	ab28      	add	r3, sp, #160	; 0xa0
    ff60:	9d11      	ldr	r5, [sp, #68]	; 0x44
    ff62:	9c11      	ldr	r4, [sp, #68]	; 0x44
    ff64:	aa27      	add	r2, sp, #156	; 0x9c
    ff66:	1a9a      	subs	r2, r3, r2
    ff68:	2d01      	cmp	r5, #1
    ff6a:	9219      	str	r2, [sp, #100]	; 0x64
    ff6c:	4414      	add	r4, r2
    ff6e:	f340 80b7 	ble.w	100e0 <_svfprintf_r+0x14b8>
    ff72:	3401      	adds	r4, #1
    ff74:	2500      	movs	r5, #0
    ff76:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    ff7a:	9514      	str	r5, [sp, #80]	; 0x50
    ff7c:	e6ea      	b.n	fd54 <_svfprintf_r+0x112c>
    ff7e:	2400      	movs	r4, #0
    ff80:	4681      	mov	r9, r0
    ff82:	940a      	str	r4, [sp, #40]	; 0x28
    ff84:	f7fe beae 	b.w	ece4 <_svfprintf_r+0xbc>
    ff88:	980d      	ldr	r0, [sp, #52]	; 0x34
    ff8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff8c:	aa2b      	add	r2, sp, #172	; 0xac
    ff8e:	f002 f839 	bl	12004 <__ssprint_r>
    ff92:	2800      	cmp	r0, #0
    ff94:	f47e af60 	bne.w	ee58 <_svfprintf_r+0x230>
    ff98:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ff9a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    ff9c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    ff9e:	aa38      	add	r2, sp, #224	; 0xe0
    ffa0:	e616      	b.n	fbd0 <_svfprintf_r+0xfa8>
    ffa2:	9c14      	ldr	r4, [sp, #80]	; 0x50
    ffa4:	9d11      	ldr	r5, [sp, #68]	; 0x44
    ffa6:	2c00      	cmp	r4, #0
    ffa8:	bfd4      	ite	le
    ffaa:	f1c4 0402 	rsble	r4, r4, #2
    ffae:	2401      	movgt	r4, #1
    ffb0:	442c      	add	r4, r5
    ffb2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    ffb6:	f04f 0867 	mov.w	r8, #103	; 0x67
    ffba:	e6cb      	b.n	fd54 <_svfprintf_r+0x112c>
    ffbc:	9917      	ldr	r1, [sp, #92]	; 0x5c
    ffbe:	9816      	ldr	r0, [sp, #88]	; 0x58
    ffc0:	9020      	str	r0, [sp, #128]	; 0x80
    ffc2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    ffc6:	9121      	str	r1, [sp, #132]	; 0x84
    ffc8:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
    ffcc:	e660      	b.n	fc90 <_svfprintf_r+0x1068>
    ffce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ffd0:	9501      	str	r5, [sp, #4]
    ffd2:	2003      	movs	r0, #3
    ffd4:	a925      	add	r1, sp, #148	; 0x94
    ffd6:	aa26      	add	r2, sp, #152	; 0x98
    ffd8:	ab29      	add	r3, sp, #164	; 0xa4
    ffda:	9000      	str	r0, [sp, #0]
    ffdc:	9203      	str	r2, [sp, #12]
    ffde:	9304      	str	r3, [sp, #16]
    ffe0:	9102      	str	r1, [sp, #8]
    ffe2:	980d      	ldr	r0, [sp, #52]	; 0x34
    ffe4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    ffe8:	f000 fa92 	bl	10510 <_dtoa_r>
    ffec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ffee:	4607      	mov	r7, r0
    fff0:	e677      	b.n	fce2 <_svfprintf_r+0x10ba>
    fff2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fff4:	9401      	str	r4, [sp, #4]
    fff6:	2003      	movs	r0, #3
    fff8:	a925      	add	r1, sp, #148	; 0x94
    fffa:	aa26      	add	r2, sp, #152	; 0x98
    fffc:	ab29      	add	r3, sp, #164	; 0xa4
    fffe:	e7ec      	b.n	ffda <_svfprintf_r+0x13b2>
   10000:	9d25      	ldr	r5, [sp, #148]	; 0x94
   10002:	9514      	str	r5, [sp, #80]	; 0x50
   10004:	2d00      	cmp	r5, #0
   10006:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10008:	dd63      	ble.n	100d2 <_svfprintf_r+0x14aa>
   1000a:	bbb4      	cbnz	r4, 1007a <_svfprintf_r+0x1452>
   1000c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1000e:	07e8      	lsls	r0, r5, #31
   10010:	d433      	bmi.n	1007a <_svfprintf_r+0x1452>
   10012:	9c14      	ldr	r4, [sp, #80]	; 0x50
   10014:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   10018:	e69c      	b.n	fd54 <_svfprintf_r+0x112c>
   1001a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1001c:	e67a      	b.n	fd14 <_svfprintf_r+0x10ec>
   1001e:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
   10022:	4d3e      	ldr	r5, [pc, #248]	; (1011c <_svfprintf_r+0x14f4>)
   10024:	17da      	asrs	r2, r3, #31
   10026:	fb85 5103 	smull	r5, r1, r5, r3
   1002a:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
   1002e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
   10032:	4602      	mov	r2, r0
   10034:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
   10038:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1003c:	2909      	cmp	r1, #9
   1003e:	7010      	strb	r0, [r2, #0]
   10040:	460b      	mov	r3, r1
   10042:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
   10046:	dcec      	bgt.n	10022 <_svfprintf_r+0x13fa>
   10048:	f101 0330 	add.w	r3, r1, #48	; 0x30
   1004c:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
   10050:	b2d9      	uxtb	r1, r3
   10052:	4284      	cmp	r4, r0
   10054:	f802 1c01 	strb.w	r1, [r2, #-1]
   10058:	d95a      	bls.n	10110 <_svfprintf_r+0x14e8>
   1005a:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
   1005e:	4613      	mov	r3, r2
   10060:	e001      	b.n	10066 <_svfprintf_r+0x143e>
   10062:	f813 1b01 	ldrb.w	r1, [r3], #1
   10066:	42a3      	cmp	r3, r4
   10068:	f800 1f01 	strb.w	r1, [r0, #1]!
   1006c:	d1f9      	bne.n	10062 <_svfprintf_r+0x143a>
   1006e:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
   10072:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
   10076:	3bf6      	subs	r3, #246	; 0xf6
   10078:	e772      	b.n	ff60 <_svfprintf_r+0x1338>
   1007a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1007c:	1c6c      	adds	r4, r5, #1
   1007e:	9d14      	ldr	r5, [sp, #80]	; 0x50
   10080:	442c      	add	r4, r5
   10082:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   10086:	e665      	b.n	fd54 <_svfprintf_r+0x112c>
   10088:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   1008c:	2200      	movs	r2, #0
   1008e:	2300      	movs	r3, #0
   10090:	f7fc fb10 	bl	c6b4 <__aeabi_dcmpeq>
   10094:	2800      	cmp	r0, #0
   10096:	f47f af4a 	bne.w	ff2e <_svfprintf_r+0x1306>
   1009a:	f1c5 0501 	rsb	r5, r5, #1
   1009e:	9525      	str	r5, [sp, #148]	; 0x94
   100a0:	442c      	add	r4, r5
   100a2:	e624      	b.n	fcee <_svfprintf_r+0x10c6>
   100a4:	9d14      	ldr	r5, [sp, #80]	; 0x50
   100a6:	1c6c      	adds	r4, r5, #1
   100a8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   100ac:	f04f 0867 	mov.w	r8, #103	; 0x67
   100b0:	e650      	b.n	fd54 <_svfprintf_r+0x112c>
   100b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   100b4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   100b8:	682d      	ldr	r5, [r5, #0]
   100ba:	f899 8001 	ldrb.w	r8, [r9, #1]
   100be:	950a      	str	r5, [sp, #40]	; 0x28
   100c0:	f10c 0304 	add.w	r3, ip, #4
   100c4:	2d00      	cmp	r5, #0
   100c6:	9310      	str	r3, [sp, #64]	; 0x40
   100c8:	4681      	mov	r9, r0
   100ca:	f6be ae09 	bge.w	ece0 <_svfprintf_r+0xb8>
   100ce:	f7fe be04 	b.w	ecda <_svfprintf_r+0xb2>
   100d2:	b97c      	cbnz	r4, 100f4 <_svfprintf_r+0x14cc>
   100d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   100d6:	07e9      	lsls	r1, r5, #31
   100d8:	d40c      	bmi.n	100f4 <_svfprintf_r+0x14cc>
   100da:	2301      	movs	r3, #1
   100dc:	461c      	mov	r4, r3
   100de:	e639      	b.n	fd54 <_svfprintf_r+0x112c>
   100e0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   100e4:	f01c 0301 	ands.w	r3, ip, #1
   100e8:	f47f af43 	bne.w	ff72 <_svfprintf_r+0x134a>
   100ec:	9314      	str	r3, [sp, #80]	; 0x50
   100ee:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   100f2:	e62f      	b.n	fd54 <_svfprintf_r+0x112c>
   100f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   100f6:	1cac      	adds	r4, r5, #2
   100f8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   100fc:	e62a      	b.n	fd54 <_svfprintf_r+0x112c>
   100fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10100:	230c      	movs	r3, #12
   10102:	602b      	str	r3, [r5, #0]
   10104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10108:	f7fe beae 	b.w	ee68 <_svfprintf_r+0x240>
   1010c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1010e:	e713      	b.n	ff38 <_svfprintf_r+0x1310>
   10110:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
   10114:	e724      	b.n	ff60 <_svfprintf_r+0x1338>
   10116:	bf00      	nop
   10118:	000141a8 	.word	0x000141a8
   1011c:	66666667 	.word	0x66666667

00010120 <_vdprintf_r>:
   10120:	b5f0      	push	{r4, r5, r6, r7, lr}
   10122:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   10126:	ad04      	add	r5, sp, #16
   10128:	9300      	str	r3, [sp, #0]
   1012a:	f44f 7400 	mov.w	r4, #512	; 0x200
   1012e:	4613      	mov	r3, r2
   10130:	460f      	mov	r7, r1
   10132:	aa03      	add	r2, sp, #12
   10134:	4629      	mov	r1, r5
   10136:	9403      	str	r4, [sp, #12]
   10138:	4606      	mov	r6, r0
   1013a:	f001 ffe3 	bl	12104 <_vasnprintf_r>
   1013e:	4604      	mov	r4, r0
   10140:	b180      	cbz	r0, 10164 <_vdprintf_r+0x44>
   10142:	4639      	mov	r1, r7
   10144:	4630      	mov	r0, r6
   10146:	4622      	mov	r2, r4
   10148:	9b03      	ldr	r3, [sp, #12]
   1014a:	f000 f86f 	bl	1022c <_write_r>
   1014e:	42ac      	cmp	r4, r5
   10150:	9003      	str	r0, [sp, #12]
   10152:	d004      	beq.n	1015e <_vdprintf_r+0x3e>
   10154:	4630      	mov	r0, r6
   10156:	4621      	mov	r1, r4
   10158:	f001 faa0 	bl	1169c <_free_r>
   1015c:	9803      	ldr	r0, [sp, #12]
   1015e:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   10162:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10168:	e7f9      	b.n	1015e <_vdprintf_r+0x3e>
   1016a:	bf00      	nop

0001016c <vdprintf>:
   1016c:	b430      	push	{r4, r5}
   1016e:	4c04      	ldr	r4, [pc, #16]	; (10180 <vdprintf+0x14>)
   10170:	460d      	mov	r5, r1
   10172:	4613      	mov	r3, r2
   10174:	4601      	mov	r1, r0
   10176:	462a      	mov	r2, r5
   10178:	6820      	ldr	r0, [r4, #0]
   1017a:	bc30      	pop	{r4, r5}
   1017c:	f7ff bfd0 	b.w	10120 <_vdprintf_r>
   10180:	1fff88f0 	.word	0x1fff88f0

00010184 <__swbuf_r>:
   10184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10186:	460d      	mov	r5, r1
   10188:	4614      	mov	r4, r2
   1018a:	4607      	mov	r7, r0
   1018c:	b110      	cbz	r0, 10194 <__swbuf_r+0x10>
   1018e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   10190:	2b00      	cmp	r3, #0
   10192:	d048      	beq.n	10226 <__swbuf_r+0xa2>
   10194:	89a2      	ldrh	r2, [r4, #12]
   10196:	69a3      	ldr	r3, [r4, #24]
   10198:	60a3      	str	r3, [r4, #8]
   1019a:	b293      	uxth	r3, r2
   1019c:	0718      	lsls	r0, r3, #28
   1019e:	d538      	bpl.n	10212 <__swbuf_r+0x8e>
   101a0:	6926      	ldr	r6, [r4, #16]
   101a2:	2e00      	cmp	r6, #0
   101a4:	d035      	beq.n	10212 <__swbuf_r+0x8e>
   101a6:	0499      	lsls	r1, r3, #18
   101a8:	b2ed      	uxtb	r5, r5
   101aa:	d515      	bpl.n	101d8 <__swbuf_r+0x54>
   101ac:	6823      	ldr	r3, [r4, #0]
   101ae:	6962      	ldr	r2, [r4, #20]
   101b0:	1b9e      	subs	r6, r3, r6
   101b2:	4296      	cmp	r6, r2
   101b4:	da1c      	bge.n	101f0 <__swbuf_r+0x6c>
   101b6:	3601      	adds	r6, #1
   101b8:	68a2      	ldr	r2, [r4, #8]
   101ba:	1c59      	adds	r1, r3, #1
   101bc:	3a01      	subs	r2, #1
   101be:	60a2      	str	r2, [r4, #8]
   101c0:	6021      	str	r1, [r4, #0]
   101c2:	701d      	strb	r5, [r3, #0]
   101c4:	6963      	ldr	r3, [r4, #20]
   101c6:	42b3      	cmp	r3, r6
   101c8:	d01a      	beq.n	10200 <__swbuf_r+0x7c>
   101ca:	89a3      	ldrh	r3, [r4, #12]
   101cc:	07db      	lsls	r3, r3, #31
   101ce:	d501      	bpl.n	101d4 <__swbuf_r+0x50>
   101d0:	2d0a      	cmp	r5, #10
   101d2:	d015      	beq.n	10200 <__swbuf_r+0x7c>
   101d4:	4628      	mov	r0, r5
   101d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   101d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   101da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   101de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   101e2:	6663      	str	r3, [r4, #100]	; 0x64
   101e4:	6823      	ldr	r3, [r4, #0]
   101e6:	81a2      	strh	r2, [r4, #12]
   101e8:	6962      	ldr	r2, [r4, #20]
   101ea:	1b9e      	subs	r6, r3, r6
   101ec:	4296      	cmp	r6, r2
   101ee:	dbe2      	blt.n	101b6 <__swbuf_r+0x32>
   101f0:	4638      	mov	r0, r7
   101f2:	4621      	mov	r1, r4
   101f4:	f001 f952 	bl	1149c <_fflush_r>
   101f8:	b940      	cbnz	r0, 1020c <__swbuf_r+0x88>
   101fa:	6823      	ldr	r3, [r4, #0]
   101fc:	2601      	movs	r6, #1
   101fe:	e7db      	b.n	101b8 <__swbuf_r+0x34>
   10200:	4638      	mov	r0, r7
   10202:	4621      	mov	r1, r4
   10204:	f001 f94a 	bl	1149c <_fflush_r>
   10208:	2800      	cmp	r0, #0
   1020a:	d0e3      	beq.n	101d4 <__swbuf_r+0x50>
   1020c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10212:	4638      	mov	r0, r7
   10214:	4621      	mov	r1, r4
   10216:	f000 f81d 	bl	10254 <__swsetup_r>
   1021a:	2800      	cmp	r0, #0
   1021c:	d1f6      	bne.n	1020c <__swbuf_r+0x88>
   1021e:	89a2      	ldrh	r2, [r4, #12]
   10220:	6926      	ldr	r6, [r4, #16]
   10222:	b293      	uxth	r3, r2
   10224:	e7bf      	b.n	101a6 <__swbuf_r+0x22>
   10226:	f001 f955 	bl	114d4 <__sinit>
   1022a:	e7b3      	b.n	10194 <__swbuf_r+0x10>

0001022c <_write_r>:
   1022c:	b570      	push	{r4, r5, r6, lr}
   1022e:	4c08      	ldr	r4, [pc, #32]	; (10250 <_write_r+0x24>)
   10230:	4606      	mov	r6, r0
   10232:	2500      	movs	r5, #0
   10234:	4608      	mov	r0, r1
   10236:	4611      	mov	r1, r2
   10238:	461a      	mov	r2, r3
   1023a:	6025      	str	r5, [r4, #0]
   1023c:	f7f2 fc92 	bl	2b64 <_write>
   10240:	1c43      	adds	r3, r0, #1
   10242:	d000      	beq.n	10246 <_write_r+0x1a>
   10244:	bd70      	pop	{r4, r5, r6, pc}
   10246:	6823      	ldr	r3, [r4, #0]
   10248:	2b00      	cmp	r3, #0
   1024a:	d0fb      	beq.n	10244 <_write_r+0x18>
   1024c:	6033      	str	r3, [r6, #0]
   1024e:	bd70      	pop	{r4, r5, r6, pc}
   10250:	1fff9c90 	.word	0x1fff9c90

00010254 <__swsetup_r>:
   10254:	4b2f      	ldr	r3, [pc, #188]	; (10314 <__swsetup_r+0xc0>)
   10256:	681b      	ldr	r3, [r3, #0]
   10258:	b570      	push	{r4, r5, r6, lr}
   1025a:	4606      	mov	r6, r0
   1025c:	460c      	mov	r4, r1
   1025e:	b113      	cbz	r3, 10266 <__swsetup_r+0x12>
   10260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10262:	2a00      	cmp	r2, #0
   10264:	d036      	beq.n	102d4 <__swsetup_r+0x80>
   10266:	89a5      	ldrh	r5, [r4, #12]
   10268:	b2ab      	uxth	r3, r5
   1026a:	0719      	lsls	r1, r3, #28
   1026c:	d50c      	bpl.n	10288 <__swsetup_r+0x34>
   1026e:	6922      	ldr	r2, [r4, #16]
   10270:	b1aa      	cbz	r2, 1029e <__swsetup_r+0x4a>
   10272:	f013 0101 	ands.w	r1, r3, #1
   10276:	d01e      	beq.n	102b6 <__swsetup_r+0x62>
   10278:	6963      	ldr	r3, [r4, #20]
   1027a:	2100      	movs	r1, #0
   1027c:	425b      	negs	r3, r3
   1027e:	61a3      	str	r3, [r4, #24]
   10280:	60a1      	str	r1, [r4, #8]
   10282:	b1f2      	cbz	r2, 102c2 <__swsetup_r+0x6e>
   10284:	2000      	movs	r0, #0
   10286:	bd70      	pop	{r4, r5, r6, pc}
   10288:	06da      	lsls	r2, r3, #27
   1028a:	d53b      	bpl.n	10304 <__swsetup_r+0xb0>
   1028c:	075b      	lsls	r3, r3, #29
   1028e:	d425      	bmi.n	102dc <__swsetup_r+0x88>
   10290:	6922      	ldr	r2, [r4, #16]
   10292:	f045 0308 	orr.w	r3, r5, #8
   10296:	81a3      	strh	r3, [r4, #12]
   10298:	b29b      	uxth	r3, r3
   1029a:	2a00      	cmp	r2, #0
   1029c:	d1e9      	bne.n	10272 <__swsetup_r+0x1e>
   1029e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   102a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   102a6:	d0e4      	beq.n	10272 <__swsetup_r+0x1e>
   102a8:	4630      	mov	r0, r6
   102aa:	4621      	mov	r1, r4
   102ac:	f001 faee 	bl	1188c <__smakebuf_r>
   102b0:	89a3      	ldrh	r3, [r4, #12]
   102b2:	6922      	ldr	r2, [r4, #16]
   102b4:	e7dd      	b.n	10272 <__swsetup_r+0x1e>
   102b6:	0798      	lsls	r0, r3, #30
   102b8:	bf58      	it	pl
   102ba:	6961      	ldrpl	r1, [r4, #20]
   102bc:	60a1      	str	r1, [r4, #8]
   102be:	2a00      	cmp	r2, #0
   102c0:	d1e0      	bne.n	10284 <__swsetup_r+0x30>
   102c2:	89a3      	ldrh	r3, [r4, #12]
   102c4:	061a      	lsls	r2, r3, #24
   102c6:	d5dd      	bpl.n	10284 <__swsetup_r+0x30>
   102c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   102cc:	81a3      	strh	r3, [r4, #12]
   102ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   102d2:	bd70      	pop	{r4, r5, r6, pc}
   102d4:	4618      	mov	r0, r3
   102d6:	f001 f8fd 	bl	114d4 <__sinit>
   102da:	e7c4      	b.n	10266 <__swsetup_r+0x12>
   102dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   102de:	b149      	cbz	r1, 102f4 <__swsetup_r+0xa0>
   102e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   102e4:	4299      	cmp	r1, r3
   102e6:	d003      	beq.n	102f0 <__swsetup_r+0x9c>
   102e8:	4630      	mov	r0, r6
   102ea:	f001 f9d7 	bl	1169c <_free_r>
   102ee:	89a5      	ldrh	r5, [r4, #12]
   102f0:	2300      	movs	r3, #0
   102f2:	6323      	str	r3, [r4, #48]	; 0x30
   102f4:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   102f8:	2300      	movs	r3, #0
   102fa:	6922      	ldr	r2, [r4, #16]
   102fc:	6063      	str	r3, [r4, #4]
   102fe:	b2ad      	uxth	r5, r5
   10300:	6022      	str	r2, [r4, #0]
   10302:	e7c6      	b.n	10292 <__swsetup_r+0x3e>
   10304:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   10308:	2309      	movs	r3, #9
   1030a:	6033      	str	r3, [r6, #0]
   1030c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10310:	81a5      	strh	r5, [r4, #12]
   10312:	bd70      	pop	{r4, r5, r6, pc}
   10314:	1fff88f0 	.word	0x1fff88f0

00010318 <__register_exitproc>:
   10318:	b5f0      	push	{r4, r5, r6, r7, lr}
   1031a:	4c27      	ldr	r4, [pc, #156]	; (103b8 <__register_exitproc+0xa0>)
   1031c:	6826      	ldr	r6, [r4, #0]
   1031e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   10322:	b085      	sub	sp, #20
   10324:	4607      	mov	r7, r0
   10326:	2c00      	cmp	r4, #0
   10328:	d041      	beq.n	103ae <__register_exitproc+0x96>
   1032a:	6865      	ldr	r5, [r4, #4]
   1032c:	2d1f      	cmp	r5, #31
   1032e:	dd1e      	ble.n	1036e <__register_exitproc+0x56>
   10330:	4822      	ldr	r0, [pc, #136]	; (103bc <__register_exitproc+0xa4>)
   10332:	b918      	cbnz	r0, 1033c <__register_exitproc+0x24>
   10334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10338:	b005      	add	sp, #20
   1033a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1033c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10340:	9103      	str	r1, [sp, #12]
   10342:	9202      	str	r2, [sp, #8]
   10344:	9301      	str	r3, [sp, #4]
   10346:	f7fd fbfb 	bl	db40 <malloc>
   1034a:	9903      	ldr	r1, [sp, #12]
   1034c:	9a02      	ldr	r2, [sp, #8]
   1034e:	9b01      	ldr	r3, [sp, #4]
   10350:	4604      	mov	r4, r0
   10352:	2800      	cmp	r0, #0
   10354:	d0ee      	beq.n	10334 <__register_exitproc+0x1c>
   10356:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   1035a:	6025      	str	r5, [r4, #0]
   1035c:	2000      	movs	r0, #0
   1035e:	6060      	str	r0, [r4, #4]
   10360:	4605      	mov	r5, r0
   10362:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   10366:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   1036a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   1036e:	b93f      	cbnz	r7, 10380 <__register_exitproc+0x68>
   10370:	1cab      	adds	r3, r5, #2
   10372:	2000      	movs	r0, #0
   10374:	3501      	adds	r5, #1
   10376:	6065      	str	r5, [r4, #4]
   10378:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   1037c:	b005      	add	sp, #20
   1037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10380:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   10384:	f04f 0c01 	mov.w	ip, #1
   10388:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   1038c:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
   10390:	fa0c f205 	lsl.w	r2, ip, r5
   10394:	4316      	orrs	r6, r2
   10396:	2f02      	cmp	r7, #2
   10398:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
   1039c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   103a0:	d1e6      	bne.n	10370 <__register_exitproc+0x58>
   103a2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   103a6:	431a      	orrs	r2, r3
   103a8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   103ac:	e7e0      	b.n	10370 <__register_exitproc+0x58>
   103ae:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   103b2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   103b6:	e7b8      	b.n	1032a <__register_exitproc+0x12>
   103b8:	0001415c 	.word	0x0001415c
   103bc:	0000db41 	.word	0x0000db41

000103c0 <register_fini>:
   103c0:	4b02      	ldr	r3, [pc, #8]	; (103cc <register_fini+0xc>)
   103c2:	b113      	cbz	r3, 103ca <register_fini+0xa>
   103c4:	4802      	ldr	r0, [pc, #8]	; (103d0 <register_fini+0x10>)
   103c6:	f000 b805 	b.w	103d4 <atexit>
   103ca:	4770      	bx	lr
   103cc:	00000000 	.word	0x00000000
   103d0:	000115d1 	.word	0x000115d1

000103d4 <atexit>:
   103d4:	4601      	mov	r1, r0
   103d6:	2000      	movs	r0, #0
   103d8:	4602      	mov	r2, r0
   103da:	4603      	mov	r3, r0
   103dc:	f7ff bf9c 	b.w	10318 <__register_exitproc>

000103e0 <quorem>:
   103e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   103e4:	6903      	ldr	r3, [r0, #16]
   103e6:	690d      	ldr	r5, [r1, #16]
   103e8:	429d      	cmp	r5, r3
   103ea:	b083      	sub	sp, #12
   103ec:	4683      	mov	fp, r0
   103ee:	f300 808b 	bgt.w	10508 <quorem+0x128>
   103f2:	3d01      	subs	r5, #1
   103f4:	f101 0414 	add.w	r4, r1, #20
   103f8:	f100 0a14 	add.w	sl, r0, #20
   103fc:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   10400:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   10404:	3201      	adds	r2, #1
   10406:	fbb3 f8f2 	udiv	r8, r3, r2
   1040a:	00aa      	lsls	r2, r5, #2
   1040c:	4691      	mov	r9, r2
   1040e:	9200      	str	r2, [sp, #0]
   10410:	4452      	add	r2, sl
   10412:	44a1      	add	r9, r4
   10414:	9201      	str	r2, [sp, #4]
   10416:	f1b8 0f00 	cmp.w	r8, #0
   1041a:	d03d      	beq.n	10498 <quorem+0xb8>
   1041c:	f04f 0e00 	mov.w	lr, #0
   10420:	4670      	mov	r0, lr
   10422:	4622      	mov	r2, r4
   10424:	4653      	mov	r3, sl
   10426:	468c      	mov	ip, r1
   10428:	f852 6b04 	ldr.w	r6, [r2], #4
   1042c:	6819      	ldr	r1, [r3, #0]
   1042e:	b2b7      	uxth	r7, r6
   10430:	0c36      	lsrs	r6, r6, #16
   10432:	fb07 ee08 	mla	lr, r7, r8, lr
   10436:	fb06 f608 	mul.w	r6, r6, r8
   1043a:	eb06 461e 	add.w	r6, r6, lr, lsr #16
   1043e:	fa1f f78e 	uxth.w	r7, lr
   10442:	1bc7      	subs	r7, r0, r7
   10444:	b2b0      	uxth	r0, r6
   10446:	fa17 f781 	uxtah	r7, r7, r1
   1044a:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
   1044e:	eb00 4027 	add.w	r0, r0, r7, asr #16
   10452:	b2bf      	uxth	r7, r7
   10454:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   10458:	4591      	cmp	r9, r2
   1045a:	f843 7b04 	str.w	r7, [r3], #4
   1045e:	ea4f 4020 	mov.w	r0, r0, asr #16
   10462:	ea4f 4e16 	mov.w	lr, r6, lsr #16
   10466:	d2df      	bcs.n	10428 <quorem+0x48>
   10468:	9a00      	ldr	r2, [sp, #0]
   1046a:	f85a 3002 	ldr.w	r3, [sl, r2]
   1046e:	4661      	mov	r1, ip
   10470:	b993      	cbnz	r3, 10498 <quorem+0xb8>
   10472:	9a01      	ldr	r2, [sp, #4]
   10474:	1f13      	subs	r3, r2, #4
   10476:	459a      	cmp	sl, r3
   10478:	d20c      	bcs.n	10494 <quorem+0xb4>
   1047a:	f852 3c04 	ldr.w	r3, [r2, #-4]
   1047e:	b94b      	cbnz	r3, 10494 <quorem+0xb4>
   10480:	f1a2 0308 	sub.w	r3, r2, #8
   10484:	e002      	b.n	1048c <quorem+0xac>
   10486:	681a      	ldr	r2, [r3, #0]
   10488:	3b04      	subs	r3, #4
   1048a:	b91a      	cbnz	r2, 10494 <quorem+0xb4>
   1048c:	459a      	cmp	sl, r3
   1048e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   10492:	d3f8      	bcc.n	10486 <quorem+0xa6>
   10494:	f8cb 5010 	str.w	r5, [fp, #16]
   10498:	4658      	mov	r0, fp
   1049a:	f001 fc85 	bl	11da8 <__mcmp>
   1049e:	2800      	cmp	r0, #0
   104a0:	db2e      	blt.n	10500 <quorem+0x120>
   104a2:	f108 0801 	add.w	r8, r8, #1
   104a6:	4653      	mov	r3, sl
   104a8:	2200      	movs	r2, #0
   104aa:	f854 6b04 	ldr.w	r6, [r4], #4
   104ae:	6818      	ldr	r0, [r3, #0]
   104b0:	b2b1      	uxth	r1, r6
   104b2:	1a52      	subs	r2, r2, r1
   104b4:	0c36      	lsrs	r6, r6, #16
   104b6:	fa12 f180 	uxtah	r1, r2, r0
   104ba:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
   104be:	eb02 4221 	add.w	r2, r2, r1, asr #16
   104c2:	b289      	uxth	r1, r1
   104c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   104c8:	45a1      	cmp	r9, r4
   104ca:	f843 1b04 	str.w	r1, [r3], #4
   104ce:	ea4f 4222 	mov.w	r2, r2, asr #16
   104d2:	d2ea      	bcs.n	104aa <quorem+0xca>
   104d4:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   104d8:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
   104dc:	b982      	cbnz	r2, 10500 <quorem+0x120>
   104de:	1f1a      	subs	r2, r3, #4
   104e0:	4592      	cmp	sl, r2
   104e2:	d20b      	bcs.n	104fc <quorem+0x11c>
   104e4:	f853 2c04 	ldr.w	r2, [r3, #-4]
   104e8:	b942      	cbnz	r2, 104fc <quorem+0x11c>
   104ea:	3b08      	subs	r3, #8
   104ec:	e002      	b.n	104f4 <quorem+0x114>
   104ee:	681a      	ldr	r2, [r3, #0]
   104f0:	3b04      	subs	r3, #4
   104f2:	b91a      	cbnz	r2, 104fc <quorem+0x11c>
   104f4:	459a      	cmp	sl, r3
   104f6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   104fa:	d3f8      	bcc.n	104ee <quorem+0x10e>
   104fc:	f8cb 5010 	str.w	r5, [fp, #16]
   10500:	4640      	mov	r0, r8
   10502:	b003      	add	sp, #12
   10504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10508:	2000      	movs	r0, #0
   1050a:	b003      	add	sp, #12
   1050c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010510 <_dtoa_r>:
   10510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10514:	6c01      	ldr	r1, [r0, #64]	; 0x40
   10516:	b09b      	sub	sp, #108	; 0x6c
   10518:	4604      	mov	r4, r0
   1051a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   1051c:	4692      	mov	sl, r2
   1051e:	469b      	mov	fp, r3
   10520:	b149      	cbz	r1, 10536 <_dtoa_r+0x26>
   10522:	6c43      	ldr	r3, [r0, #68]	; 0x44
   10524:	604b      	str	r3, [r1, #4]
   10526:	2201      	movs	r2, #1
   10528:	fa02 f303 	lsl.w	r3, r2, r3
   1052c:	608b      	str	r3, [r1, #8]
   1052e:	f001 fa43 	bl	119b8 <_Bfree>
   10532:	2300      	movs	r3, #0
   10534:	6423      	str	r3, [r4, #64]	; 0x40
   10536:	f1bb 0f00 	cmp.w	fp, #0
   1053a:	46d9      	mov	r9, fp
   1053c:	db33      	blt.n	105a6 <_dtoa_r+0x96>
   1053e:	2300      	movs	r3, #0
   10540:	602b      	str	r3, [r5, #0]
   10542:	4ba5      	ldr	r3, [pc, #660]	; (107d8 <_dtoa_r+0x2c8>)
   10544:	461a      	mov	r2, r3
   10546:	ea09 0303 	and.w	r3, r9, r3
   1054a:	4293      	cmp	r3, r2
   1054c:	d014      	beq.n	10578 <_dtoa_r+0x68>
   1054e:	4650      	mov	r0, sl
   10550:	4659      	mov	r1, fp
   10552:	2200      	movs	r2, #0
   10554:	2300      	movs	r3, #0
   10556:	f7fc f8ad 	bl	c6b4 <__aeabi_dcmpeq>
   1055a:	4680      	mov	r8, r0
   1055c:	b348      	cbz	r0, 105b2 <_dtoa_r+0xa2>
   1055e:	9e26      	ldr	r6, [sp, #152]	; 0x98
   10560:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   10562:	2301      	movs	r3, #1
   10564:	6033      	str	r3, [r6, #0]
   10566:	2d00      	cmp	r5, #0
   10568:	f000 80c9 	beq.w	106fe <_dtoa_r+0x1ee>
   1056c:	489b      	ldr	r0, [pc, #620]	; (107dc <_dtoa_r+0x2cc>)
   1056e:	6028      	str	r0, [r5, #0]
   10570:	3801      	subs	r0, #1
   10572:	b01b      	add	sp, #108	; 0x6c
   10574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10578:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1057a:	f242 730f 	movw	r3, #9999	; 0x270f
   1057e:	602b      	str	r3, [r5, #0]
   10580:	f1ba 0f00 	cmp.w	sl, #0
   10584:	f000 80a4 	beq.w	106d0 <_dtoa_r+0x1c0>
   10588:	4895      	ldr	r0, [pc, #596]	; (107e0 <_dtoa_r+0x2d0>)
   1058a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   1058c:	2e00      	cmp	r6, #0
   1058e:	d0f0      	beq.n	10572 <_dtoa_r+0x62>
   10590:	78c3      	ldrb	r3, [r0, #3]
   10592:	2b00      	cmp	r3, #0
   10594:	f000 80b5 	beq.w	10702 <_dtoa_r+0x1f2>
   10598:	f100 0308 	add.w	r3, r0, #8
   1059c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   1059e:	602b      	str	r3, [r5, #0]
   105a0:	b01b      	add	sp, #108	; 0x6c
   105a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105a6:	2301      	movs	r3, #1
   105a8:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
   105ac:	602b      	str	r3, [r5, #0]
   105ae:	46cb      	mov	fp, r9
   105b0:	e7c7      	b.n	10542 <_dtoa_r+0x32>
   105b2:	aa19      	add	r2, sp, #100	; 0x64
   105b4:	ab18      	add	r3, sp, #96	; 0x60
   105b6:	e88d 000c 	stmia.w	sp, {r2, r3}
   105ba:	4620      	mov	r0, r4
   105bc:	4652      	mov	r2, sl
   105be:	465b      	mov	r3, fp
   105c0:	f001 fc80 	bl	11ec4 <__d2b>
   105c4:	ea5f 5519 	movs.w	r5, r9, lsr #20
   105c8:	900a      	str	r0, [sp, #40]	; 0x28
   105ca:	f040 808a 	bne.w	106e2 <_dtoa_r+0x1d2>
   105ce:	9f18      	ldr	r7, [sp, #96]	; 0x60
   105d0:	9d19      	ldr	r5, [sp, #100]	; 0x64
   105d2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   105d6:	443d      	add	r5, r7
   105d8:	429d      	cmp	r5, r3
   105da:	f2c0 8294 	blt.w	10b06 <_dtoa_r+0x5f6>
   105de:	331f      	adds	r3, #31
   105e0:	f205 4212 	addw	r2, r5, #1042	; 0x412
   105e4:	1b5b      	subs	r3, r3, r5
   105e6:	fa09 f303 	lsl.w	r3, r9, r3
   105ea:	fa2a f202 	lsr.w	r2, sl, r2
   105ee:	ea43 0002 	orr.w	r0, r3, r2
   105f2:	f7fb fd81 	bl	c0f8 <__aeabi_ui2d>
   105f6:	2601      	movs	r6, #1
   105f8:	3d01      	subs	r5, #1
   105fa:	46b8      	mov	r8, r7
   105fc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   10600:	9616      	str	r6, [sp, #88]	; 0x58
   10602:	2200      	movs	r2, #0
   10604:	4b77      	ldr	r3, [pc, #476]	; (107e4 <_dtoa_r+0x2d4>)
   10606:	f7fb fc39 	bl	be7c <__aeabi_dsub>
   1060a:	a36d      	add	r3, pc, #436	; (adr r3, 107c0 <_dtoa_r+0x2b0>)
   1060c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10610:	f7fb fde8 	bl	c1e4 <__aeabi_dmul>
   10614:	a36c      	add	r3, pc, #432	; (adr r3, 107c8 <_dtoa_r+0x2b8>)
   10616:	e9d3 2300 	ldrd	r2, r3, [r3]
   1061a:	f7fb fc31 	bl	be80 <__adddf3>
   1061e:	4606      	mov	r6, r0
   10620:	4628      	mov	r0, r5
   10622:	460f      	mov	r7, r1
   10624:	f7fb fd78 	bl	c118 <__aeabi_i2d>
   10628:	a369      	add	r3, pc, #420	; (adr r3, 107d0 <_dtoa_r+0x2c0>)
   1062a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1062e:	f7fb fdd9 	bl	c1e4 <__aeabi_dmul>
   10632:	4602      	mov	r2, r0
   10634:	460b      	mov	r3, r1
   10636:	4630      	mov	r0, r6
   10638:	4639      	mov	r1, r7
   1063a:	f7fb fc21 	bl	be80 <__adddf3>
   1063e:	4606      	mov	r6, r0
   10640:	460f      	mov	r7, r1
   10642:	f7fc f869 	bl	c718 <__aeabi_d2iz>
   10646:	4639      	mov	r1, r7
   10648:	9007      	str	r0, [sp, #28]
   1064a:	2200      	movs	r2, #0
   1064c:	4630      	mov	r0, r6
   1064e:	2300      	movs	r3, #0
   10650:	f7fc f83a 	bl	c6c8 <__aeabi_dcmplt>
   10654:	2800      	cmp	r0, #0
   10656:	f040 8228 	bne.w	10aaa <_dtoa_r+0x59a>
   1065a:	9e07      	ldr	r6, [sp, #28]
   1065c:	2e16      	cmp	r6, #22
   1065e:	f200 8221 	bhi.w	10aa4 <_dtoa_r+0x594>
   10662:	4b61      	ldr	r3, [pc, #388]	; (107e8 <_dtoa_r+0x2d8>)
   10664:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   10668:	e9d3 0100 	ldrd	r0, r1, [r3]
   1066c:	4652      	mov	r2, sl
   1066e:	465b      	mov	r3, fp
   10670:	f7fc f848 	bl	c704 <__aeabi_dcmpgt>
   10674:	2800      	cmp	r0, #0
   10676:	f000 824b 	beq.w	10b10 <_dtoa_r+0x600>
   1067a:	3e01      	subs	r6, #1
   1067c:	9607      	str	r6, [sp, #28]
   1067e:	2600      	movs	r6, #0
   10680:	960e      	str	r6, [sp, #56]	; 0x38
   10682:	ebc5 0508 	rsb	r5, r5, r8
   10686:	3d01      	subs	r5, #1
   10688:	9506      	str	r5, [sp, #24]
   1068a:	f100 8225 	bmi.w	10ad8 <_dtoa_r+0x5c8>
   1068e:	2500      	movs	r5, #0
   10690:	9508      	str	r5, [sp, #32]
   10692:	9e07      	ldr	r6, [sp, #28]
   10694:	2e00      	cmp	r6, #0
   10696:	f2c0 8216 	blt.w	10ac6 <_dtoa_r+0x5b6>
   1069a:	9d06      	ldr	r5, [sp, #24]
   1069c:	960d      	str	r6, [sp, #52]	; 0x34
   1069e:	4435      	add	r5, r6
   106a0:	2600      	movs	r6, #0
   106a2:	9506      	str	r5, [sp, #24]
   106a4:	960c      	str	r6, [sp, #48]	; 0x30
   106a6:	9d24      	ldr	r5, [sp, #144]	; 0x90
   106a8:	2d09      	cmp	r5, #9
   106aa:	d82c      	bhi.n	10706 <_dtoa_r+0x1f6>
   106ac:	2d05      	cmp	r5, #5
   106ae:	bfc4      	itt	gt
   106b0:	3d04      	subgt	r5, #4
   106b2:	9524      	strgt	r5, [sp, #144]	; 0x90
   106b4:	9e24      	ldr	r6, [sp, #144]	; 0x90
   106b6:	f1a6 0302 	sub.w	r3, r6, #2
   106ba:	bfcc      	ite	gt
   106bc:	2500      	movgt	r5, #0
   106be:	2501      	movle	r5, #1
   106c0:	2b03      	cmp	r3, #3
   106c2:	d822      	bhi.n	1070a <_dtoa_r+0x1fa>
   106c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   106c8:	029e03b7 	.word	0x029e03b7
   106cc:	049a03c0 	.word	0x049a03c0
   106d0:	4a46      	ldr	r2, [pc, #280]	; (107ec <_dtoa_r+0x2dc>)
   106d2:	4b43      	ldr	r3, [pc, #268]	; (107e0 <_dtoa_r+0x2d0>)
   106d4:	f3c9 0013 	ubfx	r0, r9, #0, #20
   106d8:	2800      	cmp	r0, #0
   106da:	bf0c      	ite	eq
   106dc:	4610      	moveq	r0, r2
   106de:	4618      	movne	r0, r3
   106e0:	e753      	b.n	1058a <_dtoa_r+0x7a>
   106e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   106e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   106ea:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   106ee:	4650      	mov	r0, sl
   106f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   106f4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   106f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   106fc:	e781      	b.n	10602 <_dtoa_r+0xf2>
   106fe:	483c      	ldr	r0, [pc, #240]	; (107f0 <_dtoa_r+0x2e0>)
   10700:	e737      	b.n	10572 <_dtoa_r+0x62>
   10702:	1cc3      	adds	r3, r0, #3
   10704:	e74a      	b.n	1059c <_dtoa_r+0x8c>
   10706:	2500      	movs	r5, #0
   10708:	9524      	str	r5, [sp, #144]	; 0x90
   1070a:	2500      	movs	r5, #0
   1070c:	6465      	str	r5, [r4, #68]	; 0x44
   1070e:	4629      	mov	r1, r5
   10710:	4620      	mov	r0, r4
   10712:	f001 f92b 	bl	1196c <_Balloc>
   10716:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1071a:	2601      	movs	r6, #1
   1071c:	9009      	str	r0, [sp, #36]	; 0x24
   1071e:	9525      	str	r5, [sp, #148]	; 0x94
   10720:	6420      	str	r0, [r4, #64]	; 0x40
   10722:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   10726:	960b      	str	r6, [sp, #44]	; 0x2c
   10728:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1072a:	2b00      	cmp	r3, #0
   1072c:	f2c0 80d2 	blt.w	108d4 <_dtoa_r+0x3c4>
   10730:	9e07      	ldr	r6, [sp, #28]
   10732:	2e0e      	cmp	r6, #14
   10734:	f300 80ce 	bgt.w	108d4 <_dtoa_r+0x3c4>
   10738:	4b2b      	ldr	r3, [pc, #172]	; (107e8 <_dtoa_r+0x2d8>)
   1073a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1073e:	e9d3 0100 	ldrd	r0, r1, [r3]
   10742:	e9cd 0104 	strd	r0, r1, [sp, #16]
   10746:	9925      	ldr	r1, [sp, #148]	; 0x94
   10748:	2900      	cmp	r1, #0
   1074a:	f2c0 8380 	blt.w	10e4e <_dtoa_r+0x93e>
   1074e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10752:	4659      	mov	r1, fp
   10754:	4650      	mov	r0, sl
   10756:	f7fb fe6f 	bl	c438 <__aeabi_ddiv>
   1075a:	f7fb ffdd 	bl	c718 <__aeabi_d2iz>
   1075e:	4605      	mov	r5, r0
   10760:	f7fb fcda 	bl	c118 <__aeabi_i2d>
   10764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10768:	f7fb fd3c 	bl	c1e4 <__aeabi_dmul>
   1076c:	4602      	mov	r2, r0
   1076e:	460b      	mov	r3, r1
   10770:	4650      	mov	r0, sl
   10772:	4659      	mov	r1, fp
   10774:	f7fb fb82 	bl	be7c <__aeabi_dsub>
   10778:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1077a:	f105 0330 	add.w	r3, r5, #48	; 0x30
   1077e:	f1b9 0f01 	cmp.w	r9, #1
   10782:	4606      	mov	r6, r0
   10784:	460f      	mov	r7, r1
   10786:	7013      	strb	r3, [r2, #0]
   10788:	f102 0b01 	add.w	fp, r2, #1
   1078c:	d064      	beq.n	10858 <_dtoa_r+0x348>
   1078e:	2200      	movs	r2, #0
   10790:	4b18      	ldr	r3, [pc, #96]	; (107f4 <_dtoa_r+0x2e4>)
   10792:	f7fb fd27 	bl	c1e4 <__aeabi_dmul>
   10796:	2200      	movs	r2, #0
   10798:	2300      	movs	r3, #0
   1079a:	4606      	mov	r6, r0
   1079c:	460f      	mov	r7, r1
   1079e:	f7fb ff89 	bl	c6b4 <__aeabi_dcmpeq>
   107a2:	2800      	cmp	r0, #0
   107a4:	f040 8081 	bne.w	108aa <_dtoa_r+0x39a>
   107a8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   107ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
   107ae:	9403      	str	r4, [sp, #12]
   107b0:	44c8      	add	r8, r9
   107b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   107b6:	f105 0902 	add.w	r9, r5, #2
   107ba:	e028      	b.n	1080e <_dtoa_r+0x2fe>
   107bc:	f3af 8000 	nop.w
   107c0:	636f4361 	.word	0x636f4361
   107c4:	3fd287a7 	.word	0x3fd287a7
   107c8:	8b60c8b3 	.word	0x8b60c8b3
   107cc:	3fc68a28 	.word	0x3fc68a28
   107d0:	509f79fb 	.word	0x509f79fb
   107d4:	3fd34413 	.word	0x3fd34413
   107d8:	7ff00000 	.word	0x7ff00000
   107dc:	000141b1 	.word	0x000141b1
   107e0:	000141d0 	.word	0x000141d0
   107e4:	3ff80000 	.word	0x3ff80000
   107e8:	000141e0 	.word	0x000141e0
   107ec:	000141c4 	.word	0x000141c4
   107f0:	000141b0 	.word	0x000141b0
   107f4:	40240000 	.word	0x40240000
   107f8:	f7fb fcf4 	bl	c1e4 <__aeabi_dmul>
   107fc:	2200      	movs	r2, #0
   107fe:	2300      	movs	r3, #0
   10800:	4606      	mov	r6, r0
   10802:	460f      	mov	r7, r1
   10804:	f7fb ff56 	bl	c6b4 <__aeabi_dcmpeq>
   10808:	2800      	cmp	r0, #0
   1080a:	f040 83c1 	bne.w	10f90 <_dtoa_r+0xa80>
   1080e:	4652      	mov	r2, sl
   10810:	465b      	mov	r3, fp
   10812:	4630      	mov	r0, r6
   10814:	4639      	mov	r1, r7
   10816:	f7fb fe0f 	bl	c438 <__aeabi_ddiv>
   1081a:	f7fb ff7d 	bl	c718 <__aeabi_d2iz>
   1081e:	4605      	mov	r5, r0
   10820:	f7fb fc7a 	bl	c118 <__aeabi_i2d>
   10824:	4652      	mov	r2, sl
   10826:	465b      	mov	r3, fp
   10828:	f7fb fcdc 	bl	c1e4 <__aeabi_dmul>
   1082c:	4602      	mov	r2, r0
   1082e:	460b      	mov	r3, r1
   10830:	4630      	mov	r0, r6
   10832:	4639      	mov	r1, r7
   10834:	f7fb fb22 	bl	be7c <__aeabi_dsub>
   10838:	f105 0e30 	add.w	lr, r5, #48	; 0x30
   1083c:	45c1      	cmp	r9, r8
   1083e:	f809 ec01 	strb.w	lr, [r9, #-1]
   10842:	464c      	mov	r4, r9
   10844:	4606      	mov	r6, r0
   10846:	460f      	mov	r7, r1
   10848:	f04f 0200 	mov.w	r2, #0
   1084c:	4ba7      	ldr	r3, [pc, #668]	; (10aec <_dtoa_r+0x5dc>)
   1084e:	f109 0901 	add.w	r9, r9, #1
   10852:	d1d1      	bne.n	107f8 <_dtoa_r+0x2e8>
   10854:	46a3      	mov	fp, r4
   10856:	9c03      	ldr	r4, [sp, #12]
   10858:	4632      	mov	r2, r6
   1085a:	463b      	mov	r3, r7
   1085c:	4630      	mov	r0, r6
   1085e:	4639      	mov	r1, r7
   10860:	f7fb fb0e 	bl	be80 <__adddf3>
   10864:	4606      	mov	r6, r0
   10866:	460f      	mov	r7, r1
   10868:	4632      	mov	r2, r6
   1086a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1086e:	463b      	mov	r3, r7
   10870:	f7fb ff2a 	bl	c6c8 <__aeabi_dcmplt>
   10874:	b940      	cbnz	r0, 10888 <_dtoa_r+0x378>
   10876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1087a:	4632      	mov	r2, r6
   1087c:	463b      	mov	r3, r7
   1087e:	f7fb ff19 	bl	c6b4 <__aeabi_dcmpeq>
   10882:	b190      	cbz	r0, 108aa <_dtoa_r+0x39a>
   10884:	07eb      	lsls	r3, r5, #31
   10886:	d510      	bpl.n	108aa <_dtoa_r+0x39a>
   10888:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   1088c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1088e:	e005      	b.n	1089c <_dtoa_r+0x38c>
   10890:	429a      	cmp	r2, r3
   10892:	f000 8428 	beq.w	110e6 <_dtoa_r+0xbd6>
   10896:	f813 5c01 	ldrb.w	r5, [r3, #-1]
   1089a:	469b      	mov	fp, r3
   1089c:	2d39      	cmp	r5, #57	; 0x39
   1089e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   108a2:	d0f5      	beq.n	10890 <_dtoa_r+0x380>
   108a4:	1c6a      	adds	r2, r5, #1
   108a6:	b2d2      	uxtb	r2, r2
   108a8:	701a      	strb	r2, [r3, #0]
   108aa:	4620      	mov	r0, r4
   108ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   108ae:	f001 f883 	bl	119b8 <_Bfree>
   108b2:	9e07      	ldr	r6, [sp, #28]
   108b4:	9d26      	ldr	r5, [sp, #152]	; 0x98
   108b6:	1c73      	adds	r3, r6, #1
   108b8:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   108ba:	2200      	movs	r2, #0
   108bc:	f88b 2000 	strb.w	r2, [fp]
   108c0:	602b      	str	r3, [r5, #0]
   108c2:	2e00      	cmp	r6, #0
   108c4:	f000 8325 	beq.w	10f12 <_dtoa_r+0xa02>
   108c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   108ca:	f8c6 b000 	str.w	fp, [r6]
   108ce:	b01b      	add	sp, #108	; 0x6c
   108d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   108d6:	2d00      	cmp	r5, #0
   108d8:	f000 8103 	beq.w	10ae2 <_dtoa_r+0x5d2>
   108dc:	9e24      	ldr	r6, [sp, #144]	; 0x90
   108de:	2e01      	cmp	r6, #1
   108e0:	f340 82dc 	ble.w	10e9c <_dtoa_r+0x98c>
   108e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   108e6:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
   108ea:	42be      	cmp	r6, r7
   108ec:	f2c0 8389 	blt.w	11002 <_dtoa_r+0xaf2>
   108f0:	1bf7      	subs	r7, r6, r7
   108f2:	f1b9 0f00 	cmp.w	r9, #0
   108f6:	f2c0 8486 	blt.w	11206 <_dtoa_r+0xcf6>
   108fa:	9d08      	ldr	r5, [sp, #32]
   108fc:	464b      	mov	r3, r9
   108fe:	9e08      	ldr	r6, [sp, #32]
   10900:	441e      	add	r6, r3
   10902:	9608      	str	r6, [sp, #32]
   10904:	9e06      	ldr	r6, [sp, #24]
   10906:	4620      	mov	r0, r4
   10908:	441e      	add	r6, r3
   1090a:	2101      	movs	r1, #1
   1090c:	9606      	str	r6, [sp, #24]
   1090e:	f001 f8f7 	bl	11b00 <__i2b>
   10912:	4606      	mov	r6, r0
   10914:	b165      	cbz	r5, 10930 <_dtoa_r+0x420>
   10916:	9806      	ldr	r0, [sp, #24]
   10918:	2800      	cmp	r0, #0
   1091a:	dd09      	ble.n	10930 <_dtoa_r+0x420>
   1091c:	4603      	mov	r3, r0
   1091e:	9908      	ldr	r1, [sp, #32]
   10920:	42ab      	cmp	r3, r5
   10922:	bfa8      	it	ge
   10924:	462b      	movge	r3, r5
   10926:	1ac9      	subs	r1, r1, r3
   10928:	1ac0      	subs	r0, r0, r3
   1092a:	9108      	str	r1, [sp, #32]
   1092c:	1aed      	subs	r5, r5, r3
   1092e:	9006      	str	r0, [sp, #24]
   10930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10932:	2a00      	cmp	r2, #0
   10934:	dd1d      	ble.n	10972 <_dtoa_r+0x462>
   10936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10938:	2b00      	cmp	r3, #0
   1093a:	f000 8358 	beq.w	10fee <_dtoa_r+0xade>
   1093e:	2f00      	cmp	r7, #0
   10940:	dd11      	ble.n	10966 <_dtoa_r+0x456>
   10942:	4631      	mov	r1, r6
   10944:	463a      	mov	r2, r7
   10946:	4620      	mov	r0, r4
   10948:	f001 f982 	bl	11c50 <__pow5mult>
   1094c:	4606      	mov	r6, r0
   1094e:	4631      	mov	r1, r6
   10950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10952:	4620      	mov	r0, r4
   10954:	f001 f8de 	bl	11b14 <__multiply>
   10958:	990a      	ldr	r1, [sp, #40]	; 0x28
   1095a:	4680      	mov	r8, r0
   1095c:	4620      	mov	r0, r4
   1095e:	f001 f82b 	bl	119b8 <_Bfree>
   10962:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   10966:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   1096a:	ebbe 0207 	subs.w	r2, lr, r7
   1096e:	f040 828f 	bne.w	10e90 <_dtoa_r+0x980>
   10972:	4620      	mov	r0, r4
   10974:	2101      	movs	r1, #1
   10976:	f001 f8c3 	bl	11b00 <__i2b>
   1097a:	4680      	mov	r8, r0
   1097c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1097e:	2800      	cmp	r0, #0
   10980:	dd05      	ble.n	1098e <_dtoa_r+0x47e>
   10982:	4641      	mov	r1, r8
   10984:	4620      	mov	r0, r4
   10986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10988:	f001 f962 	bl	11c50 <__pow5mult>
   1098c:	4680      	mov	r8, r0
   1098e:	9924      	ldr	r1, [sp, #144]	; 0x90
   10990:	2901      	cmp	r1, #1
   10992:	f340 82c1 	ble.w	10f18 <_dtoa_r+0xa08>
   10996:	2700      	movs	r7, #0
   10998:	980d      	ldr	r0, [sp, #52]	; 0x34
   1099a:	2800      	cmp	r0, #0
   1099c:	f040 82af 	bne.w	10efe <_dtoa_r+0x9ee>
   109a0:	2001      	movs	r0, #1
   109a2:	9b06      	ldr	r3, [sp, #24]
   109a4:	4403      	add	r3, r0
   109a6:	f013 031f 	ands.w	r3, r3, #31
   109aa:	f000 80a1 	beq.w	10af0 <_dtoa_r+0x5e0>
   109ae:	f1c3 0220 	rsb	r2, r3, #32
   109b2:	2a04      	cmp	r2, #4
   109b4:	f340 84b5 	ble.w	11322 <_dtoa_r+0xe12>
   109b8:	9908      	ldr	r1, [sp, #32]
   109ba:	9a06      	ldr	r2, [sp, #24]
   109bc:	f1c3 031c 	rsb	r3, r3, #28
   109c0:	4419      	add	r1, r3
   109c2:	441a      	add	r2, r3
   109c4:	9108      	str	r1, [sp, #32]
   109c6:	441d      	add	r5, r3
   109c8:	9206      	str	r2, [sp, #24]
   109ca:	9908      	ldr	r1, [sp, #32]
   109cc:	2900      	cmp	r1, #0
   109ce:	dd05      	ble.n	109dc <_dtoa_r+0x4cc>
   109d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   109d2:	9a08      	ldr	r2, [sp, #32]
   109d4:	4620      	mov	r0, r4
   109d6:	f001 f989 	bl	11cec <__lshift>
   109da:	900a      	str	r0, [sp, #40]	; 0x28
   109dc:	9a06      	ldr	r2, [sp, #24]
   109de:	2a00      	cmp	r2, #0
   109e0:	dd04      	ble.n	109ec <_dtoa_r+0x4dc>
   109e2:	4641      	mov	r1, r8
   109e4:	4620      	mov	r0, r4
   109e6:	f001 f981 	bl	11cec <__lshift>
   109ea:	4680      	mov	r8, r0
   109ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   109ee:	2b00      	cmp	r3, #0
   109f0:	f040 826a 	bne.w	10ec8 <_dtoa_r+0x9b8>
   109f4:	f1b9 0f00 	cmp.w	r9, #0
   109f8:	f340 82a6 	ble.w	10f48 <_dtoa_r+0xa38>
   109fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   109fe:	2800      	cmp	r0, #0
   10a00:	f040 8088 	bne.w	10b14 <_dtoa_r+0x604>
   10a04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10a06:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10a08:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   10a0c:	e006      	b.n	10a1c <_dtoa_r+0x50c>
   10a0e:	4639      	mov	r1, r7
   10a10:	4620      	mov	r0, r4
   10a12:	220a      	movs	r2, #10
   10a14:	2300      	movs	r3, #0
   10a16:	f000 ffd9 	bl	119cc <__multadd>
   10a1a:	4607      	mov	r7, r0
   10a1c:	4638      	mov	r0, r7
   10a1e:	4641      	mov	r1, r8
   10a20:	f7ff fcde 	bl	103e0 <quorem>
   10a24:	3030      	adds	r0, #48	; 0x30
   10a26:	f80b 0005 	strb.w	r0, [fp, r5]
   10a2a:	3501      	adds	r5, #1
   10a2c:	45a9      	cmp	r9, r5
   10a2e:	dcee      	bgt.n	10a0e <_dtoa_r+0x4fe>
   10a30:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   10a34:	970a      	str	r7, [sp, #40]	; 0x28
   10a36:	4682      	mov	sl, r0
   10a38:	f1b9 0f01 	cmp.w	r9, #1
   10a3c:	bfac      	ite	ge
   10a3e:	44cb      	addge	fp, r9
   10a40:	f10b 0b01 	addlt.w	fp, fp, #1
   10a44:	2500      	movs	r5, #0
   10a46:	990a      	ldr	r1, [sp, #40]	; 0x28
   10a48:	2201      	movs	r2, #1
   10a4a:	4620      	mov	r0, r4
   10a4c:	f001 f94e 	bl	11cec <__lshift>
   10a50:	4641      	mov	r1, r8
   10a52:	900a      	str	r0, [sp, #40]	; 0x28
   10a54:	f001 f9a8 	bl	11da8 <__mcmp>
   10a58:	2800      	cmp	r0, #0
   10a5a:	f340 8309 	ble.w	11070 <_dtoa_r+0xb60>
   10a5e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   10a62:	9909      	ldr	r1, [sp, #36]	; 0x24
   10a64:	e005      	b.n	10a72 <_dtoa_r+0x562>
   10a66:	4299      	cmp	r1, r3
   10a68:	f000 828b 	beq.w	10f82 <_dtoa_r+0xa72>
   10a6c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   10a70:	469b      	mov	fp, r3
   10a72:	2a39      	cmp	r2, #57	; 0x39
   10a74:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   10a78:	d0f5      	beq.n	10a66 <_dtoa_r+0x556>
   10a7a:	3201      	adds	r2, #1
   10a7c:	701a      	strb	r2, [r3, #0]
   10a7e:	4641      	mov	r1, r8
   10a80:	4620      	mov	r0, r4
   10a82:	f000 ff99 	bl	119b8 <_Bfree>
   10a86:	2e00      	cmp	r6, #0
   10a88:	f43f af0f 	beq.w	108aa <_dtoa_r+0x39a>
   10a8c:	b12d      	cbz	r5, 10a9a <_dtoa_r+0x58a>
   10a8e:	42b5      	cmp	r5, r6
   10a90:	d003      	beq.n	10a9a <_dtoa_r+0x58a>
   10a92:	4629      	mov	r1, r5
   10a94:	4620      	mov	r0, r4
   10a96:	f000 ff8f 	bl	119b8 <_Bfree>
   10a9a:	4631      	mov	r1, r6
   10a9c:	4620      	mov	r0, r4
   10a9e:	f000 ff8b 	bl	119b8 <_Bfree>
   10aa2:	e702      	b.n	108aa <_dtoa_r+0x39a>
   10aa4:	2601      	movs	r6, #1
   10aa6:	960e      	str	r6, [sp, #56]	; 0x38
   10aa8:	e5eb      	b.n	10682 <_dtoa_r+0x172>
   10aaa:	9807      	ldr	r0, [sp, #28]
   10aac:	f7fb fb34 	bl	c118 <__aeabi_i2d>
   10ab0:	4632      	mov	r2, r6
   10ab2:	463b      	mov	r3, r7
   10ab4:	f7fb fdfe 	bl	c6b4 <__aeabi_dcmpeq>
   10ab8:	2800      	cmp	r0, #0
   10aba:	f47f adce 	bne.w	1065a <_dtoa_r+0x14a>
   10abe:	9e07      	ldr	r6, [sp, #28]
   10ac0:	3e01      	subs	r6, #1
   10ac2:	9607      	str	r6, [sp, #28]
   10ac4:	e5c9      	b.n	1065a <_dtoa_r+0x14a>
   10ac6:	9e07      	ldr	r6, [sp, #28]
   10ac8:	9d08      	ldr	r5, [sp, #32]
   10aca:	1bad      	subs	r5, r5, r6
   10acc:	9508      	str	r5, [sp, #32]
   10ace:	4275      	negs	r5, r6
   10ad0:	2600      	movs	r6, #0
   10ad2:	950c      	str	r5, [sp, #48]	; 0x30
   10ad4:	960d      	str	r6, [sp, #52]	; 0x34
   10ad6:	e5e6      	b.n	106a6 <_dtoa_r+0x196>
   10ad8:	426d      	negs	r5, r5
   10ada:	2600      	movs	r6, #0
   10adc:	9508      	str	r5, [sp, #32]
   10ade:	9606      	str	r6, [sp, #24]
   10ae0:	e5d7      	b.n	10692 <_dtoa_r+0x182>
   10ae2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10ae4:	9d08      	ldr	r5, [sp, #32]
   10ae6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10ae8:	e714      	b.n	10914 <_dtoa_r+0x404>
   10aea:	bf00      	nop
   10aec:	40240000 	.word	0x40240000
   10af0:	231c      	movs	r3, #28
   10af2:	f8dd e020 	ldr.w	lr, [sp, #32]
   10af6:	9806      	ldr	r0, [sp, #24]
   10af8:	449e      	add	lr, r3
   10afa:	4418      	add	r0, r3
   10afc:	f8cd e020 	str.w	lr, [sp, #32]
   10b00:	441d      	add	r5, r3
   10b02:	9006      	str	r0, [sp, #24]
   10b04:	e761      	b.n	109ca <_dtoa_r+0x4ba>
   10b06:	48a7      	ldr	r0, [pc, #668]	; (10da4 <_dtoa_r+0x894>)
   10b08:	1b40      	subs	r0, r0, r5
   10b0a:	fa0a f000 	lsl.w	r0, sl, r0
   10b0e:	e570      	b.n	105f2 <_dtoa_r+0xe2>
   10b10:	900e      	str	r0, [sp, #56]	; 0x38
   10b12:	e5b6      	b.n	10682 <_dtoa_r+0x172>
   10b14:	2d00      	cmp	r5, #0
   10b16:	dd05      	ble.n	10b24 <_dtoa_r+0x614>
   10b18:	4631      	mov	r1, r6
   10b1a:	462a      	mov	r2, r5
   10b1c:	4620      	mov	r0, r4
   10b1e:	f001 f8e5 	bl	11cec <__lshift>
   10b22:	4606      	mov	r6, r0
   10b24:	2f00      	cmp	r7, #0
   10b26:	f040 82e8 	bne.w	110fa <_dtoa_r+0xbea>
   10b2a:	4637      	mov	r7, r6
   10b2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
   10b30:	444d      	add	r5, r9
   10b32:	9508      	str	r5, [sp, #32]
   10b34:	f00a 0501 	and.w	r5, sl, #1
   10b38:	950b      	str	r5, [sp, #44]	; 0x2c
   10b3a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   10b3e:	1c45      	adds	r5, r0, #1
   10b40:	e00a      	b.n	10b58 <_dtoa_r+0x648>
   10b42:	f000 ff43 	bl	119cc <__multadd>
   10b46:	4639      	mov	r1, r7
   10b48:	4606      	mov	r6, r0
   10b4a:	220a      	movs	r2, #10
   10b4c:	4620      	mov	r0, r4
   10b4e:	2300      	movs	r3, #0
   10b50:	f000 ff3c 	bl	119cc <__multadd>
   10b54:	4607      	mov	r7, r0
   10b56:	3501      	adds	r5, #1
   10b58:	4641      	mov	r1, r8
   10b5a:	4648      	mov	r0, r9
   10b5c:	f7ff fc40 	bl	103e0 <quorem>
   10b60:	4631      	mov	r1, r6
   10b62:	4683      	mov	fp, r0
   10b64:	4648      	mov	r0, r9
   10b66:	f001 f91f 	bl	11da8 <__mcmp>
   10b6a:	4641      	mov	r1, r8
   10b6c:	9003      	str	r0, [sp, #12]
   10b6e:	463a      	mov	r2, r7
   10b70:	4620      	mov	r0, r4
   10b72:	f001 f93d 	bl	11df0 <__mdiff>
   10b76:	68c2      	ldr	r2, [r0, #12]
   10b78:	1e69      	subs	r1, r5, #1
   10b7a:	4603      	mov	r3, r0
   10b7c:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
   10b80:	9106      	str	r1, [sp, #24]
   10b82:	2a00      	cmp	r2, #0
   10b84:	f040 8193 	bne.w	10eae <_dtoa_r+0x99e>
   10b88:	4619      	mov	r1, r3
   10b8a:	4648      	mov	r0, r9
   10b8c:	9302      	str	r3, [sp, #8]
   10b8e:	f001 f90b 	bl	11da8 <__mcmp>
   10b92:	9b02      	ldr	r3, [sp, #8]
   10b94:	4602      	mov	r2, r0
   10b96:	4619      	mov	r1, r3
   10b98:	4620      	mov	r0, r4
   10b9a:	9202      	str	r2, [sp, #8]
   10b9c:	f000 ff0c 	bl	119b8 <_Bfree>
   10ba0:	9a02      	ldr	r2, [sp, #8]
   10ba2:	b92a      	cbnz	r2, 10bb0 <_dtoa_r+0x6a0>
   10ba4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   10ba6:	b91b      	cbnz	r3, 10bb0 <_dtoa_r+0x6a0>
   10ba8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10baa:	2800      	cmp	r0, #0
   10bac:	f000 8391 	beq.w	112d2 <_dtoa_r+0xdc2>
   10bb0:	9b03      	ldr	r3, [sp, #12]
   10bb2:	2b00      	cmp	r3, #0
   10bb4:	f2c0 8234 	blt.w	11020 <_dtoa_r+0xb10>
   10bb8:	d105      	bne.n	10bc6 <_dtoa_r+0x6b6>
   10bba:	9824      	ldr	r0, [sp, #144]	; 0x90
   10bbc:	b918      	cbnz	r0, 10bc6 <_dtoa_r+0x6b6>
   10bbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10bc0:	2900      	cmp	r1, #0
   10bc2:	f000 822d 	beq.w	11020 <_dtoa_r+0xb10>
   10bc6:	2a00      	cmp	r2, #0
   10bc8:	f300 82ab 	bgt.w	11122 <_dtoa_r+0xc12>
   10bcc:	f8dd e020 	ldr.w	lr, [sp, #32]
   10bd0:	f805 ac01 	strb.w	sl, [r5, #-1]
   10bd4:	4575      	cmp	r5, lr
   10bd6:	46ab      	mov	fp, r5
   10bd8:	f000 82b3 	beq.w	11142 <_dtoa_r+0xc32>
   10bdc:	4649      	mov	r1, r9
   10bde:	220a      	movs	r2, #10
   10be0:	2300      	movs	r3, #0
   10be2:	4620      	mov	r0, r4
   10be4:	f000 fef2 	bl	119cc <__multadd>
   10be8:	42be      	cmp	r6, r7
   10bea:	4681      	mov	r9, r0
   10bec:	4631      	mov	r1, r6
   10bee:	4620      	mov	r0, r4
   10bf0:	f04f 020a 	mov.w	r2, #10
   10bf4:	f04f 0300 	mov.w	r3, #0
   10bf8:	d1a3      	bne.n	10b42 <_dtoa_r+0x632>
   10bfa:	f000 fee7 	bl	119cc <__multadd>
   10bfe:	4606      	mov	r6, r0
   10c00:	4607      	mov	r7, r0
   10c02:	e7a8      	b.n	10b56 <_dtoa_r+0x646>
   10c04:	2600      	movs	r6, #0
   10c06:	960b      	str	r6, [sp, #44]	; 0x2c
   10c08:	9e07      	ldr	r6, [sp, #28]
   10c0a:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
   10c0e:	44b6      	add	lr, r6
   10c10:	f10e 0901 	add.w	r9, lr, #1
   10c14:	f1b9 0f00 	cmp.w	r9, #0
   10c18:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
   10c1c:	464e      	mov	r6, r9
   10c1e:	f340 8150 	ble.w	10ec2 <_dtoa_r+0x9b2>
   10c22:	2100      	movs	r1, #0
   10c24:	2e17      	cmp	r6, #23
   10c26:	6461      	str	r1, [r4, #68]	; 0x44
   10c28:	d90a      	bls.n	10c40 <_dtoa_r+0x730>
   10c2a:	2201      	movs	r2, #1
   10c2c:	2304      	movs	r3, #4
   10c2e:	005b      	lsls	r3, r3, #1
   10c30:	f103 0014 	add.w	r0, r3, #20
   10c34:	42b0      	cmp	r0, r6
   10c36:	4611      	mov	r1, r2
   10c38:	f102 0201 	add.w	r2, r2, #1
   10c3c:	d9f7      	bls.n	10c2e <_dtoa_r+0x71e>
   10c3e:	6461      	str	r1, [r4, #68]	; 0x44
   10c40:	4620      	mov	r0, r4
   10c42:	f000 fe93 	bl	1196c <_Balloc>
   10c46:	2e0e      	cmp	r6, #14
   10c48:	9009      	str	r0, [sp, #36]	; 0x24
   10c4a:	6420      	str	r0, [r4, #64]	; 0x40
   10c4c:	f63f ad6c 	bhi.w	10728 <_dtoa_r+0x218>
   10c50:	2d00      	cmp	r5, #0
   10c52:	f43f ad69 	beq.w	10728 <_dtoa_r+0x218>
   10c56:	9d07      	ldr	r5, [sp, #28]
   10c58:	2d00      	cmp	r5, #0
   10c5a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
   10c5e:	f340 821b 	ble.w	11098 <_dtoa_r+0xb88>
   10c62:	4b51      	ldr	r3, [pc, #324]	; (10da8 <_dtoa_r+0x898>)
   10c64:	f005 020f 	and.w	r2, r5, #15
   10c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c6c:	112d      	asrs	r5, r5, #4
   10c6e:	e9d3 6700 	ldrd	r6, r7, [r3]
   10c72:	06eb      	lsls	r3, r5, #27
   10c74:	f140 81cd 	bpl.w	11012 <_dtoa_r+0xb02>
   10c78:	4b4c      	ldr	r3, [pc, #304]	; (10dac <_dtoa_r+0x89c>)
   10c7a:	4650      	mov	r0, sl
   10c7c:	4659      	mov	r1, fp
   10c7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   10c82:	f7fb fbd9 	bl	c438 <__aeabi_ddiv>
   10c86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10c8a:	f005 050f 	and.w	r5, r5, #15
   10c8e:	f04f 0803 	mov.w	r8, #3
   10c92:	b18d      	cbz	r5, 10cb8 <_dtoa_r+0x7a8>
   10c94:	f8df a114 	ldr.w	sl, [pc, #276]	; 10dac <_dtoa_r+0x89c>
   10c98:	4630      	mov	r0, r6
   10c9a:	4639      	mov	r1, r7
   10c9c:	07ee      	lsls	r6, r5, #31
   10c9e:	d505      	bpl.n	10cac <_dtoa_r+0x79c>
   10ca0:	e9da 2300 	ldrd	r2, r3, [sl]
   10ca4:	f108 0801 	add.w	r8, r8, #1
   10ca8:	f7fb fa9c 	bl	c1e4 <__aeabi_dmul>
   10cac:	106d      	asrs	r5, r5, #1
   10cae:	f10a 0a08 	add.w	sl, sl, #8
   10cb2:	d1f3      	bne.n	10c9c <_dtoa_r+0x78c>
   10cb4:	4606      	mov	r6, r0
   10cb6:	460f      	mov	r7, r1
   10cb8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10cbc:	4632      	mov	r2, r6
   10cbe:	463b      	mov	r3, r7
   10cc0:	f7fb fbba 	bl	c438 <__aeabi_ddiv>
   10cc4:	4682      	mov	sl, r0
   10cc6:	468b      	mov	fp, r1
   10cc8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   10cca:	b145      	cbz	r5, 10cde <_dtoa_r+0x7ce>
   10ccc:	4650      	mov	r0, sl
   10cce:	4659      	mov	r1, fp
   10cd0:	2200      	movs	r2, #0
   10cd2:	4b37      	ldr	r3, [pc, #220]	; (10db0 <_dtoa_r+0x8a0>)
   10cd4:	f7fb fcf8 	bl	c6c8 <__aeabi_dcmplt>
   10cd8:	2800      	cmp	r0, #0
   10cda:	f040 82a9 	bne.w	11230 <_dtoa_r+0xd20>
   10cde:	4640      	mov	r0, r8
   10ce0:	f7fb fa1a 	bl	c118 <__aeabi_i2d>
   10ce4:	4652      	mov	r2, sl
   10ce6:	465b      	mov	r3, fp
   10ce8:	f7fb fa7c 	bl	c1e4 <__aeabi_dmul>
   10cec:	2200      	movs	r2, #0
   10cee:	4b31      	ldr	r3, [pc, #196]	; (10db4 <_dtoa_r+0x8a4>)
   10cf0:	f7fb f8c6 	bl	be80 <__adddf3>
   10cf4:	4606      	mov	r6, r0
   10cf6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   10cfa:	f1b9 0f00 	cmp.w	r9, #0
   10cfe:	f000 815a 	beq.w	10fb6 <_dtoa_r+0xaa6>
   10d02:	9d07      	ldr	r5, [sp, #28]
   10d04:	9517      	str	r5, [sp, #92]	; 0x5c
   10d06:	46c8      	mov	r8, r9
   10d08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10d0a:	2d00      	cmp	r5, #0
   10d0c:	f000 8222 	beq.w	11154 <_dtoa_r+0xc44>
   10d10:	4b25      	ldr	r3, [pc, #148]	; (10da8 <_dtoa_r+0x898>)
   10d12:	4929      	ldr	r1, [pc, #164]	; (10db8 <_dtoa_r+0x8a8>)
   10d14:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   10d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   10d1c:	2000      	movs	r0, #0
   10d1e:	f7fb fb8b 	bl	c438 <__aeabi_ddiv>
   10d22:	4632      	mov	r2, r6
   10d24:	463b      	mov	r3, r7
   10d26:	f7fb f8a9 	bl	be7c <__aeabi_dsub>
   10d2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10d2e:	4659      	mov	r1, fp
   10d30:	4650      	mov	r0, sl
   10d32:	f7fb fcf1 	bl	c718 <__aeabi_d2iz>
   10d36:	4605      	mov	r5, r0
   10d38:	f7fb f9ee 	bl	c118 <__aeabi_i2d>
   10d3c:	4602      	mov	r2, r0
   10d3e:	460b      	mov	r3, r1
   10d40:	4650      	mov	r0, sl
   10d42:	4659      	mov	r1, fp
   10d44:	f7fb f89a 	bl	be7c <__aeabi_dsub>
   10d48:	3530      	adds	r5, #48	; 0x30
   10d4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   10d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   10d50:	b2ed      	uxtb	r5, r5
   10d52:	7035      	strb	r5, [r6, #0]
   10d54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10d5c:	f106 0b01 	add.w	fp, r6, #1
   10d60:	f7fb fcd0 	bl	c704 <__aeabi_dcmpgt>
   10d64:	2800      	cmp	r0, #0
   10d66:	f040 82a9 	bne.w	112bc <_dtoa_r+0xdac>
   10d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10d6e:	2000      	movs	r0, #0
   10d70:	490f      	ldr	r1, [pc, #60]	; (10db0 <_dtoa_r+0x8a0>)
   10d72:	f7fb f883 	bl	be7c <__aeabi_dsub>
   10d76:	4602      	mov	r2, r0
   10d78:	460b      	mov	r3, r1
   10d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10d7e:	f7fb fcc1 	bl	c704 <__aeabi_dcmpgt>
   10d82:	2800      	cmp	r0, #0
   10d84:	f040 82a0 	bne.w	112c8 <_dtoa_r+0xdb8>
   10d88:	f1b8 0f01 	cmp.w	r8, #1
   10d8c:	f340 8180 	ble.w	11090 <_dtoa_r+0xb80>
   10d90:	44b0      	add	r8, r6
   10d92:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   10d96:	46a2      	mov	sl, r4
   10d98:	46c1      	mov	r9, r8
   10d9a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   10d9e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   10da2:	e019      	b.n	10dd8 <_dtoa_r+0x8c8>
   10da4:	fffffbee 	.word	0xfffffbee
   10da8:	000141e0 	.word	0x000141e0
   10dac:	000142a8 	.word	0x000142a8
   10db0:	3ff00000 	.word	0x3ff00000
   10db4:	401c0000 	.word	0x401c0000
   10db8:	3fe00000 	.word	0x3fe00000
   10dbc:	2000      	movs	r0, #0
   10dbe:	49a8      	ldr	r1, [pc, #672]	; (11060 <_dtoa_r+0xb50>)
   10dc0:	f7fb f85c 	bl	be7c <__aeabi_dsub>
   10dc4:	4622      	mov	r2, r4
   10dc6:	462b      	mov	r3, r5
   10dc8:	f7fb fc7e 	bl	c6c8 <__aeabi_dcmplt>
   10dcc:	2800      	cmp	r0, #0
   10dce:	f040 8279 	bne.w	112c4 <_dtoa_r+0xdb4>
   10dd2:	45cb      	cmp	fp, r9
   10dd4:	f000 8159 	beq.w	1108a <_dtoa_r+0xb7a>
   10dd8:	4620      	mov	r0, r4
   10dda:	4629      	mov	r1, r5
   10ddc:	2200      	movs	r2, #0
   10dde:	4ba1      	ldr	r3, [pc, #644]	; (11064 <_dtoa_r+0xb54>)
   10de0:	f7fb fa00 	bl	c1e4 <__aeabi_dmul>
   10de4:	2200      	movs	r2, #0
   10de6:	4b9f      	ldr	r3, [pc, #636]	; (11064 <_dtoa_r+0xb54>)
   10de8:	4604      	mov	r4, r0
   10dea:	460d      	mov	r5, r1
   10dec:	4630      	mov	r0, r6
   10dee:	4639      	mov	r1, r7
   10df0:	f7fb f9f8 	bl	c1e4 <__aeabi_dmul>
   10df4:	460f      	mov	r7, r1
   10df6:	4606      	mov	r6, r0
   10df8:	f7fb fc8e 	bl	c718 <__aeabi_d2iz>
   10dfc:	4680      	mov	r8, r0
   10dfe:	f7fb f98b 	bl	c118 <__aeabi_i2d>
   10e02:	4602      	mov	r2, r0
   10e04:	460b      	mov	r3, r1
   10e06:	4630      	mov	r0, r6
   10e08:	4639      	mov	r1, r7
   10e0a:	f7fb f837 	bl	be7c <__aeabi_dsub>
   10e0e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   10e12:	fa5f f888 	uxtb.w	r8, r8
   10e16:	4622      	mov	r2, r4
   10e18:	462b      	mov	r3, r5
   10e1a:	f80b 8b01 	strb.w	r8, [fp], #1
   10e1e:	4606      	mov	r6, r0
   10e20:	460f      	mov	r7, r1
   10e22:	f7fb fc51 	bl	c6c8 <__aeabi_dcmplt>
   10e26:	4632      	mov	r2, r6
   10e28:	463b      	mov	r3, r7
   10e2a:	2800      	cmp	r0, #0
   10e2c:	d0c6      	beq.n	10dbc <_dtoa_r+0x8ac>
   10e2e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   10e30:	9607      	str	r6, [sp, #28]
   10e32:	4654      	mov	r4, sl
   10e34:	e539      	b.n	108aa <_dtoa_r+0x39a>
   10e36:	2600      	movs	r6, #0
   10e38:	960b      	str	r6, [sp, #44]	; 0x2c
   10e3a:	9825      	ldr	r0, [sp, #148]	; 0x94
   10e3c:	2800      	cmp	r0, #0
   10e3e:	dd3c      	ble.n	10eba <_dtoa_r+0x9aa>
   10e40:	4606      	mov	r6, r0
   10e42:	900f      	str	r0, [sp, #60]	; 0x3c
   10e44:	4681      	mov	r9, r0
   10e46:	e6ec      	b.n	10c22 <_dtoa_r+0x712>
   10e48:	2601      	movs	r6, #1
   10e4a:	960b      	str	r6, [sp, #44]	; 0x2c
   10e4c:	e7f5      	b.n	10e3a <_dtoa_r+0x92a>
   10e4e:	f1b9 0f00 	cmp.w	r9, #0
   10e52:	f73f ac7c 	bgt.w	1074e <_dtoa_r+0x23e>
   10e56:	f040 80c6 	bne.w	10fe6 <_dtoa_r+0xad6>
   10e5a:	2200      	movs	r2, #0
   10e5c:	4b82      	ldr	r3, [pc, #520]	; (11068 <_dtoa_r+0xb58>)
   10e5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10e62:	f7fb f9bf 	bl	c1e4 <__aeabi_dmul>
   10e66:	4652      	mov	r2, sl
   10e68:	465b      	mov	r3, fp
   10e6a:	f7fb fc41 	bl	c6f0 <__aeabi_dcmpge>
   10e6e:	46c8      	mov	r8, r9
   10e70:	464e      	mov	r6, r9
   10e72:	2800      	cmp	r0, #0
   10e74:	d07c      	beq.n	10f70 <_dtoa_r+0xa60>
   10e76:	9d25      	ldr	r5, [sp, #148]	; 0x94
   10e78:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   10e7c:	43ed      	mvns	r5, r5
   10e7e:	9507      	str	r5, [sp, #28]
   10e80:	4641      	mov	r1, r8
   10e82:	4620      	mov	r0, r4
   10e84:	f000 fd98 	bl	119b8 <_Bfree>
   10e88:	2e00      	cmp	r6, #0
   10e8a:	f47f ae06 	bne.w	10a9a <_dtoa_r+0x58a>
   10e8e:	e50c      	b.n	108aa <_dtoa_r+0x39a>
   10e90:	990a      	ldr	r1, [sp, #40]	; 0x28
   10e92:	4620      	mov	r0, r4
   10e94:	f000 fedc 	bl	11c50 <__pow5mult>
   10e98:	900a      	str	r0, [sp, #40]	; 0x28
   10e9a:	e56a      	b.n	10972 <_dtoa_r+0x462>
   10e9c:	9d16      	ldr	r5, [sp, #88]	; 0x58
   10e9e:	2d00      	cmp	r5, #0
   10ea0:	f000 81b7 	beq.w	11212 <_dtoa_r+0xd02>
   10ea4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   10ea8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10eaa:	9d08      	ldr	r5, [sp, #32]
   10eac:	e527      	b.n	108fe <_dtoa_r+0x3ee>
   10eae:	4601      	mov	r1, r0
   10eb0:	4620      	mov	r0, r4
   10eb2:	f000 fd81 	bl	119b8 <_Bfree>
   10eb6:	2201      	movs	r2, #1
   10eb8:	e67a      	b.n	10bb0 <_dtoa_r+0x6a0>
   10eba:	2601      	movs	r6, #1
   10ebc:	9625      	str	r6, [sp, #148]	; 0x94
   10ebe:	960f      	str	r6, [sp, #60]	; 0x3c
   10ec0:	46b1      	mov	r9, r6
   10ec2:	2100      	movs	r1, #0
   10ec4:	6461      	str	r1, [r4, #68]	; 0x44
   10ec6:	e6bb      	b.n	10c40 <_dtoa_r+0x730>
   10ec8:	980a      	ldr	r0, [sp, #40]	; 0x28
   10eca:	4641      	mov	r1, r8
   10ecc:	f000 ff6c 	bl	11da8 <__mcmp>
   10ed0:	2800      	cmp	r0, #0
   10ed2:	f6bf ad8f 	bge.w	109f4 <_dtoa_r+0x4e4>
   10ed6:	f8dd e01c 	ldr.w	lr, [sp, #28]
   10eda:	990a      	ldr	r1, [sp, #40]	; 0x28
   10edc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   10ee0:	4620      	mov	r0, r4
   10ee2:	220a      	movs	r2, #10
   10ee4:	2300      	movs	r3, #0
   10ee6:	f8cd e01c 	str.w	lr, [sp, #28]
   10eea:	f000 fd6f 	bl	119cc <__multadd>
   10eee:	900a      	str	r0, [sp, #40]	; 0x28
   10ef0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10ef2:	2800      	cmp	r0, #0
   10ef4:	f040 8207 	bne.w	11306 <_dtoa_r+0xdf6>
   10ef8:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   10efc:	e57a      	b.n	109f4 <_dtoa_r+0x4e4>
   10efe:	f8d8 3010 	ldr.w	r3, [r8, #16]
   10f02:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   10f06:	6918      	ldr	r0, [r3, #16]
   10f08:	f000 fdac 	bl	11a64 <__hi0bits>
   10f0c:	f1c0 0020 	rsb	r0, r0, #32
   10f10:	e547      	b.n	109a2 <_dtoa_r+0x492>
   10f12:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f14:	f7ff bb2d 	b.w	10572 <_dtoa_r+0x62>
   10f18:	f1ba 0f00 	cmp.w	sl, #0
   10f1c:	f47f ad3b 	bne.w	10996 <_dtoa_r+0x486>
   10f20:	f3cb 0313 	ubfx	r3, fp, #0, #20
   10f24:	2b00      	cmp	r3, #0
   10f26:	f040 817b 	bne.w	11220 <_dtoa_r+0xd10>
   10f2a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   10f2e:	0d3f      	lsrs	r7, r7, #20
   10f30:	053f      	lsls	r7, r7, #20
   10f32:	2f00      	cmp	r7, #0
   10f34:	f43f ad30 	beq.w	10998 <_dtoa_r+0x488>
   10f38:	9a08      	ldr	r2, [sp, #32]
   10f3a:	9b06      	ldr	r3, [sp, #24]
   10f3c:	3201      	adds	r2, #1
   10f3e:	3301      	adds	r3, #1
   10f40:	9208      	str	r2, [sp, #32]
   10f42:	9306      	str	r3, [sp, #24]
   10f44:	2701      	movs	r7, #1
   10f46:	e527      	b.n	10998 <_dtoa_r+0x488>
   10f48:	9924      	ldr	r1, [sp, #144]	; 0x90
   10f4a:	2902      	cmp	r1, #2
   10f4c:	f77f ad56 	ble.w	109fc <_dtoa_r+0x4ec>
   10f50:	f1b9 0f00 	cmp.w	r9, #0
   10f54:	d18f      	bne.n	10e76 <_dtoa_r+0x966>
   10f56:	4641      	mov	r1, r8
   10f58:	464b      	mov	r3, r9
   10f5a:	2205      	movs	r2, #5
   10f5c:	4620      	mov	r0, r4
   10f5e:	f000 fd35 	bl	119cc <__multadd>
   10f62:	4680      	mov	r8, r0
   10f64:	4641      	mov	r1, r8
   10f66:	980a      	ldr	r0, [sp, #40]	; 0x28
   10f68:	f000 ff1e 	bl	11da8 <__mcmp>
   10f6c:	2800      	cmp	r0, #0
   10f6e:	dd82      	ble.n	10e76 <_dtoa_r+0x966>
   10f70:	9d07      	ldr	r5, [sp, #28]
   10f72:	3501      	adds	r5, #1
   10f74:	9507      	str	r5, [sp, #28]
   10f76:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10f78:	2331      	movs	r3, #49	; 0x31
   10f7a:	702b      	strb	r3, [r5, #0]
   10f7c:	f105 0b01 	add.w	fp, r5, #1
   10f80:	e77e      	b.n	10e80 <_dtoa_r+0x970>
   10f82:	9807      	ldr	r0, [sp, #28]
   10f84:	9909      	ldr	r1, [sp, #36]	; 0x24
   10f86:	2331      	movs	r3, #49	; 0x31
   10f88:	3001      	adds	r0, #1
   10f8a:	9007      	str	r0, [sp, #28]
   10f8c:	700b      	strb	r3, [r1, #0]
   10f8e:	e576      	b.n	10a7e <_dtoa_r+0x56e>
   10f90:	46a3      	mov	fp, r4
   10f92:	9c03      	ldr	r4, [sp, #12]
   10f94:	e489      	b.n	108aa <_dtoa_r+0x39a>
   10f96:	4640      	mov	r0, r8
   10f98:	f7fb f8be 	bl	c118 <__aeabi_i2d>
   10f9c:	4602      	mov	r2, r0
   10f9e:	460b      	mov	r3, r1
   10fa0:	4650      	mov	r0, sl
   10fa2:	4659      	mov	r1, fp
   10fa4:	f7fb f91e 	bl	c1e4 <__aeabi_dmul>
   10fa8:	2200      	movs	r2, #0
   10faa:	4b30      	ldr	r3, [pc, #192]	; (1106c <_dtoa_r+0xb5c>)
   10fac:	f7fa ff68 	bl	be80 <__adddf3>
   10fb0:	4606      	mov	r6, r0
   10fb2:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   10fb6:	4650      	mov	r0, sl
   10fb8:	4659      	mov	r1, fp
   10fba:	2200      	movs	r2, #0
   10fbc:	4b2a      	ldr	r3, [pc, #168]	; (11068 <_dtoa_r+0xb58>)
   10fbe:	f7fa ff5d 	bl	be7c <__aeabi_dsub>
   10fc2:	4632      	mov	r2, r6
   10fc4:	463b      	mov	r3, r7
   10fc6:	4682      	mov	sl, r0
   10fc8:	468b      	mov	fp, r1
   10fca:	f7fb fb9b 	bl	c704 <__aeabi_dcmpgt>
   10fce:	2800      	cmp	r0, #0
   10fd0:	f040 80bc 	bne.w	1114c <_dtoa_r+0xc3c>
   10fd4:	4632      	mov	r2, r6
   10fd6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   10fda:	4650      	mov	r0, sl
   10fdc:	4659      	mov	r1, fp
   10fde:	f7fb fb73 	bl	c6c8 <__aeabi_dcmplt>
   10fe2:	2800      	cmp	r0, #0
   10fe4:	d054      	beq.n	11090 <_dtoa_r+0xb80>
   10fe6:	f04f 0800 	mov.w	r8, #0
   10fea:	4646      	mov	r6, r8
   10fec:	e743      	b.n	10e76 <_dtoa_r+0x966>
   10fee:	990a      	ldr	r1, [sp, #40]	; 0x28
   10ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10ff2:	4620      	mov	r0, r4
   10ff4:	f000 fe2c 	bl	11c50 <__pow5mult>
   10ff8:	900a      	str	r0, [sp, #40]	; 0x28
   10ffa:	e4ba      	b.n	10972 <_dtoa_r+0x462>
   10ffc:	2601      	movs	r6, #1
   10ffe:	960b      	str	r6, [sp, #44]	; 0x2c
   11000:	e602      	b.n	10c08 <_dtoa_r+0x6f8>
   11002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11004:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11006:	970c      	str	r7, [sp, #48]	; 0x30
   11008:	1b7b      	subs	r3, r7, r5
   1100a:	441e      	add	r6, r3
   1100c:	960d      	str	r6, [sp, #52]	; 0x34
   1100e:	2700      	movs	r7, #0
   11010:	e46f      	b.n	108f2 <_dtoa_r+0x3e2>
   11012:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   11016:	f04f 0802 	mov.w	r8, #2
   1101a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1101e:	e638      	b.n	10c92 <_dtoa_r+0x782>
   11020:	2a00      	cmp	r2, #0
   11022:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   11026:	46d9      	mov	r9, fp
   11028:	dd11      	ble.n	1104e <_dtoa_r+0xb3e>
   1102a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1102c:	2201      	movs	r2, #1
   1102e:	4620      	mov	r0, r4
   11030:	f000 fe5c 	bl	11cec <__lshift>
   11034:	4641      	mov	r1, r8
   11036:	900a      	str	r0, [sp, #40]	; 0x28
   11038:	f000 feb6 	bl	11da8 <__mcmp>
   1103c:	2800      	cmp	r0, #0
   1103e:	f340 815b 	ble.w	112f8 <_dtoa_r+0xde8>
   11042:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   11046:	f000 811a 	beq.w	1127e <_dtoa_r+0xd6e>
   1104a:	f109 0a31 	add.w	sl, r9, #49	; 0x31
   1104e:	9b06      	ldr	r3, [sp, #24]
   11050:	4635      	mov	r5, r6
   11052:	f883 a000 	strb.w	sl, [r3]
   11056:	f103 0b01 	add.w	fp, r3, #1
   1105a:	463e      	mov	r6, r7
   1105c:	e50f      	b.n	10a7e <_dtoa_r+0x56e>
   1105e:	bf00      	nop
   11060:	3ff00000 	.word	0x3ff00000
   11064:	40240000 	.word	0x40240000
   11068:	40140000 	.word	0x40140000
   1106c:	401c0000 	.word	0x401c0000
   11070:	d103      	bne.n	1107a <_dtoa_r+0xb6a>
   11072:	f01a 0f01 	tst.w	sl, #1
   11076:	f47f acf2 	bne.w	10a5e <_dtoa_r+0x54e>
   1107a:	465b      	mov	r3, fp
   1107c:	469b      	mov	fp, r3
   1107e:	3b01      	subs	r3, #1
   11080:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   11084:	2a30      	cmp	r2, #48	; 0x30
   11086:	d0f9      	beq.n	1107c <_dtoa_r+0xb6c>
   11088:	e4f9      	b.n	10a7e <_dtoa_r+0x56e>
   1108a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   1108e:	4654      	mov	r4, sl
   11090:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   11094:	f7ff bb48 	b.w	10728 <_dtoa_r+0x218>
   11098:	9e07      	ldr	r6, [sp, #28]
   1109a:	4275      	negs	r5, r6
   1109c:	2d00      	cmp	r5, #0
   1109e:	f000 80c2 	beq.w	11226 <_dtoa_r+0xd16>
   110a2:	4ba3      	ldr	r3, [pc, #652]	; (11330 <_dtoa_r+0xe20>)
   110a4:	f005 020f 	and.w	r2, r5, #15
   110a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   110ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   110b0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   110b4:	f7fb f896 	bl	c1e4 <__aeabi_dmul>
   110b8:	112d      	asrs	r5, r5, #4
   110ba:	4682      	mov	sl, r0
   110bc:	468b      	mov	fp, r1
   110be:	f000 812d 	beq.w	1131c <_dtoa_r+0xe0c>
   110c2:	4e9c      	ldr	r6, [pc, #624]	; (11334 <_dtoa_r+0xe24>)
   110c4:	f04f 0802 	mov.w	r8, #2
   110c8:	07ea      	lsls	r2, r5, #31
   110ca:	d505      	bpl.n	110d8 <_dtoa_r+0xbc8>
   110cc:	e9d6 2300 	ldrd	r2, r3, [r6]
   110d0:	f108 0801 	add.w	r8, r8, #1
   110d4:	f7fb f886 	bl	c1e4 <__aeabi_dmul>
   110d8:	106d      	asrs	r5, r5, #1
   110da:	f106 0608 	add.w	r6, r6, #8
   110de:	d1f3      	bne.n	110c8 <_dtoa_r+0xbb8>
   110e0:	4682      	mov	sl, r0
   110e2:	468b      	mov	fp, r1
   110e4:	e5f0      	b.n	10cc8 <_dtoa_r+0x7b8>
   110e6:	9e07      	ldr	r6, [sp, #28]
   110e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   110ea:	2230      	movs	r2, #48	; 0x30
   110ec:	702a      	strb	r2, [r5, #0]
   110ee:	3601      	adds	r6, #1
   110f0:	2231      	movs	r2, #49	; 0x31
   110f2:	9607      	str	r6, [sp, #28]
   110f4:	701a      	strb	r2, [r3, #0]
   110f6:	f7ff bbd8 	b.w	108aa <_dtoa_r+0x39a>
   110fa:	6871      	ldr	r1, [r6, #4]
   110fc:	4620      	mov	r0, r4
   110fe:	f000 fc35 	bl	1196c <_Balloc>
   11102:	6933      	ldr	r3, [r6, #16]
   11104:	1c9a      	adds	r2, r3, #2
   11106:	4605      	mov	r5, r0
   11108:	0092      	lsls	r2, r2, #2
   1110a:	f106 010c 	add.w	r1, r6, #12
   1110e:	300c      	adds	r0, #12
   11110:	f7fd f83e 	bl	e190 <memcpy>
   11114:	4620      	mov	r0, r4
   11116:	4629      	mov	r1, r5
   11118:	2201      	movs	r2, #1
   1111a:	f000 fde7 	bl	11cec <__lshift>
   1111e:	4607      	mov	r7, r0
   11120:	e504      	b.n	10b2c <_dtoa_r+0x61c>
   11122:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   11126:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1112a:	f000 80a8 	beq.w	1127e <_dtoa_r+0xd6e>
   1112e:	9d06      	ldr	r5, [sp, #24]
   11130:	f10a 0301 	add.w	r3, sl, #1
   11134:	702b      	strb	r3, [r5, #0]
   11136:	4635      	mov	r5, r6
   11138:	9e06      	ldr	r6, [sp, #24]
   1113a:	f106 0b01 	add.w	fp, r6, #1
   1113e:	463e      	mov	r6, r7
   11140:	e49d      	b.n	10a7e <_dtoa_r+0x56e>
   11142:	4635      	mov	r5, r6
   11144:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   11148:	463e      	mov	r6, r7
   1114a:	e47c      	b.n	10a46 <_dtoa_r+0x536>
   1114c:	f04f 0800 	mov.w	r8, #0
   11150:	4646      	mov	r6, r8
   11152:	e70d      	b.n	10f70 <_dtoa_r+0xa60>
   11154:	4976      	ldr	r1, [pc, #472]	; (11330 <_dtoa_r+0xe20>)
   11156:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   1115a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   1115e:	4632      	mov	r2, r6
   11160:	463b      	mov	r3, r7
   11162:	e9d1 0100 	ldrd	r0, r1, [r1]
   11166:	9510      	str	r5, [sp, #64]	; 0x40
   11168:	f7fb f83c 	bl	c1e4 <__aeabi_dmul>
   1116c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   11170:	4659      	mov	r1, fp
   11172:	4650      	mov	r0, sl
   11174:	f7fb fad0 	bl	c718 <__aeabi_d2iz>
   11178:	4605      	mov	r5, r0
   1117a:	f7fa ffcd 	bl	c118 <__aeabi_i2d>
   1117e:	4602      	mov	r2, r0
   11180:	460b      	mov	r3, r1
   11182:	4650      	mov	r0, sl
   11184:	4659      	mov	r1, fp
   11186:	f7fa fe79 	bl	be7c <__aeabi_dsub>
   1118a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1118e:	3530      	adds	r5, #48	; 0x30
   11190:	f1b8 0f01 	cmp.w	r8, #1
   11194:	4606      	mov	r6, r0
   11196:	460f      	mov	r7, r1
   11198:	f88e 5000 	strb.w	r5, [lr]
   1119c:	f10e 0b01 	add.w	fp, lr, #1
   111a0:	d01e      	beq.n	111e0 <_dtoa_r+0xcd0>
   111a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   111a4:	1e6b      	subs	r3, r5, #1
   111a6:	eb03 0a08 	add.w	sl, r3, r8
   111aa:	2200      	movs	r2, #0
   111ac:	4b62      	ldr	r3, [pc, #392]	; (11338 <_dtoa_r+0xe28>)
   111ae:	f7fb f819 	bl	c1e4 <__aeabi_dmul>
   111b2:	460f      	mov	r7, r1
   111b4:	4606      	mov	r6, r0
   111b6:	f7fb faaf 	bl	c718 <__aeabi_d2iz>
   111ba:	4680      	mov	r8, r0
   111bc:	f7fa ffac 	bl	c118 <__aeabi_i2d>
   111c0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   111c4:	4602      	mov	r2, r0
   111c6:	460b      	mov	r3, r1
   111c8:	4630      	mov	r0, r6
   111ca:	4639      	mov	r1, r7
   111cc:	f7fa fe56 	bl	be7c <__aeabi_dsub>
   111d0:	f805 8f01 	strb.w	r8, [r5, #1]!
   111d4:	4555      	cmp	r5, sl
   111d6:	d1e8      	bne.n	111aa <_dtoa_r+0xc9a>
   111d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   111da:	4606      	mov	r6, r0
   111dc:	460f      	mov	r7, r1
   111de:	44ab      	add	fp, r5
   111e0:	2200      	movs	r2, #0
   111e2:	4b56      	ldr	r3, [pc, #344]	; (1133c <_dtoa_r+0xe2c>)
   111e4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   111e8:	f7fa fe4a 	bl	be80 <__adddf3>
   111ec:	4632      	mov	r2, r6
   111ee:	463b      	mov	r3, r7
   111f0:	f7fb fa6a 	bl	c6c8 <__aeabi_dcmplt>
   111f4:	2800      	cmp	r0, #0
   111f6:	d04d      	beq.n	11294 <_dtoa_r+0xd84>
   111f8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   111fa:	9607      	str	r6, [sp, #28]
   111fc:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   11200:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11202:	f7ff bb4b 	b.w	1089c <_dtoa_r+0x38c>
   11206:	9e08      	ldr	r6, [sp, #32]
   11208:	2300      	movs	r3, #0
   1120a:	ebc9 0506 	rsb	r5, r9, r6
   1120e:	f7ff bb76 	b.w	108fe <_dtoa_r+0x3ee>
   11212:	9b18      	ldr	r3, [sp, #96]	; 0x60
   11214:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   11216:	9d08      	ldr	r5, [sp, #32]
   11218:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1121c:	f7ff bb6f 	b.w	108fe <_dtoa_r+0x3ee>
   11220:	4657      	mov	r7, sl
   11222:	f7ff bbb9 	b.w	10998 <_dtoa_r+0x488>
   11226:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   1122a:	f04f 0802 	mov.w	r8, #2
   1122e:	e54b      	b.n	10cc8 <_dtoa_r+0x7b8>
   11230:	f1b9 0f00 	cmp.w	r9, #0
   11234:	f43f aeaf 	beq.w	10f96 <_dtoa_r+0xa86>
   11238:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1123a:	2e00      	cmp	r6, #0
   1123c:	f77f af28 	ble.w	11090 <_dtoa_r+0xb80>
   11240:	2200      	movs	r2, #0
   11242:	4b3d      	ldr	r3, [pc, #244]	; (11338 <_dtoa_r+0xe28>)
   11244:	4650      	mov	r0, sl
   11246:	4659      	mov	r1, fp
   11248:	f7fa ffcc 	bl	c1e4 <__aeabi_dmul>
   1124c:	4682      	mov	sl, r0
   1124e:	f108 0001 	add.w	r0, r8, #1
   11252:	468b      	mov	fp, r1
   11254:	f7fa ff60 	bl	c118 <__aeabi_i2d>
   11258:	4602      	mov	r2, r0
   1125a:	460b      	mov	r3, r1
   1125c:	4650      	mov	r0, sl
   1125e:	4659      	mov	r1, fp
   11260:	f7fa ffc0 	bl	c1e4 <__aeabi_dmul>
   11264:	2200      	movs	r2, #0
   11266:	4b36      	ldr	r3, [pc, #216]	; (11340 <_dtoa_r+0xe30>)
   11268:	f7fa fe0a 	bl	be80 <__adddf3>
   1126c:	9d07      	ldr	r5, [sp, #28]
   1126e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   11272:	3d01      	subs	r5, #1
   11274:	4606      	mov	r6, r0
   11276:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   1127a:	9517      	str	r5, [sp, #92]	; 0x5c
   1127c:	e544      	b.n	10d08 <_dtoa_r+0x7f8>
   1127e:	4635      	mov	r5, r6
   11280:	9b06      	ldr	r3, [sp, #24]
   11282:	9e06      	ldr	r6, [sp, #24]
   11284:	9909      	ldr	r1, [sp, #36]	; 0x24
   11286:	2239      	movs	r2, #57	; 0x39
   11288:	7032      	strb	r2, [r6, #0]
   1128a:	f103 0b01 	add.w	fp, r3, #1
   1128e:	463e      	mov	r6, r7
   11290:	f7ff bbef 	b.w	10a72 <_dtoa_r+0x562>
   11294:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   11298:	2000      	movs	r0, #0
   1129a:	4928      	ldr	r1, [pc, #160]	; (1133c <_dtoa_r+0xe2c>)
   1129c:	f7fa fdee 	bl	be7c <__aeabi_dsub>
   112a0:	4632      	mov	r2, r6
   112a2:	463b      	mov	r3, r7
   112a4:	f7fb fa2e 	bl	c704 <__aeabi_dcmpgt>
   112a8:	2800      	cmp	r0, #0
   112aa:	f43f aef1 	beq.w	11090 <_dtoa_r+0xb80>
   112ae:	465b      	mov	r3, fp
   112b0:	469b      	mov	fp, r3
   112b2:	3b01      	subs	r3, #1
   112b4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   112b8:	2a30      	cmp	r2, #48	; 0x30
   112ba:	d0f9      	beq.n	112b0 <_dtoa_r+0xda0>
   112bc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   112be:	9507      	str	r5, [sp, #28]
   112c0:	f7ff baf3 	b.w	108aa <_dtoa_r+0x39a>
   112c4:	4645      	mov	r5, r8
   112c6:	4654      	mov	r4, sl
   112c8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   112ca:	9607      	str	r6, [sp, #28]
   112cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   112ce:	f7ff bae5 	b.w	1089c <_dtoa_r+0x38c>
   112d2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   112d6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   112da:	d0d0      	beq.n	1127e <_dtoa_r+0xd6e>
   112dc:	9b03      	ldr	r3, [sp, #12]
   112de:	4635      	mov	r5, r6
   112e0:	2b00      	cmp	r3, #0
   112e2:	9e06      	ldr	r6, [sp, #24]
   112e4:	bfc8      	it	gt
   112e6:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
   112ea:	f886 a000 	strb.w	sl, [r6]
   112ee:	f106 0b01 	add.w	fp, r6, #1
   112f2:	463e      	mov	r6, r7
   112f4:	f7ff bbc3 	b.w	10a7e <_dtoa_r+0x56e>
   112f8:	f47f aea9 	bne.w	1104e <_dtoa_r+0xb3e>
   112fc:	f01a 0f01 	tst.w	sl, #1
   11300:	f43f aea5 	beq.w	1104e <_dtoa_r+0xb3e>
   11304:	e69d      	b.n	11042 <_dtoa_r+0xb32>
   11306:	4631      	mov	r1, r6
   11308:	4620      	mov	r0, r4
   1130a:	220a      	movs	r2, #10
   1130c:	2300      	movs	r3, #0
   1130e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   11312:	f000 fb5b 	bl	119cc <__multadd>
   11316:	4606      	mov	r6, r0
   11318:	f7ff bb6c 	b.w	109f4 <_dtoa_r+0x4e4>
   1131c:	f04f 0802 	mov.w	r8, #2
   11320:	e4d2      	b.n	10cc8 <_dtoa_r+0x7b8>
   11322:	f43f ab52 	beq.w	109ca <_dtoa_r+0x4ba>
   11326:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   1132a:	f7ff bbe2 	b.w	10af2 <_dtoa_r+0x5e2>
   1132e:	bf00      	nop
   11330:	000141e0 	.word	0x000141e0
   11334:	000142a8 	.word	0x000142a8
   11338:	40240000 	.word	0x40240000
   1133c:	3fe00000 	.word	0x3fe00000
   11340:	401c0000 	.word	0x401c0000
   11344:	f3af 8000 	nop.w

00011348 <__sflush_r>:
   11348:	898b      	ldrh	r3, [r1, #12]
   1134a:	b29a      	uxth	r2, r3
   1134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11350:	460d      	mov	r5, r1
   11352:	0711      	lsls	r1, r2, #28
   11354:	4680      	mov	r8, r0
   11356:	d43c      	bmi.n	113d2 <__sflush_r+0x8a>
   11358:	686a      	ldr	r2, [r5, #4]
   1135a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1135e:	2a00      	cmp	r2, #0
   11360:	81ab      	strh	r3, [r5, #12]
   11362:	dd59      	ble.n	11418 <__sflush_r+0xd0>
   11364:	6aac      	ldr	r4, [r5, #40]	; 0x28
   11366:	2c00      	cmp	r4, #0
   11368:	d04b      	beq.n	11402 <__sflush_r+0xba>
   1136a:	b29b      	uxth	r3, r3
   1136c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   11370:	2100      	movs	r1, #0
   11372:	b292      	uxth	r2, r2
   11374:	f8d8 6000 	ldr.w	r6, [r8]
   11378:	f8c8 1000 	str.w	r1, [r8]
   1137c:	2a00      	cmp	r2, #0
   1137e:	d04f      	beq.n	11420 <__sflush_r+0xd8>
   11380:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   11382:	075f      	lsls	r7, r3, #29
   11384:	d505      	bpl.n	11392 <__sflush_r+0x4a>
   11386:	6869      	ldr	r1, [r5, #4]
   11388:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1138a:	1a52      	subs	r2, r2, r1
   1138c:	b10b      	cbz	r3, 11392 <__sflush_r+0x4a>
   1138e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   11390:	1ad2      	subs	r2, r2, r3
   11392:	4640      	mov	r0, r8
   11394:	69e9      	ldr	r1, [r5, #28]
   11396:	2300      	movs	r3, #0
   11398:	47a0      	blx	r4
   1139a:	1c44      	adds	r4, r0, #1
   1139c:	d04a      	beq.n	11434 <__sflush_r+0xec>
   1139e:	89aa      	ldrh	r2, [r5, #12]
   113a0:	692b      	ldr	r3, [r5, #16]
   113a2:	602b      	str	r3, [r5, #0]
   113a4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   113a8:	b29b      	uxth	r3, r3
   113aa:	2200      	movs	r2, #0
   113ac:	606a      	str	r2, [r5, #4]
   113ae:	04da      	lsls	r2, r3, #19
   113b0:	81ab      	strh	r3, [r5, #12]
   113b2:	d44c      	bmi.n	1144e <__sflush_r+0x106>
   113b4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   113b6:	f8c8 6000 	str.w	r6, [r8]
   113ba:	b311      	cbz	r1, 11402 <__sflush_r+0xba>
   113bc:	f105 0340 	add.w	r3, r5, #64	; 0x40
   113c0:	4299      	cmp	r1, r3
   113c2:	d002      	beq.n	113ca <__sflush_r+0x82>
   113c4:	4640      	mov	r0, r8
   113c6:	f000 f969 	bl	1169c <_free_r>
   113ca:	2000      	movs	r0, #0
   113cc:	6328      	str	r0, [r5, #48]	; 0x30
   113ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113d2:	692e      	ldr	r6, [r5, #16]
   113d4:	b1ae      	cbz	r6, 11402 <__sflush_r+0xba>
   113d6:	682c      	ldr	r4, [r5, #0]
   113d8:	602e      	str	r6, [r5, #0]
   113da:	0791      	lsls	r1, r2, #30
   113dc:	bf0c      	ite	eq
   113de:	696b      	ldreq	r3, [r5, #20]
   113e0:	2300      	movne	r3, #0
   113e2:	1ba4      	subs	r4, r4, r6
   113e4:	60ab      	str	r3, [r5, #8]
   113e6:	e00a      	b.n	113fe <__sflush_r+0xb6>
   113e8:	4632      	mov	r2, r6
   113ea:	4623      	mov	r3, r4
   113ec:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   113ee:	69e9      	ldr	r1, [r5, #28]
   113f0:	4640      	mov	r0, r8
   113f2:	47b8      	blx	r7
   113f4:	2800      	cmp	r0, #0
   113f6:	ebc0 0404 	rsb	r4, r0, r4
   113fa:	4406      	add	r6, r0
   113fc:	dd04      	ble.n	11408 <__sflush_r+0xc0>
   113fe:	2c00      	cmp	r4, #0
   11400:	dcf2      	bgt.n	113e8 <__sflush_r+0xa0>
   11402:	2000      	movs	r0, #0
   11404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11408:	89ab      	ldrh	r3, [r5, #12]
   1140a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1140e:	81ab      	strh	r3, [r5, #12]
   11410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11418:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   1141a:	2a00      	cmp	r2, #0
   1141c:	dca2      	bgt.n	11364 <__sflush_r+0x1c>
   1141e:	e7f0      	b.n	11402 <__sflush_r+0xba>
   11420:	2301      	movs	r3, #1
   11422:	4640      	mov	r0, r8
   11424:	69e9      	ldr	r1, [r5, #28]
   11426:	47a0      	blx	r4
   11428:	1c43      	adds	r3, r0, #1
   1142a:	4602      	mov	r2, r0
   1142c:	d01e      	beq.n	1146c <__sflush_r+0x124>
   1142e:	89ab      	ldrh	r3, [r5, #12]
   11430:	6aac      	ldr	r4, [r5, #40]	; 0x28
   11432:	e7a6      	b.n	11382 <__sflush_r+0x3a>
   11434:	f8d8 3000 	ldr.w	r3, [r8]
   11438:	b95b      	cbnz	r3, 11452 <__sflush_r+0x10a>
   1143a:	89a9      	ldrh	r1, [r5, #12]
   1143c:	606b      	str	r3, [r5, #4]
   1143e:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
   11442:	b29b      	uxth	r3, r3
   11444:	692a      	ldr	r2, [r5, #16]
   11446:	81ab      	strh	r3, [r5, #12]
   11448:	04db      	lsls	r3, r3, #19
   1144a:	602a      	str	r2, [r5, #0]
   1144c:	d5b2      	bpl.n	113b4 <__sflush_r+0x6c>
   1144e:	6528      	str	r0, [r5, #80]	; 0x50
   11450:	e7b0      	b.n	113b4 <__sflush_r+0x6c>
   11452:	2b1d      	cmp	r3, #29
   11454:	d001      	beq.n	1145a <__sflush_r+0x112>
   11456:	2b16      	cmp	r3, #22
   11458:	d119      	bne.n	1148e <__sflush_r+0x146>
   1145a:	89aa      	ldrh	r2, [r5, #12]
   1145c:	692b      	ldr	r3, [r5, #16]
   1145e:	602b      	str	r3, [r5, #0]
   11460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   11464:	2300      	movs	r3, #0
   11466:	81aa      	strh	r2, [r5, #12]
   11468:	606b      	str	r3, [r5, #4]
   1146a:	e7a3      	b.n	113b4 <__sflush_r+0x6c>
   1146c:	f8d8 3000 	ldr.w	r3, [r8]
   11470:	2b00      	cmp	r3, #0
   11472:	d0dc      	beq.n	1142e <__sflush_r+0xe6>
   11474:	2b1d      	cmp	r3, #29
   11476:	d007      	beq.n	11488 <__sflush_r+0x140>
   11478:	2b16      	cmp	r3, #22
   1147a:	d005      	beq.n	11488 <__sflush_r+0x140>
   1147c:	89ab      	ldrh	r3, [r5, #12]
   1147e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11482:	81ab      	strh	r3, [r5, #12]
   11484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11488:	f8c8 6000 	str.w	r6, [r8]
   1148c:	e7b9      	b.n	11402 <__sflush_r+0xba>
   1148e:	89ab      	ldrh	r3, [r5, #12]
   11490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11494:	81ab      	strh	r3, [r5, #12]
   11496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1149a:	bf00      	nop

0001149c <_fflush_r>:
   1149c:	b510      	push	{r4, lr}
   1149e:	4604      	mov	r4, r0
   114a0:	b082      	sub	sp, #8
   114a2:	b108      	cbz	r0, 114a8 <_fflush_r+0xc>
   114a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   114a6:	b153      	cbz	r3, 114be <_fflush_r+0x22>
   114a8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   114ac:	b908      	cbnz	r0, 114b2 <_fflush_r+0x16>
   114ae:	b002      	add	sp, #8
   114b0:	bd10      	pop	{r4, pc}
   114b2:	4620      	mov	r0, r4
   114b4:	b002      	add	sp, #8
   114b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114ba:	f7ff bf45 	b.w	11348 <__sflush_r>
   114be:	9101      	str	r1, [sp, #4]
   114c0:	f000 f808 	bl	114d4 <__sinit>
   114c4:	9901      	ldr	r1, [sp, #4]
   114c6:	e7ef      	b.n	114a8 <_fflush_r+0xc>

000114c8 <_cleanup_r>:
   114c8:	4901      	ldr	r1, [pc, #4]	; (114d0 <_cleanup_r+0x8>)
   114ca:	f000 b9b5 	b.w	11838 <_fwalk>
   114ce:	bf00      	nop
   114d0:	00012269 	.word	0x00012269

000114d4 <__sinit>:
   114d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
   114da:	b083      	sub	sp, #12
   114dc:	4607      	mov	r7, r0
   114de:	2c00      	cmp	r4, #0
   114e0:	d165      	bne.n	115ae <__sinit+0xda>
   114e2:	6845      	ldr	r5, [r0, #4]
   114e4:	4833      	ldr	r0, [pc, #204]	; (115b4 <__sinit+0xe0>)
   114e6:	63f8      	str	r0, [r7, #60]	; 0x3c
   114e8:	2304      	movs	r3, #4
   114ea:	2103      	movs	r1, #3
   114ec:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   114f0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   114f4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   114f8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   114fc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   11500:	81ab      	strh	r3, [r5, #12]
   11502:	602c      	str	r4, [r5, #0]
   11504:	606c      	str	r4, [r5, #4]
   11506:	60ac      	str	r4, [r5, #8]
   11508:	666c      	str	r4, [r5, #100]	; 0x64
   1150a:	81ec      	strh	r4, [r5, #14]
   1150c:	612c      	str	r4, [r5, #16]
   1150e:	616c      	str	r4, [r5, #20]
   11510:	61ac      	str	r4, [r5, #24]
   11512:	4621      	mov	r1, r4
   11514:	2208      	movs	r2, #8
   11516:	f7fc ff35 	bl	e384 <memset>
   1151a:	68be      	ldr	r6, [r7, #8]
   1151c:	f8df b098 	ldr.w	fp, [pc, #152]	; 115b8 <__sinit+0xe4>
   11520:	f8df a098 	ldr.w	sl, [pc, #152]	; 115bc <__sinit+0xe8>
   11524:	f8df 9098 	ldr.w	r9, [pc, #152]	; 115c0 <__sinit+0xec>
   11528:	f8df 8098 	ldr.w	r8, [pc, #152]	; 115c4 <__sinit+0xf0>
   1152c:	61ed      	str	r5, [r5, #28]
   1152e:	2301      	movs	r3, #1
   11530:	2209      	movs	r2, #9
   11532:	f8c5 b020 	str.w	fp, [r5, #32]
   11536:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   1153a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   1153e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   11542:	4621      	mov	r1, r4
   11544:	81f3      	strh	r3, [r6, #14]
   11546:	81b2      	strh	r2, [r6, #12]
   11548:	6034      	str	r4, [r6, #0]
   1154a:	6074      	str	r4, [r6, #4]
   1154c:	60b4      	str	r4, [r6, #8]
   1154e:	6674      	str	r4, [r6, #100]	; 0x64
   11550:	6134      	str	r4, [r6, #16]
   11552:	6174      	str	r4, [r6, #20]
   11554:	61b4      	str	r4, [r6, #24]
   11556:	2208      	movs	r2, #8
   11558:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   1155c:	9301      	str	r3, [sp, #4]
   1155e:	f7fc ff11 	bl	e384 <memset>
   11562:	68fd      	ldr	r5, [r7, #12]
   11564:	61f6      	str	r6, [r6, #28]
   11566:	2012      	movs	r0, #18
   11568:	2202      	movs	r2, #2
   1156a:	f8c6 b020 	str.w	fp, [r6, #32]
   1156e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   11572:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   11576:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   1157a:	4621      	mov	r1, r4
   1157c:	81a8      	strh	r0, [r5, #12]
   1157e:	81ea      	strh	r2, [r5, #14]
   11580:	602c      	str	r4, [r5, #0]
   11582:	606c      	str	r4, [r5, #4]
   11584:	60ac      	str	r4, [r5, #8]
   11586:	666c      	str	r4, [r5, #100]	; 0x64
   11588:	612c      	str	r4, [r5, #16]
   1158a:	616c      	str	r4, [r5, #20]
   1158c:	61ac      	str	r4, [r5, #24]
   1158e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   11592:	2208      	movs	r2, #8
   11594:	f7fc fef6 	bl	e384 <memset>
   11598:	9b01      	ldr	r3, [sp, #4]
   1159a:	61ed      	str	r5, [r5, #28]
   1159c:	f8c5 b020 	str.w	fp, [r5, #32]
   115a0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   115a4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   115a8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   115ac:	63bb      	str	r3, [r7, #56]	; 0x38
   115ae:	b003      	add	sp, #12
   115b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115b4:	000114c9 	.word	0x000114c9
   115b8:	00011f81 	.word	0x00011f81
   115bc:	00011fa5 	.word	0x00011fa5
   115c0:	00011fdd 	.word	0x00011fdd
   115c4:	00011ffd 	.word	0x00011ffd

000115c8 <__sfp_lock_acquire>:
   115c8:	4770      	bx	lr
   115ca:	bf00      	nop

000115cc <__sfp_lock_release>:
   115cc:	4770      	bx	lr
   115ce:	bf00      	nop

000115d0 <__libc_fini_array>:
   115d0:	b538      	push	{r3, r4, r5, lr}
   115d2:	4d09      	ldr	r5, [pc, #36]	; (115f8 <__libc_fini_array+0x28>)
   115d4:	4c09      	ldr	r4, [pc, #36]	; (115fc <__libc_fini_array+0x2c>)
   115d6:	1b64      	subs	r4, r4, r5
   115d8:	10a4      	asrs	r4, r4, #2
   115da:	bf18      	it	ne
   115dc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   115e0:	d005      	beq.n	115ee <__libc_fini_array+0x1e>
   115e2:	3c01      	subs	r4, #1
   115e4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   115e8:	4798      	blx	r3
   115ea:	2c00      	cmp	r4, #0
   115ec:	d1f9      	bne.n	115e2 <__libc_fini_array+0x12>
   115ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   115f2:	f002 be8d 	b.w	14310 <__init_array_end>
   115f6:	bf00      	nop
	...

00011600 <_malloc_trim_r>:
   11600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11602:	4d23      	ldr	r5, [pc, #140]	; (11690 <_malloc_trim_r+0x90>)
   11604:	460f      	mov	r7, r1
   11606:	4604      	mov	r4, r0
   11608:	f7fc ff06 	bl	e418 <__malloc_lock>
   1160c:	68ab      	ldr	r3, [r5, #8]
   1160e:	685e      	ldr	r6, [r3, #4]
   11610:	f026 0603 	bic.w	r6, r6, #3
   11614:	1bf1      	subs	r1, r6, r7
   11616:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   1161a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1161e:	f021 010f 	bic.w	r1, r1, #15
   11622:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   11626:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1162a:	db07      	blt.n	1163c <_malloc_trim_r+0x3c>
   1162c:	4620      	mov	r0, r4
   1162e:	2100      	movs	r1, #0
   11630:	f7fd f910 	bl	e854 <_sbrk_r>
   11634:	68ab      	ldr	r3, [r5, #8]
   11636:	4433      	add	r3, r6
   11638:	4298      	cmp	r0, r3
   1163a:	d004      	beq.n	11646 <_malloc_trim_r+0x46>
   1163c:	4620      	mov	r0, r4
   1163e:	f7fc feed 	bl	e41c <__malloc_unlock>
   11642:	2000      	movs	r0, #0
   11644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11646:	4620      	mov	r0, r4
   11648:	4279      	negs	r1, r7
   1164a:	f7fd f903 	bl	e854 <_sbrk_r>
   1164e:	3001      	adds	r0, #1
   11650:	d00d      	beq.n	1166e <_malloc_trim_r+0x6e>
   11652:	4b10      	ldr	r3, [pc, #64]	; (11694 <_malloc_trim_r+0x94>)
   11654:	68aa      	ldr	r2, [r5, #8]
   11656:	6819      	ldr	r1, [r3, #0]
   11658:	1bf6      	subs	r6, r6, r7
   1165a:	f046 0601 	orr.w	r6, r6, #1
   1165e:	4620      	mov	r0, r4
   11660:	1bc9      	subs	r1, r1, r7
   11662:	6056      	str	r6, [r2, #4]
   11664:	6019      	str	r1, [r3, #0]
   11666:	f7fc fed9 	bl	e41c <__malloc_unlock>
   1166a:	2001      	movs	r0, #1
   1166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1166e:	4620      	mov	r0, r4
   11670:	2100      	movs	r1, #0
   11672:	f7fd f8ef 	bl	e854 <_sbrk_r>
   11676:	68ab      	ldr	r3, [r5, #8]
   11678:	1ac2      	subs	r2, r0, r3
   1167a:	2a0f      	cmp	r2, #15
   1167c:	ddde      	ble.n	1163c <_malloc_trim_r+0x3c>
   1167e:	4d06      	ldr	r5, [pc, #24]	; (11698 <_malloc_trim_r+0x98>)
   11680:	4904      	ldr	r1, [pc, #16]	; (11694 <_malloc_trim_r+0x94>)
   11682:	682d      	ldr	r5, [r5, #0]
   11684:	f042 0201 	orr.w	r2, r2, #1
   11688:	1b40      	subs	r0, r0, r5
   1168a:	605a      	str	r2, [r3, #4]
   1168c:	6008      	str	r0, [r1, #0]
   1168e:	e7d5      	b.n	1163c <_malloc_trim_r+0x3c>
   11690:	1fff88f4 	.word	0x1fff88f4
   11694:	1fff9c58 	.word	0x1fff9c58
   11698:	1fff8d00 	.word	0x1fff8d00

0001169c <_free_r>:
   1169c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116a0:	460d      	mov	r5, r1
   116a2:	4606      	mov	r6, r0
   116a4:	2900      	cmp	r1, #0
   116a6:	d055      	beq.n	11754 <_free_r+0xb8>
   116a8:	f7fc feb6 	bl	e418 <__malloc_lock>
   116ac:	f855 1c04 	ldr.w	r1, [r5, #-4]
   116b0:	f8df c174 	ldr.w	ip, [pc, #372]	; 11828 <_free_r+0x18c>
   116b4:	f021 0301 	bic.w	r3, r1, #1
   116b8:	f1a5 0408 	sub.w	r4, r5, #8
   116bc:	18e2      	adds	r2, r4, r3
   116be:	f8dc 0008 	ldr.w	r0, [ip, #8]
   116c2:	6857      	ldr	r7, [r2, #4]
   116c4:	4290      	cmp	r0, r2
   116c6:	f027 0703 	bic.w	r7, r7, #3
   116ca:	d069      	beq.n	117a0 <_free_r+0x104>
   116cc:	f011 0101 	ands.w	r1, r1, #1
   116d0:	6057      	str	r7, [r2, #4]
   116d2:	d032      	beq.n	1173a <_free_r+0x9e>
   116d4:	2100      	movs	r1, #0
   116d6:	19d0      	adds	r0, r2, r7
   116d8:	6840      	ldr	r0, [r0, #4]
   116da:	07c0      	lsls	r0, r0, #31
   116dc:	d406      	bmi.n	116ec <_free_r+0x50>
   116de:	443b      	add	r3, r7
   116e0:	6890      	ldr	r0, [r2, #8]
   116e2:	2900      	cmp	r1, #0
   116e4:	d04e      	beq.n	11784 <_free_r+0xe8>
   116e6:	68d2      	ldr	r2, [r2, #12]
   116e8:	60c2      	str	r2, [r0, #12]
   116ea:	6090      	str	r0, [r2, #8]
   116ec:	f043 0201 	orr.w	r2, r3, #1
   116f0:	6062      	str	r2, [r4, #4]
   116f2:	50e3      	str	r3, [r4, r3]
   116f4:	b9e1      	cbnz	r1, 11730 <_free_r+0x94>
   116f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   116fa:	d32d      	bcc.n	11758 <_free_r+0xbc>
   116fc:	0a5a      	lsrs	r2, r3, #9
   116fe:	2a04      	cmp	r2, #4
   11700:	d86a      	bhi.n	117d8 <_free_r+0x13c>
   11702:	0998      	lsrs	r0, r3, #6
   11704:	3038      	adds	r0, #56	; 0x38
   11706:	0041      	lsls	r1, r0, #1
   11708:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   1170c:	4946      	ldr	r1, [pc, #280]	; (11828 <_free_r+0x18c>)
   1170e:	f8dc 2008 	ldr.w	r2, [ip, #8]
   11712:	4562      	cmp	r2, ip
   11714:	d066      	beq.n	117e4 <_free_r+0x148>
   11716:	6851      	ldr	r1, [r2, #4]
   11718:	f021 0103 	bic.w	r1, r1, #3
   1171c:	428b      	cmp	r3, r1
   1171e:	d202      	bcs.n	11726 <_free_r+0x8a>
   11720:	6892      	ldr	r2, [r2, #8]
   11722:	4594      	cmp	ip, r2
   11724:	d1f7      	bne.n	11716 <_free_r+0x7a>
   11726:	68d3      	ldr	r3, [r2, #12]
   11728:	60e3      	str	r3, [r4, #12]
   1172a:	60a2      	str	r2, [r4, #8]
   1172c:	609c      	str	r4, [r3, #8]
   1172e:	60d4      	str	r4, [r2, #12]
   11730:	4630      	mov	r0, r6
   11732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11736:	f7fc be71 	b.w	e41c <__malloc_unlock>
   1173a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   1173e:	1b64      	subs	r4, r4, r5
   11740:	f10c 0808 	add.w	r8, ip, #8
   11744:	68a0      	ldr	r0, [r4, #8]
   11746:	4540      	cmp	r0, r8
   11748:	442b      	add	r3, r5
   1174a:	d043      	beq.n	117d4 <_free_r+0x138>
   1174c:	68e5      	ldr	r5, [r4, #12]
   1174e:	60c5      	str	r5, [r0, #12]
   11750:	60a8      	str	r0, [r5, #8]
   11752:	e7c0      	b.n	116d6 <_free_r+0x3a>
   11754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11758:	08db      	lsrs	r3, r3, #3
   1175a:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   1175e:	2501      	movs	r5, #1
   11760:	f8dc 0004 	ldr.w	r0, [ip, #4]
   11764:	6891      	ldr	r1, [r2, #8]
   11766:	60a1      	str	r1, [r4, #8]
   11768:	109b      	asrs	r3, r3, #2
   1176a:	fa05 f303 	lsl.w	r3, r5, r3
   1176e:	4318      	orrs	r0, r3
   11770:	60e2      	str	r2, [r4, #12]
   11772:	f8cc 0004 	str.w	r0, [ip, #4]
   11776:	6094      	str	r4, [r2, #8]
   11778:	4630      	mov	r0, r6
   1177a:	60cc      	str	r4, [r1, #12]
   1177c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11780:	f7fc be4c 	b.w	e41c <__malloc_unlock>
   11784:	4d29      	ldr	r5, [pc, #164]	; (1182c <_free_r+0x190>)
   11786:	42a8      	cmp	r0, r5
   11788:	d1ad      	bne.n	116e6 <_free_r+0x4a>
   1178a:	f043 0201 	orr.w	r2, r3, #1
   1178e:	f8cc 4014 	str.w	r4, [ip, #20]
   11792:	f8cc 4010 	str.w	r4, [ip, #16]
   11796:	60e0      	str	r0, [r4, #12]
   11798:	60a0      	str	r0, [r4, #8]
   1179a:	6062      	str	r2, [r4, #4]
   1179c:	50e3      	str	r3, [r4, r3]
   1179e:	e7c7      	b.n	11730 <_free_r+0x94>
   117a0:	441f      	add	r7, r3
   117a2:	07cb      	lsls	r3, r1, #31
   117a4:	d407      	bmi.n	117b6 <_free_r+0x11a>
   117a6:	f855 3c08 	ldr.w	r3, [r5, #-8]
   117aa:	1ae4      	subs	r4, r4, r3
   117ac:	441f      	add	r7, r3
   117ae:	68a2      	ldr	r2, [r4, #8]
   117b0:	68e3      	ldr	r3, [r4, #12]
   117b2:	60d3      	str	r3, [r2, #12]
   117b4:	609a      	str	r2, [r3, #8]
   117b6:	4b1e      	ldr	r3, [pc, #120]	; (11830 <_free_r+0x194>)
   117b8:	681b      	ldr	r3, [r3, #0]
   117ba:	f047 0201 	orr.w	r2, r7, #1
   117be:	429f      	cmp	r7, r3
   117c0:	6062      	str	r2, [r4, #4]
   117c2:	f8cc 4008 	str.w	r4, [ip, #8]
   117c6:	d3b3      	bcc.n	11730 <_free_r+0x94>
   117c8:	4b1a      	ldr	r3, [pc, #104]	; (11834 <_free_r+0x198>)
   117ca:	4630      	mov	r0, r6
   117cc:	6819      	ldr	r1, [r3, #0]
   117ce:	f7ff ff17 	bl	11600 <_malloc_trim_r>
   117d2:	e7ad      	b.n	11730 <_free_r+0x94>
   117d4:	2101      	movs	r1, #1
   117d6:	e77e      	b.n	116d6 <_free_r+0x3a>
   117d8:	2a14      	cmp	r2, #20
   117da:	d80c      	bhi.n	117f6 <_free_r+0x15a>
   117dc:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   117e0:	0041      	lsls	r1, r0, #1
   117e2:	e791      	b.n	11708 <_free_r+0x6c>
   117e4:	684b      	ldr	r3, [r1, #4]
   117e6:	1080      	asrs	r0, r0, #2
   117e8:	2501      	movs	r5, #1
   117ea:	fa05 f000 	lsl.w	r0, r5, r0
   117ee:	4303      	orrs	r3, r0
   117f0:	604b      	str	r3, [r1, #4]
   117f2:	4613      	mov	r3, r2
   117f4:	e798      	b.n	11728 <_free_r+0x8c>
   117f6:	2a54      	cmp	r2, #84	; 0x54
   117f8:	d803      	bhi.n	11802 <_free_r+0x166>
   117fa:	0b18      	lsrs	r0, r3, #12
   117fc:	306e      	adds	r0, #110	; 0x6e
   117fe:	0041      	lsls	r1, r0, #1
   11800:	e782      	b.n	11708 <_free_r+0x6c>
   11802:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   11806:	d803      	bhi.n	11810 <_free_r+0x174>
   11808:	0bd8      	lsrs	r0, r3, #15
   1180a:	3077      	adds	r0, #119	; 0x77
   1180c:	0041      	lsls	r1, r0, #1
   1180e:	e77b      	b.n	11708 <_free_r+0x6c>
   11810:	f240 5154 	movw	r1, #1364	; 0x554
   11814:	428a      	cmp	r2, r1
   11816:	d803      	bhi.n	11820 <_free_r+0x184>
   11818:	0c98      	lsrs	r0, r3, #18
   1181a:	307c      	adds	r0, #124	; 0x7c
   1181c:	0041      	lsls	r1, r0, #1
   1181e:	e773      	b.n	11708 <_free_r+0x6c>
   11820:	21fc      	movs	r1, #252	; 0xfc
   11822:	207e      	movs	r0, #126	; 0x7e
   11824:	e770      	b.n	11708 <_free_r+0x6c>
   11826:	bf00      	nop
   11828:	1fff88f4 	.word	0x1fff88f4
   1182c:	1fff88fc 	.word	0x1fff88fc
   11830:	1fff8cfc 	.word	0x1fff8cfc
   11834:	1fff9c54 	.word	0x1fff9c54

00011838 <_fwalk>:
   11838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1183c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   11840:	4688      	mov	r8, r1
   11842:	d01a      	beq.n	1187a <_fwalk+0x42>
   11844:	2600      	movs	r6, #0
   11846:	687d      	ldr	r5, [r7, #4]
   11848:	68bc      	ldr	r4, [r7, #8]
   1184a:	3d01      	subs	r5, #1
   1184c:	d40f      	bmi.n	1186e <_fwalk+0x36>
   1184e:	89a3      	ldrh	r3, [r4, #12]
   11850:	2b01      	cmp	r3, #1
   11852:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   11856:	d906      	bls.n	11866 <_fwalk+0x2e>
   11858:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   1185c:	3301      	adds	r3, #1
   1185e:	4620      	mov	r0, r4
   11860:	d001      	beq.n	11866 <_fwalk+0x2e>
   11862:	47c0      	blx	r8
   11864:	4306      	orrs	r6, r0
   11866:	1c6b      	adds	r3, r5, #1
   11868:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1186c:	d1ef      	bne.n	1184e <_fwalk+0x16>
   1186e:	683f      	ldr	r7, [r7, #0]
   11870:	2f00      	cmp	r7, #0
   11872:	d1e8      	bne.n	11846 <_fwalk+0xe>
   11874:	4630      	mov	r0, r6
   11876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1187a:	463e      	mov	r6, r7
   1187c:	4630      	mov	r0, r6
   1187e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11882:	bf00      	nop

00011884 <_localeconv_r>:
   11884:	4800      	ldr	r0, [pc, #0]	; (11888 <_localeconv_r+0x4>)
   11886:	4770      	bx	lr
   11888:	1fff8d04 	.word	0x1fff8d04

0001188c <__smakebuf_r>:
   1188c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1188e:	898b      	ldrh	r3, [r1, #12]
   11890:	b29a      	uxth	r2, r3
   11892:	0796      	lsls	r6, r2, #30
   11894:	b091      	sub	sp, #68	; 0x44
   11896:	460c      	mov	r4, r1
   11898:	4605      	mov	r5, r0
   1189a:	d437      	bmi.n	1190c <__smakebuf_r+0x80>
   1189c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   118a0:	2900      	cmp	r1, #0
   118a2:	db17      	blt.n	118d4 <__smakebuf_r+0x48>
   118a4:	aa01      	add	r2, sp, #4
   118a6:	f000 fce7 	bl	12278 <_fstat_r>
   118aa:	2800      	cmp	r0, #0
   118ac:	db10      	blt.n	118d0 <__smakebuf_r+0x44>
   118ae:	9b02      	ldr	r3, [sp, #8]
   118b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   118b4:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   118b8:	424f      	negs	r7, r1
   118ba:	414f      	adcs	r7, r1
   118bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   118c0:	d02c      	beq.n	1191c <__smakebuf_r+0x90>
   118c2:	89a3      	ldrh	r3, [r4, #12]
   118c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   118c8:	81a3      	strh	r3, [r4, #12]
   118ca:	f44f 6680 	mov.w	r6, #1024	; 0x400
   118ce:	e00b      	b.n	118e8 <__smakebuf_r+0x5c>
   118d0:	89a3      	ldrh	r3, [r4, #12]
   118d2:	b29a      	uxth	r2, r3
   118d4:	f012 0f80 	tst.w	r2, #128	; 0x80
   118d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   118dc:	81a3      	strh	r3, [r4, #12]
   118de:	bf14      	ite	ne
   118e0:	2640      	movne	r6, #64	; 0x40
   118e2:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   118e6:	2700      	movs	r7, #0
   118e8:	4628      	mov	r0, r5
   118ea:	4631      	mov	r1, r6
   118ec:	f7fc f938 	bl	db60 <_malloc_r>
   118f0:	89a3      	ldrh	r3, [r4, #12]
   118f2:	2800      	cmp	r0, #0
   118f4:	d029      	beq.n	1194a <__smakebuf_r+0xbe>
   118f6:	4a1b      	ldr	r2, [pc, #108]	; (11964 <__smakebuf_r+0xd8>)
   118f8:	63ea      	str	r2, [r5, #60]	; 0x3c
   118fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   118fe:	81a3      	strh	r3, [r4, #12]
   11900:	6020      	str	r0, [r4, #0]
   11902:	6120      	str	r0, [r4, #16]
   11904:	6166      	str	r6, [r4, #20]
   11906:	b9a7      	cbnz	r7, 11932 <__smakebuf_r+0xa6>
   11908:	b011      	add	sp, #68	; 0x44
   1190a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1190c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   11910:	2201      	movs	r2, #1
   11912:	600b      	str	r3, [r1, #0]
   11914:	610b      	str	r3, [r1, #16]
   11916:	614a      	str	r2, [r1, #20]
   11918:	b011      	add	sp, #68	; 0x44
   1191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1191c:	4a12      	ldr	r2, [pc, #72]	; (11968 <__smakebuf_r+0xdc>)
   1191e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11920:	4293      	cmp	r3, r2
   11922:	d1ce      	bne.n	118c2 <__smakebuf_r+0x36>
   11924:	89a3      	ldrh	r3, [r4, #12]
   11926:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1192a:	4333      	orrs	r3, r6
   1192c:	81a3      	strh	r3, [r4, #12]
   1192e:	64e6      	str	r6, [r4, #76]	; 0x4c
   11930:	e7da      	b.n	118e8 <__smakebuf_r+0x5c>
   11932:	4628      	mov	r0, r5
   11934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11938:	f000 fcb2 	bl	122a0 <_isatty_r>
   1193c:	2800      	cmp	r0, #0
   1193e:	d0e3      	beq.n	11908 <__smakebuf_r+0x7c>
   11940:	89a3      	ldrh	r3, [r4, #12]
   11942:	f043 0301 	orr.w	r3, r3, #1
   11946:	81a3      	strh	r3, [r4, #12]
   11948:	e7de      	b.n	11908 <__smakebuf_r+0x7c>
   1194a:	059a      	lsls	r2, r3, #22
   1194c:	d4dc      	bmi.n	11908 <__smakebuf_r+0x7c>
   1194e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   11952:	f043 0302 	orr.w	r3, r3, #2
   11956:	2101      	movs	r1, #1
   11958:	81a3      	strh	r3, [r4, #12]
   1195a:	6022      	str	r2, [r4, #0]
   1195c:	6122      	str	r2, [r4, #16]
   1195e:	6161      	str	r1, [r4, #20]
   11960:	e7d2      	b.n	11908 <__smakebuf_r+0x7c>
   11962:	bf00      	nop
   11964:	000114c9 	.word	0x000114c9
   11968:	00011fdd 	.word	0x00011fdd

0001196c <_Balloc>:
   1196c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   1196e:	b570      	push	{r4, r5, r6, lr}
   11970:	4605      	mov	r5, r0
   11972:	460c      	mov	r4, r1
   11974:	b14a      	cbz	r2, 1198a <_Balloc+0x1e>
   11976:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   1197a:	b180      	cbz	r0, 1199e <_Balloc+0x32>
   1197c:	6801      	ldr	r1, [r0, #0]
   1197e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   11982:	2200      	movs	r2, #0
   11984:	6102      	str	r2, [r0, #16]
   11986:	60c2      	str	r2, [r0, #12]
   11988:	bd70      	pop	{r4, r5, r6, pc}
   1198a:	2221      	movs	r2, #33	; 0x21
   1198c:	2104      	movs	r1, #4
   1198e:	f000 fbe9 	bl	12164 <_calloc_r>
   11992:	64e8      	str	r0, [r5, #76]	; 0x4c
   11994:	4602      	mov	r2, r0
   11996:	2800      	cmp	r0, #0
   11998:	d1ed      	bne.n	11976 <_Balloc+0xa>
   1199a:	2000      	movs	r0, #0
   1199c:	bd70      	pop	{r4, r5, r6, pc}
   1199e:	2101      	movs	r1, #1
   119a0:	fa01 f604 	lsl.w	r6, r1, r4
   119a4:	1d72      	adds	r2, r6, #5
   119a6:	4628      	mov	r0, r5
   119a8:	0092      	lsls	r2, r2, #2
   119aa:	f000 fbdb 	bl	12164 <_calloc_r>
   119ae:	2800      	cmp	r0, #0
   119b0:	d0f3      	beq.n	1199a <_Balloc+0x2e>
   119b2:	6044      	str	r4, [r0, #4]
   119b4:	6086      	str	r6, [r0, #8]
   119b6:	e7e4      	b.n	11982 <_Balloc+0x16>

000119b8 <_Bfree>:
   119b8:	b131      	cbz	r1, 119c8 <_Bfree+0x10>
   119ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   119bc:	684a      	ldr	r2, [r1, #4]
   119be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   119c2:	6008      	str	r0, [r1, #0]
   119c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   119c8:	4770      	bx	lr
   119ca:	bf00      	nop

000119cc <__multadd>:
   119cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   119d0:	f8d1 8010 	ldr.w	r8, [r1, #16]
   119d4:	b082      	sub	sp, #8
   119d6:	4689      	mov	r9, r1
   119d8:	4682      	mov	sl, r0
   119da:	f101 0514 	add.w	r5, r1, #20
   119de:	2400      	movs	r4, #0
   119e0:	682f      	ldr	r7, [r5, #0]
   119e2:	b2be      	uxth	r6, r7
   119e4:	0c3f      	lsrs	r7, r7, #16
   119e6:	fb02 3606 	mla	r6, r2, r6, r3
   119ea:	fb02 f307 	mul.w	r3, r2, r7
   119ee:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   119f2:	3401      	adds	r4, #1
   119f4:	b2b6      	uxth	r6, r6
   119f6:	eb06 4603 	add.w	r6, r6, r3, lsl #16
   119fa:	45a0      	cmp	r8, r4
   119fc:	f845 6b04 	str.w	r6, [r5], #4
   11a00:	ea4f 4313 	mov.w	r3, r3, lsr #16
   11a04:	dcec      	bgt.n	119e0 <__multadd+0x14>
   11a06:	b153      	cbz	r3, 11a1e <__multadd+0x52>
   11a08:	f8d9 2008 	ldr.w	r2, [r9, #8]
   11a0c:	4590      	cmp	r8, r2
   11a0e:	da0a      	bge.n	11a26 <__multadd+0x5a>
   11a10:	eb09 0188 	add.w	r1, r9, r8, lsl #2
   11a14:	f108 0201 	add.w	r2, r8, #1
   11a18:	614b      	str	r3, [r1, #20]
   11a1a:	f8c9 2010 	str.w	r2, [r9, #16]
   11a1e:	4648      	mov	r0, r9
   11a20:	b002      	add	sp, #8
   11a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11a26:	f8d9 1004 	ldr.w	r1, [r9, #4]
   11a2a:	9301      	str	r3, [sp, #4]
   11a2c:	3101      	adds	r1, #1
   11a2e:	4650      	mov	r0, sl
   11a30:	f7ff ff9c 	bl	1196c <_Balloc>
   11a34:	f8d9 2010 	ldr.w	r2, [r9, #16]
   11a38:	3202      	adds	r2, #2
   11a3a:	f109 010c 	add.w	r1, r9, #12
   11a3e:	4604      	mov	r4, r0
   11a40:	0092      	lsls	r2, r2, #2
   11a42:	300c      	adds	r0, #12
   11a44:	f7fc fba4 	bl	e190 <memcpy>
   11a48:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
   11a4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   11a50:	9b01      	ldr	r3, [sp, #4]
   11a52:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   11a56:	f8c9 0000 	str.w	r0, [r9]
   11a5a:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
   11a5e:	46a1      	mov	r9, r4
   11a60:	e7d6      	b.n	11a10 <__multadd+0x44>
   11a62:	bf00      	nop

00011a64 <__hi0bits>:
   11a64:	0c03      	lsrs	r3, r0, #16
   11a66:	041b      	lsls	r3, r3, #16
   11a68:	b9b3      	cbnz	r3, 11a98 <__hi0bits+0x34>
   11a6a:	0400      	lsls	r0, r0, #16
   11a6c:	2310      	movs	r3, #16
   11a6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   11a72:	bf04      	itt	eq
   11a74:	0200      	lsleq	r0, r0, #8
   11a76:	3308      	addeq	r3, #8
   11a78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   11a7c:	bf04      	itt	eq
   11a7e:	0100      	lsleq	r0, r0, #4
   11a80:	3304      	addeq	r3, #4
   11a82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   11a86:	bf04      	itt	eq
   11a88:	0080      	lsleq	r0, r0, #2
   11a8a:	3302      	addeq	r3, #2
   11a8c:	2800      	cmp	r0, #0
   11a8e:	db07      	blt.n	11aa0 <__hi0bits+0x3c>
   11a90:	0042      	lsls	r2, r0, #1
   11a92:	d403      	bmi.n	11a9c <__hi0bits+0x38>
   11a94:	2020      	movs	r0, #32
   11a96:	4770      	bx	lr
   11a98:	2300      	movs	r3, #0
   11a9a:	e7e8      	b.n	11a6e <__hi0bits+0xa>
   11a9c:	1c58      	adds	r0, r3, #1
   11a9e:	4770      	bx	lr
   11aa0:	4618      	mov	r0, r3
   11aa2:	4770      	bx	lr

00011aa4 <__lo0bits>:
   11aa4:	6803      	ldr	r3, [r0, #0]
   11aa6:	f013 0207 	ands.w	r2, r3, #7
   11aaa:	d007      	beq.n	11abc <__lo0bits+0x18>
   11aac:	07d9      	lsls	r1, r3, #31
   11aae:	d420      	bmi.n	11af2 <__lo0bits+0x4e>
   11ab0:	079a      	lsls	r2, r3, #30
   11ab2:	d420      	bmi.n	11af6 <__lo0bits+0x52>
   11ab4:	089b      	lsrs	r3, r3, #2
   11ab6:	6003      	str	r3, [r0, #0]
   11ab8:	2002      	movs	r0, #2
   11aba:	4770      	bx	lr
   11abc:	b299      	uxth	r1, r3
   11abe:	b909      	cbnz	r1, 11ac4 <__lo0bits+0x20>
   11ac0:	0c1b      	lsrs	r3, r3, #16
   11ac2:	2210      	movs	r2, #16
   11ac4:	f013 0fff 	tst.w	r3, #255	; 0xff
   11ac8:	bf04      	itt	eq
   11aca:	0a1b      	lsreq	r3, r3, #8
   11acc:	3208      	addeq	r2, #8
   11ace:	0719      	lsls	r1, r3, #28
   11ad0:	bf04      	itt	eq
   11ad2:	091b      	lsreq	r3, r3, #4
   11ad4:	3204      	addeq	r2, #4
   11ad6:	0799      	lsls	r1, r3, #30
   11ad8:	bf04      	itt	eq
   11ada:	089b      	lsreq	r3, r3, #2
   11adc:	3202      	addeq	r2, #2
   11ade:	07d9      	lsls	r1, r3, #31
   11ae0:	d404      	bmi.n	11aec <__lo0bits+0x48>
   11ae2:	085b      	lsrs	r3, r3, #1
   11ae4:	d101      	bne.n	11aea <__lo0bits+0x46>
   11ae6:	2020      	movs	r0, #32
   11ae8:	4770      	bx	lr
   11aea:	3201      	adds	r2, #1
   11aec:	6003      	str	r3, [r0, #0]
   11aee:	4610      	mov	r0, r2
   11af0:	4770      	bx	lr
   11af2:	2000      	movs	r0, #0
   11af4:	4770      	bx	lr
   11af6:	085b      	lsrs	r3, r3, #1
   11af8:	6003      	str	r3, [r0, #0]
   11afa:	2001      	movs	r0, #1
   11afc:	4770      	bx	lr
   11afe:	bf00      	nop

00011b00 <__i2b>:
   11b00:	b510      	push	{r4, lr}
   11b02:	460c      	mov	r4, r1
   11b04:	2101      	movs	r1, #1
   11b06:	f7ff ff31 	bl	1196c <_Balloc>
   11b0a:	2201      	movs	r2, #1
   11b0c:	6144      	str	r4, [r0, #20]
   11b0e:	6102      	str	r2, [r0, #16]
   11b10:	bd10      	pop	{r4, pc}
   11b12:	bf00      	nop

00011b14 <__multiply>:
   11b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b18:	690d      	ldr	r5, [r1, #16]
   11b1a:	f8d2 9010 	ldr.w	r9, [r2, #16]
   11b1e:	454d      	cmp	r5, r9
   11b20:	b085      	sub	sp, #20
   11b22:	460c      	mov	r4, r1
   11b24:	4692      	mov	sl, r2
   11b26:	da04      	bge.n	11b32 <__multiply+0x1e>
   11b28:	462a      	mov	r2, r5
   11b2a:	4654      	mov	r4, sl
   11b2c:	464d      	mov	r5, r9
   11b2e:	468a      	mov	sl, r1
   11b30:	4691      	mov	r9, r2
   11b32:	68a3      	ldr	r3, [r4, #8]
   11b34:	6861      	ldr	r1, [r4, #4]
   11b36:	eb05 0709 	add.w	r7, r5, r9
   11b3a:	429f      	cmp	r7, r3
   11b3c:	bfc8      	it	gt
   11b3e:	3101      	addgt	r1, #1
   11b40:	f7ff ff14 	bl	1196c <_Balloc>
   11b44:	f100 0614 	add.w	r6, r0, #20
   11b48:	eb06 0887 	add.w	r8, r6, r7, lsl #2
   11b4c:	4546      	cmp	r6, r8
   11b4e:	9001      	str	r0, [sp, #4]
   11b50:	d205      	bcs.n	11b5e <__multiply+0x4a>
   11b52:	4633      	mov	r3, r6
   11b54:	2000      	movs	r0, #0
   11b56:	f843 0b04 	str.w	r0, [r3], #4
   11b5a:	4598      	cmp	r8, r3
   11b5c:	d8fb      	bhi.n	11b56 <__multiply+0x42>
   11b5e:	f10a 0c14 	add.w	ip, sl, #20
   11b62:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
   11b66:	3414      	adds	r4, #20
   11b68:	45cc      	cmp	ip, r9
   11b6a:	9400      	str	r4, [sp, #0]
   11b6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   11b70:	d25b      	bcs.n	11c2a <__multiply+0x116>
   11b72:	f8cd 8008 	str.w	r8, [sp, #8]
   11b76:	9703      	str	r7, [sp, #12]
   11b78:	46c8      	mov	r8, r9
   11b7a:	f85c 3b04 	ldr.w	r3, [ip], #4
   11b7e:	b29c      	uxth	r4, r3
   11b80:	b324      	cbz	r4, 11bcc <__multiply+0xb8>
   11b82:	9a00      	ldr	r2, [sp, #0]
   11b84:	4633      	mov	r3, r6
   11b86:	f04f 0900 	mov.w	r9, #0
   11b8a:	e000      	b.n	11b8e <__multiply+0x7a>
   11b8c:	460b      	mov	r3, r1
   11b8e:	f852 7b04 	ldr.w	r7, [r2], #4
   11b92:	6819      	ldr	r1, [r3, #0]
   11b94:	fa1f fb87 	uxth.w	fp, r7
   11b98:	fa1f fa81 	uxth.w	sl, r1
   11b9c:	0c38      	lsrs	r0, r7, #16
   11b9e:	0c09      	lsrs	r1, r1, #16
   11ba0:	fb04 a70b 	mla	r7, r4, fp, sl
   11ba4:	44b9      	add	r9, r7
   11ba6:	fb04 1000 	mla	r0, r4, r0, r1
   11baa:	eb00 4019 	add.w	r0, r0, r9, lsr #16
   11bae:	4619      	mov	r1, r3
   11bb0:	fa1f f989 	uxth.w	r9, r9
   11bb4:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
   11bb8:	4295      	cmp	r5, r2
   11bba:	ea4f 4910 	mov.w	r9, r0, lsr #16
   11bbe:	f841 7b04 	str.w	r7, [r1], #4
   11bc2:	d8e3      	bhi.n	11b8c <__multiply+0x78>
   11bc4:	f8c3 9004 	str.w	r9, [r3, #4]
   11bc8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
   11bcc:	ea5f 4913 	movs.w	r9, r3, lsr #16
   11bd0:	d024      	beq.n	11c1c <__multiply+0x108>
   11bd2:	f8d6 a000 	ldr.w	sl, [r6]
   11bd6:	9b00      	ldr	r3, [sp, #0]
   11bd8:	4650      	mov	r0, sl
   11bda:	4631      	mov	r1, r6
   11bdc:	f04f 0b00 	mov.w	fp, #0
   11be0:	e000      	b.n	11be4 <__multiply+0xd0>
   11be2:	4611      	mov	r1, r2
   11be4:	881a      	ldrh	r2, [r3, #0]
   11be6:	0c00      	lsrs	r0, r0, #16
   11be8:	fb09 0002 	mla	r0, r9, r2, r0
   11bec:	4483      	add	fp, r0
   11bee:	fa1f fa8a 	uxth.w	sl, sl
   11bf2:	460a      	mov	r2, r1
   11bf4:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
   11bf8:	f842 0b04 	str.w	r0, [r2], #4
   11bfc:	f853 7b04 	ldr.w	r7, [r3], #4
   11c00:	6848      	ldr	r0, [r1, #4]
   11c02:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   11c06:	b284      	uxth	r4, r0
   11c08:	fb09 4a0a 	mla	sl, r9, sl, r4
   11c0c:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
   11c10:	429d      	cmp	r5, r3
   11c12:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
   11c16:	d8e4      	bhi.n	11be2 <__multiply+0xce>
   11c18:	f8c1 a004 	str.w	sl, [r1, #4]
   11c1c:	45e0      	cmp	r8, ip
   11c1e:	f106 0604 	add.w	r6, r6, #4
   11c22:	d8aa      	bhi.n	11b7a <__multiply+0x66>
   11c24:	f8dd 8008 	ldr.w	r8, [sp, #8]
   11c28:	9f03      	ldr	r7, [sp, #12]
   11c2a:	2f00      	cmp	r7, #0
   11c2c:	dd0a      	ble.n	11c44 <__multiply+0x130>
   11c2e:	f858 3c04 	ldr.w	r3, [r8, #-4]
   11c32:	f1a8 0804 	sub.w	r8, r8, #4
   11c36:	b11b      	cbz	r3, 11c40 <__multiply+0x12c>
   11c38:	e004      	b.n	11c44 <__multiply+0x130>
   11c3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   11c3e:	b90b      	cbnz	r3, 11c44 <__multiply+0x130>
   11c40:	3f01      	subs	r7, #1
   11c42:	d1fa      	bne.n	11c3a <__multiply+0x126>
   11c44:	9b01      	ldr	r3, [sp, #4]
   11c46:	4618      	mov	r0, r3
   11c48:	611f      	str	r7, [r3, #16]
   11c4a:	b005      	add	sp, #20
   11c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011c50 <__pow5mult>:
   11c50:	f012 0303 	ands.w	r3, r2, #3
   11c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c58:	4614      	mov	r4, r2
   11c5a:	4607      	mov	r7, r0
   11c5c:	460e      	mov	r6, r1
   11c5e:	d12c      	bne.n	11cba <__pow5mult+0x6a>
   11c60:	10a4      	asrs	r4, r4, #2
   11c62:	d01c      	beq.n	11c9e <__pow5mult+0x4e>
   11c64:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   11c66:	2d00      	cmp	r5, #0
   11c68:	d030      	beq.n	11ccc <__pow5mult+0x7c>
   11c6a:	f04f 0800 	mov.w	r8, #0
   11c6e:	e004      	b.n	11c7a <__pow5mult+0x2a>
   11c70:	1064      	asrs	r4, r4, #1
   11c72:	d014      	beq.n	11c9e <__pow5mult+0x4e>
   11c74:	6828      	ldr	r0, [r5, #0]
   11c76:	b1a8      	cbz	r0, 11ca4 <__pow5mult+0x54>
   11c78:	4605      	mov	r5, r0
   11c7a:	07e3      	lsls	r3, r4, #31
   11c7c:	d5f8      	bpl.n	11c70 <__pow5mult+0x20>
   11c7e:	4638      	mov	r0, r7
   11c80:	4631      	mov	r1, r6
   11c82:	462a      	mov	r2, r5
   11c84:	f7ff ff46 	bl	11b14 <__multiply>
   11c88:	b1ae      	cbz	r6, 11cb6 <__pow5mult+0x66>
   11c8a:	6872      	ldr	r2, [r6, #4]
   11c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11c8e:	1064      	asrs	r4, r4, #1
   11c90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11c94:	6031      	str	r1, [r6, #0]
   11c96:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   11c9a:	4606      	mov	r6, r0
   11c9c:	d1ea      	bne.n	11c74 <__pow5mult+0x24>
   11c9e:	4630      	mov	r0, r6
   11ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ca4:	4638      	mov	r0, r7
   11ca6:	4629      	mov	r1, r5
   11ca8:	462a      	mov	r2, r5
   11caa:	f7ff ff33 	bl	11b14 <__multiply>
   11cae:	6028      	str	r0, [r5, #0]
   11cb0:	f8c0 8000 	str.w	r8, [r0]
   11cb4:	e7e0      	b.n	11c78 <__pow5mult+0x28>
   11cb6:	4606      	mov	r6, r0
   11cb8:	e7da      	b.n	11c70 <__pow5mult+0x20>
   11cba:	1e5d      	subs	r5, r3, #1
   11cbc:	4a0a      	ldr	r2, [pc, #40]	; (11ce8 <__pow5mult+0x98>)
   11cbe:	2300      	movs	r3, #0
   11cc0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   11cc4:	f7ff fe82 	bl	119cc <__multadd>
   11cc8:	4606      	mov	r6, r0
   11cca:	e7c9      	b.n	11c60 <__pow5mult+0x10>
   11ccc:	2101      	movs	r1, #1
   11cce:	4638      	mov	r0, r7
   11cd0:	f7ff fe4c 	bl	1196c <_Balloc>
   11cd4:	f240 2171 	movw	r1, #625	; 0x271
   11cd8:	2201      	movs	r2, #1
   11cda:	2300      	movs	r3, #0
   11cdc:	6141      	str	r1, [r0, #20]
   11cde:	6102      	str	r2, [r0, #16]
   11ce0:	4605      	mov	r5, r0
   11ce2:	64b8      	str	r0, [r7, #72]	; 0x48
   11ce4:	6003      	str	r3, [r0, #0]
   11ce6:	e7c0      	b.n	11c6a <__pow5mult+0x1a>
   11ce8:	000142d0 	.word	0x000142d0

00011cec <__lshift>:
   11cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf0:	4693      	mov	fp, r2
   11cf2:	690a      	ldr	r2, [r1, #16]
   11cf4:	688b      	ldr	r3, [r1, #8]
   11cf6:	ea4f 1a6b 	mov.w	sl, fp, asr #5
   11cfa:	eb0a 0902 	add.w	r9, sl, r2
   11cfe:	f109 0601 	add.w	r6, r9, #1
   11d02:	429e      	cmp	r6, r3
   11d04:	460f      	mov	r7, r1
   11d06:	4680      	mov	r8, r0
   11d08:	6849      	ldr	r1, [r1, #4]
   11d0a:	dd04      	ble.n	11d16 <__lshift+0x2a>
   11d0c:	005b      	lsls	r3, r3, #1
   11d0e:	429e      	cmp	r6, r3
   11d10:	f101 0101 	add.w	r1, r1, #1
   11d14:	dcfa      	bgt.n	11d0c <__lshift+0x20>
   11d16:	4640      	mov	r0, r8
   11d18:	f7ff fe28 	bl	1196c <_Balloc>
   11d1c:	f1ba 0f00 	cmp.w	sl, #0
   11d20:	f100 0414 	add.w	r4, r0, #20
   11d24:	dd09      	ble.n	11d3a <__lshift+0x4e>
   11d26:	2300      	movs	r3, #0
   11d28:	461a      	mov	r2, r3
   11d2a:	4625      	mov	r5, r4
   11d2c:	3301      	adds	r3, #1
   11d2e:	4553      	cmp	r3, sl
   11d30:	f845 2b04 	str.w	r2, [r5], #4
   11d34:	d1fa      	bne.n	11d2c <__lshift+0x40>
   11d36:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   11d3a:	693a      	ldr	r2, [r7, #16]
   11d3c:	f107 0314 	add.w	r3, r7, #20
   11d40:	f01b 0b1f 	ands.w	fp, fp, #31
   11d44:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   11d48:	d021      	beq.n	11d8e <__lshift+0xa2>
   11d4a:	f1cb 0a20 	rsb	sl, fp, #32
   11d4e:	2200      	movs	r2, #0
   11d50:	e000      	b.n	11d54 <__lshift+0x68>
   11d52:	462c      	mov	r4, r5
   11d54:	6819      	ldr	r1, [r3, #0]
   11d56:	4625      	mov	r5, r4
   11d58:	fa01 f10b 	lsl.w	r1, r1, fp
   11d5c:	430a      	orrs	r2, r1
   11d5e:	f845 2b04 	str.w	r2, [r5], #4
   11d62:	f853 2b04 	ldr.w	r2, [r3], #4
   11d66:	4563      	cmp	r3, ip
   11d68:	fa22 f20a 	lsr.w	r2, r2, sl
   11d6c:	d3f1      	bcc.n	11d52 <__lshift+0x66>
   11d6e:	6062      	str	r2, [r4, #4]
   11d70:	b10a      	cbz	r2, 11d76 <__lshift+0x8a>
   11d72:	f109 0602 	add.w	r6, r9, #2
   11d76:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   11d7a:	687a      	ldr	r2, [r7, #4]
   11d7c:	3e01      	subs	r6, #1
   11d7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11d82:	6106      	str	r6, [r0, #16]
   11d84:	6039      	str	r1, [r7, #0]
   11d86:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11d8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d8e:	f853 2b04 	ldr.w	r2, [r3], #4
   11d92:	f844 2b04 	str.w	r2, [r4], #4
   11d96:	459c      	cmp	ip, r3
   11d98:	d9ed      	bls.n	11d76 <__lshift+0x8a>
   11d9a:	f853 2b04 	ldr.w	r2, [r3], #4
   11d9e:	f844 2b04 	str.w	r2, [r4], #4
   11da2:	459c      	cmp	ip, r3
   11da4:	d8f3      	bhi.n	11d8e <__lshift+0xa2>
   11da6:	e7e6      	b.n	11d76 <__lshift+0x8a>

00011da8 <__mcmp>:
   11da8:	6902      	ldr	r2, [r0, #16]
   11daa:	690b      	ldr	r3, [r1, #16]
   11dac:	1ad2      	subs	r2, r2, r3
   11dae:	b410      	push	{r4}
   11db0:	d115      	bne.n	11dde <__mcmp+0x36>
   11db2:	009b      	lsls	r3, r3, #2
   11db4:	3014      	adds	r0, #20
   11db6:	3114      	adds	r1, #20
   11db8:	4419      	add	r1, r3
   11dba:	4403      	add	r3, r0
   11dbc:	e001      	b.n	11dc2 <__mcmp+0x1a>
   11dbe:	4298      	cmp	r0, r3
   11dc0:	d211      	bcs.n	11de6 <__mcmp+0x3e>
   11dc2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   11dc6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   11dca:	42a2      	cmp	r2, r4
   11dcc:	d0f7      	beq.n	11dbe <__mcmp+0x16>
   11dce:	4294      	cmp	r4, r2
   11dd0:	bf94      	ite	ls
   11dd2:	2001      	movls	r0, #1
   11dd4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   11dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
   11ddc:	4770      	bx	lr
   11dde:	4610      	mov	r0, r2
   11de0:	f85d 4b04 	ldr.w	r4, [sp], #4
   11de4:	4770      	bx	lr
   11de6:	2000      	movs	r0, #0
   11de8:	f85d 4b04 	ldr.w	r4, [sp], #4
   11dec:	4770      	bx	lr
   11dee:	bf00      	nop

00011df0 <__mdiff>:
   11df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11df4:	460d      	mov	r5, r1
   11df6:	4604      	mov	r4, r0
   11df8:	4611      	mov	r1, r2
   11dfa:	4628      	mov	r0, r5
   11dfc:	4616      	mov	r6, r2
   11dfe:	f7ff ffd3 	bl	11da8 <__mcmp>
   11e02:	1e07      	subs	r7, r0, #0
   11e04:	d055      	beq.n	11eb2 <__mdiff+0xc2>
   11e06:	db4e      	blt.n	11ea6 <__mdiff+0xb6>
   11e08:	f04f 0800 	mov.w	r8, #0
   11e0c:	6869      	ldr	r1, [r5, #4]
   11e0e:	4620      	mov	r0, r4
   11e10:	f7ff fdac 	bl	1196c <_Balloc>
   11e14:	692f      	ldr	r7, [r5, #16]
   11e16:	6932      	ldr	r2, [r6, #16]
   11e18:	f8c0 800c 	str.w	r8, [r0, #12]
   11e1c:	3514      	adds	r5, #20
   11e1e:	3614      	adds	r6, #20
   11e20:	f100 0314 	add.w	r3, r0, #20
   11e24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   11e28:	eb06 0882 	add.w	r8, r6, r2, lsl #2
   11e2c:	2100      	movs	r1, #0
   11e2e:	f856 2b04 	ldr.w	r2, [r6], #4
   11e32:	f855 4b04 	ldr.w	r4, [r5], #4
   11e36:	fa1f f982 	uxth.w	r9, r2
   11e3a:	fa11 fa84 	uxtah	sl, r1, r4
   11e3e:	0c11      	lsrs	r1, r2, #16
   11e40:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
   11e44:	ebc9 020a 	rsb	r2, r9, sl
   11e48:	eb01 4122 	add.w	r1, r1, r2, asr #16
   11e4c:	b292      	uxth	r2, r2
   11e4e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   11e52:	45b0      	cmp	r8, r6
   11e54:	f843 2b04 	str.w	r2, [r3], #4
   11e58:	ea4f 4121 	mov.w	r1, r1, asr #16
   11e5c:	462c      	mov	r4, r5
   11e5e:	d8e6      	bhi.n	11e2e <__mdiff+0x3e>
   11e60:	45ac      	cmp	ip, r5
   11e62:	4698      	mov	r8, r3
   11e64:	d915      	bls.n	11e92 <__mdiff+0xa2>
   11e66:	f854 6b04 	ldr.w	r6, [r4], #4
   11e6a:	fa11 f186 	uxtah	r1, r1, r6
   11e6e:	0c36      	lsrs	r6, r6, #16
   11e70:	eb06 4621 	add.w	r6, r6, r1, asr #16
   11e74:	b289      	uxth	r1, r1
   11e76:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   11e7a:	45a4      	cmp	ip, r4
   11e7c:	f843 2b04 	str.w	r2, [r3], #4
   11e80:	ea4f 4126 	mov.w	r1, r6, asr #16
   11e84:	d8ef      	bhi.n	11e66 <__mdiff+0x76>
   11e86:	43eb      	mvns	r3, r5
   11e88:	4463      	add	r3, ip
   11e8a:	f023 0303 	bic.w	r3, r3, #3
   11e8e:	3304      	adds	r3, #4
   11e90:	4443      	add	r3, r8
   11e92:	3b04      	subs	r3, #4
   11e94:	b922      	cbnz	r2, 11ea0 <__mdiff+0xb0>
   11e96:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   11e9a:	3f01      	subs	r7, #1
   11e9c:	2a00      	cmp	r2, #0
   11e9e:	d0fa      	beq.n	11e96 <__mdiff+0xa6>
   11ea0:	6107      	str	r7, [r0, #16]
   11ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11ea6:	462b      	mov	r3, r5
   11ea8:	f04f 0801 	mov.w	r8, #1
   11eac:	4635      	mov	r5, r6
   11eae:	461e      	mov	r6, r3
   11eb0:	e7ac      	b.n	11e0c <__mdiff+0x1c>
   11eb2:	4620      	mov	r0, r4
   11eb4:	4639      	mov	r1, r7
   11eb6:	f7ff fd59 	bl	1196c <_Balloc>
   11eba:	2301      	movs	r3, #1
   11ebc:	6147      	str	r7, [r0, #20]
   11ebe:	6103      	str	r3, [r0, #16]
   11ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00011ec4 <__d2b>:
   11ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11ec8:	b083      	sub	sp, #12
   11eca:	2101      	movs	r1, #1
   11ecc:	461d      	mov	r5, r3
   11ece:	f3c3 560a 	ubfx	r6, r3, #20, #11
   11ed2:	4614      	mov	r4, r2
   11ed4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   11ed6:	f7ff fd49 	bl	1196c <_Balloc>
   11eda:	f3c5 0313 	ubfx	r3, r5, #0, #20
   11ede:	4680      	mov	r8, r0
   11ee0:	b10e      	cbz	r6, 11ee6 <__d2b+0x22>
   11ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11ee6:	9301      	str	r3, [sp, #4]
   11ee8:	b324      	cbz	r4, 11f34 <__d2b+0x70>
   11eea:	a802      	add	r0, sp, #8
   11eec:	f840 4d08 	str.w	r4, [r0, #-8]!
   11ef0:	4668      	mov	r0, sp
   11ef2:	f7ff fdd7 	bl	11aa4 <__lo0bits>
   11ef6:	2800      	cmp	r0, #0
   11ef8:	d135      	bne.n	11f66 <__d2b+0xa2>
   11efa:	e89d 000c 	ldmia.w	sp, {r2, r3}
   11efe:	f8c8 2014 	str.w	r2, [r8, #20]
   11f02:	2b00      	cmp	r3, #0
   11f04:	bf0c      	ite	eq
   11f06:	2401      	moveq	r4, #1
   11f08:	2402      	movne	r4, #2
   11f0a:	f8c8 3018 	str.w	r3, [r8, #24]
   11f0e:	f8c8 4010 	str.w	r4, [r8, #16]
   11f12:	b9de      	cbnz	r6, 11f4c <__d2b+0x88>
   11f14:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   11f18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   11f1c:	6038      	str	r0, [r7, #0]
   11f1e:	6918      	ldr	r0, [r3, #16]
   11f20:	f7ff fda0 	bl	11a64 <__hi0bits>
   11f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11f26:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   11f2a:	6018      	str	r0, [r3, #0]
   11f2c:	4640      	mov	r0, r8
   11f2e:	b003      	add	sp, #12
   11f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11f34:	a801      	add	r0, sp, #4
   11f36:	f7ff fdb5 	bl	11aa4 <__lo0bits>
   11f3a:	2401      	movs	r4, #1
   11f3c:	9b01      	ldr	r3, [sp, #4]
   11f3e:	f8c8 3014 	str.w	r3, [r8, #20]
   11f42:	3020      	adds	r0, #32
   11f44:	f8c8 4010 	str.w	r4, [r8, #16]
   11f48:	2e00      	cmp	r6, #0
   11f4a:	d0e3      	beq.n	11f14 <__d2b+0x50>
   11f4c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
   11f50:	eb09 0300 	add.w	r3, r9, r0
   11f54:	603b      	str	r3, [r7, #0]
   11f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11f58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   11f5c:	6018      	str	r0, [r3, #0]
   11f5e:	4640      	mov	r0, r8
   11f60:	b003      	add	sp, #12
   11f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11f66:	e89d 000c 	ldmia.w	sp, {r2, r3}
   11f6a:	f1c0 0120 	rsb	r1, r0, #32
   11f6e:	fa03 f101 	lsl.w	r1, r3, r1
   11f72:	430a      	orrs	r2, r1
   11f74:	40c3      	lsrs	r3, r0
   11f76:	9301      	str	r3, [sp, #4]
   11f78:	f8c8 2014 	str.w	r2, [r8, #20]
   11f7c:	e7c1      	b.n	11f02 <__d2b+0x3e>
   11f7e:	bf00      	nop

00011f80 <__sread>:
   11f80:	b510      	push	{r4, lr}
   11f82:	460c      	mov	r4, r1
   11f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11f88:	f000 f9b0 	bl	122ec <_read_r>
   11f8c:	2800      	cmp	r0, #0
   11f8e:	db03      	blt.n	11f98 <__sread+0x18>
   11f90:	6d23      	ldr	r3, [r4, #80]	; 0x50
   11f92:	4403      	add	r3, r0
   11f94:	6523      	str	r3, [r4, #80]	; 0x50
   11f96:	bd10      	pop	{r4, pc}
   11f98:	89a3      	ldrh	r3, [r4, #12]
   11f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   11f9e:	81a3      	strh	r3, [r4, #12]
   11fa0:	bd10      	pop	{r4, pc}
   11fa2:	bf00      	nop

00011fa4 <__swrite>:
   11fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fa8:	460c      	mov	r4, r1
   11faa:	8989      	ldrh	r1, [r1, #12]
   11fac:	461d      	mov	r5, r3
   11fae:	05cb      	lsls	r3, r1, #23
   11fb0:	4616      	mov	r6, r2
   11fb2:	4607      	mov	r7, r0
   11fb4:	d506      	bpl.n	11fc4 <__swrite+0x20>
   11fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11fba:	2200      	movs	r2, #0
   11fbc:	2302      	movs	r3, #2
   11fbe:	f000 f981 	bl	122c4 <_lseek_r>
   11fc2:	89a1      	ldrh	r1, [r4, #12]
   11fc4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   11fc8:	81a1      	strh	r1, [r4, #12]
   11fca:	4638      	mov	r0, r7
   11fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11fd0:	4632      	mov	r2, r6
   11fd2:	462b      	mov	r3, r5
   11fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11fd8:	f7fe b928 	b.w	1022c <_write_r>

00011fdc <__sseek>:
   11fdc:	b510      	push	{r4, lr}
   11fde:	460c      	mov	r4, r1
   11fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11fe4:	f000 f96e 	bl	122c4 <_lseek_r>
   11fe8:	89a3      	ldrh	r3, [r4, #12]
   11fea:	1c42      	adds	r2, r0, #1
   11fec:	bf0e      	itee	eq
   11fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   11ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   11ff6:	6520      	strne	r0, [r4, #80]	; 0x50
   11ff8:	81a3      	strh	r3, [r4, #12]
   11ffa:	bd10      	pop	{r4, pc}

00011ffc <__sclose>:
   11ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12000:	f000 b8e0 	b.w	121c4 <_close_r>

00012004 <__ssprint_r>:
   12004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12008:	6894      	ldr	r4, [r2, #8]
   1200a:	6816      	ldr	r6, [r2, #0]
   1200c:	b083      	sub	sp, #12
   1200e:	4692      	mov	sl, r2
   12010:	4680      	mov	r8, r0
   12012:	460d      	mov	r5, r1
   12014:	2c00      	cmp	r4, #0
   12016:	d06f      	beq.n	120f8 <__ssprint_r+0xf4>
   12018:	f04f 0b00 	mov.w	fp, #0
   1201c:	6808      	ldr	r0, [r1, #0]
   1201e:	688b      	ldr	r3, [r1, #8]
   12020:	465c      	mov	r4, fp
   12022:	2c00      	cmp	r4, #0
   12024:	d043      	beq.n	120ae <__ssprint_r+0xaa>
   12026:	429c      	cmp	r4, r3
   12028:	461f      	mov	r7, r3
   1202a:	d345      	bcc.n	120b8 <__ssprint_r+0xb4>
   1202c:	89ab      	ldrh	r3, [r5, #12]
   1202e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   12032:	d044      	beq.n	120be <__ssprint_r+0xba>
   12034:	696f      	ldr	r7, [r5, #20]
   12036:	6929      	ldr	r1, [r5, #16]
   12038:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   1203c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   12040:	ebc1 0900 	rsb	r9, r1, r0
   12044:	1c62      	adds	r2, r4, #1
   12046:	107f      	asrs	r7, r7, #1
   12048:	444a      	add	r2, r9
   1204a:	4297      	cmp	r7, r2
   1204c:	bf34      	ite	cc
   1204e:	4617      	movcc	r7, r2
   12050:	463a      	movcs	r2, r7
   12052:	055b      	lsls	r3, r3, #21
   12054:	d535      	bpl.n	120c2 <__ssprint_r+0xbe>
   12056:	4611      	mov	r1, r2
   12058:	4640      	mov	r0, r8
   1205a:	f7fb fd81 	bl	db60 <_malloc_r>
   1205e:	2800      	cmp	r0, #0
   12060:	d039      	beq.n	120d6 <__ssprint_r+0xd2>
   12062:	6929      	ldr	r1, [r5, #16]
   12064:	9001      	str	r0, [sp, #4]
   12066:	464a      	mov	r2, r9
   12068:	f7fc f892 	bl	e190 <memcpy>
   1206c:	89aa      	ldrh	r2, [r5, #12]
   1206e:	9b01      	ldr	r3, [sp, #4]
   12070:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   12074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12078:	81aa      	strh	r2, [r5, #12]
   1207a:	ebc9 0207 	rsb	r2, r9, r7
   1207e:	eb03 0009 	add.w	r0, r3, r9
   12082:	616f      	str	r7, [r5, #20]
   12084:	612b      	str	r3, [r5, #16]
   12086:	6028      	str	r0, [r5, #0]
   12088:	60aa      	str	r2, [r5, #8]
   1208a:	4627      	mov	r7, r4
   1208c:	46a1      	mov	r9, r4
   1208e:	464a      	mov	r2, r9
   12090:	4659      	mov	r1, fp
   12092:	f7fc f917 	bl	e2c4 <memmove>
   12096:	f8da 2008 	ldr.w	r2, [sl, #8]
   1209a:	68ab      	ldr	r3, [r5, #8]
   1209c:	6828      	ldr	r0, [r5, #0]
   1209e:	1bdb      	subs	r3, r3, r7
   120a0:	4448      	add	r0, r9
   120a2:	1b14      	subs	r4, r2, r4
   120a4:	60ab      	str	r3, [r5, #8]
   120a6:	6028      	str	r0, [r5, #0]
   120a8:	f8ca 4008 	str.w	r4, [sl, #8]
   120ac:	b324      	cbz	r4, 120f8 <__ssprint_r+0xf4>
   120ae:	f8d6 b000 	ldr.w	fp, [r6]
   120b2:	6874      	ldr	r4, [r6, #4]
   120b4:	3608      	adds	r6, #8
   120b6:	e7b4      	b.n	12022 <__ssprint_r+0x1e>
   120b8:	4627      	mov	r7, r4
   120ba:	46a1      	mov	r9, r4
   120bc:	e7e7      	b.n	1208e <__ssprint_r+0x8a>
   120be:	46b9      	mov	r9, r7
   120c0:	e7e5      	b.n	1208e <__ssprint_r+0x8a>
   120c2:	4640      	mov	r0, r8
   120c4:	f7fc f9e0 	bl	e488 <_realloc_r>
   120c8:	4603      	mov	r3, r0
   120ca:	2800      	cmp	r0, #0
   120cc:	d1d5      	bne.n	1207a <__ssprint_r+0x76>
   120ce:	4640      	mov	r0, r8
   120d0:	6929      	ldr	r1, [r5, #16]
   120d2:	f7ff fae3 	bl	1169c <_free_r>
   120d6:	89aa      	ldrh	r2, [r5, #12]
   120d8:	230c      	movs	r3, #12
   120da:	f8c8 3000 	str.w	r3, [r8]
   120de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   120e2:	2300      	movs	r3, #0
   120e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   120e8:	81aa      	strh	r2, [r5, #12]
   120ea:	f8ca 3008 	str.w	r3, [sl, #8]
   120ee:	f8ca 3004 	str.w	r3, [sl, #4]
   120f2:	b003      	add	sp, #12
   120f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120f8:	4620      	mov	r0, r4
   120fa:	f8ca 4004 	str.w	r4, [sl, #4]
   120fe:	b003      	add	sp, #12
   12100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012104 <_vasnprintf_r>:
   12104:	b570      	push	{r4, r5, r6, lr}
   12106:	4614      	mov	r4, r2
   12108:	b09a      	sub	sp, #104	; 0x68
   1210a:	6815      	ldr	r5, [r2, #0]
   1210c:	b109      	cbz	r1, 12112 <_vasnprintf_r+0xe>
   1210e:	2d00      	cmp	r5, #0
   12110:	d11a      	bne.n	12148 <_vasnprintf_r+0x44>
   12112:	2500      	movs	r5, #0
   12114:	f44f 7222 	mov.w	r2, #648	; 0x288
   12118:	f8ad 200c 	strh.w	r2, [sp, #12]
   1211c:	9500      	str	r5, [sp, #0]
   1211e:	9504      	str	r5, [sp, #16]
   12120:	461a      	mov	r2, r3
   12122:	f64f 76ff 	movw	r6, #65535	; 0xffff
   12126:	4669      	mov	r1, sp
   12128:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1212a:	9502      	str	r5, [sp, #8]
   1212c:	9505      	str	r5, [sp, #20]
   1212e:	f8ad 600e 	strh.w	r6, [sp, #14]
   12132:	f7fc fd79 	bl	ec28 <_svfprintf_r>
   12136:	2800      	cmp	r0, #0
   12138:	db11      	blt.n	1215e <_vasnprintf_r+0x5a>
   1213a:	9b00      	ldr	r3, [sp, #0]
   1213c:	6020      	str	r0, [r4, #0]
   1213e:	2200      	movs	r2, #0
   12140:	701a      	strb	r2, [r3, #0]
   12142:	9804      	ldr	r0, [sp, #16]
   12144:	b01a      	add	sp, #104	; 0x68
   12146:	bd70      	pop	{r4, r5, r6, pc}
   12148:	f44f 62c1 	mov.w	r2, #1544	; 0x608
   1214c:	9100      	str	r1, [sp, #0]
   1214e:	9104      	str	r1, [sp, #16]
   12150:	f8ad 200c 	strh.w	r2, [sp, #12]
   12154:	dae4      	bge.n	12120 <_vasnprintf_r+0x1c>
   12156:	238b      	movs	r3, #139	; 0x8b
   12158:	6003      	str	r3, [r0, #0]
   1215a:	2000      	movs	r0, #0
   1215c:	e7f2      	b.n	12144 <_vasnprintf_r+0x40>
   1215e:	2000      	movs	r0, #0
   12160:	e7f0      	b.n	12144 <_vasnprintf_r+0x40>
   12162:	bf00      	nop

00012164 <_calloc_r>:
   12164:	b510      	push	{r4, lr}
   12166:	fb02 f101 	mul.w	r1, r2, r1
   1216a:	f7fb fcf9 	bl	db60 <_malloc_r>
   1216e:	4604      	mov	r4, r0
   12170:	b168      	cbz	r0, 1218e <_calloc_r+0x2a>
   12172:	f850 2c04 	ldr.w	r2, [r0, #-4]
   12176:	f022 0203 	bic.w	r2, r2, #3
   1217a:	3a04      	subs	r2, #4
   1217c:	2a24      	cmp	r2, #36	; 0x24
   1217e:	d818      	bhi.n	121b2 <_calloc_r+0x4e>
   12180:	2a13      	cmp	r2, #19
   12182:	d806      	bhi.n	12192 <_calloc_r+0x2e>
   12184:	4603      	mov	r3, r0
   12186:	2200      	movs	r2, #0
   12188:	601a      	str	r2, [r3, #0]
   1218a:	605a      	str	r2, [r3, #4]
   1218c:	609a      	str	r2, [r3, #8]
   1218e:	4620      	mov	r0, r4
   12190:	bd10      	pop	{r4, pc}
   12192:	2300      	movs	r3, #0
   12194:	2a1b      	cmp	r2, #27
   12196:	6003      	str	r3, [r0, #0]
   12198:	6043      	str	r3, [r0, #4]
   1219a:	d90f      	bls.n	121bc <_calloc_r+0x58>
   1219c:	2a24      	cmp	r2, #36	; 0x24
   1219e:	6083      	str	r3, [r0, #8]
   121a0:	60c3      	str	r3, [r0, #12]
   121a2:	bf05      	ittet	eq
   121a4:	6103      	streq	r3, [r0, #16]
   121a6:	6143      	streq	r3, [r0, #20]
   121a8:	f100 0310 	addne.w	r3, r0, #16
   121ac:	f100 0318 	addeq.w	r3, r0, #24
   121b0:	e7e9      	b.n	12186 <_calloc_r+0x22>
   121b2:	2100      	movs	r1, #0
   121b4:	f7fc f8e6 	bl	e384 <memset>
   121b8:	4620      	mov	r0, r4
   121ba:	bd10      	pop	{r4, pc}
   121bc:	f100 0308 	add.w	r3, r0, #8
   121c0:	e7e1      	b.n	12186 <_calloc_r+0x22>
   121c2:	bf00      	nop

000121c4 <_close_r>:
   121c4:	b538      	push	{r3, r4, r5, lr}
   121c6:	4c07      	ldr	r4, [pc, #28]	; (121e4 <_close_r+0x20>)
   121c8:	2300      	movs	r3, #0
   121ca:	4605      	mov	r5, r0
   121cc:	4608      	mov	r0, r1
   121ce:	6023      	str	r3, [r4, #0]
   121d0:	f7f0 fa21 	bl	2616 <_close>
   121d4:	1c43      	adds	r3, r0, #1
   121d6:	d000      	beq.n	121da <_close_r+0x16>
   121d8:	bd38      	pop	{r3, r4, r5, pc}
   121da:	6823      	ldr	r3, [r4, #0]
   121dc:	2b00      	cmp	r3, #0
   121de:	d0fb      	beq.n	121d8 <_close_r+0x14>
   121e0:	602b      	str	r3, [r5, #0]
   121e2:	bd38      	pop	{r3, r4, r5, pc}
   121e4:	1fff9c90 	.word	0x1fff9c90

000121e8 <_fclose_r>:
   121e8:	b570      	push	{r4, r5, r6, lr}
   121ea:	460c      	mov	r4, r1
   121ec:	4605      	mov	r5, r0
   121ee:	b131      	cbz	r1, 121fe <_fclose_r+0x16>
   121f0:	b110      	cbz	r0, 121f8 <_fclose_r+0x10>
   121f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   121f4:	2b00      	cmp	r3, #0
   121f6:	d02f      	beq.n	12258 <_fclose_r+0x70>
   121f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   121fc:	b90b      	cbnz	r3, 12202 <_fclose_r+0x1a>
   121fe:	2000      	movs	r0, #0
   12200:	bd70      	pop	{r4, r5, r6, pc}
   12202:	4628      	mov	r0, r5
   12204:	4621      	mov	r1, r4
   12206:	f7ff f949 	bl	1149c <_fflush_r>
   1220a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1220c:	4606      	mov	r6, r0
   1220e:	b133      	cbz	r3, 1221e <_fclose_r+0x36>
   12210:	4628      	mov	r0, r5
   12212:	69e1      	ldr	r1, [r4, #28]
   12214:	4798      	blx	r3
   12216:	2800      	cmp	r0, #0
   12218:	bfb8      	it	lt
   1221a:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
   1221e:	89a3      	ldrh	r3, [r4, #12]
   12220:	061b      	lsls	r3, r3, #24
   12222:	d41c      	bmi.n	1225e <_fclose_r+0x76>
   12224:	6b21      	ldr	r1, [r4, #48]	; 0x30
   12226:	b141      	cbz	r1, 1223a <_fclose_r+0x52>
   12228:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1222c:	4299      	cmp	r1, r3
   1222e:	d002      	beq.n	12236 <_fclose_r+0x4e>
   12230:	4628      	mov	r0, r5
   12232:	f7ff fa33 	bl	1169c <_free_r>
   12236:	2300      	movs	r3, #0
   12238:	6323      	str	r3, [r4, #48]	; 0x30
   1223a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1223c:	b121      	cbz	r1, 12248 <_fclose_r+0x60>
   1223e:	4628      	mov	r0, r5
   12240:	f7ff fa2c 	bl	1169c <_free_r>
   12244:	2300      	movs	r3, #0
   12246:	6463      	str	r3, [r4, #68]	; 0x44
   12248:	f7ff f9be 	bl	115c8 <__sfp_lock_acquire>
   1224c:	2300      	movs	r3, #0
   1224e:	81a3      	strh	r3, [r4, #12]
   12250:	f7ff f9bc 	bl	115cc <__sfp_lock_release>
   12254:	4630      	mov	r0, r6
   12256:	bd70      	pop	{r4, r5, r6, pc}
   12258:	f7ff f93c 	bl	114d4 <__sinit>
   1225c:	e7cc      	b.n	121f8 <_fclose_r+0x10>
   1225e:	4628      	mov	r0, r5
   12260:	6921      	ldr	r1, [r4, #16]
   12262:	f7ff fa1b 	bl	1169c <_free_r>
   12266:	e7dd      	b.n	12224 <_fclose_r+0x3c>

00012268 <fclose>:
   12268:	4b02      	ldr	r3, [pc, #8]	; (12274 <fclose+0xc>)
   1226a:	4601      	mov	r1, r0
   1226c:	6818      	ldr	r0, [r3, #0]
   1226e:	f7ff bfbb 	b.w	121e8 <_fclose_r>
   12272:	bf00      	nop
   12274:	1fff88f0 	.word	0x1fff88f0

00012278 <_fstat_r>:
   12278:	b538      	push	{r3, r4, r5, lr}
   1227a:	4c08      	ldr	r4, [pc, #32]	; (1229c <_fstat_r+0x24>)
   1227c:	2300      	movs	r3, #0
   1227e:	4605      	mov	r5, r0
   12280:	4608      	mov	r0, r1
   12282:	4611      	mov	r1, r2
   12284:	6023      	str	r3, [r4, #0]
   12286:	f7f0 f9c9 	bl	261c <_fstat>
   1228a:	1c43      	adds	r3, r0, #1
   1228c:	d000      	beq.n	12290 <_fstat_r+0x18>
   1228e:	bd38      	pop	{r3, r4, r5, pc}
   12290:	6823      	ldr	r3, [r4, #0]
   12292:	2b00      	cmp	r3, #0
   12294:	d0fb      	beq.n	1228e <_fstat_r+0x16>
   12296:	602b      	str	r3, [r5, #0]
   12298:	bd38      	pop	{r3, r4, r5, pc}
   1229a:	bf00      	nop
   1229c:	1fff9c90 	.word	0x1fff9c90

000122a0 <_isatty_r>:
   122a0:	b538      	push	{r3, r4, r5, lr}
   122a2:	4c07      	ldr	r4, [pc, #28]	; (122c0 <_isatty_r+0x20>)
   122a4:	2300      	movs	r3, #0
   122a6:	4605      	mov	r5, r0
   122a8:	4608      	mov	r0, r1
   122aa:	6023      	str	r3, [r4, #0]
   122ac:	f7f0 f9bb 	bl	2626 <_isatty>
   122b0:	1c43      	adds	r3, r0, #1
   122b2:	d000      	beq.n	122b6 <_isatty_r+0x16>
   122b4:	bd38      	pop	{r3, r4, r5, pc}
   122b6:	6823      	ldr	r3, [r4, #0]
   122b8:	2b00      	cmp	r3, #0
   122ba:	d0fb      	beq.n	122b4 <_isatty_r+0x14>
   122bc:	602b      	str	r3, [r5, #0]
   122be:	bd38      	pop	{r3, r4, r5, pc}
   122c0:	1fff9c90 	.word	0x1fff9c90

000122c4 <_lseek_r>:
   122c4:	b570      	push	{r4, r5, r6, lr}
   122c6:	4c08      	ldr	r4, [pc, #32]	; (122e8 <_lseek_r+0x24>)
   122c8:	4606      	mov	r6, r0
   122ca:	2500      	movs	r5, #0
   122cc:	4608      	mov	r0, r1
   122ce:	4611      	mov	r1, r2
   122d0:	461a      	mov	r2, r3
   122d2:	6025      	str	r5, [r4, #0]
   122d4:	f7f0 f9a9 	bl	262a <_lseek>
   122d8:	1c43      	adds	r3, r0, #1
   122da:	d000      	beq.n	122de <_lseek_r+0x1a>
   122dc:	bd70      	pop	{r4, r5, r6, pc}
   122de:	6823      	ldr	r3, [r4, #0]
   122e0:	2b00      	cmp	r3, #0
   122e2:	d0fb      	beq.n	122dc <_lseek_r+0x18>
   122e4:	6033      	str	r3, [r6, #0]
   122e6:	bd70      	pop	{r4, r5, r6, pc}
   122e8:	1fff9c90 	.word	0x1fff9c90

000122ec <_read_r>:
   122ec:	b570      	push	{r4, r5, r6, lr}
   122ee:	4c08      	ldr	r4, [pc, #32]	; (12310 <_read_r+0x24>)
   122f0:	4606      	mov	r6, r0
   122f2:	2500      	movs	r5, #0
   122f4:	4608      	mov	r0, r1
   122f6:	4611      	mov	r1, r2
   122f8:	461a      	mov	r2, r3
   122fa:	6025      	str	r5, [r4, #0]
   122fc:	f7f0 f989 	bl	2612 <_read>
   12300:	1c43      	adds	r3, r0, #1
   12302:	d000      	beq.n	12306 <_read_r+0x1a>
   12304:	bd70      	pop	{r4, r5, r6, pc}
   12306:	6823      	ldr	r3, [r4, #0]
   12308:	2b00      	cmp	r3, #0
   1230a:	d0fb      	beq.n	12304 <_read_r+0x18>
   1230c:	6033      	str	r3, [r6, #0]
   1230e:	bd70      	pop	{r4, r5, r6, pc}
   12310:	1fff9c90 	.word	0x1fff9c90

00012314 <__aeabi_uldivmod>:
   12314:	b94b      	cbnz	r3, 1232a <__aeabi_uldivmod+0x16>
   12316:	b942      	cbnz	r2, 1232a <__aeabi_uldivmod+0x16>
   12318:	2900      	cmp	r1, #0
   1231a:	bf08      	it	eq
   1231c:	2800      	cmpeq	r0, #0
   1231e:	d002      	beq.n	12326 <__aeabi_uldivmod+0x12>
   12320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12324:	4608      	mov	r0, r1
   12326:	f000 b83b 	b.w	123a0 <__aeabi_idiv0>
   1232a:	b082      	sub	sp, #8
   1232c:	46ec      	mov	ip, sp
   1232e:	e92d 5000 	stmdb	sp!, {ip, lr}
   12332:	f000 f81d 	bl	12370 <__gnu_uldivmod_helper>
   12336:	f8dd e004 	ldr.w	lr, [sp, #4]
   1233a:	b002      	add	sp, #8
   1233c:	bc0c      	pop	{r2, r3}
   1233e:	4770      	bx	lr

00012340 <__gnu_ldivmod_helper>:
   12340:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   12344:	9e06      	ldr	r6, [sp, #24]
   12346:	4614      	mov	r4, r2
   12348:	461d      	mov	r5, r3
   1234a:	4680      	mov	r8, r0
   1234c:	4689      	mov	r9, r1
   1234e:	f000 f829 	bl	123a4 <__divdi3>
   12352:	fb04 f301 	mul.w	r3, r4, r1
   12356:	fb00 3305 	mla	r3, r0, r5, r3
   1235a:	fba4 4500 	umull	r4, r5, r4, r0
   1235e:	441d      	add	r5, r3
   12360:	ebb8 0404 	subs.w	r4, r8, r4
   12364:	eb69 0505 	sbc.w	r5, r9, r5
   12368:	e9c6 4500 	strd	r4, r5, [r6]
   1236c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00012370 <__gnu_uldivmod_helper>:
   12370:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   12374:	9e06      	ldr	r6, [sp, #24]
   12376:	4614      	mov	r4, r2
   12378:	4680      	mov	r8, r0
   1237a:	4689      	mov	r9, r1
   1237c:	461d      	mov	r5, r3
   1237e:	f000 f95d 	bl	1263c <__udivdi3>
   12382:	fb00 f505 	mul.w	r5, r0, r5
   12386:	fb04 5301 	mla	r3, r4, r1, r5
   1238a:	fba0 4504 	umull	r4, r5, r0, r4
   1238e:	441d      	add	r5, r3
   12390:	ebb8 0404 	subs.w	r4, r8, r4
   12394:	eb69 0505 	sbc.w	r5, r9, r5
   12398:	e9c6 4500 	strd	r4, r5, [r6]
   1239c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000123a0 <__aeabi_idiv0>:
   123a0:	4770      	bx	lr
   123a2:	bf00      	nop

000123a4 <__divdi3>:
   123a4:	2900      	cmp	r1, #0
   123a6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   123aa:	f2c0 809f 	blt.w	124ec <__divdi3+0x148>
   123ae:	2400      	movs	r4, #0
   123b0:	2b00      	cmp	r3, #0
   123b2:	f2c0 8096 	blt.w	124e2 <__divdi3+0x13e>
   123b6:	4615      	mov	r5, r2
   123b8:	4606      	mov	r6, r0
   123ba:	460f      	mov	r7, r1
   123bc:	2b00      	cmp	r3, #0
   123be:	d13e      	bne.n	1243e <__divdi3+0x9a>
   123c0:	428a      	cmp	r2, r1
   123c2:	d957      	bls.n	12474 <__divdi3+0xd0>
   123c4:	fab2 f382 	clz	r3, r2
   123c8:	b14b      	cbz	r3, 123de <__divdi3+0x3a>
   123ca:	f1c3 0220 	rsb	r2, r3, #32
   123ce:	fa01 f703 	lsl.w	r7, r1, r3
   123d2:	fa20 f202 	lsr.w	r2, r0, r2
   123d6:	409d      	lsls	r5, r3
   123d8:	4317      	orrs	r7, r2
   123da:	fa00 f603 	lsl.w	r6, r0, r3
   123de:	0c29      	lsrs	r1, r5, #16
   123e0:	fbb7 f2f1 	udiv	r2, r7, r1
   123e4:	0c33      	lsrs	r3, r6, #16
   123e6:	fb01 7c12 	mls	ip, r1, r2, r7
   123ea:	b2a8      	uxth	r0, r5
   123ec:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
   123f0:	fb00 f302 	mul.w	r3, r0, r2
   123f4:	42bb      	cmp	r3, r7
   123f6:	d909      	bls.n	1240c <__divdi3+0x68>
   123f8:	197f      	adds	r7, r7, r5
   123fa:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   123fe:	f080 8101 	bcs.w	12604 <__divdi3+0x260>
   12402:	42bb      	cmp	r3, r7
   12404:	f240 80fe 	bls.w	12604 <__divdi3+0x260>
   12408:	3a02      	subs	r2, #2
   1240a:	442f      	add	r7, r5
   1240c:	1aff      	subs	r7, r7, r3
   1240e:	fbb7 f3f1 	udiv	r3, r7, r1
   12412:	b2b6      	uxth	r6, r6
   12414:	fb01 7113 	mls	r1, r1, r3, r7
   12418:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   1241c:	fb00 f003 	mul.w	r0, r0, r3
   12420:	4288      	cmp	r0, r1
   12422:	d908      	bls.n	12436 <__divdi3+0x92>
   12424:	1949      	adds	r1, r1, r5
   12426:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
   1242a:	f080 80ed 	bcs.w	12608 <__divdi3+0x264>
   1242e:	4288      	cmp	r0, r1
   12430:	f240 80ea 	bls.w	12608 <__divdi3+0x264>
   12434:	3b02      	subs	r3, #2
   12436:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   1243a:	2300      	movs	r3, #0
   1243c:	e003      	b.n	12446 <__divdi3+0xa2>
   1243e:	428b      	cmp	r3, r1
   12440:	d90a      	bls.n	12458 <__divdi3+0xb4>
   12442:	2300      	movs	r3, #0
   12444:	461a      	mov	r2, r3
   12446:	4610      	mov	r0, r2
   12448:	4619      	mov	r1, r3
   1244a:	b114      	cbz	r4, 12452 <__divdi3+0xae>
   1244c:	4240      	negs	r0, r0
   1244e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12452:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   12456:	4770      	bx	lr
   12458:	fab3 f883 	clz	r8, r3
   1245c:	f1b8 0f00 	cmp.w	r8, #0
   12460:	f040 8084 	bne.w	1256c <__divdi3+0x1c8>
   12464:	428b      	cmp	r3, r1
   12466:	d302      	bcc.n	1246e <__divdi3+0xca>
   12468:	4282      	cmp	r2, r0
   1246a:	f200 80de 	bhi.w	1262a <__divdi3+0x286>
   1246e:	2300      	movs	r3, #0
   12470:	2201      	movs	r2, #1
   12472:	e7e8      	b.n	12446 <__divdi3+0xa2>
   12474:	b912      	cbnz	r2, 1247c <__divdi3+0xd8>
   12476:	2301      	movs	r3, #1
   12478:	fbb3 f5f2 	udiv	r5, r3, r2
   1247c:	fab5 f285 	clz	r2, r5
   12480:	2a00      	cmp	r2, #0
   12482:	d139      	bne.n	124f8 <__divdi3+0x154>
   12484:	1b7f      	subs	r7, r7, r5
   12486:	0c28      	lsrs	r0, r5, #16
   12488:	fa1f fc85 	uxth.w	ip, r5
   1248c:	2301      	movs	r3, #1
   1248e:	fbb7 f1f0 	udiv	r1, r7, r0
   12492:	0c32      	lsrs	r2, r6, #16
   12494:	fb00 7711 	mls	r7, r0, r1, r7
   12498:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
   1249c:	fb0c f201 	mul.w	r2, ip, r1
   124a0:	42ba      	cmp	r2, r7
   124a2:	d907      	bls.n	124b4 <__divdi3+0x110>
   124a4:	197f      	adds	r7, r7, r5
   124a6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   124aa:	d202      	bcs.n	124b2 <__divdi3+0x10e>
   124ac:	42ba      	cmp	r2, r7
   124ae:	f200 80c1 	bhi.w	12634 <__divdi3+0x290>
   124b2:	4641      	mov	r1, r8
   124b4:	1abf      	subs	r7, r7, r2
   124b6:	fbb7 f2f0 	udiv	r2, r7, r0
   124ba:	b2b6      	uxth	r6, r6
   124bc:	fb00 7012 	mls	r0, r0, r2, r7
   124c0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   124c4:	fb0c fc02 	mul.w	ip, ip, r2
   124c8:	4584      	cmp	ip, r0
   124ca:	d907      	bls.n	124dc <__divdi3+0x138>
   124cc:	1940      	adds	r0, r0, r5
   124ce:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   124d2:	d202      	bcs.n	124da <__divdi3+0x136>
   124d4:	4584      	cmp	ip, r0
   124d6:	f200 80ab 	bhi.w	12630 <__divdi3+0x28c>
   124da:	463a      	mov	r2, r7
   124dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   124e0:	e7b1      	b.n	12446 <__divdi3+0xa2>
   124e2:	43e4      	mvns	r4, r4
   124e4:	4252      	negs	r2, r2
   124e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   124ea:	e764      	b.n	123b6 <__divdi3+0x12>
   124ec:	4240      	negs	r0, r0
   124ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   124f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   124f6:	e75b      	b.n	123b0 <__divdi3+0xc>
   124f8:	4095      	lsls	r5, r2
   124fa:	f1c2 0320 	rsb	r3, r2, #32
   124fe:	fa27 f103 	lsr.w	r1, r7, r3
   12502:	0c28      	lsrs	r0, r5, #16
   12504:	fa26 f303 	lsr.w	r3, r6, r3
   12508:	4097      	lsls	r7, r2
   1250a:	fbb1 f8f0 	udiv	r8, r1, r0
   1250e:	431f      	orrs	r7, r3
   12510:	0c3b      	lsrs	r3, r7, #16
   12512:	fb00 1118 	mls	r1, r0, r8, r1
   12516:	fa1f fc85 	uxth.w	ip, r5
   1251a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1251e:	fb0c f308 	mul.w	r3, ip, r8
   12522:	428b      	cmp	r3, r1
   12524:	fa06 f602 	lsl.w	r6, r6, r2
   12528:	d908      	bls.n	1253c <__divdi3+0x198>
   1252a:	1949      	adds	r1, r1, r5
   1252c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   12530:	d279      	bcs.n	12626 <__divdi3+0x282>
   12532:	428b      	cmp	r3, r1
   12534:	d977      	bls.n	12626 <__divdi3+0x282>
   12536:	f1a8 0802 	sub.w	r8, r8, #2
   1253a:	4429      	add	r1, r5
   1253c:	1ac9      	subs	r1, r1, r3
   1253e:	fbb1 f3f0 	udiv	r3, r1, r0
   12542:	b2bf      	uxth	r7, r7
   12544:	fb00 1113 	mls	r1, r0, r3, r1
   12548:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   1254c:	fb0c f203 	mul.w	r2, ip, r3
   12550:	42ba      	cmp	r2, r7
   12552:	d907      	bls.n	12564 <__divdi3+0x1c0>
   12554:	197f      	adds	r7, r7, r5
   12556:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
   1255a:	d260      	bcs.n	1261e <__divdi3+0x27a>
   1255c:	42ba      	cmp	r2, r7
   1255e:	d95e      	bls.n	1261e <__divdi3+0x27a>
   12560:	3b02      	subs	r3, #2
   12562:	442f      	add	r7, r5
   12564:	1abf      	subs	r7, r7, r2
   12566:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1256a:	e790      	b.n	1248e <__divdi3+0xea>
   1256c:	f1c8 0220 	rsb	r2, r8, #32
   12570:	fa03 fc08 	lsl.w	ip, r3, r8
   12574:	fa25 f302 	lsr.w	r3, r5, r2
   12578:	ea43 0c0c 	orr.w	ip, r3, ip
   1257c:	ea4f 491c 	mov.w	r9, ip, lsr #16
   12580:	fa21 f302 	lsr.w	r3, r1, r2
   12584:	fa01 f708 	lsl.w	r7, r1, r8
   12588:	fa20 f202 	lsr.w	r2, r0, r2
   1258c:	fbb3 f1f9 	udiv	r1, r3, r9
   12590:	4317      	orrs	r7, r2
   12592:	fb09 3311 	mls	r3, r9, r1, r3
   12596:	0c3a      	lsrs	r2, r7, #16
   12598:	fa1f fb8c 	uxth.w	fp, ip
   1259c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   125a0:	fb0b fa01 	mul.w	sl, fp, r1
   125a4:	459a      	cmp	sl, r3
   125a6:	fa05 f008 	lsl.w	r0, r5, r8
   125aa:	d908      	bls.n	125be <__divdi3+0x21a>
   125ac:	eb13 030c 	adds.w	r3, r3, ip
   125b0:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   125b4:	d235      	bcs.n	12622 <__divdi3+0x27e>
   125b6:	459a      	cmp	sl, r3
   125b8:	d933      	bls.n	12622 <__divdi3+0x27e>
   125ba:	3902      	subs	r1, #2
   125bc:	4463      	add	r3, ip
   125be:	ebca 0303 	rsb	r3, sl, r3
   125c2:	fbb3 f2f9 	udiv	r2, r3, r9
   125c6:	fb09 3312 	mls	r3, r9, r2, r3
   125ca:	b2bf      	uxth	r7, r7
   125cc:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   125d0:	fb0b f902 	mul.w	r9, fp, r2
   125d4:	45b9      	cmp	r9, r7
   125d6:	d908      	bls.n	125ea <__divdi3+0x246>
   125d8:	eb17 070c 	adds.w	r7, r7, ip
   125dc:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   125e0:	d21b      	bcs.n	1261a <__divdi3+0x276>
   125e2:	45b9      	cmp	r9, r7
   125e4:	d919      	bls.n	1261a <__divdi3+0x276>
   125e6:	3a02      	subs	r2, #2
   125e8:	4467      	add	r7, ip
   125ea:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   125ee:	fba5 0100 	umull	r0, r1, r5, r0
   125f2:	ebc9 0707 	rsb	r7, r9, r7
   125f6:	428f      	cmp	r7, r1
   125f8:	f04f 0300 	mov.w	r3, #0
   125fc:	d30a      	bcc.n	12614 <__divdi3+0x270>
   125fe:	d005      	beq.n	1260c <__divdi3+0x268>
   12600:	462a      	mov	r2, r5
   12602:	e720      	b.n	12446 <__divdi3+0xa2>
   12604:	4662      	mov	r2, ip
   12606:	e701      	b.n	1240c <__divdi3+0x68>
   12608:	463b      	mov	r3, r7
   1260a:	e714      	b.n	12436 <__divdi3+0x92>
   1260c:	fa06 f608 	lsl.w	r6, r6, r8
   12610:	4286      	cmp	r6, r0
   12612:	d2f5      	bcs.n	12600 <__divdi3+0x25c>
   12614:	1e6a      	subs	r2, r5, #1
   12616:	2300      	movs	r3, #0
   12618:	e715      	b.n	12446 <__divdi3+0xa2>
   1261a:	461a      	mov	r2, r3
   1261c:	e7e5      	b.n	125ea <__divdi3+0x246>
   1261e:	460b      	mov	r3, r1
   12620:	e7a0      	b.n	12564 <__divdi3+0x1c0>
   12622:	4611      	mov	r1, r2
   12624:	e7cb      	b.n	125be <__divdi3+0x21a>
   12626:	4690      	mov	r8, r2
   12628:	e788      	b.n	1253c <__divdi3+0x198>
   1262a:	4643      	mov	r3, r8
   1262c:	4642      	mov	r2, r8
   1262e:	e70a      	b.n	12446 <__divdi3+0xa2>
   12630:	3a02      	subs	r2, #2
   12632:	e753      	b.n	124dc <__divdi3+0x138>
   12634:	3902      	subs	r1, #2
   12636:	442f      	add	r7, r5
   12638:	e73c      	b.n	124b4 <__divdi3+0x110>
   1263a:	bf00      	nop

0001263c <__udivdi3>:
   1263c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   12640:	4614      	mov	r4, r2
   12642:	4605      	mov	r5, r0
   12644:	460e      	mov	r6, r1
   12646:	2b00      	cmp	r3, #0
   12648:	d143      	bne.n	126d2 <__udivdi3+0x96>
   1264a:	428a      	cmp	r2, r1
   1264c:	d953      	bls.n	126f6 <__udivdi3+0xba>
   1264e:	fab2 f782 	clz	r7, r2
   12652:	b157      	cbz	r7, 1266a <__udivdi3+0x2e>
   12654:	f1c7 0620 	rsb	r6, r7, #32
   12658:	fa20 f606 	lsr.w	r6, r0, r6
   1265c:	fa01 f307 	lsl.w	r3, r1, r7
   12660:	fa02 f407 	lsl.w	r4, r2, r7
   12664:	431e      	orrs	r6, r3
   12666:	fa00 f507 	lsl.w	r5, r0, r7
   1266a:	0c21      	lsrs	r1, r4, #16
   1266c:	fbb6 f2f1 	udiv	r2, r6, r1
   12670:	0c2b      	lsrs	r3, r5, #16
   12672:	fb01 6712 	mls	r7, r1, r2, r6
   12676:	b2a0      	uxth	r0, r4
   12678:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
   1267c:	fb00 f302 	mul.w	r3, r0, r2
   12680:	42b3      	cmp	r3, r6
   12682:	d909      	bls.n	12698 <__udivdi3+0x5c>
   12684:	1936      	adds	r6, r6, r4
   12686:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   1268a:	f080 80f6 	bcs.w	1287a <__udivdi3+0x23e>
   1268e:	42b3      	cmp	r3, r6
   12690:	f240 80f3 	bls.w	1287a <__udivdi3+0x23e>
   12694:	3a02      	subs	r2, #2
   12696:	4426      	add	r6, r4
   12698:	1af6      	subs	r6, r6, r3
   1269a:	fbb6 f3f1 	udiv	r3, r6, r1
   1269e:	b2ad      	uxth	r5, r5
   126a0:	fb01 6113 	mls	r1, r1, r3, r6
   126a4:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   126a8:	fb00 f003 	mul.w	r0, r0, r3
   126ac:	4288      	cmp	r0, r1
   126ae:	d908      	bls.n	126c2 <__udivdi3+0x86>
   126b0:	1909      	adds	r1, r1, r4
   126b2:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
   126b6:	f080 80e2 	bcs.w	1287e <__udivdi3+0x242>
   126ba:	4288      	cmp	r0, r1
   126bc:	f240 80df 	bls.w	1287e <__udivdi3+0x242>
   126c0:	3b02      	subs	r3, #2
   126c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   126c6:	2300      	movs	r3, #0
   126c8:	4610      	mov	r0, r2
   126ca:	4619      	mov	r1, r3
   126cc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   126d0:	4770      	bx	lr
   126d2:	428b      	cmp	r3, r1
   126d4:	d84a      	bhi.n	1276c <__udivdi3+0x130>
   126d6:	fab3 f683 	clz	r6, r3
   126da:	2e00      	cmp	r6, #0
   126dc:	d14d      	bne.n	1277a <__udivdi3+0x13e>
   126de:	428b      	cmp	r3, r1
   126e0:	d302      	bcc.n	126e8 <__udivdi3+0xac>
   126e2:	4282      	cmp	r2, r0
   126e4:	f200 80d6 	bhi.w	12894 <__udivdi3+0x258>
   126e8:	2300      	movs	r3, #0
   126ea:	2201      	movs	r2, #1
   126ec:	4610      	mov	r0, r2
   126ee:	4619      	mov	r1, r3
   126f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   126f4:	4770      	bx	lr
   126f6:	b912      	cbnz	r2, 126fe <__udivdi3+0xc2>
   126f8:	2401      	movs	r4, #1
   126fa:	fbb4 f4f2 	udiv	r4, r4, r2
   126fe:	fab4 f284 	clz	r2, r4
   12702:	2a00      	cmp	r2, #0
   12704:	d17c      	bne.n	12800 <__udivdi3+0x1c4>
   12706:	1b09      	subs	r1, r1, r4
   12708:	0c26      	lsrs	r6, r4, #16
   1270a:	b2a7      	uxth	r7, r4
   1270c:	2301      	movs	r3, #1
   1270e:	fbb1 f0f6 	udiv	r0, r1, r6
   12712:	0c2a      	lsrs	r2, r5, #16
   12714:	fb06 1110 	mls	r1, r6, r0, r1
   12718:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1271c:	fb07 f200 	mul.w	r2, r7, r0
   12720:	428a      	cmp	r2, r1
   12722:	d907      	bls.n	12734 <__udivdi3+0xf8>
   12724:	1909      	adds	r1, r1, r4
   12726:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1272a:	d202      	bcs.n	12732 <__udivdi3+0xf6>
   1272c:	428a      	cmp	r2, r1
   1272e:	f200 80c3 	bhi.w	128b8 <__udivdi3+0x27c>
   12732:	4660      	mov	r0, ip
   12734:	1a89      	subs	r1, r1, r2
   12736:	fbb1 f2f6 	udiv	r2, r1, r6
   1273a:	b2ad      	uxth	r5, r5
   1273c:	fb06 1112 	mls	r1, r6, r2, r1
   12740:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   12744:	fb07 f702 	mul.w	r7, r7, r2
   12748:	42af      	cmp	r7, r5
   1274a:	d908      	bls.n	1275e <__udivdi3+0x122>
   1274c:	192c      	adds	r4, r5, r4
   1274e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
   12752:	f080 8096 	bcs.w	12882 <__udivdi3+0x246>
   12756:	42a7      	cmp	r7, r4
   12758:	f240 8093 	bls.w	12882 <__udivdi3+0x246>
   1275c:	3a02      	subs	r2, #2
   1275e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   12762:	4610      	mov	r0, r2
   12764:	4619      	mov	r1, r3
   12766:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1276a:	4770      	bx	lr
   1276c:	2300      	movs	r3, #0
   1276e:	461a      	mov	r2, r3
   12770:	4610      	mov	r0, r2
   12772:	4619      	mov	r1, r3
   12774:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   12778:	4770      	bx	lr
   1277a:	f1c6 0520 	rsb	r5, r6, #32
   1277e:	fa22 f405 	lsr.w	r4, r2, r5
   12782:	40b3      	lsls	r3, r6
   12784:	431c      	orrs	r4, r3
   12786:	ea4f 4814 	mov.w	r8, r4, lsr #16
   1278a:	fa21 f305 	lsr.w	r3, r1, r5
   1278e:	fa01 f706 	lsl.w	r7, r1, r6
   12792:	fa20 f505 	lsr.w	r5, r0, r5
   12796:	fbb3 fcf8 	udiv	ip, r3, r8
   1279a:	432f      	orrs	r7, r5
   1279c:	fb08 331c 	mls	r3, r8, ip, r3
   127a0:	0c3d      	lsrs	r5, r7, #16
   127a2:	fa1f fa84 	uxth.w	sl, r4
   127a6:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   127aa:	fb0a f90c 	mul.w	r9, sl, ip
   127ae:	4599      	cmp	r9, r3
   127b0:	fa02 fb06 	lsl.w	fp, r2, r6
   127b4:	d904      	bls.n	127c0 <__udivdi3+0x184>
   127b6:	191b      	adds	r3, r3, r4
   127b8:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   127bc:	d36d      	bcc.n	1289a <__udivdi3+0x25e>
   127be:	4694      	mov	ip, r2
   127c0:	ebc9 0303 	rsb	r3, r9, r3
   127c4:	fbb3 f5f8 	udiv	r5, r3, r8
   127c8:	fb08 3315 	mls	r3, r8, r5, r3
   127cc:	b2bf      	uxth	r7, r7
   127ce:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   127d2:	fb0a f805 	mul.w	r8, sl, r5
   127d6:	45b8      	cmp	r8, r7
   127d8:	d904      	bls.n	127e4 <__udivdi3+0x1a8>
   127da:	193f      	adds	r7, r7, r4
   127dc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
   127e0:	d361      	bcc.n	128a6 <__udivdi3+0x26a>
   127e2:	461d      	mov	r5, r3
   127e4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   127e8:	fbac 230b 	umull	r2, r3, ip, fp
   127ec:	ebc8 0707 	rsb	r7, r8, r7
   127f0:	429f      	cmp	r7, r3
   127f2:	f04f 0500 	mov.w	r5, #0
   127f6:	d349      	bcc.n	1288c <__udivdi3+0x250>
   127f8:	d045      	beq.n	12886 <__udivdi3+0x24a>
   127fa:	4662      	mov	r2, ip
   127fc:	462b      	mov	r3, r5
   127fe:	e763      	b.n	126c8 <__udivdi3+0x8c>
   12800:	4094      	lsls	r4, r2
   12802:	f1c2 0320 	rsb	r3, r2, #32
   12806:	fa21 fc03 	lsr.w	ip, r1, r3
   1280a:	0c26      	lsrs	r6, r4, #16
   1280c:	fa20 f303 	lsr.w	r3, r0, r3
   12810:	fa01 f502 	lsl.w	r5, r1, r2
   12814:	fbbc f8f6 	udiv	r8, ip, r6
   12818:	ea43 0105 	orr.w	r1, r3, r5
   1281c:	0c0b      	lsrs	r3, r1, #16
   1281e:	fb06 cc18 	mls	ip, r6, r8, ip
   12822:	b2a7      	uxth	r7, r4
   12824:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
   12828:	fb07 f308 	mul.w	r3, r7, r8
   1282c:	4563      	cmp	r3, ip
   1282e:	fa00 f502 	lsl.w	r5, r0, r2
   12832:	d909      	bls.n	12848 <__udivdi3+0x20c>
   12834:	eb1c 0c04 	adds.w	ip, ip, r4
   12838:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   1283c:	d23a      	bcs.n	128b4 <__udivdi3+0x278>
   1283e:	4563      	cmp	r3, ip
   12840:	d938      	bls.n	128b4 <__udivdi3+0x278>
   12842:	f1a8 0802 	sub.w	r8, r8, #2
   12846:	44a4      	add	ip, r4
   12848:	ebc3 0c0c 	rsb	ip, r3, ip
   1284c:	fbbc f3f6 	udiv	r3, ip, r6
   12850:	b289      	uxth	r1, r1
   12852:	fb06 cc13 	mls	ip, r6, r3, ip
   12856:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
   1285a:	fb07 f203 	mul.w	r2, r7, r3
   1285e:	428a      	cmp	r2, r1
   12860:	d907      	bls.n	12872 <__udivdi3+0x236>
   12862:	1909      	adds	r1, r1, r4
   12864:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   12868:	d222      	bcs.n	128b0 <__udivdi3+0x274>
   1286a:	428a      	cmp	r2, r1
   1286c:	d920      	bls.n	128b0 <__udivdi3+0x274>
   1286e:	3b02      	subs	r3, #2
   12870:	4421      	add	r1, r4
   12872:	1a89      	subs	r1, r1, r2
   12874:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   12878:	e749      	b.n	1270e <__udivdi3+0xd2>
   1287a:	463a      	mov	r2, r7
   1287c:	e70c      	b.n	12698 <__udivdi3+0x5c>
   1287e:	4633      	mov	r3, r6
   12880:	e71f      	b.n	126c2 <__udivdi3+0x86>
   12882:	460a      	mov	r2, r1
   12884:	e76b      	b.n	1275e <__udivdi3+0x122>
   12886:	40b0      	lsls	r0, r6
   12888:	4290      	cmp	r0, r2
   1288a:	d2b6      	bcs.n	127fa <__udivdi3+0x1be>
   1288c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   12890:	2300      	movs	r3, #0
   12892:	e719      	b.n	126c8 <__udivdi3+0x8c>
   12894:	4633      	mov	r3, r6
   12896:	4632      	mov	r2, r6
   12898:	e716      	b.n	126c8 <__udivdi3+0x8c>
   1289a:	4599      	cmp	r9, r3
   1289c:	d98f      	bls.n	127be <__udivdi3+0x182>
   1289e:	f1ac 0c02 	sub.w	ip, ip, #2
   128a2:	4423      	add	r3, r4
   128a4:	e78c      	b.n	127c0 <__udivdi3+0x184>
   128a6:	45b8      	cmp	r8, r7
   128a8:	d99b      	bls.n	127e2 <__udivdi3+0x1a6>
   128aa:	3d02      	subs	r5, #2
   128ac:	4427      	add	r7, r4
   128ae:	e799      	b.n	127e4 <__udivdi3+0x1a8>
   128b0:	4603      	mov	r3, r0
   128b2:	e7de      	b.n	12872 <__udivdi3+0x236>
   128b4:	4690      	mov	r8, r2
   128b6:	e7c7      	b.n	12848 <__udivdi3+0x20c>
   128b8:	3802      	subs	r0, #2
   128ba:	4421      	add	r1, r4
   128bc:	e73a      	b.n	12734 <__udivdi3+0xf8>
   128be:	bf00      	nop

000128c0 <FastLED>:
   128c0:	8d5c 1fff                                   \...

000128c4 <_ZL1p>:
   128c4:	a097 5b89 0f5a 0d83 5fc9 3560 e9c2 e107     ...[Z...._`5....
   128d4:	248c 1e67 8e45 6308 f025 0a15 be17 9406     .$g.E..c%.......
   128e4:	78f7 4bea 1a00 3ec5 fc5e cbdb 2375 200b     .x.K...>^...u#. 
   128f4:	b139 5821 95ed 5738 14ae 887d a8ab af44     9.!X..8W..}...D.
   12904:	a54a 8647 308b a61b 924d e79e 6f53 7ae5     J.G..0..M...So.z
   12914:	d33c e685 69dc 295c 2e37 28f5 66f4 368f     <....i\)7..(.f.6
   12924:	1941 a13f d801 4950 4cd1 bb84 59d0 a912     A.?...PI.L...Y..
   12934:	c4c8 8287 bc74 569f 64a4 c66d baad 4003     ....t..V.dm....@
   12944:	d934 fae2 7b7c ca05 9326 7e76 52ff d455     4...|{..&.v~.RU.
   12954:	cecf e33b 102f 113a bdb6 2a1c b7df d5aa     ..;./.:....*....
   12964:	f877 0298 9a2c 46a3 99dd 9b65 2ba7 09ac     w...,..F..e..+..
   12974:	1681 fd27 6213 6e6c 714f e8e0 b9b2 6870     ..'..blnOq....ph
   12984:	f6da e461 22fb c1f2 d2ee 0c90 b3bf f1a2     ..a.."..........
   12994:	3351 eb91 0ef9 6bef c031 1fd6 c7b5 9d6a     Q3.....k1.....j.
   129a4:	54b8 b0cc 7973 2d32 047f fe96 ec8a 5dcd     .T..sy2-.......]
   129b4:	72de 1d43 4818 8df3 c380 424e 3dd7 b49c     .rC..H....NB.=..
   129c4:	ffff ffff                                   ....

000129c8 <_ZTV7Perlins>:
	...
   129d0:	06a5 0000 06b1 0000                         ........

000129d8 <_ZTV14CLEDController>:
	...
   129e0:	2633 0000 2633 0000 2633 0000 2633 0000     3&..3&..3&..3&..

000129f0 <_ZTV15P9813ControllerILh6ELh7EL6EOrder10ELh4EE>:
	...
   129f8:	1551 0000 186b 0000 11e9 0000 0ae5 0000     Q...k...........

00012a08 <_ZTV15P9813ControllerILh8ELh9EL6EOrder10ELh4EE>:
	...
   12a10:	1467 0000 176f 0000 10c9 0000 0ab9 0000     g...o...........

00012a20 <_ZTV15P9813ControllerILh10ELh11EL6EOrder10ELh4EE>:
	...
   12a28:	137d 0000 1673 0000 0fb1 0000 0a8d 0000     }...s...........
   12a38:	7570 7072 656c 6f00 6172 676e 0065 6877     purple.orange.wh
   12a48:	7469 0065 6f6d 6564 6320 756f 746e 203a     ite.mode count: 
   12a58:	6425 000a 6f6d 6564 203a 7325 000a 7461     %d..mode: %s..at
   12a68:	6220 6361 2c6b 7320 6174 7472 6e69 2067      back, starting 
   12a78:	766f 7265 ff00 ffff                         over....

00012a80 <_ZTV8BaseMode>:
	...
   12a88:	1985 0000 1991 0000 2633 0000 2633 0000     ........3&..3&..
   12a98:	5348 2856 6425 202c 6425 202c 6425 0a29     HSV(%d, %d, %d).
   12aa8:	ff00 ffff ffff ffff                         ........

00012ab0 <_ZTV9ColorMode>:
	...
   12ab8:	19b5 0000 19c9 0000 19dd 0000 19b1 0000     ................
   12ac8:	656d 746c ff00 ffff                         melt....

00012ad0 <_ZTV8MeltMode>:
	...
   12ad8:	1afd 0000 1b1d 0000 1b31 0000 1af5 0000     ........1.......

00012ae8 <channel2sc1a>:
   12ae8:	0e05 0908 0c0d 0706 040f 1300 9303 921a     ................
   12af8:	c517 8485 8786 ffc4                         ........

00012b00 <_ZTV14HardwareSerial>:
	...
   12b08:	227f 0000 2297 0000 226b 0000 2273 0000     ."..."..k"..s"..
   12b18:	226f 0000 2277 0000 222d 0000 2241 0000     o"..w"..-"..A"..
   12b28:	2261 0000 2265 0000 227b 0000 21fd 0000     a"..e"..{"...!..
   12b38:	2209 0000 2215 0000 2221 0000 22a7 0000     ."..."..!"..."..
   12b48:	228b 0000 0000 0000                         ."......

00012b50 <_ZTV15HardwareSerial2>:
	...
   12b58:	2359 0000 2371 0000 2345 0000 234d 0000     Y#..q#..E#..M#..
   12b68:	2349 0000 2351 0000 230d 0000 2321 0000     I#..Q#...#..!#..
   12b78:	2341 0000 2265 0000 2355 0000 22dd 0000     A#..e"..U#..."..
   12b88:	22e9 0000 22f5 0000 2301 0000 2381 0000     ."..."...#...#..
   12b98:	2365 0000 0000 0000                         e#......

00012ba0 <_ZTV15HardwareSerial3>:
	...
   12ba8:	2431 0000 2449 0000 241d 0000 2425 0000     1$..I$...$..%$..
   12bb8:	2421 0000 2429 0000 23e5 0000 23f9 0000     !$..)$...#...#..
   12bc8:	2419 0000 2265 0000 242d 0000 23b5 0000     .$..e"..-$...#..
   12bd8:	23c1 0000 23cd 0000 23d9 0000 2459 0000     .#...#...#..Y$..
   12be8:	243d 0000 0000 0000                         =$......

00012bf0 <_ZTV9IPAddress>:
	...
   12bf8:	255b 0000 0000 0000                         [%......

00012c00 <digital_pin_to_info_PGM>:
   12c00:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
   12c10:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
   12c20:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
   12c30:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
   12c40:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
   12c50:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
   12c60:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
   12c70:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
   12c80:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
   12c90:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
   12ca0:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
   12cb0:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
   12cc0:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
   12cd0:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
   12ce0:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
   12cf0:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
   12d00:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
   12d10:	0a0d                                        ..

00012d12 <usb_endpoint_config_table>:
   12d12:	1500 1519 ffff                              ......

00012d18 <usb_descriptor_list>:
   12d18:	0100 0000 841c 1fff 0012 0000 0200 0000     ................
   12d28:	8446 1fff 0043 0000 0300 0000 84a0 1fff     F...C...........
   12d38:	0000 0000 0301 0409 842e 1fff 0000 0000     ................
   12d48:	0302 0409 848a 1fff 0000 0000 0303 0409     ................
   12d58:	84a4 1fff 0000 0000 0000 0000 0000 0000     ................
   12d68:	0000 0000 ffff ffff                         ........

00012d70 <_ZTV16usb_serial_class>:
	...
   12d78:	3fe5 0000 3feb 0000 3fd5 0000 3fd9 0000     .?...?...?...?..
   12d88:	3fdd 0000 3fe1 0000                         .?...?..

00012d90 <_ZTVSt9bad_alloc>:
   12d90:	0000 0000 2da8 0001 4399 0000 43ad 0000     .....-...C...C..
   12da0:	4391 0000 0000 0000                         .C......

00012da8 <_ZTISt9bad_alloc>:
   12da8:	2ec8 0001 2dc4 0001 2df8 0001 7473 3a64     .....-...-..std:
   12db8:	623a 6461 615f 6c6c 636f ff00               :bad_alloc..

00012dc4 <_ZTSSt9bad_alloc>:
   12dc4:	7453 6239 6461 615f 6c6c 636f 0000 0000     St9bad_alloc....
   12dd4:	ffff ffff                                   ....

00012dd8 <_ZTVSt9exception>:
   12dd8:	0000 0000 2df8 0001 482d 0000 4855 0000     .....-..-H..UH..
   12de8:	4845 0000 0000 0000                         EH......

00012df0 <_ZTIN10__cxxabiv115__forced_unwindE>:
   12df0:	2f68 0001 2e90 0001                         h/......

00012df8 <_ZTISt9exception>:
   12df8:	2f68 0001 2e80 0001                         h/......

00012e00 <_ZTSSt13bad_exception>:
   12e00:	7453 3331 6162 5f64 7865 6563 7470 6f69     St13bad_exceptio
   12e10:	006e 0000 7473 3a64 653a 6378 7065 6974     n...std::excepti
   12e20:	6e6f 0000 7473 3a64 623a 6461 655f 6378     on..std::bad_exc
   12e30:	7065 6974 6e6f ff00                         eption..

00012e38 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   12e38:	314e 5f30 635f 7878 6261 7669 3131 5f39     N10__cxxabiv119_
   12e48:	665f 726f 6965 6e67 655f 6378 7065 6974     _foreign_excepti
   12e58:	6e6f 0045                                   onE.

00012e5c <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   12e5c:	2f68 0001 2e38 0001 ffff ffff               h/..8.......

00012e68 <_ZTVSt13bad_exception>:
   12e68:	0000 0000 2eb0 0001 4839 0000 4869 0000     ........9H..iH..
   12e78:	484d 0000 0000 0000                         MH......

00012e80 <_ZTSSt9exception>:
   12e80:	7453 6539 6378 7065 6974 6e6f 0000 0000     St9exception....

00012e90 <_ZTSN10__cxxabiv115__forced_unwindE>:
   12e90:	314e 5f30 635f 7878 6261 7669 3131 5f35     N10__cxxabiv115_
   12ea0:	665f 726f 6563 5f64 6e75 6977 646e 0045     _forced_unwindE.

00012eb0 <_ZTISt13bad_exception>:
   12eb0:	2ec8 0001 2e00 0001 2df8 0001 ffff ffff     .........-......

00012ec0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   12ec0:	0000 0000 2ef0 0001 4ff1 0000 5005 0000     .........O...P..
   12ed0:	5119 0000 511d 0000 51f9 0000 516d 0000     .Q...Q...Q..mQ..
   12ee0:	50ed 0000 5055 0000 5021 0000 0000 0000     .P..UP..!P......

00012ef0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   12ef0:	2ec8 0001 2efc 0001 2f90 0001               ........./..

00012efc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   12efc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   12f0c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   12f1c:	666e 456f 0000 0000                         nfoE....

00012f24 <_ZTISt9type_info>:
   12f24:	2f68 0001 2f2c 0001                         h/..,/..

00012f2c <_ZTSSt9type_info>:
   12f2c:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   12f3c:	ffff ffff                                   ....

00012f40 <_ZTVSt9type_info>:
   12f40:	0000 0000 2f24 0001 510d 0000 5125 0000     ....$/...Q..%Q..
   12f50:	5119 0000 511d 0000 5169 0000 5121 0000     .Q...Q..iQ..!Q..

00012f60 <_ZTVN10__cxxabiv117__class_type_infoE>:
   12f60:	0000 0000 2f90 0001 51b1 0000 51c5 0000     ...../...Q...Q..
   12f70:	5119 0000 511d 0000 51f9 0000 516d 0000     .Q...Q...Q..mQ..
   12f80:	51e1 0000 521d 0000 51a5 0000 0000 0000     .Q...R...Q......

00012f90 <_ZTIN10__cxxabiv117__class_type_infoE>:
   12f90:	2ec8 0001 2f9c 0001 2f24 0001               ...../..$/..

00012f9c <_ZTSN10__cxxabiv117__class_type_infoE>:
   12f9c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   12fac:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   12fbc:	0045 0000 6574 6d72 6e69 7461 2065 6163     E...terminate ca
   12fcc:	6c6c 6465 7220 6365 7275 6973 6576 796c     lled recursively
   12fdc:	000a 0000 6574 6d72 6e69 7461 2065 6163     ....terminate ca
   12fec:	6c6c 6465 6120 7466 7265 7420 7268 776f     lled after throw
   12ffc:	6e69 2067 6e61 6920 736e 6174 636e 2065     ing an instance 
   1300c:	666f 2720 0000 0000 0a27 0000 6574 6d72     of '....'...term
   1301c:	6e69 7461 2065 6163 6c6c 6465 7720 7469     inate called wit
   1302c:	6f68 7475 6120 206e 6361 6974 6576 6520     hout an active e
   1303c:	6378 7065 6974 6e6f 000a 0000 2020 6877     xception....  wh
   1304c:	7461 2928 203a 0020                         at():  .

00013054 <standard_subs>:
   13054:	0074 0000 37c0 0001 0003 0000 37c0 0001     t....7.......7..
   13064:	0003 0000 0000 0000 0000 0000 0061 0000     ............a...
   13074:	3aac 0001 000e 0000 3aac 0001 000e 0000     .:.......:......
   13084:	3abc 0001 0009 0000 0062 0000 3ac8 0001     .:......b....:..
   13094:	0011 0000 3ac8 0001 0011 0000 3adc 0001     .....:.......:..
   130a4:	000c 0000 0073 0000 3aec 0001 000b 0000     ....s....:......
   130b4:	3af8 0001 0046 0000 3adc 0001 000c 0000     .:..F....:......
   130c4:	0069 0000 3b40 0001 000c 0000 3b50 0001     i...@;......P;..
   130d4:	0031 0000 3b84 0001 000d 0000 006f 0000     1....;......o...
   130e4:	3b94 0001 000c 0000 3ba4 0001 0031 0000     .;.......;..1...
   130f4:	3bd8 0001 000d 0000 0064 0000 3be8 0001     .;......d....;..
   13104:	000d 0000 3bf8 0001 0032 0000 3c2c 0001     .....;..2...,<..
   13114:	000e 0000                                   ....

00013118 <cplus_demangle_builtin_types>:
   13118:	3e24 0001 000b 0000 3e24 0001 000b 0000     $>......$>......
   13128:	0000 0000 3e30 0001 0004 0000 3e38 0001     ....0>......8>..
   13138:	0007 0000 0007 0000 3e40 0001 0004 0000     ........@>......
   13148:	3e48 0001 0004 0000 0000 0000 3e50 0001     H>..........P>..
   13158:	0006 0000 3e50 0001 0006 0000 0008 0000     ....P>..........
   13168:	3e58 0001 000b 0000 3e58 0001 000b 0000     X>......X>......
   13178:	0008 0000 3e64 0001 0005 0000 3e64 0001     ....d>......d>..
   13188:	0005 0000 0008 0000 3e6c 0001 000a 0000     ........l>......
   13198:	3e6c 0001 000a 0000 0008 0000 3e78 0001     l>..........x>..
   131a8:	000d 0000 3e78 0001 000d 0000 0000 0000     ....x>..........
   131b8:	3e88 0001 0003 0000 3e88 0001 0003 0000     .>.......>......
   131c8:	0001 0000 3e8c 0001 000c 0000 3e9c 0001     .....>.......>..
   131d8:	0008 0000 0002 0000 0000 0000 0000 0000     ................
	...
   131f4:	3ea8 0001 0004 0000 3ea8 0001 0004 0000     .>.......>......
   13204:	0003 0000 3eb0 0001 000d 0000 3eb0 0001     .....>.......>..
   13214:	000d 0000 0004 0000 3ec0 0001 0008 0000     .........>......
   13224:	3ec0 0001 0008 0000 0000 0000 3ecc 0001     .>...........>..
   13234:	0011 0000 3ecc 0001 0011 0000 0000 0000     .....>..........
	...
   13280:	3ee0 0001 0005 0000 3ee0 0001 0005 0000     .>.......>......
   13290:	0000 0000 3ee8 0001 000e 0000 3ee8 0001     .....>.......>..
   132a0:	000e 0000 0000 0000 0000 0000 0000 0000     ................
	...
   132bc:	3ef8 0001 0004 0000 3ef8 0001 0004 0000     .>.......>......
   132cc:	0009 0000 3f00 0001 0007 0000 3e40 0001     .....?......@>..
   132dc:	0004 0000 0000 0000 3f08 0001 0009 0000     .........?......
   132ec:	3ea8 0001 0004 0000 0005 0000 3f14 0001     .>...........?..
   132fc:	0012 0000 3f14 0001 0012 0000 0006 0000     .....?..........
   1330c:	39dc 0001 0003 0000 39dc 0001 0003 0000     .9.......9......
   1331c:	0000 0000 3f28 0001 0009 0000 3f28 0001     ....(?......(?..
   1332c:	0009 0000 0000 0000 3f34 0001 0009 0000     ........4?......
   1333c:	3f34 0001 0009 0000 0000 0000 3f40 0001     4?..........@?..
   1334c:	000a 0000 3f40 0001 000a 0000 0000 0000     ....@?..........
   1335c:	3f4c 0001 0004 0000 3f4c 0001 0004 0000     L?......L?......
   1336c:	0008 0000 3f54 0001 0008 0000 3f54 0001     ....T?......T?..
   1337c:	0008 0000 0000 0000 3f60 0001 0008 0000     ........`?......
   1338c:	3f60 0001 0008 0000 0000 0000 3f6c 0001     `?..........l?..
   1339c:	0011 0000 3f6c 0001 0011 0000 0000 0000     ....l?..........

000133ac <cplus_demangle_operators>:
   133ac:	3c3c 0001 3c40 0001 0002 0000 0002 0000     <<..@<..........
   133bc:	3c44 0001 3c48 0001 0001 0000 0002 0000     D<..H<..........
   133cc:	3c4c 0001 3a80 0001 0002 0000 0002 0000     L<...:..........
   133dc:	398c 0001 3c50 0001 0001 0000 0001 0000     .9..P<..........
   133ec:	3c54 0001 3c50 0001 0001 0000 0002 0000     T<..P<..........
   133fc:	3c58 0001 3c5c 0001 0008 0000 0001 0000     X<..\<..........
   1340c:	3c68 0001 3c5c 0001 0008 0000 0001 0000     h<..\<..........
   1341c:	3c6c 0001 3c70 0001 000a 0000 0002 0000     l<..p<..........
   1342c:	37d0 0001 3c7c 0001 0002 0000 0002 0000     .7..|<..........
   1343c:	3c80 0001 3c84 0001 0001 0000 0002 0000     .<...<..........
   1344c:	3c88 0001 3c8c 0001 0001 0000 0001 0000     .<...<..........
   1345c:	3c90 0001 3c94 0001 0002 0000 0002 0000     .<...<..........
   1346c:	3c98 0001 3c9c 0001 0009 0000 0001 0000     .<...<..........
   1347c:	3ca8 0001 3cac 0001 000c 0000 0002 0000     .<...<..........
   1348c:	3cbc 0001 3cc0 0001 0001 0000 0001 0000     .<...<..........
   1349c:	3cc4 0001 3cc8 0001 0007 0000 0001 0000     .<...<..........
   134ac:	3cd0 0001 3cd4 0001 0002 0000 0002 0000     .<...<..........
   134bc:	37d4 0001 3cd8 0001 0001 0000 0002 0000     .7...<..........
   134cc:	3cdc 0001 3ce0 0001 0001 0000 0002 0000     .<...<..........
   134dc:	3ce4 0001 3ce8 0001 0002 0000 0002 0000     .<...<..........
   134ec:	3cec 0001 3cf0 0001 0001 0000 0002 0000     .<...<..........
   134fc:	3cf4 0001 3cf8 0001 0002 0000 0002 0000     .<...<..........
   1350c:	3cfc 0001 3d00 0001 0002 0000 0002 0000     .<...=..........
   1351c:	3990 0001 37e8 0001 0002 0000 0001 0000     .9...7..........
   1352c:	3d04 0001 3b80 0001 0001 0000 0002 0000     .=...;..........
   1353c:	3994 0001 380c 0001 0002 0000 0002 0000     .9...8..........
   1354c:	3d08 0001 3d0c 0001 0003 0000 0002 0000     .=...=..........
   1355c:	3e54 0001 3d10 0001 0002 0000 0002 0000     T>...=..........
   1356c:	37cc 0001 3d14 0001 000b 0000 0001 0000     .7...=..........
   1357c:	3d20 0001 3d24 0001 0002 0000 0002 0000      =..$=..........
   1358c:	3d28 0001 3d2c 0001 0001 0000 0002 0000     (=..,=..........
   1359c:	3d30 0001 3d34 0001 0002 0000 0002 0000     0=..4=..........
   135ac:	3d38 0001 3d3c 0001 0002 0000 0002 0000     8=..<=..........
   135bc:	3d40 0001 3d44 0001 0001 0000 0002 0000     @=..D=..........
   135cc:	3d48 0001 3cc0 0001 0001 0000 0002 0000     H=...<..........
   135dc:	3d4c 0001 3d50 0001 0002 0000 0001 0000     L=..P=..........
   135ec:	3d54 0001 3d58 0001 0005 0000 0003 0000     T=..X=..........
   135fc:	3d60 0001 3d64 0001 0002 0000 0002 0000     `=..d=..........
   1360c:	3f24 0001 3d44 0001 0001 0000 0001 0000     $?..D=..........
   1361c:	3d68 0001 3d6c 0001 0001 0000 0001 0000     h=..l=..........
   1362c:	3d70 0001 3d74 0001 0003 0000 0003 0000     p=..t=..........
   1363c:	3d78 0001 3d7c 0001 0002 0000 0002 0000     x=..|=..........
   1364c:	3d80 0001 3d84 0001 0002 0000 0002 0000     .=...=..........
   1365c:	3ab8 0001 3d88 0001 0001 0000 0002 0000     .:...=..........
   1366c:	3d8c 0001 3d90 0001 0002 0000 0002 0000     .=...=..........
   1367c:	3d94 0001 3d98 0001 0001 0000 0002 0000     .=...=..........
   1368c:	3d9c 0001 3da0 0001 0003 0000 0002 0000     .=...=..........
   1369c:	3da4 0001 3da8 0001 0002 0000 0001 0000     .=...=..........
   136ac:	3dac 0001 3d98 0001 0001 0000 0001 0000     .=...=..........
   136bc:	37d8 0001 3db0 0001 0002 0000 0002 0000     .7...=..........
   136cc:	37dc 0001 3db4 0001 0001 0000 0003 0000     .7...=..........
   136dc:	3db8 0001 3dbc 0001 0002 0000 0002 0000     .=...=..........
   136ec:	3dc0 0001 3dc4 0001 0003 0000 0002 0000     .=...=..........
   136fc:	3dc8 0001 3dcc 0001 0010 0000 0002 0000     .=...=..........
   1370c:	3de0 0001 3de4 0001 0001 0000 0002 0000     .=...=..........
   1371c:	3de8 0001 3dec 0001 0002 0000 0002 0000     .=...=..........
   1372c:	3df0 0001 3df4 0001 000b 0000 0002 0000     .=...=..........
   1373c:	3c78 0001 3e00 0001 0007 0000 0001 0000     x<...>..........
   1374c:	3e08 0001 3e00 0001 0007 0000 0001 0000     .>...>..........
   1375c:	3e0c 0001 3e10 0001 0005 0000 0000 0000     .>...>..........
   1376c:	3e18 0001 3e1c 0001 0006 0000 0001 0000     .>...>..........
	...
   1378c:	475f 4f4c 4142 5f4c 0000 0000 6128 6f6e     _GLOBAL_....(ano
   1379c:	796e 6f6d 7375 6e20 6d61 7365 6170 6563     nymous namespace
   137ac:	0029 0000 7473 6972 676e 6c20 7469 7265     )...string liter
   137bc:	6c61 0000 7473 0064 7561 6f74 0000 0000     al..std.auto....
   137cc:	696c 0000 6c63 0000 7464 0000 7470 0000     li..cl..dt..pt..
   137dc:	7571 0000 615b 6962 003a 0000 3a3a 0000     qu..[abi:...::..
   137ec:	647b 6665 7561 746c 6120 6772 0023 0000     {default arg#...
   137fc:	6c25 0064 3a7d 003a 414a 7272 7961 0000     %ld.}::.JArray..
   1380c:	5d5b 0000 7476 6261 656c 6620 726f 0020     []..vtable for .
   1381c:	5456 2054 6f66 2072 0000 0000 6f63 736e     VTT for ....cons
   1382c:	7274 6375 6974 6e6f 7620 6174 6c62 2065     truction vtable 
   1383c:	6f66 2072 0000 0000 692d 2d6e 0000 0000     for ....-in-....
   1384c:	7974 6570 6e69 6f66 6620 726f 0020 0000     typeinfo for ...
   1385c:	7974 6570 6e69 6f66 6e20 6d61 2065 6f66     typeinfo name fo
   1386c:	2072 0000 7974 6570 6e69 6f66 6620 206e     r ..typeinfo fn 
   1387c:	6f66 2072 0000 0000 6f6e 2d6e 6976 7472     for ....non-virt
   1388c:	6175 206c 6874 6e75 206b 6f74 0020 0000     ual thunk to ...
   1389c:	6f63 6176 6972 6e61 2074 6572 7574 6e72     covariant return
   138ac:	7420 7568 6b6e 7420 206f 0000 616a 6176      thunk to ..java
   138bc:	4320 616c 7373 6620 726f 0020 7567 7261      Class for .guar
   138cc:	2064 6176 6972 6261 656c 6620 726f 0020     d variable for .
   138dc:	4c54 2053 6e69 7469 6620 6e75 7463 6f69     TLS init functio
   138ec:	206e 6f66 2072 0000 4c54 2053 7277 7061     n for ..TLS wrap
   138fc:	6570 2072 7566 636e 6974 6e6f 6620 726f     per function for
   1390c:	0020 0000 6572 6566 6572 636e 2065 6574      ...reference te
   1391c:	706d 726f 7261 2079 0023 0000 6968 6464     mporary #...hidd
   1392c:	6e65 6120 696c 7361 6620 726f 0020 0000     en alias for ...
   1393c:	6f6e 2d6e 7274 6e61 6173 7463 6f69 206e     non-transaction 
   1394c:	6c63 6e6f 2065 6f66 2072 0000 535f 7461     clone for .._Sat
   1395c:	0020 0000 415f 6363 6d75 0000 465f 6172      ..._Accum.._Fra
   1396c:	7463 0000 202c 0000 706f 7265 7461 726f     ct.., ..operator
   1397c:	0000 0000 706f 7265 7461 726f 0020 0000     ....operator ...
   1398c:	6461 0000 7367 0000 7869 0000 3a20 0020     ad..gs..ix.. : .
   1399c:	656e 2077 0000 0000 6c75 0000 6c6c 0000     new ....ul..ll..
   139ac:	6c75 006c 6166 736c 0065 0000 7274 6575     ull.false...true
   139bc:	0000 0000 616a 6176 7220 7365 756f 6372     ....java resourc
   139cc:	2065 0000 6564 6c63 7974 6570 2820 0000     e ..decltype (..
   139dc:	2e2e 002e 6874 7369 0000 0000 707b 7261     ....this....{par
   139ec:	236d 0000 6c67 626f 6c61 6320 6e6f 7473     m#..global const
   139fc:	7572 7463 726f 2073 656b 6579 2064 6f74     ructors keyed to
   13a0c:	0020 0000 6c67 626f 6c61 6420 7365 7274      ...global destr
   13a1c:	6375 6f74 7372 6b20 7965 6465 7420 206f     uctors keyed to 
   13a2c:	0000 0000 6c7b 6d61 6462 2861 0000 0000     ....{lambda(....
   13a3c:	2329 0000 757b 6e6e 6d61 6465 7420 7079     )#..{unnamed typ
   13a4c:	2365 0000 5b20 6c63 6e6f 2065 0000 0000     e#.. [clone ....
   13a5c:	283e 0000 7220 7365 7274 6369 0074 0000     >(.. restrict...
   13a6c:	7620 6c6f 7461 6c69 0065 0000 6320 6e6f      volatile... con
   13a7c:	7473 0000 2626 0000 6f63 706d 656c 2078     st..&&..complex 
   13a8c:	0000 0000 6d69 6761 6e69 7261 2079 0000     ....imaginary ..
   13a9c:	3a3a 002a 5f20 765f 6365 6f74 2872 0000     ::*. __vector(..
   13aac:	7473 3a64 613a 6c6c 636f 7461 726f 0000     std::allocator..
   13abc:	6c61 6f6c 6163 6f74 0072 0000 7473 3a64     allocator...std:
   13acc:	623a 7361 6369 735f 7274 6e69 0067 0000     :basic_string...
   13adc:	6162 6973 5f63 7473 6972 676e 0000 0000     basic_string....
   13aec:	7473 3a64 733a 7274 6e69 0067 7473 3a64     std::string.std:
   13afc:	623a 7361 6369 735f 7274 6e69 3c67 6863     :basic_string<ch
   13b0c:	7261 202c 7473 3a64 633a 6168 5f72 7274     ar, std::char_tr
   13b1c:	6961 7374 633c 6168 3e72 202c 7473 3a64     aits<char>, std:
   13b2c:	613a 6c6c 636f 7461 726f 633c 6168 3e72     :allocator<char>
   13b3c:	3e20 0000 7473 3a64 693a 7473 6572 6d61      >..std::istream
   13b4c:	0000 0000 7473 3a64 623a 7361 6369 695f     ....std::basic_i
   13b5c:	7473 6572 6d61 633c 6168 2c72 7320 6474     stream<char, std
   13b6c:	3a3a 6863 7261 745f 6172 7469 3c73 6863     ::char_traits<ch
   13b7c:	7261 203e 003e 0000 6162 6973 5f63 7369     ar> >...basic_is
   13b8c:	7274 6165 006d 0000 7473 3a64 6f3a 7473     tream...std::ost
   13b9c:	6572 6d61 0000 0000 7473 3a64 623a 7361     ream....std::bas
   13bac:	6369 6f5f 7473 6572 6d61 633c 6168 2c72     ic_ostream<char,
   13bbc:	7320 6474 3a3a 6863 7261 745f 6172 7469      std::char_trait
   13bcc:	3c73 6863 7261 203e 003e 0000 6162 6973     s<char> >...basi
   13bdc:	5f63 736f 7274 6165 006d 0000 7473 3a64     c_ostream...std:
   13bec:	693a 736f 7274 6165 006d 0000 7473 3a64     :iostream...std:
   13bfc:	623a 7361 6369 695f 736f 7274 6165 3c6d     :basic_iostream<
   13c0c:	6863 7261 202c 7473 3a64 633a 6168 5f72     char, std::char_
   13c1c:	7274 6961 7374 633c 6168 3e72 3e20 0000     traits<char> >..
   13c2c:	6162 6973 5f63 6f69 7473 6572 6d61 0000     basic_iostream..
   13c3c:	4e61 0000 3d26 0000 5361 0000 003d 0000     aN..&=..aS..=...
   13c4c:	6161 0000 0026 0000 6e61 0000 7461 0000     aa..&...an..at..
   13c5c:	6c61 6769 6f6e 2066 0000 0000 7a61 0000     alignof ....az..
   13c6c:	6363 0000 6f63 736e 5f74 6163 7473 0000     cc..const_cast..
   13c7c:	2928 0000 6d63 0000 002c 0000 6f63 0000     ()..cm..,...co..
   13c8c:	007e 0000 5664 0000 3d2f 0000 6164 0000     ~...dV../=..da..
   13c9c:	6564 656c 6574 5d5b 0020 0000 6364 0000     delete[] ...dc..
   13cac:	7964 616e 696d 5f63 6163 7473 0000 0000     dynamic_cast....
   13cbc:	6564 0000 002a 0000 6c64 0000 6564 656c     de..*...dl..dele
   13ccc:	6574 0020 7364 0000 2a2e 0000 002e 0000     te .ds...*......
   13cdc:	7664 0000 002f 0000 4f65 0000 3d5e 0000     dv../...eO..^=..
   13cec:	6f65 0000 005e 0000 7165 0000 3d3d 0000     eo..^...eq..==..
   13cfc:	6567 0000 3d3e 0000 7467 0000 536c 0000     ge..>=..gt..lS..
   13d0c:	3c3c 003d 3d3c 0000 706f 7265 7461 726f     <<=.<=..operator
   13d1c:	2222 0020 736c 0000 3c3c 0000 746c 0000     "" .ls..<<..lt..
   13d2c:	003c 0000 496d 0000 3d2d 0000 4c6d 0000     <...mI..-=..mL..
   13d3c:	3d2a 0000 696d 0000 002d 0000 6c6d 0000     *=..mi..-...ml..
   13d4c:	6d6d 0000 2d2d 0000 616e 0000 656e 5b77     mm..--..na..new[
   13d5c:	005d 0000 656e 0000 3d21 0000 746e 0000     ]...ne..!=..nt..
   13d6c:	0021 0000 776e 0000 656e 0077 526f 0000     !...nw..new.oR..
   13d7c:	3d7c 0000 6f6f 0000 7c7c 0000 007c 0000     |=..oo..||..|...
   13d8c:	4c70 0000 3d2b 0000 6c70 0000 002b 0000     pL..+=..pl..+...
   13d9c:	6d70 0000 3e2d 002a 7070 0000 2b2b 0000     pm..->*.pp..++..
   13dac:	7370 0000 3e2d 0000 003f 0000 4d72 0000     ps..->..?...rM..
   13dbc:	3d25 0000 5372 0000 3e3e 003d 6372 0000     %=..rS..>>=.rc..
   13dcc:	6572 6e69 6574 7072 6572 5f74 6163 7473     reinterpret_cast
   13ddc:	0000 0000 6d72 0000 0025 0000 7372 0000     ....rm..%...rs..
   13dec:	3e3e 0000 6373 0000 7473 7461 6369 635f     >>..sc..static_c
   13dfc:	7361 0074 6973 657a 666f 0020 7a73 0000     ast.sizeof .sz..
   13e0c:	7274 0000 6874 6f72 0077 0000 7774 0000     tr..throw...tw..
   13e1c:	6874 6f72 2077 0000 6973 6e67 6465 6320     throw ..signed c
   13e2c:	6168 0072 6f62 6c6f 0000 0000 6f62 6c6f     har.bool....bool
   13e3c:	6165 006e 6863 7261 0000 0000 7962 6574     ean.char....byte
   13e4c:	0000 0000 6f64 6275 656c 0000 6f6c 676e     ....double..long
   13e5c:	6420 756f 6c62 0065 6c66 616f 0074 0000      double.float...
   13e6c:	5f5f 6c66 616f 3174 3832 0000 6e75 6973     __float128..unsi
   13e7c:	6e67 6465 6320 6168 0072 0000 6e69 0074     gned char...int.
   13e8c:	6e75 6973 6e67 6465 6920 746e 0000 0000     unsigned int....
   13e9c:	6e75 6973 6e67 6465 0000 0000 6f6c 676e     unsigned....long
   13eac:	0000 0000 6e75 6973 6e67 6465 6c20 6e6f     ....unsigned lon
   13ebc:	0067 0000 5f5f 6e69 3174 3832 0000 0000     g...__int128....
   13ecc:	6e75 6973 6e67 6465 5f20 695f 746e 3231     unsigned __int12
   13edc:	0038 0000 6873 726f 0074 0000 6e75 6973     8...short...unsi
   13eec:	6e67 6465 7320 6f68 7472 0000 6f76 6469     gned short..void
   13efc:	0000 0000 6377 6168 5f72 0074 6f6c 676e     ....wchar_t.long
   13f0c:	6c20 6e6f 0067 0000 6e75 6973 6e67 6465      long...unsigned
   13f1c:	6c20 6e6f 2067 6f6c 676e 0000 6564 6963      long long..deci
   13f2c:	616d 336c 0032 0000 6564 6963 616d 366c     mal32...decimal6
   13f3c:	0034 0000 6564 6963 616d 316c 3832 0000     4...decimal128..
   13f4c:	6168 666c 0000 0000 6863 7261 3631 745f     half....char16_t
   13f5c:	0000 0000 6863 7261 3233 745f 0000 0000     ....char32_t....
   13f6c:	6564 6c63 7974 6570 6e28 6c75 706c 7274     decltype(nullptr
   13f7c:	0029 ffff                                   )...

00013f80 <npio2_hw>:
   13f80:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   13f90:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   13fa0:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   13fb0:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   13fc0:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   13fd0:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   13fe0:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   13ff0:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

00014000 <two_over_pi>:
   14000:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   14010:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   14020:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   14030:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   14040:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   14050:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   14060:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   14070:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   14080:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   14090:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   140a0:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   140b0:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   140c0:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   140d0:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   140e0:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   140f0:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   14100:	e27b 0060 8c6b 00c0                         {.`.k...

00014108 <init_jk>:
   14108:	0002 0000 0003 0000 0004 0000 0006 0000     ................

00014118 <PIo2>:
   14118:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   14128:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   14138:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   14148:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5
   14158:	0043 ffff                                   C...

0001415c <_global_impure_ptr>:
   1415c:	84c8 1fff                                   ....

00014160 <zeroes.6763>:
   14160:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   14170:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
   14180:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   14190:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   141a0:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
   141b0:	0030 ffff                                   0...

000141b4 <blanks.6762>:
   141b4:	2020 2020 2020 2020 2020 2020 2020 2020                     
   141c4:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   141d4:	4f50 4953 0058 0000 ffff ffff               POSIX.......

000141e0 <__mprec_tens>:
   141e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   141f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   14200:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   14210:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   14220:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   14230:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   14240:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   14250:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   14260:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   14270:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   14280:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   14290:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   142a0:	9db4 79d9 7843 44ea                         ...yCx.D

000142a8 <__mprec_bigtens>:
   142a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   142b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   142c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000142d0 <p05.5269>:
   142d0:	0005 0000 0019 0000 007d 0000               ........}...

000142dc <_init>:
   142dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142de:	bf00      	nop
   142e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   142e2:	bc08      	pop	{r3}
   142e4:	469e      	mov	lr, r3
   142e6:	4770      	bx	lr

000142e8 <__init_array_start>:
   142e8:	000103c1 	.word	0x000103c1

000142ec <__frame_dummy_init_array_entry>:
   142ec:	00000435 000004f1 00001969 000022c1     5.......i...."..
   142fc:	00002399 00002471 0000259d 00003729     .#..q$...%..)7..
   1430c:	00003ff5                                .?..

Disassembly of section .fini:

00014310 <_fini>:
   14310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14312:	bf00      	nop
